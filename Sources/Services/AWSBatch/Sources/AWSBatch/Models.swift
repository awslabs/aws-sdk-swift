//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

extension BatchClientTypes {

    public enum ArrayJobDependency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case nToN
        case sequential
        case sdkUnknown(Swift.String)

        public static var allCases: [ArrayJobDependency] {
            return [
                .nToN,
                .sequential
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .nToN: return "N_TO_N"
            case .sequential: return "SEQUENTIAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// An object that represents an Batch array job.
    public struct ArrayProperties {
        /// The size of the array job.
        public var size: Swift.Int?

        public init(
            size: Swift.Int? = nil
        )
        {
            self.size = size
        }
    }

}

extension BatchClientTypes {
    /// An object that represents the array properties of a job.
    public struct ArrayPropertiesDetail {
        /// The job index within the array that's associated with this job. This parameter is returned for array job children.
        public var index: Swift.Int?
        /// The size of the array job. This parameter is returned for parent array jobs.
        public var size: Swift.Int?
        /// A summary of the number of array job children in each available job status. This parameter is returned for parent array jobs.
        public var statusSummary: [Swift.String: Swift.Int]?

        public init(
            index: Swift.Int? = nil,
            size: Swift.Int? = nil,
            statusSummary: [Swift.String: Swift.Int]? = nil
        )
        {
            self.index = index
            self.size = size
            self.statusSummary = statusSummary
        }
    }

}

extension BatchClientTypes {
    /// An object that represents the array properties of a job.
    public struct ArrayPropertiesSummary {
        /// The job index within the array that's associated with this job. This parameter is returned for children of array jobs.
        public var index: Swift.Int?
        /// The size of the array job. This parameter is returned for parent array jobs.
        public var size: Swift.Int?

        public init(
            index: Swift.Int? = nil,
            size: Swift.Int? = nil
        )
        {
            self.index = index
            self.size = size
        }
    }

}

extension BatchClientTypes {

    public enum AssignPublicIp: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AssignPublicIp] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// An object that represents the elastic network interface for a multi-node parallel job node.
    public struct NetworkInterface {
        /// The attachment ID for the network interface.
        public var attachmentId: Swift.String?
        /// The private IPv6 address for the network interface.
        public var ipv6Address: Swift.String?
        /// The private IPv4 address for the network interface.
        public var privateIpv4Address: Swift.String?

        public init(
            attachmentId: Swift.String? = nil,
            ipv6Address: Swift.String? = nil,
            privateIpv4Address: Swift.String? = nil
        )
        {
            self.attachmentId = attachmentId
            self.ipv6Address = ipv6Address
            self.privateIpv4Address = privateIpv4Address
        }
    }

}

extension BatchClientTypes {
    /// An object that represents the details of a container that's part of a job attempt.
    public struct AttemptContainerDetail {
        /// The Amazon Resource Name (ARN) of the Amazon ECS container instance that hosts the job attempt.
        public var containerInstanceArn: Swift.String?
        /// The exit code for the job attempt. A non-zero exit code is considered failed.
        public var exitCode: Swift.Int?
        /// The name of the CloudWatch Logs log stream that's associated with the container. The log group for Batch jobs is /aws/batch/job. Each container attempt receives a log stream name when they reach the RUNNING status.
        public var logStreamName: Swift.String?
        /// The network interfaces that are associated with the job attempt.
        public var networkInterfaces: [BatchClientTypes.NetworkInterface]?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public var reason: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon ECS task that's associated with the job attempt. Each container attempt receives a task ARN when they reach the STARTING status.
        public var taskArn: Swift.String?

        public init(
            containerInstanceArn: Swift.String? = nil,
            exitCode: Swift.Int? = nil,
            logStreamName: Swift.String? = nil,
            networkInterfaces: [BatchClientTypes.NetworkInterface]? = nil,
            reason: Swift.String? = nil,
            taskArn: Swift.String? = nil
        )
        {
            self.containerInstanceArn = containerInstanceArn
            self.exitCode = exitCode
            self.logStreamName = logStreamName
            self.networkInterfaces = networkInterfaces
            self.reason = reason
            self.taskArn = taskArn
        }
    }

}

extension BatchClientTypes {
    /// An object that represents the details of a container that's part of a job attempt.
    public struct AttemptTaskContainerDetails {
        /// The exit code for the containerâ€™s attempt. A non-zero exit code is considered failed.
        public var exitCode: Swift.Int?
        /// The name of the Amazon CloudWatch Logs log stream that's associated with the container. The log group for Batch jobs is /aws/batch/job. Each container attempt receives a log stream name when they reach the RUNNING status.
        public var logStreamName: Swift.String?
        /// The name of a container.
        public var name: Swift.String?
        /// The network interfaces that are associated with the job attempt.
        public var networkInterfaces: [BatchClientTypes.NetworkInterface]?
        /// A short (255 max characters) string that's easy to understand and provides additional details for a running or stopped container.
        public var reason: Swift.String?

        public init(
            exitCode: Swift.Int? = nil,
            logStreamName: Swift.String? = nil,
            name: Swift.String? = nil,
            networkInterfaces: [BatchClientTypes.NetworkInterface]? = nil,
            reason: Swift.String? = nil
        )
        {
            self.exitCode = exitCode
            self.logStreamName = logStreamName
            self.name = name
            self.networkInterfaces = networkInterfaces
            self.reason = reason
        }
    }

}

extension BatchClientTypes {
    /// An object that represents the details of a task.
    public struct AttemptEcsTaskDetails {
        /// The Amazon Resource Name (ARN) of the container instance that hosts the task.
        public var containerInstanceArn: Swift.String?
        /// A list of containers that are included in the taskProperties list.
        public var containers: [BatchClientTypes.AttemptTaskContainerDetails]?
        /// The ARN of the Amazon ECS task.
        public var taskArn: Swift.String?

        public init(
            containerInstanceArn: Swift.String? = nil,
            containers: [BatchClientTypes.AttemptTaskContainerDetails]? = nil,
            taskArn: Swift.String? = nil
        )
        {
            self.containerInstanceArn = containerInstanceArn
            self.containers = containers
            self.taskArn = taskArn
        }
    }

}

extension BatchClientTypes {
    /// An object that represents a job attempt.
    public struct AttemptDetail {
        /// The details for the container in this job attempt.
        public var container: BatchClientTypes.AttemptContainerDetail?
        /// The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the STARTING state to the RUNNING state).
        public var startedAt: Swift.Int?
        /// A short, human-readable string to provide additional details for the current status of the job attempt.
        public var statusReason: Swift.String?
        /// The Unix timestamp (in milliseconds) for when the attempt was stopped (when the attempt transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED).
        public var stoppedAt: Swift.Int?
        /// The properties for a task definition that describes the container and volume definitions of an Amazon ECS task.
        public var taskProperties: [BatchClientTypes.AttemptEcsTaskDetails]?

        public init(
            container: BatchClientTypes.AttemptContainerDetail? = nil,
            startedAt: Swift.Int? = nil,
            statusReason: Swift.String? = nil,
            stoppedAt: Swift.Int? = nil,
            taskProperties: [BatchClientTypes.AttemptEcsTaskDetails]? = nil
        )
        {
            self.container = container
            self.startedAt = startedAt
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
            self.taskProperties = taskProperties
        }
    }

}

/// These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
public struct ClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClientException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// These errors are usually caused by a server issue.
public struct ServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Contains the parameters for CancelJob.
public struct CancelJobInput {
    /// The Batch job ID of the job to cancel.
    /// This member is required.
    public var jobId: Swift.String?
    /// A message to attach to the job that explains the reason for canceling it. This message is returned by future [DescribeJobs] operations on the job. This message is also recorded in the Batch activity logs.
    /// This member is required.
    public var reason: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.reason = reason
    }
}

public struct CancelJobOutput {

    public init() { }
}

extension BatchClientTypes {

    public enum CRAllocationStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bestFit
        case bestFitProgressive
        case spotCapacityOptimized
        case spotPriceCapacityOptimized
        case sdkUnknown(Swift.String)

        public static var allCases: [CRAllocationStrategy] {
            return [
                .bestFit,
                .bestFitProgressive,
                .spotCapacityOptimized,
                .spotPriceCapacityOptimized
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bestFit: return "BEST_FIT"
            case .bestFitProgressive: return "BEST_FIT_PROGRESSIVE"
            case .spotCapacityOptimized: return "SPOT_CAPACITY_OPTIMIZED"
            case .spotPriceCapacityOptimized: return "SPOT_PRICE_CAPACITY_OPTIMIZED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// Provides information used to select Amazon Machine Images (AMIs) for instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2 ([Amazon Linux 2](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami)). This object isn't applicable to jobs that are running on Fargate resources.
    public struct Ec2Configuration {
        /// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the imageId set in the computeResource object. The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the Amazon Elastic Container Service Developer Guide.
        public var imageIdOverride: Swift.String?
        /// The Kubernetes version for the compute environment. If you don't specify a value, the latest version that Batch supports is used.
        public var imageKubernetesVersion: Swift.String?
        /// The image type to match with the instance type to select an AMI. The supported values are different for ECS and EKS resources. ECS If the imageIdOverride parameter isn't specified, then a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) (ECS_AL2) is used. If a new image type is specified in an update, but neither an imageId nor a imageIdOverride parameter is specified, then the latest Amazon ECS optimized AMI for that image type that's supported by Batch is used. ECS_AL2 [Amazon Linux 2](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami): Default for all non-GPU instance families. ECS_AL2_NVIDIA [Amazon Linux 2 (GPU)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#gpuami): Default for all GPU instance families (for example P4 and G4) and can be used for all non Amazon Web Services Graviton-based instance types. ECS_AL2023 [Amazon Linux 2023](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html): Batch supports Amazon Linux 2023. Amazon Linux 2023 does not support A1 instances. ECS_AL1 [Amazon Linux](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#alami). Amazon Linux has reached the end-of-life of standard support. For more information, see [Amazon Linux AMI](http://aws.amazon.com/amazon-linux-ami/). EKS If the imageIdOverride parameter isn't specified, then a recent [Amazon EKS-optimized Amazon Linux AMI](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) (EKS_AL2) is used. If a new image type is specified in an update, but neither an imageId nor a imageIdOverride parameter is specified, then the latest Amazon EKS optimized AMI for that image type that Batch supports is used. EKS_AL2 [Amazon Linux 2](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html): Default for all non-GPU instance families. EKS_AL2_NVIDIA [Amazon Linux 2 (accelerated)](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html): Default for all GPU instance families (for example, P4 and G4) and can be used for all non Amazon Web Services Graviton-based instance types.
        /// This member is required.
        public var imageType: Swift.String?

        public init(
            imageIdOverride: Swift.String? = nil,
            imageKubernetesVersion: Swift.String? = nil,
            imageType: Swift.String? = nil
        )
        {
            self.imageIdOverride = imageIdOverride
            self.imageKubernetesVersion = imageKubernetesVersion
            self.imageType = imageType
        }
    }

}

extension BatchClientTypes {
    /// An object that represents a launch template that's associated with a compute resource. You must specify either the launch template ID or launch template name in the request, but not both. If security groups are specified using both the securityGroupIds parameter of CreateComputeEnvironment and the launch template, the values in the securityGroupIds parameter of CreateComputeEnvironment will be used. This object isn't applicable to jobs that are running on Fargate resources.
    public struct LaunchTemplateSpecification {
        /// The ID of the launch template.
        public var launchTemplateId: Swift.String?
        /// The name of the launch template.
        public var launchTemplateName: Swift.String?
        /// The version number of the launch template, $Latest, or $Default. If the value is $Latest, the latest version of the launch template is used. If the value is $Default, the default version of the launch template is used. If the AMI ID that's used in a compute environment is from the launch template, the AMI isn't changed when the compute environment is updated. It's only changed if the updateToLatestImageVersion parameter for the compute environment is set to true. During an infrastructure update, if either $Latest or $Default is specified, Batch re-evaluates the launch template version, and it might use a different version of the launch template. This is the case even if the launch template isn't specified in the update. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. Default: $Default.
        public var version: Swift.String?

        public init(
            launchTemplateId: Swift.String? = nil,
            launchTemplateName: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }
    }

}

extension BatchClientTypes {

    public enum CRType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2
        case fargate
        case fargateSpot
        case spot
        case sdkUnknown(Swift.String)

        public static var allCases: [CRType] {
            return [
                .ec2,
                .fargate,
                .fargateSpot,
                .spot
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .fargate: return "FARGATE"
            case .fargateSpot: return "FARGATE_SPOT"
            case .spot: return "SPOT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// An object that represents an Batch compute resource. For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
    public struct ComputeResource {
        /// The allocation strategy to use for the compute resource if not enough instances of the best fitting instance type can be allocated. This might be because of availability of the instance type in the Region or [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html). For more information, see [Allocation strategies](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. BEST_FIT (default) Batch selects an instance type that best fits the needs of the jobs with a preference for the lowest-cost instance type. If additional instances of the selected instance type aren't available, Batch waits for the additional instances to be available. If there aren't enough instances available or the user is reaching [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html), additional jobs aren't run until the currently running jobs are completed. This allocation strategy keeps costs lower but can limit scaling. If you're using Spot Fleets with BEST_FIT, the Spot Fleet IAM Role must be specified. Compute resources that use a BEST_FIT allocation strategy don't support infrastructure updates and can't update some parameters. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. BEST_FIT_PROGRESSIVE Batch selects additional instance types that are large enough to meet the requirements of the jobs in the queue. Its preference is for instance types with lower cost vCPUs. If additional instances of the previously selected instance types aren't available, Batch selects new instance types. SPOT_CAPACITY_OPTIMIZED Batch selects one or more instance types that are large enough to meet the requirements of the jobs in the queue. Its preference is for instance types that are less likely to be interrupted. This allocation strategy is only available for Spot Instance compute resources. SPOT_PRICE_CAPACITY_OPTIMIZED The price and capacity optimized allocation strategy looks at both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have the lowest possible price. This allocation strategy is only available for Spot Instance compute resources. With BEST_FIT_PROGRESSIVE,SPOT_CAPACITY_OPTIMIZED and SPOT_PRICE_CAPACITY_OPTIMIZED (recommended) strategies using On-Demand or Spot Instances, and the BEST_FIT strategy using Spot Instances, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance.
        public var allocationStrategy: BatchClientTypes.CRAllocationStrategy?
        /// The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, then the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. If you leave this field empty, the default value is 100% of the On-Demand price. For most use cases, we recommend leaving this field empty. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var bidPercentage: Swift.Int?
        /// The desired number of vCPUS in the compute environment. Batch modifies this value between the minimum and maximum values based on job queue demand. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var desiredvCpus: Swift.Int?
        /// Provides information that's used to select Amazon Machine Images (AMIs) for Amazon EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. One or two values can be provided. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var ec2Configuration: [BatchClientTypes.Ec2Configuration]?
        /// The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to log in to your instances with SSH. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var ec2KeyPair: Swift.String?
        /// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter is overridden by the imageIdOverride member of the Ec2Configuration structure. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the Amazon Elastic Container Service Developer Guide.
        @available(*, deprecated, message: "This field is deprecated, use ec2Configuration[].imageIdOverride instead.")
        public var imageId: Swift.String?
        /// The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. This parameter is required for Amazon EC2 instances types. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example,  ecsInstanceRole  or arn:aws:iam:::instance-profile/ecsInstanceRole . For more information, see [Amazon ECS instance role](https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var instanceRole: Swift.String?
        /// The instances types that can be launched. You can specify instance families to launch any instance type within those families (for example, c5 or p3), or you can specify specific sizes within a family (such as c5.8xlarge). You can also choose optimal to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. When you create a compute environment, the instance types that you select for the compute environment must share the same architecture. For example, you can't mix x86 and ARM instances in the same compute environment. Currently, optimal uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5, and R5 instance families are used.
        public var instanceTypes: [Swift.String]?
        /// The launch template to use for your compute resources. Any other compute resource parameters that you specify in a [CreateComputeEnvironment](https://docs.aws.amazon.com/batch/latest/APIReference/API_CreateComputeEnvironment.html) API operation override the same parameters in the launch template. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see [Launch template support](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var launchTemplate: BatchClientTypes.LaunchTemplateSpecification?
        /// The maximum number of vCPUs that a compute environment can support. With BEST_FIT_PROGRESSIVE,SPOT_CAPACITY_OPTIMIZED and SPOT_PRICE_CAPACITY_OPTIMIZED (recommended) strategies using On-Demand or Spot Instances, and the BEST_FIT strategy using Spot Instances, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance.
        /// This member is required.
        public var maxvCpus: Swift.Int?
        /// The minimum number of vCPUs that a compute environment should maintain (even if the compute environment is DISABLED). This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var minvCpus: Swift.Int?
        /// The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the Amazon EC2 User Guide for Linux Instances. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var placementGroup: Swift.String?
        /// The Amazon EC2 security groups that are associated with instances launched in the compute environment. One or more security groups must be specified, either in securityGroupIds or using a launch template referenced in launchTemplate. This parameter is required for jobs that are running on Fargate resources and must contain at least one security group. Fargate doesn't support launch templates. If security groups are specified using both securityGroupIds and launchTemplate, the values in securityGroupIds are used.
        public var securityGroupIds: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This role is required if the allocation strategy set to BEST_FIT or if the allocation strategy isn't specified. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. To tag your Spot Instances on creation, the Spot Fleet IAM role specified here must use the newer AmazonEC2SpotFleetTaggingRole managed policy. The previously recommended AmazonEC2SpotFleetRole managed policy doesn't have the required permissions to tag Spot Instances. For more information, see [Spot instances not tagged on creation](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#spot-instance-no-tag) in the Batch User Guide.
        public var spotIamFleetRole: Swift.String?
        /// The VPC subnets where the compute resources are launched. These subnets must be within the same VPC. Fargate compute resources can contain up to 16 subnets. For more information, see [VPCs and subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) in the Amazon VPC User Guide. Batch on Amazon EC2 and Batch on Amazon EKS support Local Zones. For more information, see [ Local Zones](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-local-zones) in the Amazon EC2 User Guide for Linux Instances, [Amazon EKS and Amazon Web Services Local Zones](https://docs.aws.amazon.com/eks/latest/userguide/local-zones.html) in the Amazon EKS User Guide and [ Amazon ECS clusters in Local Zones, Wavelength Zones, and Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-regions-zones.html#clusters-local-zones) in the Amazon ECS Developer Guide. Batch on Fargate doesn't currently support Local Zones.
        /// This member is required.
        public var subnets: [Swift.String]?
        /// Key-value pair tags to be applied to Amazon EC2 resources that are launched in the compute environment. For Batch, these take the form of "String1": "String2", where String1 is the tag key and String2 is the tag value-for example, { "Name": "Batch Instance - C4OnDemand" }. This is helpful for recognizing your Batch instances in the Amazon EC2 console. Updating these tags requires an infrastructure update to the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. These tags aren't seen when using the Batch ListTagsForResource API operation. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var tags: [Swift.String: Swift.String]?
        /// The type of compute environment: EC2, SPOT, FARGATE, or FARGATE_SPOT. For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide. If you choose SPOT, you must also specify an Amazon EC2 Spot Fleet role with the spotIamFleetRole parameter. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the Batch User Guide.
        /// This member is required.
        public var type: BatchClientTypes.CRType?

        public init(
            allocationStrategy: BatchClientTypes.CRAllocationStrategy? = nil,
            bidPercentage: Swift.Int? = nil,
            desiredvCpus: Swift.Int? = nil,
            ec2Configuration: [BatchClientTypes.Ec2Configuration]? = nil,
            ec2KeyPair: Swift.String? = nil,
            imageId: Swift.String? = nil,
            instanceRole: Swift.String? = nil,
            instanceTypes: [Swift.String]? = nil,
            launchTemplate: BatchClientTypes.LaunchTemplateSpecification? = nil,
            maxvCpus: Swift.Int? = nil,
            minvCpus: Swift.Int? = nil,
            placementGroup: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            spotIamFleetRole: Swift.String? = nil,
            subnets: [Swift.String]? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            type: BatchClientTypes.CRType? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.bidPercentage = bidPercentage
            self.desiredvCpus = desiredvCpus
            self.ec2Configuration = ec2Configuration
            self.ec2KeyPair = ec2KeyPair
            self.imageId = imageId
            self.instanceRole = instanceRole
            self.instanceTypes = instanceTypes
            self.launchTemplate = launchTemplate
            self.maxvCpus = maxvCpus
            self.minvCpus = minvCpus
            self.placementGroup = placementGroup
            self.securityGroupIds = securityGroupIds
            self.spotIamFleetRole = spotIamFleetRole
            self.subnets = subnets
            self.tags = tags
            self.type = type
        }
    }

}

extension BatchClientTypes {
    /// Configuration for the Amazon EKS cluster that supports the Batch compute environment. The cluster must exist before the compute environment can be created.
    public struct EksConfiguration {
        /// The Amazon Resource Name (ARN) of the Amazon EKS cluster. An example is arn:aws:eks:us-east-1:123456789012:cluster/ClusterForBatch .
        /// This member is required.
        public var eksClusterArn: Swift.String?
        /// The namespace of the Amazon EKS cluster. Batch manages pods in this namespace. The value can't left empty or null. It must be fewer than 64 characters long, can't be set to default, can't start with "kube-," and must match this regular expression: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$. For more information, see [Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) in the Kubernetes documentation.
        /// This member is required.
        public var kubernetesNamespace: Swift.String?

        public init(
            eksClusterArn: Swift.String? = nil,
            kubernetesNamespace: Swift.String? = nil
        )
        {
            self.eksClusterArn = eksClusterArn
            self.kubernetesNamespace = kubernetesNamespace
        }
    }

}

extension BatchClientTypes {

    public enum CEState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CEState] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {

    public enum CEType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case managed
        case unmanaged
        case sdkUnknown(Swift.String)

        public static var allCases: [CEType] {
            return [
                .managed,
                .unmanaged
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .managed: return "MANAGED"
            case .unmanaged: return "UNMANAGED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Contains the parameters for CreateComputeEnvironment.
public struct CreateComputeEnvironmentInput {
    /// The name for your compute environment. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    /// This member is required.
    public var computeEnvironmentName: Swift.String?
    /// Details about the compute resources managed by the compute environment. This parameter is required for managed compute environments. For more information, see [Compute Environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
    public var computeResources: BatchClientTypes.ComputeResource?
    /// Reserved.
    public var context: Swift.String?
    /// The details for the Amazon EKS cluster that supports the compute environment.
    public var eksConfiguration: BatchClientTypes.EksConfiguration?
    /// The full Amazon Resource Name (ARN) of the IAM role that allows Batch to make calls to other Amazon Web Services services on your behalf. For more information, see [Batch service IAM role](https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html) in the Batch User Guide. If your account already created the Batch service-linked role, that role is used by default for your compute environment unless you specify a different role here. If the Batch service-linked role doesn't exist in your account, and no role is specified here, the service attempts to create the Batch service-linked role in your account. If your specified role has a path other than /, then you must specify either the full role ARN (recommended) or prefix the role name with the path. For example, if a role with the name bar has a path of /foo/, specify /foo/bar as the role name. For more information, see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names) in the IAM User Guide. Depending on how you created your Batch service role, its ARN might contain the service-role path prefix. When you only specify the name of the service role, Batch assumes that your ARN doesn't use the service-role path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.
    public var serviceRole: Swift.String?
    /// The state of the compute environment. If the state is ENABLED, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically, based on the job queue demand. If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out. Compute environments in a DISABLED state may continue to incur billing charges. To prevent additional charges, turn off and then delete the compute environment. For more information, see [State](https://docs.aws.amazon.com/batch/latest/userguide/compute_environment_parameters.html#compute_environment_state) in the Batch User Guide. When an instance is idle, the instance scales down to the minvCpus value. However, the instance size doesn't change. For example, consider a c5.8xlarge instance with a minvCpus value of 4 and a desiredvCpus value of 36. This instance doesn't scale down to a c5.large instance.
    public var state: BatchClientTypes.CEState?
    /// The tags that you apply to the compute environment to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in Amazon Web Services General Reference. These tags can be updated or removed using the [TagResource](https://docs.aws.amazon.com/batch/latest/APIReference/API_TagResource.html) and [UntagResource](https://docs.aws.amazon.com/batch/latest/APIReference/API_UntagResource.html) API operations. These tags don't propagate to the underlying compute resources.
    public var tags: [Swift.String: Swift.String]?
    /// The type of the compute environment: MANAGED or UNMANAGED. For more information, see [Compute Environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
    /// This member is required.
    public var type: BatchClientTypes.CEType?
    /// The maximum number of vCPUs for an unmanaged compute environment. This parameter is only used for fair share scheduling to reserve vCPU capacity for new share identifiers. If this parameter isn't provided for a fair share job queue, no vCPU capacity is reserved. This parameter is only supported when the type parameter is set to UNMANAGED.
    public var unmanagedvCpus: Swift.Int?

    public init(
        computeEnvironmentName: Swift.String? = nil,
        computeResources: BatchClientTypes.ComputeResource? = nil,
        context: Swift.String? = nil,
        eksConfiguration: BatchClientTypes.EksConfiguration? = nil,
        serviceRole: Swift.String? = nil,
        state: BatchClientTypes.CEState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        type: BatchClientTypes.CEType? = nil,
        unmanagedvCpus: Swift.Int? = nil
    )
    {
        self.computeEnvironmentName = computeEnvironmentName
        self.computeResources = computeResources
        self.context = context
        self.eksConfiguration = eksConfiguration
        self.serviceRole = serviceRole
        self.state = state
        self.tags = tags
        self.type = type
        self.unmanagedvCpus = unmanagedvCpus
    }
}

public struct CreateComputeEnvironmentOutput {
    /// The Amazon Resource Name (ARN) of the compute environment.
    public var computeEnvironmentArn: Swift.String?
    /// The name of the compute environment. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    public var computeEnvironmentName: Swift.String?

    public init(
        computeEnvironmentArn: Swift.String? = nil,
        computeEnvironmentName: Swift.String? = nil
    )
    {
        self.computeEnvironmentArn = computeEnvironmentArn
        self.computeEnvironmentName = computeEnvironmentName
    }
}

extension BatchClientTypes {
    /// The order that compute environments are tried in for job placement within a queue. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first. Compute environments must be in the VALID state before you can associate them with a job queue. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); Amazon EC2 and Fargate compute environments can't be mixed. All compute environments that are associated with a job queue must share the same architecture. Batch doesn't support mixing compute environment architecture types in a single job queue.
    public struct ComputeEnvironmentOrder {
        /// The Amazon Resource Name (ARN) of the compute environment.
        /// This member is required.
        public var computeEnvironment: Swift.String?
        /// The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first.
        /// This member is required.
        public var order: Swift.Int?

        public init(
            computeEnvironment: Swift.String? = nil,
            order: Swift.Int? = nil
        )
        {
            self.computeEnvironment = computeEnvironment
            self.order = order
        }
    }

}

extension BatchClientTypes {

    public enum JobStateTimeLimitActionsAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancel
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStateTimeLimitActionsAction] {
            return [
                .cancel
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancel: return "CANCEL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {

    public enum JobStateTimeLimitActionsState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case runnable
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStateTimeLimitActionsState] {
            return [
                .runnable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .runnable: return "RUNNABLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// Specifies an action that Batch will take after the job has remained at the head of the queue in the specified state for longer than the specified time.
    public struct JobStateTimeLimitAction {
        /// The action to take when a job is at the head of the job queue in the specified state for the specified period of time. The only supported value is CANCEL, which will cancel the job.
        /// This member is required.
        public var action: BatchClientTypes.JobStateTimeLimitActionsAction?
        /// The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. The minimum value is 600 (10 minutes) and the maximum value is 86,400 (24 hours).
        /// This member is required.
        public var maxTimeSeconds: Swift.Int?
        /// The reason to log for the action being taken.
        /// This member is required.
        public var reason: Swift.String?
        /// The state of the job needed to trigger the action. The only supported value is RUNNABLE.
        /// This member is required.
        public var state: BatchClientTypes.JobStateTimeLimitActionsState?

        public init(
            action: BatchClientTypes.JobStateTimeLimitActionsAction? = nil,
            maxTimeSeconds: Swift.Int? = nil,
            reason: Swift.String? = nil,
            state: BatchClientTypes.JobStateTimeLimitActionsState? = nil
        )
        {
            self.action = action
            self.maxTimeSeconds = maxTimeSeconds
            self.reason = reason
            self.state = state
        }
    }

}

extension BatchClientTypes {

    public enum JQState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [JQState] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Contains the parameters for CreateJobQueue.
public struct CreateJobQueueInput {
    /// The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment runs a specific job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to three compute environments with a job queue. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); EC2 and Fargate compute environments can't be mixed. All compute environments that are associated with a job queue must share the same architecture. Batch doesn't support mixing compute environment architecture types in a single job queue.
    /// This member is required.
    public var computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
    /// The name of the job queue. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    /// This member is required.
    public var jobQueueName: Swift.String?
    /// The set of actions that Batch performs on jobs that remain at the head of the job queue in the specified state longer than specified times. Batch will perform each action after maxTimeSeconds has passed.
    public var jobStateTimeLimitActions: [BatchClientTypes.JobStateTimeLimitAction]?
    /// The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order. For example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); EC2 and Fargate compute environments can't be mixed.
    /// This member is required.
    public var priority: Swift.Int?
    /// The Amazon Resource Name (ARN) of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . An example is aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy.
    public var schedulingPolicyArn: Swift.String?
    /// The state of the job queue. If the job queue state is ENABLED, it is able to accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
    public var state: BatchClientTypes.JQState?
    /// The tags that you apply to the job queue to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging your Batch resources](https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html) in Batch User Guide.
    public var tags: [Swift.String: Swift.String]?

    public init(
        computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]? = nil,
        jobQueueName: Swift.String? = nil,
        jobStateTimeLimitActions: [BatchClientTypes.JobStateTimeLimitAction]? = nil,
        priority: Swift.Int? = nil,
        schedulingPolicyArn: Swift.String? = nil,
        state: BatchClientTypes.JQState? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.computeEnvironmentOrder = computeEnvironmentOrder
        self.jobQueueName = jobQueueName
        self.jobStateTimeLimitActions = jobStateTimeLimitActions
        self.priority = priority
        self.schedulingPolicyArn = schedulingPolicyArn
        self.state = state
        self.tags = tags
    }
}

public struct CreateJobQueueOutput {
    /// The Amazon Resource Name (ARN) of the job queue.
    /// This member is required.
    public var jobQueueArn: Swift.String?
    /// The name of the job queue.
    /// This member is required.
    public var jobQueueName: Swift.String?

    public init(
        jobQueueArn: Swift.String? = nil,
        jobQueueName: Swift.String? = nil
    )
    {
        self.jobQueueArn = jobQueueArn
        self.jobQueueName = jobQueueName
    }
}

extension BatchClientTypes {
    /// Specifies the weights for the fair share identifiers for the fair share policy. Fair share identifiers that aren't included have a default weight of 1.0.
    public struct ShareAttributes {
        /// A fair share identifier or fair share identifier prefix. If the string ends with an asterisk (*), this entry specifies the weight factor to use for fair share identifiers that start with that prefix. The list of fair share identifiers in a fair share policy can't overlap. For example, you can't have one that specifies a shareIdentifier of UserA* and another that specifies a shareIdentifier of UserA-1. There can be no more than 500 fair share identifiers active in a job queue. The string is limited to 255 alphanumeric characters, and can be followed by an asterisk (*).
        /// This member is required.
        public var shareIdentifier: Swift.String?
        /// The weight factor for the fair share identifier. The default value is 1.0. A lower value has a higher priority for compute resources. For example, jobs that use a share identifier with a weight factor of 0.125 (1/8) get 8 times the compute resources of jobs that use a share identifier with a weight factor of 1. The smallest supported value is 0.0001, and the largest supported value is 999.9999.
        public var weightFactor: Swift.Float?

        public init(
            shareIdentifier: Swift.String? = nil,
            weightFactor: Swift.Float? = nil
        )
        {
            self.shareIdentifier = shareIdentifier
            self.weightFactor = weightFactor
        }
    }

}

extension BatchClientTypes {
    /// The fair share policy for a scheduling policy.
    public struct FairsharePolicy {
        /// A value used to reserve some of the available maximum vCPU for fair share identifiers that aren't already used. The reserved ratio is (computeReservation/100)^ActiveFairShares  where  ActiveFairShares  is the number of active fair share identifiers. For example, a computeReservation value of 50 indicates that Batch reserves 50% of the maximum available vCPU if there's only one fair share identifier. It reserves 25% if there are two fair share identifiers. It reserves 12.5% if there are three fair share identifiers. A computeReservation value of 25 indicates that Batch should reserve 25% of the maximum available vCPU if there's only one fair share identifier, 6.25% if there are two fair share identifiers, and 1.56% if there are three fair share identifiers. The minimum value is 0 and the maximum value is 99.
        public var computeReservation: Swift.Int?
        /// The amount of time (in seconds) to use to calculate a fair share percentage for each fair share identifier in use. A value of zero (0) indicates that only current usage is measured. The decay allows for more recently run jobs to have more weight than jobs that ran earlier. The maximum supported value is 604800 (1 week).
        public var shareDecaySeconds: Swift.Int?
        /// An array of SharedIdentifier objects that contain the weights for the fair share identifiers for the fair share policy. Fair share identifiers that aren't included have a default weight of 1.0.
        public var shareDistribution: [BatchClientTypes.ShareAttributes]?

        public init(
            computeReservation: Swift.Int? = nil,
            shareDecaySeconds: Swift.Int? = nil,
            shareDistribution: [BatchClientTypes.ShareAttributes]? = nil
        )
        {
            self.computeReservation = computeReservation
            self.shareDecaySeconds = shareDecaySeconds
            self.shareDistribution = shareDistribution
        }
    }

}

/// Contains the parameters for CreateSchedulingPolicy.
public struct CreateSchedulingPolicyInput {
    /// The fair share policy of the scheduling policy.
    public var fairsharePolicy: BatchClientTypes.FairsharePolicy?
    /// The name of the scheduling policy. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    /// This member is required.
    public var name: Swift.String?
    /// The tags that you apply to the scheduling policy to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in Amazon Web Services General Reference. These tags can be updated or removed using the [TagResource](https://docs.aws.amazon.com/batch/latest/APIReference/API_TagResource.html) and [UntagResource](https://docs.aws.amazon.com/batch/latest/APIReference/API_UntagResource.html) API operations.
    public var tags: [Swift.String: Swift.String]?

    public init(
        fairsharePolicy: BatchClientTypes.FairsharePolicy? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.fairsharePolicy = fairsharePolicy
        self.name = name
        self.tags = tags
    }
}

public struct CreateSchedulingPolicyOutput {
    /// The Amazon Resource Name (ARN) of the scheduling policy. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . For example, aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy.
    /// This member is required.
    public var arn: Swift.String?
    /// The name of the scheduling policy.
    /// This member is required.
    public var name: Swift.String?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
    }
}

/// Contains the parameters for DeleteComputeEnvironment.
public struct DeleteComputeEnvironmentInput {
    /// The name or Amazon Resource Name (ARN) of the compute environment to delete.
    /// This member is required.
    public var computeEnvironment: Swift.String?

    public init(
        computeEnvironment: Swift.String? = nil
    )
    {
        self.computeEnvironment = computeEnvironment
    }
}

public struct DeleteComputeEnvironmentOutput {

    public init() { }
}

/// Contains the parameters for DeleteJobQueue.
public struct DeleteJobQueueInput {
    /// The short name or full Amazon Resource Name (ARN) of the queue to delete.
    /// This member is required.
    public var jobQueue: Swift.String?

    public init(
        jobQueue: Swift.String? = nil
    )
    {
        self.jobQueue = jobQueue
    }
}

public struct DeleteJobQueueOutput {

    public init() { }
}

/// Contains the parameters for DeleteSchedulingPolicy.
public struct DeleteSchedulingPolicyInput {
    /// The Amazon Resource Name (ARN) of the scheduling policy to delete.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct DeleteSchedulingPolicyOutput {

    public init() { }
}

public struct DeregisterJobDefinitionInput {
    /// The name and revision (name:revision) or full Amazon Resource Name (ARN) of the job definition to deregister.
    /// This member is required.
    public var jobDefinition: Swift.String?

    public init(
        jobDefinition: Swift.String? = nil
    )
    {
        self.jobDefinition = jobDefinition
    }
}

public struct DeregisterJobDefinitionOutput {

    public init() { }
}

/// Contains the parameters for DescribeComputeEnvironments.
public struct DescribeComputeEnvironmentsInput {
    /// A list of up to 100 compute environment names or full Amazon Resource Name (ARN) entries.
    public var computeEnvironments: [Swift.String]?
    /// The maximum number of cluster results returned by DescribeComputeEnvironments in paginated output. When this parameter is used, DescribeComputeEnvironments only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeComputeEnvironments request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then DescribeComputeEnvironments returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated DescribeComputeEnvironments request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        computeEnvironments: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.computeEnvironments = computeEnvironments
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension BatchClientTypes {

    public enum OrchestrationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ecs
        case eks
        case sdkUnknown(Swift.String)

        public static var allCases: [OrchestrationType] {
            return [
                .ecs,
                .eks
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ecs: return "ECS"
            case .eks: return "EKS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {

    public enum CEStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case deleted
        case deleting
        case invalid
        case updating
        case valid
        case sdkUnknown(Swift.String)

        public static var allCases: [CEStatus] {
            return [
                .creating,
                .deleted,
                .deleting,
                .invalid,
                .updating,
                .valid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .invalid: return "INVALID"
            case .updating: return "UPDATING"
            case .valid: return "VALID"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// Specifies the infrastructure update policy for the compute environment. For more information about infrastructure updates, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
    public struct UpdatePolicy {
        /// Specifies the job timeout (in minutes) when the compute environment infrastructure is updated. The default value is 30.
        public var jobExecutionTimeoutMinutes: Swift.Int?
        /// Specifies whether jobs are automatically terminated when the computer environment infrastructure is updated. The default value is false.
        public var terminateJobsOnUpdate: Swift.Bool?

        public init(
            jobExecutionTimeoutMinutes: Swift.Int? = nil,
            terminateJobsOnUpdate: Swift.Bool? = nil
        )
        {
            self.jobExecutionTimeoutMinutes = jobExecutionTimeoutMinutes
            self.terminateJobsOnUpdate = terminateJobsOnUpdate
        }
    }

}

extension BatchClientTypes {
    /// An object that represents an Batch compute environment.
    public struct ComputeEnvironmentDetail {
        /// The Amazon Resource Name (ARN) of the compute environment.
        /// This member is required.
        public var computeEnvironmentArn: Swift.String?
        /// The name of the compute environment. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        /// This member is required.
        public var computeEnvironmentName: Swift.String?
        /// The compute resources defined for the compute environment. For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
        public var computeResources: BatchClientTypes.ComputeResource?
        /// The orchestration type of the compute environment. The valid values are ECS (default) or EKS.
        public var containerOrchestrationType: BatchClientTypes.OrchestrationType?
        /// Reserved.
        public var context: Swift.String?
        /// The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster that the compute environment uses.
        public var ecsClusterArn: Swift.String?
        /// The configuration for the Amazon EKS cluster that supports the Batch compute environment. Only specify this parameter if the containerOrchestrationType is EKS.
        public var eksConfiguration: BatchClientTypes.EksConfiguration?
        /// The service role that's associated with the compute environment that allows Batch to make calls to Amazon Web Services API operations on your behalf. For more information, see [Batch service IAM role](https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html) in the Batch User Guide.
        public var serviceRole: Swift.String?
        /// The state of the compute environment. The valid values are ENABLED or DISABLED. If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically based on the job queue demand. If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out. Compute environments in a DISABLED state may continue to incur billing charges. To prevent additional charges, turn off and then delete the compute environment. For more information, see [State](https://docs.aws.amazon.com/batch/latest/userguide/compute_environment_parameters.html#compute_environment_state) in the Batch User Guide. When an instance is idle, the instance scales down to the minvCpus value. However, the instance size doesn't change. For example, consider a c5.8xlarge instance with a minvCpus value of 4 and a desiredvCpus value of 36. This instance doesn't scale down to a c5.large instance.
        public var state: BatchClientTypes.CEState?
        /// The current status of the compute environment (for example, CREATING or VALID).
        public var status: BatchClientTypes.CEStatus?
        /// A short, human-readable string to provide additional details for the current status of the compute environment.
        public var statusReason: Swift.String?
        /// The tags applied to the compute environment.
        public var tags: [Swift.String: Swift.String]?
        /// The type of the compute environment: MANAGED or UNMANAGED. For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
        public var type: BatchClientTypes.CEType?
        /// The maximum number of VCPUs expected to be used for an unmanaged compute environment.
        public var unmanagedvCpus: Swift.Int?
        /// Specifies the infrastructure update policy for the compute environment. For more information about infrastructure updates, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
        public var updatePolicy: BatchClientTypes.UpdatePolicy?
        /// Unique identifier for the compute environment.
        public var uuid: Swift.String?

        public init(
            computeEnvironmentArn: Swift.String? = nil,
            computeEnvironmentName: Swift.String? = nil,
            computeResources: BatchClientTypes.ComputeResource? = nil,
            containerOrchestrationType: BatchClientTypes.OrchestrationType? = nil,
            context: Swift.String? = nil,
            ecsClusterArn: Swift.String? = nil,
            eksConfiguration: BatchClientTypes.EksConfiguration? = nil,
            serviceRole: Swift.String? = nil,
            state: BatchClientTypes.CEState? = nil,
            status: BatchClientTypes.CEStatus? = nil,
            statusReason: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            type: BatchClientTypes.CEType? = nil,
            unmanagedvCpus: Swift.Int? = nil,
            updatePolicy: BatchClientTypes.UpdatePolicy? = nil,
            uuid: Swift.String? = nil
        )
        {
            self.computeEnvironmentArn = computeEnvironmentArn
            self.computeEnvironmentName = computeEnvironmentName
            self.computeResources = computeResources
            self.containerOrchestrationType = containerOrchestrationType
            self.context = context
            self.ecsClusterArn = ecsClusterArn
            self.eksConfiguration = eksConfiguration
            self.serviceRole = serviceRole
            self.state = state
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
            self.type = type
            self.unmanagedvCpus = unmanagedvCpus
            self.updatePolicy = updatePolicy
            self.uuid = uuid
        }
    }

}

public struct DescribeComputeEnvironmentsOutput {
    /// The list of compute environments.
    public var computeEnvironments: [BatchClientTypes.ComputeEnvironmentDetail]?
    /// The nextToken value to include in a future DescribeComputeEnvironments request. When the results of a DescribeComputeEnvironments request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init(
        computeEnvironments: [BatchClientTypes.ComputeEnvironmentDetail]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.computeEnvironments = computeEnvironments
        self.nextToken = nextToken
    }
}

/// Contains the parameters for DescribeJobDefinitions.
public struct DescribeJobDefinitionsInput {
    /// The name of the job definition to describe.
    public var jobDefinitionName: Swift.String?
    /// A list of up to 100 job definitions. Each entry in the list can either be an ARN in the format arn:aws:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision} or a short version using the form ${JobDefinitionName}:${Revision}. This parameter can't be used with other parameters.
    public var jobDefinitions: [Swift.String]?
    /// The maximum number of results returned by DescribeJobDefinitions in paginated output. When this parameter is used, DescribeJobDefinitions only returns maxResults results in a single page and a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeJobDefinitions request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then DescribeJobDefinitions returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated DescribeJobDefinitions request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The status used to filter job definitions.
    public var status: Swift.String?

    public init(
        jobDefinitionName: Swift.String? = nil,
        jobDefinitions: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
        self.jobDefinitions = jobDefinitions
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

extension BatchClientTypes {
    /// A key-value pair object.
    public struct KeyValuePair {
        /// The name of the key-value pair. For environment variables, this is the name of the environment variable.
        public var name: Swift.String?
        /// The value of the key-value pair. For environment variables, this is the value of the environment variable.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension BatchClientTypes {
    /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate.
    public struct EphemeralStorage {
        /// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
        /// This member is required.
        public var sizeInGiB: Swift.Int?

        public init(
            sizeInGiB: Swift.Int? = nil
        )
        {
            self.sizeInGiB = sizeInGiB
        }
    }

}

extension BatchClientTypes {
    /// The platform configuration for jobs that are running on Fargate resources. Jobs that run on Amazon EC2 resources must not specify this parameter.
    public struct FargatePlatformConfiguration {
        /// The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the LATEST platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see [Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
        public var platformVersion: Swift.String?

        public init(
            platformVersion: Swift.String? = nil
        )
        {
            self.platformVersion = platformVersion
        }
    }

}

extension BatchClientTypes {

    public enum DeviceCgroupPermission: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mknod
        case read
        case write
        case sdkUnknown(Swift.String)

        public static var allCases: [DeviceCgroupPermission] {
            return [
                .mknod,
                .read,
                .write
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mknod: return "MKNOD"
            case .read: return "READ"
            case .write: return "WRITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// An object that represents a container instance host device. This object isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
    public struct Device {
        /// The path inside the container that's used to expose the host device. By default, the hostPath value is used.
        public var containerPath: Swift.String?
        /// The path for the device on the host container instance.
        /// This member is required.
        public var hostPath: Swift.String?
        /// The explicit permissions to provide to the container for the device. By default, the container has permissions for read, write, and mknod for the device.
        public var permissions: [BatchClientTypes.DeviceCgroupPermission]?

        public init(
            containerPath: Swift.String? = nil,
            hostPath: Swift.String? = nil,
            permissions: [BatchClientTypes.DeviceCgroupPermission]? = nil
        )
        {
            self.containerPath = containerPath
            self.hostPath = hostPath
            self.permissions = permissions
        }
    }

}

extension BatchClientTypes {
    /// The container path, mount options, and size of the tmpfs mount. This object isn't applicable to jobs that are running on Fargate resources.
    public struct Tmpfs {
        /// The absolute file path in the container where the tmpfs volume is mounted.
        /// This member is required.
        public var containerPath: Swift.String?
        /// The list of tmpfs volume mount options. Valid values: "defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"
        public var mountOptions: [Swift.String]?
        /// The size (in MiB) of the tmpfs volume.
        /// This member is required.
        public var size: Swift.Int?

        public init(
            containerPath: Swift.String? = nil,
            mountOptions: [Swift.String]? = nil,
            size: Swift.Int? = nil
        )
        {
            self.containerPath = containerPath
            self.mountOptions = mountOptions
            self.size = size
        }
    }

}

extension BatchClientTypes {
    /// Linux-specific modifications that are applied to the container, such as details for device mappings.
    public struct LinuxParameters {
        /// Any of the host devices to expose to the container. This parameter maps to Devices in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --device option to [docker run](https://docs.docker.com/engine/reference/run/). This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
        public var devices: [BatchClientTypes.Device]?
        /// If true, run an init process inside the container that forwards signals and reaps processes. This parameter maps to the --init option to [docker run](https://docs.docker.com/engine/reference/run/). This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version"
        public var initProcessEnabled: Swift.Bool?
        /// The total amount of swap memory (in MiB) a container can use. This parameter is translated to the --memory-swap option to [docker run](https://docs.docker.com/engine/reference/run/) where the value is the sum of the container memory plus the maxSwap value. For more information, see [--memory-swap] details(https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details) in the Docker documentation. If a maxSwap value of 0 is specified, the container doesn't use swap. Accepted values are 0 or any positive integer. If the maxSwap parameter is omitted, the container doesn't use the swap configuration for the container instance that it's running on. A maxSwap value must be set for the swappiness parameter to be used. This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
        public var maxSwap: Swift.Int?
        /// The value for the size (in MiB) of the /dev/shm volume. This parameter maps to the --shm-size option to [docker run](https://docs.docker.com/engine/reference/run/). This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
        public var sharedMemorySize: Swift.Int?
        /// You can use this parameter to tune a container's memory swappiness behavior. A swappiness value of 0 causes swapping to not occur unless absolutely necessary. A swappiness value of 100 causes pages to be swapped aggressively. Valid values are whole numbers between 0 and 100. If the swappiness parameter isn't specified, a default value of 60 is used. If a value isn't specified for maxSwap, then this parameter is ignored. If maxSwap is set to 0, the container doesn't use swap. This parameter maps to the --memory-swappiness option to [docker run](https://docs.docker.com/engine/reference/run/). Consider the following when you use a per-container swap configuration.
        ///
        /// * Swap space must be enabled and allocated on the container instance for the containers to use. By default, the Amazon ECS optimized AMIs don't have swap enabled. You must enable swap on the instance to use this feature. For more information, see [Instance store swap volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-store-swap-volumes.html) in the Amazon EC2 User Guide for Linux Instances or [How do I allocate memory to work as swap space in an Amazon EC2 instance by using a swap file?](http://aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/)
        ///
        /// * The swap space parameters are only supported for job definitions using EC2 resources.
        ///
        /// * If the maxSwap and swappiness parameters are omitted from a job definition, each container has a default swappiness value of 60. Moreover, the total swap usage is limited to two times the memory reservation of the container.
        ///
        ///
        /// This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
        public var swappiness: Swift.Int?
        /// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the --tmpfs option to [docker run](https://docs.docker.com/engine/reference/run/). This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide this parameter for this resource type.
        public var tmpfs: [BatchClientTypes.Tmpfs]?

        public init(
            devices: [BatchClientTypes.Device]? = nil,
            initProcessEnabled: Swift.Bool? = nil,
            maxSwap: Swift.Int? = nil,
            sharedMemorySize: Swift.Int? = nil,
            swappiness: Swift.Int? = nil,
            tmpfs: [BatchClientTypes.Tmpfs]? = nil
        )
        {
            self.devices = devices
            self.initProcessEnabled = initProcessEnabled
            self.maxSwap = maxSwap
            self.sharedMemorySize = sharedMemorySize
            self.swappiness = swappiness
            self.tmpfs = tmpfs
        }
    }

}

extension BatchClientTypes {

    public enum LogDriver: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awslogs
        case fluentd
        case gelf
        case journald
        case jsonFile
        case splunk
        case syslog
        case sdkUnknown(Swift.String)

        public static var allCases: [LogDriver] {
            return [
                .awslogs,
                .fluentd,
                .gelf,
                .journald,
                .jsonFile,
                .splunk,
                .syslog
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awslogs: return "awslogs"
            case .fluentd: return "fluentd"
            case .gelf: return "gelf"
            case .journald: return "journald"
            case .jsonFile: return "json-file"
            case .splunk: return "splunk"
            case .syslog: return "syslog"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// An object that represents the secret to expose to your container. Secrets can be exposed to a container in the following ways:
    ///
    /// * To inject sensitive data into your containers as environment variables, use the secrets container definition parameter.
    ///
    /// * To reference sensitive information in the log configuration of a container, use the secretOptions container definition parameter.
    ///
    ///
    /// For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
    public struct Secret {
        /// The name of the secret.
        /// This member is required.
        public var name: Swift.String?
        /// The secret to expose to the container. The supported values are either the full Amazon Resource Name (ARN) of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store. If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Region as the job you're launching, then you can use either the full Amazon Resource Name (ARN) or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
        /// This member is required.
        public var valueFrom: Swift.String?

        public init(
            name: Swift.String? = nil,
            valueFrom: Swift.String? = nil
        )
        {
            self.name = name
            self.valueFrom = valueFrom
        }
    }

}

extension BatchClientTypes {
    /// Log configuration options to send to a custom log driver for the container.
    public struct LogConfiguration {
        /// The log driver to use for the container. The valid values that are listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default. The supported log drivers are awslogs, fluentd, gelf, json-file, journald, logentries, syslog, and splunk. Jobs that are running on Fargate resources are restricted to the awslogs and splunk log drivers. awslogs Specifies the Amazon CloudWatch Logs logging driver. For more information, see [Using the awslogs log driver](https://docs.aws.amazon.com/batch/latest/userguide/using_awslogs.html) in the Batch User Guide and [Amazon CloudWatch Logs logging driver](https://docs.docker.com/config/containers/logging/awslogs/) in the Docker documentation. fluentd Specifies the Fluentd logging driver. For more information including usage and options, see [Fluentd logging driver](https://docs.docker.com/config/containers/logging/fluentd/) in the Docker documentation. gelf Specifies the Graylog Extended Format (GELF) logging driver. For more information including usage and options, see [Graylog Extended Format logging driver](https://docs.docker.com/config/containers/logging/gelf/) in the Docker documentation. journald Specifies the journald logging driver. For more information including usage and options, see [Journald logging driver](https://docs.docker.com/config/containers/logging/journald/) in the Docker documentation. json-file Specifies the JSON file logging driver. For more information including usage and options, see [JSON File logging driver](https://docs.docker.com/config/containers/logging/json-file/) in the Docker documentation. splunk Specifies the Splunk logging driver. For more information including usage and options, see [Splunk logging driver](https://docs.docker.com/config/containers/logging/splunk/) in the Docker documentation. syslog Specifies the syslog logging driver. For more information including usage and options, see [Syslog logging driver](https://docs.docker.com/config/containers/logging/syslog/) in the Docker documentation. If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that's [available on GitHub](https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this software. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version"
        /// This member is required.
        public var logDriver: BatchClientTypes.LogDriver?
        /// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version"
        public var options: [Swift.String: Swift.String]?
        /// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
        public var secretOptions: [BatchClientTypes.Secret]?

        public init(
            logDriver: BatchClientTypes.LogDriver? = nil,
            options: [Swift.String: Swift.String]? = nil,
            secretOptions: [BatchClientTypes.Secret]? = nil
        )
        {
            self.logDriver = logDriver
            self.options = options
            self.secretOptions = secretOptions
        }
    }

}

extension BatchClientTypes {
    /// Details for a Docker volume mount point that's used in a job's container properties. This parameter maps to Volumes in the [Create a container](https://docs.docker.com/engine/api/v1.43/#tag/Container/operation/ContainerCreate) section of the Docker Remote API and the --volume option to docker run.
    public struct MountPoint {
        /// The path on the container where the host volume is mounted.
        public var containerPath: Swift.String?
        /// If this value is true, the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is false.
        public var readOnly: Swift.Bool?
        /// The name of the volume to mount.
        public var sourceVolume: Swift.String?

        public init(
            containerPath: Swift.String? = nil,
            readOnly: Swift.Bool? = nil,
            sourceVolume: Swift.String? = nil
        )
        {
            self.containerPath = containerPath
            self.readOnly = readOnly
            self.sourceVolume = sourceVolume
        }
    }

}

extension BatchClientTypes {
    /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
    public struct NetworkConfiguration {
        /// Indicates whether the job has a public IP address. For a job that's running on Fargate resources in a private subnet to send outbound traffic to the internet (for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet. For more information, see [Amazon ECS task networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the Amazon Elastic Container Service Developer Guide. The default value is "DISABLED".
        public var assignPublicIp: BatchClientTypes.AssignPublicIp?

        public init(
            assignPublicIp: BatchClientTypes.AssignPublicIp? = nil
        )
        {
            self.assignPublicIp = assignPublicIp
        }
    }

}

extension BatchClientTypes {
    /// The repository credentials for private registry authentication.
    public struct RepositoryCredentials {
        /// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
        /// This member is required.
        public var credentialsParameter: Swift.String?

        public init(
            credentialsParameter: Swift.String? = nil
        )
        {
            self.credentialsParameter = credentialsParameter
        }
    }

}

extension BatchClientTypes {

    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gpu
        case memory
        case vcpu
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .gpu,
                .memory,
                .vcpu
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gpu: return "GPU"
            case .memory: return "MEMORY"
            case .vcpu: return "VCPU"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// The type and amount of a resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
    public struct ResourceRequirement {
        /// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
        /// This member is required.
        public var type: BatchClientTypes.ResourceType?
        /// The quantity of the specified resource to reserve for the container. The values vary based on the type specified. type="GPU" The number of physical GPUs to reserve for the container. Make sure that the number of GPUs reserved for all containers in a job doesn't exceed the number of available GPUs on the compute resource that the job is launched on. GPUs aren't available for jobs that are running on Fargate resources. type="MEMORY" The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on Amazon EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to Memory in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --memory option to [docker run](https://docs.docker.com/engine/reference/run/). You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to Memory in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --memory option to [docker run](https://docs.docker.com/engine/reference/run/). If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the Batch User Guide. For jobs that are running on Fargate resources, then value is the hard limit (in MiB), and must match one of the supported values and the VCPU values must be one of the values supported for that memory value. value = 512 VCPU = 0.25 value = 1024 VCPU = 0.25 or 0.5 value = 2048 VCPU = 0.25, 0.5, or 1 value = 3072 VCPU = 0.5, or 1 value = 4096 VCPU = 0.5, 1, or 2 value = 5120, 6144, or 7168 VCPU = 1 or 2 value = 8192 VCPU = 1, 2, or 4 value = 9216, 10240, 11264, 12288, 13312, 14336, or 15360 VCPU = 2 or 4 value = 16384 VCPU = 2, 4, or 8 value = 17408, 18432, 19456, 21504, 22528, 23552, 25600, 26624, 27648, 29696, or 30720 VCPU = 4 value = 20480, 24576, or 28672 VCPU = 4 or 8 value = 36864, 45056, 53248, or 61440 VCPU = 8 value = 32768, 40960, 49152, or 57344 VCPU = 8 or 16 value = 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880 VCPU = 16 type="VCPU" The number of vCPUs reserved for the container. This parameter maps to CpuShares in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --cpu-shares option to [docker run](https://docs.docker.com/engine/reference/run/). Each vCPU is equivalent to 1,024 CPU shares. For Amazon EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once. The default for the Fargate On-Demand vCPU resource count quota is 6 vCPUs. For more information about Fargate quotas, see [Fargate quotas](https://docs.aws.amazon.com/general/latest/gr/ecs-service.html#service-quotas-fargate) in the Amazon Web Services General Reference. For jobs that are running on Fargate resources, then value must match one of the supported values and the MEMORY values must be one of the values supported for that VCPU value. The supported values are 0.25, 0.5, 1, 2, 4, 8, and 16 value = 0.25 MEMORY = 512, 1024, or 2048 value = 0.5 MEMORY = 1024, 2048, 3072, or 4096 value = 1 MEMORY = 2048, 3072, 4096, 5120, 6144, 7168, or 8192 value = 2 MEMORY = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384 value = 4 MEMORY = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720 value = 8 MEMORY = 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, or 61440 value = 16 MEMORY = 32768, 40960, 49152, 57344, 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880
        /// This member is required.
        public var value: Swift.String?

        public init(
            type: BatchClientTypes.ResourceType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension BatchClientTypes {
    /// An object that represents the compute environment architecture for Batch jobs on Fargate.
    public struct RuntimePlatform {
        /// The vCPU architecture. The default value is X86_64. Valid values are X86_64 and ARM64. This parameter must be set to X86_64 for Windows containers. Fargate Spot is not supported for ARM64 and Windows-based containers on Fargate. A job queue will be blocked if a Fargate ARM64 or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both FARGATE and FARGATE_SPOT compute environments to the same job queue.
        public var cpuArchitecture: Swift.String?
        /// The operating system for the compute environment. Valid values are: LINUX (default), WINDOWS_SERVER_2019_CORE, WINDOWS_SERVER_2019_FULL, WINDOWS_SERVER_2022_CORE, and WINDOWS_SERVER_2022_FULL. The following parameters canâ€™t be set for Windows containers: linuxParameters, privileged, user, ulimits, readonlyRootFilesystem, and efsVolumeConfiguration. The Batch Scheduler checks the compute environments that are attached to the job queue before registering a task definition with Fargate. In this scenario, the job queue is where the job is submitted. If the job requires a Windows container and the first compute environment is LINUX, the compute environment is skipped and the next compute environment is checked until a Windows-based compute environment is found. Fargate Spot is not supported for ARM64 and Windows-based containers on Fargate. A job queue will be blocked if a Fargate ARM64 or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both FARGATE and FARGATE_SPOT compute environments to the same job queue.
        public var operatingSystemFamily: Swift.String?

        public init(
            cpuArchitecture: Swift.String? = nil,
            operatingSystemFamily: Swift.String? = nil
        )
        {
            self.cpuArchitecture = cpuArchitecture
            self.operatingSystemFamily = operatingSystemFamily
        }
    }

}

extension BatchClientTypes {
    /// The ulimit settings to pass to the container. For more information, see [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html). This object isn't applicable to jobs that are running on Fargate resources.
    public struct Ulimit {
        /// The hard limit for the ulimit type.
        /// This member is required.
        public var hardLimit: Swift.Int?
        /// The type of the ulimit. Valid values are: core | cpu | data | fsize | locks | memlock | msgqueue | nice | nofile | nproc | rss | rtprio | rttime | sigpending | stack.
        /// This member is required.
        public var name: Swift.String?
        /// The soft limit for the ulimit type.
        /// This member is required.
        public var softLimit: Swift.Int?

        public init(
            hardLimit: Swift.Int? = nil,
            name: Swift.String? = nil,
            softLimit: Swift.Int? = nil
        )
        {
            self.hardLimit = hardLimit
            self.name = name
            self.softLimit = softLimit
        }
    }

}

extension BatchClientTypes {

    public enum EFSAuthorizationConfigIAM: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [EFSAuthorizationConfigIAM] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// The authorization configuration details for the Amazon EFS file system.
    public struct EFSAuthorizationConfig {
        /// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the EFSVolumeConfiguration must either be omitted or set to / which enforces the path set on the EFS access point. If an access point is used, transit encryption must be enabled in the EFSVolumeConfiguration. For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the Amazon Elastic File System User Guide.
        public var accessPointId: Swift.String?
        /// Whether or not to use the Batch job IAM role defined in a job definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. If this parameter is omitted, the default value of DISABLED is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints) in the Batch User Guide. EFS IAM authorization requires that TransitEncryption be ENABLED and that a JobRoleArn is specified.
        public var iam: BatchClientTypes.EFSAuthorizationConfigIAM?

        public init(
            accessPointId: Swift.String? = nil,
            iam: BatchClientTypes.EFSAuthorizationConfigIAM? = nil
        )
        {
            self.accessPointId = accessPointId
            self.iam = iam
        }
    }

}

extension BatchClientTypes {

    public enum EFSTransitEncryption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [EFSTransitEncryption] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// This is used when you're using an Amazon Elastic File System file system for job storage. For more information, see [Amazon EFS Volumes](https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html) in the Batch User Guide.
    public struct EFSVolumeConfiguration {
        /// The authorization configuration details for the Amazon EFS file system.
        public var authorizationConfig: BatchClientTypes.EFSAuthorizationConfig?
        /// The Amazon EFS file system ID to use.
        /// This member is required.
        public var fileSystemId: Swift.String?
        /// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume is used instead. Specifying / has the same effect as omitting this parameter. The maximum length is 4,096 characters. If an EFS access point is specified in the authorizationConfig, the root directory parameter must either be omitted or set to /, which enforces the path set on the Amazon EFS access point.
        public var rootDirectory: Swift.String?
        /// Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of DISABLED is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the Amazon Elastic File System User Guide.
        public var transitEncryption: BatchClientTypes.EFSTransitEncryption?
        /// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you don't specify a transit encryption port, it uses the port selection strategy that the Amazon EFS mount helper uses. The value must be between 0 and 65,535. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the Amazon Elastic File System User Guide.
        public var transitEncryptionPort: Swift.Int?

        public init(
            authorizationConfig: BatchClientTypes.EFSAuthorizationConfig? = nil,
            fileSystemId: Swift.String? = nil,
            rootDirectory: Swift.String? = nil,
            transitEncryption: BatchClientTypes.EFSTransitEncryption? = nil,
            transitEncryptionPort: Swift.Int? = nil
        )
        {
            self.authorizationConfig = authorizationConfig
            self.fileSystemId = fileSystemId
            self.rootDirectory = rootDirectory
            self.transitEncryption = transitEncryption
            self.transitEncryptionPort = transitEncryptionPort
        }
    }

}

extension BatchClientTypes {
    /// Determine whether your data volume persists on the host container instance and where it's stored. If this parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.
    public struct Host {
        /// The path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If this parameter contains a file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the source path location doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported. This parameter isn't applicable to jobs that run on Fargate resources. Don't provide this for these jobs.
        public var sourcePath: Swift.String?

        public init(
            sourcePath: Swift.String? = nil
        )
        {
            self.sourcePath = sourcePath
        }
    }

}

extension BatchClientTypes {
    /// A data volume that's used in a job's container properties.
    public struct Volume {
        /// This parameter is specified when you're using an Amazon Elastic File System file system for job storage. Jobs that are running on Fargate resources must specify a platformVersion of at least 1.4.0.
        public var efsVolumeConfiguration: BatchClientTypes.EFSVolumeConfiguration?
        /// The contents of the host parameter determine whether your data volume persists on the host container instance and where it's stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running. This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
        public var host: BatchClientTypes.Host?
        /// The name of the volume. It can be up to 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_). This name is referenced in the sourceVolume parameter of container definition mountPoints.
        public var name: Swift.String?

        public init(
            efsVolumeConfiguration: BatchClientTypes.EFSVolumeConfiguration? = nil,
            host: BatchClientTypes.Host? = nil,
            name: Swift.String? = nil
        )
        {
            self.efsVolumeConfiguration = efsVolumeConfiguration
            self.host = host
            self.name = name
        }
    }

}

extension BatchClientTypes {
    /// Container properties are used for Amazon ECS based job definitions. These properties to describe the container that's launched as part of a job.
    public struct ContainerProperties {
        /// The command that's passed to the container. This parameter maps to Cmd in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the COMMAND parameter to [docker run](https://docs.docker.com/engine/reference/run/). For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.docker.com/engine/reference/builder/#cmd).
        public var command: [Swift.String]?
        /// The environment variables to pass to a container. This parameter maps to Env in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --env option to [docker run](https://docs.docker.com/engine/reference/run/). We don't recommend using plaintext environment variables for sensitive information, such as credential data. Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public var environment: [BatchClientTypes.KeyValuePair]?
        /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate.
        public var ephemeralStorage: BatchClientTypes.EphemeralStorage?
        /// The Amazon Resource Name (ARN) of the execution role that Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the Batch User Guide.
        public var executionRoleArn: Swift.String?
        /// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
        public var fargatePlatformConfiguration: BatchClientTypes.FargatePlatformConfiguration?
        /// Required. The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with  repository-url/image:tag . It can be 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), underscores (_), colons (:), periods (.), forward slashes (/), and number signs (#). This parameter maps to Image in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the IMAGE parameter of [docker run](https://docs.docker.com/engine/reference/run/). Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.
        ///
        /// * Images in Amazon ECR Public repositories use the full registry/repository[:tag] or registry/repository[@digest] naming conventions. For example, public.ecr.aws/registry_alias/my-web-app:latest .
        ///
        /// * Images in Amazon ECR repositories use the full registry and repository URI (for example, 123456789012.dkr.ecr..amazonaws.com/).
        ///
        /// * Images in official repositories on Docker Hub use a single name (for example, ubuntu or mongo).
        ///
        /// * Images in other repositories on Docker Hub are qualified with an organization name (for example, amazon/amazon-ecs-agent).
        ///
        /// * Images in other online repositories are qualified further by a domain name (for example, quay.io/assemblyline/ubuntu).
        public var image: Swift.String?
        /// The instance type to use for a multi-node parallel job. All node groups in a multi-node parallel job must use the same instance type. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
        public var instanceType: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that the container can assume for Amazon Web Services permissions. For more information, see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the Amazon Elastic Container Service Developer Guide.
        public var jobRoleArn: Swift.String?
        /// Linux-specific modifications that are applied to the container, such as details for device mappings.
        public var linuxParameters: BatchClientTypes.LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --log-driver option to [docker run](https://docs.docker.com/engine/reference/run/). By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation. Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-containerproperties-logconfiguration.html) data type). This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version" The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide.
        public var logConfiguration: BatchClientTypes.LogConfiguration?
        /// This parameter is deprecated, use resourceRequirements to specify the memory requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it specifies the memory hard limit (in MiB) for a container. If your container attempts to exceed the specified number, it's terminated. You must specify at least 4 MiB of memory for a job using this parameter. The memory hard limit can be specified in several places. It must be specified for each node at least once.
        @available(*, deprecated, message: "This field is deprecated, use resourceRequirements instead.")
        public var memory: Swift.Int?
        /// The mount points for data volumes in your container. This parameter maps to Volumes in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --volume option to [docker run](https://docs.docker.com/engine/reference/run/).
        public var mountPoints: [BatchClientTypes.MountPoint]?
        /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
        public var networkConfiguration: BatchClientTypes.NetworkConfiguration?
        /// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user). This parameter maps to Privileged in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --privileged option to [docker run](https://docs.docker.com/engine/reference/run/). The default value is false. This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
        public var privileged: Swift.Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --read-only option to docker run.
        public var readonlyRootFilesystem: Swift.Bool?
        /// The private repository authentication credentials to use.
        public var repositoryCredentials: BatchClientTypes.RepositoryCredentials?
        /// The type and amount of resources to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
        public var resourceRequirements: [BatchClientTypes.ResourceRequirement]?
        /// An object that represents the compute environment architecture for Batch jobs on Fargate.
        public var runtimePlatform: BatchClientTypes.RuntimePlatform?
        /// The secrets for the container. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
        public var secrets: [BatchClientTypes.Secret]?
        /// A list of ulimits to set in the container. This parameter maps to Ulimits in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --ulimit option to [docker run](https://docs.docker.com/engine/reference/run/). This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
        public var ulimits: [BatchClientTypes.Ulimit]?
        /// The user name to use inside the container. This parameter maps to User in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --user option to [docker run](https://docs.docker.com/engine/reference/run/).
        public var user: Swift.String?
        /// This parameter is deprecated, use resourceRequirements to specify the vCPU requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs running on Amazon EC2 resources, it specifies the number of vCPUs reserved for the job. Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to CpuShares in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --cpu-shares option to [docker run](https://docs.docker.com/engine/reference/run/). The number of vCPUs must be specified but can be specified in several places. You must specify it at least once for each node.
        @available(*, deprecated, message: "This field is deprecated, use resourceRequirements instead.")
        public var vcpus: Swift.Int?
        /// A list of data volumes used in a job.
        public var volumes: [BatchClientTypes.Volume]?

        public init(
            command: [Swift.String]? = nil,
            environment: [BatchClientTypes.KeyValuePair]? = nil,
            ephemeralStorage: BatchClientTypes.EphemeralStorage? = nil,
            executionRoleArn: Swift.String? = nil,
            fargatePlatformConfiguration: BatchClientTypes.FargatePlatformConfiguration? = nil,
            image: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            jobRoleArn: Swift.String? = nil,
            linuxParameters: BatchClientTypes.LinuxParameters? = nil,
            logConfiguration: BatchClientTypes.LogConfiguration? = nil,
            memory: Swift.Int? = nil,
            mountPoints: [BatchClientTypes.MountPoint]? = nil,
            networkConfiguration: BatchClientTypes.NetworkConfiguration? = nil,
            privileged: Swift.Bool? = nil,
            readonlyRootFilesystem: Swift.Bool? = nil,
            repositoryCredentials: BatchClientTypes.RepositoryCredentials? = nil,
            resourceRequirements: [BatchClientTypes.ResourceRequirement]? = nil,
            runtimePlatform: BatchClientTypes.RuntimePlatform? = nil,
            secrets: [BatchClientTypes.Secret]? = nil,
            ulimits: [BatchClientTypes.Ulimit]? = nil,
            user: Swift.String? = nil,
            vcpus: Swift.Int? = nil,
            volumes: [BatchClientTypes.Volume]? = nil
        )
        {
            self.command = command
            self.environment = environment
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.fargatePlatformConfiguration = fargatePlatformConfiguration
            self.image = image
            self.instanceType = instanceType
            self.jobRoleArn = jobRoleArn
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.memory = memory
            self.mountPoints = mountPoints
            self.networkConfiguration = networkConfiguration
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.repositoryCredentials = repositoryCredentials
            self.resourceRequirements = resourceRequirements
            self.runtimePlatform = runtimePlatform
            self.secrets = secrets
            self.ulimits = ulimits
            self.user = user
            self.vcpus = vcpus
            self.volumes = volumes
        }
    }

}

extension BatchClientTypes {
    /// A list of containers that this task depends on.
    public struct TaskContainerDependency {
        /// The dependency condition of the container. The following are the available conditions and their behavior:
        ///
        /// * START - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.
        ///
        /// * COMPLETE - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.
        ///
        /// * SUCCESS - This condition is the same as COMPLETE, but it also requires that the container exits with a zero status. This condition can't be set on an essential container.
        public var condition: Swift.String?
        /// A unique identifier for the container.
        public var containerName: Swift.String?

        public init(
            condition: Swift.String? = nil,
            containerName: Swift.String? = nil
        )
        {
            self.condition = condition
            self.containerName = containerName
        }
    }

}

extension BatchClientTypes {
    /// Container properties are used for Amazon ECS-based job definitions. These properties to describe the container that's launched as part of a job.
    public struct TaskContainerProperties {
        /// The command that's passed to the container. This parameter maps to Cmd in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the COMMAND parameter to [docker run](https://docs.docker.com/engine/reference/run/). For more information, see [Dockerfile reference: CMD](https://docs.docker.com/engine/reference/builder/#cmd).
        public var command: [Swift.String]?
        /// A list of containers that this container depends on.
        public var dependsOn: [BatchClientTypes.TaskContainerDependency]?
        /// The environment variables to pass to a container. This parameter maps to Env inthe [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --env parameter to [docker run](https://docs.docker.com/engine/reference/run/). We don't recommend using plaintext environment variables for sensitive information, such as credential data. Environment variables cannot start with AWS_BATCH. This naming convention is reserved for variables that Batch sets.
        public var environment: [BatchClientTypes.KeyValuePair]?
        /// If the essential parameter of a container is marked as true, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the essential parameter of a container is marked as false, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential. All jobs must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the Amazon Elastic Container Service Developer Guide.
        public var essential: Swift.Bool?
        /// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either repository-url/image:tag or repository-url/image@digest. Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to Image in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/) and the IMAGE parameter of the [ docker run ](https://docs.docker.com/engine/reference/run/#security-configuration).
        /// This member is required.
        public var image: Swift.String?
        /// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information, see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
        public var linuxParameters: BatchClientTypes.LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/) and the --log-driver option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration). By default, containers use the same logging driver that the Docker daemon uses. However the container can use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information about the options for different supported log drivers, see [Configure logging drivers ](https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation. Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the LogConfiguration data type). Additional log drivers may be available in future releases of the Amazon ECS container agent. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}' The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide.
        public var logConfiguration: BatchClientTypes.LogConfiguration?
        /// The mount points for data volumes in your container. This parameter maps to Volumes in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/) and the [--volume] option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration). Windows containers can mount whole directories on the same drive as $env:ProgramData. Windows containers can't mount directories on a different drive, and mount point can't be across drives.
        public var mountPoints: [BatchClientTypes.MountPoint]?
        /// The name of a container. The name can be used as a unique identifier to target your dependsOn and Overrides objects.
        public var name: Swift.String?
        /// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user). This parameter maps to Privileged in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/) and the --privileged option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration). This parameter is not supported for Windows containers or tasks run on Fargate.
        public var privileged: Swift.Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/) and the --read-only option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration). This parameter is not supported for Windows containers.
        public var readonlyRootFilesystem: Swift.Bool?
        /// The private repository authentication credentials to use.
        public var repositoryCredentials: BatchClientTypes.RepositoryCredentials?
        /// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
        public var resourceRequirements: [BatchClientTypes.ResourceRequirement]?
        /// The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the Amazon Elastic Container Service Developer Guide.
        public var secrets: [BatchClientTypes.Secret]?
        /// A list of ulimits to set in the container. If a ulimit value is specified in a task definition, it overrides the default values set by Docker. This parameter maps to Ulimits in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/) and the --ulimit option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration). Amazon ECS tasks hosted on Fargate use the default resource limit values set by the operating system with the exception of the nofile resource limit parameter which Fargate overrides. The nofile resource limit sets a restriction on the number of open files that a container can use. The default nofile soft limit is 1024 and the default hard limit is 65535. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}' This parameter is not supported for Windows containers.
        public var ulimits: [BatchClientTypes.Ulimit]?
        /// The user to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run. When running tasks using the host network mode, don't run containers using the root user (UID 0). We recommend using a non-root user for better security. You can specify the user using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
        ///
        /// * user
        ///
        /// * user:group
        ///
        /// * uid
        ///
        /// * uid:gid
        ///
        /// * user:gi
        ///
        /// * uid:group
        ///
        ///
        /// This parameter is not supported for Windows containers.
        public var user: Swift.String?

        public init(
            command: [Swift.String]? = nil,
            dependsOn: [BatchClientTypes.TaskContainerDependency]? = nil,
            environment: [BatchClientTypes.KeyValuePair]? = nil,
            essential: Swift.Bool? = nil,
            image: Swift.String? = nil,
            linuxParameters: BatchClientTypes.LinuxParameters? = nil,
            logConfiguration: BatchClientTypes.LogConfiguration? = nil,
            mountPoints: [BatchClientTypes.MountPoint]? = nil,
            name: Swift.String? = nil,
            privileged: Swift.Bool? = nil,
            readonlyRootFilesystem: Swift.Bool? = nil,
            repositoryCredentials: BatchClientTypes.RepositoryCredentials? = nil,
            resourceRequirements: [BatchClientTypes.ResourceRequirement]? = nil,
            secrets: [BatchClientTypes.Secret]? = nil,
            ulimits: [BatchClientTypes.Ulimit]? = nil,
            user: Swift.String? = nil
        )
        {
            self.command = command
            self.dependsOn = dependsOn
            self.environment = environment
            self.essential = essential
            self.image = image
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.mountPoints = mountPoints
            self.name = name
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.repositoryCredentials = repositoryCredentials
            self.resourceRequirements = resourceRequirements
            self.secrets = secrets
            self.ulimits = ulimits
            self.user = user
        }
    }

}

extension BatchClientTypes {
    /// The properties for a task definition that describes the container and volume definitions of an Amazon ECS task. You can specify which Docker images to use, the required resources, and other configurations related to launching the task definition through an Amazon ECS service or task.
    public struct EcsTaskProperties {
        /// This object is a list of containers.
        /// This member is required.
        public var containers: [BatchClientTypes.TaskContainerProperties]?
        /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate.
        public var ephemeralStorage: BatchClientTypes.EphemeralStorage?
        /// The Amazon Resource Name (ARN) of the execution role that Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the Batch User Guide.
        public var executionRoleArn: Swift.String?
        /// The IPC resource namespace to use for the containers in the task. The valid values are host, task, or none. If host is specified, all containers within the tasks that specified the host IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same IPC resources. If none is specified, the IPC resources within the containers of a task are private, and are not shared with other containers in a task or on the container instance. If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the Docker run reference.
        public var ipcMode: Swift.String?
        /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
        public var networkConfiguration: BatchClientTypes.NetworkConfiguration?
        /// The process namespace to use for the containers in the task. The valid values are host or task. For example, monitoring sidecars might need pidMode to access information about other containers running in the same task. If host is specified, all containers within the tasks that specified the host PID mode on the same container instance share the process namespace with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same process namespace. If no value is specified, the default is a private namespace for each container. For more information, see [PID settings](https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the Docker run reference.
        public var pidMode: Swift.String?
        /// The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the LATEST platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see [Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
        public var platformVersion: Swift.String?
        /// An object that represents the compute environment architecture for Batch jobs on Fargate.
        public var runtimePlatform: BatchClientTypes.RuntimePlatform?
        /// The Amazon Resource Name (ARN) that's associated with the Amazon ECS task. This is object is comparable to [ContainerProperties:jobRoleArn](https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html).
        public var taskRoleArn: Swift.String?
        /// A list of volumes that are associated with the job.
        public var volumes: [BatchClientTypes.Volume]?

        public init(
            containers: [BatchClientTypes.TaskContainerProperties]? = nil,
            ephemeralStorage: BatchClientTypes.EphemeralStorage? = nil,
            executionRoleArn: Swift.String? = nil,
            ipcMode: Swift.String? = nil,
            networkConfiguration: BatchClientTypes.NetworkConfiguration? = nil,
            pidMode: Swift.String? = nil,
            platformVersion: Swift.String? = nil,
            runtimePlatform: BatchClientTypes.RuntimePlatform? = nil,
            taskRoleArn: Swift.String? = nil,
            volumes: [BatchClientTypes.Volume]? = nil
        )
        {
            self.containers = containers
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.ipcMode = ipcMode
            self.networkConfiguration = networkConfiguration
            self.pidMode = pidMode
            self.platformVersion = platformVersion
            self.runtimePlatform = runtimePlatform
            self.taskRoleArn = taskRoleArn
            self.volumes = volumes
        }
    }

}

extension BatchClientTypes {
    /// An object that contains the properties for the Amazon ECS resources of a job.
    public struct EcsProperties {
        /// An object that contains the properties for the Amazon ECS task definition of a job. This object is currently limited to one element.
        /// This member is required.
        public var taskProperties: [BatchClientTypes.EcsTaskProperties]?

        public init(
            taskProperties: [BatchClientTypes.EcsTaskProperties]? = nil
        )
        {
            self.taskProperties = taskProperties
        }
    }

}

extension BatchClientTypes {
    /// An environment variable.
    public struct EksContainerEnvironmentVariable {
        /// The name of the environment variable.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the environment variable.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension BatchClientTypes {
    /// The type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu. For more information, see [Resource management for pods and containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.
    public struct EksContainerResourceRequirements {
        /// The type and quantity of the resources to reserve for the container. The values vary based on the name that's specified. Resources can be requested using either the limits or the requests objects. memory The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. memory can be specified in limits, requests, or both. If memory is specified in both places, then the value that's specified in limits must be equal to the value that's specified in requests. To maximize your resource utilization, provide your jobs with as much memory as possible for the specific instance type that you are using. To learn how, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the Batch User Guide. cpu The number of CPUs that's reserved for the container. Values must be an even multiple of 0.25. cpu can be specified in limits, requests, or both. If cpu is specified in both places, then the value that's specified in limits must be at least as large as the value that's specified in requests. nvidia.com/gpu The number of GPUs that's reserved for the container. Values must be a whole integer. memory can be specified in limits, requests, or both. If memory is specified in both places, then the value that's specified in limits must be equal to the value that's specified in requests.
        public var limits: [Swift.String: Swift.String]?
        /// The type and quantity of the resources to request for the container. The values vary based on the name that's specified. Resources can be requested by using either the limits or the requests objects. memory The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. memory can be specified in limits, requests, or both. If memory is specified in both, then the value that's specified in limits must be equal to the value that's specified in requests. If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the Batch User Guide. cpu The number of CPUs that are reserved for the container. Values must be an even multiple of 0.25. cpu can be specified in limits, requests, or both. If cpu is specified in both, then the value that's specified in limits must be at least as large as the value that's specified in requests. nvidia.com/gpu The number of GPUs that are reserved for the container. Values must be a whole integer. nvidia.com/gpu can be specified in limits, requests, or both. If nvidia.com/gpu is specified in both, then the value that's specified in limits must be equal to the value that's specified in requests.
        public var requests: [Swift.String: Swift.String]?

        public init(
            limits: [Swift.String: Swift.String]? = nil,
            requests: [Swift.String: Swift.String]? = nil
        )
        {
            self.limits = limits
            self.requests = requests
        }
    }

}

extension BatchClientTypes {
    /// The security context for a job. For more information, see [Configure a security context for a pod or container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) in the Kubernetes documentation.
    public struct EksContainerSecurityContext {
        /// Whether or not a container or a Kubernetes pod is allowed to gain more privileges than its parent process. The default value is false.
        public var allowPrivilegeEscalation: Swift.Bool?
        /// When this parameter is true, the container is given elevated permissions on the host container instance. The level of permissions are similar to the root user permissions. The default value is false. This parameter maps to privileged policy in the [Privileged pod security policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#privileged) in the Kubernetes documentation.
        public var privileged: Swift.Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. The default value is false. This parameter maps to ReadOnlyRootFilesystem policy in the [Volumes and file systems pod security policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#volumes-and-file-systems) in the Kubernetes documentation.
        public var readOnlyRootFilesystem: Swift.Bool?
        /// When this parameter is specified, the container is run as the specified group ID (gid). If this parameter isn't specified, the default is the group that's specified in the image metadata. This parameter maps to RunAsGroup and MustRunAs policy in the [Users and groups pod security policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the Kubernetes documentation.
        public var runAsGroup: Swift.Int?
        /// When this parameter is specified, the container is run as a user with a uid other than 0. If this parameter isn't specified, so such rule is enforced. This parameter maps to RunAsUser and MustRunAsNonRoot policy in the [Users and groups pod security policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the Kubernetes documentation.
        public var runAsNonRoot: Swift.Bool?
        /// When this parameter is specified, the container is run as the specified user ID (uid). If this parameter isn't specified, the default is the user that's specified in the image metadata. This parameter maps to RunAsUser and MustRanAs policy in the [Users and groups pod security policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the Kubernetes documentation.
        public var runAsUser: Swift.Int?

        public init(
            allowPrivilegeEscalation: Swift.Bool? = nil,
            privileged: Swift.Bool? = nil,
            readOnlyRootFilesystem: Swift.Bool? = nil,
            runAsGroup: Swift.Int? = nil,
            runAsNonRoot: Swift.Bool? = nil,
            runAsUser: Swift.Int? = nil
        )
        {
            self.allowPrivilegeEscalation = allowPrivilegeEscalation
            self.privileged = privileged
            self.readOnlyRootFilesystem = readOnlyRootFilesystem
            self.runAsGroup = runAsGroup
            self.runAsNonRoot = runAsNonRoot
            self.runAsUser = runAsUser
        }
    }

}

extension BatchClientTypes {
    /// The volume mounts for a container for an Amazon EKS job. For more information about volumes and volume mounts in Kubernetes, see [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/) in the Kubernetes documentation.
    public struct EksContainerVolumeMount {
        /// The path on the container where the volume is mounted.
        public var mountPath: Swift.String?
        /// The name the volume mount. This must match the name of one of the volumes in the pod.
        public var name: Swift.String?
        /// If this value is true, the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is false.
        public var readOnly: Swift.Bool?

        public init(
            mountPath: Swift.String? = nil,
            name: Swift.String? = nil,
            readOnly: Swift.Bool? = nil
        )
        {
            self.mountPath = mountPath
            self.name = name
            self.readOnly = readOnly
        }
    }

}

extension BatchClientTypes {
    /// EKS container properties are used in job definitions for Amazon EKS based job definitions to describe the properties for a container node in the pod that's launched as part of a job. This can't be specified for Amazon ECS based job definitions.
    public struct EksContainer {
        /// An array of arguments to the entrypoint. If this isn't specified, the CMD of the container image is used. This corresponds to the args member in the [Entrypoint](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) portion of the [Pod](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/) in Kubernetes. Environment variable references are expanded using the container's environment. If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to "$(NAME1)" and the NAME1 environment variable doesn't exist, the command string will remain "$(NAME1)." $$ is replaced with $, and the resulting string isn't expanded. For example, $$(VAR_NAME) is passed as $(VAR_NAME) whether or not the VAR_NAME environment variable exists. For more information, see [Dockerfile reference: CMD](https://docs.docker.com/engine/reference/builder/#cmd) and [Define a command and arguments for a pod](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) in the Kubernetes documentation.
        public var args: [Swift.String]?
        /// The entrypoint for the container. This isn't run within a shell. If this isn't specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container's environment. If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to "$(NAME1)" and the NAME1 environment variable doesn't exist, the command string will remain "$(NAME1)." $$ is replaced with $ and the resulting string isn't expanded. For example, $$(VAR_NAME) will be passed as $(VAR_NAME) whether or not the VAR_NAME environment variable exists. The entrypoint can't be updated. For more information, see [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) in the Dockerfile reference and [Define a command and arguments for a container](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) and [Entrypoint](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) in the Kubernetes documentation.
        public var command: [Swift.String]?
        /// The environment variables to pass to a container. Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public var env: [BatchClientTypes.EksContainerEnvironmentVariable]?
        /// The Docker image used to start the container.
        /// This member is required.
        public var image: Swift.String?
        /// The image pull policy for the container. Supported values are Always, IfNotPresent, and Never. This parameter defaults to IfNotPresent. However, if the :latest tag is specified, it defaults to Always. For more information, see [Updating images](https://kubernetes.io/docs/concepts/containers/images/#updating-images) in the Kubernetes documentation.
        public var imagePullPolicy: Swift.String?
        /// The name of the container. If the name isn't specified, the default name "Default" is used. Each container in a pod must have a unique name.
        public var name: Swift.String?
        /// The type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu. For more information, see [Resource management for pods and containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.
        public var resources: BatchClientTypes.EksContainerResourceRequirements?
        /// The security context for a job. For more information, see [Configure a security context for a pod or container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) in the Kubernetes documentation.
        public var securityContext: BatchClientTypes.EksContainerSecurityContext?
        /// The volume mounts for the container. Batch supports emptyDir, hostPath, and secret volume types. For more information about volumes and volume mounts in Kubernetes, see [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/) in the Kubernetes documentation.
        public var volumeMounts: [BatchClientTypes.EksContainerVolumeMount]?

        public init(
            args: [Swift.String]? = nil,
            command: [Swift.String]? = nil,
            env: [BatchClientTypes.EksContainerEnvironmentVariable]? = nil,
            image: Swift.String? = nil,
            imagePullPolicy: Swift.String? = nil,
            name: Swift.String? = nil,
            resources: BatchClientTypes.EksContainerResourceRequirements? = nil,
            securityContext: BatchClientTypes.EksContainerSecurityContext? = nil,
            volumeMounts: [BatchClientTypes.EksContainerVolumeMount]? = nil
        )
        {
            self.args = args
            self.command = command
            self.env = env
            self.image = image
            self.imagePullPolicy = imagePullPolicy
            self.name = name
            self.resources = resources
            self.securityContext = securityContext
            self.volumeMounts = volumeMounts
        }
    }

}

extension BatchClientTypes {
    /// References a Kubernetes secret resource. This name of the secret must start and end with an alphanumeric character, is required to be lowercase, can include periods (.) and hyphens (-), and can't contain more than 253 characters.
    public struct ImagePullSecret {
        /// Provides a unique identifier for the ImagePullSecret. This object is required when EksPodProperties$imagePullSecrets is used.
        /// This member is required.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension BatchClientTypes {
    /// Describes and uniquely identifies Kubernetes resources. For example, the compute environment that a pod runs in or the jobID for a job running in the pod. For more information, see [Understanding Kubernetes Objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/) in the Kubernetes documentation.
    public struct EksMetadata {
        /// Key-value pairs used to identify, sort, and organize cube resources. Can contain up to 63 uppercase letters, lowercase letters, numbers, hyphens (-), and underscores (_). Labels can be added or modified at any time. Each resource can have multiple labels, but each key must be unique for a given object.
        public var labels: [Swift.String: Swift.String]?

        public init(
            labels: [Swift.String: Swift.String]? = nil
        )
        {
            self.labels = labels
        }
    }

}

extension BatchClientTypes {
    /// Specifies the configuration of a Kubernetes emptyDir volume. An emptyDir volume is first created when a pod is assigned to a node. It exists as long as that pod is running on that node. The emptyDir volume is initially empty. All containers in the pod can read and write the files in the emptyDir volume. However, the emptyDir volume can be mounted at the same or different paths in each container. When a pod is removed from a node for any reason, the data in the emptyDir is deleted permanently. For more information, see [emptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) in the Kubernetes documentation.
    public struct EksEmptyDir {
        /// The medium to store the volume. The default value is an empty string, which uses the storage of the node. "" (Default) Use the disk storage of the node. "Memory" Use the tmpfs volume that's backed by the RAM of the node. Contents of the volume are lost when the node reboots, and any storage on the volume counts against the container's memory limit.
        public var medium: Swift.String?
        /// The maximum size of the volume. By default, there's no maximum size defined.
        public var sizeLimit: Swift.String?

        public init(
            medium: Swift.String? = nil,
            sizeLimit: Swift.String? = nil
        )
        {
            self.medium = medium
            self.sizeLimit = sizeLimit
        }
    }

}

extension BatchClientTypes {
    /// Specifies the configuration of a Kubernetes hostPath volume. A hostPath volume mounts an existing file or directory from the host node's filesystem into your pod. For more information, see [hostPath](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) in the Kubernetes documentation.
    public struct EksHostPath {
        /// The path of the file or directory on the host to mount into containers on the pod.
        public var path: Swift.String?

        public init(
            path: Swift.String? = nil
        )
        {
            self.path = path
        }
    }

}

extension BatchClientTypes {
    /// Specifies the configuration of a Kubernetes secret volume. For more information, see [secret](https://kubernetes.io/docs/concepts/storage/volumes/#secret) in the Kubernetes documentation.
    public struct EksSecret {
        /// Specifies whether the secret or the secret's keys must be defined.
        public var `optional`: Swift.Bool?
        /// The name of the secret. The name must be allowed as a DNS subdomain name. For more information, see [DNS subdomain names](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) in the Kubernetes documentation.
        /// This member is required.
        public var secretName: Swift.String?

        public init(
            `optional`: Swift.Bool? = nil,
            secretName: Swift.String? = nil
        )
        {
            self.`optional` = `optional`
            self.secretName = secretName
        }
    }

}

extension BatchClientTypes {
    /// Specifies an Amazon EKS volume for a job definition.
    public struct EksVolume {
        /// Specifies the configuration of a Kubernetes emptyDir volume. For more information, see [emptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) in the Kubernetes documentation.
        public var emptyDir: BatchClientTypes.EksEmptyDir?
        /// Specifies the configuration of a Kubernetes hostPath volume. For more information, see [hostPath](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) in the Kubernetes documentation.
        public var hostPath: BatchClientTypes.EksHostPath?
        /// The name of the volume. The name must be allowed as a DNS subdomain name. For more information, see [DNS subdomain names](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) in the Kubernetes documentation.
        /// This member is required.
        public var name: Swift.String?
        /// Specifies the configuration of a Kubernetes secret volume. For more information, see [secret](https://kubernetes.io/docs/concepts/storage/volumes/#secret) in the Kubernetes documentation.
        public var secret: BatchClientTypes.EksSecret?

        public init(
            emptyDir: BatchClientTypes.EksEmptyDir? = nil,
            hostPath: BatchClientTypes.EksHostPath? = nil,
            name: Swift.String? = nil,
            secret: BatchClientTypes.EksSecret? = nil
        )
        {
            self.emptyDir = emptyDir
            self.hostPath = hostPath
            self.name = name
            self.secret = secret
        }
    }

}

extension BatchClientTypes {
    /// The properties for the pod.
    public struct EksPodProperties {
        /// The properties of the container that's used on the Amazon EKS pod.
        public var containers: [BatchClientTypes.EksContainer]?
        /// The DNS policy for the pod. The default value is ClusterFirst. If the hostNetwork parameter is not specified, the default is ClusterFirstWithHostNet. ClusterFirst indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see [Pod's DNS policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) in the Kubernetes documentation. Valid values: Default | ClusterFirst | ClusterFirstWithHostNet
        public var dnsPolicy: Swift.String?
        /// Indicates if the pod uses the hosts' network IP address. The default value is true. Setting this to false enables the Kubernetes pod networking model. Most Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see [Host namespaces](https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces) and [Pod networking](https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking) in the Kubernetes documentation.
        public var hostNetwork: Swift.Bool?
        /// References a Kubernetes secret resource. It holds a list of secrets. These secrets help to gain access to pull an images from a private registry. ImagePullSecret$name is required when this object is used.
        public var imagePullSecrets: [BatchClientTypes.ImagePullSecret]?
        /// These containers run before application containers, always runs to completion, and must complete successfully before the next container starts. These containers are registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store. For more information, see [Init Containers](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) in the Kubernetes documentation. This object is limited to 10 elements
        public var initContainers: [BatchClientTypes.EksContainer]?
        /// Metadata about the Kubernetes pod. For more information, see [Understanding Kubernetes Objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/) in the Kubernetes documentation.
        public var metadata: BatchClientTypes.EksMetadata?
        /// The name of the service account that's used to run the pod. For more information, see [Kubernetes service accounts](https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html) and [Configure a Kubernetes service account to assume an IAM role](https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html) in the Amazon EKS User Guide and [Configure service accounts for pods](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) in the Kubernetes documentation.
        public var serviceAccountName: Swift.String?
        /// Indicates if the processes in a container are shared, or visible, to other containers in the same pod. For more information, see [Share Process Namespace between Containers in a Pod](https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/).
        public var shareProcessNamespace: Swift.Bool?
        /// Specifies the volumes for a job definition that uses Amazon EKS resources.
        public var volumes: [BatchClientTypes.EksVolume]?

        public init(
            containers: [BatchClientTypes.EksContainer]? = nil,
            dnsPolicy: Swift.String? = nil,
            hostNetwork: Swift.Bool? = nil,
            imagePullSecrets: [BatchClientTypes.ImagePullSecret]? = nil,
            initContainers: [BatchClientTypes.EksContainer]? = nil,
            metadata: BatchClientTypes.EksMetadata? = nil,
            serviceAccountName: Swift.String? = nil,
            shareProcessNamespace: Swift.Bool? = nil,
            volumes: [BatchClientTypes.EksVolume]? = nil
        )
        {
            self.containers = containers
            self.dnsPolicy = dnsPolicy
            self.hostNetwork = hostNetwork
            self.imagePullSecrets = imagePullSecrets
            self.initContainers = initContainers
            self.metadata = metadata
            self.serviceAccountName = serviceAccountName
            self.shareProcessNamespace = shareProcessNamespace
            self.volumes = volumes
        }
    }

}

extension BatchClientTypes {
    /// An object that contains the properties for the Kubernetes resources of a job.
    public struct EksProperties {
        /// The properties for the Kubernetes pod resources of a job.
        public var podProperties: BatchClientTypes.EksPodProperties?

        public init(
            podProperties: BatchClientTypes.EksPodProperties? = nil
        )
        {
            self.podProperties = podProperties
        }
    }

}

extension BatchClientTypes {
    /// This is an object that represents the properties of the node range for a multi-node parallel job.
    public struct NodeRangeProperty {
        /// The container details for the node range.
        public var container: BatchClientTypes.ContainerProperties?
        /// This is an object that represents the properties of the node range for a multi-node parallel job.
        public var ecsProperties: BatchClientTypes.EcsProperties?
        /// This is an object that represents the properties of the node range for a multi-node parallel job.
        public var eksProperties: BatchClientTypes.EksProperties?
        /// The instance types of the underlying host infrastructure of a multi-node parallel job. This parameter isn't applicable to jobs that are running on Fargate resources. In addition, this list object is currently limited to one element.
        public var instanceTypes: [Swift.String]?
        /// The range of nodes, using node index values. A range of 0:3 indicates nodes with index values of 0 through 3. If the starting range value is omitted (:n), then 0 is used to start the range. If the ending range value is omitted (n:), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (0:n). You can nest node ranges (for example, 0:10 and 4:5). In this case, the 4:5 range properties override the 0:10 properties.
        /// This member is required.
        public var targetNodes: Swift.String?

        public init(
            container: BatchClientTypes.ContainerProperties? = nil,
            ecsProperties: BatchClientTypes.EcsProperties? = nil,
            eksProperties: BatchClientTypes.EksProperties? = nil,
            instanceTypes: [Swift.String]? = nil,
            targetNodes: Swift.String? = nil
        )
        {
            self.container = container
            self.ecsProperties = ecsProperties
            self.eksProperties = eksProperties
            self.instanceTypes = instanceTypes
            self.targetNodes = targetNodes
        }
    }

}

extension BatchClientTypes {
    /// An object that represents the node properties of a multi-node parallel job. Node properties can't be specified for Amazon EKS based job definitions.
    public struct NodeProperties {
        /// Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.
        /// This member is required.
        public var mainNode: Swift.Int?
        /// A list of node ranges and their properties that are associated with a multi-node parallel job.
        /// This member is required.
        public var nodeRangeProperties: [BatchClientTypes.NodeRangeProperty]?
        /// The number of nodes that are associated with a multi-node parallel job.
        /// This member is required.
        public var numNodes: Swift.Int?

        public init(
            mainNode: Swift.Int? = nil,
            nodeRangeProperties: [BatchClientTypes.NodeRangeProperty]? = nil,
            numNodes: Swift.Int? = nil
        )
        {
            self.mainNode = mainNode
            self.nodeRangeProperties = nodeRangeProperties
            self.numNodes = numNodes
        }
    }

}

extension BatchClientTypes {

    public enum PlatformCapability: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2
        case fargate
        case sdkUnknown(Swift.String)

        public static var allCases: [PlatformCapability] {
            return [
                .ec2,
                .fargate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .fargate: return "FARGATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {

    public enum RetryAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exit
        case retry
        case sdkUnknown(Swift.String)

        public static var allCases: [RetryAction] {
            return [
                .exit,
                .retry
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exit: return "EXIT"
            case .retry: return "RETRY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// Specifies an array of up to 5 conditions to be met, and an action to take (RETRY or EXIT) if all conditions are met. If none of the EvaluateOnExit conditions in a RetryStrategy match, then the job is retried.
    public struct EvaluateOnExit {
        /// Specifies the action to take if all of the specified conditions (onStatusReason, onReason, and onExitCode) are met. The values aren't case sensitive.
        /// This member is required.
        public var action: BatchClientTypes.RetryAction?
        /// Contains a glob pattern to match against the decimal representation of the ExitCode returned for a job. The pattern can be up to 512 characters long. It can contain only numbers, and can end with an asterisk (*) so that only the start of the string needs to be an exact match. The string can contain up to 512 characters.
        public var onExitCode: Swift.String?
        /// Contains a glob pattern to match against the Reason returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces and tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
        public var onReason: Swift.String?
        /// Contains a glob pattern to match against the StatusReason returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white spaces (including spaces or tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
        public var onStatusReason: Swift.String?

        public init(
            action: BatchClientTypes.RetryAction? = nil,
            onExitCode: Swift.String? = nil,
            onReason: Swift.String? = nil,
            onStatusReason: Swift.String? = nil
        )
        {
            self.action = action
            self.onExitCode = onExitCode
            self.onReason = onReason
            self.onStatusReason = onStatusReason
        }
    }

}

extension BatchClientTypes {
    /// The retry strategy that's associated with a job. For more information, see [Automated job retries](https://docs.aws.amazon.com/batch/latest/userguide/job_retries.html) in the Batch User Guide.
    public struct RetryStrategy {
        /// The number of times to move a job to the RUNNABLE status. You can specify between 1 and 10 attempts. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value.
        public var attempts: Swift.Int?
        /// Array of up to 5 objects that specify the conditions where jobs are retried or failed. If this parameter is specified, then the attempts parameter must also be specified. If none of the listed conditions match, then the job is retried.
        public var evaluateOnExit: [BatchClientTypes.EvaluateOnExit]?

        public init(
            attempts: Swift.Int? = nil,
            evaluateOnExit: [BatchClientTypes.EvaluateOnExit]? = nil
        )
        {
            self.attempts = attempts
            self.evaluateOnExit = evaluateOnExit
        }
    }

}

extension BatchClientTypes {
    /// An object that represents a job timeout configuration.
    public struct JobTimeout {
        /// The job timeout time (in seconds) that's measured from the job attempt's startedAt timestamp. After this time passes, Batch terminates your jobs if they aren't finished. The minimum value for the timeout is 60 seconds. For array jobs, the timeout applies to the child jobs, not to the parent array job. For multi-node parallel (MNP) jobs, the timeout applies to the whole job, not to the individual nodes.
        public var attemptDurationSeconds: Swift.Int?

        public init(
            attemptDurationSeconds: Swift.Int? = nil
        )
        {
            self.attemptDurationSeconds = attemptDurationSeconds
        }
    }

}

extension BatchClientTypes {
    /// An object that represents an Batch job definition.
    public struct JobDefinition {
        /// The orchestration type of the compute environment. The valid values are ECS (default) or EKS.
        public var containerOrchestrationType: BatchClientTypes.OrchestrationType?
        /// An object with properties specific to Amazon ECS-based jobs. When containerProperties is used in the job definition, it can't be used in addition to eksProperties, ecsProperties, or nodeProperties.
        public var containerProperties: BatchClientTypes.ContainerProperties?
        /// An object that contains the properties for the Amazon ECS resources of a job.When ecsProperties is used in the job definition, it can't be used in addition to containerProperties, eksProperties, or nodeProperties.
        public var ecsProperties: BatchClientTypes.EcsProperties?
        /// An object with properties that are specific to Amazon EKS-based jobs. When eksProperties is used in the job definition, it can't be used in addition to containerProperties, ecsProperties, or nodeProperties.
        public var eksProperties: BatchClientTypes.EksProperties?
        /// The Amazon Resource Name (ARN) for the job definition.
        /// This member is required.
        public var jobDefinitionArn: Swift.String?
        /// The name of the job definition.
        /// This member is required.
        public var jobDefinitionName: Swift.String?
        /// An object with properties that are specific to multi-node parallel jobs. When nodeProperties is used in the job definition, it can't be used in addition to containerProperties, ecsProperties, or eksProperties. If the job runs on Fargate resources, don't specify nodeProperties. Use containerProperties instead.
        public var nodeProperties: BatchClientTypes.NodeProperties?
        /// Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see [Job definition parameters](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html) in the Batch User Guide.
        public var parameters: [Swift.String: Swift.String]?
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. Jobs run on Fargate resources specify FARGATE.
        public var platformCapabilities: [BatchClientTypes.PlatformCapability]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state.
        public var propagateTags: Swift.Bool?
        /// The retry strategy to use for failed jobs that are submitted with this job definition.
        public var retryStrategy: BatchClientTypes.RetryStrategy?
        /// The revision of the job definition.
        /// This member is required.
        public var revision: Swift.Int?
        /// The scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
        public var schedulingPriority: Swift.Int?
        /// The status of the job definition.
        public var status: Swift.String?
        /// The tags that are applied to the job definition.
        public var tags: [Swift.String: Swift.String]?
        /// The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, Batch terminates your jobs if they aren't finished.
        public var timeout: BatchClientTypes.JobTimeout?
        /// The type of job definition. It's either container or multinode. If the job is run on Fargate resources, then multinode isn't supported. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the Batch User Guide.
        /// This member is required.
        public var type: Swift.String?

        public init(
            containerOrchestrationType: BatchClientTypes.OrchestrationType? = nil,
            containerProperties: BatchClientTypes.ContainerProperties? = nil,
            ecsProperties: BatchClientTypes.EcsProperties? = nil,
            eksProperties: BatchClientTypes.EksProperties? = nil,
            jobDefinitionArn: Swift.String? = nil,
            jobDefinitionName: Swift.String? = nil,
            nodeProperties: BatchClientTypes.NodeProperties? = nil,
            parameters: [Swift.String: Swift.String]? = nil,
            platformCapabilities: [BatchClientTypes.PlatformCapability]? = nil,
            propagateTags: Swift.Bool? = nil,
            retryStrategy: BatchClientTypes.RetryStrategy? = nil,
            revision: Swift.Int? = nil,
            schedulingPriority: Swift.Int? = nil,
            status: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            timeout: BatchClientTypes.JobTimeout? = nil,
            type: Swift.String? = nil
        )
        {
            self.containerOrchestrationType = containerOrchestrationType
            self.containerProperties = containerProperties
            self.ecsProperties = ecsProperties
            self.eksProperties = eksProperties
            self.jobDefinitionArn = jobDefinitionArn
            self.jobDefinitionName = jobDefinitionName
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.revision = revision
            self.schedulingPriority = schedulingPriority
            self.status = status
            self.tags = tags
            self.timeout = timeout
            self.type = type
        }
    }

}

public struct DescribeJobDefinitionsOutput {
    /// The list of job definitions.
    public var jobDefinitions: [BatchClientTypes.JobDefinition]?
    /// The nextToken value to include in a future DescribeJobDefinitions request. When the results of a DescribeJobDefinitions request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init(
        jobDefinitions: [BatchClientTypes.JobDefinition]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobDefinitions = jobDefinitions
        self.nextToken = nextToken
    }
}

/// Contains the parameters for DescribeJobQueues.
public struct DescribeJobQueuesInput {
    /// A list of up to 100 queue names or full queue Amazon Resource Name (ARN) entries.
    public var jobQueues: [Swift.String]?
    /// The maximum number of results returned by DescribeJobQueues in paginated output. When this parameter is used, DescribeJobQueues only returns maxResults results in a single page and a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeJobQueues request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then DescribeJobQueues returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated DescribeJobQueues request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        jobQueues: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobQueues = jobQueues
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension BatchClientTypes {

    public enum JQStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case deleted
        case deleting
        case invalid
        case updating
        case valid
        case sdkUnknown(Swift.String)

        public static var allCases: [JQStatus] {
            return [
                .creating,
                .deleted,
                .deleting,
                .invalid,
                .updating,
                .valid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .invalid: return "INVALID"
            case .updating: return "UPDATING"
            case .valid: return "VALID"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// An object that represents the details for an Batch job queue.
    public struct JobQueueDetail {
        /// The compute environments that are attached to the job queue and the order that job placement is preferred. Compute environments are selected for job placement in ascending order.
        /// This member is required.
        public var computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
        /// The Amazon Resource Name (ARN) of the job queue.
        /// This member is required.
        public var jobQueueArn: Swift.String?
        /// The job queue name.
        /// This member is required.
        public var jobQueueName: Swift.String?
        /// The set of actions that Batch perform on jobs that remain at the head of the job queue in the specified state longer than specified times. Batch will perform each action after maxTimeSeconds has passed.
        public var jobStateTimeLimitActions: [BatchClientTypes.JobStateTimeLimitAction]?
        /// The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order. For example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either Amazon EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT). Amazon EC2 and Fargate compute environments can't be mixed.
        /// This member is required.
        public var priority: Swift.Int?
        /// The Amazon Resource Name (ARN) of the scheduling policy. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . For example, aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy.
        public var schedulingPolicyArn: Swift.String?
        /// Describes the ability of the queue to accept new jobs. If the job queue state is ENABLED, it can accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
        /// This member is required.
        public var state: BatchClientTypes.JQState?
        /// The status of the job queue (for example, CREATING or VALID).
        public var status: BatchClientTypes.JQStatus?
        /// A short, human-readable string to provide additional details for the current status of the job queue.
        public var statusReason: Swift.String?
        /// The tags that are applied to the job queue. For more information, see [Tagging your Batch resources](https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html) in Batch User Guide.
        public var tags: [Swift.String: Swift.String]?

        public init(
            computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]? = nil,
            jobQueueArn: Swift.String? = nil,
            jobQueueName: Swift.String? = nil,
            jobStateTimeLimitActions: [BatchClientTypes.JobStateTimeLimitAction]? = nil,
            priority: Swift.Int? = nil,
            schedulingPolicyArn: Swift.String? = nil,
            state: BatchClientTypes.JQState? = nil,
            status: BatchClientTypes.JQStatus? = nil,
            statusReason: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.computeEnvironmentOrder = computeEnvironmentOrder
            self.jobQueueArn = jobQueueArn
            self.jobQueueName = jobQueueName
            self.jobStateTimeLimitActions = jobStateTimeLimitActions
            self.priority = priority
            self.schedulingPolicyArn = schedulingPolicyArn
            self.state = state
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
        }
    }

}

public struct DescribeJobQueuesOutput {
    /// The list of job queues.
    public var jobQueues: [BatchClientTypes.JobQueueDetail]?
    /// The nextToken value to include in a future DescribeJobQueues request. When the results of a DescribeJobQueues request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init(
        jobQueues: [BatchClientTypes.JobQueueDetail]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobQueues = jobQueues
        self.nextToken = nextToken
    }
}

/// Contains the parameters for DescribeJobs.
public struct DescribeJobsInput {
    /// A list of up to 100 job IDs.
    /// This member is required.
    public var jobs: [Swift.String]?

    public init(
        jobs: [Swift.String]? = nil
    )
    {
        self.jobs = jobs
    }
}

extension BatchClientTypes {
    /// An object that represents the details of a container that's part of a job.
    public struct ContainerDetail {
        /// The command that's passed to the container.
        public var command: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the container instance that the container is running on.
        public var containerInstanceArn: Swift.String?
        /// The environment variables to pass to a container. Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public var environment: [BatchClientTypes.KeyValuePair]?
        /// The amount of ephemeral storage allocated for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate.
        public var ephemeralStorage: BatchClientTypes.EphemeralStorage?
        /// The Amazon Resource Name (ARN) of the execution role that Batch can assume. For more information, see [Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the Batch User Guide.
        public var executionRoleArn: Swift.String?
        /// The exit code returned upon completion.
        public var exitCode: Swift.Int?
        /// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
        public var fargatePlatformConfiguration: BatchClientTypes.FargatePlatformConfiguration?
        /// The image used to start the container.
        public var image: Swift.String?
        /// The instance type of the underlying host infrastructure of a multi-node parallel job. This parameter isn't applicable to jobs that are running on Fargate resources.
        public var instanceType: Swift.String?
        /// The Amazon Resource Name (ARN) that's associated with the job when run.
        public var jobRoleArn: Swift.String?
        /// Linux-specific modifications that are applied to the container, such as details for device mappings.
        public var linuxParameters: BatchClientTypes.LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --log-driver option to [docker run](https://docs.docker.com/engine/reference/run/). By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance. Or, alternatively, it must be configured on a different log server for remote logging options. For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation. Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-containerproperties-logconfiguration.html) data type). Additional log drivers might be available in future releases of the Amazon ECS container agent. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version" The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide.
        public var logConfiguration: BatchClientTypes.LogConfiguration?
        /// The name of the Amazon CloudWatch Logs log stream that's associated with the container. The log group for Batch jobs is /aws/batch/job. Each container attempt receives a log stream name when they reach the RUNNING status.
        public var logStreamName: Swift.String?
        /// For jobs running on Amazon EC2 resources that didn't specify memory requirements using resourceRequirements, the number of MiB of memory reserved for the job. For other jobs, including all run on Fargate resources, see resourceRequirements.
        public var memory: Swift.Int?
        /// The mount points for data volumes in your container.
        public var mountPoints: [BatchClientTypes.MountPoint]?
        /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
        public var networkConfiguration: BatchClientTypes.NetworkConfiguration?
        /// The network interfaces that are associated with the job.
        public var networkInterfaces: [BatchClientTypes.NetworkInterface]?
        /// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user). The default value is false. This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
        public var privileged: Swift.Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --read-only option to [docker run](https://docs.docker.com/engine/reference/commandline/run/).
        public var readonlyRootFilesystem: Swift.Bool?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public var reason: Swift.String?
        /// The private repository authentication credentials to use.
        public var repositoryCredentials: BatchClientTypes.RepositoryCredentials?
        /// The type and amount of resources to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
        public var resourceRequirements: [BatchClientTypes.ResourceRequirement]?
        /// An object that represents the compute environment architecture for Batch jobs on Fargate.
        public var runtimePlatform: BatchClientTypes.RuntimePlatform?
        /// The secrets to pass to the container. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
        public var secrets: [BatchClientTypes.Secret]?
        /// The Amazon Resource Name (ARN) of the Amazon ECS task that's associated with the container job. Each container attempt receives a task ARN when they reach the STARTING status.
        public var taskArn: Swift.String?
        /// A list of ulimit values to set in the container. This parameter maps to Ulimits in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --ulimit option to [docker run](https://docs.docker.com/engine/reference/run/). This parameter isn't applicable to jobs that are running on Fargate resources.
        public var ulimits: [BatchClientTypes.Ulimit]?
        /// The user name to use inside the container. This parameter maps to User in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --user option to [docker run](https://docs.docker.com/engine/reference/run/).
        public var user: Swift.String?
        /// The number of vCPUs reserved for the container. For jobs that run on Amazon EC2 resources, you can specify the vCPU requirement for the job using resourceRequirements, but you can't specify the vCPU requirements in both the vcpus and resourceRequirements object. This parameter maps to CpuShares in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --cpu-shares option to [docker run](https://docs.docker.com/engine/reference/run/). Each vCPU is equivalent to 1,024 CPU shares. You must specify at least one vCPU. This is required but can be specified in several places. It must be specified for each node at least once. This parameter isn't applicable to jobs that run on Fargate resources. For jobs that run on Fargate resources, you must specify the vCPU requirement for the job using resourceRequirements.
        public var vcpus: Swift.Int?
        /// A list of volumes that are associated with the job.
        public var volumes: [BatchClientTypes.Volume]?

        public init(
            command: [Swift.String]? = nil,
            containerInstanceArn: Swift.String? = nil,
            environment: [BatchClientTypes.KeyValuePair]? = nil,
            ephemeralStorage: BatchClientTypes.EphemeralStorage? = nil,
            executionRoleArn: Swift.String? = nil,
            exitCode: Swift.Int? = nil,
            fargatePlatformConfiguration: BatchClientTypes.FargatePlatformConfiguration? = nil,
            image: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            jobRoleArn: Swift.String? = nil,
            linuxParameters: BatchClientTypes.LinuxParameters? = nil,
            logConfiguration: BatchClientTypes.LogConfiguration? = nil,
            logStreamName: Swift.String? = nil,
            memory: Swift.Int? = nil,
            mountPoints: [BatchClientTypes.MountPoint]? = nil,
            networkConfiguration: BatchClientTypes.NetworkConfiguration? = nil,
            networkInterfaces: [BatchClientTypes.NetworkInterface]? = nil,
            privileged: Swift.Bool? = nil,
            readonlyRootFilesystem: Swift.Bool? = nil,
            reason: Swift.String? = nil,
            repositoryCredentials: BatchClientTypes.RepositoryCredentials? = nil,
            resourceRequirements: [BatchClientTypes.ResourceRequirement]? = nil,
            runtimePlatform: BatchClientTypes.RuntimePlatform? = nil,
            secrets: [BatchClientTypes.Secret]? = nil,
            taskArn: Swift.String? = nil,
            ulimits: [BatchClientTypes.Ulimit]? = nil,
            user: Swift.String? = nil,
            vcpus: Swift.Int? = nil,
            volumes: [BatchClientTypes.Volume]? = nil
        )
        {
            self.command = command
            self.containerInstanceArn = containerInstanceArn
            self.environment = environment
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.exitCode = exitCode
            self.fargatePlatformConfiguration = fargatePlatformConfiguration
            self.image = image
            self.instanceType = instanceType
            self.jobRoleArn = jobRoleArn
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.logStreamName = logStreamName
            self.memory = memory
            self.mountPoints = mountPoints
            self.networkConfiguration = networkConfiguration
            self.networkInterfaces = networkInterfaces
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.reason = reason
            self.repositoryCredentials = repositoryCredentials
            self.resourceRequirements = resourceRequirements
            self.runtimePlatform = runtimePlatform
            self.secrets = secrets
            self.taskArn = taskArn
            self.ulimits = ulimits
            self.user = user
            self.vcpus = vcpus
            self.volumes = volumes
        }
    }

}

extension BatchClientTypes {
    /// An object that represents an Batch job dependency.
    public struct JobDependency {
        /// The job ID of the Batch job that's associated with this dependency.
        public var jobId: Swift.String?
        /// The type of the job dependency.
        public var type: BatchClientTypes.ArrayJobDependency?

        public init(
            jobId: Swift.String? = nil,
            type: BatchClientTypes.ArrayJobDependency? = nil
        )
        {
            self.jobId = jobId
            self.type = type
        }
    }

}

extension BatchClientTypes {
    /// The details for the container in this task attempt.
    public struct TaskContainerDetails {
        /// The command that's passed to the container. This parameter maps to Cmd in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the COMMAND parameter to [docker run](https://docs.docker.com/engine/reference/run/). For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.docker.com/engine/reference/builder/#cmd).
        public var command: [Swift.String]?
        /// A list of containers that this container depends on.
        public var dependsOn: [BatchClientTypes.TaskContainerDependency]?
        /// The environment variables to pass to a container. This parameter maps to Env in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --env option to [docker run](https://docs.docker.com/engine/reference/run/). We don't recommend using plaintext environment variables for sensitive information, such as credential data.
        public var environment: [BatchClientTypes.KeyValuePair]?
        /// If the essential parameter of a container is marked as true, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the essential parameter of a container is marked as false, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential. All jobs must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the Amazon Elastic Container Service Developer Guide.
        public var essential: Swift.Bool?
        /// The exit code returned upon completion.
        public var exitCode: Swift.Int?
        /// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either repository-url/image:tag or repository-url/image@digest. Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to Image in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/) and the IMAGE parameter of the [ docker run ](https://docs.docker.com/engine/reference/run/#security-configuration).
        public var image: Swift.String?
        /// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information, see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html). This parameter is not supported for Windows containers.
        public var linuxParameters: BatchClientTypes.LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/) and the --log-driver option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration). By default, containers use the same logging driver that the Docker daemon uses. However the container can use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information about the options for different supported log drivers, see [Configure logging drivers ](https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation. Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the LogConfiguration data type). Additional log drivers may be available in future releases of the Amazon ECS container agent. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}' The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide.
        public var logConfiguration: BatchClientTypes.LogConfiguration?
        /// The name of the CloudWatch Logs log stream that's associated with the container. The log group for Batch jobs is /aws/batch/job. Each container attempt receives a log stream name when they reach the RUNNING status.
        public var logStreamName: Swift.String?
        /// The mount points for data volumes in your container. This parameter maps to Volumes in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/) and the [--volume] option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration). Windows containers can mount whole directories on the same drive as $env:ProgramData. Windows containers can't mount directories on a different drive, and mount point can't be across drives.
        public var mountPoints: [BatchClientTypes.MountPoint]?
        /// The name of a container.
        public var name: Swift.String?
        /// The network interfaces that are associated with the job.
        public var networkInterfaces: [BatchClientTypes.NetworkInterface]?
        /// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user). This parameter maps to Privileged in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/) and the --privileged option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration). This parameter is not supported for Windows containers or tasks run on Fargate.
        public var privileged: Swift.Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/) and the --read-only option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration). This parameter is not supported for Windows containers.
        public var readonlyRootFilesystem: Swift.Bool?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public var reason: Swift.String?
        /// The private repository authentication credentials to use.
        public var repositoryCredentials: BatchClientTypes.RepositoryCredentials?
        /// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
        public var resourceRequirements: [BatchClientTypes.ResourceRequirement]?
        /// The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the Amazon Elastic Container Service Developer Guide.
        public var secrets: [BatchClientTypes.Secret]?
        /// A list of ulimits to set in the container. If a ulimit value is specified in a task definition, it overrides the default values set by Docker. This parameter maps to Ulimits in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/) and the --ulimit option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration). Amazon ECS tasks hosted on Fargate use the default resource limit values set by the operating system with the exception of the nofile resource limit parameter which Fargate overrides. The nofile resource limit sets a restriction on the number of open files that a container can use. The default nofile soft limit is 1024 and the default hard limit is 65535. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}' This parameter is not supported for Windows containers.
        public var ulimits: [BatchClientTypes.Ulimit]?
        /// The user to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run. When running tasks using the host network mode, don't run containers using the root user (UID 0). We recommend using a non-root user for better security. You can specify the user using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
        ///
        /// * user
        ///
        /// * user:group
        ///
        /// * uid
        ///
        /// * uid:gid
        ///
        /// * user:gi
        ///
        /// * uid:group
        ///
        ///
        ///
        /// This parameter is not supported for Windows containers.
        public var user: Swift.String?

        public init(
            command: [Swift.String]? = nil,
            dependsOn: [BatchClientTypes.TaskContainerDependency]? = nil,
            environment: [BatchClientTypes.KeyValuePair]? = nil,
            essential: Swift.Bool? = nil,
            exitCode: Swift.Int? = nil,
            image: Swift.String? = nil,
            linuxParameters: BatchClientTypes.LinuxParameters? = nil,
            logConfiguration: BatchClientTypes.LogConfiguration? = nil,
            logStreamName: Swift.String? = nil,
            mountPoints: [BatchClientTypes.MountPoint]? = nil,
            name: Swift.String? = nil,
            networkInterfaces: [BatchClientTypes.NetworkInterface]? = nil,
            privileged: Swift.Bool? = nil,
            readonlyRootFilesystem: Swift.Bool? = nil,
            reason: Swift.String? = nil,
            repositoryCredentials: BatchClientTypes.RepositoryCredentials? = nil,
            resourceRequirements: [BatchClientTypes.ResourceRequirement]? = nil,
            secrets: [BatchClientTypes.Secret]? = nil,
            ulimits: [BatchClientTypes.Ulimit]? = nil,
            user: Swift.String? = nil
        )
        {
            self.command = command
            self.dependsOn = dependsOn
            self.environment = environment
            self.essential = essential
            self.exitCode = exitCode
            self.image = image
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.logStreamName = logStreamName
            self.mountPoints = mountPoints
            self.name = name
            self.networkInterfaces = networkInterfaces
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.reason = reason
            self.repositoryCredentials = repositoryCredentials
            self.resourceRequirements = resourceRequirements
            self.secrets = secrets
            self.ulimits = ulimits
            self.user = user
        }
    }

}

extension BatchClientTypes {
    /// The details of a task definition that describes the container and volume definitions of an Amazon ECS task.
    public struct EcsTaskDetails {
        /// The Amazon Resource Name (ARN) of the container instance that hosts the task.
        public var containerInstanceArn: Swift.String?
        /// A list of containers that are included in the taskProperties list.
        public var containers: [BatchClientTypes.TaskContainerDetails]?
        /// The amount of ephemeral storage allocated for the task.
        public var ephemeralStorage: BatchClientTypes.EphemeralStorage?
        /// The Amazon Resource Name (ARN) of the execution role that Batch can assume. For more information, see [Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the Batch User Guide.
        public var executionRoleArn: Swift.String?
        /// The IPC resource namespace to use for the containers in the task.
        public var ipcMode: Swift.String?
        /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
        public var networkConfiguration: BatchClientTypes.NetworkConfiguration?
        /// The process namespace to use for the containers in the task.
        public var pidMode: Swift.String?
        /// The Fargate platform version where the jobs are running.
        public var platformVersion: Swift.String?
        /// An object that represents the compute environment architecture for Batch jobs on Fargate.
        public var runtimePlatform: BatchClientTypes.RuntimePlatform?
        /// The ARN of the Amazon ECS task.
        public var taskArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that the container can assume for Amazon Web Services permissions. For more information, see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the Amazon Elastic Container Service Developer Guide. This is object is comparable to [ContainerProperties:jobRoleArn](https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html).
        public var taskRoleArn: Swift.String?
        /// A list of data volumes used in a job.
        public var volumes: [BatchClientTypes.Volume]?

        public init(
            containerInstanceArn: Swift.String? = nil,
            containers: [BatchClientTypes.TaskContainerDetails]? = nil,
            ephemeralStorage: BatchClientTypes.EphemeralStorage? = nil,
            executionRoleArn: Swift.String? = nil,
            ipcMode: Swift.String? = nil,
            networkConfiguration: BatchClientTypes.NetworkConfiguration? = nil,
            pidMode: Swift.String? = nil,
            platformVersion: Swift.String? = nil,
            runtimePlatform: BatchClientTypes.RuntimePlatform? = nil,
            taskArn: Swift.String? = nil,
            taskRoleArn: Swift.String? = nil,
            volumes: [BatchClientTypes.Volume]? = nil
        )
        {
            self.containerInstanceArn = containerInstanceArn
            self.containers = containers
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.ipcMode = ipcMode
            self.networkConfiguration = networkConfiguration
            self.pidMode = pidMode
            self.platformVersion = platformVersion
            self.runtimePlatform = runtimePlatform
            self.taskArn = taskArn
            self.taskRoleArn = taskRoleArn
            self.volumes = volumes
        }
    }

}

extension BatchClientTypes {
    /// An object that contains the details for the Amazon ECS resources of a job.
    public struct EcsPropertiesDetail {
        /// The properties for the Amazon ECS task definition of a job.
        public var taskProperties: [BatchClientTypes.EcsTaskDetails]?

        public init(
            taskProperties: [BatchClientTypes.EcsTaskDetails]? = nil
        )
        {
            self.taskProperties = taskProperties
        }
    }

}

extension BatchClientTypes {
    /// An object that represents the details for an attempt for a job attempt that an Amazon EKS container runs.
    public struct EksAttemptContainerDetail {
        /// The exit code returned for the job attempt. A non-zero exit code is considered failed.
        public var exitCode: Swift.Int?
        /// The name of a container.
        public var name: Swift.String?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public var reason: Swift.String?

        public init(
            exitCode: Swift.Int? = nil,
            name: Swift.String? = nil,
            reason: Swift.String? = nil
        )
        {
            self.exitCode = exitCode
            self.name = name
            self.reason = reason
        }
    }

}

extension BatchClientTypes {
    /// An object that represents the details of a job attempt for a job attempt by an Amazon EKS container.
    public struct EksAttemptDetail {
        /// The details for the final status of the containers for this job attempt.
        public var containers: [BatchClientTypes.EksAttemptContainerDetail]?
        /// The Amazon Resource Name (ARN) of the Amazon EKS cluster.
        public var eksClusterArn: Swift.String?
        /// The details for the init containers.
        public var initContainers: [BatchClientTypes.EksAttemptContainerDetail]?
        /// The name of the node for this job attempt.
        public var nodeName: Swift.String?
        /// The name of the pod for this job attempt.
        public var podName: Swift.String?
        /// The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the STARTING state to the RUNNING state).
        public var startedAt: Swift.Int?
        /// A short, human-readable string to provide additional details for the current status of the job attempt.
        public var statusReason: Swift.String?
        /// The Unix timestamp (in milliseconds) for when the attempt was stopped. This happens when the attempt transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED.
        public var stoppedAt: Swift.Int?

        public init(
            containers: [BatchClientTypes.EksAttemptContainerDetail]? = nil,
            eksClusterArn: Swift.String? = nil,
            initContainers: [BatchClientTypes.EksAttemptContainerDetail]? = nil,
            nodeName: Swift.String? = nil,
            podName: Swift.String? = nil,
            startedAt: Swift.Int? = nil,
            statusReason: Swift.String? = nil,
            stoppedAt: Swift.Int? = nil
        )
        {
            self.containers = containers
            self.eksClusterArn = eksClusterArn
            self.initContainers = initContainers
            self.nodeName = nodeName
            self.podName = podName
            self.startedAt = startedAt
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
        }
    }

}

extension BatchClientTypes {
    /// The details for container properties that are returned by DescribeJobs for jobs that use Amazon EKS.
    public struct EksContainerDetail {
        /// An array of arguments to the entrypoint. If this isn't specified, the CMD of the container image is used. This corresponds to the args member in the [Entrypoint](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) portion of the [Pod](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/) in Kubernetes. Environment variable references are expanded using the container's environment. If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to "$(NAME1)" and the NAME1 environment variable doesn't exist, the command string will remain "$(NAME1)". $$ is replaced with $ and the resulting string isn't expanded. For example, $$(VAR_NAME) is passed as $(VAR_NAME) whether or not the VAR_NAME environment variable exists. For more information, see [Dockerfile reference: CMD](https://docs.docker.com/engine/reference/builder/#cmd) and [Define a command and arguments for a pod](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) in the Kubernetes documentation.
        public var args: [Swift.String]?
        /// The entrypoint for the container. For more information, see [Entrypoint](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) in the Kubernetes documentation.
        public var command: [Swift.String]?
        /// The environment variables to pass to a container. Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public var env: [BatchClientTypes.EksContainerEnvironmentVariable]?
        /// The exit code returned for the job attempt. A non-zero exit code is considered failed.
        public var exitCode: Swift.Int?
        /// The Docker image used to start the container.
        public var image: Swift.String?
        /// The image pull policy for the container. Supported values are Always, IfNotPresent, and Never. This parameter defaults to Always if the :latest tag is specified, IfNotPresent otherwise. For more information, see [Updating images](https://kubernetes.io/docs/concepts/containers/images/#updating-images) in the Kubernetes documentation.
        public var imagePullPolicy: Swift.String?
        /// The name of the container. If the name isn't specified, the default name "Default" is used. Each container in a pod must have a unique name.
        public var name: Swift.String?
        /// A short human-readable string to provide additional details for a running or stopped container. It can be up to 255 characters long.
        public var reason: Swift.String?
        /// The type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu. For more information, see [Resource management for pods and containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.
        public var resources: BatchClientTypes.EksContainerResourceRequirements?
        /// The security context for a job. For more information, see [Configure a security context for a pod or container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) in the Kubernetes documentation.
        public var securityContext: BatchClientTypes.EksContainerSecurityContext?
        /// The volume mounts for the container. Batch supports emptyDir, hostPath, and secret volume types. For more information about volumes and volume mounts in Kubernetes, see [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/) in the Kubernetes documentation.
        public var volumeMounts: [BatchClientTypes.EksContainerVolumeMount]?

        public init(
            args: [Swift.String]? = nil,
            command: [Swift.String]? = nil,
            env: [BatchClientTypes.EksContainerEnvironmentVariable]? = nil,
            exitCode: Swift.Int? = nil,
            image: Swift.String? = nil,
            imagePullPolicy: Swift.String? = nil,
            name: Swift.String? = nil,
            reason: Swift.String? = nil,
            resources: BatchClientTypes.EksContainerResourceRequirements? = nil,
            securityContext: BatchClientTypes.EksContainerSecurityContext? = nil,
            volumeMounts: [BatchClientTypes.EksContainerVolumeMount]? = nil
        )
        {
            self.args = args
            self.command = command
            self.env = env
            self.exitCode = exitCode
            self.image = image
            self.imagePullPolicy = imagePullPolicy
            self.name = name
            self.reason = reason
            self.resources = resources
            self.securityContext = securityContext
            self.volumeMounts = volumeMounts
        }
    }

}

extension BatchClientTypes {
    /// The details for the pod.
    public struct EksPodPropertiesDetail {
        /// The properties of the container that's used on the Amazon EKS pod.
        public var containers: [BatchClientTypes.EksContainerDetail]?
        /// The DNS policy for the pod. The default value is ClusterFirst. If the hostNetwork parameter is not specified, the default is ClusterFirstWithHostNet. ClusterFirst indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. If no value was specified for dnsPolicy in the [RegisterJobDefinition](https://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html) API operation, then no value will be returned for dnsPolicy by either of [DescribeJobDefinitions](https://docs.aws.amazon.com/batch/latest/APIReference/API_DescribeJobDefinitions.html) or [DescribeJobs](https://docs.aws.amazon.com/batch/latest/APIReference/API_DescribeJobs.html) API operations. The pod spec setting will contain either ClusterFirst or ClusterFirstWithHostNet, depending on the value of the hostNetwork parameter. For more information, see [Pod's DNS policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) in the Kubernetes documentation. Valid values: Default | ClusterFirst | ClusterFirstWithHostNet
        public var dnsPolicy: Swift.String?
        /// Indicates if the pod uses the hosts' network IP address. The default value is true. Setting this to false enables the Kubernetes pod networking model. Most Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see [Host namespaces](https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces) and [Pod networking](https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking) in the Kubernetes documentation.
        public var hostNetwork: Swift.Bool?
        /// Displays the reference pointer to the Kubernetes secret resource. These secrets help to gain access to pull an images from a private registry.
        public var imagePullSecrets: [BatchClientTypes.ImagePullSecret]?
        /// The container registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store.
        public var initContainers: [BatchClientTypes.EksContainerDetail]?
        /// Describes and uniquely identifies Kubernetes resources. For example, the compute environment that a pod runs in or the jobID for a job running in the pod. For more information, see [Understanding Kubernetes Objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/) in the Kubernetes documentation.
        public var metadata: BatchClientTypes.EksMetadata?
        /// The name of the node for this job.
        public var nodeName: Swift.String?
        /// The name of the pod for this job.
        public var podName: Swift.String?
        /// The name of the service account that's used to run the pod. For more information, see [Kubernetes service accounts](https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html) and [Configure a Kubernetes service account to assume an IAM role](https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html) in the Amazon EKS User Guide and [Configure service accounts for pods](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) in the Kubernetes documentation.
        public var serviceAccountName: Swift.String?
        /// Indicates if the processes in a container are shared, or visible, to other containers in the same pod. For more information, see [Share Process Namespace between Containers in a Pod](https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/).
        public var shareProcessNamespace: Swift.Bool?
        /// Specifies the volumes for a job definition using Amazon EKS resources.
        public var volumes: [BatchClientTypes.EksVolume]?

        public init(
            containers: [BatchClientTypes.EksContainerDetail]? = nil,
            dnsPolicy: Swift.String? = nil,
            hostNetwork: Swift.Bool? = nil,
            imagePullSecrets: [BatchClientTypes.ImagePullSecret]? = nil,
            initContainers: [BatchClientTypes.EksContainerDetail]? = nil,
            metadata: BatchClientTypes.EksMetadata? = nil,
            nodeName: Swift.String? = nil,
            podName: Swift.String? = nil,
            serviceAccountName: Swift.String? = nil,
            shareProcessNamespace: Swift.Bool? = nil,
            volumes: [BatchClientTypes.EksVolume]? = nil
        )
        {
            self.containers = containers
            self.dnsPolicy = dnsPolicy
            self.hostNetwork = hostNetwork
            self.imagePullSecrets = imagePullSecrets
            self.initContainers = initContainers
            self.metadata = metadata
            self.nodeName = nodeName
            self.podName = podName
            self.serviceAccountName = serviceAccountName
            self.shareProcessNamespace = shareProcessNamespace
            self.volumes = volumes
        }
    }

}

extension BatchClientTypes {
    /// An object that contains the details for the Kubernetes resources of a job.
    public struct EksPropertiesDetail {
        /// The properties for the Kubernetes pod resources of a job.
        public var podProperties: BatchClientTypes.EksPodPropertiesDetail?

        public init(
            podProperties: BatchClientTypes.EksPodPropertiesDetail? = nil
        )
        {
            self.podProperties = podProperties
        }
    }

}

extension BatchClientTypes {
    /// An object that represents the details of a multi-node parallel job node.
    public struct NodeDetails {
        /// Specifies whether the current node is the main node for a multi-node parallel job.
        public var isMainNode: Swift.Bool?
        /// The node index for the node. Node index numbering starts at zero. This index is also available on the node with the AWS_BATCH_JOB_NODE_INDEX environment variable.
        public var nodeIndex: Swift.Int?

        public init(
            isMainNode: Swift.Bool? = nil,
            nodeIndex: Swift.Int? = nil
        )
        {
            self.isMainNode = isMainNode
            self.nodeIndex = nodeIndex
        }
    }

}

extension BatchClientTypes {

    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pending
        case runnable
        case running
        case starting
        case submitted
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .failed,
                .pending,
                .runnable,
                .running,
                .starting,
                .submitted,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .runnable: return "RUNNABLE"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .submitted: return "SUBMITTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// An object that represents an Batch job.
    public struct JobDetail {
        /// The array properties of the job, if it's an array job.
        public var arrayProperties: BatchClientTypes.ArrayPropertiesDetail?
        /// A list of job attempts that are associated with this job.
        public var attempts: [BatchClientTypes.AttemptDetail]?
        /// An object that represents the details for the container that's associated with the job. If the details are for a multiple-container job, this object will be empty.
        public var container: BatchClientTypes.ContainerDetail?
        /// The Unix timestamp (in milliseconds) for when the job was created. For non-array jobs and parent array jobs, this is when the job entered the SUBMITTED state. This is specifically at the time [SubmitJob](https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html) was called. For array child jobs, this is when the child job was spawned by its parent and entered the PENDING state.
        public var createdAt: Swift.Int?
        /// A list of job IDs that this job depends on.
        public var dependsOn: [BatchClientTypes.JobDependency]?
        /// An object with properties that are specific to Amazon ECS-based jobs.
        public var ecsProperties: BatchClientTypes.EcsPropertiesDetail?
        /// A list of job attempts that are associated with this job.
        public var eksAttempts: [BatchClientTypes.EksAttemptDetail]?
        /// An object with various properties that are specific to Amazon EKS based jobs.
        public var eksProperties: BatchClientTypes.EksPropertiesDetail?
        /// Indicates whether the job is canceled.
        public var isCancelled: Swift.Bool?
        /// Indicates whether the job is terminated.
        public var isTerminated: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the job.
        public var jobArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the job definition that this job uses.
        /// This member is required.
        public var jobDefinition: Swift.String?
        /// The job ID.
        /// This member is required.
        public var jobId: Swift.String?
        /// The job name.
        /// This member is required.
        public var jobName: Swift.String?
        /// The Amazon Resource Name (ARN) of the job queue that the job is associated with.
        /// This member is required.
        public var jobQueue: Swift.String?
        /// An object that represents the details of a node that's associated with a multi-node parallel job.
        public var nodeDetails: BatchClientTypes.NodeDetails?
        /// An object that represents the node properties of a multi-node parallel job. This isn't applicable to jobs that are running on Fargate resources.
        public var nodeProperties: BatchClientTypes.NodeProperties?
        /// Additional parameters that are passed to the job that replace parameter substitution placeholders or override any corresponding parameter defaults from the job definition.
        public var parameters: [Swift.String: Swift.String]?
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. Jobs run on Fargate resources specify FARGATE.
        public var platformCapabilities: [BatchClientTypes.PlatformCapability]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state.
        public var propagateTags: Swift.Bool?
        /// The retry strategy to use for this job if an attempt fails.
        public var retryStrategy: BatchClientTypes.RetryStrategy?
        /// The scheduling policy of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
        public var schedulingPriority: Swift.Int?
        /// The share identifier for the job.
        public var shareIdentifier: Swift.String?
        /// The Unix timestamp (in milliseconds) for when the job was started. More specifically, it's when the job transitioned from the STARTING state to the RUNNING state.
        /// This member is required.
        public var startedAt: Swift.Int?
        /// The current status for the job. If your jobs don't progress to STARTING, see [Jobs stuck in RUNNABLE status](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#job_stuck_in_runnable) in the troubleshooting section of the Batch User Guide.
        /// This member is required.
        public var status: BatchClientTypes.JobStatus?
        /// A short, human-readable string to provide more details for the current status of the job.
        ///
        /// * CAPACITY:INSUFFICIENT_INSTANCE_CAPACITY - All compute environments have insufficient capacity to service the job.
        ///
        /// * MISCONFIGURATION:COMPUTE_ENVIRONMENT_MAX_RESOURCE - All compute environments have a maxVcpu setting that is smaller than the job requirements.
        ///
        /// * MISCONFIGURATION:JOB_RESOURCE_REQUIREMENT - All compute environments have no connected instances that meet the job requirements.
        ///
        /// * MISCONFIGURATION:SERVICE_ROLE_PERMISSIONS - All compute environments have problems with the service role permissions.
        public var statusReason: Swift.String?
        /// The Unix timestamp (in milliseconds) for when the job was stopped. More specifically, it's when the job transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED.
        public var stoppedAt: Swift.Int?
        /// The tags that are applied to the job.
        public var tags: [Swift.String: Swift.String]?
        /// The timeout configuration for the job.
        public var timeout: BatchClientTypes.JobTimeout?

        public init(
            arrayProperties: BatchClientTypes.ArrayPropertiesDetail? = nil,
            attempts: [BatchClientTypes.AttemptDetail]? = nil,
            container: BatchClientTypes.ContainerDetail? = nil,
            createdAt: Swift.Int? = nil,
            dependsOn: [BatchClientTypes.JobDependency]? = nil,
            ecsProperties: BatchClientTypes.EcsPropertiesDetail? = nil,
            eksAttempts: [BatchClientTypes.EksAttemptDetail]? = nil,
            eksProperties: BatchClientTypes.EksPropertiesDetail? = nil,
            isCancelled: Swift.Bool? = nil,
            isTerminated: Swift.Bool? = nil,
            jobArn: Swift.String? = nil,
            jobDefinition: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobQueue: Swift.String? = nil,
            nodeDetails: BatchClientTypes.NodeDetails? = nil,
            nodeProperties: BatchClientTypes.NodeProperties? = nil,
            parameters: [Swift.String: Swift.String]? = nil,
            platformCapabilities: [BatchClientTypes.PlatformCapability]? = nil,
            propagateTags: Swift.Bool? = nil,
            retryStrategy: BatchClientTypes.RetryStrategy? = nil,
            schedulingPriority: Swift.Int? = nil,
            shareIdentifier: Swift.String? = nil,
            startedAt: Swift.Int? = nil,
            status: BatchClientTypes.JobStatus? = nil,
            statusReason: Swift.String? = nil,
            stoppedAt: Swift.Int? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            timeout: BatchClientTypes.JobTimeout? = nil
        )
        {
            self.arrayProperties = arrayProperties
            self.attempts = attempts
            self.container = container
            self.createdAt = createdAt
            self.dependsOn = dependsOn
            self.ecsProperties = ecsProperties
            self.eksAttempts = eksAttempts
            self.eksProperties = eksProperties
            self.isCancelled = isCancelled
            self.isTerminated = isTerminated
            self.jobArn = jobArn
            self.jobDefinition = jobDefinition
            self.jobId = jobId
            self.jobName = jobName
            self.jobQueue = jobQueue
            self.nodeDetails = nodeDetails
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.schedulingPriority = schedulingPriority
            self.shareIdentifier = shareIdentifier
            self.startedAt = startedAt
            self.status = status
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
            self.tags = tags
            self.timeout = timeout
        }
    }

}

public struct DescribeJobsOutput {
    /// The list of jobs.
    public var jobs: [BatchClientTypes.JobDetail]?

    public init(
        jobs: [BatchClientTypes.JobDetail]? = nil
    )
    {
        self.jobs = jobs
    }
}

/// Contains the parameters for DescribeSchedulingPolicies.
public struct DescribeSchedulingPoliciesInput {
    /// A list of up to 100 scheduling policy Amazon Resource Name (ARN) entries.
    /// This member is required.
    public var arns: [Swift.String]?

    public init(
        arns: [Swift.String]? = nil
    )
    {
        self.arns = arns
    }
}

extension BatchClientTypes {
    /// An object that represents a scheduling policy.
    public struct SchedulingPolicyDetail {
        /// The Amazon Resource Name (ARN) of the scheduling policy. An example is arn:aws:batch:us-east-1:123456789012:scheduling-policy/HighPriority .
        /// This member is required.
        public var arn: Swift.String?
        /// The fair share policy for the scheduling policy.
        public var fairsharePolicy: BatchClientTypes.FairsharePolicy?
        /// The name of the scheduling policy.
        /// This member is required.
        public var name: Swift.String?
        /// The tags that you apply to the scheduling policy to categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in Amazon Web Services General Reference.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            fairsharePolicy: BatchClientTypes.FairsharePolicy? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.fairsharePolicy = fairsharePolicy
            self.name = name
            self.tags = tags
        }
    }

}

public struct DescribeSchedulingPoliciesOutput {
    /// The list of scheduling policies.
    public var schedulingPolicies: [BatchClientTypes.SchedulingPolicyDetail]?

    public init(
        schedulingPolicies: [BatchClientTypes.SchedulingPolicyDetail]? = nil
    )
    {
        self.schedulingPolicies = schedulingPolicies
    }
}

public struct GetJobQueueSnapshotInput {
    /// The job queueâ€™s name or full queue Amazon Resource Name (ARN).
    /// This member is required.
    public var jobQueue: Swift.String?

    public init(
        jobQueue: Swift.String? = nil
    )
    {
        self.jobQueue = jobQueue
    }
}

extension BatchClientTypes {
    /// An object that represents summary details for the first 100 RUNNABLE jobs in a job queue.
    public struct FrontOfQueueJobSummary {
        /// The Unix timestamp (in milliseconds) for when the job transitioned to its current position in the job queue.
        public var earliestTimeAtPosition: Swift.Int?
        /// The ARN for a job in a named job queue.
        public var jobArn: Swift.String?

        public init(
            earliestTimeAtPosition: Swift.Int? = nil,
            jobArn: Swift.String? = nil
        )
        {
            self.earliestTimeAtPosition = earliestTimeAtPosition
            self.jobArn = jobArn
        }
    }

}

extension BatchClientTypes {
    /// Contains a list of the first 100 RUNNABLE jobs associated to a single job queue.
    public struct FrontOfQueueDetail {
        /// The Amazon Resource Names (ARNs) of the first 100 RUNNABLE jobs in a named job queue. For first-in-first-out (FIFO) job queues, jobs are ordered based on their submission time. For fair share scheduling (FSS) job queues, jobs are ordered based on their job priority and share usage.
        public var jobs: [BatchClientTypes.FrontOfQueueJobSummary]?
        /// The Unix timestamp (in milliseconds) for when each of the first 100 RUNNABLE jobs were last updated.
        public var lastUpdatedAt: Swift.Int?

        public init(
            jobs: [BatchClientTypes.FrontOfQueueJobSummary]? = nil,
            lastUpdatedAt: Swift.Int? = nil
        )
        {
            self.jobs = jobs
            self.lastUpdatedAt = lastUpdatedAt
        }
    }

}

public struct GetJobQueueSnapshotOutput {
    /// The list of the first 100 RUNNABLE jobs in each job queue. For first-in-first-out (FIFO) job queues, jobs are ordered based on their submission time. For fair share scheduling (FSS) job queues, jobs are ordered based on their job priority and share usage.
    public var frontOfQueue: BatchClientTypes.FrontOfQueueDetail?

    public init(
        frontOfQueue: BatchClientTypes.FrontOfQueueDetail? = nil
    )
    {
        self.frontOfQueue = frontOfQueue
    }
}

extension BatchClientTypes {
    /// A filter name and value pair that's used to return a more specific list of results from a ListJobs API operation.
    public struct KeyValuesPair {
        /// The name of the filter. Filter names are case sensitive.
        public var name: Swift.String?
        /// The filter values.
        public var values: [Swift.String]?

        public init(
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

/// Contains the parameters for ListJobs.
public struct ListJobsInput {
    /// The job ID for an array job. Specifying an array job ID with this parameter lists all child jobs from within the specified array.
    public var arrayJobId: Swift.String?
    /// The filter to apply to the query. Only one filter can be used at a time. When the filter is used, jobStatus is ignored. The filter doesn't apply to child jobs in an array or multi-node parallel (MNP) jobs. The results are sorted by the createdAt field, with the most recent jobs being first. JOB_NAME The value of the filter is a case-insensitive match for the job name. If the value ends with an asterisk (*), the filter matches any job name that begins with the string before the '*'. This corresponds to the jobName value. For example, test1 matches both Test1 and test1, and test1* matches both test1 and Test10. When the JOB_NAME filter is used, the results are grouped by the job name and version. JOB_DEFINITION The value for the filter is the name or Amazon Resource Name (ARN) of the job definition. This corresponds to the jobDefinition value. The value is case sensitive. When the value for the filter is the job definition name, the results include all the jobs that used any revision of that job definition name. If the value ends with an asterisk (*), the filter matches any job definition name that begins with the string before the '*'. For example, jd1 matches only jd1, and jd1* matches both jd1 and jd1A. The version of the job definition that's used doesn't affect the sort order. When the JOB_DEFINITION filter is used and the ARN is used (which is in the form arn:${Partition}:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision}), the results include jobs that used the specified revision of the job definition. Asterisk (*) isn't supported when the ARN is used. BEFORE_CREATED_AT The value for the filter is the time that's before the job was created. This corresponds to the createdAt value. The value is a string representation of the number of milliseconds since 00:00:00 UTC (midnight) on January 1, 1970. AFTER_CREATED_AT The value for the filter is the time that's after the job was created. This corresponds to the createdAt value. The value is a string representation of the number of milliseconds since 00:00:00 UTC (midnight) on January 1, 1970.
    public var filters: [BatchClientTypes.KeyValuesPair]?
    /// The name or full Amazon Resource Name (ARN) of the job queue used to list jobs.
    public var jobQueue: Swift.String?
    /// The job status used to filter jobs in the specified queue. If the filters parameter is specified, the jobStatus parameter is ignored and jobs with any status are returned. If you don't specify a status, only RUNNING jobs are returned.
    public var jobStatus: BatchClientTypes.JobStatus?
    /// The maximum number of results returned by ListJobs in a paginated output. When this parameter is used, ListJobs returns up to maxResults results in a single page and a nextToken response element, if applicable. The remaining results of the initial request can be seen by sending another ListJobs request with the returned nextToken value. The following outlines key parameters and limitations:
    ///
    /// * The minimum value is 1.
    ///
    /// * When --job-status is used, Batch returns up to 1000 values.
    ///
    /// * When --filters is used, Batch returns up to 100 values.
    ///
    /// * If neither parameter is used, then ListJobs returns up to 1000 results (jobs that are in the RUNNING status) and a nextToken value, if applicable.
    public var maxResults: Swift.Int?
    /// The job ID for a multi-node parallel job. Specifying a multi-node parallel job ID with this parameter lists all nodes that are associated with the specified job.
    public var multiNodeJobId: Swift.String?
    /// The nextToken value returned from a previous paginated ListJobs request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        arrayJobId: Swift.String? = nil,
        filters: [BatchClientTypes.KeyValuesPair]? = nil,
        jobQueue: Swift.String? = nil,
        jobStatus: BatchClientTypes.JobStatus? = nil,
        maxResults: Swift.Int? = nil,
        multiNodeJobId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.arrayJobId = arrayJobId
        self.filters = filters
        self.jobQueue = jobQueue
        self.jobStatus = jobStatus
        self.maxResults = maxResults
        self.multiNodeJobId = multiNodeJobId
        self.nextToken = nextToken
    }
}

extension BatchClientTypes {
    /// An object that represents summary details of a container within a job.
    public struct ContainerSummary {
        /// The exit code to return upon completion.
        public var exitCode: Swift.Int?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public var reason: Swift.String?

        public init(
            exitCode: Swift.Int? = nil,
            reason: Swift.String? = nil
        )
        {
            self.exitCode = exitCode
            self.reason = reason
        }
    }

}

extension BatchClientTypes {
    /// An object that represents the properties of a node that's associated with a multi-node parallel job.
    public struct NodePropertiesSummary {
        /// Specifies whether the current node is the main node for a multi-node parallel job.
        public var isMainNode: Swift.Bool?
        /// The node index for the node. Node index numbering begins at zero. This index is also available on the node with the AWS_BATCH_JOB_NODE_INDEX environment variable.
        public var nodeIndex: Swift.Int?
        /// The number of nodes that are associated with a multi-node parallel job.
        public var numNodes: Swift.Int?

        public init(
            isMainNode: Swift.Bool? = nil,
            nodeIndex: Swift.Int? = nil,
            numNodes: Swift.Int? = nil
        )
        {
            self.isMainNode = isMainNode
            self.nodeIndex = nodeIndex
            self.numNodes = numNodes
        }
    }

}

extension BatchClientTypes {
    /// An object that represents summary details of a job.
    public struct JobSummary {
        /// The array properties of the job, if it's an array job.
        public var arrayProperties: BatchClientTypes.ArrayPropertiesSummary?
        /// An object that represents the details of the container that's associated with the job.
        public var container: BatchClientTypes.ContainerSummary?
        /// The Unix timestamp (in milliseconds) for when the job was created. For non-array jobs and parent array jobs, this is when the job entered the SUBMITTED state (at the time [SubmitJob](https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html) was called). For array child jobs, this is when the child job was spawned by its parent and entered the PENDING state.
        public var createdAt: Swift.Int?
        /// The Amazon Resource Name (ARN) of the job.
        public var jobArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the job definition.
        public var jobDefinition: Swift.String?
        /// The job ID.
        /// This member is required.
        public var jobId: Swift.String?
        /// The job name.
        /// This member is required.
        public var jobName: Swift.String?
        /// The node properties for a single node in a job summary list. This isn't applicable to jobs that are running on Fargate resources.
        public var nodeProperties: BatchClientTypes.NodePropertiesSummary?
        /// The Unix timestamp for when the job was started. More specifically, it's when the job transitioned from the STARTING state to the RUNNING state.
        public var startedAt: Swift.Int?
        /// The current status for the job.
        public var status: BatchClientTypes.JobStatus?
        /// A short, human-readable string to provide more details for the current status of the job.
        public var statusReason: Swift.String?
        /// The Unix timestamp for when the job was stopped. More specifically, it's when the job transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED.
        public var stoppedAt: Swift.Int?

        public init(
            arrayProperties: BatchClientTypes.ArrayPropertiesSummary? = nil,
            container: BatchClientTypes.ContainerSummary? = nil,
            createdAt: Swift.Int? = nil,
            jobArn: Swift.String? = nil,
            jobDefinition: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            nodeProperties: BatchClientTypes.NodePropertiesSummary? = nil,
            startedAt: Swift.Int? = nil,
            status: BatchClientTypes.JobStatus? = nil,
            statusReason: Swift.String? = nil,
            stoppedAt: Swift.Int? = nil
        )
        {
            self.arrayProperties = arrayProperties
            self.container = container
            self.createdAt = createdAt
            self.jobArn = jobArn
            self.jobDefinition = jobDefinition
            self.jobId = jobId
            self.jobName = jobName
            self.nodeProperties = nodeProperties
            self.startedAt = startedAt
            self.status = status
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
        }
    }

}

public struct ListJobsOutput {
    /// A list of job summaries that match the request.
    /// This member is required.
    public var jobSummaryList: [BatchClientTypes.JobSummary]?
    /// The nextToken value to include in a future ListJobs request. When the results of a ListJobs request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init(
        jobSummaryList: [BatchClientTypes.JobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobSummaryList = jobSummaryList
        self.nextToken = nextToken
    }
}

/// Contains the parameters for ListSchedulingPolicies.
public struct ListSchedulingPoliciesInput {
    /// The maximum number of results that's returned by ListSchedulingPolicies in paginated output. When this parameter is used, ListSchedulingPolicies only returns maxResults results in a single page and a nextToken response element. You can see the remaining results of the initial request by sending another ListSchedulingPolicies request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, ListSchedulingPolicies returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value that's returned from a previous paginated ListSchedulingPolicies request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension BatchClientTypes {
    /// An object that contains the details of a scheduling policy that's returned in a ListSchedulingPolicy action.
    public struct SchedulingPolicyListingDetail {
        /// Amazon Resource Name (ARN) of the scheduling policy.
        /// This member is required.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

public struct ListSchedulingPoliciesOutput {
    /// The nextToken value to include in a future ListSchedulingPolicies request. When the results of a ListSchedulingPolicies request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// A list of scheduling policies that match the request.
    public var schedulingPolicies: [BatchClientTypes.SchedulingPolicyListingDetail]?

    public init(
        nextToken: Swift.String? = nil,
        schedulingPolicies: [BatchClientTypes.SchedulingPolicyListingDetail]? = nil
    )
    {
        self.nextToken = nextToken
        self.schedulingPolicies = schedulingPolicies
    }
}

/// Contains the parameters for ListTagsForResource.
public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) that identifies the resource that tags are listed for. Batch resources that support tags are compute environments, jobs, job definitions, job queues, and scheduling policies. ARNs for child jobs of array and multi-node parallel (MNP) jobs aren't supported.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// The tags for the resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

extension BatchClientTypes {

    public enum JobDefinitionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case container
        case multinode
        case sdkUnknown(Swift.String)

        public static var allCases: [JobDefinitionType] {
            return [
                .container,
                .multinode
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .container: return "container"
            case .multinode: return "multinode"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Contains the parameters for RegisterJobDefinition.
public struct RegisterJobDefinitionInput {
    /// An object with properties specific to Amazon ECS-based single-node container-based jobs. If the job definition's type parameter is container, then you must specify either containerProperties or nodeProperties. This must not be specified for Amazon EKS-based job definitions. If the job runs on Fargate resources, then you must not specify nodeProperties; use only containerProperties.
    public var containerProperties: BatchClientTypes.ContainerProperties?
    /// An object with properties that are specific to Amazon ECS-based jobs. This must not be specified for Amazon EKS-based job definitions.
    public var ecsProperties: BatchClientTypes.EcsProperties?
    /// An object with properties that are specific to Amazon EKS-based jobs. This must not be specified for Amazon ECS based job definitions.
    public var eksProperties: BatchClientTypes.EksProperties?
    /// The name of the job definition to register. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// An object with properties specific to multi-node parallel jobs. If you specify node properties for a job, it becomes a multi-node parallel job. For more information, see [Multi-node Parallel Jobs](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-parallel-jobs.html) in the Batch User Guide. If the job runs on Fargate resources, then you must not specify nodeProperties; use containerProperties instead. If the job runs on Amazon EKS resources, then you must not specify nodeProperties.
    public var nodeProperties: BatchClientTypes.NodeProperties?
    /// Default parameter substitution placeholders to set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition.
    public var parameters: [Swift.String: Swift.String]?
    /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. To run the job on Fargate resources, specify FARGATE. If the job runs on Amazon EKS resources, then you must not specify platformCapabilities.
    public var platformCapabilities: [BatchClientTypes.PlatformCapability]?
    /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags are not propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state. If the job runs on Amazon EKS resources, then you must not specify propagateTags.
    public var propagateTags: Swift.Bool?
    /// The retry strategy to use for failed jobs that are submitted with this job definition. Any retry strategy that's specified during a [SubmitJob] operation overrides the retry strategy defined here. If a job is terminated due to a timeout, it isn't retried.
    public var retryStrategy: BatchClientTypes.RetryStrategy?
    /// The scheduling priority for jobs that are submitted with this job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority. The minimum supported value is 0 and the maximum supported value is 9999.
    public var schedulingPriority: Swift.Int?
    /// The tags that you apply to the job definition to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html) in Batch User Guide.
    public var tags: [Swift.String: Swift.String]?
    /// The timeout configuration for jobs that are submitted with this job definition, after which Batch terminates your jobs if they have not finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds. Any timeout configuration that's specified during a [SubmitJob] operation overrides the timeout configuration defined here. For more information, see [Job Timeouts](https://docs.aws.amazon.com/batch/latest/userguide/job_timeouts.html) in the Batch User Guide.
    public var timeout: BatchClientTypes.JobTimeout?
    /// The type of job definition. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the Batch User Guide.
    ///
    /// * If the value is container, then one of the following is required: containerProperties, ecsProperties, or eksProperties.
    ///
    /// * If the value is multinode, then nodeProperties is required.
    ///
    ///
    /// If the job is run on Fargate resources, then multinode isn't supported.
    /// This member is required.
    public var type: BatchClientTypes.JobDefinitionType?

    public init(
        containerProperties: BatchClientTypes.ContainerProperties? = nil,
        ecsProperties: BatchClientTypes.EcsProperties? = nil,
        eksProperties: BatchClientTypes.EksProperties? = nil,
        jobDefinitionName: Swift.String? = nil,
        nodeProperties: BatchClientTypes.NodeProperties? = nil,
        parameters: [Swift.String: Swift.String]? = nil,
        platformCapabilities: [BatchClientTypes.PlatformCapability]? = nil,
        propagateTags: Swift.Bool? = nil,
        retryStrategy: BatchClientTypes.RetryStrategy? = nil,
        schedulingPriority: Swift.Int? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        timeout: BatchClientTypes.JobTimeout? = nil,
        type: BatchClientTypes.JobDefinitionType? = nil
    )
    {
        self.containerProperties = containerProperties
        self.ecsProperties = ecsProperties
        self.eksProperties = eksProperties
        self.jobDefinitionName = jobDefinitionName
        self.nodeProperties = nodeProperties
        self.parameters = parameters
        self.platformCapabilities = platformCapabilities
        self.propagateTags = propagateTags
        self.retryStrategy = retryStrategy
        self.schedulingPriority = schedulingPriority
        self.tags = tags
        self.timeout = timeout
        self.type = type
    }
}

public struct RegisterJobDefinitionOutput {
    /// The Amazon Resource Name (ARN) of the job definition.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?
    /// The name of the job definition.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// The revision of the job definition.
    /// This member is required.
    public var revision: Swift.Int?

    public init(
        jobDefinitionArn: Swift.String? = nil,
        jobDefinitionName: Swift.String? = nil,
        revision: Swift.Int? = nil
    )
    {
        self.jobDefinitionArn = jobDefinitionArn
        self.jobDefinitionName = jobDefinitionName
        self.revision = revision
    }
}

extension BatchClientTypes {
    /// The overrides that should be sent to a container. For information about using Batch overrides when you connect event sources to targets, see [BatchContainerOverrides](https://docs.aws.amazon.com/eventbridge/latest/pipes-reference/API_BatchContainerOverrides.html).
    public struct ContainerOverrides {
        /// The command to send to the container that overrides the default command from the Docker image or the job definition. This parameter can't contain an empty string.
        public var command: [Swift.String]?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition. Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public var environment: [BatchClientTypes.KeyValuePair]?
        /// The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
        public var instanceType: Swift.String?
        /// This parameter is deprecated, use resourceRequirements to override the memory requirements specified in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it overrides the memory parameter set in the job definition, but doesn't override any memory requirement that's specified in the resourceRequirements structure in the job definition. To override memory requirements that are specified in the resourceRequirements structure in the job definition, resourceRequirements must be specified in the SubmitJob request, with type set to MEMORY and value set to the new value. For more information, see [Can't override job definition resource requirements](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements) in the Batch User Guide.
        @available(*, deprecated, message: "This field is deprecated, use resourceRequirements instead.")
        public var memory: Swift.Int?
        /// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU.
        public var resourceRequirements: [BatchClientTypes.ResourceRequirement]?
        /// This parameter is deprecated, use resourceRequirements to override the vcpus parameter that's set in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it overrides the vcpus parameter set in the job definition, but doesn't override any vCPU requirement specified in the resourceRequirements structure in the job definition. To override vCPU requirements that are specified in the resourceRequirements structure in the job definition, resourceRequirements must be specified in the SubmitJob request, with type set to VCPU and value set to the new value. For more information, see [Can't override job definition resource requirements](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements) in the Batch User Guide.
        @available(*, deprecated, message: "This field is deprecated, use resourceRequirements instead.")
        public var vcpus: Swift.Int?

        public init(
            command: [Swift.String]? = nil,
            environment: [BatchClientTypes.KeyValuePair]? = nil,
            instanceType: Swift.String? = nil,
            memory: Swift.Int? = nil,
            resourceRequirements: [BatchClientTypes.ResourceRequirement]? = nil,
            vcpus: Swift.Int? = nil
        )
        {
            self.command = command
            self.environment = environment
            self.instanceType = instanceType
            self.memory = memory
            self.resourceRequirements = resourceRequirements
            self.vcpus = vcpus
        }
    }

}

extension BatchClientTypes {
    /// The overrides that should be sent to a container. For information about using Batch overrides when you connect event sources to targets, see [BatchContainerOverrides](https://docs.aws.amazon.com/eventbridge/latest/pipes-reference/API_BatchContainerOverrides.html).
    public struct TaskContainerOverrides {
        /// The command to send to the container that overrides the default command from the Docker image or the job definition. This parameter can't contain an empty string.
        public var command: [Swift.String]?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition. Environment variables cannot start with AWS_BATCH. This naming convention is reserved for variables that Batch sets.
        public var environment: [BatchClientTypes.KeyValuePair]?
        /// A pointer to the container that you want to override. The container's name provides a unique identifier for the container being used.
        public var name: Swift.String?
        /// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU.
        public var resourceRequirements: [BatchClientTypes.ResourceRequirement]?

        public init(
            command: [Swift.String]? = nil,
            environment: [BatchClientTypes.KeyValuePair]? = nil,
            name: Swift.String? = nil,
            resourceRequirements: [BatchClientTypes.ResourceRequirement]? = nil
        )
        {
            self.command = command
            self.environment = environment
            self.name = name
            self.resourceRequirements = resourceRequirements
        }
    }

}

extension BatchClientTypes {
    /// An object that contains overrides for the task definition of a job.
    public struct TaskPropertiesOverride {
        /// The overrides for the container definition of a job.
        public var containers: [BatchClientTypes.TaskContainerOverrides]?

        public init(
            containers: [BatchClientTypes.TaskContainerOverrides]? = nil
        )
        {
            self.containers = containers
        }
    }

}

extension BatchClientTypes {
    /// An object that contains overrides for the Amazon ECS task definition of a job.
    public struct EcsPropertiesOverride {
        /// The overrides for the Amazon ECS task definition of a job. This object is currently limited to one element.
        public var taskProperties: [BatchClientTypes.TaskPropertiesOverride]?

        public init(
            taskProperties: [BatchClientTypes.TaskPropertiesOverride]? = nil
        )
        {
            self.taskProperties = taskProperties
        }
    }

}

extension BatchClientTypes {
    /// Object representing any Kubernetes overrides to a job definition that's used in a [SubmitJob](https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html) API operation.
    public struct EksContainerOverride {
        /// The arguments to the entrypoint to send to the container that overrides the default arguments from the Docker image or the job definition. For more information, see [Dockerfile reference: CMD](https://docs.docker.com/engine/reference/builder/#cmd) and [Define a command an arguments for a pod](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) in the Kubernetes documentation.
        public var args: [Swift.String]?
        /// The command to send to the container that overrides the default command from the Docker image or the job definition.
        public var command: [Swift.String]?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch. Or, you can override the existing environment variables from the Docker image or the job definition. Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public var env: [BatchClientTypes.EksContainerEnvironmentVariable]?
        /// The override of the Docker image that's used to start the container.
        public var image: Swift.String?
        /// A pointer to the container that you want to override. The name must match a unique container name that you wish to override.
        public var name: Swift.String?
        /// The type and amount of resources to assign to a container. These override the settings in the job definition. The supported resources include memory, cpu, and nvidia.com/gpu. For more information, see [Resource management for pods and containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.
        public var resources: BatchClientTypes.EksContainerResourceRequirements?

        public init(
            args: [Swift.String]? = nil,
            command: [Swift.String]? = nil,
            env: [BatchClientTypes.EksContainerEnvironmentVariable]? = nil,
            image: Swift.String? = nil,
            name: Swift.String? = nil,
            resources: BatchClientTypes.EksContainerResourceRequirements? = nil
        )
        {
            self.args = args
            self.command = command
            self.env = env
            self.image = image
            self.name = name
            self.resources = resources
        }
    }

}

extension BatchClientTypes {
    /// An object that contains overrides for the Kubernetes pod properties of a job.
    public struct EksPodPropertiesOverride {
        /// The overrides for the container that's used on the Amazon EKS pod.
        public var containers: [BatchClientTypes.EksContainerOverride]?
        /// The overrides for the conatainers defined in the Amazon EKS pod. These containers run before application containers, always runs to completion, and must complete successfully before the next container starts. These containers are registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store. For more information, see [Init Containers](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) in the Kubernetes documentation. This object is limited to 10 elements
        public var initContainers: [BatchClientTypes.EksContainerOverride]?
        /// Metadata about the overrides for the container that's used on the Amazon EKS pod.
        public var metadata: BatchClientTypes.EksMetadata?

        public init(
            containers: [BatchClientTypes.EksContainerOverride]? = nil,
            initContainers: [BatchClientTypes.EksContainerOverride]? = nil,
            metadata: BatchClientTypes.EksMetadata? = nil
        )
        {
            self.containers = containers
            self.initContainers = initContainers
            self.metadata = metadata
        }
    }

}

extension BatchClientTypes {
    /// An object that contains overrides for the Kubernetes resources of a job.
    public struct EksPropertiesOverride {
        /// The overrides for the Kubernetes pod resources of a job.
        public var podProperties: BatchClientTypes.EksPodPropertiesOverride?

        public init(
            podProperties: BatchClientTypes.EksPodPropertiesOverride? = nil
        )
        {
            self.podProperties = podProperties
        }
    }

}

extension BatchClientTypes {
    /// The object that represents any node overrides to a job definition that's used in a [SubmitJob](https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html) API operation.
    public struct NodePropertyOverride {
        /// The overrides that are sent to a node range.
        public var containerOverrides: BatchClientTypes.ContainerOverrides?
        /// An object that contains the properties that you want to replace for the existing Amazon ECS resources of a job.
        public var ecsPropertiesOverride: BatchClientTypes.EcsPropertiesOverride?
        /// An object that contains the properties that you want to replace for the existing Amazon EKS resources of a job.
        public var eksPropertiesOverride: BatchClientTypes.EksPropertiesOverride?
        /// An object that contains the instance types that you want to replace for the existing resources of a job.
        public var instanceTypes: [Swift.String]?
        /// The range of nodes, using node index values, that's used to override. A range of 0:3 indicates nodes with index values of 0 through 3. If the starting range value is omitted (:n), then 0 is used to start the range. If the ending range value is omitted (n:), then the highest possible node index is used to end the range.
        /// This member is required.
        public var targetNodes: Swift.String?

        public init(
            containerOverrides: BatchClientTypes.ContainerOverrides? = nil,
            ecsPropertiesOverride: BatchClientTypes.EcsPropertiesOverride? = nil,
            eksPropertiesOverride: BatchClientTypes.EksPropertiesOverride? = nil,
            instanceTypes: [Swift.String]? = nil,
            targetNodes: Swift.String? = nil
        )
        {
            self.containerOverrides = containerOverrides
            self.ecsPropertiesOverride = ecsPropertiesOverride
            self.eksPropertiesOverride = eksPropertiesOverride
            self.instanceTypes = instanceTypes
            self.targetNodes = targetNodes
        }
    }

}

extension BatchClientTypes {
    /// An object that represents any node overrides to a job definition that's used in a [SubmitJob](https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html) API operation. This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs. Rather, use containerOverrides instead.
    public struct NodeOverrides {
        /// The node property overrides for the job.
        public var nodePropertyOverrides: [BatchClientTypes.NodePropertyOverride]?
        /// The number of nodes to use with a multi-node parallel job. This value overrides the number of nodes that are specified in the job definition. To use this override, you must meet the following conditions:
        ///
        /// * There must be at least one node range in your job definition that has an open upper boundary, such as : or n:.
        ///
        /// * The lower boundary of the node range that's specified in the job definition must be fewer than the number of nodes specified in the override.
        ///
        /// * The main node index that's specified in the job definition must be fewer than the number of nodes specified in the override.
        public var numNodes: Swift.Int?

        public init(
            nodePropertyOverrides: [BatchClientTypes.NodePropertyOverride]? = nil,
            numNodes: Swift.Int? = nil
        )
        {
            self.nodePropertyOverrides = nodePropertyOverrides
            self.numNodes = numNodes
        }
    }

}

/// Contains the parameters for SubmitJob.
public struct SubmitJobInput {
    /// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. For more information, see [Array Jobs](https://docs.aws.amazon.com/batch/latest/userguide/array_jobs.html) in the Batch User Guide.
    public var arrayProperties: BatchClientTypes.ArrayProperties?
    /// An object with properties that override the defaults for the job definition that specify the name of a container in the specified job definition and the overrides it should receive. You can override the default command for a container, which is specified in the job definition or the Docker image, with a command override. You can also override existing environment variables on a container or add new environment variables to it with an environment override.
    public var containerOverrides: BatchClientTypes.ContainerOverrides?
    /// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.
    public var dependsOn: [BatchClientTypes.JobDependency]?
    /// An object, with properties that override defaults for the job definition, can only be specified for jobs that are run on Amazon ECS resources.
    public var ecsPropertiesOverride: BatchClientTypes.EcsPropertiesOverride?
    /// An object, with properties that override defaults for the job definition, can only be specified for jobs that are run on Amazon EKS resources.
    public var eksPropertiesOverride: BatchClientTypes.EksPropertiesOverride?
    /// The job definition used by this job. This value can be one of definition-name, definition-name:revision, or the Amazon Resource Name (ARN) for the job definition, with or without the revision (arn:aws:batch:region:account:job-definition/definition-name:revision , or arn:aws:batch:region:account:job-definition/definition-name ). If the revision is not specified, then the latest active revision is used.
    /// This member is required.
    public var jobDefinition: Swift.String?
    /// The name of the job. It can be up to 128 letters long. The first character must be alphanumeric, can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    /// This member is required.
    public var jobName: Swift.String?
    /// The job queue where the job is submitted. You can specify either the name or the Amazon Resource Name (ARN) of the queue.
    /// This member is required.
    public var jobQueue: Swift.String?
    /// A list of node overrides in JSON format that specify the node range to target and the container overrides for that node range. This parameter isn't applicable to jobs that are running on Fargate resources; use containerOverrides instead.
    public var nodeOverrides: BatchClientTypes.NodeOverrides?
    /// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition.
    public var parameters: [Swift.String: Swift.String]?
    /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state. When specified, this overrides the tag propagation setting in the job definition.
    public var propagateTags: Swift.Bool?
    /// The retry strategy to use for failed jobs from this [SubmitJob] operation. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.
    public var retryStrategy: BatchClientTypes.RetryStrategy?
    /// The scheduling priority for the job. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority. This overrides any scheduling priority in the job definition and works only within a single share identifier. The minimum supported value is 0 and the maximum supported value is 9999.
    public var schedulingPriorityOverride: Swift.Int?
    /// The share identifier for the job. Don't specify this parameter if the job queue doesn't have a scheduling policy. If the job queue has a scheduling policy, then this parameter must be specified. This string is limited to 255 alphanumeric characters, and can be followed by an asterisk (*).
    public var shareIdentifier: Swift.String?
    /// The tags that you apply to the job request to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in Amazon Web Services General Reference.
    public var tags: [Swift.String: Swift.String]?
    /// The timeout configuration for this [SubmitJob] operation. You can specify a timeout duration after which Batch terminates your jobs if they haven't finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds. This configuration overrides any timeout configuration specified in the job definition. For array jobs, child jobs have the same timeout configuration as the parent job. For more information, see [Job Timeouts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/job_timeouts.html) in the Amazon Elastic Container Service Developer Guide.
    public var timeout: BatchClientTypes.JobTimeout?

    public init(
        arrayProperties: BatchClientTypes.ArrayProperties? = nil,
        containerOverrides: BatchClientTypes.ContainerOverrides? = nil,
        dependsOn: [BatchClientTypes.JobDependency]? = nil,
        ecsPropertiesOverride: BatchClientTypes.EcsPropertiesOverride? = nil,
        eksPropertiesOverride: BatchClientTypes.EksPropertiesOverride? = nil,
        jobDefinition: Swift.String? = nil,
        jobName: Swift.String? = nil,
        jobQueue: Swift.String? = nil,
        nodeOverrides: BatchClientTypes.NodeOverrides? = nil,
        parameters: [Swift.String: Swift.String]? = nil,
        propagateTags: Swift.Bool? = nil,
        retryStrategy: BatchClientTypes.RetryStrategy? = nil,
        schedulingPriorityOverride: Swift.Int? = nil,
        shareIdentifier: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        timeout: BatchClientTypes.JobTimeout? = nil
    )
    {
        self.arrayProperties = arrayProperties
        self.containerOverrides = containerOverrides
        self.dependsOn = dependsOn
        self.ecsPropertiesOverride = ecsPropertiesOverride
        self.eksPropertiesOverride = eksPropertiesOverride
        self.jobDefinition = jobDefinition
        self.jobName = jobName
        self.jobQueue = jobQueue
        self.nodeOverrides = nodeOverrides
        self.parameters = parameters
        self.propagateTags = propagateTags
        self.retryStrategy = retryStrategy
        self.schedulingPriorityOverride = schedulingPriorityOverride
        self.shareIdentifier = shareIdentifier
        self.tags = tags
        self.timeout = timeout
    }
}

public struct SubmitJobOutput {
    /// The Amazon Resource Name (ARN) for the job.
    public var jobArn: Swift.String?
    /// The unique identifier for the job.
    /// This member is required.
    public var jobId: Swift.String?
    /// The name of the job.
    /// This member is required.
    public var jobName: Swift.String?

    public init(
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobName: Swift.String? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobName = jobName
    }
}

/// Contains the parameters for TagResource.
public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource that tags are added to. Batch resources that support tags are compute environments, jobs, job definitions, job queues, and scheduling policies. ARNs for child jobs of array and multi-node parallel (MNP) jobs aren't supported.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags that you apply to the resource to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in Amazon Web Services General Reference.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

/// Contains the parameters for TerminateJob.
public struct TerminateJobInput {
    /// The Batch job ID of the job to terminate.
    /// This member is required.
    public var jobId: Swift.String?
    /// A message to attach to the job that explains the reason for canceling it. This message is returned by future [DescribeJobs] operations on the job. This message is also recorded in the Batch activity logs.
    /// This member is required.
    public var reason: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.reason = reason
    }
}

public struct TerminateJobOutput {

    public init() { }
}

/// Contains the parameters for UntagResource.
public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource from which to delete tags. Batch resources that support tags are compute environments, jobs, job definitions, job queues, and scheduling policies. ARNs for child jobs of array and multi-node parallel (MNP) jobs aren't supported.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys of the tags to be removed.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

extension BatchClientTypes {

    public enum CRUpdateAllocationStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bestFitProgressive
        case spotCapacityOptimized
        case spotPriceCapacityOptimized
        case sdkUnknown(Swift.String)

        public static var allCases: [CRUpdateAllocationStrategy] {
            return [
                .bestFitProgressive,
                .spotCapacityOptimized,
                .spotPriceCapacityOptimized
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bestFitProgressive: return "BEST_FIT_PROGRESSIVE"
            case .spotCapacityOptimized: return "SPOT_CAPACITY_OPTIMIZED"
            case .spotPriceCapacityOptimized: return "SPOT_PRICE_CAPACITY_OPTIMIZED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension BatchClientTypes {
    /// An object that represents the attributes of a compute environment that can be updated. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
    public struct ComputeResourceUpdate {
        /// The allocation strategy to use for the compute resource if there's not enough instances of the best fitting instance type that can be allocated. This might be because of availability of the instance type in the Region or [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html). For more information, see [Allocation strategies](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) in the Batch User Guide. When updating a compute environment, changing the allocation strategy requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. BEST_FIT isn't supported when updating a compute environment. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. BEST_FIT_PROGRESSIVE Batch selects additional instance types that are large enough to meet the requirements of the jobs in the queue. Its preference is for instance types with lower cost vCPUs. If additional instances of the previously selected instance types aren't available, Batch selects new instance types. SPOT_CAPACITY_OPTIMIZED Batch selects one or more instance types that are large enough to meet the requirements of the jobs in the queue. Its preference is for instance types that are less likely to be interrupted. This allocation strategy is only available for Spot Instance compute resources. SPOT_PRICE_CAPACITY_OPTIMIZED The price and capacity optimized allocation strategy looks at both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have the lowest possible price. This allocation strategy is only available for Spot Instance compute resources. With BEST_FIT_PROGRESSIVE,SPOT_CAPACITY_OPTIMIZED and SPOT_PRICE_CAPACITY_OPTIMIZED (recommended) strategies using On-Demand or Spot Instances, and the BEST_FIT strategy using Spot Instances, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance.
        public var allocationStrategy: BatchClientTypes.CRUpdateAllocationStrategy?
        /// The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. For most use cases, we recommend leaving this field empty. When updating a compute environment, changing the bid percentage requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var bidPercentage: Swift.Int?
        /// The desired number of vCPUS in the compute environment. Batch modifies this value between the minimum and maximum values based on job queue demand. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. Batch doesn't support changing the desired number of vCPUs of an existing compute environment. Don't specify this parameter for compute environments using Amazon EKS clusters. When you update the desiredvCpus setting, the value must be between the minvCpus and maxvCpus values. Additionally, the updated desiredvCpus value must be greater than or equal to the current desiredvCpus value. For more information, see [Troubleshooting Batch](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#error-desired-vcpus-update) in the Batch User Guide.
        public var desiredvCpus: Swift.Int?
        /// Provides information used to select Amazon Machine Images (AMIs) for Amazon EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. To remove the Amazon EC2 configuration and any custom AMI ID specified in imageIdOverride, set this value to an empty string. One or two values can be provided. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var ec2Configuration: [BatchClientTypes.Ec2Configuration]?
        /// The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to log in to your instances with SSH. To remove the Amazon EC2 key pair, set this value to an empty string. When updating a compute environment, changing the Amazon EC2 key pair requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var ec2KeyPair: Swift.String?
        /// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter is overridden by the imageIdOverride member of the Ec2Configuration structure. To remove the custom AMI ID and use the default AMI ID, set this value to an empty string. When updating a compute environment, changing the AMI ID requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the Amazon Elastic Container Service Developer Guide.
        public var imageId: Swift.String?
        /// The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. Required for Amazon EC2 instances. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example,  ecsInstanceRole  or arn:aws:iam:::instance-profile/ecsInstanceRole . For more information, see [Amazon ECS instance role](https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html) in the Batch User Guide. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var instanceRole: Swift.String?
        /// The instances types that can be launched. You can specify instance families to launch any instance type within those families (for example, c5 or p3), or you can specify specific sizes within a family (such as c5.8xlarge). You can also choose optimal to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. When you create a compute environment, the instance types that you select for the compute environment must share the same architecture. For example, you can't mix x86 and ARM instances in the same compute environment. Currently, optimal uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5, and R5 instance families are used.
        public var instanceTypes: [Swift.String]?
        /// The updated launch template to use for your compute resources. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see [Launch template support](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html) in the Batch User Guide. To remove the custom launch template and use the default launch template, set launchTemplateId or launchTemplateName member of the launch template specification to an empty string. Removing the launch template from a compute environment will not remove the AMI specified in the launch template. In order to update the AMI specified in a launch template, the updateToLatestImageVersion parameter must be set to true. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var launchTemplate: BatchClientTypes.LaunchTemplateSpecification?
        /// The maximum number of Amazon EC2 vCPUs that an environment can reach. With BEST_FIT_PROGRESSIVE,SPOT_CAPACITY_OPTIMIZED and SPOT_PRICE_CAPACITY_OPTIMIZED (recommended) strategies using On-Demand or Spot Instances, and the BEST_FIT strategy using Spot Instances, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance.
        public var maxvCpus: Swift.Int?
        /// The minimum number of vCPUs that an environment should maintain (even if the compute environment is DISABLED). This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var minvCpus: Swift.Int?
        /// The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the Amazon EC2 User Guide for Linux Instances. When updating a compute environment, changing the placement group requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var placementGroup: Swift.String?
        /// The Amazon EC2 security groups that are associated with instances launched in the compute environment. This parameter is required for Fargate compute resources, where it can contain up to 5 security groups. For Fargate compute resources, providing an empty list is handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the security groups from the compute resource. When updating a compute environment, changing the Amazon EC2 security groups requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
        public var securityGroupIds: [Swift.String]?
        /// The VPC subnets where the compute resources are launched. Fargate compute resources can contain up to 16 subnets. For Fargate compute resources, providing an empty list will be handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the VPC subnets from the compute resource. For more information, see [VPCs and subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) in the Amazon VPC User Guide. When updating a compute environment, changing the VPC subnets requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. Batch on Amazon EC2 and Batch on Amazon EKS support Local Zones. For more information, see [ Local Zones](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-local-zones) in the Amazon EC2 User Guide for Linux Instances, [Amazon EKS and Amazon Web Services Local Zones](https://docs.aws.amazon.com/eks/latest/userguide/local-zones.html) in the Amazon EKS User Guide and [ Amazon ECS clusters in Local Zones, Wavelength Zones, and Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-regions-zones.html#clusters-local-zones) in the Amazon ECS Developer Guide. Batch on Fargate doesn't currently support Local Zones.
        public var subnets: [Swift.String]?
        /// Key-value pair tags to be applied to Amazon EC2 resources that are launched in the compute environment. For Batch, these take the form of "String1": "String2", where String1 is the tag key and String2 is the tag value-for example, { "Name": "Batch Instance - C4OnDemand" }. This is helpful for recognizing your Batch instances in the Amazon EC2 console. These tags aren't seen when using the Batch ListTagsForResource API operation. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var tags: [Swift.String: Swift.String]?
        /// The type of compute environment: EC2, SPOT, FARGATE, or FARGATE_SPOT. For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide. If you choose SPOT, you must also specify an Amazon EC2 Spot Fleet role with the spotIamFleetRole parameter. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the Batch User Guide. When updating a compute environment, changing the type of a compute environment requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
        public var type: BatchClientTypes.CRType?
        /// Specifies whether the AMI ID is updated to the latest one that's supported by Batch when the compute environment has an infrastructure update. The default value is false. An AMI ID can either be specified in the imageId or imageIdOverride parameters or be determined by the launch template that's specified in the launchTemplate parameter. If an AMI ID is specified any of these ways, this parameter is ignored. For more information about to update AMI IDs during an infrastructure update, see [Updating the AMI ID](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html#updating-compute-environments-ami) in the Batch User Guide. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
        public var updateToLatestImageVersion: Swift.Bool?

        public init(
            allocationStrategy: BatchClientTypes.CRUpdateAllocationStrategy? = nil,
            bidPercentage: Swift.Int? = nil,
            desiredvCpus: Swift.Int? = nil,
            ec2Configuration: [BatchClientTypes.Ec2Configuration]? = nil,
            ec2KeyPair: Swift.String? = nil,
            imageId: Swift.String? = nil,
            instanceRole: Swift.String? = nil,
            instanceTypes: [Swift.String]? = nil,
            launchTemplate: BatchClientTypes.LaunchTemplateSpecification? = nil,
            maxvCpus: Swift.Int? = nil,
            minvCpus: Swift.Int? = nil,
            placementGroup: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            type: BatchClientTypes.CRType? = nil,
            updateToLatestImageVersion: Swift.Bool? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.bidPercentage = bidPercentage
            self.desiredvCpus = desiredvCpus
            self.ec2Configuration = ec2Configuration
            self.ec2KeyPair = ec2KeyPair
            self.imageId = imageId
            self.instanceRole = instanceRole
            self.instanceTypes = instanceTypes
            self.launchTemplate = launchTemplate
            self.maxvCpus = maxvCpus
            self.minvCpus = minvCpus
            self.placementGroup = placementGroup
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
            self.tags = tags
            self.type = type
            self.updateToLatestImageVersion = updateToLatestImageVersion
        }
    }

}

/// Contains the parameters for UpdateComputeEnvironment.
public struct UpdateComputeEnvironmentInput {
    /// The name or full Amazon Resource Name (ARN) of the compute environment to update.
    /// This member is required.
    public var computeEnvironment: Swift.String?
    /// Details of the compute resources managed by the compute environment. Required for a managed compute environment. For more information, see [Compute Environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
    public var computeResources: BatchClientTypes.ComputeResourceUpdate?
    /// Reserved.
    public var context: Swift.String?
    /// The full Amazon Resource Name (ARN) of the IAM role that allows Batch to make calls to other Amazon Web Services services on your behalf. For more information, see [Batch service IAM role](https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html) in the Batch User Guide. If the compute environment has a service-linked role, it can't be changed to use a regular IAM role. Likewise, if the compute environment has a regular IAM role, it can't be changed to use a service-linked role. To update the parameters for the compute environment that require an infrastructure update to change, the AWSServiceRoleForBatch service-linked role must be used. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. If your specified role has a path other than /, then you must either specify the full role ARN (recommended) or prefix the role name with the path. Depending on how you created your Batch service role, its ARN might contain the service-role path prefix. When you only specify the name of the service role, Batch assumes that your ARN doesn't use the service-role path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.
    public var serviceRole: Swift.String?
    /// The state of the compute environment. Compute environments in the ENABLED state can accept jobs from a queue and scale in or out automatically based on the workload demand of its associated queues. If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically, based on the job queue demand. If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out. Compute environments in a DISABLED state may continue to incur billing charges. To prevent additional charges, turn off and then delete the compute environment. For more information, see [State](https://docs.aws.amazon.com/batch/latest/userguide/compute_environment_parameters.html#compute_environment_state) in the Batch User Guide. When an instance is idle, the instance scales down to the minvCpus value. However, the instance size doesn't change. For example, consider a c5.8xlarge instance with a minvCpus value of 4 and a desiredvCpus value of 36. This instance doesn't scale down to a c5.large instance.
    public var state: BatchClientTypes.CEState?
    /// The maximum number of vCPUs expected to be used for an unmanaged compute environment. Don't specify this parameter for a managed compute environment. This parameter is only used for fair share scheduling to reserve vCPU capacity for new share identifiers. If this parameter isn't provided for a fair share job queue, no vCPU capacity is reserved.
    public var unmanagedvCpus: Swift.Int?
    /// Specifies the updated infrastructure update policy for the compute environment. For more information about infrastructure updates, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
    public var updatePolicy: BatchClientTypes.UpdatePolicy?

    public init(
        computeEnvironment: Swift.String? = nil,
        computeResources: BatchClientTypes.ComputeResourceUpdate? = nil,
        context: Swift.String? = nil,
        serviceRole: Swift.String? = nil,
        state: BatchClientTypes.CEState? = nil,
        unmanagedvCpus: Swift.Int? = nil,
        updatePolicy: BatchClientTypes.UpdatePolicy? = nil
    )
    {
        self.computeEnvironment = computeEnvironment
        self.computeResources = computeResources
        self.context = context
        self.serviceRole = serviceRole
        self.state = state
        self.unmanagedvCpus = unmanagedvCpus
        self.updatePolicy = updatePolicy
    }
}

public struct UpdateComputeEnvironmentOutput {
    /// The Amazon Resource Name (ARN) of the compute environment.
    public var computeEnvironmentArn: Swift.String?
    /// The name of the compute environment. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    public var computeEnvironmentName: Swift.String?

    public init(
        computeEnvironmentArn: Swift.String? = nil,
        computeEnvironmentName: Swift.String? = nil
    )
    {
        self.computeEnvironmentArn = computeEnvironmentArn
        self.computeEnvironmentName = computeEnvironmentName
    }
}

/// Contains the parameters for UpdateJobQueue.
public struct UpdateJobQueueInput {
    /// Details the set of compute environments mapped to a job queue and their order relative to each other. This is one of the parameters used by the job scheduler to determine which compute environment runs a given job. Compute environments must be in the VALID state before you can associate them with a job queue. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT). EC2 and Fargate compute environments can't be mixed. All compute environments that are associated with a job queue must share the same architecture. Batch doesn't support mixing compute environment architecture types in a single job queue.
    public var computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
    /// The name or the Amazon Resource Name (ARN) of the job queue.
    /// This member is required.
    public var jobQueue: Swift.String?
    /// The set of actions that Batch perform on jobs that remain at the head of the job queue in the specified state longer than specified times. Batch will perform each action after maxTimeSeconds has passed.
    public var jobStateTimeLimitActions: [BatchClientTypes.JobStateTimeLimitAction]?
    /// The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order. For example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT). EC2 and Fargate compute environments can't be mixed.
    public var priority: Swift.Int?
    /// Amazon Resource Name (ARN) of the fair share scheduling policy. Once a job queue is created, the fair share scheduling policy can be replaced but not removed. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . For example, aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy.
    public var schedulingPolicyArn: Swift.String?
    /// Describes the queue's ability to accept new jobs. If the job queue state is ENABLED, it can accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
    public var state: BatchClientTypes.JQState?

    public init(
        computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]? = nil,
        jobQueue: Swift.String? = nil,
        jobStateTimeLimitActions: [BatchClientTypes.JobStateTimeLimitAction]? = nil,
        priority: Swift.Int? = nil,
        schedulingPolicyArn: Swift.String? = nil,
        state: BatchClientTypes.JQState? = nil
    )
    {
        self.computeEnvironmentOrder = computeEnvironmentOrder
        self.jobQueue = jobQueue
        self.jobStateTimeLimitActions = jobStateTimeLimitActions
        self.priority = priority
        self.schedulingPolicyArn = schedulingPolicyArn
        self.state = state
    }
}

public struct UpdateJobQueueOutput {
    /// The Amazon Resource Name (ARN) of the job queue.
    public var jobQueueArn: Swift.String?
    /// The name of the job queue.
    public var jobQueueName: Swift.String?

    public init(
        jobQueueArn: Swift.String? = nil,
        jobQueueName: Swift.String? = nil
    )
    {
        self.jobQueueArn = jobQueueArn
        self.jobQueueName = jobQueueName
    }
}

/// Contains the parameters for UpdateSchedulingPolicy.
public struct UpdateSchedulingPolicyInput {
    /// The Amazon Resource Name (ARN) of the scheduling policy to update.
    /// This member is required.
    public var arn: Swift.String?
    /// The fair share policy.
    public var fairsharePolicy: BatchClientTypes.FairsharePolicy?

    public init(
        arn: Swift.String? = nil,
        fairsharePolicy: BatchClientTypes.FairsharePolicy? = nil
    )
    {
        self.arn = arn
        self.fairsharePolicy = fairsharePolicy
    }
}

public struct UpdateSchedulingPolicyOutput {

    public init() { }
}

extension CancelJobInput {

    static func urlPathProvider(_ value: CancelJobInput) -> Swift.String? {
        return "/v1/canceljob"
    }
}

extension CreateComputeEnvironmentInput {

    static func urlPathProvider(_ value: CreateComputeEnvironmentInput) -> Swift.String? {
        return "/v1/createcomputeenvironment"
    }
}

extension CreateJobQueueInput {

    static func urlPathProvider(_ value: CreateJobQueueInput) -> Swift.String? {
        return "/v1/createjobqueue"
    }
}

extension CreateSchedulingPolicyInput {

    static func urlPathProvider(_ value: CreateSchedulingPolicyInput) -> Swift.String? {
        return "/v1/createschedulingpolicy"
    }
}

extension DeleteComputeEnvironmentInput {

    static func urlPathProvider(_ value: DeleteComputeEnvironmentInput) -> Swift.String? {
        return "/v1/deletecomputeenvironment"
    }
}

extension DeleteJobQueueInput {

    static func urlPathProvider(_ value: DeleteJobQueueInput) -> Swift.String? {
        return "/v1/deletejobqueue"
    }
}

extension DeleteSchedulingPolicyInput {

    static func urlPathProvider(_ value: DeleteSchedulingPolicyInput) -> Swift.String? {
        return "/v1/deleteschedulingpolicy"
    }
}

extension DeregisterJobDefinitionInput {

    static func urlPathProvider(_ value: DeregisterJobDefinitionInput) -> Swift.String? {
        return "/v1/deregisterjobdefinition"
    }
}

extension DescribeComputeEnvironmentsInput {

    static func urlPathProvider(_ value: DescribeComputeEnvironmentsInput) -> Swift.String? {
        return "/v1/describecomputeenvironments"
    }
}

extension DescribeJobDefinitionsInput {

    static func urlPathProvider(_ value: DescribeJobDefinitionsInput) -> Swift.String? {
        return "/v1/describejobdefinitions"
    }
}

extension DescribeJobQueuesInput {

    static func urlPathProvider(_ value: DescribeJobQueuesInput) -> Swift.String? {
        return "/v1/describejobqueues"
    }
}

extension DescribeJobsInput {

    static func urlPathProvider(_ value: DescribeJobsInput) -> Swift.String? {
        return "/v1/describejobs"
    }
}

extension DescribeSchedulingPoliciesInput {

    static func urlPathProvider(_ value: DescribeSchedulingPoliciesInput) -> Swift.String? {
        return "/v1/describeschedulingpolicies"
    }
}

extension GetJobQueueSnapshotInput {

    static func urlPathProvider(_ value: GetJobQueueSnapshotInput) -> Swift.String? {
        return "/v1/getjobqueuesnapshot"
    }
}

extension ListJobsInput {

    static func urlPathProvider(_ value: ListJobsInput) -> Swift.String? {
        return "/v1/listjobs"
    }
}

extension ListSchedulingPoliciesInput {

    static func urlPathProvider(_ value: ListSchedulingPoliciesInput) -> Swift.String? {
        return "/v1/listschedulingpolicies"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/v1/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension RegisterJobDefinitionInput {

    static func urlPathProvider(_ value: RegisterJobDefinitionInput) -> Swift.String? {
        return "/v1/registerjobdefinition"
    }
}

extension SubmitJobInput {

    static func urlPathProvider(_ value: SubmitJobInput) -> Swift.String? {
        return "/v1/submitjob"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/v1/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension TerminateJobInput {

    static func urlPathProvider(_ value: TerminateJobInput) -> Swift.String? {
        return "/v1/terminatejob"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/v1/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateComputeEnvironmentInput {

    static func urlPathProvider(_ value: UpdateComputeEnvironmentInput) -> Swift.String? {
        return "/v1/updatecomputeenvironment"
    }
}

extension UpdateJobQueueInput {

    static func urlPathProvider(_ value: UpdateJobQueueInput) -> Swift.String? {
        return "/v1/updatejobqueue"
    }
}

extension UpdateSchedulingPolicyInput {

    static func urlPathProvider(_ value: UpdateSchedulingPolicyInput) -> Swift.String? {
        return "/v1/updateschedulingpolicy"
    }
}

extension CancelJobInput {

    static func write(value: CancelJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobId"].write(value.jobId)
        try writer["reason"].write(value.reason)
    }
}

extension CreateComputeEnvironmentInput {

    static func write(value: CreateComputeEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["computeEnvironmentName"].write(value.computeEnvironmentName)
        try writer["computeResources"].write(value.computeResources, with: BatchClientTypes.ComputeResource.write(value:to:))
        try writer["context"].write(value.context)
        try writer["eksConfiguration"].write(value.eksConfiguration, with: BatchClientTypes.EksConfiguration.write(value:to:))
        try writer["serviceRole"].write(value.serviceRole)
        try writer["state"].write(value.state)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["type"].write(value.type)
        try writer["unmanagedvCpus"].write(value.unmanagedvCpus)
    }
}

extension CreateJobQueueInput {

    static func write(value: CreateJobQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["computeEnvironmentOrder"].writeList(value.computeEnvironmentOrder, memberWritingClosure: BatchClientTypes.ComputeEnvironmentOrder.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["jobQueueName"].write(value.jobQueueName)
        try writer["jobStateTimeLimitActions"].writeList(value.jobStateTimeLimitActions, memberWritingClosure: BatchClientTypes.JobStateTimeLimitAction.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["priority"].write(value.priority)
        try writer["schedulingPolicyArn"].write(value.schedulingPolicyArn)
        try writer["state"].write(value.state)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateSchedulingPolicyInput {

    static func write(value: CreateSchedulingPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fairsharePolicy"].write(value.fairsharePolicy, with: BatchClientTypes.FairsharePolicy.write(value:to:))
        try writer["name"].write(value.name)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension DeleteComputeEnvironmentInput {

    static func write(value: DeleteComputeEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["computeEnvironment"].write(value.computeEnvironment)
    }
}

extension DeleteJobQueueInput {

    static func write(value: DeleteJobQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobQueue"].write(value.jobQueue)
    }
}

extension DeleteSchedulingPolicyInput {

    static func write(value: DeleteSchedulingPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arn"].write(value.arn)
    }
}

extension DeregisterJobDefinitionInput {

    static func write(value: DeregisterJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobDefinition"].write(value.jobDefinition)
    }
}

extension DescribeComputeEnvironmentsInput {

    static func write(value: DescribeComputeEnvironmentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["computeEnvironments"].writeList(value.computeEnvironments, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension DescribeJobDefinitionsInput {

    static func write(value: DescribeJobDefinitionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobDefinitionName"].write(value.jobDefinitionName)
        try writer["jobDefinitions"].writeList(value.jobDefinitions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["status"].write(value.status)
    }
}

extension DescribeJobQueuesInput {

    static func write(value: DescribeJobQueuesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobQueues"].writeList(value.jobQueues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension DescribeJobsInput {

    static func write(value: DescribeJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobs"].writeList(value.jobs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeSchedulingPoliciesInput {

    static func write(value: DescribeSchedulingPoliciesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arns"].writeList(value.arns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetJobQueueSnapshotInput {

    static func write(value: GetJobQueueSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobQueue"].write(value.jobQueue)
    }
}

extension ListJobsInput {

    static func write(value: ListJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arrayJobId"].write(value.arrayJobId)
        try writer["filters"].writeList(value.filters, memberWritingClosure: BatchClientTypes.KeyValuesPair.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["jobQueue"].write(value.jobQueue)
        try writer["jobStatus"].write(value.jobStatus)
        try writer["maxResults"].write(value.maxResults)
        try writer["multiNodeJobId"].write(value.multiNodeJobId)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListSchedulingPoliciesInput {

    static func write(value: ListSchedulingPoliciesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension RegisterJobDefinitionInput {

    static func write(value: RegisterJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerProperties"].write(value.containerProperties, with: BatchClientTypes.ContainerProperties.write(value:to:))
        try writer["ecsProperties"].write(value.ecsProperties, with: BatchClientTypes.EcsProperties.write(value:to:))
        try writer["eksProperties"].write(value.eksProperties, with: BatchClientTypes.EksProperties.write(value:to:))
        try writer["jobDefinitionName"].write(value.jobDefinitionName)
        try writer["nodeProperties"].write(value.nodeProperties, with: BatchClientTypes.NodeProperties.write(value:to:))
        try writer["parameters"].writeMap(value.parameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["platformCapabilities"].writeList(value.platformCapabilities, memberWritingClosure: SmithyReadWrite.WritingClosureBox<BatchClientTypes.PlatformCapability>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["propagateTags"].write(value.propagateTags)
        try writer["retryStrategy"].write(value.retryStrategy, with: BatchClientTypes.RetryStrategy.write(value:to:))
        try writer["schedulingPriority"].write(value.schedulingPriority)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["timeout"].write(value.timeout, with: BatchClientTypes.JobTimeout.write(value:to:))
        try writer["type"].write(value.type)
    }
}

extension SubmitJobInput {

    static func write(value: SubmitJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arrayProperties"].write(value.arrayProperties, with: BatchClientTypes.ArrayProperties.write(value:to:))
        try writer["containerOverrides"].write(value.containerOverrides, with: BatchClientTypes.ContainerOverrides.write(value:to:))
        try writer["dependsOn"].writeList(value.dependsOn, memberWritingClosure: BatchClientTypes.JobDependency.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ecsPropertiesOverride"].write(value.ecsPropertiesOverride, with: BatchClientTypes.EcsPropertiesOverride.write(value:to:))
        try writer["eksPropertiesOverride"].write(value.eksPropertiesOverride, with: BatchClientTypes.EksPropertiesOverride.write(value:to:))
        try writer["jobDefinition"].write(value.jobDefinition)
        try writer["jobName"].write(value.jobName)
        try writer["jobQueue"].write(value.jobQueue)
        try writer["nodeOverrides"].write(value.nodeOverrides, with: BatchClientTypes.NodeOverrides.write(value:to:))
        try writer["parameters"].writeMap(value.parameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["propagateTags"].write(value.propagateTags)
        try writer["retryStrategy"].write(value.retryStrategy, with: BatchClientTypes.RetryStrategy.write(value:to:))
        try writer["schedulingPriorityOverride"].write(value.schedulingPriorityOverride)
        try writer["shareIdentifier"].write(value.shareIdentifier)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["timeout"].write(value.timeout, with: BatchClientTypes.JobTimeout.write(value:to:))
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension TerminateJobInput {

    static func write(value: TerminateJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobId"].write(value.jobId)
        try writer["reason"].write(value.reason)
    }
}

extension UpdateComputeEnvironmentInput {

    static func write(value: UpdateComputeEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["computeEnvironment"].write(value.computeEnvironment)
        try writer["computeResources"].write(value.computeResources, with: BatchClientTypes.ComputeResourceUpdate.write(value:to:))
        try writer["context"].write(value.context)
        try writer["serviceRole"].write(value.serviceRole)
        try writer["state"].write(value.state)
        try writer["unmanagedvCpus"].write(value.unmanagedvCpus)
        try writer["updatePolicy"].write(value.updatePolicy, with: BatchClientTypes.UpdatePolicy.write(value:to:))
    }
}

extension UpdateJobQueueInput {

    static func write(value: UpdateJobQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["computeEnvironmentOrder"].writeList(value.computeEnvironmentOrder, memberWritingClosure: BatchClientTypes.ComputeEnvironmentOrder.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["jobQueue"].write(value.jobQueue)
        try writer["jobStateTimeLimitActions"].writeList(value.jobStateTimeLimitActions, memberWritingClosure: BatchClientTypes.JobStateTimeLimitAction.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["priority"].write(value.priority)
        try writer["schedulingPolicyArn"].write(value.schedulingPolicyArn)
        try writer["state"].write(value.state)
    }
}

extension UpdateSchedulingPolicyInput {

    static func write(value: UpdateSchedulingPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arn"].write(value.arn)
        try writer["fairsharePolicy"].write(value.fairsharePolicy, with: BatchClientTypes.FairsharePolicy.write(value:to:))
    }
}

extension CancelJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelJobOutput {
        return CancelJobOutput()
    }
}

extension CreateComputeEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateComputeEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateComputeEnvironmentOutput()
        value.computeEnvironmentArn = try reader["computeEnvironmentArn"].readIfPresent()
        value.computeEnvironmentName = try reader["computeEnvironmentName"].readIfPresent()
        return value
    }
}

extension CreateJobQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateJobQueueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateJobQueueOutput()
        value.jobQueueArn = try reader["jobQueueArn"].readIfPresent() ?? ""
        value.jobQueueName = try reader["jobQueueName"].readIfPresent() ?? ""
        return value
    }
}

extension CreateSchedulingPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSchedulingPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSchedulingPolicyOutput()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteComputeEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteComputeEnvironmentOutput {
        return DeleteComputeEnvironmentOutput()
    }
}

extension DeleteJobQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteJobQueueOutput {
        return DeleteJobQueueOutput()
    }
}

extension DeleteSchedulingPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSchedulingPolicyOutput {
        return DeleteSchedulingPolicyOutput()
    }
}

extension DeregisterJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterJobDefinitionOutput {
        return DeregisterJobDefinitionOutput()
    }
}

extension DescribeComputeEnvironmentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeComputeEnvironmentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeComputeEnvironmentsOutput()
        value.computeEnvironments = try reader["computeEnvironments"].readListIfPresent(memberReadingClosure: BatchClientTypes.ComputeEnvironmentDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeJobDefinitionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeJobDefinitionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeJobDefinitionsOutput()
        value.jobDefinitions = try reader["jobDefinitions"].readListIfPresent(memberReadingClosure: BatchClientTypes.JobDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeJobQueuesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeJobQueuesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeJobQueuesOutput()
        value.jobQueues = try reader["jobQueues"].readListIfPresent(memberReadingClosure: BatchClientTypes.JobQueueDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeJobsOutput()
        value.jobs = try reader["jobs"].readListIfPresent(memberReadingClosure: BatchClientTypes.JobDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeSchedulingPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSchedulingPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSchedulingPoliciesOutput()
        value.schedulingPolicies = try reader["schedulingPolicies"].readListIfPresent(memberReadingClosure: BatchClientTypes.SchedulingPolicyDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetJobQueueSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetJobQueueSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetJobQueueSnapshotOutput()
        value.frontOfQueue = try reader["frontOfQueue"].readIfPresent(with: BatchClientTypes.FrontOfQueueDetail.read(from:))
        return value
    }
}

extension ListJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListJobsOutput()
        value.jobSummaryList = try reader["jobSummaryList"].readListIfPresent(memberReadingClosure: BatchClientTypes.JobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListSchedulingPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSchedulingPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSchedulingPoliciesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.schedulingPolicies = try reader["schedulingPolicies"].readListIfPresent(memberReadingClosure: BatchClientTypes.SchedulingPolicyListingDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension RegisterJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterJobDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RegisterJobDefinitionOutput()
        value.jobDefinitionArn = try reader["jobDefinitionArn"].readIfPresent() ?? ""
        value.jobDefinitionName = try reader["jobDefinitionName"].readIfPresent() ?? ""
        value.revision = try reader["revision"].readIfPresent() ?? 0
        return value
    }
}

extension SubmitJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SubmitJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SubmitJobOutput()
        value.jobArn = try reader["jobArn"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent() ?? ""
        value.jobName = try reader["jobName"].readIfPresent() ?? ""
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension TerminateJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TerminateJobOutput {
        return TerminateJobOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateComputeEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateComputeEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateComputeEnvironmentOutput()
        value.computeEnvironmentArn = try reader["computeEnvironmentArn"].readIfPresent()
        value.computeEnvironmentName = try reader["computeEnvironmentName"].readIfPresent()
        return value
    }
}

extension UpdateJobQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateJobQueueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateJobQueueOutput()
        value.jobQueueArn = try reader["jobQueueArn"].readIfPresent()
        value.jobQueueName = try reader["jobQueueName"].readIfPresent()
        return value
    }
}

extension UpdateSchedulingPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSchedulingPolicyOutput {
        return UpdateSchedulingPolicyOutput()
    }
}

enum CancelJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateComputeEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateJobQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSchedulingPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteComputeEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteJobQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSchedulingPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeComputeEnvironmentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeJobDefinitionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeJobQueuesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSchedulingPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetJobQueueSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSchedulingPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SubmitJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TerminateJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateComputeEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateJobQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSchedulingPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ClientException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ClientException {
        let reader = baseError.errorBodyReader
        var value = ClientException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServerException {
        let reader = baseError.errorBodyReader
        var value = ServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BatchClientTypes.ComputeEnvironmentDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.ComputeEnvironmentDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.ComputeEnvironmentDetail()
        value.computeEnvironmentName = try reader["computeEnvironmentName"].readIfPresent() ?? ""
        value.computeEnvironmentArn = try reader["computeEnvironmentArn"].readIfPresent() ?? ""
        value.unmanagedvCpus = try reader["unmanagedvCpus"].readIfPresent()
        value.ecsClusterArn = try reader["ecsClusterArn"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.type = try reader["type"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusReason = try reader["statusReason"].readIfPresent()
        value.computeResources = try reader["computeResources"].readIfPresent(with: BatchClientTypes.ComputeResource.read(from:))
        value.serviceRole = try reader["serviceRole"].readIfPresent()
        value.updatePolicy = try reader["updatePolicy"].readIfPresent(with: BatchClientTypes.UpdatePolicy.read(from:))
        value.eksConfiguration = try reader["eksConfiguration"].readIfPresent(with: BatchClientTypes.EksConfiguration.read(from:))
        value.containerOrchestrationType = try reader["containerOrchestrationType"].readIfPresent()
        value.uuid = try reader["uuid"].readIfPresent()
        value.context = try reader["context"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EksConfiguration {

    static func write(value: BatchClientTypes.EksConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eksClusterArn"].write(value.eksClusterArn)
        try writer["kubernetesNamespace"].write(value.kubernetesNamespace)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksConfiguration()
        value.eksClusterArn = try reader["eksClusterArn"].readIfPresent() ?? ""
        value.kubernetesNamespace = try reader["kubernetesNamespace"].readIfPresent() ?? ""
        return value
    }
}

extension BatchClientTypes.UpdatePolicy {

    static func write(value: BatchClientTypes.UpdatePolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobExecutionTimeoutMinutes"].write(value.jobExecutionTimeoutMinutes)
        try writer["terminateJobsOnUpdate"].write(value.terminateJobsOnUpdate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.UpdatePolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.UpdatePolicy()
        value.terminateJobsOnUpdate = try reader["terminateJobsOnUpdate"].readIfPresent()
        value.jobExecutionTimeoutMinutes = try reader["jobExecutionTimeoutMinutes"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.ComputeResource {

    static func write(value: BatchClientTypes.ComputeResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allocationStrategy"].write(value.allocationStrategy)
        try writer["bidPercentage"].write(value.bidPercentage)
        try writer["desiredvCpus"].write(value.desiredvCpus)
        try writer["ec2Configuration"].writeList(value.ec2Configuration, memberWritingClosure: BatchClientTypes.Ec2Configuration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ec2KeyPair"].write(value.ec2KeyPair)
        try writer["imageId"].write(value.imageId)
        try writer["instanceRole"].write(value.instanceRole)
        try writer["instanceTypes"].writeList(value.instanceTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["launchTemplate"].write(value.launchTemplate, with: BatchClientTypes.LaunchTemplateSpecification.write(value:to:))
        try writer["maxvCpus"].write(value.maxvCpus)
        try writer["minvCpus"].write(value.minvCpus)
        try writer["placementGroup"].write(value.placementGroup)
        try writer["securityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["spotIamFleetRole"].write(value.spotIamFleetRole)
        try writer["subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.ComputeResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.ComputeResource()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.allocationStrategy = try reader["allocationStrategy"].readIfPresent()
        value.minvCpus = try reader["minvCpus"].readIfPresent()
        value.maxvCpus = try reader["maxvCpus"].readIfPresent() ?? 0
        value.desiredvCpus = try reader["desiredvCpus"].readIfPresent()
        value.instanceTypes = try reader["instanceTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.imageId = try reader["imageId"].readIfPresent()
        value.subnets = try reader["subnets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.securityGroupIds = try reader["securityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.ec2KeyPair = try reader["ec2KeyPair"].readIfPresent()
        value.instanceRole = try reader["instanceRole"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.placementGroup = try reader["placementGroup"].readIfPresent()
        value.bidPercentage = try reader["bidPercentage"].readIfPresent()
        value.spotIamFleetRole = try reader["spotIamFleetRole"].readIfPresent()
        value.launchTemplate = try reader["launchTemplate"].readIfPresent(with: BatchClientTypes.LaunchTemplateSpecification.read(from:))
        value.ec2Configuration = try reader["ec2Configuration"].readListIfPresent(memberReadingClosure: BatchClientTypes.Ec2Configuration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.Ec2Configuration {

    static func write(value: BatchClientTypes.Ec2Configuration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["imageIdOverride"].write(value.imageIdOverride)
        try writer["imageKubernetesVersion"].write(value.imageKubernetesVersion)
        try writer["imageType"].write(value.imageType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.Ec2Configuration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.Ec2Configuration()
        value.imageType = try reader["imageType"].readIfPresent() ?? ""
        value.imageIdOverride = try reader["imageIdOverride"].readIfPresent()
        value.imageKubernetesVersion = try reader["imageKubernetesVersion"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.LaunchTemplateSpecification {

    static func write(value: BatchClientTypes.LaunchTemplateSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["launchTemplateId"].write(value.launchTemplateId)
        try writer["launchTemplateName"].write(value.launchTemplateName)
        try writer["version"].write(value.version)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.LaunchTemplateSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.LaunchTemplateSpecification()
        value.launchTemplateId = try reader["launchTemplateId"].readIfPresent()
        value.launchTemplateName = try reader["launchTemplateName"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.JobDefinition {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.JobDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.JobDefinition()
        value.jobDefinitionName = try reader["jobDefinitionName"].readIfPresent() ?? ""
        value.jobDefinitionArn = try reader["jobDefinitionArn"].readIfPresent() ?? ""
        value.revision = try reader["revision"].readIfPresent() ?? 0
        value.status = try reader["status"].readIfPresent()
        value.type = try reader["type"].readIfPresent() ?? ""
        value.schedulingPriority = try reader["schedulingPriority"].readIfPresent()
        value.parameters = try reader["parameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.retryStrategy = try reader["retryStrategy"].readIfPresent(with: BatchClientTypes.RetryStrategy.read(from:))
        value.containerProperties = try reader["containerProperties"].readIfPresent(with: BatchClientTypes.ContainerProperties.read(from:))
        value.timeout = try reader["timeout"].readIfPresent(with: BatchClientTypes.JobTimeout.read(from:))
        value.nodeProperties = try reader["nodeProperties"].readIfPresent(with: BatchClientTypes.NodeProperties.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.propagateTags = try reader["propagateTags"].readIfPresent()
        value.platformCapabilities = try reader["platformCapabilities"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<BatchClientTypes.PlatformCapability>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ecsProperties = try reader["ecsProperties"].readIfPresent(with: BatchClientTypes.EcsProperties.read(from:))
        value.eksProperties = try reader["eksProperties"].readIfPresent(with: BatchClientTypes.EksProperties.read(from:))
        value.containerOrchestrationType = try reader["containerOrchestrationType"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EksProperties {

    static func write(value: BatchClientTypes.EksProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["podProperties"].write(value.podProperties, with: BatchClientTypes.EksPodProperties.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksProperties()
        value.podProperties = try reader["podProperties"].readIfPresent(with: BatchClientTypes.EksPodProperties.read(from:))
        return value
    }
}

extension BatchClientTypes.EksPodProperties {

    static func write(value: BatchClientTypes.EksPodProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containers"].writeList(value.containers, memberWritingClosure: BatchClientTypes.EksContainer.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["dnsPolicy"].write(value.dnsPolicy)
        try writer["hostNetwork"].write(value.hostNetwork)
        try writer["imagePullSecrets"].writeList(value.imagePullSecrets, memberWritingClosure: BatchClientTypes.ImagePullSecret.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["initContainers"].writeList(value.initContainers, memberWritingClosure: BatchClientTypes.EksContainer.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["metadata"].write(value.metadata, with: BatchClientTypes.EksMetadata.write(value:to:))
        try writer["serviceAccountName"].write(value.serviceAccountName)
        try writer["shareProcessNamespace"].write(value.shareProcessNamespace)
        try writer["volumes"].writeList(value.volumes, memberWritingClosure: BatchClientTypes.EksVolume.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksPodProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksPodProperties()
        value.serviceAccountName = try reader["serviceAccountName"].readIfPresent()
        value.hostNetwork = try reader["hostNetwork"].readIfPresent()
        value.dnsPolicy = try reader["dnsPolicy"].readIfPresent()
        value.imagePullSecrets = try reader["imagePullSecrets"].readListIfPresent(memberReadingClosure: BatchClientTypes.ImagePullSecret.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.containers = try reader["containers"].readListIfPresent(memberReadingClosure: BatchClientTypes.EksContainer.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.initContainers = try reader["initContainers"].readListIfPresent(memberReadingClosure: BatchClientTypes.EksContainer.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.volumes = try reader["volumes"].readListIfPresent(memberReadingClosure: BatchClientTypes.EksVolume.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metadata = try reader["metadata"].readIfPresent(with: BatchClientTypes.EksMetadata.read(from:))
        value.shareProcessNamespace = try reader["shareProcessNamespace"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EksMetadata {

    static func write(value: BatchClientTypes.EksMetadata?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["labels"].writeMap(value.labels, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksMetadata()
        value.labels = try reader["labels"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.EksVolume {

    static func write(value: BatchClientTypes.EksVolume?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["emptyDir"].write(value.emptyDir, with: BatchClientTypes.EksEmptyDir.write(value:to:))
        try writer["hostPath"].write(value.hostPath, with: BatchClientTypes.EksHostPath.write(value:to:))
        try writer["name"].write(value.name)
        try writer["secret"].write(value.secret, with: BatchClientTypes.EksSecret.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksVolume {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksVolume()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.hostPath = try reader["hostPath"].readIfPresent(with: BatchClientTypes.EksHostPath.read(from:))
        value.emptyDir = try reader["emptyDir"].readIfPresent(with: BatchClientTypes.EksEmptyDir.read(from:))
        value.secret = try reader["secret"].readIfPresent(with: BatchClientTypes.EksSecret.read(from:))
        return value
    }
}

extension BatchClientTypes.EksSecret {

    static func write(value: BatchClientTypes.EksSecret?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["optional"].write(value.`optional`)
        try writer["secretName"].write(value.secretName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksSecret {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksSecret()
        value.secretName = try reader["secretName"].readIfPresent() ?? ""
        value.`optional` = try reader["optional"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EksEmptyDir {

    static func write(value: BatchClientTypes.EksEmptyDir?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["medium"].write(value.medium)
        try writer["sizeLimit"].write(value.sizeLimit)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksEmptyDir {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksEmptyDir()
        value.medium = try reader["medium"].readIfPresent()
        value.sizeLimit = try reader["sizeLimit"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EksHostPath {

    static func write(value: BatchClientTypes.EksHostPath?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["path"].write(value.path)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksHostPath {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksHostPath()
        value.path = try reader["path"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EksContainer {

    static func write(value: BatchClientTypes.EksContainer?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["args"].writeList(value.args, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["command"].writeList(value.command, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["env"].writeList(value.env, memberWritingClosure: BatchClientTypes.EksContainerEnvironmentVariable.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["image"].write(value.image)
        try writer["imagePullPolicy"].write(value.imagePullPolicy)
        try writer["name"].write(value.name)
        try writer["resources"].write(value.resources, with: BatchClientTypes.EksContainerResourceRequirements.write(value:to:))
        try writer["securityContext"].write(value.securityContext, with: BatchClientTypes.EksContainerSecurityContext.write(value:to:))
        try writer["volumeMounts"].writeList(value.volumeMounts, memberWritingClosure: BatchClientTypes.EksContainerVolumeMount.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksContainer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksContainer()
        value.name = try reader["name"].readIfPresent()
        value.image = try reader["image"].readIfPresent() ?? ""
        value.imagePullPolicy = try reader["imagePullPolicy"].readIfPresent()
        value.command = try reader["command"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.args = try reader["args"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.env = try reader["env"].readListIfPresent(memberReadingClosure: BatchClientTypes.EksContainerEnvironmentVariable.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.resources = try reader["resources"].readIfPresent(with: BatchClientTypes.EksContainerResourceRequirements.read(from:))
        value.volumeMounts = try reader["volumeMounts"].readListIfPresent(memberReadingClosure: BatchClientTypes.EksContainerVolumeMount.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.securityContext = try reader["securityContext"].readIfPresent(with: BatchClientTypes.EksContainerSecurityContext.read(from:))
        return value
    }
}

extension BatchClientTypes.EksContainerSecurityContext {

    static func write(value: BatchClientTypes.EksContainerSecurityContext?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowPrivilegeEscalation"].write(value.allowPrivilegeEscalation)
        try writer["privileged"].write(value.privileged)
        try writer["readOnlyRootFilesystem"].write(value.readOnlyRootFilesystem)
        try writer["runAsGroup"].write(value.runAsGroup)
        try writer["runAsNonRoot"].write(value.runAsNonRoot)
        try writer["runAsUser"].write(value.runAsUser)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksContainerSecurityContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksContainerSecurityContext()
        value.runAsUser = try reader["runAsUser"].readIfPresent()
        value.runAsGroup = try reader["runAsGroup"].readIfPresent()
        value.privileged = try reader["privileged"].readIfPresent()
        value.allowPrivilegeEscalation = try reader["allowPrivilegeEscalation"].readIfPresent()
        value.readOnlyRootFilesystem = try reader["readOnlyRootFilesystem"].readIfPresent()
        value.runAsNonRoot = try reader["runAsNonRoot"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EksContainerVolumeMount {

    static func write(value: BatchClientTypes.EksContainerVolumeMount?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["mountPath"].write(value.mountPath)
        try writer["name"].write(value.name)
        try writer["readOnly"].write(value.readOnly)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksContainerVolumeMount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksContainerVolumeMount()
        value.name = try reader["name"].readIfPresent()
        value.mountPath = try reader["mountPath"].readIfPresent()
        value.readOnly = try reader["readOnly"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EksContainerResourceRequirements {

    static func write(value: BatchClientTypes.EksContainerResourceRequirements?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["limits"].writeMap(value.limits, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["requests"].writeMap(value.requests, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksContainerResourceRequirements {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksContainerResourceRequirements()
        value.limits = try reader["limits"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.requests = try reader["requests"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.EksContainerEnvironmentVariable {

    static func write(value: BatchClientTypes.EksContainerEnvironmentVariable?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksContainerEnvironmentVariable {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksContainerEnvironmentVariable()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.ImagePullSecret {

    static func write(value: BatchClientTypes.ImagePullSecret?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.ImagePullSecret {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.ImagePullSecret()
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension BatchClientTypes.EcsProperties {

    static func write(value: BatchClientTypes.EcsProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["taskProperties"].writeList(value.taskProperties, memberWritingClosure: BatchClientTypes.EcsTaskProperties.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EcsProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EcsProperties()
        value.taskProperties = try reader["taskProperties"].readListIfPresent(memberReadingClosure: BatchClientTypes.EcsTaskProperties.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension BatchClientTypes.EcsTaskProperties {

    static func write(value: BatchClientTypes.EcsTaskProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containers"].writeList(value.containers, memberWritingClosure: BatchClientTypes.TaskContainerProperties.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ephemeralStorage"].write(value.ephemeralStorage, with: BatchClientTypes.EphemeralStorage.write(value:to:))
        try writer["executionRoleArn"].write(value.executionRoleArn)
        try writer["ipcMode"].write(value.ipcMode)
        try writer["networkConfiguration"].write(value.networkConfiguration, with: BatchClientTypes.NetworkConfiguration.write(value:to:))
        try writer["pidMode"].write(value.pidMode)
        try writer["platformVersion"].write(value.platformVersion)
        try writer["runtimePlatform"].write(value.runtimePlatform, with: BatchClientTypes.RuntimePlatform.write(value:to:))
        try writer["taskRoleArn"].write(value.taskRoleArn)
        try writer["volumes"].writeList(value.volumes, memberWritingClosure: BatchClientTypes.Volume.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EcsTaskProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EcsTaskProperties()
        value.containers = try reader["containers"].readListIfPresent(memberReadingClosure: BatchClientTypes.TaskContainerProperties.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.ephemeralStorage = try reader["ephemeralStorage"].readIfPresent(with: BatchClientTypes.EphemeralStorage.read(from:))
        value.executionRoleArn = try reader["executionRoleArn"].readIfPresent()
        value.platformVersion = try reader["platformVersion"].readIfPresent()
        value.ipcMode = try reader["ipcMode"].readIfPresent()
        value.taskRoleArn = try reader["taskRoleArn"].readIfPresent()
        value.pidMode = try reader["pidMode"].readIfPresent()
        value.networkConfiguration = try reader["networkConfiguration"].readIfPresent(with: BatchClientTypes.NetworkConfiguration.read(from:))
        value.runtimePlatform = try reader["runtimePlatform"].readIfPresent(with: BatchClientTypes.RuntimePlatform.read(from:))
        value.volumes = try reader["volumes"].readListIfPresent(memberReadingClosure: BatchClientTypes.Volume.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.Volume {

    static func write(value: BatchClientTypes.Volume?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["efsVolumeConfiguration"].write(value.efsVolumeConfiguration, with: BatchClientTypes.EFSVolumeConfiguration.write(value:to:))
        try writer["host"].write(value.host, with: BatchClientTypes.Host.write(value:to:))
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.Volume {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.Volume()
        value.host = try reader["host"].readIfPresent(with: BatchClientTypes.Host.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.efsVolumeConfiguration = try reader["efsVolumeConfiguration"].readIfPresent(with: BatchClientTypes.EFSVolumeConfiguration.read(from:))
        return value
    }
}

extension BatchClientTypes.EFSVolumeConfiguration {

    static func write(value: BatchClientTypes.EFSVolumeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["authorizationConfig"].write(value.authorizationConfig, with: BatchClientTypes.EFSAuthorizationConfig.write(value:to:))
        try writer["fileSystemId"].write(value.fileSystemId)
        try writer["rootDirectory"].write(value.rootDirectory)
        try writer["transitEncryption"].write(value.transitEncryption)
        try writer["transitEncryptionPort"].write(value.transitEncryptionPort)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EFSVolumeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EFSVolumeConfiguration()
        value.fileSystemId = try reader["fileSystemId"].readIfPresent() ?? ""
        value.rootDirectory = try reader["rootDirectory"].readIfPresent()
        value.transitEncryption = try reader["transitEncryption"].readIfPresent()
        value.transitEncryptionPort = try reader["transitEncryptionPort"].readIfPresent()
        value.authorizationConfig = try reader["authorizationConfig"].readIfPresent(with: BatchClientTypes.EFSAuthorizationConfig.read(from:))
        return value
    }
}

extension BatchClientTypes.EFSAuthorizationConfig {

    static func write(value: BatchClientTypes.EFSAuthorizationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessPointId"].write(value.accessPointId)
        try writer["iam"].write(value.iam)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EFSAuthorizationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EFSAuthorizationConfig()
        value.accessPointId = try reader["accessPointId"].readIfPresent()
        value.iam = try reader["iam"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.Host {

    static func write(value: BatchClientTypes.Host?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sourcePath"].write(value.sourcePath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.Host {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.Host()
        value.sourcePath = try reader["sourcePath"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.RuntimePlatform {

    static func write(value: BatchClientTypes.RuntimePlatform?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cpuArchitecture"].write(value.cpuArchitecture)
        try writer["operatingSystemFamily"].write(value.operatingSystemFamily)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.RuntimePlatform {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.RuntimePlatform()
        value.operatingSystemFamily = try reader["operatingSystemFamily"].readIfPresent()
        value.cpuArchitecture = try reader["cpuArchitecture"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.NetworkConfiguration {

    static func write(value: BatchClientTypes.NetworkConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["assignPublicIp"].write(value.assignPublicIp)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.NetworkConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.NetworkConfiguration()
        value.assignPublicIp = try reader["assignPublicIp"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EphemeralStorage {

    static func write(value: BatchClientTypes.EphemeralStorage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sizeInGiB"].write(value.sizeInGiB)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EphemeralStorage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EphemeralStorage()
        value.sizeInGiB = try reader["sizeInGiB"].readIfPresent() ?? 0
        return value
    }
}

extension BatchClientTypes.TaskContainerProperties {

    static func write(value: BatchClientTypes.TaskContainerProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["command"].writeList(value.command, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["dependsOn"].writeList(value.dependsOn, memberWritingClosure: BatchClientTypes.TaskContainerDependency.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["environment"].writeList(value.environment, memberWritingClosure: BatchClientTypes.KeyValuePair.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["essential"].write(value.essential)
        try writer["image"].write(value.image)
        try writer["linuxParameters"].write(value.linuxParameters, with: BatchClientTypes.LinuxParameters.write(value:to:))
        try writer["logConfiguration"].write(value.logConfiguration, with: BatchClientTypes.LogConfiguration.write(value:to:))
        try writer["mountPoints"].writeList(value.mountPoints, memberWritingClosure: BatchClientTypes.MountPoint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["privileged"].write(value.privileged)
        try writer["readonlyRootFilesystem"].write(value.readonlyRootFilesystem)
        try writer["repositoryCredentials"].write(value.repositoryCredentials, with: BatchClientTypes.RepositoryCredentials.write(value:to:))
        try writer["resourceRequirements"].writeList(value.resourceRequirements, memberWritingClosure: BatchClientTypes.ResourceRequirement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["secrets"].writeList(value.secrets, memberWritingClosure: BatchClientTypes.Secret.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ulimits"].writeList(value.ulimits, memberWritingClosure: BatchClientTypes.Ulimit.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["user"].write(value.user)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.TaskContainerProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.TaskContainerProperties()
        value.command = try reader["command"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.dependsOn = try reader["dependsOn"].readListIfPresent(memberReadingClosure: BatchClientTypes.TaskContainerDependency.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.environment = try reader["environment"].readListIfPresent(memberReadingClosure: BatchClientTypes.KeyValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.essential = try reader["essential"].readIfPresent()
        value.image = try reader["image"].readIfPresent() ?? ""
        value.linuxParameters = try reader["linuxParameters"].readIfPresent(with: BatchClientTypes.LinuxParameters.read(from:))
        value.logConfiguration = try reader["logConfiguration"].readIfPresent(with: BatchClientTypes.LogConfiguration.read(from:))
        value.mountPoints = try reader["mountPoints"].readListIfPresent(memberReadingClosure: BatchClientTypes.MountPoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["name"].readIfPresent()
        value.privileged = try reader["privileged"].readIfPresent()
        value.readonlyRootFilesystem = try reader["readonlyRootFilesystem"].readIfPresent()
        value.repositoryCredentials = try reader["repositoryCredentials"].readIfPresent(with: BatchClientTypes.RepositoryCredentials.read(from:))
        value.resourceRequirements = try reader["resourceRequirements"].readListIfPresent(memberReadingClosure: BatchClientTypes.ResourceRequirement.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.secrets = try reader["secrets"].readListIfPresent(memberReadingClosure: BatchClientTypes.Secret.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ulimits = try reader["ulimits"].readListIfPresent(memberReadingClosure: BatchClientTypes.Ulimit.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.user = try reader["user"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.Ulimit {

    static func write(value: BatchClientTypes.Ulimit?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["hardLimit"].write(value.hardLimit)
        try writer["name"].write(value.name)
        try writer["softLimit"].write(value.softLimit)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.Ulimit {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.Ulimit()
        value.hardLimit = try reader["hardLimit"].readIfPresent() ?? 0
        value.name = try reader["name"].readIfPresent() ?? ""
        value.softLimit = try reader["softLimit"].readIfPresent() ?? 0
        return value
    }
}

extension BatchClientTypes.Secret {

    static func write(value: BatchClientTypes.Secret?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["valueFrom"].write(value.valueFrom)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.Secret {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.Secret()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.valueFrom = try reader["valueFrom"].readIfPresent() ?? ""
        return value
    }
}

extension BatchClientTypes.ResourceRequirement {

    static func write(value: BatchClientTypes.ResourceRequirement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["type"].write(value.type)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.ResourceRequirement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.ResourceRequirement()
        value.value = try reader["value"].readIfPresent() ?? ""
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension BatchClientTypes.RepositoryCredentials {

    static func write(value: BatchClientTypes.RepositoryCredentials?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["credentialsParameter"].write(value.credentialsParameter)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.RepositoryCredentials {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.RepositoryCredentials()
        value.credentialsParameter = try reader["credentialsParameter"].readIfPresent() ?? ""
        return value
    }
}

extension BatchClientTypes.MountPoint {

    static func write(value: BatchClientTypes.MountPoint?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerPath"].write(value.containerPath)
        try writer["readOnly"].write(value.readOnly)
        try writer["sourceVolume"].write(value.sourceVolume)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.MountPoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.MountPoint()
        value.containerPath = try reader["containerPath"].readIfPresent()
        value.readOnly = try reader["readOnly"].readIfPresent()
        value.sourceVolume = try reader["sourceVolume"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.LogConfiguration {

    static func write(value: BatchClientTypes.LogConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logDriver"].write(value.logDriver)
        try writer["options"].writeMap(value.options, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["secretOptions"].writeList(value.secretOptions, memberWritingClosure: BatchClientTypes.Secret.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.LogConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.LogConfiguration()
        value.logDriver = try reader["logDriver"].readIfPresent() ?? .sdkUnknown("")
        value.options = try reader["options"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.secretOptions = try reader["secretOptions"].readListIfPresent(memberReadingClosure: BatchClientTypes.Secret.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.LinuxParameters {

    static func write(value: BatchClientTypes.LinuxParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["devices"].writeList(value.devices, memberWritingClosure: BatchClientTypes.Device.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["initProcessEnabled"].write(value.initProcessEnabled)
        try writer["maxSwap"].write(value.maxSwap)
        try writer["sharedMemorySize"].write(value.sharedMemorySize)
        try writer["swappiness"].write(value.swappiness)
        try writer["tmpfs"].writeList(value.tmpfs, memberWritingClosure: BatchClientTypes.Tmpfs.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.LinuxParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.LinuxParameters()
        value.devices = try reader["devices"].readListIfPresent(memberReadingClosure: BatchClientTypes.Device.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.initProcessEnabled = try reader["initProcessEnabled"].readIfPresent()
        value.sharedMemorySize = try reader["sharedMemorySize"].readIfPresent()
        value.tmpfs = try reader["tmpfs"].readListIfPresent(memberReadingClosure: BatchClientTypes.Tmpfs.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.maxSwap = try reader["maxSwap"].readIfPresent()
        value.swappiness = try reader["swappiness"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.Tmpfs {

    static func write(value: BatchClientTypes.Tmpfs?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerPath"].write(value.containerPath)
        try writer["mountOptions"].writeList(value.mountOptions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["size"].write(value.size)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.Tmpfs {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.Tmpfs()
        value.containerPath = try reader["containerPath"].readIfPresent() ?? ""
        value.size = try reader["size"].readIfPresent() ?? 0
        value.mountOptions = try reader["mountOptions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.Device {

    static func write(value: BatchClientTypes.Device?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerPath"].write(value.containerPath)
        try writer["hostPath"].write(value.hostPath)
        try writer["permissions"].writeList(value.permissions, memberWritingClosure: SmithyReadWrite.WritingClosureBox<BatchClientTypes.DeviceCgroupPermission>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.Device {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.Device()
        value.hostPath = try reader["hostPath"].readIfPresent() ?? ""
        value.containerPath = try reader["containerPath"].readIfPresent()
        value.permissions = try reader["permissions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<BatchClientTypes.DeviceCgroupPermission>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.KeyValuePair {

    static func write(value: BatchClientTypes.KeyValuePair?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.KeyValuePair {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.KeyValuePair()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.TaskContainerDependency {

    static func write(value: BatchClientTypes.TaskContainerDependency?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["condition"].write(value.condition)
        try writer["containerName"].write(value.containerName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.TaskContainerDependency {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.TaskContainerDependency()
        value.containerName = try reader["containerName"].readIfPresent()
        value.condition = try reader["condition"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.NodeProperties {

    static func write(value: BatchClientTypes.NodeProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["mainNode"].write(value.mainNode)
        try writer["nodeRangeProperties"].writeList(value.nodeRangeProperties, memberWritingClosure: BatchClientTypes.NodeRangeProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["numNodes"].write(value.numNodes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.NodeProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.NodeProperties()
        value.numNodes = try reader["numNodes"].readIfPresent() ?? 0
        value.mainNode = try reader["mainNode"].readIfPresent() ?? 0
        value.nodeRangeProperties = try reader["nodeRangeProperties"].readListIfPresent(memberReadingClosure: BatchClientTypes.NodeRangeProperty.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension BatchClientTypes.NodeRangeProperty {

    static func write(value: BatchClientTypes.NodeRangeProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["container"].write(value.container, with: BatchClientTypes.ContainerProperties.write(value:to:))
        try writer["ecsProperties"].write(value.ecsProperties, with: BatchClientTypes.EcsProperties.write(value:to:))
        try writer["eksProperties"].write(value.eksProperties, with: BatchClientTypes.EksProperties.write(value:to:))
        try writer["instanceTypes"].writeList(value.instanceTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["targetNodes"].write(value.targetNodes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.NodeRangeProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.NodeRangeProperty()
        value.targetNodes = try reader["targetNodes"].readIfPresent() ?? ""
        value.container = try reader["container"].readIfPresent(with: BatchClientTypes.ContainerProperties.read(from:))
        value.instanceTypes = try reader["instanceTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.ecsProperties = try reader["ecsProperties"].readIfPresent(with: BatchClientTypes.EcsProperties.read(from:))
        value.eksProperties = try reader["eksProperties"].readIfPresent(with: BatchClientTypes.EksProperties.read(from:))
        return value
    }
}

extension BatchClientTypes.ContainerProperties {

    static func write(value: BatchClientTypes.ContainerProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["command"].writeList(value.command, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["environment"].writeList(value.environment, memberWritingClosure: BatchClientTypes.KeyValuePair.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ephemeralStorage"].write(value.ephemeralStorage, with: BatchClientTypes.EphemeralStorage.write(value:to:))
        try writer["executionRoleArn"].write(value.executionRoleArn)
        try writer["fargatePlatformConfiguration"].write(value.fargatePlatformConfiguration, with: BatchClientTypes.FargatePlatformConfiguration.write(value:to:))
        try writer["image"].write(value.image)
        try writer["instanceType"].write(value.instanceType)
        try writer["jobRoleArn"].write(value.jobRoleArn)
        try writer["linuxParameters"].write(value.linuxParameters, with: BatchClientTypes.LinuxParameters.write(value:to:))
        try writer["logConfiguration"].write(value.logConfiguration, with: BatchClientTypes.LogConfiguration.write(value:to:))
        try writer["memory"].write(value.memory)
        try writer["mountPoints"].writeList(value.mountPoints, memberWritingClosure: BatchClientTypes.MountPoint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["networkConfiguration"].write(value.networkConfiguration, with: BatchClientTypes.NetworkConfiguration.write(value:to:))
        try writer["privileged"].write(value.privileged)
        try writer["readonlyRootFilesystem"].write(value.readonlyRootFilesystem)
        try writer["repositoryCredentials"].write(value.repositoryCredentials, with: BatchClientTypes.RepositoryCredentials.write(value:to:))
        try writer["resourceRequirements"].writeList(value.resourceRequirements, memberWritingClosure: BatchClientTypes.ResourceRequirement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["runtimePlatform"].write(value.runtimePlatform, with: BatchClientTypes.RuntimePlatform.write(value:to:))
        try writer["secrets"].writeList(value.secrets, memberWritingClosure: BatchClientTypes.Secret.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ulimits"].writeList(value.ulimits, memberWritingClosure: BatchClientTypes.Ulimit.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["user"].write(value.user)
        try writer["vcpus"].write(value.vcpus)
        try writer["volumes"].writeList(value.volumes, memberWritingClosure: BatchClientTypes.Volume.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.ContainerProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.ContainerProperties()
        value.image = try reader["image"].readIfPresent()
        value.vcpus = try reader["vcpus"].readIfPresent()
        value.memory = try reader["memory"].readIfPresent()
        value.command = try reader["command"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.jobRoleArn = try reader["jobRoleArn"].readIfPresent()
        value.executionRoleArn = try reader["executionRoleArn"].readIfPresent()
        value.volumes = try reader["volumes"].readListIfPresent(memberReadingClosure: BatchClientTypes.Volume.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.environment = try reader["environment"].readListIfPresent(memberReadingClosure: BatchClientTypes.KeyValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.mountPoints = try reader["mountPoints"].readListIfPresent(memberReadingClosure: BatchClientTypes.MountPoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.readonlyRootFilesystem = try reader["readonlyRootFilesystem"].readIfPresent()
        value.privileged = try reader["privileged"].readIfPresent()
        value.ulimits = try reader["ulimits"].readListIfPresent(memberReadingClosure: BatchClientTypes.Ulimit.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.user = try reader["user"].readIfPresent()
        value.instanceType = try reader["instanceType"].readIfPresent()
        value.resourceRequirements = try reader["resourceRequirements"].readListIfPresent(memberReadingClosure: BatchClientTypes.ResourceRequirement.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.linuxParameters = try reader["linuxParameters"].readIfPresent(with: BatchClientTypes.LinuxParameters.read(from:))
        value.logConfiguration = try reader["logConfiguration"].readIfPresent(with: BatchClientTypes.LogConfiguration.read(from:))
        value.secrets = try reader["secrets"].readListIfPresent(memberReadingClosure: BatchClientTypes.Secret.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.networkConfiguration = try reader["networkConfiguration"].readIfPresent(with: BatchClientTypes.NetworkConfiguration.read(from:))
        value.fargatePlatformConfiguration = try reader["fargatePlatformConfiguration"].readIfPresent(with: BatchClientTypes.FargatePlatformConfiguration.read(from:))
        value.ephemeralStorage = try reader["ephemeralStorage"].readIfPresent(with: BatchClientTypes.EphemeralStorage.read(from:))
        value.runtimePlatform = try reader["runtimePlatform"].readIfPresent(with: BatchClientTypes.RuntimePlatform.read(from:))
        value.repositoryCredentials = try reader["repositoryCredentials"].readIfPresent(with: BatchClientTypes.RepositoryCredentials.read(from:))
        return value
    }
}

extension BatchClientTypes.FargatePlatformConfiguration {

    static func write(value: BatchClientTypes.FargatePlatformConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["platformVersion"].write(value.platformVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.FargatePlatformConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.FargatePlatformConfiguration()
        value.platformVersion = try reader["platformVersion"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.JobTimeout {

    static func write(value: BatchClientTypes.JobTimeout?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attemptDurationSeconds"].write(value.attemptDurationSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.JobTimeout {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.JobTimeout()
        value.attemptDurationSeconds = try reader["attemptDurationSeconds"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.RetryStrategy {

    static func write(value: BatchClientTypes.RetryStrategy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attempts"].write(value.attempts)
        try writer["evaluateOnExit"].writeList(value.evaluateOnExit, memberWritingClosure: BatchClientTypes.EvaluateOnExit.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.RetryStrategy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.RetryStrategy()
        value.attempts = try reader["attempts"].readIfPresent()
        value.evaluateOnExit = try reader["evaluateOnExit"].readListIfPresent(memberReadingClosure: BatchClientTypes.EvaluateOnExit.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.EvaluateOnExit {

    static func write(value: BatchClientTypes.EvaluateOnExit?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["action"].write(value.action)
        try writer["onExitCode"].write(value.onExitCode)
        try writer["onReason"].write(value.onReason)
        try writer["onStatusReason"].write(value.onStatusReason)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EvaluateOnExit {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EvaluateOnExit()
        value.onStatusReason = try reader["onStatusReason"].readIfPresent()
        value.onReason = try reader["onReason"].readIfPresent()
        value.onExitCode = try reader["onExitCode"].readIfPresent()
        value.action = try reader["action"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension BatchClientTypes.JobQueueDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.JobQueueDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.JobQueueDetail()
        value.jobQueueName = try reader["jobQueueName"].readIfPresent() ?? ""
        value.jobQueueArn = try reader["jobQueueArn"].readIfPresent() ?? ""
        value.state = try reader["state"].readIfPresent() ?? .sdkUnknown("")
        value.schedulingPolicyArn = try reader["schedulingPolicyArn"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusReason = try reader["statusReason"].readIfPresent()
        value.priority = try reader["priority"].readIfPresent() ?? 0
        value.computeEnvironmentOrder = try reader["computeEnvironmentOrder"].readListIfPresent(memberReadingClosure: BatchClientTypes.ComputeEnvironmentOrder.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.jobStateTimeLimitActions = try reader["jobStateTimeLimitActions"].readListIfPresent(memberReadingClosure: BatchClientTypes.JobStateTimeLimitAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.JobStateTimeLimitAction {

    static func write(value: BatchClientTypes.JobStateTimeLimitAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["action"].write(value.action)
        try writer["maxTimeSeconds"].write(value.maxTimeSeconds)
        try writer["reason"].write(value.reason)
        try writer["state"].write(value.state)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.JobStateTimeLimitAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.JobStateTimeLimitAction()
        value.reason = try reader["reason"].readIfPresent() ?? ""
        value.state = try reader["state"].readIfPresent() ?? .sdkUnknown("")
        value.maxTimeSeconds = try reader["maxTimeSeconds"].readIfPresent() ?? 0
        value.action = try reader["action"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension BatchClientTypes.ComputeEnvironmentOrder {

    static func write(value: BatchClientTypes.ComputeEnvironmentOrder?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["computeEnvironment"].write(value.computeEnvironment)
        try writer["order"].write(value.order)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.ComputeEnvironmentOrder {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.ComputeEnvironmentOrder()
        value.order = try reader["order"].readIfPresent() ?? 0
        value.computeEnvironment = try reader["computeEnvironment"].readIfPresent() ?? ""
        return value
    }
}

extension BatchClientTypes.JobDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.JobDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.JobDetail()
        value.jobArn = try reader["jobArn"].readIfPresent()
        value.jobName = try reader["jobName"].readIfPresent() ?? ""
        value.jobId = try reader["jobId"].readIfPresent() ?? ""
        value.jobQueue = try reader["jobQueue"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.shareIdentifier = try reader["shareIdentifier"].readIfPresent()
        value.schedulingPriority = try reader["schedulingPriority"].readIfPresent()
        value.attempts = try reader["attempts"].readListIfPresent(memberReadingClosure: BatchClientTypes.AttemptDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.statusReason = try reader["statusReason"].readIfPresent()
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.retryStrategy = try reader["retryStrategy"].readIfPresent(with: BatchClientTypes.RetryStrategy.read(from:))
        value.startedAt = try reader["startedAt"].readIfPresent() ?? 0
        value.stoppedAt = try reader["stoppedAt"].readIfPresent()
        value.dependsOn = try reader["dependsOn"].readListIfPresent(memberReadingClosure: BatchClientTypes.JobDependency.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.jobDefinition = try reader["jobDefinition"].readIfPresent() ?? ""
        value.parameters = try reader["parameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.container = try reader["container"].readIfPresent(with: BatchClientTypes.ContainerDetail.read(from:))
        value.nodeDetails = try reader["nodeDetails"].readIfPresent(with: BatchClientTypes.NodeDetails.read(from:))
        value.nodeProperties = try reader["nodeProperties"].readIfPresent(with: BatchClientTypes.NodeProperties.read(from:))
        value.arrayProperties = try reader["arrayProperties"].readIfPresent(with: BatchClientTypes.ArrayPropertiesDetail.read(from:))
        value.timeout = try reader["timeout"].readIfPresent(with: BatchClientTypes.JobTimeout.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.propagateTags = try reader["propagateTags"].readIfPresent()
        value.platformCapabilities = try reader["platformCapabilities"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<BatchClientTypes.PlatformCapability>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.eksProperties = try reader["eksProperties"].readIfPresent(with: BatchClientTypes.EksPropertiesDetail.read(from:))
        value.eksAttempts = try reader["eksAttempts"].readListIfPresent(memberReadingClosure: BatchClientTypes.EksAttemptDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ecsProperties = try reader["ecsProperties"].readIfPresent(with: BatchClientTypes.EcsPropertiesDetail.read(from:))
        value.isCancelled = try reader["isCancelled"].readIfPresent()
        value.isTerminated = try reader["isTerminated"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EcsPropertiesDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EcsPropertiesDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EcsPropertiesDetail()
        value.taskProperties = try reader["taskProperties"].readListIfPresent(memberReadingClosure: BatchClientTypes.EcsTaskDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.EcsTaskDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EcsTaskDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EcsTaskDetails()
        value.containers = try reader["containers"].readListIfPresent(memberReadingClosure: BatchClientTypes.TaskContainerDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.containerInstanceArn = try reader["containerInstanceArn"].readIfPresent()
        value.taskArn = try reader["taskArn"].readIfPresent()
        value.ephemeralStorage = try reader["ephemeralStorage"].readIfPresent(with: BatchClientTypes.EphemeralStorage.read(from:))
        value.executionRoleArn = try reader["executionRoleArn"].readIfPresent()
        value.platformVersion = try reader["platformVersion"].readIfPresent()
        value.ipcMode = try reader["ipcMode"].readIfPresent()
        value.taskRoleArn = try reader["taskRoleArn"].readIfPresent()
        value.pidMode = try reader["pidMode"].readIfPresent()
        value.networkConfiguration = try reader["networkConfiguration"].readIfPresent(with: BatchClientTypes.NetworkConfiguration.read(from:))
        value.runtimePlatform = try reader["runtimePlatform"].readIfPresent(with: BatchClientTypes.RuntimePlatform.read(from:))
        value.volumes = try reader["volumes"].readListIfPresent(memberReadingClosure: BatchClientTypes.Volume.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.TaskContainerDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.TaskContainerDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.TaskContainerDetails()
        value.command = try reader["command"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.dependsOn = try reader["dependsOn"].readListIfPresent(memberReadingClosure: BatchClientTypes.TaskContainerDependency.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.environment = try reader["environment"].readListIfPresent(memberReadingClosure: BatchClientTypes.KeyValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.essential = try reader["essential"].readIfPresent()
        value.image = try reader["image"].readIfPresent()
        value.linuxParameters = try reader["linuxParameters"].readIfPresent(with: BatchClientTypes.LinuxParameters.read(from:))
        value.logConfiguration = try reader["logConfiguration"].readIfPresent(with: BatchClientTypes.LogConfiguration.read(from:))
        value.mountPoints = try reader["mountPoints"].readListIfPresent(memberReadingClosure: BatchClientTypes.MountPoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["name"].readIfPresent()
        value.privileged = try reader["privileged"].readIfPresent()
        value.readonlyRootFilesystem = try reader["readonlyRootFilesystem"].readIfPresent()
        value.repositoryCredentials = try reader["repositoryCredentials"].readIfPresent(with: BatchClientTypes.RepositoryCredentials.read(from:))
        value.resourceRequirements = try reader["resourceRequirements"].readListIfPresent(memberReadingClosure: BatchClientTypes.ResourceRequirement.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.secrets = try reader["secrets"].readListIfPresent(memberReadingClosure: BatchClientTypes.Secret.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ulimits = try reader["ulimits"].readListIfPresent(memberReadingClosure: BatchClientTypes.Ulimit.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.user = try reader["user"].readIfPresent()
        value.exitCode = try reader["exitCode"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        value.logStreamName = try reader["logStreamName"].readIfPresent()
        value.networkInterfaces = try reader["networkInterfaces"].readListIfPresent(memberReadingClosure: BatchClientTypes.NetworkInterface.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.NetworkInterface {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.NetworkInterface {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.NetworkInterface()
        value.attachmentId = try reader["attachmentId"].readIfPresent()
        value.ipv6Address = try reader["ipv6Address"].readIfPresent()
        value.privateIpv4Address = try reader["privateIpv4Address"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EksAttemptDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksAttemptDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksAttemptDetail()
        value.containers = try reader["containers"].readListIfPresent(memberReadingClosure: BatchClientTypes.EksAttemptContainerDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.initContainers = try reader["initContainers"].readListIfPresent(memberReadingClosure: BatchClientTypes.EksAttemptContainerDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.eksClusterArn = try reader["eksClusterArn"].readIfPresent()
        value.podName = try reader["podName"].readIfPresent()
        value.nodeName = try reader["nodeName"].readIfPresent()
        value.startedAt = try reader["startedAt"].readIfPresent()
        value.stoppedAt = try reader["stoppedAt"].readIfPresent()
        value.statusReason = try reader["statusReason"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EksAttemptContainerDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksAttemptContainerDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksAttemptContainerDetail()
        value.name = try reader["name"].readIfPresent()
        value.exitCode = try reader["exitCode"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EksPropertiesDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksPropertiesDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksPropertiesDetail()
        value.podProperties = try reader["podProperties"].readIfPresent(with: BatchClientTypes.EksPodPropertiesDetail.read(from:))
        return value
    }
}

extension BatchClientTypes.EksPodPropertiesDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksPodPropertiesDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksPodPropertiesDetail()
        value.serviceAccountName = try reader["serviceAccountName"].readIfPresent()
        value.hostNetwork = try reader["hostNetwork"].readIfPresent()
        value.dnsPolicy = try reader["dnsPolicy"].readIfPresent()
        value.imagePullSecrets = try reader["imagePullSecrets"].readListIfPresent(memberReadingClosure: BatchClientTypes.ImagePullSecret.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.containers = try reader["containers"].readListIfPresent(memberReadingClosure: BatchClientTypes.EksContainerDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.initContainers = try reader["initContainers"].readListIfPresent(memberReadingClosure: BatchClientTypes.EksContainerDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.volumes = try reader["volumes"].readListIfPresent(memberReadingClosure: BatchClientTypes.EksVolume.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.podName = try reader["podName"].readIfPresent()
        value.nodeName = try reader["nodeName"].readIfPresent()
        value.metadata = try reader["metadata"].readIfPresent(with: BatchClientTypes.EksMetadata.read(from:))
        value.shareProcessNamespace = try reader["shareProcessNamespace"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.EksContainerDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.EksContainerDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.EksContainerDetail()
        value.name = try reader["name"].readIfPresent()
        value.image = try reader["image"].readIfPresent()
        value.imagePullPolicy = try reader["imagePullPolicy"].readIfPresent()
        value.command = try reader["command"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.args = try reader["args"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.env = try reader["env"].readListIfPresent(memberReadingClosure: BatchClientTypes.EksContainerEnvironmentVariable.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.resources = try reader["resources"].readIfPresent(with: BatchClientTypes.EksContainerResourceRequirements.read(from:))
        value.exitCode = try reader["exitCode"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        value.volumeMounts = try reader["volumeMounts"].readListIfPresent(memberReadingClosure: BatchClientTypes.EksContainerVolumeMount.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.securityContext = try reader["securityContext"].readIfPresent(with: BatchClientTypes.EksContainerSecurityContext.read(from:))
        return value
    }
}

extension BatchClientTypes.ArrayPropertiesDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.ArrayPropertiesDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.ArrayPropertiesDetail()
        value.statusSummary = try reader["statusSummary"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.size = try reader["size"].readIfPresent()
        value.index = try reader["index"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.NodeDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.NodeDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.NodeDetails()
        value.nodeIndex = try reader["nodeIndex"].readIfPresent()
        value.isMainNode = try reader["isMainNode"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.ContainerDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.ContainerDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.ContainerDetail()
        value.image = try reader["image"].readIfPresent()
        value.vcpus = try reader["vcpus"].readIfPresent()
        value.memory = try reader["memory"].readIfPresent()
        value.command = try reader["command"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.jobRoleArn = try reader["jobRoleArn"].readIfPresent()
        value.executionRoleArn = try reader["executionRoleArn"].readIfPresent()
        value.volumes = try reader["volumes"].readListIfPresent(memberReadingClosure: BatchClientTypes.Volume.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.environment = try reader["environment"].readListIfPresent(memberReadingClosure: BatchClientTypes.KeyValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.mountPoints = try reader["mountPoints"].readListIfPresent(memberReadingClosure: BatchClientTypes.MountPoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.readonlyRootFilesystem = try reader["readonlyRootFilesystem"].readIfPresent()
        value.ulimits = try reader["ulimits"].readListIfPresent(memberReadingClosure: BatchClientTypes.Ulimit.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.privileged = try reader["privileged"].readIfPresent()
        value.user = try reader["user"].readIfPresent()
        value.exitCode = try reader["exitCode"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        value.containerInstanceArn = try reader["containerInstanceArn"].readIfPresent()
        value.taskArn = try reader["taskArn"].readIfPresent()
        value.logStreamName = try reader["logStreamName"].readIfPresent()
        value.instanceType = try reader["instanceType"].readIfPresent()
        value.networkInterfaces = try reader["networkInterfaces"].readListIfPresent(memberReadingClosure: BatchClientTypes.NetworkInterface.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.resourceRequirements = try reader["resourceRequirements"].readListIfPresent(memberReadingClosure: BatchClientTypes.ResourceRequirement.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.linuxParameters = try reader["linuxParameters"].readIfPresent(with: BatchClientTypes.LinuxParameters.read(from:))
        value.logConfiguration = try reader["logConfiguration"].readIfPresent(with: BatchClientTypes.LogConfiguration.read(from:))
        value.secrets = try reader["secrets"].readListIfPresent(memberReadingClosure: BatchClientTypes.Secret.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.networkConfiguration = try reader["networkConfiguration"].readIfPresent(with: BatchClientTypes.NetworkConfiguration.read(from:))
        value.fargatePlatformConfiguration = try reader["fargatePlatformConfiguration"].readIfPresent(with: BatchClientTypes.FargatePlatformConfiguration.read(from:))
        value.ephemeralStorage = try reader["ephemeralStorage"].readIfPresent(with: BatchClientTypes.EphemeralStorage.read(from:))
        value.runtimePlatform = try reader["runtimePlatform"].readIfPresent(with: BatchClientTypes.RuntimePlatform.read(from:))
        value.repositoryCredentials = try reader["repositoryCredentials"].readIfPresent(with: BatchClientTypes.RepositoryCredentials.read(from:))
        return value
    }
}

extension BatchClientTypes.JobDependency {

    static func write(value: BatchClientTypes.JobDependency?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobId"].write(value.jobId)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.JobDependency {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.JobDependency()
        value.jobId = try reader["jobId"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.AttemptDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.AttemptDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.AttemptDetail()
        value.container = try reader["container"].readIfPresent(with: BatchClientTypes.AttemptContainerDetail.read(from:))
        value.startedAt = try reader["startedAt"].readIfPresent()
        value.stoppedAt = try reader["stoppedAt"].readIfPresent()
        value.statusReason = try reader["statusReason"].readIfPresent()
        value.taskProperties = try reader["taskProperties"].readListIfPresent(memberReadingClosure: BatchClientTypes.AttemptEcsTaskDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.AttemptEcsTaskDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.AttemptEcsTaskDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.AttemptEcsTaskDetails()
        value.containerInstanceArn = try reader["containerInstanceArn"].readIfPresent()
        value.taskArn = try reader["taskArn"].readIfPresent()
        value.containers = try reader["containers"].readListIfPresent(memberReadingClosure: BatchClientTypes.AttemptTaskContainerDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.AttemptTaskContainerDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.AttemptTaskContainerDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.AttemptTaskContainerDetails()
        value.exitCode = try reader["exitCode"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        value.logStreamName = try reader["logStreamName"].readIfPresent()
        value.networkInterfaces = try reader["networkInterfaces"].readListIfPresent(memberReadingClosure: BatchClientTypes.NetworkInterface.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.AttemptContainerDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.AttemptContainerDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.AttemptContainerDetail()
        value.containerInstanceArn = try reader["containerInstanceArn"].readIfPresent()
        value.taskArn = try reader["taskArn"].readIfPresent()
        value.exitCode = try reader["exitCode"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        value.logStreamName = try reader["logStreamName"].readIfPresent()
        value.networkInterfaces = try reader["networkInterfaces"].readListIfPresent(memberReadingClosure: BatchClientTypes.NetworkInterface.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.SchedulingPolicyDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.SchedulingPolicyDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.SchedulingPolicyDetail()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.fairsharePolicy = try reader["fairsharePolicy"].readIfPresent(with: BatchClientTypes.FairsharePolicy.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.FairsharePolicy {

    static func write(value: BatchClientTypes.FairsharePolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["computeReservation"].write(value.computeReservation)
        try writer["shareDecaySeconds"].write(value.shareDecaySeconds)
        try writer["shareDistribution"].writeList(value.shareDistribution, memberWritingClosure: BatchClientTypes.ShareAttributes.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.FairsharePolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.FairsharePolicy()
        value.shareDecaySeconds = try reader["shareDecaySeconds"].readIfPresent()
        value.computeReservation = try reader["computeReservation"].readIfPresent()
        value.shareDistribution = try reader["shareDistribution"].readListIfPresent(memberReadingClosure: BatchClientTypes.ShareAttributes.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchClientTypes.ShareAttributes {

    static func write(value: BatchClientTypes.ShareAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["shareIdentifier"].write(value.shareIdentifier)
        try writer["weightFactor"].write(value.weightFactor)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.ShareAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.ShareAttributes()
        value.shareIdentifier = try reader["shareIdentifier"].readIfPresent() ?? ""
        value.weightFactor = try reader["weightFactor"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.FrontOfQueueDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.FrontOfQueueDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.FrontOfQueueDetail()
        value.jobs = try reader["jobs"].readListIfPresent(memberReadingClosure: BatchClientTypes.FrontOfQueueJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastUpdatedAt = try reader["lastUpdatedAt"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.FrontOfQueueJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.FrontOfQueueJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.FrontOfQueueJobSummary()
        value.jobArn = try reader["jobArn"].readIfPresent()
        value.earliestTimeAtPosition = try reader["earliestTimeAtPosition"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.JobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.JobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.JobSummary()
        value.jobArn = try reader["jobArn"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent() ?? ""
        value.jobName = try reader["jobName"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusReason = try reader["statusReason"].readIfPresent()
        value.startedAt = try reader["startedAt"].readIfPresent()
        value.stoppedAt = try reader["stoppedAt"].readIfPresent()
        value.container = try reader["container"].readIfPresent(with: BatchClientTypes.ContainerSummary.read(from:))
        value.arrayProperties = try reader["arrayProperties"].readIfPresent(with: BatchClientTypes.ArrayPropertiesSummary.read(from:))
        value.nodeProperties = try reader["nodeProperties"].readIfPresent(with: BatchClientTypes.NodePropertiesSummary.read(from:))
        value.jobDefinition = try reader["jobDefinition"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.NodePropertiesSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.NodePropertiesSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.NodePropertiesSummary()
        value.isMainNode = try reader["isMainNode"].readIfPresent()
        value.numNodes = try reader["numNodes"].readIfPresent()
        value.nodeIndex = try reader["nodeIndex"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.ArrayPropertiesSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.ArrayPropertiesSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.ArrayPropertiesSummary()
        value.size = try reader["size"].readIfPresent()
        value.index = try reader["index"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.ContainerSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.ContainerSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.ContainerSummary()
        value.exitCode = try reader["exitCode"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        return value
    }
}

extension BatchClientTypes.SchedulingPolicyListingDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> BatchClientTypes.SchedulingPolicyListingDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = BatchClientTypes.SchedulingPolicyListingDetail()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        return value
    }
}

extension BatchClientTypes.KeyValuesPair {

    static func write(value: BatchClientTypes.KeyValuesPair?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchClientTypes.ArrayProperties {

    static func write(value: BatchClientTypes.ArrayProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["size"].write(value.size)
    }
}

extension BatchClientTypes.ContainerOverrides {

    static func write(value: BatchClientTypes.ContainerOverrides?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["command"].writeList(value.command, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["environment"].writeList(value.environment, memberWritingClosure: BatchClientTypes.KeyValuePair.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["instanceType"].write(value.instanceType)
        try writer["memory"].write(value.memory)
        try writer["resourceRequirements"].writeList(value.resourceRequirements, memberWritingClosure: BatchClientTypes.ResourceRequirement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["vcpus"].write(value.vcpus)
    }
}

extension BatchClientTypes.NodeOverrides {

    static func write(value: BatchClientTypes.NodeOverrides?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nodePropertyOverrides"].writeList(value.nodePropertyOverrides, memberWritingClosure: BatchClientTypes.NodePropertyOverride.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["numNodes"].write(value.numNodes)
    }
}

extension BatchClientTypes.NodePropertyOverride {

    static func write(value: BatchClientTypes.NodePropertyOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerOverrides"].write(value.containerOverrides, with: BatchClientTypes.ContainerOverrides.write(value:to:))
        try writer["ecsPropertiesOverride"].write(value.ecsPropertiesOverride, with: BatchClientTypes.EcsPropertiesOverride.write(value:to:))
        try writer["eksPropertiesOverride"].write(value.eksPropertiesOverride, with: BatchClientTypes.EksPropertiesOverride.write(value:to:))
        try writer["instanceTypes"].writeList(value.instanceTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["targetNodes"].write(value.targetNodes)
    }
}

extension BatchClientTypes.EksPropertiesOverride {

    static func write(value: BatchClientTypes.EksPropertiesOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["podProperties"].write(value.podProperties, with: BatchClientTypes.EksPodPropertiesOverride.write(value:to:))
    }
}

extension BatchClientTypes.EksPodPropertiesOverride {

    static func write(value: BatchClientTypes.EksPodPropertiesOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containers"].writeList(value.containers, memberWritingClosure: BatchClientTypes.EksContainerOverride.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["initContainers"].writeList(value.initContainers, memberWritingClosure: BatchClientTypes.EksContainerOverride.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["metadata"].write(value.metadata, with: BatchClientTypes.EksMetadata.write(value:to:))
    }
}

extension BatchClientTypes.EksContainerOverride {

    static func write(value: BatchClientTypes.EksContainerOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["args"].writeList(value.args, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["command"].writeList(value.command, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["env"].writeList(value.env, memberWritingClosure: BatchClientTypes.EksContainerEnvironmentVariable.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["image"].write(value.image)
        try writer["name"].write(value.name)
        try writer["resources"].write(value.resources, with: BatchClientTypes.EksContainerResourceRequirements.write(value:to:))
    }
}

extension BatchClientTypes.EcsPropertiesOverride {

    static func write(value: BatchClientTypes.EcsPropertiesOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["taskProperties"].writeList(value.taskProperties, memberWritingClosure: BatchClientTypes.TaskPropertiesOverride.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchClientTypes.TaskPropertiesOverride {

    static func write(value: BatchClientTypes.TaskPropertiesOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containers"].writeList(value.containers, memberWritingClosure: BatchClientTypes.TaskContainerOverrides.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchClientTypes.TaskContainerOverrides {

    static func write(value: BatchClientTypes.TaskContainerOverrides?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["command"].writeList(value.command, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["environment"].writeList(value.environment, memberWritingClosure: BatchClientTypes.KeyValuePair.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["resourceRequirements"].writeList(value.resourceRequirements, memberWritingClosure: BatchClientTypes.ResourceRequirement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchClientTypes.ComputeResourceUpdate {

    static func write(value: BatchClientTypes.ComputeResourceUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allocationStrategy"].write(value.allocationStrategy)
        try writer["bidPercentage"].write(value.bidPercentage)
        try writer["desiredvCpus"].write(value.desiredvCpus)
        try writer["ec2Configuration"].writeList(value.ec2Configuration, memberWritingClosure: BatchClientTypes.Ec2Configuration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ec2KeyPair"].write(value.ec2KeyPair)
        try writer["imageId"].write(value.imageId)
        try writer["instanceRole"].write(value.instanceRole)
        try writer["instanceTypes"].writeList(value.instanceTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["launchTemplate"].write(value.launchTemplate, with: BatchClientTypes.LaunchTemplateSpecification.write(value:to:))
        try writer["maxvCpus"].write(value.maxvCpus)
        try writer["minvCpus"].write(value.minvCpus)
        try writer["placementGroup"].write(value.placementGroup)
        try writer["securityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["type"].write(value.type)
        try writer["updateToLatestImageVersion"].write(value.updateToLatestImageVersion)
    }
}

public enum BatchClientTypes {}
