// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension BatchClientTypes {
    public enum ArrayJobDependency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case nToN
        case sequential
        case sdkUnknown(Swift.String)

        public static var allCases: [ArrayJobDependency] {
            return [
                .nToN,
                .sequential,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .nToN: return "N_TO_N"
            case .sequential: return "SEQUENTIAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ArrayJobDependency(rawValue: rawValue) ?? ArrayJobDependency.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.ArrayProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case size
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let size = self.size {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size)
        size = sizeDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents an Batch array job.
    public struct ArrayProperties: Swift.Equatable {
        /// The size of the array job.
        public var size: Swift.Int?

        public init (
            size: Swift.Int? = nil
        )
        {
            self.size = size
        }
    }

}

extension BatchClientTypes.ArrayPropertiesDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case index
        case size
        case statusSummary
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let index = self.index {
            try encodeContainer.encode(index, forKey: .index)
        }
        if let size = self.size {
            try encodeContainer.encode(size, forKey: .size)
        }
        if let statusSummary = statusSummary {
            var statusSummaryContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .statusSummary)
            for (dictKey0, arrayJobStatusSummary0) in statusSummary {
                try statusSummaryContainer.encode(arrayJobStatusSummary0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusSummaryContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .statusSummary)
        var statusSummaryDecoded0: [Swift.String:Swift.Int]? = nil
        if let statusSummaryContainer = statusSummaryContainer {
            statusSummaryDecoded0 = [Swift.String:Swift.Int]()
            for (key0, integer0) in statusSummaryContainer {
                if let integer0 = integer0 {
                    statusSummaryDecoded0?[key0] = integer0
                }
            }
        }
        statusSummary = statusSummaryDecoded0
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index)
        index = indexDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents the array properties of a job.
    public struct ArrayPropertiesDetail: Swift.Equatable {
        /// The job index within the array that's associated with this job. This parameter is returned for array job children.
        public var index: Swift.Int?
        /// The size of the array job. This parameter is returned for parent array jobs.
        public var size: Swift.Int?
        /// A summary of the number of array job children in each available job status. This parameter is returned for parent array jobs.
        public var statusSummary: [Swift.String:Swift.Int]?

        public init (
            index: Swift.Int? = nil,
            size: Swift.Int? = nil,
            statusSummary: [Swift.String:Swift.Int]? = nil
        )
        {
            self.index = index
            self.size = size
            self.statusSummary = statusSummary
        }
    }

}

extension BatchClientTypes.ArrayPropertiesSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case index
        case size
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let index = self.index {
            try encodeContainer.encode(index, forKey: .index)
        }
        if let size = self.size {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index)
        index = indexDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents the array properties of a job.
    public struct ArrayPropertiesSummary: Swift.Equatable {
        /// The job index within the array that's associated with this job. This parameter is returned for children of array jobs.
        public var index: Swift.Int?
        /// The size of the array job. This parameter is returned for parent array jobs.
        public var size: Swift.Int?

        public init (
            index: Swift.Int? = nil,
            size: Swift.Int? = nil
        )
        {
            self.index = index
            self.size = size
        }
    }

}

extension BatchClientTypes {
    public enum AssignPublicIp: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AssignPublicIp] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AssignPublicIp(rawValue: rawValue) ?? AssignPublicIp.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.AttemptContainerDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerInstanceArn
        case exitCode
        case logStreamName
        case networkInterfaces
        case reason
        case taskArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerInstanceArn = self.containerInstanceArn {
            try encodeContainer.encode(containerInstanceArn, forKey: .containerInstanceArn)
        }
        if let exitCode = self.exitCode {
            try encodeContainer.encode(exitCode, forKey: .exitCode)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let networkInterfaces = networkInterfaces {
            var networkInterfacesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaces)
            for networkinterface0 in networkInterfaces {
                try networkInterfacesContainer.encode(networkinterface0)
            }
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let taskArn = self.taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerInstanceArn)
        containerInstanceArn = containerInstanceArnDecoded
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let exitCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .exitCode)
        exitCode = exitCodeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let networkInterfacesContainer = try containerValues.decodeIfPresent([BatchClientTypes.NetworkInterface?].self, forKey: .networkInterfaces)
        var networkInterfacesDecoded0:[BatchClientTypes.NetworkInterface]? = nil
        if let networkInterfacesContainer = networkInterfacesContainer {
            networkInterfacesDecoded0 = [BatchClientTypes.NetworkInterface]()
            for structure0 in networkInterfacesContainer {
                if let structure0 = structure0 {
                    networkInterfacesDecoded0?.append(structure0)
                }
            }
        }
        networkInterfaces = networkInterfacesDecoded0
    }
}

extension BatchClientTypes {
    /// An object that represents the details of a container that's part of a job attempt.
    public struct AttemptContainerDetail: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon ECS container instance that hosts the job attempt.
        public var containerInstanceArn: Swift.String?
        /// The exit code for the job attempt. A non-zero exit code is considered failed.
        public var exitCode: Swift.Int?
        /// The name of the CloudWatch Logs log stream that's associated with the container. The log group for Batch jobs is /aws/batch/job. Each container attempt receives a log stream name when they reach the RUNNING status.
        public var logStreamName: Swift.String?
        /// The network interfaces that are associated with the job attempt.
        public var networkInterfaces: [BatchClientTypes.NetworkInterface]?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public var reason: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon ECS task that's associated with the job attempt. Each container attempt receives a task ARN when they reach the STARTING status.
        public var taskArn: Swift.String?

        public init (
            containerInstanceArn: Swift.String? = nil,
            exitCode: Swift.Int? = nil,
            logStreamName: Swift.String? = nil,
            networkInterfaces: [BatchClientTypes.NetworkInterface]? = nil,
            reason: Swift.String? = nil,
            taskArn: Swift.String? = nil
        )
        {
            self.containerInstanceArn = containerInstanceArn
            self.exitCode = exitCode
            self.logStreamName = logStreamName
            self.networkInterfaces = networkInterfaces
            self.reason = reason
            self.taskArn = taskArn
        }
    }

}

extension BatchClientTypes.AttemptDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case container
        case startedAt
        case statusReason
        case stoppedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let container = self.container {
            try encodeContainer.encode(container, forKey: .container)
        }
        if let startedAt = self.startedAt {
            try encodeContainer.encode(startedAt, forKey: .startedAt)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let stoppedAt = self.stoppedAt {
            try encodeContainer.encode(stoppedAt, forKey: .stoppedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerDecoded = try containerValues.decodeIfPresent(BatchClientTypes.AttemptContainerDetail.self, forKey: .container)
        container = containerDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let stoppedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stoppedAt)
        stoppedAt = stoppedAtDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents a job attempt.
    public struct AttemptDetail: Swift.Equatable {
        /// The details for the container in this job attempt.
        public var container: BatchClientTypes.AttemptContainerDetail?
        /// The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the STARTING state to the RUNNING state).
        public var startedAt: Swift.Int?
        /// A short, human-readable string to provide additional details for the current status of the job attempt.
        public var statusReason: Swift.String?
        /// The Unix timestamp (in milliseconds) for when the attempt was stopped (when the attempt transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED).
        public var stoppedAt: Swift.Int?

        public init (
            container: BatchClientTypes.AttemptContainerDetail? = nil,
            startedAt: Swift.Int? = nil,
            statusReason: Swift.String? = nil,
            stoppedAt: Swift.Int? = nil
        )
        {
            self.container = container
            self.startedAt = startedAt
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
        }
    }

}

extension BatchClientTypes {
    public enum CEState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CEState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CEState(rawValue: rawValue) ?? CEState.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum CEStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creating
        case deleted
        case deleting
        case invalid
        case updating
        case valid
        case sdkUnknown(Swift.String)

        public static var allCases: [CEStatus] {
            return [
                .creating,
                .deleted,
                .deleting,
                .invalid,
                .updating,
                .valid,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .invalid: return "INVALID"
            case .updating: return "UPDATING"
            case .valid: return "VALID"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CEStatus(rawValue: rawValue) ?? CEStatus.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum CEType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case managed
        case unmanaged
        case sdkUnknown(Swift.String)

        public static var allCases: [CEType] {
            return [
                .managed,
                .unmanaged,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .managed: return "MANAGED"
            case .unmanaged: return "UNMANAGED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CEType(rawValue: rawValue) ?? CEType.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum CRAllocationStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bestFit
        case bestFitProgressive
        case spotCapacityOptimized
        case sdkUnknown(Swift.String)

        public static var allCases: [CRAllocationStrategy] {
            return [
                .bestFit,
                .bestFitProgressive,
                .spotCapacityOptimized,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bestFit: return "BEST_FIT"
            case .bestFitProgressive: return "BEST_FIT_PROGRESSIVE"
            case .spotCapacityOptimized: return "SPOT_CAPACITY_OPTIMIZED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CRAllocationStrategy(rawValue: rawValue) ?? CRAllocationStrategy.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum CRType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ec2
        case fargate
        case fargateSpot
        case spot
        case sdkUnknown(Swift.String)

        public static var allCases: [CRType] {
            return [
                .ec2,
                .fargate,
                .fargateSpot,
                .spot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .fargate: return "FARGATE"
            case .fargateSpot: return "FARGATE_SPOT"
            case .spot: return "SPOT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CRType(rawValue: rawValue) ?? CRType.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum CRUpdateAllocationStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bestFitProgressive
        case spotCapacityOptimized
        case sdkUnknown(Swift.String)

        public static var allCases: [CRUpdateAllocationStrategy] {
            return [
                .bestFitProgressive,
                .spotCapacityOptimized,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bestFitProgressive: return "BEST_FIT_PROGRESSIVE"
            case .spotCapacityOptimized: return "SPOT_CAPACITY_OPTIMIZED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CRUpdateAllocationStrategy(rawValue: rawValue) ?? CRUpdateAllocationStrategy.sdkUnknown(rawValue)
        }
    }
}

extension CancelJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case reason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }
}

extension CancelJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/canceljob"
    }
}

/// Contains the parameters for CancelJob.
public struct CancelJobInput: Swift.Equatable {
    /// The Batch job ID of the job to cancel.
    /// This member is required.
    public var jobId: Swift.String?
    /// A message to attach to the job that explains the reason for canceling it. This message is returned by future [DescribeJobs] operations on the job. This message is also recorded in the Batch activity logs.
    /// This member is required.
    public var reason: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.reason = reason
    }
}

struct CancelJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let reason: Swift.String?
}

extension CancelJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case reason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension CancelJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CancelJobOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CancelJobOutputResponse: Swift.Equatable {

    public init () { }
}

extension ClientException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ClientExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
public struct ClientException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ClientExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClientExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BatchClientTypes.ComputeEnvironmentDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentArn
        case computeEnvironmentName
        case computeResources
        case containerOrchestrationType
        case ecsClusterArn
        case eksConfiguration
        case serviceRole
        case state
        case status
        case statusReason
        case tags
        case type
        case unmanagedvCpus
        case updatePolicy
        case uuid
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentArn = self.computeEnvironmentArn {
            try encodeContainer.encode(computeEnvironmentArn, forKey: .computeEnvironmentArn)
        }
        if let computeEnvironmentName = self.computeEnvironmentName {
            try encodeContainer.encode(computeEnvironmentName, forKey: .computeEnvironmentName)
        }
        if let computeResources = self.computeResources {
            try encodeContainer.encode(computeResources, forKey: .computeResources)
        }
        if let containerOrchestrationType = self.containerOrchestrationType {
            try encodeContainer.encode(containerOrchestrationType.rawValue, forKey: .containerOrchestrationType)
        }
        if let ecsClusterArn = self.ecsClusterArn {
            try encodeContainer.encode(ecsClusterArn, forKey: .ecsClusterArn)
        }
        if let eksConfiguration = self.eksConfiguration {
            try encodeContainer.encode(eksConfiguration, forKey: .eksConfiguration)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagrisTagsMap0) in tags {
                try tagsContainer.encode(tagrisTagsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let unmanagedvCpus = self.unmanagedvCpus {
            try encodeContainer.encode(unmanagedvCpus, forKey: .unmanagedvCpus)
        }
        if let updatePolicy = self.updatePolicy {
            try encodeContainer.encode(updatePolicy, forKey: .updatePolicy)
        }
        if let uuid = self.uuid {
            try encodeContainer.encode(uuid, forKey: .uuid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentName)
        computeEnvironmentName = computeEnvironmentNameDecoded
        let computeEnvironmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentArn)
        computeEnvironmentArn = computeEnvironmentArnDecoded
        let unmanagedvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unmanagedvCpus)
        unmanagedvCpus = unmanagedvCpusDecoded
        let ecsClusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ecsClusterArn)
        ecsClusterArn = ecsClusterArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEType.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEState.self, forKey: .state)
        state = stateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let computeResourcesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ComputeResource.self, forKey: .computeResources)
        computeResources = computeResourcesDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let updatePolicyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.UpdatePolicy.self, forKey: .updatePolicy)
        updatePolicy = updatePolicyDecoded
        let eksConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksConfiguration.self, forKey: .eksConfiguration)
        eksConfiguration = eksConfigurationDecoded
        let containerOrchestrationTypeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.OrchestrationType.self, forKey: .containerOrchestrationType)
        containerOrchestrationType = containerOrchestrationTypeDecoded
        let uuidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uuid)
        uuid = uuidDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents an Batch compute environment.
    public struct ComputeEnvironmentDetail: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the compute environment.
        /// This member is required.
        public var computeEnvironmentArn: Swift.String?
        /// The name of the compute environment. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        /// This member is required.
        public var computeEnvironmentName: Swift.String?
        /// The compute resources defined for the compute environment. For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
        public var computeResources: BatchClientTypes.ComputeResource?
        /// The orchestration type of the compute environment. The valid values are ECS (default) or EKS.
        public var containerOrchestrationType: BatchClientTypes.OrchestrationType?
        /// The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster that the compute environment uses.
        public var ecsClusterArn: Swift.String?
        /// The configuration for the Amazon EKS cluster that supports the Batch compute environment. Only specify this parameter if the containerOrchestrationType is EKS.
        public var eksConfiguration: BatchClientTypes.EksConfiguration?
        /// The service role that's associated with the compute environment that allows Batch to make calls to Amazon Web Services API operations on your behalf. For more information, see [Batch service IAM role](https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html) in the Batch User Guide.
        public var serviceRole: Swift.String?
        /// The state of the compute environment. The valid values are ENABLED or DISABLED. If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically based on the job queue demand. If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out. However, they scale in to minvCpus value after instances become idle.
        public var state: BatchClientTypes.CEState?
        /// The current status of the compute environment (for example, CREATING or VALID).
        public var status: BatchClientTypes.CEStatus?
        /// A short, human-readable string to provide additional details for the current status of the compute environment.
        public var statusReason: Swift.String?
        /// The tags applied to the compute environment.
        public var tags: [Swift.String:Swift.String]?
        /// The type of the compute environment: MANAGED or UNMANAGED. For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
        public var type: BatchClientTypes.CEType?
        /// The maximum number of VCPUs expected to be used for an unmanaged compute environment.
        public var unmanagedvCpus: Swift.Int?
        /// Specifies the infrastructure update policy for the compute environment. For more information about infrastructure updates, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
        public var updatePolicy: BatchClientTypes.UpdatePolicy?
        /// Unique identifier for the compute environment.
        public var uuid: Swift.String?

        public init (
            computeEnvironmentArn: Swift.String? = nil,
            computeEnvironmentName: Swift.String? = nil,
            computeResources: BatchClientTypes.ComputeResource? = nil,
            containerOrchestrationType: BatchClientTypes.OrchestrationType? = nil,
            ecsClusterArn: Swift.String? = nil,
            eksConfiguration: BatchClientTypes.EksConfiguration? = nil,
            serviceRole: Swift.String? = nil,
            state: BatchClientTypes.CEState? = nil,
            status: BatchClientTypes.CEStatus? = nil,
            statusReason: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            type: BatchClientTypes.CEType? = nil,
            unmanagedvCpus: Swift.Int? = nil,
            updatePolicy: BatchClientTypes.UpdatePolicy? = nil,
            uuid: Swift.String? = nil
        )
        {
            self.computeEnvironmentArn = computeEnvironmentArn
            self.computeEnvironmentName = computeEnvironmentName
            self.computeResources = computeResources
            self.containerOrchestrationType = containerOrchestrationType
            self.ecsClusterArn = ecsClusterArn
            self.eksConfiguration = eksConfiguration
            self.serviceRole = serviceRole
            self.state = state
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
            self.type = type
            self.unmanagedvCpus = unmanagedvCpus
            self.updatePolicy = updatePolicy
            self.uuid = uuid
        }
    }

}

extension BatchClientTypes.ComputeEnvironmentOrder: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironment
        case order
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironment = self.computeEnvironment {
            try encodeContainer.encode(computeEnvironment, forKey: .computeEnvironment)
        }
        if let order = self.order {
            try encodeContainer.encode(order, forKey: .order)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let orderDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .order)
        order = orderDecoded
        let computeEnvironmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironment)
        computeEnvironment = computeEnvironmentDecoded
    }
}

extension BatchClientTypes {
    /// The order that compute environments are tried in for job placement within a queue. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first. Compute environments must be in the VALID state before you can associate them with a job queue. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); EC2 and Fargate compute environments can't be mixed. All compute environments that are associated with a job queue must share the same architecture. Batch doesn't support mixing compute environment architecture types in a single job queue.
    public struct ComputeEnvironmentOrder: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the compute environment.
        /// This member is required.
        public var computeEnvironment: Swift.String?
        /// The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first.
        /// This member is required.
        public var order: Swift.Int?

        public init (
            computeEnvironment: Swift.String? = nil,
            order: Swift.Int? = nil
        )
        {
            self.computeEnvironment = computeEnvironment
            self.order = order
        }
    }

}

extension BatchClientTypes.ComputeResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationStrategy
        case bidPercentage
        case desiredvCpus
        case ec2Configuration
        case ec2KeyPair
        case imageId
        case instanceRole
        case instanceTypes
        case launchTemplate
        case maxvCpus
        case minvCpus
        case placementGroup
        case securityGroupIds
        case spotIamFleetRole
        case subnets
        case tags
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allocationStrategy = self.allocationStrategy {
            try encodeContainer.encode(allocationStrategy.rawValue, forKey: .allocationStrategy)
        }
        if let bidPercentage = self.bidPercentage {
            try encodeContainer.encode(bidPercentage, forKey: .bidPercentage)
        }
        if let desiredvCpus = self.desiredvCpus {
            try encodeContainer.encode(desiredvCpus, forKey: .desiredvCpus)
        }
        if let ec2Configuration = ec2Configuration {
            var ec2ConfigurationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2Configuration)
            for ec2configuration0 in ec2Configuration {
                try ec2ConfigurationContainer.encode(ec2configuration0)
            }
        }
        if let ec2KeyPair = self.ec2KeyPair {
            try encodeContainer.encode(ec2KeyPair, forKey: .ec2KeyPair)
        }
        if let imageId = self.imageId {
            try encodeContainer.encode(imageId, forKey: .imageId)
        }
        if let instanceRole = self.instanceRole {
            try encodeContainer.encode(instanceRole, forKey: .instanceRole)
        }
        if let instanceTypes = instanceTypes {
            var instanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypes)
            for string0 in instanceTypes {
                try instanceTypesContainer.encode(string0)
            }
        }
        if let launchTemplate = self.launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if let maxvCpus = self.maxvCpus {
            try encodeContainer.encode(maxvCpus, forKey: .maxvCpus)
        }
        if let minvCpus = self.minvCpus {
            try encodeContainer.encode(minvCpus, forKey: .minvCpus)
        }
        if let placementGroup = self.placementGroup {
            try encodeContainer.encode(placementGroup, forKey: .placementGroup)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(string0)
            }
        }
        if let spotIamFleetRole = self.spotIamFleetRole {
            try encodeContainer.encode(spotIamFleetRole, forKey: .spotIamFleetRole)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for string0 in subnets {
                try subnetsContainer.encode(string0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsMap0) in tags {
                try tagsContainer.encode(tagsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CRType.self, forKey: .type)
        type = typeDecoded
        let allocationStrategyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CRAllocationStrategy.self, forKey: .allocationStrategy)
        allocationStrategy = allocationStrategyDecoded
        let minvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minvCpus)
        minvCpus = minvCpusDecoded
        let maxvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxvCpus)
        maxvCpus = maxvCpusDecoded
        let desiredvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredvCpus)
        desiredvCpus = desiredvCpusDecoded
        let instanceTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceTypes)
        var instanceTypesDecoded0:[Swift.String]? = nil
        if let instanceTypesContainer = instanceTypesContainer {
            instanceTypesDecoded0 = [Swift.String]()
            for string0 in instanceTypesContainer {
                if let string0 = string0 {
                    instanceTypesDecoded0?.append(string0)
                }
            }
        }
        instanceTypes = instanceTypesDecoded0
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let ec2KeyPairDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2KeyPair)
        ec2KeyPair = ec2KeyPairDecoded
        let instanceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
        let placementGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementGroup)
        placementGroup = placementGroupDecoded
        let bidPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bidPercentage)
        bidPercentage = bidPercentageDecoded
        let spotIamFleetRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotIamFleetRole)
        spotIamFleetRole = spotIamFleetRoleDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let ec2ConfigurationContainer = try containerValues.decodeIfPresent([BatchClientTypes.Ec2Configuration?].self, forKey: .ec2Configuration)
        var ec2ConfigurationDecoded0:[BatchClientTypes.Ec2Configuration]? = nil
        if let ec2ConfigurationContainer = ec2ConfigurationContainer {
            ec2ConfigurationDecoded0 = [BatchClientTypes.Ec2Configuration]()
            for structure0 in ec2ConfigurationContainer {
                if let structure0 = structure0 {
                    ec2ConfigurationDecoded0?.append(structure0)
                }
            }
        }
        ec2Configuration = ec2ConfigurationDecoded0
    }
}

extension BatchClientTypes {
    /// An object that represents an Batch compute resource. For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
    public struct ComputeResource: Swift.Equatable {
        /// The allocation strategy to use for the compute resource if not enough instances of the best fitting instance type can be allocated. This might be because of availability of the instance type in the Region or [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html). For more information, see [Allocation strategies](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. BEST_FIT (default) Batch selects an instance type that best fits the needs of the jobs with a preference for the lowest-cost instance type. If additional instances of the selected instance type aren't available, Batch waits for the additional instances to be available. If there aren't enough instances available or the user is reaching [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html), additional jobs aren't run until the currently running jobs are completed. This allocation strategy keeps costs lower but can limit scaling. If you're using Spot Fleets with BEST_FIT, the Spot Fleet IAM Role must be specified. Compute resources that use a BEST_FIT allocation strategy don't support infrastructure updates and can't update some parameters. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. BEST_FIT_PROGRESSIVE Batch selects additional instance types that are large enough to meet the requirements of the jobs in the queue. Its preference is for instance types with lower cost vCPUs. If additional instances of the previously selected instance types aren't available, Batch selects new instance types. SPOT_CAPACITY_OPTIMIZED Batch selects one or more instance types that are large enough to meet the requirements of the jobs in the queue. Its preference is for instance types that are less likely to be interrupted. This allocation strategy is only available for Spot Instance compute resources. With both BEST_FIT_PROGRESSIVE and SPOT_CAPACITY_OPTIMIZED strategies using On-Demand or Spot Instances, and the BEST_FIT strategy using Spot Instances, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance.
        public var allocationStrategy: BatchClientTypes.CRAllocationStrategy?
        /// The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, then the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. If you leave this field empty, the default value is 100% of the On-Demand price. For most use cases, we recommend leaving this field empty. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var bidPercentage: Swift.Int?
        /// The desired number of Amazon EC2 vCPUS in the compute environment. Batch modifies this value between the minimum and maximum values based on job queue demand. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var desiredvCpus: Swift.Int?
        /// Provides information that's used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. One or two values can be provided. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var ec2Configuration: [BatchClientTypes.Ec2Configuration]?
        /// The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to log in to your instances with SSH. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var ec2KeyPair: Swift.String?
        /// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter is overridden by the imageIdOverride member of the Ec2Configuration structure. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the Amazon Elastic Container Service Developer Guide.
        @available(*, deprecated, message: "This field is deprecated, use ec2Configuration[].imageIdOverride instead.")
        public var imageId: Swift.String?
        /// The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example,  ecsInstanceRole  or arn:aws:iam:::instance-profile/ecsInstanceRole . For more information, see [Amazon ECS instance role](https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var instanceRole: Swift.String?
        /// The instances types that can be launched. You can specify instance families to launch any instance type within those families (for example, c5 or p3), or you can specify specific sizes within a family (such as c5.8xlarge). You can also choose optimal to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. When you create a compute environment, the instance types that you select for the compute environment must share the same architecture. For example, you can't mix x86 and ARM instances in the same compute environment. Currently, optimal uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5, and R5 instance families are used.
        public var instanceTypes: [Swift.String]?
        /// The launch template to use for your compute resources. Any other compute resource parameters that you specify in a [CreateComputeEnvironment] API operation override the same parameters in the launch template. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see [Launch template support](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var launchTemplate: BatchClientTypes.LaunchTemplateSpecification?
        /// The maximum number of Amazon EC2 vCPUs that a compute environment can reach. With both BEST_FIT_PROGRESSIVE and SPOT_CAPACITY_OPTIMIZED allocation strategies using On-Demand or Spot Instances, and the BEST_FIT strategy using Spot Instances, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance. For example, no more than a single instance from among those specified in your compute environment is allocated.
        /// This member is required.
        public var maxvCpus: Swift.Int?
        /// The minimum number of Amazon EC2 vCPUs that an environment should maintain (even if the compute environment is DISABLED). This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var minvCpus: Swift.Int?
        /// The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the Amazon EC2 User Guide for Linux Instances. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var placementGroup: Swift.String?
        /// The Amazon EC2 security groups that are associated with instances launched in the compute environment. One or more security groups must be specified, either in securityGroupIds or using a launch template referenced in launchTemplate. This parameter is required for jobs that are running on Fargate resources and must contain at least one security group. Fargate doesn't support launch templates. If security groups are specified using both securityGroupIds and launchTemplate, the values in securityGroupIds are used.
        public var securityGroupIds: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This role is required if the allocation strategy set to BEST_FIT or if the allocation strategy isn't specified. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. To tag your Spot Instances on creation, the Spot Fleet IAM role specified here must use the newer AmazonEC2SpotFleetTaggingRole managed policy. The previously recommended AmazonEC2SpotFleetRole managed policy doesn't have the required permissions to tag Spot Instances. For more information, see [Spot instances not tagged on creation](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#spot-instance-no-tag) in the Batch User Guide.
        public var spotIamFleetRole: Swift.String?
        /// The VPC subnets where the compute resources are launched. These subnets must be within the same VPC. Fargate compute resources can contain up to 16 subnets. For more information, see [VPCs and subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) in the Amazon VPC User Guide. Batch on Amazon EC2 and Batch on Amazon EKS support Local Zones. For more information, see [ Local Zones](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-local-zones) in the Amazon EC2 User Guide for Linux Instances, [Amazon EKS and Amazon Web Services Local Zones](https://docs.aws.amazon.com/eks/latest/userguide/local-zones.html) in the Amazon EKS User Guide and [ Amazon ECS clusters in Local Zones, Wavelength Zones, and Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-regions-zones.html#clusters-local-zones) in the Amazon ECS Developer Guide. Batch on Fargate doesn't currently support Local Zones.
        /// This member is required.
        public var subnets: [Swift.String]?
        /// Key-value pair tags to be applied to EC2 resources that are launched in the compute environment. For Batch, these take the form of "String1": "String2", where String1 is the tag key and String2 is the tag value-for example, { "Name": "Batch Instance - C4OnDemand" }. This is helpful for recognizing your Batch instances in the Amazon EC2 console. Updating these tags requires an infrastructure update to the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. These tags aren't seen when using the Batch ListTagsForResource API operation. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var tags: [Swift.String:Swift.String]?
        /// The type of compute environment: EC2, SPOT, FARGATE, or FARGATE_SPOT. For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide. If you choose SPOT, you must also specify an Amazon EC2 Spot Fleet role with the spotIamFleetRole parameter. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the Batch User Guide.
        /// This member is required.
        public var type: BatchClientTypes.CRType?

        public init (
            allocationStrategy: BatchClientTypes.CRAllocationStrategy? = nil,
            bidPercentage: Swift.Int? = nil,
            desiredvCpus: Swift.Int? = nil,
            ec2Configuration: [BatchClientTypes.Ec2Configuration]? = nil,
            ec2KeyPair: Swift.String? = nil,
            imageId: Swift.String? = nil,
            instanceRole: Swift.String? = nil,
            instanceTypes: [Swift.String]? = nil,
            launchTemplate: BatchClientTypes.LaunchTemplateSpecification? = nil,
            maxvCpus: Swift.Int? = nil,
            minvCpus: Swift.Int? = nil,
            placementGroup: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            spotIamFleetRole: Swift.String? = nil,
            subnets: [Swift.String]? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            type: BatchClientTypes.CRType? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.bidPercentage = bidPercentage
            self.desiredvCpus = desiredvCpus
            self.ec2Configuration = ec2Configuration
            self.ec2KeyPair = ec2KeyPair
            self.imageId = imageId
            self.instanceRole = instanceRole
            self.instanceTypes = instanceTypes
            self.launchTemplate = launchTemplate
            self.maxvCpus = maxvCpus
            self.minvCpus = minvCpus
            self.placementGroup = placementGroup
            self.securityGroupIds = securityGroupIds
            self.spotIamFleetRole = spotIamFleetRole
            self.subnets = subnets
            self.tags = tags
            self.type = type
        }
    }

}

extension BatchClientTypes.ComputeResourceUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationStrategy
        case bidPercentage
        case desiredvCpus
        case ec2Configuration
        case ec2KeyPair
        case imageId
        case instanceRole
        case instanceTypes
        case launchTemplate
        case maxvCpus
        case minvCpus
        case placementGroup
        case securityGroupIds
        case subnets
        case tags
        case type
        case updateToLatestImageVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allocationStrategy = self.allocationStrategy {
            try encodeContainer.encode(allocationStrategy.rawValue, forKey: .allocationStrategy)
        }
        if let bidPercentage = self.bidPercentage {
            try encodeContainer.encode(bidPercentage, forKey: .bidPercentage)
        }
        if let desiredvCpus = self.desiredvCpus {
            try encodeContainer.encode(desiredvCpus, forKey: .desiredvCpus)
        }
        if let ec2Configuration = ec2Configuration {
            var ec2ConfigurationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2Configuration)
            for ec2configuration0 in ec2Configuration {
                try ec2ConfigurationContainer.encode(ec2configuration0)
            }
        }
        if let ec2KeyPair = self.ec2KeyPair {
            try encodeContainer.encode(ec2KeyPair, forKey: .ec2KeyPair)
        }
        if let imageId = self.imageId {
            try encodeContainer.encode(imageId, forKey: .imageId)
        }
        if let instanceRole = self.instanceRole {
            try encodeContainer.encode(instanceRole, forKey: .instanceRole)
        }
        if let instanceTypes = instanceTypes {
            var instanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypes)
            for string0 in instanceTypes {
                try instanceTypesContainer.encode(string0)
            }
        }
        if let launchTemplate = self.launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if let maxvCpus = self.maxvCpus {
            try encodeContainer.encode(maxvCpus, forKey: .maxvCpus)
        }
        if let minvCpus = self.minvCpus {
            try encodeContainer.encode(minvCpus, forKey: .minvCpus)
        }
        if let placementGroup = self.placementGroup {
            try encodeContainer.encode(placementGroup, forKey: .placementGroup)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(string0)
            }
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for string0 in subnets {
                try subnetsContainer.encode(string0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsMap0) in tags {
                try tagsContainer.encode(tagsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let updateToLatestImageVersion = self.updateToLatestImageVersion {
            try encodeContainer.encode(updateToLatestImageVersion, forKey: .updateToLatestImageVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minvCpus)
        minvCpus = minvCpusDecoded
        let maxvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxvCpus)
        maxvCpus = maxvCpusDecoded
        let desiredvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredvCpus)
        desiredvCpus = desiredvCpusDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let allocationStrategyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CRUpdateAllocationStrategy.self, forKey: .allocationStrategy)
        allocationStrategy = allocationStrategyDecoded
        let instanceTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceTypes)
        var instanceTypesDecoded0:[Swift.String]? = nil
        if let instanceTypesContainer = instanceTypesContainer {
            instanceTypesDecoded0 = [Swift.String]()
            for string0 in instanceTypesContainer {
                if let string0 = string0 {
                    instanceTypesDecoded0?.append(string0)
                }
            }
        }
        instanceTypes = instanceTypesDecoded0
        let ec2KeyPairDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2KeyPair)
        ec2KeyPair = ec2KeyPairDecoded
        let instanceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
        let placementGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementGroup)
        placementGroup = placementGroupDecoded
        let bidPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bidPercentage)
        bidPercentage = bidPercentageDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let ec2ConfigurationContainer = try containerValues.decodeIfPresent([BatchClientTypes.Ec2Configuration?].self, forKey: .ec2Configuration)
        var ec2ConfigurationDecoded0:[BatchClientTypes.Ec2Configuration]? = nil
        if let ec2ConfigurationContainer = ec2ConfigurationContainer {
            ec2ConfigurationDecoded0 = [BatchClientTypes.Ec2Configuration]()
            for structure0 in ec2ConfigurationContainer {
                if let structure0 = structure0 {
                    ec2ConfigurationDecoded0?.append(structure0)
                }
            }
        }
        ec2Configuration = ec2ConfigurationDecoded0
        let updateToLatestImageVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .updateToLatestImageVersion)
        updateToLatestImageVersion = updateToLatestImageVersionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CRType.self, forKey: .type)
        type = typeDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents the attributes of a compute environment that can be updated. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
    public struct ComputeResourceUpdate: Swift.Equatable {
        /// The allocation strategy to use for the compute resource if there's not enough instances of the best fitting instance type that can be allocated. This might be because of availability of the instance type in the Region or [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html). For more information, see [Allocation strategies](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) in the Batch User Guide. When updating a compute environment, changing the allocation strategy requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. BEST_FIT isn't supported when updating a compute environment. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. BEST_FIT_PROGRESSIVE Batch selects additional instance types that are large enough to meet the requirements of the jobs in the queue. Its preference is for instance types with lower cost vCPUs. If additional instances of the previously selected instance types aren't available, Batch selects new instance types. SPOT_CAPACITY_OPTIMIZED Batch selects one or more instance types that are large enough to meet the requirements of the jobs in the queue. Its preference is for instance types that are less likely to be interrupted. This allocation strategy is only available for Spot Instance compute resources. With both BEST_FIT_PROGRESSIVE and SPOT_CAPACITY_OPTIMIZED strategies using On-Demand or Spot Instances, and the BEST_FIT strategy using Spot Instances, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance.
        public var allocationStrategy: BatchClientTypes.CRUpdateAllocationStrategy?
        /// The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. For most use cases, we recommend leaving this field empty. When updating a compute environment, changing the bid percentage requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var bidPercentage: Swift.Int?
        /// The desired number of Amazon EC2 vCPUS in the compute environment. Batch modifies this value between the minimum and maximum values based on job queue demand. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. Batch doesn't support changing the desired number of vCPUs of an existing compute environment. Don't specify this parameter for compute environments using Amazon EKS clusters.
        public var desiredvCpus: Swift.Int?
        /// Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. To remove the EC2 configuration and any custom AMI ID specified in imageIdOverride, set this value to an empty string. One or two values can be provided. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var ec2Configuration: [BatchClientTypes.Ec2Configuration]?
        /// The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to log in to your instances with SSH. To remove the Amazon EC2 key pair, set this value to an empty string. When updating a compute environment, changing the EC2 key pair requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var ec2KeyPair: Swift.String?
        /// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter is overridden by the imageIdOverride member of the Ec2Configuration structure. To remove the custom AMI ID and use the default AMI ID, set this value to an empty string. When updating a compute environment, changing the AMI ID requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the Amazon Elastic Container Service Developer Guide.
        public var imageId: Swift.String?
        /// The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example,  ecsInstanceRole  or arn:aws:iam:::instance-profile/ecsInstanceRole . For more information, see [Amazon ECS instance role](https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html) in the Batch User Guide. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var instanceRole: Swift.String?
        /// The instances types that can be launched. You can specify instance families to launch any instance type within those families (for example, c5 or p3), or you can specify specific sizes within a family (such as c5.8xlarge). You can also choose optimal to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. When you create a compute environment, the instance types that you select for the compute environment must share the same architecture. For example, you can't mix x86 and ARM instances in the same compute environment. Currently, optimal uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5, and R5 instance families are used.
        public var instanceTypes: [Swift.String]?
        /// The updated launch template to use for your compute resources. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see [Launch template support](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html) in the Batch User Guide. To remove the custom launch template and use the default launch template, set launchTemplateId or launchTemplateName member of the launch template specification to an empty string. Removing the launch template from a compute environment will not remove the AMI specified in the launch template. In order to update the AMI specified in a launch template, the updateToLatestImageVersion parameter must be set to true. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var launchTemplate: BatchClientTypes.LaunchTemplateSpecification?
        /// The maximum number of Amazon EC2 vCPUs that an environment can reach. With both BEST_FIT_PROGRESSIVE and SPOT_CAPACITY_OPTIMIZED allocation strategies using On-Demand or Spot Instances, and the BEST_FIT strategy using Spot Instances, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance. That is, no more than a single instance from among those specified in your compute environment.
        public var maxvCpus: Swift.Int?
        /// The minimum number of Amazon EC2 vCPUs that an environment should maintain (even if the compute environment is DISABLED). This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var minvCpus: Swift.Int?
        /// The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the Amazon EC2 User Guide for Linux Instances. When updating a compute environment, changing the placement group requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var placementGroup: Swift.String?
        /// The Amazon EC2 security groups that are associated with instances launched in the compute environment. This parameter is required for Fargate compute resources, where it can contain up to 5 security groups. For Fargate compute resources, providing an empty list is handled as if this parameter wasn't specified and no change is made. For EC2 compute resources, providing an empty list removes the security groups from the compute resource. When updating a compute environment, changing the EC2 security groups requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
        public var securityGroupIds: [Swift.String]?
        /// The VPC subnets where the compute resources are launched. Fargate compute resources can contain up to 16 subnets. For Fargate compute resources, providing an empty list will be handled as if this parameter wasn't specified and no change is made. For EC2 compute resources, providing an empty list removes the VPC subnets from the compute resource. For more information, see [VPCs and subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) in the Amazon VPC User Guide. When updating a compute environment, changing the VPC subnets requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. Batch on Amazon EC2 and Batch on Amazon EKS support Local Zones. For more information, see [ Local Zones](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-local-zones) in the Amazon EC2 User Guide for Linux Instances, [Amazon EKS and Amazon Web Services Local Zones](https://docs.aws.amazon.com/eks/latest/userguide/local-zones.html) in the Amazon EKS User Guide and [ Amazon ECS clusters in Local Zones, Wavelength Zones, and Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-regions-zones.html#clusters-local-zones) in the Amazon ECS Developer Guide. Batch on Fargate doesn't currently support Local Zones.
        public var subnets: [Swift.String]?
        /// Key-value pair tags to be applied to EC2 resources that are launched in the compute environment. For Batch, these take the form of "String1": "String2", where String1 is the tag key and String2 is the tag value-for example, { "Name": "Batch Instance - C4OnDemand" }. This is helpful for recognizing your Batch instances in the Amazon EC2 console. These tags aren't seen when using the Batch ListTagsForResource API operation. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public var tags: [Swift.String:Swift.String]?
        /// The type of compute environment: EC2, SPOT, FARGATE, or FARGATE_SPOT. For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide. If you choose SPOT, you must also specify an Amazon EC2 Spot Fleet role with the spotIamFleetRole parameter. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the Batch User Guide. When updating a compute environment, changing the type of a compute environment requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
        public var type: BatchClientTypes.CRType?
        /// Specifies whether the AMI ID is updated to the latest one that's supported by Batch when the compute environment has an infrastructure update. The default value is false. An AMI ID can either be specified in the imageId or imageIdOverride parameters or be determined by the launch template that's specified in the launchTemplate parameter. If an AMI ID is specified any of these ways, this parameter is ignored. For more information about to update AMI IDs during an infrastructure update, see [Updating the AMI ID](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html#updating-compute-environments-ami) in the Batch User Guide. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
        public var updateToLatestImageVersion: Swift.Bool?

        public init (
            allocationStrategy: BatchClientTypes.CRUpdateAllocationStrategy? = nil,
            bidPercentage: Swift.Int? = nil,
            desiredvCpus: Swift.Int? = nil,
            ec2Configuration: [BatchClientTypes.Ec2Configuration]? = nil,
            ec2KeyPair: Swift.String? = nil,
            imageId: Swift.String? = nil,
            instanceRole: Swift.String? = nil,
            instanceTypes: [Swift.String]? = nil,
            launchTemplate: BatchClientTypes.LaunchTemplateSpecification? = nil,
            maxvCpus: Swift.Int? = nil,
            minvCpus: Swift.Int? = nil,
            placementGroup: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            type: BatchClientTypes.CRType? = nil,
            updateToLatestImageVersion: Swift.Bool? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.bidPercentage = bidPercentage
            self.desiredvCpus = desiredvCpus
            self.ec2Configuration = ec2Configuration
            self.ec2KeyPair = ec2KeyPair
            self.imageId = imageId
            self.instanceRole = instanceRole
            self.instanceTypes = instanceTypes
            self.launchTemplate = launchTemplate
            self.maxvCpus = maxvCpus
            self.minvCpus = minvCpus
            self.placementGroup = placementGroup
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
            self.tags = tags
            self.type = type
            self.updateToLatestImageVersion = updateToLatestImageVersion
        }
    }

}

extension BatchClientTypes.ContainerDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case containerInstanceArn
        case environment
        case executionRoleArn
        case exitCode
        case fargatePlatformConfiguration
        case image
        case instanceType
        case jobRoleArn
        case linuxParameters
        case logConfiguration
        case logStreamName
        case memory
        case mountPoints
        case networkConfiguration
        case networkInterfaces
        case privileged
        case readonlyRootFilesystem
        case reason
        case resourceRequirements
        case secrets
        case taskArn
        case ulimits
        case user
        case vcpus
        case volumes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for string0 in command {
                try commandContainer.encode(string0)
            }
        }
        if let containerInstanceArn = self.containerInstanceArn {
            try encodeContainer.encode(containerInstanceArn, forKey: .containerInstanceArn)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for keyvaluepair0 in environment {
                try environmentContainer.encode(keyvaluepair0)
            }
        }
        if let executionRoleArn = self.executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let exitCode = self.exitCode {
            try encodeContainer.encode(exitCode, forKey: .exitCode)
        }
        if let fargatePlatformConfiguration = self.fargatePlatformConfiguration {
            try encodeContainer.encode(fargatePlatformConfiguration, forKey: .fargatePlatformConfiguration)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let jobRoleArn = self.jobRoleArn {
            try encodeContainer.encode(jobRoleArn, forKey: .jobRoleArn)
        }
        if let linuxParameters = self.linuxParameters {
            try encodeContainer.encode(linuxParameters, forKey: .linuxParameters)
        }
        if let logConfiguration = self.logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let mountPoints = mountPoints {
            var mountPointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mountPoints)
            for mountpoint0 in mountPoints {
                try mountPointsContainer.encode(mountpoint0)
            }
        }
        if let networkConfiguration = self.networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if let networkInterfaces = networkInterfaces {
            var networkInterfacesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaces)
            for networkinterface0 in networkInterfaces {
                try networkInterfacesContainer.encode(networkinterface0)
            }
        }
        if let privileged = self.privileged {
            try encodeContainer.encode(privileged, forKey: .privileged)
        }
        if let readonlyRootFilesystem = self.readonlyRootFilesystem {
            try encodeContainer.encode(readonlyRootFilesystem, forKey: .readonlyRootFilesystem)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for resourcerequirement0 in resourceRequirements {
                try resourceRequirementsContainer.encode(resourcerequirement0)
            }
        }
        if let secrets = secrets {
            var secretsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secrets)
            for secret0 in secrets {
                try secretsContainer.encode(secret0)
            }
        }
        if let taskArn = self.taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
        if let ulimits = ulimits {
            var ulimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ulimits)
            for ulimit0 in ulimits {
                try ulimitsContainer.encode(ulimit0)
            }
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
        if let vcpus = self.vcpus {
            try encodeContainer.encode(vcpus, forKey: .vcpus)
        }
        if let volumes = volumes {
            var volumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumes)
            for volume0 in volumes {
                try volumesContainer.encode(volume0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let vcpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vcpus)
        vcpus = vcpusDecoded
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let jobRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobRoleArn)
        jobRoleArn = jobRoleArnDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let volumesContainer = try containerValues.decodeIfPresent([BatchClientTypes.Volume?].self, forKey: .volumes)
        var volumesDecoded0:[BatchClientTypes.Volume]? = nil
        if let volumesContainer = volumesContainer {
            volumesDecoded0 = [BatchClientTypes.Volume]()
            for structure0 in volumesContainer {
                if let structure0 = structure0 {
                    volumesDecoded0?.append(structure0)
                }
            }
        }
        volumes = volumesDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([BatchClientTypes.KeyValuePair?].self, forKey: .environment)
        var environmentDecoded0:[BatchClientTypes.KeyValuePair]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [BatchClientTypes.KeyValuePair]()
            for structure0 in environmentContainer {
                if let structure0 = structure0 {
                    environmentDecoded0?.append(structure0)
                }
            }
        }
        environment = environmentDecoded0
        let mountPointsContainer = try containerValues.decodeIfPresent([BatchClientTypes.MountPoint?].self, forKey: .mountPoints)
        var mountPointsDecoded0:[BatchClientTypes.MountPoint]? = nil
        if let mountPointsContainer = mountPointsContainer {
            mountPointsDecoded0 = [BatchClientTypes.MountPoint]()
            for structure0 in mountPointsContainer {
                if let structure0 = structure0 {
                    mountPointsDecoded0?.append(structure0)
                }
            }
        }
        mountPoints = mountPointsDecoded0
        let readonlyRootFilesystemDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readonlyRootFilesystem)
        readonlyRootFilesystem = readonlyRootFilesystemDecoded
        let ulimitsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Ulimit?].self, forKey: .ulimits)
        var ulimitsDecoded0:[BatchClientTypes.Ulimit]? = nil
        if let ulimitsContainer = ulimitsContainer {
            ulimitsDecoded0 = [BatchClientTypes.Ulimit]()
            for structure0 in ulimitsContainer {
                if let structure0 = structure0 {
                    ulimitsDecoded0?.append(structure0)
                }
            }
        }
        ulimits = ulimitsDecoded0
        let privilegedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privileged)
        privileged = privilegedDecoded
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let exitCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .exitCode)
        exitCode = exitCodeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let containerInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerInstanceArn)
        containerInstanceArn = containerInstanceArnDecoded
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let networkInterfacesContainer = try containerValues.decodeIfPresent([BatchClientTypes.NetworkInterface?].self, forKey: .networkInterfaces)
        var networkInterfacesDecoded0:[BatchClientTypes.NetworkInterface]? = nil
        if let networkInterfacesContainer = networkInterfacesContainer {
            networkInterfacesDecoded0 = [BatchClientTypes.NetworkInterface]()
            for structure0 in networkInterfacesContainer {
                if let structure0 = structure0 {
                    networkInterfacesDecoded0?.append(structure0)
                }
            }
        }
        networkInterfaces = networkInterfacesDecoded0
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([BatchClientTypes.ResourceRequirement?].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[BatchClientTypes.ResourceRequirement]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [BatchClientTypes.ResourceRequirement]()
            for structure0 in resourceRequirementsContainer {
                if let structure0 = structure0 {
                    resourceRequirementsDecoded0?.append(structure0)
                }
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
        let linuxParametersDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LinuxParameters.self, forKey: .linuxParameters)
        linuxParameters = linuxParametersDecoded
        let logConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LogConfiguration.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
        let secretsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Secret?].self, forKey: .secrets)
        var secretsDecoded0:[BatchClientTypes.Secret]? = nil
        if let secretsContainer = secretsContainer {
            secretsDecoded0 = [BatchClientTypes.Secret]()
            for structure0 in secretsContainer {
                if let structure0 = structure0 {
                    secretsDecoded0?.append(structure0)
                }
            }
        }
        secrets = secretsDecoded0
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let fargatePlatformConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.FargatePlatformConfiguration.self, forKey: .fargatePlatformConfiguration)
        fargatePlatformConfiguration = fargatePlatformConfigurationDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents the details of a container that's part of a job.
    public struct ContainerDetail: Swift.Equatable {
        /// The command that's passed to the container.
        public var command: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the container instance that the container is running on.
        public var containerInstanceArn: Swift.String?
        /// The environment variables to pass to a container. Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public var environment: [BatchClientTypes.KeyValuePair]?
        /// The Amazon Resource Name (ARN) of the execution role that Batch can assume. For more information, see [Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the Batch User Guide.
        public var executionRoleArn: Swift.String?
        /// The exit code to return upon completion.
        public var exitCode: Swift.Int?
        /// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
        public var fargatePlatformConfiguration: BatchClientTypes.FargatePlatformConfiguration?
        /// The image used to start the container.
        public var image: Swift.String?
        /// The instance type of the underlying host infrastructure of a multi-node parallel job. This parameter isn't applicable to jobs that are running on Fargate resources.
        public var instanceType: Swift.String?
        /// The Amazon Resource Name (ARN) that's associated with the job when run.
        public var jobRoleArn: Swift.String?
        /// Linux-specific modifications that are applied to the container, such as details for device mappings.
        public var linuxParameters: BatchClientTypes.LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --log-driver option to [docker run](https://docs.docker.com/engine/reference/run/). By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance. Or, alternatively, it must be configured on a different log server for remote logging options. For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation. Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration] data type). Additional log drivers might be available in future releases of the Amazon ECS container agent. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version" The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide.
        public var logConfiguration: BatchClientTypes.LogConfiguration?
        /// The name of the Amazon CloudWatch Logs log stream that's associated with the container. The log group for Batch jobs is /aws/batch/job. Each container attempt receives a log stream name when they reach the RUNNING status.
        public var logStreamName: Swift.String?
        /// For jobs running on EC2 resources that didn't specify memory requirements using resourceRequirements, the number of MiB of memory reserved for the job. For other jobs, including all run on Fargate resources, see resourceRequirements.
        public var memory: Swift.Int?
        /// The mount points for data volumes in your container.
        public var mountPoints: [BatchClientTypes.MountPoint]?
        /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
        public var networkConfiguration: BatchClientTypes.NetworkConfiguration?
        /// The network interfaces that are associated with the job.
        public var networkInterfaces: [BatchClientTypes.NetworkInterface]?
        /// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user). The default value is false. This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
        public var privileged: Swift.Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --read-only option to [docker run](https://docs.docker.com/engine/reference/commandline/run/).
        public var readonlyRootFilesystem: Swift.Bool?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public var reason: Swift.String?
        /// The type and amount of resources to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
        public var resourceRequirements: [BatchClientTypes.ResourceRequirement]?
        /// The secrets to pass to the container. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
        public var secrets: [BatchClientTypes.Secret]?
        /// The Amazon Resource Name (ARN) of the Amazon ECS task that's associated with the container job. Each container attempt receives a task ARN when they reach the STARTING status.
        public var taskArn: Swift.String?
        /// A list of ulimit values to set in the container. This parameter maps to Ulimits in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --ulimit option to [docker run](https://docs.docker.com/engine/reference/run/). This parameter isn't applicable to jobs that are running on Fargate resources.
        public var ulimits: [BatchClientTypes.Ulimit]?
        /// The user name to use inside the container. This parameter maps to User in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --user option to [docker run](https://docs.docker.com/engine/reference/run/).
        public var user: Swift.String?
        /// The number of vCPUs reserved for the container. For jobs that run on EC2 resources, you can specify the vCPU requirement for the job using resourceRequirements, but you can't specify the vCPU requirements in both the vcpus and resourceRequirements object. This parameter maps to CpuShares in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --cpu-shares option to [docker run](https://docs.docker.com/engine/reference/run/). Each vCPU is equivalent to 1,024 CPU shares. You must specify at least one vCPU. This is required but can be specified in several places. It must be specified for each node at least once. This parameter isn't applicable to jobs that run on Fargate resources. For jobs that run on Fargate resources, you must specify the vCPU requirement for the job using resourceRequirements.
        public var vcpus: Swift.Int?
        /// A list of volumes that are associated with the job.
        public var volumes: [BatchClientTypes.Volume]?

        public init (
            command: [Swift.String]? = nil,
            containerInstanceArn: Swift.String? = nil,
            environment: [BatchClientTypes.KeyValuePair]? = nil,
            executionRoleArn: Swift.String? = nil,
            exitCode: Swift.Int? = nil,
            fargatePlatformConfiguration: BatchClientTypes.FargatePlatformConfiguration? = nil,
            image: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            jobRoleArn: Swift.String? = nil,
            linuxParameters: BatchClientTypes.LinuxParameters? = nil,
            logConfiguration: BatchClientTypes.LogConfiguration? = nil,
            logStreamName: Swift.String? = nil,
            memory: Swift.Int? = nil,
            mountPoints: [BatchClientTypes.MountPoint]? = nil,
            networkConfiguration: BatchClientTypes.NetworkConfiguration? = nil,
            networkInterfaces: [BatchClientTypes.NetworkInterface]? = nil,
            privileged: Swift.Bool? = nil,
            readonlyRootFilesystem: Swift.Bool? = nil,
            reason: Swift.String? = nil,
            resourceRequirements: [BatchClientTypes.ResourceRequirement]? = nil,
            secrets: [BatchClientTypes.Secret]? = nil,
            taskArn: Swift.String? = nil,
            ulimits: [BatchClientTypes.Ulimit]? = nil,
            user: Swift.String? = nil,
            vcpus: Swift.Int? = nil,
            volumes: [BatchClientTypes.Volume]? = nil
        )
        {
            self.command = command
            self.containerInstanceArn = containerInstanceArn
            self.environment = environment
            self.executionRoleArn = executionRoleArn
            self.exitCode = exitCode
            self.fargatePlatformConfiguration = fargatePlatformConfiguration
            self.image = image
            self.instanceType = instanceType
            self.jobRoleArn = jobRoleArn
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.logStreamName = logStreamName
            self.memory = memory
            self.mountPoints = mountPoints
            self.networkConfiguration = networkConfiguration
            self.networkInterfaces = networkInterfaces
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.reason = reason
            self.resourceRequirements = resourceRequirements
            self.secrets = secrets
            self.taskArn = taskArn
            self.ulimits = ulimits
            self.user = user
            self.vcpus = vcpus
            self.volumes = volumes
        }
    }

}

extension BatchClientTypes.ContainerOverrides: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case environment
        case instanceType
        case memory
        case resourceRequirements
        case vcpus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for string0 in command {
                try commandContainer.encode(string0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for keyvaluepair0 in environment {
                try environmentContainer.encode(keyvaluepair0)
            }
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for resourcerequirement0 in resourceRequirements {
                try resourceRequirementsContainer.encode(resourcerequirement0)
            }
        }
        if let vcpus = self.vcpus {
            try encodeContainer.encode(vcpus, forKey: .vcpus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vcpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vcpus)
        vcpus = vcpusDecoded
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let environmentContainer = try containerValues.decodeIfPresent([BatchClientTypes.KeyValuePair?].self, forKey: .environment)
        var environmentDecoded0:[BatchClientTypes.KeyValuePair]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [BatchClientTypes.KeyValuePair]()
            for structure0 in environmentContainer {
                if let structure0 = structure0 {
                    environmentDecoded0?.append(structure0)
                }
            }
        }
        environment = environmentDecoded0
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([BatchClientTypes.ResourceRequirement?].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[BatchClientTypes.ResourceRequirement]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [BatchClientTypes.ResourceRequirement]()
            for structure0 in resourceRequirementsContainer {
                if let structure0 = structure0 {
                    resourceRequirementsDecoded0?.append(structure0)
                }
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
    }
}

extension BatchClientTypes {
    /// The overrides that should be sent to a container.
    public struct ContainerOverrides: Swift.Equatable {
        /// The command to send to the container that overrides the default command from the Docker image or the job definition.
        public var command: [Swift.String]?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition. Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public var environment: [BatchClientTypes.KeyValuePair]?
        /// The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
        public var instanceType: Swift.String?
        /// This parameter is deprecated, use resourceRequirements to override the memory requirements specified in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on EC2 resources, it overrides the memory parameter set in the job definition, but doesn't override any memory requirement that's specified in the resourceRequirements structure in the job definition. To override memory requirements that are specified in the resourceRequirements structure in the job definition, resourceRequirements must be specified in the SubmitJob request, with type set to MEMORY and value set to the new value. For more information, see [Can't override job definition resource requirements](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements) in the Batch User Guide.
        @available(*, deprecated, message: "This field is deprecated, use resourceRequirements instead.")
        public var memory: Swift.Int?
        /// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU.
        public var resourceRequirements: [BatchClientTypes.ResourceRequirement]?
        /// This parameter is deprecated, use resourceRequirements to override the vcpus parameter that's set in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on EC2 resources, it overrides the vcpus parameter set in the job definition, but doesn't override any vCPU requirement specified in the resourceRequirements structure in the job definition. To override vCPU requirements that are specified in the resourceRequirements structure in the job definition, resourceRequirements must be specified in the SubmitJob request, with type set to VCPU and value set to the new value. For more information, see [Can't override job definition resource requirements](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements) in the Batch User Guide.
        @available(*, deprecated, message: "This field is deprecated, use resourceRequirements instead.")
        public var vcpus: Swift.Int?

        public init (
            command: [Swift.String]? = nil,
            environment: [BatchClientTypes.KeyValuePair]? = nil,
            instanceType: Swift.String? = nil,
            memory: Swift.Int? = nil,
            resourceRequirements: [BatchClientTypes.ResourceRequirement]? = nil,
            vcpus: Swift.Int? = nil
        )
        {
            self.command = command
            self.environment = environment
            self.instanceType = instanceType
            self.memory = memory
            self.resourceRequirements = resourceRequirements
            self.vcpus = vcpus
        }
    }

}

extension BatchClientTypes.ContainerProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case environment
        case executionRoleArn
        case fargatePlatformConfiguration
        case image
        case instanceType
        case jobRoleArn
        case linuxParameters
        case logConfiguration
        case memory
        case mountPoints
        case networkConfiguration
        case privileged
        case readonlyRootFilesystem
        case resourceRequirements
        case secrets
        case ulimits
        case user
        case vcpus
        case volumes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for string0 in command {
                try commandContainer.encode(string0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for keyvaluepair0 in environment {
                try environmentContainer.encode(keyvaluepair0)
            }
        }
        if let executionRoleArn = self.executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let fargatePlatformConfiguration = self.fargatePlatformConfiguration {
            try encodeContainer.encode(fargatePlatformConfiguration, forKey: .fargatePlatformConfiguration)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let jobRoleArn = self.jobRoleArn {
            try encodeContainer.encode(jobRoleArn, forKey: .jobRoleArn)
        }
        if let linuxParameters = self.linuxParameters {
            try encodeContainer.encode(linuxParameters, forKey: .linuxParameters)
        }
        if let logConfiguration = self.logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let mountPoints = mountPoints {
            var mountPointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mountPoints)
            for mountpoint0 in mountPoints {
                try mountPointsContainer.encode(mountpoint0)
            }
        }
        if let networkConfiguration = self.networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if let privileged = self.privileged {
            try encodeContainer.encode(privileged, forKey: .privileged)
        }
        if let readonlyRootFilesystem = self.readonlyRootFilesystem {
            try encodeContainer.encode(readonlyRootFilesystem, forKey: .readonlyRootFilesystem)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for resourcerequirement0 in resourceRequirements {
                try resourceRequirementsContainer.encode(resourcerequirement0)
            }
        }
        if let secrets = secrets {
            var secretsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secrets)
            for secret0 in secrets {
                try secretsContainer.encode(secret0)
            }
        }
        if let ulimits = ulimits {
            var ulimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ulimits)
            for ulimit0 in ulimits {
                try ulimitsContainer.encode(ulimit0)
            }
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
        if let vcpus = self.vcpus {
            try encodeContainer.encode(vcpus, forKey: .vcpus)
        }
        if let volumes = volumes {
            var volumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumes)
            for volume0 in volumes {
                try volumesContainer.encode(volume0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let vcpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vcpus)
        vcpus = vcpusDecoded
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let jobRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobRoleArn)
        jobRoleArn = jobRoleArnDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let volumesContainer = try containerValues.decodeIfPresent([BatchClientTypes.Volume?].self, forKey: .volumes)
        var volumesDecoded0:[BatchClientTypes.Volume]? = nil
        if let volumesContainer = volumesContainer {
            volumesDecoded0 = [BatchClientTypes.Volume]()
            for structure0 in volumesContainer {
                if let structure0 = structure0 {
                    volumesDecoded0?.append(structure0)
                }
            }
        }
        volumes = volumesDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([BatchClientTypes.KeyValuePair?].self, forKey: .environment)
        var environmentDecoded0:[BatchClientTypes.KeyValuePair]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [BatchClientTypes.KeyValuePair]()
            for structure0 in environmentContainer {
                if let structure0 = structure0 {
                    environmentDecoded0?.append(structure0)
                }
            }
        }
        environment = environmentDecoded0
        let mountPointsContainer = try containerValues.decodeIfPresent([BatchClientTypes.MountPoint?].self, forKey: .mountPoints)
        var mountPointsDecoded0:[BatchClientTypes.MountPoint]? = nil
        if let mountPointsContainer = mountPointsContainer {
            mountPointsDecoded0 = [BatchClientTypes.MountPoint]()
            for structure0 in mountPointsContainer {
                if let structure0 = structure0 {
                    mountPointsDecoded0?.append(structure0)
                }
            }
        }
        mountPoints = mountPointsDecoded0
        let readonlyRootFilesystemDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readonlyRootFilesystem)
        readonlyRootFilesystem = readonlyRootFilesystemDecoded
        let privilegedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privileged)
        privileged = privilegedDecoded
        let ulimitsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Ulimit?].self, forKey: .ulimits)
        var ulimitsDecoded0:[BatchClientTypes.Ulimit]? = nil
        if let ulimitsContainer = ulimitsContainer {
            ulimitsDecoded0 = [BatchClientTypes.Ulimit]()
            for structure0 in ulimitsContainer {
                if let structure0 = structure0 {
                    ulimitsDecoded0?.append(structure0)
                }
            }
        }
        ulimits = ulimitsDecoded0
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([BatchClientTypes.ResourceRequirement?].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[BatchClientTypes.ResourceRequirement]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [BatchClientTypes.ResourceRequirement]()
            for structure0 in resourceRequirementsContainer {
                if let structure0 = structure0 {
                    resourceRequirementsDecoded0?.append(structure0)
                }
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
        let linuxParametersDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LinuxParameters.self, forKey: .linuxParameters)
        linuxParameters = linuxParametersDecoded
        let logConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LogConfiguration.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
        let secretsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Secret?].self, forKey: .secrets)
        var secretsDecoded0:[BatchClientTypes.Secret]? = nil
        if let secretsContainer = secretsContainer {
            secretsDecoded0 = [BatchClientTypes.Secret]()
            for structure0 in secretsContainer {
                if let structure0 = structure0 {
                    secretsDecoded0?.append(structure0)
                }
            }
        }
        secrets = secretsDecoded0
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let fargatePlatformConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.FargatePlatformConfiguration.self, forKey: .fargatePlatformConfiguration)
        fargatePlatformConfiguration = fargatePlatformConfigurationDecoded
    }
}

extension BatchClientTypes {
    /// Container properties are used for Amazon ECS based job definitions. These properties to describe the container that's launched as part of a job.
    public struct ContainerProperties: Swift.Equatable {
        /// The command that's passed to the container. This parameter maps to Cmd in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the COMMAND parameter to [docker run](https://docs.docker.com/engine/reference/run/). For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.docker.com/engine/reference/builder/#cmd).
        public var command: [Swift.String]?
        /// The environment variables to pass to a container. This parameter maps to Env in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --env option to [docker run](https://docs.docker.com/engine/reference/run/). We don't recommend using plaintext environment variables for sensitive information, such as credential data. Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public var environment: [BatchClientTypes.KeyValuePair]?
        /// The Amazon Resource Name (ARN) of the execution role that Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the Batch User Guide.
        public var executionRoleArn: Swift.String?
        /// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
        public var fargatePlatformConfiguration: BatchClientTypes.FargatePlatformConfiguration?
        /// The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with  repository-url/image:tag . It can be 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), underscores (_), colons (:), periods (.), forward slashes (/), and number signs (#). This parameter maps to Image in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the IMAGE parameter of [docker run](https://docs.docker.com/engine/reference/run/). Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.
        ///
        /// * Images in Amazon ECR Public repositories use the full registry/repository[:tag] or registry/repository[@digest] naming conventions. For example, public.ecr.aws/registry_alias/my-web-app:latest .
        ///
        /// * Images in Amazon ECR repositories use the full registry and repository URI (for example, 123456789012.dkr.ecr..amazonaws.com/).
        ///
        /// * Images in official repositories on Docker Hub use a single name (for example, ubuntu or mongo).
        ///
        /// * Images in other repositories on Docker Hub are qualified with an organization name (for example, amazon/amazon-ecs-agent).
        ///
        /// * Images in other online repositories are qualified further by a domain name (for example, quay.io/assemblyline/ubuntu).
        public var image: Swift.String?
        /// The instance type to use for a multi-node parallel job. All node groups in a multi-node parallel job must use the same instance type. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
        public var instanceType: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that the container can assume for Amazon Web Services permissions. For more information, see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the Amazon Elastic Container Service Developer Guide.
        public var jobRoleArn: Swift.String?
        /// Linux-specific modifications that are applied to the container, such as details for device mappings.
        public var linuxParameters: BatchClientTypes.LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --log-driver option to [docker run](https://docs.docker.com/engine/reference/run/). By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation. Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration] data type). This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version" The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide.
        public var logConfiguration: BatchClientTypes.LogConfiguration?
        /// This parameter is deprecated, use resourceRequirements to specify the memory requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on EC2 resources, it specifies the memory hard limit (in MiB) for a container. If your container attempts to exceed the specified number, it's terminated. You must specify at least 4 MiB of memory for a job using this parameter. The memory hard limit can be specified in several places. It must be specified for each node at least once.
        @available(*, deprecated, message: "This field is deprecated, use resourceRequirements instead.")
        public var memory: Swift.Int?
        /// The mount points for data volumes in your container. This parameter maps to Volumes in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --volume option to [docker run](https://docs.docker.com/engine/reference/run/).
        public var mountPoints: [BatchClientTypes.MountPoint]?
        /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
        public var networkConfiguration: BatchClientTypes.NetworkConfiguration?
        /// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user). This parameter maps to Privileged in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --privileged option to [docker run](https://docs.docker.com/engine/reference/run/). The default value is false. This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
        public var privileged: Swift.Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --read-only option to docker run.
        public var readonlyRootFilesystem: Swift.Bool?
        /// The type and amount of resources to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
        public var resourceRequirements: [BatchClientTypes.ResourceRequirement]?
        /// The secrets for the container. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
        public var secrets: [BatchClientTypes.Secret]?
        /// A list of ulimits to set in the container. This parameter maps to Ulimits in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --ulimit option to [docker run](https://docs.docker.com/engine/reference/run/). This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
        public var ulimits: [BatchClientTypes.Ulimit]?
        /// The user name to use inside the container. This parameter maps to User in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --user option to [docker run](https://docs.docker.com/engine/reference/run/).
        public var user: Swift.String?
        /// This parameter is deprecated, use resourceRequirements to specify the vCPU requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs running on EC2 resources, it specifies the number of vCPUs reserved for the job. Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to CpuShares in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --cpu-shares option to [docker run](https://docs.docker.com/engine/reference/run/). The number of vCPUs must be specified but can be specified in several places. You must specify it at least once for each node.
        @available(*, deprecated, message: "This field is deprecated, use resourceRequirements instead.")
        public var vcpus: Swift.Int?
        /// A list of data volumes used in a job.
        public var volumes: [BatchClientTypes.Volume]?

        public init (
            command: [Swift.String]? = nil,
            environment: [BatchClientTypes.KeyValuePair]? = nil,
            executionRoleArn: Swift.String? = nil,
            fargatePlatformConfiguration: BatchClientTypes.FargatePlatformConfiguration? = nil,
            image: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            jobRoleArn: Swift.String? = nil,
            linuxParameters: BatchClientTypes.LinuxParameters? = nil,
            logConfiguration: BatchClientTypes.LogConfiguration? = nil,
            memory: Swift.Int? = nil,
            mountPoints: [BatchClientTypes.MountPoint]? = nil,
            networkConfiguration: BatchClientTypes.NetworkConfiguration? = nil,
            privileged: Swift.Bool? = nil,
            readonlyRootFilesystem: Swift.Bool? = nil,
            resourceRequirements: [BatchClientTypes.ResourceRequirement]? = nil,
            secrets: [BatchClientTypes.Secret]? = nil,
            ulimits: [BatchClientTypes.Ulimit]? = nil,
            user: Swift.String? = nil,
            vcpus: Swift.Int? = nil,
            volumes: [BatchClientTypes.Volume]? = nil
        )
        {
            self.command = command
            self.environment = environment
            self.executionRoleArn = executionRoleArn
            self.fargatePlatformConfiguration = fargatePlatformConfiguration
            self.image = image
            self.instanceType = instanceType
            self.jobRoleArn = jobRoleArn
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.memory = memory
            self.mountPoints = mountPoints
            self.networkConfiguration = networkConfiguration
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.resourceRequirements = resourceRequirements
            self.secrets = secrets
            self.ulimits = ulimits
            self.user = user
            self.vcpus = vcpus
            self.volumes = volumes
        }
    }

}

extension BatchClientTypes.ContainerSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exitCode
        case reason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exitCode = self.exitCode {
            try encodeContainer.encode(exitCode, forKey: .exitCode)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exitCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .exitCode)
        exitCode = exitCodeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents summary details of a container within a job.
    public struct ContainerSummary: Swift.Equatable {
        /// The exit code to return upon completion.
        public var exitCode: Swift.Int?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public var reason: Swift.String?

        public init (
            exitCode: Swift.Int? = nil,
            reason: Swift.String? = nil
        )
        {
            self.exitCode = exitCode
            self.reason = reason
        }
    }

}

extension CreateComputeEnvironmentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentName
        case computeResources
        case eksConfiguration
        case serviceRole
        case state
        case tags
        case type
        case unmanagedvCpus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentName = self.computeEnvironmentName {
            try encodeContainer.encode(computeEnvironmentName, forKey: .computeEnvironmentName)
        }
        if let computeResources = self.computeResources {
            try encodeContainer.encode(computeResources, forKey: .computeResources)
        }
        if let eksConfiguration = self.eksConfiguration {
            try encodeContainer.encode(eksConfiguration, forKey: .eksConfiguration)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagrisTagsMap0) in tags {
                try tagsContainer.encode(tagrisTagsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let unmanagedvCpus = self.unmanagedvCpus {
            try encodeContainer.encode(unmanagedvCpus, forKey: .unmanagedvCpus)
        }
    }
}

extension CreateComputeEnvironmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/createcomputeenvironment"
    }
}

/// Contains the parameters for CreateComputeEnvironment.
public struct CreateComputeEnvironmentInput: Swift.Equatable {
    /// The name for your compute environment. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    /// This member is required.
    public var computeEnvironmentName: Swift.String?
    /// Details about the compute resources managed by the compute environment. This parameter is required for managed compute environments. For more information, see [Compute Environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
    public var computeResources: BatchClientTypes.ComputeResource?
    /// The details for the Amazon EKS cluster that supports the compute environment.
    public var eksConfiguration: BatchClientTypes.EksConfiguration?
    /// The full Amazon Resource Name (ARN) of the IAM role that allows Batch to make calls to other Amazon Web Services services on your behalf. For more information, see [Batch service IAM role](https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html) in the Batch User Guide. If your account already created the Batch service-linked role, that role is used by default for your compute environment unless you specify a different role here. If the Batch service-linked role doesn't exist in your account, and no role is specified here, the service attempts to create the Batch service-linked role in your account. If your specified role has a path other than /, then you must specify either the full role ARN (recommended) or prefix the role name with the path. For example, if a role with the name bar has a path of /foo/, specify /foo/bar as the role name. For more information, see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names) in the IAM User Guide. Depending on how you created your Batch service role, its ARN might contain the service-role path prefix. When you only specify the name of the service role, Batch assumes that your ARN doesn't use the service-role path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.
    public var serviceRole: Swift.String?
    /// The state of the compute environment. If the state is ENABLED, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically, based on the job queue demand. If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out. However, they scale in to minvCpus value after instances become idle.
    public var state: BatchClientTypes.CEState?
    /// The tags that you apply to the compute environment to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in Amazon Web Services General Reference. These tags can be updated or removed using the [TagResource](https://docs.aws.amazon.com/batch/latest/APIReference/API_TagResource.html) and [UntagResource](https://docs.aws.amazon.com/batch/latest/APIReference/API_UntagResource.html) API operations. These tags don't propagate to the underlying compute resources.
    public var tags: [Swift.String:Swift.String]?
    /// The type of the compute environment: MANAGED or UNMANAGED. For more information, see [Compute Environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
    /// This member is required.
    public var type: BatchClientTypes.CEType?
    /// The maximum number of vCPUs for an unmanaged compute environment. This parameter is only used for fair share scheduling to reserve vCPU capacity for new share identifiers. If this parameter isn't provided for a fair share job queue, no vCPU capacity is reserved. This parameter is only supported when the type parameter is set to UNMANAGED.
    public var unmanagedvCpus: Swift.Int?

    public init (
        computeEnvironmentName: Swift.String? = nil,
        computeResources: BatchClientTypes.ComputeResource? = nil,
        eksConfiguration: BatchClientTypes.EksConfiguration? = nil,
        serviceRole: Swift.String? = nil,
        state: BatchClientTypes.CEState? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        type: BatchClientTypes.CEType? = nil,
        unmanagedvCpus: Swift.Int? = nil
    )
    {
        self.computeEnvironmentName = computeEnvironmentName
        self.computeResources = computeResources
        self.eksConfiguration = eksConfiguration
        self.serviceRole = serviceRole
        self.state = state
        self.tags = tags
        self.type = type
        self.unmanagedvCpus = unmanagedvCpus
    }
}

struct CreateComputeEnvironmentInputBody: Swift.Equatable {
    let computeEnvironmentName: Swift.String?
    let type: BatchClientTypes.CEType?
    let state: BatchClientTypes.CEState?
    let unmanagedvCpus: Swift.Int?
    let computeResources: BatchClientTypes.ComputeResource?
    let serviceRole: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let eksConfiguration: BatchClientTypes.EksConfiguration?
}

extension CreateComputeEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentName
        case computeResources
        case eksConfiguration
        case serviceRole
        case state
        case tags
        case type
        case unmanagedvCpus
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentName)
        computeEnvironmentName = computeEnvironmentNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEType.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEState.self, forKey: .state)
        state = stateDecoded
        let unmanagedvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unmanagedvCpus)
        unmanagedvCpus = unmanagedvCpusDecoded
        let computeResourcesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ComputeResource.self, forKey: .computeResources)
        computeResources = computeResourcesDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let eksConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksConfiguration.self, forKey: .eksConfiguration)
        eksConfiguration = eksConfigurationDecoded
    }
}

extension CreateComputeEnvironmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateComputeEnvironmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateComputeEnvironmentOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateComputeEnvironmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateComputeEnvironmentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeEnvironmentArn = output.computeEnvironmentArn
            self.computeEnvironmentName = output.computeEnvironmentName
        } else {
            self.computeEnvironmentArn = nil
            self.computeEnvironmentName = nil
        }
    }
}

public struct CreateComputeEnvironmentOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the compute environment.
    public var computeEnvironmentArn: Swift.String?
    /// The name of the compute environment. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    public var computeEnvironmentName: Swift.String?

    public init (
        computeEnvironmentArn: Swift.String? = nil,
        computeEnvironmentName: Swift.String? = nil
    )
    {
        self.computeEnvironmentArn = computeEnvironmentArn
        self.computeEnvironmentName = computeEnvironmentName
    }
}

struct CreateComputeEnvironmentOutputResponseBody: Swift.Equatable {
    let computeEnvironmentName: Swift.String?
    let computeEnvironmentArn: Swift.String?
}

extension CreateComputeEnvironmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentArn
        case computeEnvironmentName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentName)
        computeEnvironmentName = computeEnvironmentNameDecoded
        let computeEnvironmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentArn)
        computeEnvironmentArn = computeEnvironmentArnDecoded
    }
}

extension CreateJobQueueInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentOrder
        case jobQueueName
        case priority
        case schedulingPolicyArn
        case state
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentOrder = computeEnvironmentOrder {
            var computeEnvironmentOrderContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computeEnvironmentOrder)
            for computeenvironmentorder0 in computeEnvironmentOrder {
                try computeEnvironmentOrderContainer.encode(computeenvironmentorder0)
            }
        }
        if let jobQueueName = self.jobQueueName {
            try encodeContainer.encode(jobQueueName, forKey: .jobQueueName)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let schedulingPolicyArn = self.schedulingPolicyArn {
            try encodeContainer.encode(schedulingPolicyArn, forKey: .schedulingPolicyArn)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagrisTagsMap0) in tags {
                try tagsContainer.encode(tagrisTagsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateJobQueueInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/createjobqueue"
    }
}

/// Contains the parameters for CreateJobQueue.
public struct CreateJobQueueInput: Swift.Equatable {
    /// The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment runs a specific job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to three compute environments with a job queue. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); EC2 and Fargate compute environments can't be mixed. All compute environments that are associated with a job queue must share the same architecture. Batch doesn't support mixing compute environment architecture types in a single job queue.
    /// This member is required.
    public var computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
    /// The name of the job queue. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    /// This member is required.
    public var jobQueueName: Swift.String?
    /// The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order. For example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); EC2 and Fargate compute environments can't be mixed.
    /// This member is required.
    public var priority: Swift.Int?
    /// The Amazon Resource Name (ARN) of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . An example is aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy.
    public var schedulingPolicyArn: Swift.String?
    /// The state of the job queue. If the job queue state is ENABLED, it is able to accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
    public var state: BatchClientTypes.JQState?
    /// The tags that you apply to the job queue to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging your Batch resources](https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html) in Batch User Guide.
    public var tags: [Swift.String:Swift.String]?

    public init (
        computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]? = nil,
        jobQueueName: Swift.String? = nil,
        priority: Swift.Int? = nil,
        schedulingPolicyArn: Swift.String? = nil,
        state: BatchClientTypes.JQState? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.computeEnvironmentOrder = computeEnvironmentOrder
        self.jobQueueName = jobQueueName
        self.priority = priority
        self.schedulingPolicyArn = schedulingPolicyArn
        self.state = state
        self.tags = tags
    }
}

struct CreateJobQueueInputBody: Swift.Equatable {
    let jobQueueName: Swift.String?
    let state: BatchClientTypes.JQState?
    let schedulingPolicyArn: Swift.String?
    let priority: Swift.Int?
    let computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
    let tags: [Swift.String:Swift.String]?
}

extension CreateJobQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentOrder
        case jobQueueName
        case priority
        case schedulingPolicyArn
        case state
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueName)
        jobQueueName = jobQueueNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JQState.self, forKey: .state)
        state = stateDecoded
        let schedulingPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedulingPolicyArn)
        schedulingPolicyArn = schedulingPolicyArnDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let computeEnvironmentOrderContainer = try containerValues.decodeIfPresent([BatchClientTypes.ComputeEnvironmentOrder?].self, forKey: .computeEnvironmentOrder)
        var computeEnvironmentOrderDecoded0:[BatchClientTypes.ComputeEnvironmentOrder]? = nil
        if let computeEnvironmentOrderContainer = computeEnvironmentOrderContainer {
            computeEnvironmentOrderDecoded0 = [BatchClientTypes.ComputeEnvironmentOrder]()
            for structure0 in computeEnvironmentOrderContainer {
                if let structure0 = structure0 {
                    computeEnvironmentOrderDecoded0?.append(structure0)
                }
            }
        }
        computeEnvironmentOrder = computeEnvironmentOrderDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateJobQueueOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateJobQueueOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateJobQueueOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateJobQueueOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateJobQueueOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobQueueArn = output.jobQueueArn
            self.jobQueueName = output.jobQueueName
        } else {
            self.jobQueueArn = nil
            self.jobQueueName = nil
        }
    }
}

public struct CreateJobQueueOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the job queue.
    /// This member is required.
    public var jobQueueArn: Swift.String?
    /// The name of the job queue.
    /// This member is required.
    public var jobQueueName: Swift.String?

    public init (
        jobQueueArn: Swift.String? = nil,
        jobQueueName: Swift.String? = nil
    )
    {
        self.jobQueueArn = jobQueueArn
        self.jobQueueName = jobQueueName
    }
}

struct CreateJobQueueOutputResponseBody: Swift.Equatable {
    let jobQueueName: Swift.String?
    let jobQueueArn: Swift.String?
}

extension CreateJobQueueOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueueArn
        case jobQueueName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueName)
        jobQueueName = jobQueueNameDecoded
        let jobQueueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueArn)
        jobQueueArn = jobQueueArnDecoded
    }
}

extension CreateSchedulingPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fairsharePolicy
        case name
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fairsharePolicy = self.fairsharePolicy {
            try encodeContainer.encode(fairsharePolicy, forKey: .fairsharePolicy)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagrisTagsMap0) in tags {
                try tagsContainer.encode(tagrisTagsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateSchedulingPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/createschedulingpolicy"
    }
}

/// Contains the parameters for CreateSchedulingPolicy.
public struct CreateSchedulingPolicyInput: Swift.Equatable {
    /// The fair share policy of the scheduling policy.
    public var fairsharePolicy: BatchClientTypes.FairsharePolicy?
    /// The name of the scheduling policy. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    /// This member is required.
    public var name: Swift.String?
    /// The tags that you apply to the scheduling policy to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in Amazon Web Services General Reference. These tags can be updated or removed using the [TagResource](https://docs.aws.amazon.com/batch/latest/APIReference/API_TagResource.html) and [UntagResource](https://docs.aws.amazon.com/batch/latest/APIReference/API_UntagResource.html) API operations.
    public var tags: [Swift.String:Swift.String]?

    public init (
        fairsharePolicy: BatchClientTypes.FairsharePolicy? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.fairsharePolicy = fairsharePolicy
        self.name = name
        self.tags = tags
    }
}

struct CreateSchedulingPolicyInputBody: Swift.Equatable {
    let name: Swift.String?
    let fairsharePolicy: BatchClientTypes.FairsharePolicy?
    let tags: [Swift.String:Swift.String]?
}

extension CreateSchedulingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fairsharePolicy
        case name
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let fairsharePolicyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.FairsharePolicy.self, forKey: .fairsharePolicy)
        fairsharePolicy = fairsharePolicyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateSchedulingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSchedulingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateSchedulingPolicyOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSchedulingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateSchedulingPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.name = output.name
        } else {
            self.arn = nil
            self.name = nil
        }
    }
}

public struct CreateSchedulingPolicyOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the scheduling policy. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . For example, aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy.
    /// This member is required.
    public var arn: Swift.String?
    /// The name of the scheduling policy.
    /// This member is required.
    public var name: Swift.String?

    public init (
        arn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
    }
}

struct CreateSchedulingPolicyOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let arn: Swift.String?
}

extension CreateSchedulingPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension DeleteComputeEnvironmentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironment
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironment = self.computeEnvironment {
            try encodeContainer.encode(computeEnvironment, forKey: .computeEnvironment)
        }
    }
}

extension DeleteComputeEnvironmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/deletecomputeenvironment"
    }
}

/// Contains the parameters for DeleteComputeEnvironment.
public struct DeleteComputeEnvironmentInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of the compute environment to delete.
    /// This member is required.
    public var computeEnvironment: Swift.String?

    public init (
        computeEnvironment: Swift.String? = nil
    )
    {
        self.computeEnvironment = computeEnvironment
    }
}

struct DeleteComputeEnvironmentInputBody: Swift.Equatable {
    let computeEnvironment: Swift.String?
}

extension DeleteComputeEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironment
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironment)
        computeEnvironment = computeEnvironmentDecoded
    }
}

extension DeleteComputeEnvironmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteComputeEnvironmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteComputeEnvironmentOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteComputeEnvironmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteComputeEnvironmentOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteJobQueueInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobQueue = self.jobQueue {
            try encodeContainer.encode(jobQueue, forKey: .jobQueue)
        }
    }
}

extension DeleteJobQueueInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/deletejobqueue"
    }
}

/// Contains the parameters for DeleteJobQueue.
public struct DeleteJobQueueInput: Swift.Equatable {
    /// The short name or full Amazon Resource Name (ARN) of the queue to delete.
    /// This member is required.
    public var jobQueue: Swift.String?

    public init (
        jobQueue: Swift.String? = nil
    )
    {
        self.jobQueue = jobQueue
    }
}

struct DeleteJobQueueInputBody: Swift.Equatable {
    let jobQueue: Swift.String?
}

extension DeleteJobQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueue
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueue)
        jobQueue = jobQueueDecoded
    }
}

extension DeleteJobQueueOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteJobQueueOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteJobQueueOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteJobQueueOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteJobQueueOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteSchedulingPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }
}

extension DeleteSchedulingPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/deleteschedulingpolicy"
    }
}

/// Contains the parameters for DeleteSchedulingPolicy.
public struct DeleteSchedulingPolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the scheduling policy to delete.
    /// This member is required.
    public var arn: Swift.String?

    public init (
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

struct DeleteSchedulingPolicyInputBody: Swift.Equatable {
    let arn: Swift.String?
}

extension DeleteSchedulingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension DeleteSchedulingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSchedulingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteSchedulingPolicyOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSchedulingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSchedulingPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeregisterJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinition
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinition = self.jobDefinition {
            try encodeContainer.encode(jobDefinition, forKey: .jobDefinition)
        }
    }
}

extension DeregisterJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/deregisterjobdefinition"
    }
}

public struct DeregisterJobDefinitionInput: Swift.Equatable {
    /// The name and revision (name:revision) or full Amazon Resource Name (ARN) of the job definition to deregister.
    /// This member is required.
    public var jobDefinition: Swift.String?

    public init (
        jobDefinition: Swift.String? = nil
    )
    {
        self.jobDefinition = jobDefinition
    }
}

struct DeregisterJobDefinitionInputBody: Swift.Equatable {
    let jobDefinition: Swift.String?
}

extension DeregisterJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinition
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinition)
        jobDefinition = jobDefinitionDecoded
    }
}

extension DeregisterJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeregisterJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterJobDefinitionOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeComputeEnvironmentsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironments
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironments = computeEnvironments {
            var computeEnvironmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computeEnvironments)
            for string0 in computeEnvironments {
                try computeEnvironmentsContainer.encode(string0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeComputeEnvironmentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/describecomputeenvironments"
    }
}

/// Contains the parameters for DescribeComputeEnvironments.
public struct DescribeComputeEnvironmentsInput: Swift.Equatable {
    /// A list of up to 100 compute environment names or full Amazon Resource Name (ARN) entries.
    public var computeEnvironments: [Swift.String]?
    /// The maximum number of cluster results returned by DescribeComputeEnvironments in paginated output. When this parameter is used, DescribeComputeEnvironments only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeComputeEnvironments request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then DescribeComputeEnvironments returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated DescribeComputeEnvironments request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init (
        computeEnvironments: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.computeEnvironments = computeEnvironments
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeComputeEnvironmentsInputBody: Swift.Equatable {
    let computeEnvironments: [Swift.String]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeComputeEnvironmentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironments
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .computeEnvironments)
        var computeEnvironmentsDecoded0:[Swift.String]? = nil
        if let computeEnvironmentsContainer = computeEnvironmentsContainer {
            computeEnvironmentsDecoded0 = [Swift.String]()
            for string0 in computeEnvironmentsContainer {
                if let string0 = string0 {
                    computeEnvironmentsDecoded0?.append(string0)
                }
            }
        }
        computeEnvironments = computeEnvironmentsDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeComputeEnvironmentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeComputeEnvironmentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeComputeEnvironmentsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeComputeEnvironmentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeComputeEnvironmentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeEnvironments = output.computeEnvironments
            self.nextToken = output.nextToken
        } else {
            self.computeEnvironments = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeComputeEnvironmentsOutputResponse: Swift.Equatable {
    /// The list of compute environments.
    public var computeEnvironments: [BatchClientTypes.ComputeEnvironmentDetail]?
    /// The nextToken value to include in a future DescribeComputeEnvironments request. When the results of a DescribeComputeEnvironments request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init (
        computeEnvironments: [BatchClientTypes.ComputeEnvironmentDetail]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.computeEnvironments = computeEnvironments
        self.nextToken = nextToken
    }
}

struct DescribeComputeEnvironmentsOutputResponseBody: Swift.Equatable {
    let computeEnvironments: [BatchClientTypes.ComputeEnvironmentDetail]?
    let nextToken: Swift.String?
}

extension DescribeComputeEnvironmentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironments
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentsContainer = try containerValues.decodeIfPresent([BatchClientTypes.ComputeEnvironmentDetail?].self, forKey: .computeEnvironments)
        var computeEnvironmentsDecoded0:[BatchClientTypes.ComputeEnvironmentDetail]? = nil
        if let computeEnvironmentsContainer = computeEnvironmentsContainer {
            computeEnvironmentsDecoded0 = [BatchClientTypes.ComputeEnvironmentDetail]()
            for structure0 in computeEnvironmentsContainer {
                if let structure0 = structure0 {
                    computeEnvironmentsDecoded0?.append(structure0)
                }
            }
        }
        computeEnvironments = computeEnvironmentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeJobDefinitionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName
        case jobDefinitions
        case maxResults
        case nextToken
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobDefinitionName = self.jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let jobDefinitions = jobDefinitions {
            var jobDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobDefinitions)
            for string0 in jobDefinitions {
                try jobDefinitionsContainer.encode(string0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }
}

extension DescribeJobDefinitionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/describejobdefinitions"
    }
}

/// Contains the parameters for DescribeJobDefinitions.
public struct DescribeJobDefinitionsInput: Swift.Equatable {
    /// The name of the job definition to describe.
    public var jobDefinitionName: Swift.String?
    /// A list of up to 100 job definitions. Each entry in the list can either be an ARN in the format arn:aws:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision} or a short version using the form ${JobDefinitionName}:${Revision}.
    public var jobDefinitions: [Swift.String]?
    /// The maximum number of results returned by DescribeJobDefinitions in paginated output. When this parameter is used, DescribeJobDefinitions only returns maxResults results in a single page and a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeJobDefinitions request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then DescribeJobDefinitions returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated DescribeJobDefinitions request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The status used to filter job definitions.
    public var status: Swift.String?

    public init (
        jobDefinitionName: Swift.String? = nil,
        jobDefinitions: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
        self.jobDefinitions = jobDefinitions
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct DescribeJobDefinitionsInputBody: Swift.Equatable {
    let jobDefinitions: [Swift.String]?
    let maxResults: Swift.Int?
    let jobDefinitionName: Swift.String?
    let status: Swift.String?
    let nextToken: Swift.String?
}

extension DescribeJobDefinitionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName
        case jobDefinitions
        case maxResults
        case nextToken
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobDefinitions)
        var jobDefinitionsDecoded0:[Swift.String]? = nil
        if let jobDefinitionsContainer = jobDefinitionsContainer {
            jobDefinitionsDecoded0 = [Swift.String]()
            for string0 in jobDefinitionsContainer {
                if let string0 = string0 {
                    jobDefinitionsDecoded0?.append(string0)
                }
            }
        }
        jobDefinitions = jobDefinitionsDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeJobDefinitionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeJobDefinitionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeJobDefinitionsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeJobDefinitionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeJobDefinitionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDefinitions = output.jobDefinitions
            self.nextToken = output.nextToken
        } else {
            self.jobDefinitions = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeJobDefinitionsOutputResponse: Swift.Equatable {
    /// The list of job definitions.
    public var jobDefinitions: [BatchClientTypes.JobDefinition]?
    /// The nextToken value to include in a future DescribeJobDefinitions request. When the results of a DescribeJobDefinitions request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init (
        jobDefinitions: [BatchClientTypes.JobDefinition]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobDefinitions = jobDefinitions
        self.nextToken = nextToken
    }
}

struct DescribeJobDefinitionsOutputResponseBody: Swift.Equatable {
    let jobDefinitions: [BatchClientTypes.JobDefinition]?
    let nextToken: Swift.String?
}

extension DescribeJobDefinitionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitions
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionsContainer = try containerValues.decodeIfPresent([BatchClientTypes.JobDefinition?].self, forKey: .jobDefinitions)
        var jobDefinitionsDecoded0:[BatchClientTypes.JobDefinition]? = nil
        if let jobDefinitionsContainer = jobDefinitionsContainer {
            jobDefinitionsDecoded0 = [BatchClientTypes.JobDefinition]()
            for structure0 in jobDefinitionsContainer {
                if let structure0 = structure0 {
                    jobDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        jobDefinitions = jobDefinitionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeJobQueuesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueues
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobQueues = jobQueues {
            var jobQueuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobQueues)
            for string0 in jobQueues {
                try jobQueuesContainer.encode(string0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeJobQueuesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/describejobqueues"
    }
}

/// Contains the parameters for DescribeJobQueues.
public struct DescribeJobQueuesInput: Swift.Equatable {
    /// A list of up to 100 queue names or full queue Amazon Resource Name (ARN) entries.
    public var jobQueues: [Swift.String]?
    /// The maximum number of results returned by DescribeJobQueues in paginated output. When this parameter is used, DescribeJobQueues only returns maxResults results in a single page and a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeJobQueues request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then DescribeJobQueues returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated DescribeJobQueues request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init (
        jobQueues: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobQueues = jobQueues
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeJobQueuesInputBody: Swift.Equatable {
    let jobQueues: [Swift.String]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeJobQueuesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueues
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobQueues)
        var jobQueuesDecoded0:[Swift.String]? = nil
        if let jobQueuesContainer = jobQueuesContainer {
            jobQueuesDecoded0 = [Swift.String]()
            for string0 in jobQueuesContainer {
                if let string0 = string0 {
                    jobQueuesDecoded0?.append(string0)
                }
            }
        }
        jobQueues = jobQueuesDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeJobQueuesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeJobQueuesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeJobQueuesOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeJobQueuesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeJobQueuesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobQueues = output.jobQueues
            self.nextToken = output.nextToken
        } else {
            self.jobQueues = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeJobQueuesOutputResponse: Swift.Equatable {
    /// The list of job queues.
    public var jobQueues: [BatchClientTypes.JobQueueDetail]?
    /// The nextToken value to include in a future DescribeJobQueues request. When the results of a DescribeJobQueues request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init (
        jobQueues: [BatchClientTypes.JobQueueDetail]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobQueues = jobQueues
        self.nextToken = nextToken
    }
}

struct DescribeJobQueuesOutputResponseBody: Swift.Equatable {
    let jobQueues: [BatchClientTypes.JobQueueDetail]?
    let nextToken: Swift.String?
}

extension DescribeJobQueuesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueues
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueuesContainer = try containerValues.decodeIfPresent([BatchClientTypes.JobQueueDetail?].self, forKey: .jobQueues)
        var jobQueuesDecoded0:[BatchClientTypes.JobQueueDetail]? = nil
        if let jobQueuesContainer = jobQueuesContainer {
            jobQueuesDecoded0 = [BatchClientTypes.JobQueueDetail]()
            for structure0 in jobQueuesContainer {
                if let structure0 = structure0 {
                    jobQueuesDecoded0?.append(structure0)
                }
            }
        }
        jobQueues = jobQueuesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobs
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobs = jobs {
            var jobsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobs)
            for string0 in jobs {
                try jobsContainer.encode(string0)
            }
        }
    }
}

extension DescribeJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/describejobs"
    }
}

/// Contains the parameters for DescribeJobs.
public struct DescribeJobsInput: Swift.Equatable {
    /// A list of up to 100 job IDs.
    /// This member is required.
    public var jobs: [Swift.String]?

    public init (
        jobs: [Swift.String]? = nil
    )
    {
        self.jobs = jobs
    }
}

struct DescribeJobsInputBody: Swift.Equatable {
    let jobs: [Swift.String]?
}

extension DescribeJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobs
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobs)
        var jobsDecoded0:[Swift.String]? = nil
        if let jobsContainer = jobsContainer {
            jobsDecoded0 = [Swift.String]()
            for string0 in jobsContainer {
                if let string0 = string0 {
                    jobsDecoded0?.append(string0)
                }
            }
        }
        jobs = jobsDecoded0
    }
}

extension DescribeJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeJobsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobs = output.jobs
        } else {
            self.jobs = nil
        }
    }
}

public struct DescribeJobsOutputResponse: Swift.Equatable {
    /// The list of jobs.
    public var jobs: [BatchClientTypes.JobDetail]?

    public init (
        jobs: [BatchClientTypes.JobDetail]? = nil
    )
    {
        self.jobs = jobs
    }
}

struct DescribeJobsOutputResponseBody: Swift.Equatable {
    let jobs: [BatchClientTypes.JobDetail]?
}

extension DescribeJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobs
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobsContainer = try containerValues.decodeIfPresent([BatchClientTypes.JobDetail?].self, forKey: .jobs)
        var jobsDecoded0:[BatchClientTypes.JobDetail]? = nil
        if let jobsContainer = jobsContainer {
            jobsDecoded0 = [BatchClientTypes.JobDetail]()
            for structure0 in jobsContainer {
                if let structure0 = structure0 {
                    jobsDecoded0?.append(structure0)
                }
            }
        }
        jobs = jobsDecoded0
    }
}

extension DescribeSchedulingPoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arns = arns {
            var arnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .arns)
            for string0 in arns {
                try arnsContainer.encode(string0)
            }
        }
    }
}

extension DescribeSchedulingPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/describeschedulingpolicies"
    }
}

/// Contains the parameters for DescribeSchedulingPolicies.
public struct DescribeSchedulingPoliciesInput: Swift.Equatable {
    /// A list of up to 100 scheduling policy Amazon Resource Name (ARN) entries.
    /// This member is required.
    public var arns: [Swift.String]?

    public init (
        arns: [Swift.String]? = nil
    )
    {
        self.arns = arns
    }
}

struct DescribeSchedulingPoliciesInputBody: Swift.Equatable {
    let arns: [Swift.String]?
}

extension DescribeSchedulingPoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arns
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .arns)
        var arnsDecoded0:[Swift.String]? = nil
        if let arnsContainer = arnsContainer {
            arnsDecoded0 = [Swift.String]()
            for string0 in arnsContainer {
                if let string0 = string0 {
                    arnsDecoded0?.append(string0)
                }
            }
        }
        arns = arnsDecoded0
    }
}

extension DescribeSchedulingPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeSchedulingPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeSchedulingPoliciesOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSchedulingPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeSchedulingPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.schedulingPolicies = output.schedulingPolicies
        } else {
            self.schedulingPolicies = nil
        }
    }
}

public struct DescribeSchedulingPoliciesOutputResponse: Swift.Equatable {
    /// The list of scheduling policies.
    public var schedulingPolicies: [BatchClientTypes.SchedulingPolicyDetail]?

    public init (
        schedulingPolicies: [BatchClientTypes.SchedulingPolicyDetail]? = nil
    )
    {
        self.schedulingPolicies = schedulingPolicies
    }
}

struct DescribeSchedulingPoliciesOutputResponseBody: Swift.Equatable {
    let schedulingPolicies: [BatchClientTypes.SchedulingPolicyDetail]?
}

extension DescribeSchedulingPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schedulingPolicies
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schedulingPoliciesContainer = try containerValues.decodeIfPresent([BatchClientTypes.SchedulingPolicyDetail?].self, forKey: .schedulingPolicies)
        var schedulingPoliciesDecoded0:[BatchClientTypes.SchedulingPolicyDetail]? = nil
        if let schedulingPoliciesContainer = schedulingPoliciesContainer {
            schedulingPoliciesDecoded0 = [BatchClientTypes.SchedulingPolicyDetail]()
            for structure0 in schedulingPoliciesContainer {
                if let structure0 = structure0 {
                    schedulingPoliciesDecoded0?.append(structure0)
                }
            }
        }
        schedulingPolicies = schedulingPoliciesDecoded0
    }
}

extension BatchClientTypes.Device: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerPath
        case hostPath
        case permissions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerPath = self.containerPath {
            try encodeContainer.encode(containerPath, forKey: .containerPath)
        }
        if let hostPath = self.hostPath {
            try encodeContainer.encode(hostPath, forKey: .hostPath)
        }
        if let permissions = permissions {
            var permissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permissions)
            for devicecgrouppermission0 in permissions {
                try permissionsContainer.encode(devicecgrouppermission0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostPath)
        hostPath = hostPathDecoded
        let containerPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerPath)
        containerPath = containerPathDecoded
        let permissionsContainer = try containerValues.decodeIfPresent([BatchClientTypes.DeviceCgroupPermission?].self, forKey: .permissions)
        var permissionsDecoded0:[BatchClientTypes.DeviceCgroupPermission]? = nil
        if let permissionsContainer = permissionsContainer {
            permissionsDecoded0 = [BatchClientTypes.DeviceCgroupPermission]()
            for enum0 in permissionsContainer {
                if let enum0 = enum0 {
                    permissionsDecoded0?.append(enum0)
                }
            }
        }
        permissions = permissionsDecoded0
    }
}

extension BatchClientTypes {
    /// An object that represents a container instance host device. This object isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
    public struct Device: Swift.Equatable {
        /// The path inside the container that's used to expose the host device. By default, the hostPath value is used.
        public var containerPath: Swift.String?
        /// The path for the device on the host container instance.
        /// This member is required.
        public var hostPath: Swift.String?
        /// The explicit permissions to provide to the container for the device. By default, the container has permissions for read, write, and mknod for the device.
        public var permissions: [BatchClientTypes.DeviceCgroupPermission]?

        public init (
            containerPath: Swift.String? = nil,
            hostPath: Swift.String? = nil,
            permissions: [BatchClientTypes.DeviceCgroupPermission]? = nil
        )
        {
            self.containerPath = containerPath
            self.hostPath = hostPath
            self.permissions = permissions
        }
    }

}

extension BatchClientTypes {
    public enum DeviceCgroupPermission: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mknod
        case read
        case write
        case sdkUnknown(Swift.String)

        public static var allCases: [DeviceCgroupPermission] {
            return [
                .mknod,
                .read,
                .write,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mknod: return "MKNOD"
            case .read: return "READ"
            case .write: return "WRITE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeviceCgroupPermission(rawValue: rawValue) ?? DeviceCgroupPermission.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.EFSAuthorizationConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPointId
        case iam
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPointId = self.accessPointId {
            try encodeContainer.encode(accessPointId, forKey: .accessPointId)
        }
        if let iam = self.iam {
            try encodeContainer.encode(iam.rawValue, forKey: .iam)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessPointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPointId)
        accessPointId = accessPointIdDecoded
        let iamDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EFSAuthorizationConfigIAM.self, forKey: .iam)
        iam = iamDecoded
    }
}

extension BatchClientTypes {
    /// The authorization configuration details for the Amazon EFS file system.
    public struct EFSAuthorizationConfig: Swift.Equatable {
        /// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the EFSVolumeConfiguration must either be omitted or set to / which enforces the path set on the EFS access point. If an access point is used, transit encryption must be enabled in the EFSVolumeConfiguration. For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the Amazon Elastic File System User Guide.
        public var accessPointId: Swift.String?
        /// Whether or not to use the Batch job IAM role defined in a job definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. If this parameter is omitted, the default value of DISABLED is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints) in the Batch User Guide. EFS IAM authorization requires that TransitEncryption be ENABLED and that a JobRoleArn is specified.
        public var iam: BatchClientTypes.EFSAuthorizationConfigIAM?

        public init (
            accessPointId: Swift.String? = nil,
            iam: BatchClientTypes.EFSAuthorizationConfigIAM? = nil
        )
        {
            self.accessPointId = accessPointId
            self.iam = iam
        }
    }

}

extension BatchClientTypes {
    public enum EFSAuthorizationConfigIAM: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [EFSAuthorizationConfigIAM] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EFSAuthorizationConfigIAM(rawValue: rawValue) ?? EFSAuthorizationConfigIAM.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum EFSTransitEncryption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [EFSTransitEncryption] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EFSTransitEncryption(rawValue: rawValue) ?? EFSTransitEncryption.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.EFSVolumeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizationConfig
        case fileSystemId
        case rootDirectory
        case transitEncryption
        case transitEncryptionPort
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizationConfig = self.authorizationConfig {
            try encodeContainer.encode(authorizationConfig, forKey: .authorizationConfig)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let rootDirectory = self.rootDirectory {
            try encodeContainer.encode(rootDirectory, forKey: .rootDirectory)
        }
        if let transitEncryption = self.transitEncryption {
            try encodeContainer.encode(transitEncryption.rawValue, forKey: .transitEncryption)
        }
        if let transitEncryptionPort = self.transitEncryptionPort {
            try encodeContainer.encode(transitEncryptionPort, forKey: .transitEncryptionPort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let rootDirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootDirectory)
        rootDirectory = rootDirectoryDecoded
        let transitEncryptionDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EFSTransitEncryption.self, forKey: .transitEncryption)
        transitEncryption = transitEncryptionDecoded
        let transitEncryptionPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transitEncryptionPort)
        transitEncryptionPort = transitEncryptionPortDecoded
        let authorizationConfigDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EFSAuthorizationConfig.self, forKey: .authorizationConfig)
        authorizationConfig = authorizationConfigDecoded
    }
}

extension BatchClientTypes {
    /// This is used when you're using an Amazon Elastic File System file system for job storage. For more information, see [Amazon EFS Volumes](https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html) in the Batch User Guide.
    public struct EFSVolumeConfiguration: Swift.Equatable {
        /// The authorization configuration details for the Amazon EFS file system.
        public var authorizationConfig: BatchClientTypes.EFSAuthorizationConfig?
        /// The Amazon EFS file system ID to use.
        /// This member is required.
        public var fileSystemId: Swift.String?
        /// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume is used instead. Specifying / has the same effect as omitting this parameter. The maximum length is 4,096 characters. If an EFS access point is specified in the authorizationConfig, the root directory parameter must either be omitted or set to /, which enforces the path set on the Amazon EFS access point.
        public var rootDirectory: Swift.String?
        /// Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of DISABLED is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the Amazon Elastic File System User Guide.
        public var transitEncryption: BatchClientTypes.EFSTransitEncryption?
        /// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you don't specify a transit encryption port, it uses the port selection strategy that the Amazon EFS mount helper uses. The value must be between 0 and 65,535. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the Amazon Elastic File System User Guide.
        public var transitEncryptionPort: Swift.Int?

        public init (
            authorizationConfig: BatchClientTypes.EFSAuthorizationConfig? = nil,
            fileSystemId: Swift.String? = nil,
            rootDirectory: Swift.String? = nil,
            transitEncryption: BatchClientTypes.EFSTransitEncryption? = nil,
            transitEncryptionPort: Swift.Int? = nil
        )
        {
            self.authorizationConfig = authorizationConfig
            self.fileSystemId = fileSystemId
            self.rootDirectory = rootDirectory
            self.transitEncryption = transitEncryption
            self.transitEncryptionPort = transitEncryptionPort
        }
    }

}

extension BatchClientTypes.Ec2Configuration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageIdOverride
        case imageKubernetesVersion
        case imageType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let imageIdOverride = self.imageIdOverride {
            try encodeContainer.encode(imageIdOverride, forKey: .imageIdOverride)
        }
        if let imageKubernetesVersion = self.imageKubernetesVersion {
            try encodeContainer.encode(imageKubernetesVersion, forKey: .imageKubernetesVersion)
        }
        if let imageType = self.imageType {
            try encodeContainer.encode(imageType, forKey: .imageType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageType)
        imageType = imageTypeDecoded
        let imageIdOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageIdOverride)
        imageIdOverride = imageIdOverrideDecoded
        let imageKubernetesVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageKubernetesVersion)
        imageKubernetesVersion = imageKubernetesVersionDecoded
    }
}

extension BatchClientTypes {
    /// Provides information used to select Amazon Machine Images (AMIs) for instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2 ([Amazon Linux 2](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami)). This object isn't applicable to jobs that are running on Fargate resources.
    public struct Ec2Configuration: Swift.Equatable {
        /// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the imageId set in the computeResource object. The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the Amazon Elastic Container Service Developer Guide.
        public var imageIdOverride: Swift.String?
        /// The Kubernetes version for the compute environment. If you don't specify a value, the latest version that Batch supports is used.
        public var imageKubernetesVersion: Swift.String?
        /// The image type to match with the instance type to select an AMI. The supported values are different for ECS and EKS resources. ECS If the imageIdOverride parameter isn't specified, then a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) (ECS_AL2) is used. If a new image type is specified in an update, but neither an imageId nor a imageIdOverride parameter is specified, then the latest Amazon ECS optimized AMI for that image type that's supported by Batch is used. ECS_AL2 [Amazon Linux 2](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami): Default for all non-GPU instance families. ECS_AL2_NVIDIA [Amazon Linux 2 (GPU)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#gpuami): Default for all GPU instance families (for example P4 and G4) and can be used for all non Amazon Web Services Graviton-based instance types. ECS_AL1 [Amazon Linux](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#alami). Amazon Linux has reached the end-of-life of standard support. For more information, see [Amazon Linux AMI](http://aws.amazon.com/amazon-linux-ami/). EKS If the imageIdOverride parameter isn't specified, then a recent [Amazon EKS-optimized Amazon Linux AMI](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) (EKS_AL2) is used. If a new image type is specified in an update, but neither an imageId nor a imageIdOverride parameter is specified, then the latest Amazon EKS optimized AMI for that image type that Batch supports is used. EKS_AL2 [Amazon Linux 2](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html): Default for all non-GPU instance families. EKS_AL2_NVIDIA [Amazon Linux 2 (accelerated)](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html): Default for all GPU instance families (for example, P4 and G4) and can be used for all non Amazon Web Services Graviton-based instance types.
        /// This member is required.
        public var imageType: Swift.String?

        public init (
            imageIdOverride: Swift.String? = nil,
            imageKubernetesVersion: Swift.String? = nil,
            imageType: Swift.String? = nil
        )
        {
            self.imageIdOverride = imageIdOverride
            self.imageKubernetesVersion = imageKubernetesVersion
            self.imageType = imageType
        }
    }

}

extension BatchClientTypes.EksAttemptContainerDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exitCode
        case reason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exitCode = self.exitCode {
            try encodeContainer.encode(exitCode, forKey: .exitCode)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exitCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .exitCode)
        exitCode = exitCodeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents the details for an attempt for a job attempt that an Amazon EKS container runs.
    public struct EksAttemptContainerDetail: Swift.Equatable {
        /// The exit code for the job attempt. A non-zero exit code is considered failed.
        public var exitCode: Swift.Int?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public var reason: Swift.String?

        public init (
            exitCode: Swift.Int? = nil,
            reason: Swift.String? = nil
        )
        {
            self.exitCode = exitCode
            self.reason = reason
        }
    }

}

extension BatchClientTypes.EksAttemptDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers
        case nodeName
        case podName
        case startedAt
        case statusReason
        case stoppedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containers)
            for eksattemptcontainerdetail0 in containers {
                try containersContainer.encode(eksattemptcontainerdetail0)
            }
        }
        if let nodeName = self.nodeName {
            try encodeContainer.encode(nodeName, forKey: .nodeName)
        }
        if let podName = self.podName {
            try encodeContainer.encode(podName, forKey: .podName)
        }
        if let startedAt = self.startedAt {
            try encodeContainer.encode(startedAt, forKey: .startedAt)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let stoppedAt = self.stoppedAt {
            try encodeContainer.encode(stoppedAt, forKey: .stoppedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containersContainer = try containerValues.decodeIfPresent([BatchClientTypes.EksAttemptContainerDetail?].self, forKey: .containers)
        var containersDecoded0:[BatchClientTypes.EksAttemptContainerDetail]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [BatchClientTypes.EksAttemptContainerDetail]()
            for structure0 in containersContainer {
                if let structure0 = structure0 {
                    containersDecoded0?.append(structure0)
                }
            }
        }
        containers = containersDecoded0
        let podNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .podName)
        podName = podNameDecoded
        let nodeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeName)
        nodeName = nodeNameDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let stoppedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stoppedAt)
        stoppedAt = stoppedAtDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents the details of a job attempt for a job attempt by an Amazon EKS container.
    public struct EksAttemptDetail: Swift.Equatable {
        /// The details for the final status of the containers for this job attempt.
        public var containers: [BatchClientTypes.EksAttemptContainerDetail]?
        /// The name of the node for this job attempt.
        public var nodeName: Swift.String?
        /// The name of the pod for this job attempt.
        public var podName: Swift.String?
        /// The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the STARTING state to the RUNNING state).
        public var startedAt: Swift.Int?
        /// A short, human-readable string to provide additional details for the current status of the job attempt.
        public var statusReason: Swift.String?
        /// The Unix timestamp (in milliseconds) for when the attempt was stopped. This happens when the attempt transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED.
        public var stoppedAt: Swift.Int?

        public init (
            containers: [BatchClientTypes.EksAttemptContainerDetail]? = nil,
            nodeName: Swift.String? = nil,
            podName: Swift.String? = nil,
            startedAt: Swift.Int? = nil,
            statusReason: Swift.String? = nil,
            stoppedAt: Swift.Int? = nil
        )
        {
            self.containers = containers
            self.nodeName = nodeName
            self.podName = podName
            self.startedAt = startedAt
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
        }
    }

}

extension BatchClientTypes.EksConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eksClusterArn
        case kubernetesNamespace
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eksClusterArn = self.eksClusterArn {
            try encodeContainer.encode(eksClusterArn, forKey: .eksClusterArn)
        }
        if let kubernetesNamespace = self.kubernetesNamespace {
            try encodeContainer.encode(kubernetesNamespace, forKey: .kubernetesNamespace)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eksClusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eksClusterArn)
        eksClusterArn = eksClusterArnDecoded
        let kubernetesNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kubernetesNamespace)
        kubernetesNamespace = kubernetesNamespaceDecoded
    }
}

extension BatchClientTypes {
    /// Configuration for the Amazon EKS cluster that supports the Batch compute environment. The cluster must exist before the compute environment can be created.
    public struct EksConfiguration: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon EKS cluster. An example is arn:aws:eks:us-east-1:123456789012:cluster/ClusterForBatch .
        /// This member is required.
        public var eksClusterArn: Swift.String?
        /// The namespace of the Amazon EKS cluster. Batch manages pods in this namespace. The value can't left empty or null. It must be fewer than 64 characters long, can't be set to default, can't start with "kube-," and must match this regular expression: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$. For more information, see [Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) in the Kubernetes documentation.
        /// This member is required.
        public var kubernetesNamespace: Swift.String?

        public init (
            eksClusterArn: Swift.String? = nil,
            kubernetesNamespace: Swift.String? = nil
        )
        {
            self.eksClusterArn = eksClusterArn
            self.kubernetesNamespace = kubernetesNamespace
        }
    }

}

extension BatchClientTypes.EksContainer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case args
        case command
        case env
        case image
        case imagePullPolicy
        case name
        case resources
        case securityContext
        case volumeMounts
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for string0 in args {
                try argsContainer.encode(string0)
            }
        }
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for string0 in command {
                try commandContainer.encode(string0)
            }
        }
        if let env = env {
            var envContainer = encodeContainer.nestedUnkeyedContainer(forKey: .env)
            for ekscontainerenvironmentvariable0 in env {
                try envContainer.encode(ekscontainerenvironmentvariable0)
            }
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let imagePullPolicy = self.imagePullPolicy {
            try encodeContainer.encode(imagePullPolicy, forKey: .imagePullPolicy)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resources = self.resources {
            try encodeContainer.encode(resources, forKey: .resources)
        }
        if let securityContext = self.securityContext {
            try encodeContainer.encode(securityContext, forKey: .securityContext)
        }
        if let volumeMounts = volumeMounts {
            var volumeMountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumeMounts)
            for ekscontainervolumemount0 in volumeMounts {
                try volumeMountsContainer.encode(ekscontainervolumemount0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let imagePullPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imagePullPolicy)
        imagePullPolicy = imagePullPolicyDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let argsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .args)
        var argsDecoded0:[Swift.String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [Swift.String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
        let envContainer = try containerValues.decodeIfPresent([BatchClientTypes.EksContainerEnvironmentVariable?].self, forKey: .env)
        var envDecoded0:[BatchClientTypes.EksContainerEnvironmentVariable]? = nil
        if let envContainer = envContainer {
            envDecoded0 = [BatchClientTypes.EksContainerEnvironmentVariable]()
            for structure0 in envContainer {
                if let structure0 = structure0 {
                    envDecoded0?.append(structure0)
                }
            }
        }
        env = envDecoded0
        let resourcesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksContainerResourceRequirements.self, forKey: .resources)
        resources = resourcesDecoded
        let volumeMountsContainer = try containerValues.decodeIfPresent([BatchClientTypes.EksContainerVolumeMount?].self, forKey: .volumeMounts)
        var volumeMountsDecoded0:[BatchClientTypes.EksContainerVolumeMount]? = nil
        if let volumeMountsContainer = volumeMountsContainer {
            volumeMountsDecoded0 = [BatchClientTypes.EksContainerVolumeMount]()
            for structure0 in volumeMountsContainer {
                if let structure0 = structure0 {
                    volumeMountsDecoded0?.append(structure0)
                }
            }
        }
        volumeMounts = volumeMountsDecoded0
        let securityContextDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksContainerSecurityContext.self, forKey: .securityContext)
        securityContext = securityContextDecoded
    }
}

extension BatchClientTypes {
    /// EKS container properties are used in job definitions for Amazon EKS based job definitions to describe the properties for a container node in the pod that's launched as part of a job. This can't be specified for Amazon ECS based job definitions.
    public struct EksContainer: Swift.Equatable {
        /// An array of arguments to the entrypoint. If this isn't specified, the CMD of the container image is used. This corresponds to the args member in the [Entrypoint](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) portion of the [Pod](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/) in Kubernetes. Environment variable references are expanded using the container's environment. If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to "$(NAME1)" and the NAME1 environment variable doesn't exist, the command string will remain "$(NAME1)." $$ is replaced with $, and the resulting string isn't expanded. For example, $$(VAR_NAME) is passed as $(VAR_NAME) whether or not the VAR_NAME environment variable exists. For more information, see [CMD](https://docs.docker.com/engine/reference/builder/#cmd) in the Dockerfile reference and [Define a command and arguments for a pod](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) in the Kubernetes documentation.
        public var args: [Swift.String]?
        /// The entrypoint for the container. This isn't run within a shell. If this isn't specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container's environment. If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to "$(NAME1)" and the NAME1 environment variable doesn't exist, the command string will remain "$(NAME1)." $$ is replaced with $ and the resulting string isn't expanded. For example, $$(VAR_NAME) will be passed as $(VAR_NAME) whether or not the VAR_NAME environment variable exists. The entrypoint can't be updated. For more information, see [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) in the Dockerfile reference and [Define a command and arguments for a container](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) and [Entrypoint](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) in the Kubernetes documentation.
        public var command: [Swift.String]?
        /// The environment variables to pass to a container. Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public var env: [BatchClientTypes.EksContainerEnvironmentVariable]?
        /// The Docker image used to start the container.
        /// This member is required.
        public var image: Swift.String?
        /// The image pull policy for the container. Supported values are Always, IfNotPresent, and Never. This parameter defaults to IfNotPresent. However, if the :latest tag is specified, it defaults to Always. For more information, see [Updating images](https://kubernetes.io/docs/concepts/containers/images/#updating-images) in the Kubernetes documentation.
        public var imagePullPolicy: Swift.String?
        /// The name of the container. If the name isn't specified, the default name "Default" is used. Each container in a pod must have a unique name.
        public var name: Swift.String?
        /// The type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu. For more information, see [Resource management for pods and containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.
        public var resources: BatchClientTypes.EksContainerResourceRequirements?
        /// The security context for a job. For more information, see [Configure a security context for a pod or container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) in the Kubernetes documentation.
        public var securityContext: BatchClientTypes.EksContainerSecurityContext?
        /// The volume mounts for the container. Batch supports emptyDir, hostPath, and secret volume types. For more information about volumes and volume mounts in Kubernetes, see [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/) in the Kubernetes documentation.
        public var volumeMounts: [BatchClientTypes.EksContainerVolumeMount]?

        public init (
            args: [Swift.String]? = nil,
            command: [Swift.String]? = nil,
            env: [BatchClientTypes.EksContainerEnvironmentVariable]? = nil,
            image: Swift.String? = nil,
            imagePullPolicy: Swift.String? = nil,
            name: Swift.String? = nil,
            resources: BatchClientTypes.EksContainerResourceRequirements? = nil,
            securityContext: BatchClientTypes.EksContainerSecurityContext? = nil,
            volumeMounts: [BatchClientTypes.EksContainerVolumeMount]? = nil
        )
        {
            self.args = args
            self.command = command
            self.env = env
            self.image = image
            self.imagePullPolicy = imagePullPolicy
            self.name = name
            self.resources = resources
            self.securityContext = securityContext
            self.volumeMounts = volumeMounts
        }
    }

}

extension BatchClientTypes.EksContainerDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case args
        case command
        case env
        case exitCode
        case image
        case imagePullPolicy
        case name
        case reason
        case resources
        case securityContext
        case volumeMounts
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for string0 in args {
                try argsContainer.encode(string0)
            }
        }
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for string0 in command {
                try commandContainer.encode(string0)
            }
        }
        if let env = env {
            var envContainer = encodeContainer.nestedUnkeyedContainer(forKey: .env)
            for ekscontainerenvironmentvariable0 in env {
                try envContainer.encode(ekscontainerenvironmentvariable0)
            }
        }
        if let exitCode = self.exitCode {
            try encodeContainer.encode(exitCode, forKey: .exitCode)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let imagePullPolicy = self.imagePullPolicy {
            try encodeContainer.encode(imagePullPolicy, forKey: .imagePullPolicy)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let resources = self.resources {
            try encodeContainer.encode(resources, forKey: .resources)
        }
        if let securityContext = self.securityContext {
            try encodeContainer.encode(securityContext, forKey: .securityContext)
        }
        if let volumeMounts = volumeMounts {
            var volumeMountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumeMounts)
            for ekscontainervolumemount0 in volumeMounts {
                try volumeMountsContainer.encode(ekscontainervolumemount0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let imagePullPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imagePullPolicy)
        imagePullPolicy = imagePullPolicyDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let argsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .args)
        var argsDecoded0:[Swift.String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [Swift.String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
        let envContainer = try containerValues.decodeIfPresent([BatchClientTypes.EksContainerEnvironmentVariable?].self, forKey: .env)
        var envDecoded0:[BatchClientTypes.EksContainerEnvironmentVariable]? = nil
        if let envContainer = envContainer {
            envDecoded0 = [BatchClientTypes.EksContainerEnvironmentVariable]()
            for structure0 in envContainer {
                if let structure0 = structure0 {
                    envDecoded0?.append(structure0)
                }
            }
        }
        env = envDecoded0
        let resourcesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksContainerResourceRequirements.self, forKey: .resources)
        resources = resourcesDecoded
        let exitCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .exitCode)
        exitCode = exitCodeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let volumeMountsContainer = try containerValues.decodeIfPresent([BatchClientTypes.EksContainerVolumeMount?].self, forKey: .volumeMounts)
        var volumeMountsDecoded0:[BatchClientTypes.EksContainerVolumeMount]? = nil
        if let volumeMountsContainer = volumeMountsContainer {
            volumeMountsDecoded0 = [BatchClientTypes.EksContainerVolumeMount]()
            for structure0 in volumeMountsContainer {
                if let structure0 = structure0 {
                    volumeMountsDecoded0?.append(structure0)
                }
            }
        }
        volumeMounts = volumeMountsDecoded0
        let securityContextDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksContainerSecurityContext.self, forKey: .securityContext)
        securityContext = securityContextDecoded
    }
}

extension BatchClientTypes {
    /// The details for container properties that are returned by DescribeJobs for jobs that use Amazon EKS.
    public struct EksContainerDetail: Swift.Equatable {
        /// An array of arguments to the entrypoint. If this isn't specified, the CMD of the container image is used. This corresponds to the args member in the [Entrypoint](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) portion of the [Pod](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/) in Kubernetes. Environment variable references are expanded using the container's environment. If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to "$(NAME1)" and the NAME1 environment variable doesn't exist, the command string will remain "$(NAME1)". $$ is replaced with $ and the resulting string isn't expanded. For example, $$(VAR_NAME) is passed as $(VAR_NAME) whether or not the VAR_NAME environment variable exists. For more information, see [CMD](https://docs.docker.com/engine/reference/builder/#cmd) in the Dockerfile reference and [Define a command and arguments for a pod](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) in the Kubernetes documentation.
        public var args: [Swift.String]?
        /// The entrypoint for the container. For more information, see [Entrypoint](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) in the Kubernetes documentation.
        public var command: [Swift.String]?
        /// The environment variables to pass to a container. Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public var env: [BatchClientTypes.EksContainerEnvironmentVariable]?
        /// The exit code for the job attempt. A non-zero exit code is considered failed.
        public var exitCode: Swift.Int?
        /// The Docker image used to start the container.
        public var image: Swift.String?
        /// The image pull policy for the container. Supported values are Always, IfNotPresent, and Never. This parameter defaults to Always if the :latest tag is specified, IfNotPresent otherwise. For more information, see [Updating images](https://kubernetes.io/docs/concepts/containers/images/#updating-images) in the Kubernetes documentation.
        public var imagePullPolicy: Swift.String?
        /// The name of the container. If the name isn't specified, the default name "Default" is used. Each container in a pod must have a unique name.
        public var name: Swift.String?
        /// A short human-readable string to provide additional details for a running or stopped container. It can be up to 255 characters long.
        public var reason: Swift.String?
        /// The type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu. For more information, see [Resource management for pods and containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.
        public var resources: BatchClientTypes.EksContainerResourceRequirements?
        /// The security context for a job. For more information, see [Configure a security context for a pod or container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) in the Kubernetes documentation.
        public var securityContext: BatchClientTypes.EksContainerSecurityContext?
        /// The volume mounts for the container. Batch supports emptyDir, hostPath, and secret volume types. For more information about volumes and volume mounts in Kubernetes, see [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/) in the Kubernetes documentation.
        public var volumeMounts: [BatchClientTypes.EksContainerVolumeMount]?

        public init (
            args: [Swift.String]? = nil,
            command: [Swift.String]? = nil,
            env: [BatchClientTypes.EksContainerEnvironmentVariable]? = nil,
            exitCode: Swift.Int? = nil,
            image: Swift.String? = nil,
            imagePullPolicy: Swift.String? = nil,
            name: Swift.String? = nil,
            reason: Swift.String? = nil,
            resources: BatchClientTypes.EksContainerResourceRequirements? = nil,
            securityContext: BatchClientTypes.EksContainerSecurityContext? = nil,
            volumeMounts: [BatchClientTypes.EksContainerVolumeMount]? = nil
        )
        {
            self.args = args
            self.command = command
            self.env = env
            self.exitCode = exitCode
            self.image = image
            self.imagePullPolicy = imagePullPolicy
            self.name = name
            self.reason = reason
            self.resources = resources
            self.securityContext = securityContext
            self.volumeMounts = volumeMounts
        }
    }

}

extension BatchClientTypes.EksContainerEnvironmentVariable: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension BatchClientTypes {
    /// An environment variable.
    public struct EksContainerEnvironmentVariable: Swift.Equatable {
        /// The name of the environment variable.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the environment variable.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension BatchClientTypes.EksContainerOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case args
        case command
        case env
        case image
        case resources
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for string0 in args {
                try argsContainer.encode(string0)
            }
        }
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for string0 in command {
                try commandContainer.encode(string0)
            }
        }
        if let env = env {
            var envContainer = encodeContainer.nestedUnkeyedContainer(forKey: .env)
            for ekscontainerenvironmentvariable0 in env {
                try envContainer.encode(ekscontainerenvironmentvariable0)
            }
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let resources = self.resources {
            try encodeContainer.encode(resources, forKey: .resources)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let argsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .args)
        var argsDecoded0:[Swift.String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [Swift.String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
        let envContainer = try containerValues.decodeIfPresent([BatchClientTypes.EksContainerEnvironmentVariable?].self, forKey: .env)
        var envDecoded0:[BatchClientTypes.EksContainerEnvironmentVariable]? = nil
        if let envContainer = envContainer {
            envDecoded0 = [BatchClientTypes.EksContainerEnvironmentVariable]()
            for structure0 in envContainer {
                if let structure0 = structure0 {
                    envDecoded0?.append(structure0)
                }
            }
        }
        env = envDecoded0
        let resourcesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksContainerResourceRequirements.self, forKey: .resources)
        resources = resourcesDecoded
    }
}

extension BatchClientTypes {
    /// Object representing any Kubernetes overrides to a job definition that's used in a [SubmitJob] API operation.
    public struct EksContainerOverride: Swift.Equatable {
        /// The arguments to the entrypoint to send to the container that overrides the default arguments from the Docker image or the job definition. For more information, see [CMD](https://docs.docker.com/engine/reference/builder/#cmd) in the Dockerfile reference and [Define a command an arguments for a pod](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) in the Kubernetes documentation.
        public var args: [Swift.String]?
        /// The command to send to the container that overrides the default command from the Docker image or the job definition.
        public var command: [Swift.String]?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch. Or, you can override the existing environment variables from the Docker image or the job definition. Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public var env: [BatchClientTypes.EksContainerEnvironmentVariable]?
        /// The override of the Docker image that's used to start the container.
        public var image: Swift.String?
        /// The type and amount of resources to assign to a container. These override the settings in the job definition. The supported resources include memory, cpu, and nvidia.com/gpu. For more information, see [Resource management for pods and containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.
        public var resources: BatchClientTypes.EksContainerResourceRequirements?

        public init (
            args: [Swift.String]? = nil,
            command: [Swift.String]? = nil,
            env: [BatchClientTypes.EksContainerEnvironmentVariable]? = nil,
            image: Swift.String? = nil,
            resources: BatchClientTypes.EksContainerResourceRequirements? = nil
        )
        {
            self.args = args
            self.command = command
            self.env = env
            self.image = image
            self.resources = resources
        }
    }

}

extension BatchClientTypes.EksContainerResourceRequirements: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limits
        case requests
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limits = limits {
            var limitsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .limits)
            for (dictKey0, eksLimits0) in limits {
                try limitsContainer.encode(eksLimits0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let requests = requests {
            var requestsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .requests)
            for (dictKey0, eksRequests0) in requests {
                try requestsContainer.encode(eksRequests0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .limits)
        var limitsDecoded0: [Swift.String:Swift.String]? = nil
        if let limitsContainer = limitsContainer {
            limitsDecoded0 = [Swift.String:Swift.String]()
            for (key0, quantity0) in limitsContainer {
                if let quantity0 = quantity0 {
                    limitsDecoded0?[key0] = quantity0
                }
            }
        }
        limits = limitsDecoded0
        let requestsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .requests)
        var requestsDecoded0: [Swift.String:Swift.String]? = nil
        if let requestsContainer = requestsContainer {
            requestsDecoded0 = [Swift.String:Swift.String]()
            for (key0, quantity0) in requestsContainer {
                if let quantity0 = quantity0 {
                    requestsDecoded0?[key0] = quantity0
                }
            }
        }
        requests = requestsDecoded0
    }
}

extension BatchClientTypes {
    /// The type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu. For more information, see [Resource management for pods and containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.
    public struct EksContainerResourceRequirements: Swift.Equatable {
        /// The type and quantity of the resources to reserve for the container. The values vary based on the name that's specified. Resources can be requested using either the limits or the requests objects. memory The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. memory can be specified in limits, requests, or both. If memory is specified in both places, then the value that's specified in limits must be equal to the value that's specified in requests. To maximize your resource utilization, provide your jobs with as much memory as possible for the specific instance type that you are using. To learn how, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the Batch User Guide. cpu The number of CPUs that's reserved for the container. Values must be an even multiple of 0.25. cpu can be specified in limits, requests, or both. If cpu is specified in both places, then the value that's specified in limits must be at least as large as the value that's specified in requests. nvidia.com/gpu The number of GPUs that's reserved for the container. Values must be a whole integer. memory can be specified in limits, requests, or both. If memory is specified in both places, then the value that's specified in limits must be equal to the value that's specified in requests.
        public var limits: [Swift.String:Swift.String]?
        /// The type and quantity of the resources to request for the container. The values vary based on the name that's specified. Resources can be requested by using either the limits or the requests objects. memory The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. memory can be specified in limits, requests, or both. If memory is specified in both, then the value that's specified in limits must be equal to the value that's specified in requests. If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the Batch User Guide. cpu The number of CPUs that are reserved for the container. Values must be an even multiple of 0.25. cpu can be specified in limits, requests, or both. If cpu is specified in both, then the value that's specified in limits must be at least as large as the value that's specified in requests. nvidia.com/gpu The number of GPUs that are reserved for the container. Values must be a whole integer. nvidia.com/gpu can be specified in limits, requests, or both. If nvidia.com/gpu is specified in both, then the value that's specified in limits must be equal to the value that's specified in requests.
        public var requests: [Swift.String:Swift.String]?

        public init (
            limits: [Swift.String:Swift.String]? = nil,
            requests: [Swift.String:Swift.String]? = nil
        )
        {
            self.limits = limits
            self.requests = requests
        }
    }

}

extension BatchClientTypes.EksContainerSecurityContext: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case privileged
        case readOnlyRootFilesystem
        case runAsGroup
        case runAsNonRoot
        case runAsUser
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let privileged = self.privileged {
            try encodeContainer.encode(privileged, forKey: .privileged)
        }
        if let readOnlyRootFilesystem = self.readOnlyRootFilesystem {
            try encodeContainer.encode(readOnlyRootFilesystem, forKey: .readOnlyRootFilesystem)
        }
        if let runAsGroup = self.runAsGroup {
            try encodeContainer.encode(runAsGroup, forKey: .runAsGroup)
        }
        if let runAsNonRoot = self.runAsNonRoot {
            try encodeContainer.encode(runAsNonRoot, forKey: .runAsNonRoot)
        }
        if let runAsUser = self.runAsUser {
            try encodeContainer.encode(runAsUser, forKey: .runAsUser)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runAsUserDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .runAsUser)
        runAsUser = runAsUserDecoded
        let runAsGroupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .runAsGroup)
        runAsGroup = runAsGroupDecoded
        let privilegedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privileged)
        privileged = privilegedDecoded
        let readOnlyRootFilesystemDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readOnlyRootFilesystem)
        readOnlyRootFilesystem = readOnlyRootFilesystemDecoded
        let runAsNonRootDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .runAsNonRoot)
        runAsNonRoot = runAsNonRootDecoded
    }
}

extension BatchClientTypes {
    /// The security context for a job. For more information, see [Configure a security context for a pod or container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) in the Kubernetes documentation.
    public struct EksContainerSecurityContext: Swift.Equatable {
        /// When this parameter is true, the container is given elevated permissions on the host container instance. The level of permissions are similar to the root user permissions. The default value is false. This parameter maps to privileged policy in the [Privileged pod security policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#privileged) in the Kubernetes documentation.
        public var privileged: Swift.Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. The default value is false. This parameter maps to ReadOnlyRootFilesystem policy in the [Volumes and file systems pod security policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#volumes-and-file-systems) in the Kubernetes documentation.
        public var readOnlyRootFilesystem: Swift.Bool?
        /// When this parameter is specified, the container is run as the specified group ID (gid). If this parameter isn't specified, the default is the group that's specified in the image metadata. This parameter maps to RunAsGroup and MustRunAs policy in the [Users and groups pod security policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the Kubernetes documentation.
        public var runAsGroup: Swift.Int?
        /// When this parameter is specified, the container is run as a user with a uid other than 0. If this parameter isn't specified, so such rule is enforced. This parameter maps to RunAsUser and MustRunAsNonRoot policy in the [Users and groups pod security policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the Kubernetes documentation.
        public var runAsNonRoot: Swift.Bool?
        /// When this parameter is specified, the container is run as the specified user ID (uid). If this parameter isn't specified, the default is the user that's specified in the image metadata. This parameter maps to RunAsUser and MustRanAs policy in the [Users and groups pod security policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the Kubernetes documentation.
        public var runAsUser: Swift.Int?

        public init (
            privileged: Swift.Bool? = nil,
            readOnlyRootFilesystem: Swift.Bool? = nil,
            runAsGroup: Swift.Int? = nil,
            runAsNonRoot: Swift.Bool? = nil,
            runAsUser: Swift.Int? = nil
        )
        {
            self.privileged = privileged
            self.readOnlyRootFilesystem = readOnlyRootFilesystem
            self.runAsGroup = runAsGroup
            self.runAsNonRoot = runAsNonRoot
            self.runAsUser = runAsUser
        }
    }

}

extension BatchClientTypes.EksContainerVolumeMount: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mountPath
        case name
        case readOnly
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mountPath = self.mountPath {
            try encodeContainer.encode(mountPath, forKey: .mountPath)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let readOnly = self.readOnly {
            try encodeContainer.encode(readOnly, forKey: .readOnly)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let mountPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mountPath)
        mountPath = mountPathDecoded
        let readOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readOnly)
        readOnly = readOnlyDecoded
    }
}

extension BatchClientTypes {
    /// The volume mounts for a container for an Amazon EKS job. For more information about volumes and volume mounts in Kubernetes, see [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/) in the Kubernetes documentation.
    public struct EksContainerVolumeMount: Swift.Equatable {
        /// The path on the container where the volume is mounted.
        public var mountPath: Swift.String?
        /// The name the volume mount. This must match the name of one of the volumes in the pod.
        public var name: Swift.String?
        /// If this value is true, the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is false.
        public var readOnly: Swift.Bool?

        public init (
            mountPath: Swift.String? = nil,
            name: Swift.String? = nil,
            readOnly: Swift.Bool? = nil
        )
        {
            self.mountPath = mountPath
            self.name = name
            self.readOnly = readOnly
        }
    }

}

extension BatchClientTypes.EksEmptyDir: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case medium
        case sizeLimit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let medium = self.medium {
            try encodeContainer.encode(medium, forKey: .medium)
        }
        if let sizeLimit = self.sizeLimit {
            try encodeContainer.encode(sizeLimit, forKey: .sizeLimit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mediumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .medium)
        medium = mediumDecoded
        let sizeLimitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sizeLimit)
        sizeLimit = sizeLimitDecoded
    }
}

extension BatchClientTypes {
    /// Specifies the configuration of a Kubernetes emptyDir volume. An emptyDir volume is first created when a pod is assigned to a node. It exists as long as that pod is running on that node. The emptyDir volume is initially empty. All containers in the pod can read and write the files in the emptyDir volume. However, the emptyDir volume can be mounted at the same or different paths in each container. When a pod is removed from a node for any reason, the data in the emptyDir is deleted permanently. For more information, see [emptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) in the Kubernetes documentation.
    public struct EksEmptyDir: Swift.Equatable {
        /// The medium to store the volume. The default value is an empty string, which uses the storage of the node. "" (Default) Use the disk storage of the node. "Memory" Use the tmpfs volume that's backed by the RAM of the node. Contents of the volume are lost when the node reboots, and any storage on the volume counts against the container's memory limit.
        public var medium: Swift.String?
        /// The maximum size of the volume. By default, there's no maximum size defined.
        public var sizeLimit: Swift.String?

        public init (
            medium: Swift.String? = nil,
            sizeLimit: Swift.String? = nil
        )
        {
            self.medium = medium
            self.sizeLimit = sizeLimit
        }
    }

}

extension BatchClientTypes.EksHostPath: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case path
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
    }
}

extension BatchClientTypes {
    /// Specifies the configuration of a Kubernetes hostPath volume. A hostPath volume mounts an existing file or directory from the host node's filesystem into your pod. For more information, see [hostPath](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) in the Kubernetes documentation.
    public struct EksHostPath: Swift.Equatable {
        /// The path of the file or directory on the host to mount into containers on the pod.
        public var path: Swift.String?

        public init (
            path: Swift.String? = nil
        )
        {
            self.path = path
        }
    }

}

extension BatchClientTypes.EksPodProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers
        case dnsPolicy
        case hostNetwork
        case serviceAccountName
        case volumes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containers)
            for ekscontainer0 in containers {
                try containersContainer.encode(ekscontainer0)
            }
        }
        if let dnsPolicy = self.dnsPolicy {
            try encodeContainer.encode(dnsPolicy, forKey: .dnsPolicy)
        }
        if let hostNetwork = self.hostNetwork {
            try encodeContainer.encode(hostNetwork, forKey: .hostNetwork)
        }
        if let serviceAccountName = self.serviceAccountName {
            try encodeContainer.encode(serviceAccountName, forKey: .serviceAccountName)
        }
        if let volumes = volumes {
            var volumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumes)
            for eksvolume0 in volumes {
                try volumesContainer.encode(eksvolume0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceAccountNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceAccountName)
        serviceAccountName = serviceAccountNameDecoded
        let hostNetworkDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hostNetwork)
        hostNetwork = hostNetworkDecoded
        let dnsPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsPolicy)
        dnsPolicy = dnsPolicyDecoded
        let containersContainer = try containerValues.decodeIfPresent([BatchClientTypes.EksContainer?].self, forKey: .containers)
        var containersDecoded0:[BatchClientTypes.EksContainer]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [BatchClientTypes.EksContainer]()
            for structure0 in containersContainer {
                if let structure0 = structure0 {
                    containersDecoded0?.append(structure0)
                }
            }
        }
        containers = containersDecoded0
        let volumesContainer = try containerValues.decodeIfPresent([BatchClientTypes.EksVolume?].self, forKey: .volumes)
        var volumesDecoded0:[BatchClientTypes.EksVolume]? = nil
        if let volumesContainer = volumesContainer {
            volumesDecoded0 = [BatchClientTypes.EksVolume]()
            for structure0 in volumesContainer {
                if let structure0 = structure0 {
                    volumesDecoded0?.append(structure0)
                }
            }
        }
        volumes = volumesDecoded0
    }
}

extension BatchClientTypes {
    /// The properties for the pod.
    public struct EksPodProperties: Swift.Equatable {
        /// The properties of the container that's used on the Amazon EKS pod.
        public var containers: [BatchClientTypes.EksContainer]?
        /// The DNS policy for the pod. The default value is ClusterFirst. If the hostNetwork parameter is not specified, the default is ClusterFirstWithHostNet. ClusterFirst indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see [Pod's DNS policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) in the Kubernetes documentation. Valid values: Default | ClusterFirst | ClusterFirstWithHostNet
        public var dnsPolicy: Swift.String?
        /// Indicates if the pod uses the hosts' network IP address. The default value is true. Setting this to false enables the Kubernetes pod networking model. Most Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see [Host namespaces](https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces) and [Pod networking](https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking) in the Kubernetes documentation.
        public var hostNetwork: Swift.Bool?
        /// The name of the service account that's used to run the pod. For more information, see [Kubernetes service accounts](https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html) and [Configure a Kubernetes service account to assume an IAM role](https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html) in the Amazon EKS User Guide and [Configure service accounts for pods](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) in the Kubernetes documentation.
        public var serviceAccountName: Swift.String?
        /// Specifies the volumes for a job definition that uses Amazon EKS resources.
        public var volumes: [BatchClientTypes.EksVolume]?

        public init (
            containers: [BatchClientTypes.EksContainer]? = nil,
            dnsPolicy: Swift.String? = nil,
            hostNetwork: Swift.Bool? = nil,
            serviceAccountName: Swift.String? = nil,
            volumes: [BatchClientTypes.EksVolume]? = nil
        )
        {
            self.containers = containers
            self.dnsPolicy = dnsPolicy
            self.hostNetwork = hostNetwork
            self.serviceAccountName = serviceAccountName
            self.volumes = volumes
        }
    }

}

extension BatchClientTypes.EksPodPropertiesDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers
        case dnsPolicy
        case hostNetwork
        case nodeName
        case podName
        case serviceAccountName
        case volumes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containers)
            for ekscontainerdetail0 in containers {
                try containersContainer.encode(ekscontainerdetail0)
            }
        }
        if let dnsPolicy = self.dnsPolicy {
            try encodeContainer.encode(dnsPolicy, forKey: .dnsPolicy)
        }
        if let hostNetwork = self.hostNetwork {
            try encodeContainer.encode(hostNetwork, forKey: .hostNetwork)
        }
        if let nodeName = self.nodeName {
            try encodeContainer.encode(nodeName, forKey: .nodeName)
        }
        if let podName = self.podName {
            try encodeContainer.encode(podName, forKey: .podName)
        }
        if let serviceAccountName = self.serviceAccountName {
            try encodeContainer.encode(serviceAccountName, forKey: .serviceAccountName)
        }
        if let volumes = volumes {
            var volumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumes)
            for eksvolume0 in volumes {
                try volumesContainer.encode(eksvolume0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceAccountNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceAccountName)
        serviceAccountName = serviceAccountNameDecoded
        let hostNetworkDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hostNetwork)
        hostNetwork = hostNetworkDecoded
        let dnsPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsPolicy)
        dnsPolicy = dnsPolicyDecoded
        let containersContainer = try containerValues.decodeIfPresent([BatchClientTypes.EksContainerDetail?].self, forKey: .containers)
        var containersDecoded0:[BatchClientTypes.EksContainerDetail]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [BatchClientTypes.EksContainerDetail]()
            for structure0 in containersContainer {
                if let structure0 = structure0 {
                    containersDecoded0?.append(structure0)
                }
            }
        }
        containers = containersDecoded0
        let volumesContainer = try containerValues.decodeIfPresent([BatchClientTypes.EksVolume?].self, forKey: .volumes)
        var volumesDecoded0:[BatchClientTypes.EksVolume]? = nil
        if let volumesContainer = volumesContainer {
            volumesDecoded0 = [BatchClientTypes.EksVolume]()
            for structure0 in volumesContainer {
                if let structure0 = structure0 {
                    volumesDecoded0?.append(structure0)
                }
            }
        }
        volumes = volumesDecoded0
        let podNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .podName)
        podName = podNameDecoded
        let nodeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeName)
        nodeName = nodeNameDecoded
    }
}

extension BatchClientTypes {
    /// The details for the pod.
    public struct EksPodPropertiesDetail: Swift.Equatable {
        /// The properties of the container that's used on the Amazon EKS pod.
        public var containers: [BatchClientTypes.EksContainerDetail]?
        /// The DNS policy for the pod. The default value is ClusterFirst. If the hostNetwork parameter is not specified, the default is ClusterFirstWithHostNet. ClusterFirst indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. If no value was specified for dnsPolicy in the [RegisterJobDefinition](https://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html) API operation, then no value will be returned for dnsPolicy by either of [DescribeJobDefinitions](https://docs.aws.amazon.com/batch/latest/APIReference/API_DescribeJobDefinitions.html) or [DescribeJobs](https://docs.aws.amazon.com/batch/latest/APIReference/API_DescribeJobs.html) API operations. The pod spec setting will contain either ClusterFirst or ClusterFirstWithHostNet, depending on the value of the hostNetwork parameter. For more information, see [Pod's DNS policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) in the Kubernetes documentation. Valid values: Default | ClusterFirst | ClusterFirstWithHostNet
        public var dnsPolicy: Swift.String?
        /// Indicates if the pod uses the hosts' network IP address. The default value is true. Setting this to false enables the Kubernetes pod networking model. Most Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see [Host namespaces](https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces) and [Pod networking](https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking) in the Kubernetes documentation.
        public var hostNetwork: Swift.Bool?
        /// The name of the node for this job.
        public var nodeName: Swift.String?
        /// The name of the pod for this job.
        public var podName: Swift.String?
        /// The name of the service account that's used to run the pod. For more information, see [Kubernetes service accounts](https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html) and [Configure a Kubernetes service account to assume an IAM role](https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html) in the Amazon EKS User Guide and [Configure service accounts for pods](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) in the Kubernetes documentation.
        public var serviceAccountName: Swift.String?
        /// Specifies the volumes for a job definition using Amazon EKS resources.
        public var volumes: [BatchClientTypes.EksVolume]?

        public init (
            containers: [BatchClientTypes.EksContainerDetail]? = nil,
            dnsPolicy: Swift.String? = nil,
            hostNetwork: Swift.Bool? = nil,
            nodeName: Swift.String? = nil,
            podName: Swift.String? = nil,
            serviceAccountName: Swift.String? = nil,
            volumes: [BatchClientTypes.EksVolume]? = nil
        )
        {
            self.containers = containers
            self.dnsPolicy = dnsPolicy
            self.hostNetwork = hostNetwork
            self.nodeName = nodeName
            self.podName = podName
            self.serviceAccountName = serviceAccountName
            self.volumes = volumes
        }
    }

}

extension BatchClientTypes.EksPodPropertiesOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containers)
            for ekscontaineroverride0 in containers {
                try containersContainer.encode(ekscontaineroverride0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containersContainer = try containerValues.decodeIfPresent([BatchClientTypes.EksContainerOverride?].self, forKey: .containers)
        var containersDecoded0:[BatchClientTypes.EksContainerOverride]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [BatchClientTypes.EksContainerOverride]()
            for structure0 in containersContainer {
                if let structure0 = structure0 {
                    containersDecoded0?.append(structure0)
                }
            }
        }
        containers = containersDecoded0
    }
}

extension BatchClientTypes {
    /// An object that contains overrides for the Kubernetes pod properties of a job.
    public struct EksPodPropertiesOverride: Swift.Equatable {
        /// The overrides for the container that's used on the Amazon EKS pod.
        public var containers: [BatchClientTypes.EksContainerOverride]?

        public init (
            containers: [BatchClientTypes.EksContainerOverride]? = nil
        )
        {
            self.containers = containers
        }
    }

}

extension BatchClientTypes.EksProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case podProperties
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let podProperties = self.podProperties {
            try encodeContainer.encode(podProperties, forKey: .podProperties)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let podPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksPodProperties.self, forKey: .podProperties)
        podProperties = podPropertiesDecoded
    }
}

extension BatchClientTypes {
    /// An object that contains the properties for the Kubernetes resources of a job.
    public struct EksProperties: Swift.Equatable {
        /// The properties for the Kubernetes pod resources of a job.
        public var podProperties: BatchClientTypes.EksPodProperties?

        public init (
            podProperties: BatchClientTypes.EksPodProperties? = nil
        )
        {
            self.podProperties = podProperties
        }
    }

}

extension BatchClientTypes.EksPropertiesDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case podProperties
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let podProperties = self.podProperties {
            try encodeContainer.encode(podProperties, forKey: .podProperties)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let podPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksPodPropertiesDetail.self, forKey: .podProperties)
        podProperties = podPropertiesDecoded
    }
}

extension BatchClientTypes {
    /// An object that contains the details for the Kubernetes resources of a job.
    public struct EksPropertiesDetail: Swift.Equatable {
        /// The properties for the Kubernetes pod resources of a job.
        public var podProperties: BatchClientTypes.EksPodPropertiesDetail?

        public init (
            podProperties: BatchClientTypes.EksPodPropertiesDetail? = nil
        )
        {
            self.podProperties = podProperties
        }
    }

}

extension BatchClientTypes.EksPropertiesOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case podProperties
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let podProperties = self.podProperties {
            try encodeContainer.encode(podProperties, forKey: .podProperties)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let podPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksPodPropertiesOverride.self, forKey: .podProperties)
        podProperties = podPropertiesDecoded
    }
}

extension BatchClientTypes {
    /// An object that contains overrides for the Kubernetes resources of a job.
    public struct EksPropertiesOverride: Swift.Equatable {
        /// The overrides for the Kubernetes pod resources of a job.
        public var podProperties: BatchClientTypes.EksPodPropertiesOverride?

        public init (
            podProperties: BatchClientTypes.EksPodPropertiesOverride? = nil
        )
        {
            self.podProperties = podProperties
        }
    }

}

extension BatchClientTypes.EksSecret: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `optional` = "optional"
        case secretName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let `optional` = self.`optional` {
            try encodeContainer.encode(`optional`, forKey: .`optional`)
        }
        if let secretName = self.secretName {
            try encodeContainer.encode(secretName, forKey: .secretName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretName)
        secretName = secretNameDecoded
        let optionalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .optional)
        `optional` = optionalDecoded
    }
}

extension BatchClientTypes {
    /// Specifies the configuration of a Kubernetes secret volume. For more information, see [secret](https://kubernetes.io/docs/concepts/storage/volumes/#secret) in the Kubernetes documentation.
    public struct EksSecret: Swift.Equatable {
        /// Specifies whether the secret or the secret's keys must be defined.
        public var `optional`: Swift.Bool?
        /// The name of the secret. The name must be allowed as a DNS subdomain name. For more information, see [DNS subdomain names](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) in the Kubernetes documentation.
        /// This member is required.
        public var secretName: Swift.String?

        public init (
            `optional`: Swift.Bool? = nil,
            secretName: Swift.String? = nil
        )
        {
            self.`optional` = `optional`
            self.secretName = secretName
        }
    }

}

extension BatchClientTypes.EksVolume: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emptyDir
        case hostPath
        case name
        case secret
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emptyDir = self.emptyDir {
            try encodeContainer.encode(emptyDir, forKey: .emptyDir)
        }
        if let hostPath = self.hostPath {
            try encodeContainer.encode(hostPath, forKey: .hostPath)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let secret = self.secret {
            try encodeContainer.encode(secret, forKey: .secret)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let hostPathDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksHostPath.self, forKey: .hostPath)
        hostPath = hostPathDecoded
        let emptyDirDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksEmptyDir.self, forKey: .emptyDir)
        emptyDir = emptyDirDecoded
        let secretDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksSecret.self, forKey: .secret)
        secret = secretDecoded
    }
}

extension BatchClientTypes {
    /// Specifies an Amazon EKS volume for a job definition.
    public struct EksVolume: Swift.Equatable {
        /// Specifies the configuration of a Kubernetes emptyDir volume. For more information, see [emptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) in the Kubernetes documentation.
        public var emptyDir: BatchClientTypes.EksEmptyDir?
        /// Specifies the configuration of a Kubernetes hostPath volume. For more information, see [hostPath](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) in the Kubernetes documentation.
        public var hostPath: BatchClientTypes.EksHostPath?
        /// The name of the volume. The name must be allowed as a DNS subdomain name. For more information, see [DNS subdomain names](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) in the Kubernetes documentation.
        /// This member is required.
        public var name: Swift.String?
        /// Specifies the configuration of a Kubernetes secret volume. For more information, see [secret](https://kubernetes.io/docs/concepts/storage/volumes/#secret) in the Kubernetes documentation.
        public var secret: BatchClientTypes.EksSecret?

        public init (
            emptyDir: BatchClientTypes.EksEmptyDir? = nil,
            hostPath: BatchClientTypes.EksHostPath? = nil,
            name: Swift.String? = nil,
            secret: BatchClientTypes.EksSecret? = nil
        )
        {
            self.emptyDir = emptyDir
            self.hostPath = hostPath
            self.name = name
            self.secret = secret
        }
    }

}

extension BatchClientTypes.EvaluateOnExit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case onExitCode
        case onReason
        case onStatusReason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let onExitCode = self.onExitCode {
            try encodeContainer.encode(onExitCode, forKey: .onExitCode)
        }
        if let onReason = self.onReason {
            try encodeContainer.encode(onReason, forKey: .onReason)
        }
        if let onStatusReason = self.onStatusReason {
            try encodeContainer.encode(onStatusReason, forKey: .onStatusReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let onStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .onStatusReason)
        onStatusReason = onStatusReasonDecoded
        let onReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .onReason)
        onReason = onReasonDecoded
        let onExitCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .onExitCode)
        onExitCode = onExitCodeDecoded
        let actionDecoded = try containerValues.decodeIfPresent(BatchClientTypes.RetryAction.self, forKey: .action)
        action = actionDecoded
    }
}

extension BatchClientTypes {
    /// Specifies an array of up to 5 conditions to be met, and an action to take (RETRY or EXIT) if all conditions are met. If none of the EvaluateOnExit conditions in a RetryStrategy match, then the job is retried.
    public struct EvaluateOnExit: Swift.Equatable {
        /// Specifies the action to take if all of the specified conditions (onStatusReason, onReason, and onExitCode) are met. The values aren't case sensitive.
        /// This member is required.
        public var action: BatchClientTypes.RetryAction?
        /// Contains a glob pattern to match against the decimal representation of the ExitCode returned for a job. The pattern can be up to 512 characters long. It can contain only numbers, and can end with an asterisk (*) so that only the start of the string needs to be an exact match. The string can contain up to 512 characters.
        public var onExitCode: Swift.String?
        /// Contains a glob pattern to match against the Reason returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces and tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
        public var onReason: Swift.String?
        /// Contains a glob pattern to match against the StatusReason returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white spaces (including spaces or tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
        public var onStatusReason: Swift.String?

        public init (
            action: BatchClientTypes.RetryAction? = nil,
            onExitCode: Swift.String? = nil,
            onReason: Swift.String? = nil,
            onStatusReason: Swift.String? = nil
        )
        {
            self.action = action
            self.onExitCode = onExitCode
            self.onReason = onReason
            self.onStatusReason = onStatusReason
        }
    }

}

extension BatchClientTypes.FairsharePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeReservation
        case shareDecaySeconds
        case shareDistribution
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeReservation = self.computeReservation {
            try encodeContainer.encode(computeReservation, forKey: .computeReservation)
        }
        if let shareDecaySeconds = self.shareDecaySeconds {
            try encodeContainer.encode(shareDecaySeconds, forKey: .shareDecaySeconds)
        }
        if let shareDistribution = shareDistribution {
            var shareDistributionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .shareDistribution)
            for shareattributes0 in shareDistribution {
                try shareDistributionContainer.encode(shareattributes0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shareDecaySecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shareDecaySeconds)
        shareDecaySeconds = shareDecaySecondsDecoded
        let computeReservationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeReservation)
        computeReservation = computeReservationDecoded
        let shareDistributionContainer = try containerValues.decodeIfPresent([BatchClientTypes.ShareAttributes?].self, forKey: .shareDistribution)
        var shareDistributionDecoded0:[BatchClientTypes.ShareAttributes]? = nil
        if let shareDistributionContainer = shareDistributionContainer {
            shareDistributionDecoded0 = [BatchClientTypes.ShareAttributes]()
            for structure0 in shareDistributionContainer {
                if let structure0 = structure0 {
                    shareDistributionDecoded0?.append(structure0)
                }
            }
        }
        shareDistribution = shareDistributionDecoded0
    }
}

extension BatchClientTypes {
    /// The fair share policy for a scheduling policy.
    public struct FairsharePolicy: Swift.Equatable {
        /// A value used to reserve some of the available maximum vCPU for fair share identifiers that aren't already used. The reserved ratio is (computeReservation/100)^ActiveFairShares  where  ActiveFairShares  is the number of active fair share identifiers. For example, a computeReservation value of 50 indicates that Batchreserves 50% of the maximum available vCPU if there's only one fair share identifier. It reserves 25% if there are two fair share identifiers. It reserves 12.5% if there are three fair share identifiers. A computeReservation value of 25 indicates that Batch should reserve 25% of the maximum available vCPU if there's only one fair share identifier, 6.25% if there are two fair share identifiers, and 1.56% if there are three fair share identifiers. The minimum value is 0 and the maximum value is 99.
        public var computeReservation: Swift.Int?
        /// The amount of time (in seconds) to use to calculate a fair share percentage for each fair share identifier in use. A value of zero (0) indicates that only current usage is measured. The decay allows for more recently run jobs to have more weight than jobs that ran earlier. The maximum supported value is 604800 (1 week).
        public var shareDecaySeconds: Swift.Int?
        /// An array of SharedIdentifier objects that contain the weights for the fair share identifiers for the fair share policy. Fair share identifiers that aren't included have a default weight of 1.0.
        public var shareDistribution: [BatchClientTypes.ShareAttributes]?

        public init (
            computeReservation: Swift.Int? = nil,
            shareDecaySeconds: Swift.Int? = nil,
            shareDistribution: [BatchClientTypes.ShareAttributes]? = nil
        )
        {
            self.computeReservation = computeReservation
            self.shareDecaySeconds = shareDecaySeconds
            self.shareDistribution = shareDistribution
        }
    }

}

extension BatchClientTypes.FargatePlatformConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case platformVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let platformVersion = self.platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
    }
}

extension BatchClientTypes {
    /// The platform configuration for jobs that are running on Fargate resources. Jobs that run on EC2 resources must not specify this parameter.
    public struct FargatePlatformConfiguration: Swift.Equatable {
        /// The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the LATEST platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see [Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
        public var platformVersion: Swift.String?

        public init (
            platformVersion: Swift.String? = nil
        )
        {
            self.platformVersion = platformVersion
        }
    }

}

extension BatchClientTypes.Host: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourcePath
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourcePath = self.sourcePath {
            try encodeContainer.encode(sourcePath, forKey: .sourcePath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourcePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourcePath)
        sourcePath = sourcePathDecoded
    }
}

extension BatchClientTypes {
    /// Determine whether your data volume persists on the host container instance and where it's stored. If this parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.
    public struct Host: Swift.Equatable {
        /// The path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If this parameter contains a file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the source path location doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported. This parameter isn't applicable to jobs that run on Fargate resources. Don't provide this for these jobs.
        public var sourcePath: Swift.String?

        public init (
            sourcePath: Swift.String? = nil
        )
        {
            self.sourcePath = sourcePath
        }
    }

}

extension BatchClientTypes {
    public enum JQState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [JQState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JQState(rawValue: rawValue) ?? JQState.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum JQStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creating
        case deleted
        case deleting
        case invalid
        case updating
        case valid
        case sdkUnknown(Swift.String)

        public static var allCases: [JQStatus] {
            return [
                .creating,
                .deleted,
                .deleting,
                .invalid,
                .updating,
                .valid,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .invalid: return "INVALID"
            case .updating: return "UPDATING"
            case .valid: return "VALID"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JQStatus(rawValue: rawValue) ?? JQStatus.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.JobDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerOrchestrationType
        case containerProperties
        case eksProperties
        case jobDefinitionArn
        case jobDefinitionName
        case nodeProperties
        case parameters
        case platformCapabilities
        case propagateTags
        case retryStrategy
        case revision
        case schedulingPriority
        case status
        case tags
        case timeout
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerOrchestrationType = self.containerOrchestrationType {
            try encodeContainer.encode(containerOrchestrationType.rawValue, forKey: .containerOrchestrationType)
        }
        if let containerProperties = self.containerProperties {
            try encodeContainer.encode(containerProperties, forKey: .containerProperties)
        }
        if let eksProperties = self.eksProperties {
            try encodeContainer.encode(eksProperties, forKey: .eksProperties)
        }
        if let jobDefinitionArn = self.jobDefinitionArn {
            try encodeContainer.encode(jobDefinitionArn, forKey: .jobDefinitionArn)
        }
        if let jobDefinitionName = self.jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let nodeProperties = self.nodeProperties {
            try encodeContainer.encode(nodeProperties, forKey: .nodeProperties)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersMap0) in parameters {
                try parametersContainer.encode(parametersMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let platformCapabilities = platformCapabilities {
            var platformCapabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformCapabilities)
            for platformcapability0 in platformCapabilities {
                try platformCapabilitiesContainer.encode(platformcapability0.rawValue)
            }
        }
        if let propagateTags = self.propagateTags {
            try encodeContainer.encode(propagateTags, forKey: .propagateTags)
        }
        if let retryStrategy = self.retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let revision = self.revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
        if let schedulingPriority = self.schedulingPriority {
            try encodeContainer.encode(schedulingPriority, forKey: .schedulingPriority)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagrisTagsMap0) in tags {
                try tagsContainer.encode(tagrisTagsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeout = self.timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .revision)
        revision = revisionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let schedulingPriorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .schedulingPriority)
        schedulingPriority = schedulingPriorityDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in parametersContainer {
                if let string0 = string0 {
                    parametersDecoded0?[key0] = string0
                }
            }
        }
        parameters = parametersDecoded0
        let retryStrategyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let containerPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerProperties.self, forKey: .containerProperties)
        containerProperties = containerPropertiesDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
        let nodePropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodeProperties.self, forKey: .nodeProperties)
        nodeProperties = nodePropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let propagateTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let platformCapabilitiesContainer = try containerValues.decodeIfPresent([BatchClientTypes.PlatformCapability?].self, forKey: .platformCapabilities)
        var platformCapabilitiesDecoded0:[BatchClientTypes.PlatformCapability]? = nil
        if let platformCapabilitiesContainer = platformCapabilitiesContainer {
            platformCapabilitiesDecoded0 = [BatchClientTypes.PlatformCapability]()
            for enum0 in platformCapabilitiesContainer {
                if let enum0 = enum0 {
                    platformCapabilitiesDecoded0?.append(enum0)
                }
            }
        }
        platformCapabilities = platformCapabilitiesDecoded0
        let eksPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksProperties.self, forKey: .eksProperties)
        eksProperties = eksPropertiesDecoded
        let containerOrchestrationTypeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.OrchestrationType.self, forKey: .containerOrchestrationType)
        containerOrchestrationType = containerOrchestrationTypeDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents an Batch job definition.
    public struct JobDefinition: Swift.Equatable {
        /// The orchestration type of the compute environment. The valid values are ECS (default) or EKS.
        public var containerOrchestrationType: BatchClientTypes.OrchestrationType?
        /// An object with various properties specific to Amazon ECS based jobs. Valid values are containerProperties, eksProperties, and nodeProperties. Only one can be specified.
        public var containerProperties: BatchClientTypes.ContainerProperties?
        /// An object with various properties that are specific to Amazon EKS based jobs. Valid values are containerProperties, eksProperties, and nodeProperties. Only one can be specified.
        public var eksProperties: BatchClientTypes.EksProperties?
        /// The Amazon Resource Name (ARN) for the job definition.
        /// This member is required.
        public var jobDefinitionArn: Swift.String?
        /// The name of the job definition.
        /// This member is required.
        public var jobDefinitionName: Swift.String?
        /// An object with various properties that are specific to multi-node parallel jobs. Valid values are containerProperties, eksProperties, and nodeProperties. Only one can be specified. If the job runs on Fargate resources, don't specify nodeProperties. Use containerProperties instead.
        public var nodeProperties: BatchClientTypes.NodeProperties?
        /// Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see [Job definition parameters](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html) in the Batch User Guide.
        public var parameters: [Swift.String:Swift.String]?
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. Jobs run on Fargate resources specify FARGATE.
        public var platformCapabilities: [BatchClientTypes.PlatformCapability]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state.
        public var propagateTags: Swift.Bool?
        /// The retry strategy to use for failed jobs that are submitted with this job definition.
        public var retryStrategy: BatchClientTypes.RetryStrategy?
        /// The revision of the job definition.
        /// This member is required.
        public var revision: Swift.Int?
        /// The scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
        public var schedulingPriority: Swift.Int?
        /// The status of the job definition.
        public var status: Swift.String?
        /// The tags that are applied to the job definition.
        public var tags: [Swift.String:Swift.String]?
        /// The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, Batch terminates your jobs if they aren't finished.
        public var timeout: BatchClientTypes.JobTimeout?
        /// The type of job definition. It's either container or multinode. If the job is run on Fargate resources, then multinode isn't supported. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the Batch User Guide.
        /// This member is required.
        public var type: Swift.String?

        public init (
            containerOrchestrationType: BatchClientTypes.OrchestrationType? = nil,
            containerProperties: BatchClientTypes.ContainerProperties? = nil,
            eksProperties: BatchClientTypes.EksProperties? = nil,
            jobDefinitionArn: Swift.String? = nil,
            jobDefinitionName: Swift.String? = nil,
            nodeProperties: BatchClientTypes.NodeProperties? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            platformCapabilities: [BatchClientTypes.PlatformCapability]? = nil,
            propagateTags: Swift.Bool? = nil,
            retryStrategy: BatchClientTypes.RetryStrategy? = nil,
            revision: Swift.Int? = nil,
            schedulingPriority: Swift.Int? = nil,
            status: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            timeout: BatchClientTypes.JobTimeout? = nil,
            type: Swift.String? = nil
        )
        {
            self.containerOrchestrationType = containerOrchestrationType
            self.containerProperties = containerProperties
            self.eksProperties = eksProperties
            self.jobDefinitionArn = jobDefinitionArn
            self.jobDefinitionName = jobDefinitionName
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.revision = revision
            self.schedulingPriority = schedulingPriority
            self.status = status
            self.tags = tags
            self.timeout = timeout
            self.type = type
        }
    }

}

extension BatchClientTypes {
    public enum JobDefinitionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case container
        case multinode
        case sdkUnknown(Swift.String)

        public static var allCases: [JobDefinitionType] {
            return [
                .container,
                .multinode,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .container: return "container"
            case .multinode: return "multinode"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobDefinitionType(rawValue: rawValue) ?? JobDefinitionType.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.JobDependency: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ArrayJobDependency.self, forKey: .type)
        type = typeDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents an Batch job dependency.
    public struct JobDependency: Swift.Equatable {
        /// The job ID of the Batch job that's associated with this dependency.
        public var jobId: Swift.String?
        /// The type of the job dependency.
        public var type: BatchClientTypes.ArrayJobDependency?

        public init (
            jobId: Swift.String? = nil,
            type: BatchClientTypes.ArrayJobDependency? = nil
        )
        {
            self.jobId = jobId
            self.type = type
        }
    }

}

extension BatchClientTypes.JobDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayProperties
        case attempts
        case container
        case createdAt
        case dependsOn
        case eksAttempts
        case eksProperties
        case isCancelled
        case isTerminated
        case jobArn
        case jobDefinition
        case jobId
        case jobName
        case jobQueue
        case nodeDetails
        case nodeProperties
        case parameters
        case platformCapabilities
        case propagateTags
        case retryStrategy
        case schedulingPriority
        case shareIdentifier
        case startedAt
        case status
        case statusReason
        case stoppedAt
        case tags
        case timeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arrayProperties = self.arrayProperties {
            try encodeContainer.encode(arrayProperties, forKey: .arrayProperties)
        }
        if let attempts = attempts {
            var attemptsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attempts)
            for attemptdetail0 in attempts {
                try attemptsContainer.encode(attemptdetail0)
            }
        }
        if let container = self.container {
            try encodeContainer.encode(container, forKey: .container)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let dependsOn = dependsOn {
            var dependsOnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dependsOn)
            for jobdependency0 in dependsOn {
                try dependsOnContainer.encode(jobdependency0)
            }
        }
        if let eksAttempts = eksAttempts {
            var eksAttemptsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eksAttempts)
            for eksattemptdetail0 in eksAttempts {
                try eksAttemptsContainer.encode(eksattemptdetail0)
            }
        }
        if let eksProperties = self.eksProperties {
            try encodeContainer.encode(eksProperties, forKey: .eksProperties)
        }
        if let isCancelled = self.isCancelled {
            try encodeContainer.encode(isCancelled, forKey: .isCancelled)
        }
        if let isTerminated = self.isTerminated {
            try encodeContainer.encode(isTerminated, forKey: .isTerminated)
        }
        if let jobArn = self.jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobDefinition = self.jobDefinition {
            try encodeContainer.encode(jobDefinition, forKey: .jobDefinition)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobQueue = self.jobQueue {
            try encodeContainer.encode(jobQueue, forKey: .jobQueue)
        }
        if let nodeDetails = self.nodeDetails {
            try encodeContainer.encode(nodeDetails, forKey: .nodeDetails)
        }
        if let nodeProperties = self.nodeProperties {
            try encodeContainer.encode(nodeProperties, forKey: .nodeProperties)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersMap0) in parameters {
                try parametersContainer.encode(parametersMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let platformCapabilities = platformCapabilities {
            var platformCapabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformCapabilities)
            for platformcapability0 in platformCapabilities {
                try platformCapabilitiesContainer.encode(platformcapability0.rawValue)
            }
        }
        if let propagateTags = self.propagateTags {
            try encodeContainer.encode(propagateTags, forKey: .propagateTags)
        }
        if let retryStrategy = self.retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let schedulingPriority = self.schedulingPriority {
            try encodeContainer.encode(schedulingPriority, forKey: .schedulingPriority)
        }
        if let shareIdentifier = self.shareIdentifier {
            try encodeContainer.encode(shareIdentifier, forKey: .shareIdentifier)
        }
        if let startedAt = self.startedAt {
            try encodeContainer.encode(startedAt, forKey: .startedAt)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let stoppedAt = self.stoppedAt {
            try encodeContainer.encode(stoppedAt, forKey: .stoppedAt)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagrisTagsMap0) in tags {
                try tagsContainer.encode(tagrisTagsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeout = self.timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobQueueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueue)
        jobQueue = jobQueueDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobStatus.self, forKey: .status)
        status = statusDecoded
        let shareIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shareIdentifier)
        shareIdentifier = shareIdentifierDecoded
        let schedulingPriorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .schedulingPriority)
        schedulingPriority = schedulingPriorityDecoded
        let attemptsContainer = try containerValues.decodeIfPresent([BatchClientTypes.AttemptDetail?].self, forKey: .attempts)
        var attemptsDecoded0:[BatchClientTypes.AttemptDetail]? = nil
        if let attemptsContainer = attemptsContainer {
            attemptsDecoded0 = [BatchClientTypes.AttemptDetail]()
            for structure0 in attemptsContainer {
                if let structure0 = structure0 {
                    attemptsDecoded0?.append(structure0)
                }
            }
        }
        attempts = attemptsDecoded0
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let stoppedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stoppedAt)
        stoppedAt = stoppedAtDecoded
        let dependsOnContainer = try containerValues.decodeIfPresent([BatchClientTypes.JobDependency?].self, forKey: .dependsOn)
        var dependsOnDecoded0:[BatchClientTypes.JobDependency]? = nil
        if let dependsOnContainer = dependsOnContainer {
            dependsOnDecoded0 = [BatchClientTypes.JobDependency]()
            for structure0 in dependsOnContainer {
                if let structure0 = structure0 {
                    dependsOnDecoded0?.append(structure0)
                }
            }
        }
        dependsOn = dependsOnDecoded0
        let jobDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinition)
        jobDefinition = jobDefinitionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in parametersContainer {
                if let string0 = string0 {
                    parametersDecoded0?[key0] = string0
                }
            }
        }
        parameters = parametersDecoded0
        let containerDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerDetail.self, forKey: .container)
        container = containerDecoded
        let nodeDetailsDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodeDetails.self, forKey: .nodeDetails)
        nodeDetails = nodeDetailsDecoded
        let nodePropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodeProperties.self, forKey: .nodeProperties)
        nodeProperties = nodePropertiesDecoded
        let arrayPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ArrayPropertiesDetail.self, forKey: .arrayProperties)
        arrayProperties = arrayPropertiesDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let propagateTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let platformCapabilitiesContainer = try containerValues.decodeIfPresent([BatchClientTypes.PlatformCapability?].self, forKey: .platformCapabilities)
        var platformCapabilitiesDecoded0:[BatchClientTypes.PlatformCapability]? = nil
        if let platformCapabilitiesContainer = platformCapabilitiesContainer {
            platformCapabilitiesDecoded0 = [BatchClientTypes.PlatformCapability]()
            for enum0 in platformCapabilitiesContainer {
                if let enum0 = enum0 {
                    platformCapabilitiesDecoded0?.append(enum0)
                }
            }
        }
        platformCapabilities = platformCapabilitiesDecoded0
        let eksPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksPropertiesDetail.self, forKey: .eksProperties)
        eksProperties = eksPropertiesDecoded
        let eksAttemptsContainer = try containerValues.decodeIfPresent([BatchClientTypes.EksAttemptDetail?].self, forKey: .eksAttempts)
        var eksAttemptsDecoded0:[BatchClientTypes.EksAttemptDetail]? = nil
        if let eksAttemptsContainer = eksAttemptsContainer {
            eksAttemptsDecoded0 = [BatchClientTypes.EksAttemptDetail]()
            for structure0 in eksAttemptsContainer {
                if let structure0 = structure0 {
                    eksAttemptsDecoded0?.append(structure0)
                }
            }
        }
        eksAttempts = eksAttemptsDecoded0
        let isCancelledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isCancelled)
        isCancelled = isCancelledDecoded
        let isTerminatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTerminated)
        isTerminated = isTerminatedDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents an Batch job.
    public struct JobDetail: Swift.Equatable {
        /// The array properties of the job, if it's an array job.
        public var arrayProperties: BatchClientTypes.ArrayPropertiesDetail?
        /// A list of job attempts that are associated with this job.
        public var attempts: [BatchClientTypes.AttemptDetail]?
        /// An object that represents the details for the container that's associated with the job.
        public var container: BatchClientTypes.ContainerDetail?
        /// The Unix timestamp (in milliseconds) for when the job was created. For non-array jobs and parent array jobs, this is when the job entered the SUBMITTED state. This is specifically at the time [SubmitJob] was called. For array child jobs, this is when the child job was spawned by its parent and entered the PENDING state.
        public var createdAt: Swift.Int?
        /// A list of job IDs that this job depends on.
        public var dependsOn: [BatchClientTypes.JobDependency]?
        /// A list of job attempts that are associated with this job.
        public var eksAttempts: [BatchClientTypes.EksAttemptDetail]?
        /// An object with various properties that are specific to Amazon EKS based jobs. Only one of container, eksProperties, or nodeDetails is specified.
        public var eksProperties: BatchClientTypes.EksPropertiesDetail?
        /// Indicates whether the job is canceled.
        public var isCancelled: Swift.Bool?
        /// Indicates whether the job is terminated.
        public var isTerminated: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the job.
        public var jobArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the job definition that this job uses.
        /// This member is required.
        public var jobDefinition: Swift.String?
        /// The job ID.
        /// This member is required.
        public var jobId: Swift.String?
        /// The job name.
        /// This member is required.
        public var jobName: Swift.String?
        /// The Amazon Resource Name (ARN) of the job queue that the job is associated with.
        /// This member is required.
        public var jobQueue: Swift.String?
        /// An object that represents the details of a node that's associated with a multi-node parallel job.
        public var nodeDetails: BatchClientTypes.NodeDetails?
        /// An object that represents the node properties of a multi-node parallel job. This isn't applicable to jobs that are running on Fargate resources.
        public var nodeProperties: BatchClientTypes.NodeProperties?
        /// Additional parameters that are passed to the job that replace parameter substitution placeholders or override any corresponding parameter defaults from the job definition.
        public var parameters: [Swift.String:Swift.String]?
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. Jobs run on Fargate resources specify FARGATE.
        public var platformCapabilities: [BatchClientTypes.PlatformCapability]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state.
        public var propagateTags: Swift.Bool?
        /// The retry strategy to use for this job if an attempt fails.
        public var retryStrategy: BatchClientTypes.RetryStrategy?
        /// The scheduling policy of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
        public var schedulingPriority: Swift.Int?
        /// The share identifier for the job.
        public var shareIdentifier: Swift.String?
        /// The Unix timestamp (in milliseconds) for when the job was started. More specifically, it's when the job transitioned from the STARTING state to the RUNNING state. This parameter isn't provided for child jobs of array jobs or multi-node parallel jobs.
        /// This member is required.
        public var startedAt: Swift.Int?
        /// The current status for the job. If your jobs don't progress to STARTING, see [Jobs stuck in RUNNABLE status](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#job_stuck_in_runnable) in the troubleshooting section of the Batch User Guide.
        /// This member is required.
        public var status: BatchClientTypes.JobStatus?
        /// A short, human-readable string to provide more details for the current status of the job.
        public var statusReason: Swift.String?
        /// The Unix timestamp (in milliseconds) for when the job was stopped. More specifically, it's when the job transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED.
        public var stoppedAt: Swift.Int?
        /// The tags that are applied to the job.
        public var tags: [Swift.String:Swift.String]?
        /// The timeout configuration for the job.
        public var timeout: BatchClientTypes.JobTimeout?

        public init (
            arrayProperties: BatchClientTypes.ArrayPropertiesDetail? = nil,
            attempts: [BatchClientTypes.AttemptDetail]? = nil,
            container: BatchClientTypes.ContainerDetail? = nil,
            createdAt: Swift.Int? = nil,
            dependsOn: [BatchClientTypes.JobDependency]? = nil,
            eksAttempts: [BatchClientTypes.EksAttemptDetail]? = nil,
            eksProperties: BatchClientTypes.EksPropertiesDetail? = nil,
            isCancelled: Swift.Bool? = nil,
            isTerminated: Swift.Bool? = nil,
            jobArn: Swift.String? = nil,
            jobDefinition: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobQueue: Swift.String? = nil,
            nodeDetails: BatchClientTypes.NodeDetails? = nil,
            nodeProperties: BatchClientTypes.NodeProperties? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            platformCapabilities: [BatchClientTypes.PlatformCapability]? = nil,
            propagateTags: Swift.Bool? = nil,
            retryStrategy: BatchClientTypes.RetryStrategy? = nil,
            schedulingPriority: Swift.Int? = nil,
            shareIdentifier: Swift.String? = nil,
            startedAt: Swift.Int? = nil,
            status: BatchClientTypes.JobStatus? = nil,
            statusReason: Swift.String? = nil,
            stoppedAt: Swift.Int? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            timeout: BatchClientTypes.JobTimeout? = nil
        )
        {
            self.arrayProperties = arrayProperties
            self.attempts = attempts
            self.container = container
            self.createdAt = createdAt
            self.dependsOn = dependsOn
            self.eksAttempts = eksAttempts
            self.eksProperties = eksProperties
            self.isCancelled = isCancelled
            self.isTerminated = isTerminated
            self.jobArn = jobArn
            self.jobDefinition = jobDefinition
            self.jobId = jobId
            self.jobName = jobName
            self.jobQueue = jobQueue
            self.nodeDetails = nodeDetails
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.schedulingPriority = schedulingPriority
            self.shareIdentifier = shareIdentifier
            self.startedAt = startedAt
            self.status = status
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
            self.tags = tags
            self.timeout = timeout
        }
    }

}

extension BatchClientTypes.JobQueueDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentOrder
        case jobQueueArn
        case jobQueueName
        case priority
        case schedulingPolicyArn
        case state
        case status
        case statusReason
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentOrder = computeEnvironmentOrder {
            var computeEnvironmentOrderContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computeEnvironmentOrder)
            for computeenvironmentorder0 in computeEnvironmentOrder {
                try computeEnvironmentOrderContainer.encode(computeenvironmentorder0)
            }
        }
        if let jobQueueArn = self.jobQueueArn {
            try encodeContainer.encode(jobQueueArn, forKey: .jobQueueArn)
        }
        if let jobQueueName = self.jobQueueName {
            try encodeContainer.encode(jobQueueName, forKey: .jobQueueName)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let schedulingPolicyArn = self.schedulingPolicyArn {
            try encodeContainer.encode(schedulingPolicyArn, forKey: .schedulingPolicyArn)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagrisTagsMap0) in tags {
                try tagsContainer.encode(tagrisTagsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueName)
        jobQueueName = jobQueueNameDecoded
        let jobQueueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueArn)
        jobQueueArn = jobQueueArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JQState.self, forKey: .state)
        state = stateDecoded
        let schedulingPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedulingPolicyArn)
        schedulingPolicyArn = schedulingPolicyArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JQStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let computeEnvironmentOrderContainer = try containerValues.decodeIfPresent([BatchClientTypes.ComputeEnvironmentOrder?].self, forKey: .computeEnvironmentOrder)
        var computeEnvironmentOrderDecoded0:[BatchClientTypes.ComputeEnvironmentOrder]? = nil
        if let computeEnvironmentOrderContainer = computeEnvironmentOrderContainer {
            computeEnvironmentOrderDecoded0 = [BatchClientTypes.ComputeEnvironmentOrder]()
            for structure0 in computeEnvironmentOrderContainer {
                if let structure0 = structure0 {
                    computeEnvironmentOrderDecoded0?.append(structure0)
                }
            }
        }
        computeEnvironmentOrder = computeEnvironmentOrderDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension BatchClientTypes {
    /// An object that represents the details for an Batch job queue.
    public struct JobQueueDetail: Swift.Equatable {
        /// The compute environments that are attached to the job queue and the order that job placement is preferred. Compute environments are selected for job placement in ascending order.
        /// This member is required.
        public var computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
        /// The Amazon Resource Name (ARN) of the job queue.
        /// This member is required.
        public var jobQueueArn: Swift.String?
        /// The job queue name.
        /// This member is required.
        public var jobQueueName: Swift.String?
        /// The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order. For example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT). EC2 and Fargate compute environments can't be mixed.
        /// This member is required.
        public var priority: Swift.Int?
        /// The Amazon Resource Name (ARN) of the scheduling policy. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . For example, aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy.
        public var schedulingPolicyArn: Swift.String?
        /// Describes the ability of the queue to accept new jobs. If the job queue state is ENABLED, it can accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
        /// This member is required.
        public var state: BatchClientTypes.JQState?
        /// The status of the job queue (for example, CREATING or VALID).
        public var status: BatchClientTypes.JQStatus?
        /// A short, human-readable string to provide additional details for the current status of the job queue.
        public var statusReason: Swift.String?
        /// The tags that are applied to the job queue. For more information, see [Tagging your Batch resources](https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html) in Batch User Guide.
        public var tags: [Swift.String:Swift.String]?

        public init (
            computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]? = nil,
            jobQueueArn: Swift.String? = nil,
            jobQueueName: Swift.String? = nil,
            priority: Swift.Int? = nil,
            schedulingPolicyArn: Swift.String? = nil,
            state: BatchClientTypes.JQState? = nil,
            status: BatchClientTypes.JQStatus? = nil,
            statusReason: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.computeEnvironmentOrder = computeEnvironmentOrder
            self.jobQueueArn = jobQueueArn
            self.jobQueueName = jobQueueName
            self.priority = priority
            self.schedulingPolicyArn = schedulingPolicyArn
            self.state = state
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
        }
    }

}

extension BatchClientTypes {
    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case runnable
        case running
        case starting
        case submitted
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .failed,
                .pending,
                .runnable,
                .running,
                .starting,
                .submitted,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .runnable: return "RUNNABLE"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .submitted: return "SUBMITTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobStatus(rawValue: rawValue) ?? JobStatus.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.JobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayProperties
        case container
        case createdAt
        case jobArn
        case jobDefinition
        case jobId
        case jobName
        case nodeProperties
        case startedAt
        case status
        case statusReason
        case stoppedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arrayProperties = self.arrayProperties {
            try encodeContainer.encode(arrayProperties, forKey: .arrayProperties)
        }
        if let container = self.container {
            try encodeContainer.encode(container, forKey: .container)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let jobArn = self.jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobDefinition = self.jobDefinition {
            try encodeContainer.encode(jobDefinition, forKey: .jobDefinition)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let nodeProperties = self.nodeProperties {
            try encodeContainer.encode(nodeProperties, forKey: .nodeProperties)
        }
        if let startedAt = self.startedAt {
            try encodeContainer.encode(startedAt, forKey: .startedAt)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let stoppedAt = self.stoppedAt {
            try encodeContainer.encode(stoppedAt, forKey: .stoppedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let stoppedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stoppedAt)
        stoppedAt = stoppedAtDecoded
        let containerDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerSummary.self, forKey: .container)
        container = containerDecoded
        let arrayPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ArrayPropertiesSummary.self, forKey: .arrayProperties)
        arrayProperties = arrayPropertiesDecoded
        let nodePropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodePropertiesSummary.self, forKey: .nodeProperties)
        nodeProperties = nodePropertiesDecoded
        let jobDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinition)
        jobDefinition = jobDefinitionDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents summary details of a job.
    public struct JobSummary: Swift.Equatable {
        /// The array properties of the job, if it's an array job.
        public var arrayProperties: BatchClientTypes.ArrayPropertiesSummary?
        /// An object that represents the details of the container that's associated with the job.
        public var container: BatchClientTypes.ContainerSummary?
        /// The Unix timestamp (in milliseconds) for when the job was created. For non-array jobs and parent array jobs, this is when the job entered the SUBMITTED state (at the time [SubmitJob] was called). For array child jobs, this is when the child job was spawned by its parent and entered the PENDING state.
        public var createdAt: Swift.Int?
        /// The Amazon Resource Name (ARN) of the job.
        public var jobArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the job definition.
        public var jobDefinition: Swift.String?
        /// The job ID.
        /// This member is required.
        public var jobId: Swift.String?
        /// The job name.
        /// This member is required.
        public var jobName: Swift.String?
        /// The node properties for a single node in a job summary list. This isn't applicable to jobs that are running on Fargate resources.
        public var nodeProperties: BatchClientTypes.NodePropertiesSummary?
        /// The Unix timestamp for when the job was started. More specifically, it's when the job transitioned from the STARTING state to the RUNNING state.
        public var startedAt: Swift.Int?
        /// The current status for the job.
        public var status: BatchClientTypes.JobStatus?
        /// A short, human-readable string to provide more details for the current status of the job.
        public var statusReason: Swift.String?
        /// The Unix timestamp for when the job was stopped. More specifically, it's when the job transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED.
        public var stoppedAt: Swift.Int?

        public init (
            arrayProperties: BatchClientTypes.ArrayPropertiesSummary? = nil,
            container: BatchClientTypes.ContainerSummary? = nil,
            createdAt: Swift.Int? = nil,
            jobArn: Swift.String? = nil,
            jobDefinition: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            nodeProperties: BatchClientTypes.NodePropertiesSummary? = nil,
            startedAt: Swift.Int? = nil,
            status: BatchClientTypes.JobStatus? = nil,
            statusReason: Swift.String? = nil,
            stoppedAt: Swift.Int? = nil
        )
        {
            self.arrayProperties = arrayProperties
            self.container = container
            self.createdAt = createdAt
            self.jobArn = jobArn
            self.jobDefinition = jobDefinition
            self.jobId = jobId
            self.jobName = jobName
            self.nodeProperties = nodeProperties
            self.startedAt = startedAt
            self.status = status
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
        }
    }

}

extension BatchClientTypes.JobTimeout: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attemptDurationSeconds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attemptDurationSeconds = self.attemptDurationSeconds {
            try encodeContainer.encode(attemptDurationSeconds, forKey: .attemptDurationSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attemptDurationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .attemptDurationSeconds)
        attemptDurationSeconds = attemptDurationSecondsDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents a job timeout configuration.
    public struct JobTimeout: Swift.Equatable {
        /// The job timeout time (in seconds) that's measured from the job attempt's startedAt timestamp. After this time passes, Batch terminates your jobs if they aren't finished. The minimum value for the timeout is 60 seconds. For array jobs, the timeout applies to the child jobs, not to the parent array job. For multi-node parallel (MNP) jobs, the timeout applies to the whole job, not to the individual nodes.
        public var attemptDurationSeconds: Swift.Int?

        public init (
            attemptDurationSeconds: Swift.Int? = nil
        )
        {
            self.attemptDurationSeconds = attemptDurationSeconds
        }
    }

}

extension BatchClientTypes.KeyValuePair: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension BatchClientTypes {
    /// A key-value pair object.
    public struct KeyValuePair: Swift.Equatable {
        /// The name of the key-value pair. For environment variables, this is the name of the environment variable.
        public var name: Swift.String?
        /// The value of the key-value pair. For environment variables, this is the value of the environment variable.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension BatchClientTypes.KeyValuesPair: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for string0 in values {
                try valuesContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension BatchClientTypes {
    /// A filter name and value pair that's used to return a more specific list of results from a ListJobs API operation.
    public struct KeyValuesPair: Swift.Equatable {
        /// The name of the filter. Filter names are case sensitive.
        public var name: Swift.String?
        /// The filter values.
        public var values: [Swift.String]?

        public init (
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension BatchClientTypes.LaunchTemplateSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchTemplateId
        case launchTemplateName
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let launchTemplateId = self.launchTemplateId {
            try encodeContainer.encode(launchTemplateId, forKey: .launchTemplateId)
        }
        if let launchTemplateName = self.launchTemplateName {
            try encodeContainer.encode(launchTemplateName, forKey: .launchTemplateName)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchTemplateId)
        launchTemplateId = launchTemplateIdDecoded
        let launchTemplateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchTemplateName)
        launchTemplateName = launchTemplateNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents a launch template that's associated with a compute resource. You must specify either the launch template ID or launch template name in the request, but not both. If security groups are specified using both the securityGroupIds parameter of CreateComputeEnvironment and the launch template, the values in the securityGroupIds parameter of CreateComputeEnvironment will be used. This object isn't applicable to jobs that are running on Fargate resources.
    public struct LaunchTemplateSpecification: Swift.Equatable {
        /// The ID of the launch template.
        public var launchTemplateId: Swift.String?
        /// The name of the launch template.
        public var launchTemplateName: Swift.String?
        /// The version number of the launch template, $Latest, or $Default. If the value is $Latest, the latest version of the launch template is used. If the value is $Default, the default version of the launch template is used. If the AMI ID that's used in a compute environment is from the launch template, the AMI isn't changed when the compute environment is updated. It's only changed if the updateToLatestImageVersion parameter for the compute environment is set to true. During an infrastructure update, if either $Latest or $Default is specified, Batch re-evaluates the launch template version, and it might use a different version of the launch template. This is the case even if the launch template isn't specified in the update. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. Default: $Default.
        public var version: Swift.String?

        public init (
            launchTemplateId: Swift.String? = nil,
            launchTemplateName: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }
    }

}

extension BatchClientTypes.LinuxParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case devices
        case initProcessEnabled
        case maxSwap
        case sharedMemorySize
        case swappiness
        case tmpfs
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let devices = devices {
            var devicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .devices)
            for device0 in devices {
                try devicesContainer.encode(device0)
            }
        }
        if let initProcessEnabled = self.initProcessEnabled {
            try encodeContainer.encode(initProcessEnabled, forKey: .initProcessEnabled)
        }
        if let maxSwap = self.maxSwap {
            try encodeContainer.encode(maxSwap, forKey: .maxSwap)
        }
        if let sharedMemorySize = self.sharedMemorySize {
            try encodeContainer.encode(sharedMemorySize, forKey: .sharedMemorySize)
        }
        if let swappiness = self.swappiness {
            try encodeContainer.encode(swappiness, forKey: .swappiness)
        }
        if let tmpfs = tmpfs {
            var tmpfsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tmpfs)
            for tmpfs0 in tmpfs {
                try tmpfsContainer.encode(tmpfs0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let devicesContainer = try containerValues.decodeIfPresent([BatchClientTypes.Device?].self, forKey: .devices)
        var devicesDecoded0:[BatchClientTypes.Device]? = nil
        if let devicesContainer = devicesContainer {
            devicesDecoded0 = [BatchClientTypes.Device]()
            for structure0 in devicesContainer {
                if let structure0 = structure0 {
                    devicesDecoded0?.append(structure0)
                }
            }
        }
        devices = devicesDecoded0
        let initProcessEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .initProcessEnabled)
        initProcessEnabled = initProcessEnabledDecoded
        let sharedMemorySizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sharedMemorySize)
        sharedMemorySize = sharedMemorySizeDecoded
        let tmpfsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Tmpfs?].self, forKey: .tmpfs)
        var tmpfsDecoded0:[BatchClientTypes.Tmpfs]? = nil
        if let tmpfsContainer = tmpfsContainer {
            tmpfsDecoded0 = [BatchClientTypes.Tmpfs]()
            for structure0 in tmpfsContainer {
                if let structure0 = structure0 {
                    tmpfsDecoded0?.append(structure0)
                }
            }
        }
        tmpfs = tmpfsDecoded0
        let maxSwapDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSwap)
        maxSwap = maxSwapDecoded
        let swappinessDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .swappiness)
        swappiness = swappinessDecoded
    }
}

extension BatchClientTypes {
    /// Linux-specific modifications that are applied to the container, such as details for device mappings.
    public struct LinuxParameters: Swift.Equatable {
        /// Any of the host devices to expose to the container. This parameter maps to Devices in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --device option to [docker run](https://docs.docker.com/engine/reference/run/). This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
        public var devices: [BatchClientTypes.Device]?
        /// If true, run an init process inside the container that forwards signals and reaps processes. This parameter maps to the --init option to [docker run](https://docs.docker.com/engine/reference/run/). This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version"
        public var initProcessEnabled: Swift.Bool?
        /// The total amount of swap memory (in MiB) a container can use. This parameter is translated to the --memory-swap option to [docker run](https://docs.docker.com/engine/reference/run/) where the value is the sum of the container memory plus the maxSwap value. For more information, see [--memory-swap] details(https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details) in the Docker documentation. If a maxSwap value of 0 is specified, the container doesn't use swap. Accepted values are 0 or any positive integer. If the maxSwap parameter is omitted, the container doesn't use the swap configuration for the container instance that it's running on. A maxSwap value must be set for the swappiness parameter to be used. This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
        public var maxSwap: Swift.Int?
        /// The value for the size (in MiB) of the /dev/shm volume. This parameter maps to the --shm-size option to [docker run](https://docs.docker.com/engine/reference/run/). This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
        public var sharedMemorySize: Swift.Int?
        /// You can use this parameter to tune a container's memory swappiness behavior. A swappiness value of 0 causes swapping to not occur unless absolutely necessary. A swappiness value of 100 causes pages to be swapped aggressively. Valid values are whole numbers between 0 and 100. If the swappiness parameter isn't specified, a default value of 60 is used. If a value isn't specified for maxSwap, then this parameter is ignored. If maxSwap is set to 0, the container doesn't use swap. This parameter maps to the --memory-swappiness option to [docker run](https://docs.docker.com/engine/reference/run/). Consider the following when you use a per-container swap configuration.
        ///
        /// * Swap space must be enabled and allocated on the container instance for the containers to use. By default, the Amazon ECS optimized AMIs don't have swap enabled. You must enable swap on the instance to use this feature. For more information, see [Instance store swap volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-store-swap-volumes.html) in the Amazon EC2 User Guide for Linux Instances or [How do I allocate memory to work as swap space in an Amazon EC2 instance by using a swap file?](http://aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/)
        ///
        /// * The swap space parameters are only supported for job definitions using EC2 resources.
        ///
        /// * If the maxSwap and swappiness parameters are omitted from a job definition, each container has a default swappiness value of 60. Moreover, the total swap usage is limited to two times the memory reservation of the container.
        ///
        ///
        /// This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
        public var swappiness: Swift.Int?
        /// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the --tmpfs option to [docker run](https://docs.docker.com/engine/reference/run/). This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide this parameter for this resource type.
        public var tmpfs: [BatchClientTypes.Tmpfs]?

        public init (
            devices: [BatchClientTypes.Device]? = nil,
            initProcessEnabled: Swift.Bool? = nil,
            maxSwap: Swift.Int? = nil,
            sharedMemorySize: Swift.Int? = nil,
            swappiness: Swift.Int? = nil,
            tmpfs: [BatchClientTypes.Tmpfs]? = nil
        )
        {
            self.devices = devices
            self.initProcessEnabled = initProcessEnabled
            self.maxSwap = maxSwap
            self.sharedMemorySize = sharedMemorySize
            self.swappiness = swappiness
            self.tmpfs = tmpfs
        }
    }

}

extension ListJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayJobId
        case filters
        case jobQueue
        case jobStatus
        case maxResults
        case multiNodeJobId
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arrayJobId = self.arrayJobId {
            try encodeContainer.encode(arrayJobId, forKey: .arrayJobId)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for keyvaluespair0 in filters {
                try filtersContainer.encode(keyvaluespair0)
            }
        }
        if let jobQueue = self.jobQueue {
            try encodeContainer.encode(jobQueue, forKey: .jobQueue)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let multiNodeJobId = self.multiNodeJobId {
            try encodeContainer.encode(multiNodeJobId, forKey: .multiNodeJobId)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/listjobs"
    }
}

/// Contains the parameters for ListJobs.
public struct ListJobsInput: Swift.Equatable {
    /// The job ID for an array job. Specifying an array job ID with this parameter lists all child jobs from within the specified array.
    public var arrayJobId: Swift.String?
    /// The filter to apply to the query. Only one filter can be used at a time. When the filter is used, jobStatus is ignored. The filter doesn't apply to child jobs in an array or multi-node parallel (MNP) jobs. The results are sorted by the createdAt field, with the most recent jobs being first. JOB_NAME The value of the filter is a case-insensitive match for the job name. If the value ends with an asterisk (*), the filter matches any job name that begins with the string before the '*'. This corresponds to the jobName value. For example, test1 matches both Test1 and test1, and test1* matches both test1 and Test10. When the JOB_NAME filter is used, the results are grouped by the job name and version. JOB_DEFINITION The value for the filter is the name or Amazon Resource Name (ARN) of the job definition. This corresponds to the jobDefinition value. The value is case sensitive. When the value for the filter is the job definition name, the results include all the jobs that used any revision of that job definition name. If the value ends with an asterisk (*), the filter matches any job definition name that begins with the string before the '*'. For example, jd1 matches only jd1, and jd1* matches both jd1 and jd1A. The version of the job definition that's used doesn't affect the sort order. When the JOB_DEFINITION filter is used and the ARN is used (which is in the form arn:${Partition}:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision}), the results include jobs that used the specified revision of the job definition. Asterisk (*) isn't supported when the ARN is used. BEFORE_CREATED_AT The value for the filter is the time that's before the job was created. This corresponds to the createdAt value. The value is a string representation of the number of milliseconds since 00:00:00 UTC (midnight) on January 1, 1970. AFTER_CREATED_AT The value for the filter is the time that's after the job was created. This corresponds to the createdAt value. The value is a string representation of the number of milliseconds since 00:00:00 UTC (midnight) on January 1, 1970.
    public var filters: [BatchClientTypes.KeyValuesPair]?
    /// The name or full Amazon Resource Name (ARN) of the job queue used to list jobs.
    public var jobQueue: Swift.String?
    /// The job status used to filter jobs in the specified queue. If the filters parameter is specified, the jobStatus parameter is ignored and jobs with any status are returned. If you don't specify a status, only RUNNING jobs are returned.
    public var jobStatus: BatchClientTypes.JobStatus?
    /// The maximum number of results returned by ListJobs in paginated output. When this parameter is used, ListJobs only returns maxResults results in a single page and a nextToken response element. The remaining results of the initial request can be seen by sending another ListJobs request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then ListJobs returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The job ID for a multi-node parallel job. Specifying a multi-node parallel job ID with this parameter lists all nodes that are associated with the specified job.
    public var multiNodeJobId: Swift.String?
    /// The nextToken value returned from a previous paginated ListJobs request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init (
        arrayJobId: Swift.String? = nil,
        filters: [BatchClientTypes.KeyValuesPair]? = nil,
        jobQueue: Swift.String? = nil,
        jobStatus: BatchClientTypes.JobStatus? = nil,
        maxResults: Swift.Int? = nil,
        multiNodeJobId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.arrayJobId = arrayJobId
        self.filters = filters
        self.jobQueue = jobQueue
        self.jobStatus = jobStatus
        self.maxResults = maxResults
        self.multiNodeJobId = multiNodeJobId
        self.nextToken = nextToken
    }
}

struct ListJobsInputBody: Swift.Equatable {
    let jobQueue: Swift.String?
    let arrayJobId: Swift.String?
    let multiNodeJobId: Swift.String?
    let jobStatus: BatchClientTypes.JobStatus?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let filters: [BatchClientTypes.KeyValuesPair]?
}

extension ListJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayJobId
        case filters
        case jobQueue
        case jobStatus
        case maxResults
        case multiNodeJobId
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueue)
        jobQueue = jobQueueDecoded
        let arrayJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arrayJobId)
        arrayJobId = arrayJobIdDecoded
        let multiNodeJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .multiNodeJobId)
        multiNodeJobId = multiNodeJobIdDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let filtersContainer = try containerValues.decodeIfPresent([BatchClientTypes.KeyValuesPair?].self, forKey: .filters)
        var filtersDecoded0:[BatchClientTypes.KeyValuesPair]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [BatchClientTypes.KeyValuesPair]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
    }
}

extension ListJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListJobsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobSummaryList = output.jobSummaryList
            self.nextToken = output.nextToken
        } else {
            self.jobSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListJobsOutputResponse: Swift.Equatable {
    /// A list of job summaries that match the request.
    /// This member is required.
    public var jobSummaryList: [BatchClientTypes.JobSummary]?
    /// The nextToken value to include in a future ListJobs request. When the results of a ListJobs request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init (
        jobSummaryList: [BatchClientTypes.JobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobSummaryList = jobSummaryList
        self.nextToken = nextToken
    }
}

struct ListJobsOutputResponseBody: Swift.Equatable {
    let jobSummaryList: [BatchClientTypes.JobSummary]?
    let nextToken: Swift.String?
}

extension ListJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobSummaryList
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobSummaryListContainer = try containerValues.decodeIfPresent([BatchClientTypes.JobSummary?].self, forKey: .jobSummaryList)
        var jobSummaryListDecoded0:[BatchClientTypes.JobSummary]? = nil
        if let jobSummaryListContainer = jobSummaryListContainer {
            jobSummaryListDecoded0 = [BatchClientTypes.JobSummary]()
            for structure0 in jobSummaryListContainer {
                if let structure0 = structure0 {
                    jobSummaryListDecoded0?.append(structure0)
                }
            }
        }
        jobSummaryList = jobSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSchedulingPoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListSchedulingPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/listschedulingpolicies"
    }
}

/// Contains the parameters for ListSchedulingPolicies.
public struct ListSchedulingPoliciesInput: Swift.Equatable {
    /// The maximum number of results that's returned by ListSchedulingPolicies in paginated output. When this parameter is used, ListSchedulingPolicies only returns maxResults results in a single page and a nextToken response element. You can see the remaining results of the initial request by sending another ListSchedulingPolicies request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, ListSchedulingPolicies returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value that's returned from a previous paginated ListSchedulingPolicies request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListSchedulingPoliciesInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListSchedulingPoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSchedulingPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSchedulingPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListSchedulingPoliciesOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSchedulingPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListSchedulingPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.schedulingPolicies = output.schedulingPolicies
        } else {
            self.nextToken = nil
            self.schedulingPolicies = nil
        }
    }
}

public struct ListSchedulingPoliciesOutputResponse: Swift.Equatable {
    /// The nextToken value to include in a future ListSchedulingPolicies request. When the results of a ListSchedulingPolicies request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// A list of scheduling policies that match the request.
    public var schedulingPolicies: [BatchClientTypes.SchedulingPolicyListingDetail]?

    public init (
        nextToken: Swift.String? = nil,
        schedulingPolicies: [BatchClientTypes.SchedulingPolicyListingDetail]? = nil
    )
    {
        self.nextToken = nextToken
        self.schedulingPolicies = schedulingPolicies
    }
}

struct ListSchedulingPoliciesOutputResponseBody: Swift.Equatable {
    let schedulingPolicies: [BatchClientTypes.SchedulingPolicyListingDetail]?
    let nextToken: Swift.String?
}

extension ListSchedulingPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case schedulingPolicies
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schedulingPoliciesContainer = try containerValues.decodeIfPresent([BatchClientTypes.SchedulingPolicyListingDetail?].self, forKey: .schedulingPolicies)
        var schedulingPoliciesDecoded0:[BatchClientTypes.SchedulingPolicyListingDetail]? = nil
        if let schedulingPoliciesContainer = schedulingPoliciesContainer {
            schedulingPoliciesDecoded0 = [BatchClientTypes.SchedulingPolicyListingDetail]()
            for structure0 in schedulingPoliciesContainer {
                if let structure0 = structure0 {
                    schedulingPoliciesDecoded0?.append(structure0)
                }
            }
        }
        schedulingPolicies = schedulingPoliciesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/v1/tags/\(resourceArn.urlPercentEncoding())"
    }
}

/// Contains the parameters for ListTagsForResource.
public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the resource that tags are listed for. Batch resources that support tags are compute environments, jobs, job definitions, job queues, and scheduling policies. ARNs for child jobs of array and multi-node parallel (MNP) jobs aren't supported.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The tags for the resource.
    public var tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension BatchClientTypes.LogConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logDriver
        case options
        case secretOptions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logDriver = self.logDriver {
            try encodeContainer.encode(logDriver.rawValue, forKey: .logDriver)
        }
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .options)
            for (dictKey0, logConfigurationOptionsMap0) in options {
                try optionsContainer.encode(logConfigurationOptionsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let secretOptions = secretOptions {
            var secretOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secretOptions)
            for secret0 in secretOptions {
                try secretOptionsContainer.encode(secret0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logDriverDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LogDriver.self, forKey: .logDriver)
        logDriver = logDriverDecoded
        let optionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .options)
        var optionsDecoded0: [Swift.String:Swift.String]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in optionsContainer {
                if let string0 = string0 {
                    optionsDecoded0?[key0] = string0
                }
            }
        }
        options = optionsDecoded0
        let secretOptionsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Secret?].self, forKey: .secretOptions)
        var secretOptionsDecoded0:[BatchClientTypes.Secret]? = nil
        if let secretOptionsContainer = secretOptionsContainer {
            secretOptionsDecoded0 = [BatchClientTypes.Secret]()
            for structure0 in secretOptionsContainer {
                if let structure0 = structure0 {
                    secretOptionsDecoded0?.append(structure0)
                }
            }
        }
        secretOptions = secretOptionsDecoded0
    }
}

extension BatchClientTypes {
    /// Log configuration options to send to a custom log driver for the container.
    public struct LogConfiguration: Swift.Equatable {
        /// The log driver to use for the container. The valid values that are listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default. The supported log drivers are awslogs, fluentd, gelf, json-file, journald, logentries, syslog, and splunk. Jobs that are running on Fargate resources are restricted to the awslogs and splunk log drivers. awslogs Specifies the Amazon CloudWatch Logs logging driver. For more information, see [Using the awslogs log driver](https://docs.aws.amazon.com/batch/latest/userguide/using_awslogs.html) in the Batch User Guide and [Amazon CloudWatch Logs logging driver](https://docs.docker.com/config/containers/logging/awslogs/) in the Docker documentation. fluentd Specifies the Fluentd logging driver. For more information including usage and options, see [Fluentd logging driver](https://docs.docker.com/config/containers/logging/fluentd/) in the Docker documentation. gelf Specifies the Graylog Extended Format (GELF) logging driver. For more information including usage and options, see [Graylog Extended Format logging driver](https://docs.docker.com/config/containers/logging/gelf/) in the Docker documentation. journald Specifies the journald logging driver. For more information including usage and options, see [Journald logging driver](https://docs.docker.com/config/containers/logging/journald/) in the Docker documentation. json-file Specifies the JSON file logging driver. For more information including usage and options, see [JSON File logging driver](https://docs.docker.com/config/containers/logging/json-file/) in the Docker documentation. splunk Specifies the Splunk logging driver. For more information including usage and options, see [Splunk logging driver](https://docs.docker.com/config/containers/logging/splunk/) in the Docker documentation. syslog Specifies the syslog logging driver. For more information including usage and options, see [Syslog logging driver](https://docs.docker.com/config/containers/logging/syslog/) in the Docker documentation. If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that's [available on GitHub](https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this software. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version"
        /// This member is required.
        public var logDriver: BatchClientTypes.LogDriver?
        /// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version"
        public var options: [Swift.String:Swift.String]?
        /// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
        public var secretOptions: [BatchClientTypes.Secret]?

        public init (
            logDriver: BatchClientTypes.LogDriver? = nil,
            options: [Swift.String:Swift.String]? = nil,
            secretOptions: [BatchClientTypes.Secret]? = nil
        )
        {
            self.logDriver = logDriver
            self.options = options
            self.secretOptions = secretOptions
        }
    }

}

extension BatchClientTypes {
    public enum LogDriver: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awslogs
        case fluentd
        case gelf
        case journald
        case jsonFile
        case splunk
        case syslog
        case sdkUnknown(Swift.String)

        public static var allCases: [LogDriver] {
            return [
                .awslogs,
                .fluentd,
                .gelf,
                .journald,
                .jsonFile,
                .splunk,
                .syslog,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awslogs: return "awslogs"
            case .fluentd: return "fluentd"
            case .gelf: return "gelf"
            case .journald: return "journald"
            case .jsonFile: return "json-file"
            case .splunk: return "splunk"
            case .syslog: return "syslog"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogDriver(rawValue: rawValue) ?? LogDriver.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.MountPoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerPath
        case readOnly
        case sourceVolume
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerPath = self.containerPath {
            try encodeContainer.encode(containerPath, forKey: .containerPath)
        }
        if let readOnly = self.readOnly {
            try encodeContainer.encode(readOnly, forKey: .readOnly)
        }
        if let sourceVolume = self.sourceVolume {
            try encodeContainer.encode(sourceVolume, forKey: .sourceVolume)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerPath)
        containerPath = containerPathDecoded
        let readOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readOnly)
        readOnly = readOnlyDecoded
        let sourceVolumeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceVolume)
        sourceVolume = sourceVolumeDecoded
    }
}

extension BatchClientTypes {
    /// Details for a Docker volume mount point that's used in a job's container properties. This parameter maps to Volumes in the [Create a container](https://docs.docker.com/engine/reference/api/docker_remote_api_v1.19/#create-a-container) section of the Docker Remote API and the --volume option to docker run.
    public struct MountPoint: Swift.Equatable {
        /// The path on the container where the host volume is mounted.
        public var containerPath: Swift.String?
        /// If this value is true, the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is false.
        public var readOnly: Swift.Bool?
        /// The name of the volume to mount.
        public var sourceVolume: Swift.String?

        public init (
            containerPath: Swift.String? = nil,
            readOnly: Swift.Bool? = nil,
            sourceVolume: Swift.String? = nil
        )
        {
            self.containerPath = containerPath
            self.readOnly = readOnly
            self.sourceVolume = sourceVolume
        }
    }

}

extension BatchClientTypes.NetworkConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignPublicIp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignPublicIp = self.assignPublicIp {
            try encodeContainer.encode(assignPublicIp.rawValue, forKey: .assignPublicIp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assignPublicIpDecoded = try containerValues.decodeIfPresent(BatchClientTypes.AssignPublicIp.self, forKey: .assignPublicIp)
        assignPublicIp = assignPublicIpDecoded
    }
}

extension BatchClientTypes {
    /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
    public struct NetworkConfiguration: Swift.Equatable {
        /// Indicates whether the job has a public IP address. For a job that's running on Fargate resources in a private subnet to send outbound traffic to the internet (for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet. For more information, see [Amazon ECS task networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the Amazon Elastic Container Service Developer Guide. The default value is "DISABLED".
        public var assignPublicIp: BatchClientTypes.AssignPublicIp?

        public init (
            assignPublicIp: BatchClientTypes.AssignPublicIp? = nil
        )
        {
            self.assignPublicIp = assignPublicIp
        }
    }

}

extension BatchClientTypes.NetworkInterface: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachmentId
        case ipv6Address
        case privateIpv4Address
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachmentId = self.attachmentId {
            try encodeContainer.encode(attachmentId, forKey: .attachmentId)
        }
        if let ipv6Address = self.ipv6Address {
            try encodeContainer.encode(ipv6Address, forKey: .ipv6Address)
        }
        if let privateIpv4Address = self.privateIpv4Address {
            try encodeContainer.encode(privateIpv4Address, forKey: .privateIpv4Address)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachmentId)
        attachmentId = attachmentIdDecoded
        let ipv6AddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipv6Address)
        ipv6Address = ipv6AddressDecoded
        let privateIpv4AddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIpv4Address)
        privateIpv4Address = privateIpv4AddressDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents the elastic network interface for a multi-node parallel job node.
    public struct NetworkInterface: Swift.Equatable {
        /// The attachment ID for the network interface.
        public var attachmentId: Swift.String?
        /// The private IPv6 address for the network interface.
        public var ipv6Address: Swift.String?
        /// The private IPv4 address for the network interface.
        public var privateIpv4Address: Swift.String?

        public init (
            attachmentId: Swift.String? = nil,
            ipv6Address: Swift.String? = nil,
            privateIpv4Address: Swift.String? = nil
        )
        {
            self.attachmentId = attachmentId
            self.ipv6Address = ipv6Address
            self.privateIpv4Address = privateIpv4Address
        }
    }

}

extension BatchClientTypes.NodeDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isMainNode
        case nodeIndex
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let isMainNode = self.isMainNode {
            try encodeContainer.encode(isMainNode, forKey: .isMainNode)
        }
        if let nodeIndex = self.nodeIndex {
            try encodeContainer.encode(nodeIndex, forKey: .nodeIndex)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nodeIndex)
        nodeIndex = nodeIndexDecoded
        let isMainNodeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isMainNode)
        isMainNode = isMainNodeDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents the details of a multi-node parallel job node.
    public struct NodeDetails: Swift.Equatable {
        /// Specifies whether the current node is the main node for a multi-node parallel job.
        public var isMainNode: Swift.Bool?
        /// The node index for the node. Node index numbering starts at zero. This index is also available on the node with the AWS_BATCH_JOB_NODE_INDEX environment variable.
        public var nodeIndex: Swift.Int?

        public init (
            isMainNode: Swift.Bool? = nil,
            nodeIndex: Swift.Int? = nil
        )
        {
            self.isMainNode = isMainNode
            self.nodeIndex = nodeIndex
        }
    }

}

extension BatchClientTypes.NodeOverrides: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodePropertyOverrides
        case numNodes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nodePropertyOverrides = nodePropertyOverrides {
            var nodePropertyOverridesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nodePropertyOverrides)
            for nodepropertyoverride0 in nodePropertyOverrides {
                try nodePropertyOverridesContainer.encode(nodepropertyoverride0)
            }
        }
        if let numNodes = self.numNodes {
            try encodeContainer.encode(numNodes, forKey: .numNodes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numNodes)
        numNodes = numNodesDecoded
        let nodePropertyOverridesContainer = try containerValues.decodeIfPresent([BatchClientTypes.NodePropertyOverride?].self, forKey: .nodePropertyOverrides)
        var nodePropertyOverridesDecoded0:[BatchClientTypes.NodePropertyOverride]? = nil
        if let nodePropertyOverridesContainer = nodePropertyOverridesContainer {
            nodePropertyOverridesDecoded0 = [BatchClientTypes.NodePropertyOverride]()
            for structure0 in nodePropertyOverridesContainer {
                if let structure0 = structure0 {
                    nodePropertyOverridesDecoded0?.append(structure0)
                }
            }
        }
        nodePropertyOverrides = nodePropertyOverridesDecoded0
    }
}

extension BatchClientTypes {
    /// An object that represents any node overrides to a job definition that's used in a [SubmitJob] API operation. This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs. Rather, use containerOverrides instead.
    public struct NodeOverrides: Swift.Equatable {
        /// The node property overrides for the job.
        public var nodePropertyOverrides: [BatchClientTypes.NodePropertyOverride]?
        /// The number of nodes to use with a multi-node parallel job. This value overrides the number of nodes that are specified in the job definition. To use this override, you must meet the following conditions:
        ///
        /// * There must be at least one node range in your job definition that has an open upper boundary, such as : or n:.
        ///
        /// * The lower boundary of the node range that's specified in the job definition must be fewer than the number of nodes specified in the override.
        ///
        /// * The main node index that's specified in the job definition must be fewer than the number of nodes specified in the override.
        public var numNodes: Swift.Int?

        public init (
            nodePropertyOverrides: [BatchClientTypes.NodePropertyOverride]? = nil,
            numNodes: Swift.Int? = nil
        )
        {
            self.nodePropertyOverrides = nodePropertyOverrides
            self.numNodes = numNodes
        }
    }

}

extension BatchClientTypes.NodeProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mainNode
        case nodeRangeProperties
        case numNodes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mainNode = self.mainNode {
            try encodeContainer.encode(mainNode, forKey: .mainNode)
        }
        if let nodeRangeProperties = nodeRangeProperties {
            var nodeRangePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nodeRangeProperties)
            for noderangeproperty0 in nodeRangeProperties {
                try nodeRangePropertiesContainer.encode(noderangeproperty0)
            }
        }
        if let numNodes = self.numNodes {
            try encodeContainer.encode(numNodes, forKey: .numNodes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numNodes)
        numNodes = numNodesDecoded
        let mainNodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mainNode)
        mainNode = mainNodeDecoded
        let nodeRangePropertiesContainer = try containerValues.decodeIfPresent([BatchClientTypes.NodeRangeProperty?].self, forKey: .nodeRangeProperties)
        var nodeRangePropertiesDecoded0:[BatchClientTypes.NodeRangeProperty]? = nil
        if let nodeRangePropertiesContainer = nodeRangePropertiesContainer {
            nodeRangePropertiesDecoded0 = [BatchClientTypes.NodeRangeProperty]()
            for structure0 in nodeRangePropertiesContainer {
                if let structure0 = structure0 {
                    nodeRangePropertiesDecoded0?.append(structure0)
                }
            }
        }
        nodeRangeProperties = nodeRangePropertiesDecoded0
    }
}

extension BatchClientTypes {
    /// An object that represents the node properties of a multi-node parallel job. Node properties can't be specified for Amazon EKS based job definitions.
    public struct NodeProperties: Swift.Equatable {
        /// Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.
        /// This member is required.
        public var mainNode: Swift.Int?
        /// A list of node ranges and their properties that are associated with a multi-node parallel job.
        /// This member is required.
        public var nodeRangeProperties: [BatchClientTypes.NodeRangeProperty]?
        /// The number of nodes that are associated with a multi-node parallel job.
        /// This member is required.
        public var numNodes: Swift.Int?

        public init (
            mainNode: Swift.Int? = nil,
            nodeRangeProperties: [BatchClientTypes.NodeRangeProperty]? = nil,
            numNodes: Swift.Int? = nil
        )
        {
            self.mainNode = mainNode
            self.nodeRangeProperties = nodeRangeProperties
            self.numNodes = numNodes
        }
    }

}

extension BatchClientTypes.NodePropertiesSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isMainNode
        case nodeIndex
        case numNodes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let isMainNode = self.isMainNode {
            try encodeContainer.encode(isMainNode, forKey: .isMainNode)
        }
        if let nodeIndex = self.nodeIndex {
            try encodeContainer.encode(nodeIndex, forKey: .nodeIndex)
        }
        if let numNodes = self.numNodes {
            try encodeContainer.encode(numNodes, forKey: .numNodes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isMainNodeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isMainNode)
        isMainNode = isMainNodeDecoded
        let numNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numNodes)
        numNodes = numNodesDecoded
        let nodeIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nodeIndex)
        nodeIndex = nodeIndexDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents the properties of a node that's associated with a multi-node parallel job.
    public struct NodePropertiesSummary: Swift.Equatable {
        /// Specifies whether the current node is the main node for a multi-node parallel job.
        public var isMainNode: Swift.Bool?
        /// The node index for the node. Node index numbering begins at zero. This index is also available on the node with the AWS_BATCH_JOB_NODE_INDEX environment variable.
        public var nodeIndex: Swift.Int?
        /// The number of nodes that are associated with a multi-node parallel job.
        public var numNodes: Swift.Int?

        public init (
            isMainNode: Swift.Bool? = nil,
            nodeIndex: Swift.Int? = nil,
            numNodes: Swift.Int? = nil
        )
        {
            self.isMainNode = isMainNode
            self.nodeIndex = nodeIndex
            self.numNodes = numNodes
        }
    }

}

extension BatchClientTypes.NodePropertyOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerOverrides
        case targetNodes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerOverrides = self.containerOverrides {
            try encodeContainer.encode(containerOverrides, forKey: .containerOverrides)
        }
        if let targetNodes = self.targetNodes {
            try encodeContainer.encode(targetNodes, forKey: .targetNodes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetNodesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetNodes)
        targetNodes = targetNodesDecoded
        let containerOverridesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerOverrides.self, forKey: .containerOverrides)
        containerOverrides = containerOverridesDecoded
    }
}

extension BatchClientTypes {
    /// The object that represents any node overrides to a job definition that's used in a [SubmitJob] API operation.
    public struct NodePropertyOverride: Swift.Equatable {
        /// The overrides that are sent to a node range.
        public var containerOverrides: BatchClientTypes.ContainerOverrides?
        /// The range of nodes, using node index values, that's used to override. A range of 0:3 indicates nodes with index values of 0 through 3. If the starting range value is omitted (:n), then 0 is used to start the range. If the ending range value is omitted (n:), then the highest possible node index is used to end the range.
        /// This member is required.
        public var targetNodes: Swift.String?

        public init (
            containerOverrides: BatchClientTypes.ContainerOverrides? = nil,
            targetNodes: Swift.String? = nil
        )
        {
            self.containerOverrides = containerOverrides
            self.targetNodes = targetNodes
        }
    }

}

extension BatchClientTypes.NodeRangeProperty: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case container
        case targetNodes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let container = self.container {
            try encodeContainer.encode(container, forKey: .container)
        }
        if let targetNodes = self.targetNodes {
            try encodeContainer.encode(targetNodes, forKey: .targetNodes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetNodesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetNodes)
        targetNodes = targetNodesDecoded
        let containerDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerProperties.self, forKey: .container)
        container = containerDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents the properties of the node range for a multi-node parallel job.
    public struct NodeRangeProperty: Swift.Equatable {
        /// The container details for the node range.
        public var container: BatchClientTypes.ContainerProperties?
        /// The range of nodes, using node index values. A range of 0:3 indicates nodes with index values of 0 through 3. If the starting range value is omitted (:n), then 0 is used to start the range. If the ending range value is omitted (n:), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (0:n). You can nest node ranges (for example, 0:10 and 4:5). In this case, the 4:5 range properties override the 0:10 properties.
        /// This member is required.
        public var targetNodes: Swift.String?

        public init (
            container: BatchClientTypes.ContainerProperties? = nil,
            targetNodes: Swift.String? = nil
        )
        {
            self.container = container
            self.targetNodes = targetNodes
        }
    }

}

extension BatchClientTypes {
    public enum OrchestrationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ecs
        case eks
        case sdkUnknown(Swift.String)

        public static var allCases: [OrchestrationType] {
            return [
                .ecs,
                .eks,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ecs: return "ECS"
            case .eks: return "EKS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OrchestrationType(rawValue: rawValue) ?? OrchestrationType.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum PlatformCapability: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ec2
        case fargate
        case sdkUnknown(Swift.String)

        public static var allCases: [PlatformCapability] {
            return [
                .ec2,
                .fargate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .fargate: return "FARGATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PlatformCapability(rawValue: rawValue) ?? PlatformCapability.sdkUnknown(rawValue)
        }
    }
}

extension RegisterJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerProperties
        case eksProperties
        case jobDefinitionName
        case nodeProperties
        case parameters
        case platformCapabilities
        case propagateTags
        case retryStrategy
        case schedulingPriority
        case tags
        case timeout
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerProperties = self.containerProperties {
            try encodeContainer.encode(containerProperties, forKey: .containerProperties)
        }
        if let eksProperties = self.eksProperties {
            try encodeContainer.encode(eksProperties, forKey: .eksProperties)
        }
        if let jobDefinitionName = self.jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let nodeProperties = self.nodeProperties {
            try encodeContainer.encode(nodeProperties, forKey: .nodeProperties)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersMap0) in parameters {
                try parametersContainer.encode(parametersMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let platformCapabilities = platformCapabilities {
            var platformCapabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformCapabilities)
            for platformcapability0 in platformCapabilities {
                try platformCapabilitiesContainer.encode(platformcapability0.rawValue)
            }
        }
        if let propagateTags = self.propagateTags {
            try encodeContainer.encode(propagateTags, forKey: .propagateTags)
        }
        if let retryStrategy = self.retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let schedulingPriority = self.schedulingPriority {
            try encodeContainer.encode(schedulingPriority, forKey: .schedulingPriority)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagrisTagsMap0) in tags {
                try tagsContainer.encode(tagrisTagsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeout = self.timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

extension RegisterJobDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/registerjobdefinition"
    }
}

/// Contains the parameters for RegisterJobDefinition.
public struct RegisterJobDefinitionInput: Swift.Equatable {
    /// An object with various properties specific to Amazon ECS based single-node container-based jobs. If the job definition's type parameter is container, then you must specify either containerProperties or nodeProperties. This must not be specified for Amazon EKS based job definitions. If the job runs on Fargate resources, then you must not specify nodeProperties; use only containerProperties.
    public var containerProperties: BatchClientTypes.ContainerProperties?
    /// An object with various properties that are specific to Amazon EKS based jobs. This must not be specified for Amazon ECS based job definitions.
    public var eksProperties: BatchClientTypes.EksProperties?
    /// The name of the job definition to register. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// An object with various properties specific to multi-node parallel jobs. If you specify node properties for a job, it becomes a multi-node parallel job. For more information, see [Multi-node Parallel Jobs](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-parallel-jobs.html) in the Batch User Guide. If the job definition's type parameter is container, then you must specify either containerProperties or nodeProperties. If the job runs on Fargate resources, then you must not specify nodeProperties; use containerProperties instead. If the job runs on Amazon EKS resources, then you must not specify nodeProperties.
    public var nodeProperties: BatchClientTypes.NodeProperties?
    /// Default parameter substitution placeholders to set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition.
    public var parameters: [Swift.String:Swift.String]?
    /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. To run the job on Fargate resources, specify FARGATE. If the job runs on Amazon EKS resources, then you must not specify platformCapabilities.
    public var platformCapabilities: [BatchClientTypes.PlatformCapability]?
    /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags are not propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state. If the job runs on Amazon EKS resources, then you must not specify propagateTags.
    public var propagateTags: Swift.Bool?
    /// The retry strategy to use for failed jobs that are submitted with this job definition. Any retry strategy that's specified during a [SubmitJob] operation overrides the retry strategy defined here. If a job is terminated due to a timeout, it isn't retried.
    public var retryStrategy: BatchClientTypes.RetryStrategy?
    /// The scheduling priority for jobs that are submitted with this job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority. The minimum supported value is 0 and the maximum supported value is 9999.
    public var schedulingPriority: Swift.Int?
    /// The tags that you apply to the job definition to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html) in Batch User Guide.
    public var tags: [Swift.String:Swift.String]?
    /// The timeout configuration for jobs that are submitted with this job definition, after which Batch terminates your jobs if they have not finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds. Any timeout configuration that's specified during a [SubmitJob] operation overrides the timeout configuration defined here. For more information, see [Job Timeouts](https://docs.aws.amazon.com/batch/latest/userguide/job_timeouts.html) in the Batch User Guide.
    public var timeout: BatchClientTypes.JobTimeout?
    /// The type of job definition. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the Batch User Guide. If the job is run on Fargate resources, then multinode isn't supported.
    /// This member is required.
    public var type: BatchClientTypes.JobDefinitionType?

    public init (
        containerProperties: BatchClientTypes.ContainerProperties? = nil,
        eksProperties: BatchClientTypes.EksProperties? = nil,
        jobDefinitionName: Swift.String? = nil,
        nodeProperties: BatchClientTypes.NodeProperties? = nil,
        parameters: [Swift.String:Swift.String]? = nil,
        platformCapabilities: [BatchClientTypes.PlatformCapability]? = nil,
        propagateTags: Swift.Bool? = nil,
        retryStrategy: BatchClientTypes.RetryStrategy? = nil,
        schedulingPriority: Swift.Int? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        timeout: BatchClientTypes.JobTimeout? = nil,
        type: BatchClientTypes.JobDefinitionType? = nil
    )
    {
        self.containerProperties = containerProperties
        self.eksProperties = eksProperties
        self.jobDefinitionName = jobDefinitionName
        self.nodeProperties = nodeProperties
        self.parameters = parameters
        self.platformCapabilities = platformCapabilities
        self.propagateTags = propagateTags
        self.retryStrategy = retryStrategy
        self.schedulingPriority = schedulingPriority
        self.tags = tags
        self.timeout = timeout
        self.type = type
    }
}

struct RegisterJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
    let type: BatchClientTypes.JobDefinitionType?
    let parameters: [Swift.String:Swift.String]?
    let schedulingPriority: Swift.Int?
    let containerProperties: BatchClientTypes.ContainerProperties?
    let nodeProperties: BatchClientTypes.NodeProperties?
    let retryStrategy: BatchClientTypes.RetryStrategy?
    let propagateTags: Swift.Bool?
    let timeout: BatchClientTypes.JobTimeout?
    let tags: [Swift.String:Swift.String]?
    let platformCapabilities: [BatchClientTypes.PlatformCapability]?
    let eksProperties: BatchClientTypes.EksProperties?
}

extension RegisterJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerProperties
        case eksProperties
        case jobDefinitionName
        case nodeProperties
        case parameters
        case platformCapabilities
        case propagateTags
        case retryStrategy
        case schedulingPriority
        case tags
        case timeout
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobDefinitionType.self, forKey: .type)
        type = typeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in parametersContainer {
                if let string0 = string0 {
                    parametersDecoded0?[key0] = string0
                }
            }
        }
        parameters = parametersDecoded0
        let schedulingPriorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .schedulingPriority)
        schedulingPriority = schedulingPriorityDecoded
        let containerPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerProperties.self, forKey: .containerProperties)
        containerProperties = containerPropertiesDecoded
        let nodePropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodeProperties.self, forKey: .nodeProperties)
        nodeProperties = nodePropertiesDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let propagateTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let platformCapabilitiesContainer = try containerValues.decodeIfPresent([BatchClientTypes.PlatformCapability?].self, forKey: .platformCapabilities)
        var platformCapabilitiesDecoded0:[BatchClientTypes.PlatformCapability]? = nil
        if let platformCapabilitiesContainer = platformCapabilitiesContainer {
            platformCapabilitiesDecoded0 = [BatchClientTypes.PlatformCapability]()
            for enum0 in platformCapabilitiesContainer {
                if let enum0 = enum0 {
                    platformCapabilitiesDecoded0?.append(enum0)
                }
            }
        }
        platformCapabilities = platformCapabilitiesDecoded0
        let eksPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksProperties.self, forKey: .eksProperties)
        eksProperties = eksPropertiesDecoded
    }
}

extension RegisterJobDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterJobDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterJobDefinitionOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterJobDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RegisterJobDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDefinitionArn = output.jobDefinitionArn
            self.jobDefinitionName = output.jobDefinitionName
            self.revision = output.revision
        } else {
            self.jobDefinitionArn = nil
            self.jobDefinitionName = nil
            self.revision = nil
        }
    }
}

public struct RegisterJobDefinitionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the job definition.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?
    /// The name of the job definition.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// The revision of the job definition.
    /// This member is required.
    public var revision: Swift.Int?

    public init (
        jobDefinitionArn: Swift.String? = nil,
        jobDefinitionName: Swift.String? = nil,
        revision: Swift.Int? = nil
    )
    {
        self.jobDefinitionArn = jobDefinitionArn
        self.jobDefinitionName = jobDefinitionName
        self.revision = revision
    }
}

struct RegisterJobDefinitionOutputResponseBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
    let jobDefinitionArn: Swift.String?
    let revision: Swift.Int?
}

extension RegisterJobDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionArn
        case jobDefinitionName
        case revision
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .revision)
        revision = revisionDecoded
    }
}

extension BatchClientTypes.ResourceRequirement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ResourceType.self, forKey: .type)
        type = typeDecoded
    }
}

extension BatchClientTypes {
    /// The type and amount of a resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
    public struct ResourceRequirement: Swift.Equatable {
        /// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
        /// This member is required.
        public var type: BatchClientTypes.ResourceType?
        /// The quantity of the specified resource to reserve for the container. The values vary based on the type specified. type="GPU" The number of physical GPUs to reserve for the container. Make sure that the number of GPUs reserved for all containers in a job doesn't exceed the number of available GPUs on the compute resource that the job is launched on. GPUs aren't available for jobs that are running on Fargate resources. type="MEMORY" The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to Memory in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --memory option to [docker run](https://docs.docker.com/engine/reference/run/). You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to Memory in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --memory option to [docker run](https://docs.docker.com/engine/reference/run/). If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the Batch User Guide. For jobs that are running on Fargate resources, then value is the hard limit (in MiB), and must match one of the supported values and the VCPU values must be one of the values supported for that memory value. value = 512 VCPU = 0.25 value = 1024 VCPU = 0.25 or 0.5 value = 2048 VCPU = 0.25, 0.5, or 1 value = 3072 VCPU = 0.5, or 1 value = 4096 VCPU = 0.5, 1, or 2 value = 5120, 6144, or 7168 VCPU = 1 or 2 value = 8192 VCPU = 1, 2, 4, or 8 value = 9216, 10240, 11264, 12288, 13312, 14336, or 15360 VCPU = 2 or 4 value = 16384 VCPU = 2, 4, or 8 value = 17408, 18432, 19456, 21504, 22528, 23552, 25600, 26624, 27648, 29696, or 30720 VCPU = 4 value = 20480, 24576, or 28672 VCPU = 4 or 8 value = 36864, 45056, 53248, or 61440 VCPU = 8 value = 32768, 40960, 49152, or 57344 VCPU = 8 or 16 value = 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880 VCPU = 16 type="VCPU" The number of vCPUs reserved for the container. This parameter maps to CpuShares in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/) and the --cpu-shares option to [docker run](https://docs.docker.com/engine/reference/run/). Each vCPU is equivalent to 1,024 CPU shares. For EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once. The default for the Fargate On-Demand vCPU resource count quota is 6 vCPUs. For more information about Fargate quotas, see [Fargate quotas](https://docs.aws.amazon.com/general/latest/gr/ecs-service.html#service-quotas-fargate) in the Amazon Web Services General Reference. For jobs that are running on Fargate resources, then value must match one of the supported values and the MEMORY values must be one of the values supported for that VCPU value. The supported values are 0.25, 0.5, 1, 2, 4, 8, and 16 value = 0.25 MEMORY = 512, 1024, or 2048 value = 0.5 MEMORY = 1024, 2048, 3072, or 4096 value = 1 MEMORY = 2048, 3072, 4096, 5120, 6144, 7168, or 8192 value = 2 MEMORY = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384 value = 4 MEMORY = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720 value = 8 MEMORY = 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, or 61440 value = 16 MEMORY = 32768, 40960, 49152, 57344, 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880
        /// This member is required.
        public var value: Swift.String?

        public init (
            type: BatchClientTypes.ResourceType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension BatchClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gpu
        case memory
        case vcpu
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .gpu,
                .memory,
                .vcpu,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gpu: return "GPU"
            case .memory: return "MEMORY"
            case .vcpu: return "VCPU"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes {
    public enum RetryAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exit
        case retry
        case sdkUnknown(Swift.String)

        public static var allCases: [RetryAction] {
            return [
                .exit,
                .retry,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exit: return "EXIT"
            case .retry: return "RETRY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RetryAction(rawValue: rawValue) ?? RetryAction.sdkUnknown(rawValue)
        }
    }
}

extension BatchClientTypes.RetryStrategy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attempts
        case evaluateOnExit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attempts = self.attempts {
            try encodeContainer.encode(attempts, forKey: .attempts)
        }
        if let evaluateOnExit = evaluateOnExit {
            var evaluateOnExitContainer = encodeContainer.nestedUnkeyedContainer(forKey: .evaluateOnExit)
            for evaluateonexit0 in evaluateOnExit {
                try evaluateOnExitContainer.encode(evaluateonexit0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attemptsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .attempts)
        attempts = attemptsDecoded
        let evaluateOnExitContainer = try containerValues.decodeIfPresent([BatchClientTypes.EvaluateOnExit?].self, forKey: .evaluateOnExit)
        var evaluateOnExitDecoded0:[BatchClientTypes.EvaluateOnExit]? = nil
        if let evaluateOnExitContainer = evaluateOnExitContainer {
            evaluateOnExitDecoded0 = [BatchClientTypes.EvaluateOnExit]()
            for structure0 in evaluateOnExitContainer {
                if let structure0 = structure0 {
                    evaluateOnExitDecoded0?.append(structure0)
                }
            }
        }
        evaluateOnExit = evaluateOnExitDecoded0
    }
}

extension BatchClientTypes {
    /// The retry strategy that's associated with a job. For more information, see [Automated job retries](https://docs.aws.amazon.com/batch/latest/userguide/job_retries.html) in the Batch User Guide.
    public struct RetryStrategy: Swift.Equatable {
        /// The number of times to move a job to the RUNNABLE status. You can specify between 1 and 10 attempts. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value.
        public var attempts: Swift.Int?
        /// Array of up to 5 objects that specify the conditions where jobs are retried or failed. If this parameter is specified, then the attempts parameter must also be specified. If none of the listed conditions match, then the job is retried.
        public var evaluateOnExit: [BatchClientTypes.EvaluateOnExit]?

        public init (
            attempts: Swift.Int? = nil,
            evaluateOnExit: [BatchClientTypes.EvaluateOnExit]? = nil
        )
        {
            self.attempts = attempts
            self.evaluateOnExit = evaluateOnExit
        }
    }

}

extension BatchClientTypes.SchedulingPolicyDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case fairsharePolicy
        case name
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let fairsharePolicy = self.fairsharePolicy {
            try encodeContainer.encode(fairsharePolicy, forKey: .fairsharePolicy)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagrisTagsMap0) in tags {
                try tagsContainer.encode(tagrisTagsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let fairsharePolicyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.FairsharePolicy.self, forKey: .fairsharePolicy)
        fairsharePolicy = fairsharePolicyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension BatchClientTypes {
    /// An object that represents a scheduling policy.
    public struct SchedulingPolicyDetail: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the scheduling policy. An example is arn:aws:batch:us-east-1:123456789012:scheduling-policy/HighPriority .
        /// This member is required.
        public var arn: Swift.String?
        /// The fair share policy for the scheduling policy.
        public var fairsharePolicy: BatchClientTypes.FairsharePolicy?
        /// The name of the scheduling policy.
        /// This member is required.
        public var name: Swift.String?
        /// The tags that you apply to the scheduling policy to categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in Amazon Web Services General Reference.
        public var tags: [Swift.String:Swift.String]?

        public init (
            arn: Swift.String? = nil,
            fairsharePolicy: BatchClientTypes.FairsharePolicy? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.arn = arn
            self.fairsharePolicy = fairsharePolicy
            self.name = name
            self.tags = tags
        }
    }

}

extension BatchClientTypes.SchedulingPolicyListingDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension BatchClientTypes {
    /// An object that contains the details of a scheduling policy that's returned in a ListSchedulingPolicy action.
    public struct SchedulingPolicyListingDetail: Swift.Equatable {
        /// Amazon Resource Name (ARN) of the scheduling policy.
        /// This member is required.
        public var arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension BatchClientTypes.Secret: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case valueFrom
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let valueFrom = self.valueFrom {
            try encodeContainer.encode(valueFrom, forKey: .valueFrom)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueFromDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .valueFrom)
        valueFrom = valueFromDecoded
    }
}

extension BatchClientTypes {
    /// An object that represents the secret to expose to your container. Secrets can be exposed to a container in the following ways:
    ///
    /// * To inject sensitive data into your containers as environment variables, use the secrets container definition parameter.
    ///
    /// * To reference sensitive information in the log configuration of a container, use the secretOptions container definition parameter.
    ///
    ///
    /// For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
    public struct Secret: Swift.Equatable {
        /// The name of the secret.
        /// This member is required.
        public var name: Swift.String?
        /// The secret to expose to the container. The supported values are either the full Amazon Resource Name (ARN) of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store. If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Region as the job you're launching, then you can use either the full Amazon Resource Name (ARN) or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
        /// This member is required.
        public var valueFrom: Swift.String?

        public init (
            name: Swift.String? = nil,
            valueFrom: Swift.String? = nil
        )
        {
            self.name = name
            self.valueFrom = valueFrom
        }
    }

}

extension ServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// These errors are usually caused by a server issue.
public struct ServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BatchClientTypes.ShareAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shareIdentifier
        case weightFactor
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let shareIdentifier = self.shareIdentifier {
            try encodeContainer.encode(shareIdentifier, forKey: .shareIdentifier)
        }
        if let weightFactor = self.weightFactor {
            try encodeContainer.encode(weightFactor, forKey: .weightFactor)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shareIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shareIdentifier)
        shareIdentifier = shareIdentifierDecoded
        let weightFactorDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .weightFactor)
        weightFactor = weightFactorDecoded
    }
}

extension BatchClientTypes {
    /// Specifies the weights for the fair share identifiers for the fair share policy. Fair share identifiers that aren't included have a default weight of 1.0.
    public struct ShareAttributes: Swift.Equatable {
        /// A fair share identifier or fair share identifier prefix. If the string ends with an asterisk (*), this entry specifies the weight factor to use for fair share identifiers that start with that prefix. The list of fair share identifiers in a fair share policy can't overlap. For example, you can't have one that specifies a shareIdentifier of UserA* and another that specifies a shareIdentifier of UserA-1. There can be no more than 500 fair share identifiers active in a job queue. The string is limited to 255 alphanumeric characters, and can be followed by an asterisk (*).
        /// This member is required.
        public var shareIdentifier: Swift.String?
        /// The weight factor for the fair share identifier. The default value is 1.0. A lower value has a higher priority for compute resources. For example, jobs that use a share identifier with a weight factor of 0.125 (1/8) get 8 times the compute resources of jobs that use a share identifier with a weight factor of 1. The smallest supported value is 0.0001, and the largest supported value is 999.9999.
        public var weightFactor: Swift.Float?

        public init (
            shareIdentifier: Swift.String? = nil,
            weightFactor: Swift.Float? = nil
        )
        {
            self.shareIdentifier = shareIdentifier
            self.weightFactor = weightFactor
        }
    }

}

extension SubmitJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayProperties
        case containerOverrides
        case dependsOn
        case eksPropertiesOverride
        case jobDefinition
        case jobName
        case jobQueue
        case nodeOverrides
        case parameters
        case propagateTags
        case retryStrategy
        case schedulingPriorityOverride
        case shareIdentifier
        case tags
        case timeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arrayProperties = self.arrayProperties {
            try encodeContainer.encode(arrayProperties, forKey: .arrayProperties)
        }
        if let containerOverrides = self.containerOverrides {
            try encodeContainer.encode(containerOverrides, forKey: .containerOverrides)
        }
        if let dependsOn = dependsOn {
            var dependsOnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dependsOn)
            for jobdependency0 in dependsOn {
                try dependsOnContainer.encode(jobdependency0)
            }
        }
        if let eksPropertiesOverride = self.eksPropertiesOverride {
            try encodeContainer.encode(eksPropertiesOverride, forKey: .eksPropertiesOverride)
        }
        if let jobDefinition = self.jobDefinition {
            try encodeContainer.encode(jobDefinition, forKey: .jobDefinition)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobQueue = self.jobQueue {
            try encodeContainer.encode(jobQueue, forKey: .jobQueue)
        }
        if let nodeOverrides = self.nodeOverrides {
            try encodeContainer.encode(nodeOverrides, forKey: .nodeOverrides)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersMap0) in parameters {
                try parametersContainer.encode(parametersMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let propagateTags = self.propagateTags {
            try encodeContainer.encode(propagateTags, forKey: .propagateTags)
        }
        if let retryStrategy = self.retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let schedulingPriorityOverride = self.schedulingPriorityOverride {
            try encodeContainer.encode(schedulingPriorityOverride, forKey: .schedulingPriorityOverride)
        }
        if let shareIdentifier = self.shareIdentifier {
            try encodeContainer.encode(shareIdentifier, forKey: .shareIdentifier)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagrisTagsMap0) in tags {
                try tagsContainer.encode(tagrisTagsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeout = self.timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }
}

extension SubmitJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/submitjob"
    }
}

/// Contains the parameters for SubmitJob.
public struct SubmitJobInput: Swift.Equatable {
    /// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. For more information, see [Array Jobs](https://docs.aws.amazon.com/batch/latest/userguide/array_jobs.html) in the Batch User Guide.
    public var arrayProperties: BatchClientTypes.ArrayProperties?
    /// An object with various properties that override the defaults for the job definition that specify the name of a container in the specified job definition and the overrides it should receive. You can override the default command for a container, which is specified in the job definition or the Docker image, with a command override. You can also override existing environment variables on a container or add new environment variables to it with an environment override.
    public var containerOverrides: BatchClientTypes.ContainerOverrides?
    /// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.
    public var dependsOn: [BatchClientTypes.JobDependency]?
    /// An object that can only be specified for jobs that are run on Amazon EKS resources with various properties that override defaults for the job definition.
    public var eksPropertiesOverride: BatchClientTypes.EksPropertiesOverride?
    /// The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
    /// This member is required.
    public var jobDefinition: Swift.String?
    /// The name of the job. It can be up to 128 letters long. The first character must be alphanumeric, can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    /// This member is required.
    public var jobName: Swift.String?
    /// The job queue where the job is submitted. You can specify either the name or the Amazon Resource Name (ARN) of the queue.
    /// This member is required.
    public var jobQueue: Swift.String?
    /// A list of node overrides in JSON format that specify the node range to target and the container overrides for that node range. This parameter isn't applicable to jobs that are running on Fargate resources; use containerOverrides instead.
    public var nodeOverrides: BatchClientTypes.NodeOverrides?
    /// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition.
    public var parameters: [Swift.String:Swift.String]?
    /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state. When specified, this overrides the tag propagation setting in the job definition.
    public var propagateTags: Swift.Bool?
    /// The retry strategy to use for failed jobs from this [SubmitJob] operation. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.
    public var retryStrategy: BatchClientTypes.RetryStrategy?
    /// The scheduling priority for the job. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority. This overrides any scheduling priority in the job definition. The minimum supported value is 0 and the maximum supported value is 9999.
    public var schedulingPriorityOverride: Swift.Int?
    /// The share identifier for the job. If the job queue doesn't have a scheduling policy, then this parameter must not be specified. If the job queue has a scheduling policy, then this parameter must be specified.
    public var shareIdentifier: Swift.String?
    /// The tags that you apply to the job request to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in Amazon Web Services General Reference.
    public var tags: [Swift.String:Swift.String]?
    /// The timeout configuration for this [SubmitJob] operation. You can specify a timeout duration after which Batch terminates your jobs if they haven't finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds. This configuration overrides any timeout configuration specified in the job definition. For array jobs, child jobs have the same timeout configuration as the parent job. For more information, see [Job Timeouts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/job_timeouts.html) in the Amazon Elastic Container Service Developer Guide.
    public var timeout: BatchClientTypes.JobTimeout?

    public init (
        arrayProperties: BatchClientTypes.ArrayProperties? = nil,
        containerOverrides: BatchClientTypes.ContainerOverrides? = nil,
        dependsOn: [BatchClientTypes.JobDependency]? = nil,
        eksPropertiesOverride: BatchClientTypes.EksPropertiesOverride? = nil,
        jobDefinition: Swift.String? = nil,
        jobName: Swift.String? = nil,
        jobQueue: Swift.String? = nil,
        nodeOverrides: BatchClientTypes.NodeOverrides? = nil,
        parameters: [Swift.String:Swift.String]? = nil,
        propagateTags: Swift.Bool? = nil,
        retryStrategy: BatchClientTypes.RetryStrategy? = nil,
        schedulingPriorityOverride: Swift.Int? = nil,
        shareIdentifier: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        timeout: BatchClientTypes.JobTimeout? = nil
    )
    {
        self.arrayProperties = arrayProperties
        self.containerOverrides = containerOverrides
        self.dependsOn = dependsOn
        self.eksPropertiesOverride = eksPropertiesOverride
        self.jobDefinition = jobDefinition
        self.jobName = jobName
        self.jobQueue = jobQueue
        self.nodeOverrides = nodeOverrides
        self.parameters = parameters
        self.propagateTags = propagateTags
        self.retryStrategy = retryStrategy
        self.schedulingPriorityOverride = schedulingPriorityOverride
        self.shareIdentifier = shareIdentifier
        self.tags = tags
        self.timeout = timeout
    }
}

struct SubmitJobInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let jobQueue: Swift.String?
    let shareIdentifier: Swift.String?
    let schedulingPriorityOverride: Swift.Int?
    let arrayProperties: BatchClientTypes.ArrayProperties?
    let dependsOn: [BatchClientTypes.JobDependency]?
    let jobDefinition: Swift.String?
    let parameters: [Swift.String:Swift.String]?
    let containerOverrides: BatchClientTypes.ContainerOverrides?
    let nodeOverrides: BatchClientTypes.NodeOverrides?
    let retryStrategy: BatchClientTypes.RetryStrategy?
    let propagateTags: Swift.Bool?
    let timeout: BatchClientTypes.JobTimeout?
    let tags: [Swift.String:Swift.String]?
    let eksPropertiesOverride: BatchClientTypes.EksPropertiesOverride?
}

extension SubmitJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayProperties
        case containerOverrides
        case dependsOn
        case eksPropertiesOverride
        case jobDefinition
        case jobName
        case jobQueue
        case nodeOverrides
        case parameters
        case propagateTags
        case retryStrategy
        case schedulingPriorityOverride
        case shareIdentifier
        case tags
        case timeout
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobQueueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueue)
        jobQueue = jobQueueDecoded
        let shareIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shareIdentifier)
        shareIdentifier = shareIdentifierDecoded
        let schedulingPriorityOverrideDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .schedulingPriorityOverride)
        schedulingPriorityOverride = schedulingPriorityOverrideDecoded
        let arrayPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ArrayProperties.self, forKey: .arrayProperties)
        arrayProperties = arrayPropertiesDecoded
        let dependsOnContainer = try containerValues.decodeIfPresent([BatchClientTypes.JobDependency?].self, forKey: .dependsOn)
        var dependsOnDecoded0:[BatchClientTypes.JobDependency]? = nil
        if let dependsOnContainer = dependsOnContainer {
            dependsOnDecoded0 = [BatchClientTypes.JobDependency]()
            for structure0 in dependsOnContainer {
                if let structure0 = structure0 {
                    dependsOnDecoded0?.append(structure0)
                }
            }
        }
        dependsOn = dependsOnDecoded0
        let jobDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinition)
        jobDefinition = jobDefinitionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in parametersContainer {
                if let string0 = string0 {
                    parametersDecoded0?[key0] = string0
                }
            }
        }
        parameters = parametersDecoded0
        let containerOverridesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerOverrides.self, forKey: .containerOverrides)
        containerOverrides = containerOverridesDecoded
        let nodeOverridesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodeOverrides.self, forKey: .nodeOverrides)
        nodeOverrides = nodeOverridesDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let propagateTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let eksPropertiesOverrideDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EksPropertiesOverride.self, forKey: .eksPropertiesOverride)
        eksPropertiesOverride = eksPropertiesOverrideDecoded
    }
}

extension SubmitJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SubmitJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SubmitJobOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SubmitJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SubmitJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobArn = output.jobArn
            self.jobId = output.jobId
            self.jobName = output.jobName
        } else {
            self.jobArn = nil
            self.jobId = nil
            self.jobName = nil
        }
    }
}

public struct SubmitJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the job.
    public var jobArn: Swift.String?
    /// The unique identifier for the job.
    /// This member is required.
    public var jobId: Swift.String?
    /// The name of the job.
    /// This member is required.
    public var jobName: Swift.String?

    public init (
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobName: Swift.String? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobName = jobName
    }
}

struct SubmitJobOutputResponseBody: Swift.Equatable {
    let jobArn: Swift.String?
    let jobName: Swift.String?
    let jobId: Swift.String?
}

extension SubmitJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobArn
        case jobId
        case jobName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagrisTagsMap0) in tags {
                try tagsContainer.encode(tagrisTagsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/v1/tags/\(resourceArn.urlPercentEncoding())"
    }
}

/// Contains the parameters for TagResource.
public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource that tags are added to. Batch resources that support tags are compute environments, jobs, job definitions, job queues, and scheduling policies. ARNs for child jobs of array and multi-node parallel (MNP) jobs aren't supported.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags that you apply to the resource to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in Amazon Web Services General Reference.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension TerminateJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case reason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }
}

extension TerminateJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/terminatejob"
    }
}

/// Contains the parameters for TerminateJob.
public struct TerminateJobInput: Swift.Equatable {
    /// The Batch job ID of the job to terminate.
    /// This member is required.
    public var jobId: Swift.String?
    /// A message to attach to the job that explains the reason for canceling it. This message is returned by future [DescribeJobs] operations on the job. This message is also recorded in the Batch activity logs.
    /// This member is required.
    public var reason: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.reason = reason
    }
}

struct TerminateJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let reason: Swift.String?
}

extension TerminateJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case reason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension TerminateJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TerminateJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TerminateJobOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TerminateJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TerminateJobOutputResponse: Swift.Equatable {

    public init () { }
}

extension BatchClientTypes.Tmpfs: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerPath
        case mountOptions
        case size
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerPath = self.containerPath {
            try encodeContainer.encode(containerPath, forKey: .containerPath)
        }
        if let mountOptions = mountOptions {
            var mountOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mountOptions)
            for string0 in mountOptions {
                try mountOptionsContainer.encode(string0)
            }
        }
        if let size = self.size {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerPath)
        containerPath = containerPathDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let mountOptionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .mountOptions)
        var mountOptionsDecoded0:[Swift.String]? = nil
        if let mountOptionsContainer = mountOptionsContainer {
            mountOptionsDecoded0 = [Swift.String]()
            for string0 in mountOptionsContainer {
                if let string0 = string0 {
                    mountOptionsDecoded0?.append(string0)
                }
            }
        }
        mountOptions = mountOptionsDecoded0
    }
}

extension BatchClientTypes {
    /// The container path, mount options, and size of the tmpfs mount. This object isn't applicable to jobs that are running on Fargate resources.
    public struct Tmpfs: Swift.Equatable {
        /// The absolute file path in the container where the tmpfs volume is mounted.
        /// This member is required.
        public var containerPath: Swift.String?
        /// The list of tmpfs volume mount options. Valid values: "defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"
        public var mountOptions: [Swift.String]?
        /// The size (in MiB) of the tmpfs volume.
        /// This member is required.
        public var size: Swift.Int?

        public init (
            containerPath: Swift.String? = nil,
            mountOptions: [Swift.String]? = nil,
            size: Swift.Int? = nil
        )
        {
            self.containerPath = containerPath
            self.mountOptions = mountOptions
            self.size = size
        }
    }

}

extension BatchClientTypes.Ulimit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hardLimit
        case name
        case softLimit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hardLimit = self.hardLimit {
            try encodeContainer.encode(hardLimit, forKey: .hardLimit)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let softLimit = self.softLimit {
            try encodeContainer.encode(softLimit, forKey: .softLimit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hardLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .hardLimit)
        hardLimit = hardLimitDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let softLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .softLimit)
        softLimit = softLimitDecoded
    }
}

extension BatchClientTypes {
    /// The ulimit settings to pass to the container. This object isn't applicable to jobs that are running on Fargate resources.
    public struct Ulimit: Swift.Equatable {
        /// The hard limit for the ulimit type.
        /// This member is required.
        public var hardLimit: Swift.Int?
        /// The type of the ulimit.
        /// This member is required.
        public var name: Swift.String?
        /// The soft limit for the ulimit type.
        /// This member is required.
        public var softLimit: Swift.Int?

        public init (
            hardLimit: Swift.Int? = nil,
            name: Swift.String? = nil,
            softLimit: Swift.Int? = nil
        )
        {
            self.hardLimit = hardLimit
            self.name = name
            self.softLimit = softLimit
        }
    }

}

extension UntagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let tagKeys = tagKeys else {
                let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            return items
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/v1/tags/\(resourceArn.urlPercentEncoding())"
    }
}

/// Contains the parameters for UntagResource.
public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource from which to delete tags. Batch resources that support tags are compute environments, jobs, job definitions, job queues, and scheduling policies. ARNs for child jobs of array and multi-node parallel (MNP) jobs aren't supported.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys of the tags to be removed.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateComputeEnvironmentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironment
        case computeResources
        case serviceRole
        case state
        case unmanagedvCpus
        case updatePolicy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironment = self.computeEnvironment {
            try encodeContainer.encode(computeEnvironment, forKey: .computeEnvironment)
        }
        if let computeResources = self.computeResources {
            try encodeContainer.encode(computeResources, forKey: .computeResources)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let unmanagedvCpus = self.unmanagedvCpus {
            try encodeContainer.encode(unmanagedvCpus, forKey: .unmanagedvCpus)
        }
        if let updatePolicy = self.updatePolicy {
            try encodeContainer.encode(updatePolicy, forKey: .updatePolicy)
        }
    }
}

extension UpdateComputeEnvironmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/updatecomputeenvironment"
    }
}

/// Contains the parameters for UpdateComputeEnvironment.
public struct UpdateComputeEnvironmentInput: Swift.Equatable {
    /// The name or full Amazon Resource Name (ARN) of the compute environment to update.
    /// This member is required.
    public var computeEnvironment: Swift.String?
    /// Details of the compute resources managed by the compute environment. Required for a managed compute environment. For more information, see [Compute Environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
    public var computeResources: BatchClientTypes.ComputeResourceUpdate?
    /// The full Amazon Resource Name (ARN) of the IAM role that allows Batch to make calls to other Amazon Web Services services on your behalf. For more information, see [Batch service IAM role](https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html) in the Batch User Guide. If the compute environment has a service-linked role, it can't be changed to use a regular IAM role. Likewise, if the compute environment has a regular IAM role, it can't be changed to use a service-linked role. To update the parameters for the compute environment that require an infrastructure update to change, the AWSServiceRoleForBatch service-linked role must be used. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. If your specified role has a path other than /, then you must either specify the full role ARN (recommended) or prefix the role name with the path. Depending on how you created your Batch service role, its ARN might contain the service-role path prefix. When you only specify the name of the service role, Batch assumes that your ARN doesn't use the service-role path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.
    public var serviceRole: Swift.String?
    /// The state of the compute environment. Compute environments in the ENABLED state can accept jobs from a queue and scale in or out automatically based on the workload demand of its associated queues. If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically, based on the job queue demand. If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out. However, they scale in to minvCpus value after instances become idle.
    public var state: BatchClientTypes.CEState?
    /// The maximum number of vCPUs expected to be used for an unmanaged compute environment. Don't specify this parameter for a managed compute environment. This parameter is only used for fair share scheduling to reserve vCPU capacity for new share identifiers. If this parameter isn't provided for a fair share job queue, no vCPU capacity is reserved.
    public var unmanagedvCpus: Swift.Int?
    /// Specifies the updated infrastructure update policy for the compute environment. For more information about infrastructure updates, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
    public var updatePolicy: BatchClientTypes.UpdatePolicy?

    public init (
        computeEnvironment: Swift.String? = nil,
        computeResources: BatchClientTypes.ComputeResourceUpdate? = nil,
        serviceRole: Swift.String? = nil,
        state: BatchClientTypes.CEState? = nil,
        unmanagedvCpus: Swift.Int? = nil,
        updatePolicy: BatchClientTypes.UpdatePolicy? = nil
    )
    {
        self.computeEnvironment = computeEnvironment
        self.computeResources = computeResources
        self.serviceRole = serviceRole
        self.state = state
        self.unmanagedvCpus = unmanagedvCpus
        self.updatePolicy = updatePolicy
    }
}

struct UpdateComputeEnvironmentInputBody: Swift.Equatable {
    let computeEnvironment: Swift.String?
    let state: BatchClientTypes.CEState?
    let unmanagedvCpus: Swift.Int?
    let computeResources: BatchClientTypes.ComputeResourceUpdate?
    let serviceRole: Swift.String?
    let updatePolicy: BatchClientTypes.UpdatePolicy?
}

extension UpdateComputeEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironment
        case computeResources
        case serviceRole
        case state
        case unmanagedvCpus
        case updatePolicy
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironment)
        computeEnvironment = computeEnvironmentDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEState.self, forKey: .state)
        state = stateDecoded
        let unmanagedvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unmanagedvCpus)
        unmanagedvCpus = unmanagedvCpusDecoded
        let computeResourcesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ComputeResourceUpdate.self, forKey: .computeResources)
        computeResources = computeResourcesDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let updatePolicyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.UpdatePolicy.self, forKey: .updatePolicy)
        updatePolicy = updatePolicyDecoded
    }
}

extension UpdateComputeEnvironmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateComputeEnvironmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateComputeEnvironmentOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateComputeEnvironmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateComputeEnvironmentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeEnvironmentArn = output.computeEnvironmentArn
            self.computeEnvironmentName = output.computeEnvironmentName
        } else {
            self.computeEnvironmentArn = nil
            self.computeEnvironmentName = nil
        }
    }
}

public struct UpdateComputeEnvironmentOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the compute environment.
    public var computeEnvironmentArn: Swift.String?
    /// The name of the compute environment. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
    public var computeEnvironmentName: Swift.String?

    public init (
        computeEnvironmentArn: Swift.String? = nil,
        computeEnvironmentName: Swift.String? = nil
    )
    {
        self.computeEnvironmentArn = computeEnvironmentArn
        self.computeEnvironmentName = computeEnvironmentName
    }
}

struct UpdateComputeEnvironmentOutputResponseBody: Swift.Equatable {
    let computeEnvironmentName: Swift.String?
    let computeEnvironmentArn: Swift.String?
}

extension UpdateComputeEnvironmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentArn
        case computeEnvironmentName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentName)
        computeEnvironmentName = computeEnvironmentNameDecoded
        let computeEnvironmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentArn)
        computeEnvironmentArn = computeEnvironmentArnDecoded
    }
}

extension UpdateJobQueueInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentOrder
        case jobQueue
        case priority
        case schedulingPolicyArn
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentOrder = computeEnvironmentOrder {
            var computeEnvironmentOrderContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computeEnvironmentOrder)
            for computeenvironmentorder0 in computeEnvironmentOrder {
                try computeEnvironmentOrderContainer.encode(computeenvironmentorder0)
            }
        }
        if let jobQueue = self.jobQueue {
            try encodeContainer.encode(jobQueue, forKey: .jobQueue)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let schedulingPolicyArn = self.schedulingPolicyArn {
            try encodeContainer.encode(schedulingPolicyArn, forKey: .schedulingPolicyArn)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }
}

extension UpdateJobQueueInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/updatejobqueue"
    }
}

/// Contains the parameters for UpdateJobQueue.
public struct UpdateJobQueueInput: Swift.Equatable {
    /// Details the set of compute environments mapped to a job queue and their order relative to each other. This is one of the parameters used by the job scheduler to determine which compute environment runs a given job. Compute environments must be in the VALID state before you can associate them with a job queue. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT). EC2 and Fargate compute environments can't be mixed. All compute environments that are associated with a job queue must share the same architecture. Batch doesn't support mixing compute environment architecture types in a single job queue.
    public var computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
    /// The name or the Amazon Resource Name (ARN) of the job queue.
    /// This member is required.
    public var jobQueue: Swift.String?
    /// The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order. For example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT). EC2 and Fargate compute environments can't be mixed.
    public var priority: Swift.Int?
    /// Amazon Resource Name (ARN) of the fair share scheduling policy. Once a job queue is created, the fair share scheduling policy can be replaced but not removed. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . For example, aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy.
    public var schedulingPolicyArn: Swift.String?
    /// Describes the queue's ability to accept new jobs. If the job queue state is ENABLED, it can accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
    public var state: BatchClientTypes.JQState?

    public init (
        computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]? = nil,
        jobQueue: Swift.String? = nil,
        priority: Swift.Int? = nil,
        schedulingPolicyArn: Swift.String? = nil,
        state: BatchClientTypes.JQState? = nil
    )
    {
        self.computeEnvironmentOrder = computeEnvironmentOrder
        self.jobQueue = jobQueue
        self.priority = priority
        self.schedulingPolicyArn = schedulingPolicyArn
        self.state = state
    }
}

struct UpdateJobQueueInputBody: Swift.Equatable {
    let jobQueue: Swift.String?
    let state: BatchClientTypes.JQState?
    let schedulingPolicyArn: Swift.String?
    let priority: Swift.Int?
    let computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
}

extension UpdateJobQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentOrder
        case jobQueue
        case priority
        case schedulingPolicyArn
        case state
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueue)
        jobQueue = jobQueueDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JQState.self, forKey: .state)
        state = stateDecoded
        let schedulingPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedulingPolicyArn)
        schedulingPolicyArn = schedulingPolicyArnDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let computeEnvironmentOrderContainer = try containerValues.decodeIfPresent([BatchClientTypes.ComputeEnvironmentOrder?].self, forKey: .computeEnvironmentOrder)
        var computeEnvironmentOrderDecoded0:[BatchClientTypes.ComputeEnvironmentOrder]? = nil
        if let computeEnvironmentOrderContainer = computeEnvironmentOrderContainer {
            computeEnvironmentOrderDecoded0 = [BatchClientTypes.ComputeEnvironmentOrder]()
            for structure0 in computeEnvironmentOrderContainer {
                if let structure0 = structure0 {
                    computeEnvironmentOrderDecoded0?.append(structure0)
                }
            }
        }
        computeEnvironmentOrder = computeEnvironmentOrderDecoded0
    }
}

extension UpdateJobQueueOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateJobQueueOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateJobQueueOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateJobQueueOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateJobQueueOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobQueueArn = output.jobQueueArn
            self.jobQueueName = output.jobQueueName
        } else {
            self.jobQueueArn = nil
            self.jobQueueName = nil
        }
    }
}

public struct UpdateJobQueueOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the job queue.
    public var jobQueueArn: Swift.String?
    /// The name of the job queue.
    public var jobQueueName: Swift.String?

    public init (
        jobQueueArn: Swift.String? = nil,
        jobQueueName: Swift.String? = nil
    )
    {
        self.jobQueueArn = jobQueueArn
        self.jobQueueName = jobQueueName
    }
}

struct UpdateJobQueueOutputResponseBody: Swift.Equatable {
    let jobQueueName: Swift.String?
    let jobQueueArn: Swift.String?
}

extension UpdateJobQueueOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobQueueArn
        case jobQueueName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueName)
        jobQueueName = jobQueueNameDecoded
        let jobQueueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueArn)
        jobQueueArn = jobQueueArnDecoded
    }
}

extension BatchClientTypes.UpdatePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobExecutionTimeoutMinutes
        case terminateJobsOnUpdate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if jobExecutionTimeoutMinutes != 0 {
            try encodeContainer.encode(jobExecutionTimeoutMinutes, forKey: .jobExecutionTimeoutMinutes)
        }
        if let terminateJobsOnUpdate = self.terminateJobsOnUpdate {
            try encodeContainer.encode(terminateJobsOnUpdate, forKey: .terminateJobsOnUpdate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let terminateJobsOnUpdateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .terminateJobsOnUpdate)
        terminateJobsOnUpdate = terminateJobsOnUpdateDecoded
        let jobExecutionTimeoutMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .jobExecutionTimeoutMinutes) ?? 0
        jobExecutionTimeoutMinutes = jobExecutionTimeoutMinutesDecoded
    }
}

extension BatchClientTypes {
    /// Specifies the infrastructure update policy for the compute environment. For more information about infrastructure updates, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
    public struct UpdatePolicy: Swift.Equatable {
        /// Specifies the job timeout (in minutes) when the compute environment infrastructure is updated. The default value is 30.
        public var jobExecutionTimeoutMinutes: Swift.Int
        /// Specifies whether jobs are automatically terminated when the computer environment infrastructure is updated. The default value is false.
        public var terminateJobsOnUpdate: Swift.Bool?

        public init (
            jobExecutionTimeoutMinutes: Swift.Int = 0,
            terminateJobsOnUpdate: Swift.Bool? = nil
        )
        {
            self.jobExecutionTimeoutMinutes = jobExecutionTimeoutMinutes
            self.terminateJobsOnUpdate = terminateJobsOnUpdate
        }
    }

}

extension UpdateSchedulingPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case fairsharePolicy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let fairsharePolicy = self.fairsharePolicy {
            try encodeContainer.encode(fairsharePolicy, forKey: .fairsharePolicy)
        }
    }
}

extension UpdateSchedulingPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/updateschedulingpolicy"
    }
}

/// Contains the parameters for UpdateSchedulingPolicy.
public struct UpdateSchedulingPolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the scheduling policy to update.
    /// This member is required.
    public var arn: Swift.String?
    /// The fair share policy.
    public var fairsharePolicy: BatchClientTypes.FairsharePolicy?

    public init (
        arn: Swift.String? = nil,
        fairsharePolicy: BatchClientTypes.FairsharePolicy? = nil
    )
    {
        self.arn = arn
        self.fairsharePolicy = fairsharePolicy
    }
}

struct UpdateSchedulingPolicyInputBody: Swift.Equatable {
    let arn: Swift.String?
    let fairsharePolicy: BatchClientTypes.FairsharePolicy?
}

extension UpdateSchedulingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case fairsharePolicy
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let fairsharePolicyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.FairsharePolicy.self, forKey: .fairsharePolicy)
        fairsharePolicy = fairsharePolicyDecoded
    }
}

extension UpdateSchedulingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateSchedulingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateSchedulingPolicyOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSchedulingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateSchedulingPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension BatchClientTypes.Volume: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case efsVolumeConfiguration
        case host
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let efsVolumeConfiguration = self.efsVolumeConfiguration {
            try encodeContainer.encode(efsVolumeConfiguration, forKey: .efsVolumeConfiguration)
        }
        if let host = self.host {
            try encodeContainer.encode(host, forKey: .host)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostDecoded = try containerValues.decodeIfPresent(BatchClientTypes.Host.self, forKey: .host)
        host = hostDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let efsVolumeConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.EFSVolumeConfiguration.self, forKey: .efsVolumeConfiguration)
        efsVolumeConfiguration = efsVolumeConfigurationDecoded
    }
}

extension BatchClientTypes {
    /// A data volume that's used in a job's container properties.
    public struct Volume: Swift.Equatable {
        /// This parameter is specified when you're using an Amazon Elastic File System file system for job storage. Jobs that are running on Fargate resources must specify a platformVersion of at least 1.4.0.
        public var efsVolumeConfiguration: BatchClientTypes.EFSVolumeConfiguration?
        /// The contents of the host parameter determine whether your data volume persists on the host container instance and where it's stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running. This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
        public var host: BatchClientTypes.Host?
        /// The name of the volume. It can be up to 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_). This name is referenced in the sourceVolume parameter of container definition mountPoints.
        public var name: Swift.String?

        public init (
            efsVolumeConfiguration: BatchClientTypes.EFSVolumeConfiguration? = nil,
            host: BatchClientTypes.Host? = nil,
            name: Swift.String? = nil
        )
        {
            self.efsVolumeConfiguration = efsVolumeConfiguration
            self.host = host
            self.name = name
        }
    }

}
