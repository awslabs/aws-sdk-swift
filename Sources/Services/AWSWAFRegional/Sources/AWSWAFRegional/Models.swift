//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

extension WAFRegionalClientTypes {

    public enum WafActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allow
        case block
        case count
        case sdkUnknown(Swift.String)

        public static var allCases: [WafActionType] {
            return [
                .allow,
                .block,
                .count
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allow: return "ALLOW"
            case .block: return "BLOCK"
            case .count: return "COUNT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. For the action that is associated with a rule in a WebACL, specifies the action that you want AWS WAF to perform when a web request matches all of the conditions in a rule. For the default action in a WebACL, specifies the action that you want AWS WAF to take when a web request doesn't match all of the conditions in any of the rules in a WebACL.
    public struct WafAction {
        /// Specifies how you want AWS WAF to respond to requests that match the settings in a Rule. Valid settings include the following:
        ///
        /// * ALLOW: AWS WAF allows requests
        ///
        /// * BLOCK: AWS WAF blocks requests
        ///
        /// * COUNT: AWS WAF increments a counter of the requests that match all of the conditions in the rule. AWS WAF then continues to inspect the web request based on the remaining rules in the web ACL. You can't specify COUNT for the default action for a WebACL.
        /// This member is required.
        public var type: WAFRegionalClientTypes.WafActionType?

        public init(
            type: WAFRegionalClientTypes.WafActionType? = nil
        )
        {
            self.type = type
        }
    }

}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The rule to exclude from a rule group. This is applicable only when the ActivatedRule refers to a RuleGroup. The rule must belong to the RuleGroup that is specified by the ActivatedRule.
    public struct ExcludedRule {
        /// The unique identifier for the rule to exclude from the rule group.
        /// This member is required.
        public var ruleId: Swift.String?

        public init(
            ruleId: Swift.String? = nil
        )
        {
            self.ruleId = ruleId
        }
    }

}

extension WAFRegionalClientTypes {

    public enum WafOverrideActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case count
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [WafOverrideActionType] {
            return [
                .count,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .count: return "COUNT"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The action to take if any rule within the RuleGroup matches a request.
    public struct WafOverrideAction {
        /// COUNT overrides the action specified by the individual rule within a RuleGroup . If set to NONE, the rule's action will take place.
        /// This member is required.
        public var type: WAFRegionalClientTypes.WafOverrideActionType?

        public init(
            type: WAFRegionalClientTypes.WafOverrideActionType? = nil
        )
        {
            self.type = type
        }
    }

}

extension WAFRegionalClientTypes {

    public enum WafRuleType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case group
        case rateBased
        case regular
        case sdkUnknown(Swift.String)

        public static var allCases: [WafRuleType] {
            return [
                .group,
                .rateBased,
                .regular
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .rateBased: return "RATE_BASED"
            case .regular: return "REGULAR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The ActivatedRule object in an [UpdateWebACL] request specifies a Rule that you want to insert or delete, the priority of the Rule in the WebACL, and the action that you want AWS WAF to take when a web request matches the Rule (ALLOW, BLOCK, or COUNT). To specify whether to insert or delete a Rule, use the Action parameter in the [WebACLUpdate] data type.
    public struct ActivatedRule {
        /// Specifies the action that CloudFront or AWS WAF takes when a web request matches the conditions in the Rule. Valid values for Action include the following:
        ///
        /// * ALLOW: CloudFront responds with the requested object.
        ///
        /// * BLOCK: CloudFront responds with an HTTP 403 (Forbidden) status code.
        ///
        /// * COUNT: AWS WAF increments a counter of requests that match the conditions in the rule and then continues to inspect the web request based on the remaining rules in the web ACL.
        ///
        ///
        /// ActivatedRule|OverrideAction applies only when updating or adding a RuleGroup to a WebACL. In this case, you do not use ActivatedRule|Action. For all other update requests, ActivatedRule|Action is used instead of ActivatedRule|OverrideAction.
        public var action: WAFRegionalClientTypes.WafAction?
        /// An array of rules to exclude from a rule group. This is applicable only when the ActivatedRule refers to a RuleGroup. Sometimes it is necessary to troubleshoot rule groups that are blocking traffic unexpectedly (false positives). One troubleshooting technique is to identify the specific rule within the rule group that is blocking the legitimate traffic and then disable (exclude) that particular rule. You can exclude rules from both your own rule groups and AWS Marketplace rule groups that have been associated with a web ACL. Specifying ExcludedRules does not remove those rules from the rule group. Rather, it changes the action for the rules to COUNT. Therefore, requests that match an ExcludedRule are counted but not blocked. The RuleGroup owner will receive COUNT metrics for each ExcludedRule. If you want to exclude rules from a rule group that is already associated with a web ACL, perform the following steps:
        ///
        /// * Use the AWS WAF logs to identify the IDs of the rules that you want to exclude. For more information about the logs, see [Logging Web ACL Traffic Information](https://docs.aws.amazon.com/waf/latest/developerguide/logging.html).
        ///
        /// * Submit an [UpdateWebACL] request that has two actions:
        ///
        /// * The first action deletes the existing rule group from the web ACL. That is, in the [UpdateWebACL] request, the first Updates:Action should be DELETE and Updates:ActivatedRule:RuleId should be the rule group that contains the rules that you want to exclude.
        ///
        /// * The second action inserts the same rule group back in, but specifying the rules to exclude. That is, the second Updates:Action should be INSERT, Updates:ActivatedRule:RuleId should be the rule group that you just removed, and ExcludedRules should contain the rules that you want to exclude.
        public var excludedRules: [WAFRegionalClientTypes.ExcludedRule]?
        /// Use the OverrideAction to test your RuleGroup. Any rule in a RuleGroup can potentially block a request. If you set the OverrideAction to None, the RuleGroup will block a request if any individual rule in the RuleGroup matches the request and is configured to block that request. However if you first want to test the RuleGroup, set the OverrideAction to Count. The RuleGroup will then override any block action specified by individual rules contained within the group. Instead of blocking matching requests, those requests will be counted. You can view a record of counted requests using [GetSampledRequests]. ActivatedRule|OverrideAction applies only when updating or adding a RuleGroup to a WebACL. In this case you do not use ActivatedRule|Action. For all other update requests, ActivatedRule|Action is used instead of ActivatedRule|OverrideAction.
        public var overrideAction: WAFRegionalClientTypes.WafOverrideAction?
        /// Specifies the order in which the Rules in a WebACL are evaluated. Rules with a lower value for Priority are evaluated before Rules with a higher value. The value must be a unique integer. If you add multiple Rules to a WebACL, the values don't need to be consecutive.
        /// This member is required.
        public var priority: Swift.Int?
        /// The RuleId for a Rule. You use RuleId to get more information about a Rule (see [GetRule]), update a Rule (see [UpdateRule]), insert a Rule into a WebACL or delete a one from a WebACL (see [UpdateWebACL]), or delete a Rule from AWS WAF (see [DeleteRule]). RuleId is returned by [CreateRule] and by [ListRules].
        /// This member is required.
        public var ruleId: Swift.String?
        /// The rule type, either REGULAR, as defined by [Rule], RATE_BASED, as defined by [RateBasedRule], or GROUP, as defined by [RuleGroup]. The default is REGULAR. Although this field is optional, be aware that if you try to add a RATE_BASED rule to a web ACL without setting the type, the [UpdateWebACL] request will fail because the request tries to add a REGULAR rule with the specified ID, which does not exist.
        public var type: WAFRegionalClientTypes.WafRuleType?

        public init(
            action: WAFRegionalClientTypes.WafAction? = nil,
            excludedRules: [WAFRegionalClientTypes.ExcludedRule]? = nil,
            overrideAction: WAFRegionalClientTypes.WafOverrideAction? = nil,
            priority: Swift.Int? = nil,
            ruleId: Swift.String? = nil,
            type: WAFRegionalClientTypes.WafRuleType? = nil
        )
        {
            self.action = action
            self.excludedRules = excludedRules
            self.overrideAction = overrideAction
            self.priority = priority
            self.ruleId = ruleId
            self.type = type
        }
    }

}

/// The operation failed because of a system problem, even though the request was valid. Retry your request.
public struct WAFInternalErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFInternalErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because you tried to create, update, or delete an object by using an invalid account identifier.
public struct WAFInvalidAccountException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "WAFInvalidAccountException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension WAFRegionalClientTypes {

    public enum ParameterExceptionField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case byteMatchFieldType
        case byteMatchPositionalConstraint
        case byteMatchTextTransformation
        case changeAction
        case geoMatchLocationType
        case geoMatchLocationValue
        case ipsetType
        case nextMarker
        case predicateType
        case rateKey
        case resourceArn
        case ruleType
        case sizeConstraintComparisonOperator
        case sqlInjectionMatchFieldType
        case tags
        case tagKeys
        case wafAction
        case wafOverrideAction
        case sdkUnknown(Swift.String)

        public static var allCases: [ParameterExceptionField] {
            return [
                .byteMatchFieldType,
                .byteMatchPositionalConstraint,
                .byteMatchTextTransformation,
                .changeAction,
                .geoMatchLocationType,
                .geoMatchLocationValue,
                .ipsetType,
                .nextMarker,
                .predicateType,
                .rateKey,
                .resourceArn,
                .ruleType,
                .sizeConstraintComparisonOperator,
                .sqlInjectionMatchFieldType,
                .tags,
                .tagKeys,
                .wafAction,
                .wafOverrideAction
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .byteMatchFieldType: return "BYTE_MATCH_FIELD_TYPE"
            case .byteMatchPositionalConstraint: return "BYTE_MATCH_POSITIONAL_CONSTRAINT"
            case .byteMatchTextTransformation: return "BYTE_MATCH_TEXT_TRANSFORMATION"
            case .changeAction: return "CHANGE_ACTION"
            case .geoMatchLocationType: return "GEO_MATCH_LOCATION_TYPE"
            case .geoMatchLocationValue: return "GEO_MATCH_LOCATION_VALUE"
            case .ipsetType: return "IPSET_TYPE"
            case .nextMarker: return "NEXT_MARKER"
            case .predicateType: return "PREDICATE_TYPE"
            case .rateKey: return "RATE_KEY"
            case .resourceArn: return "RESOURCE_ARN"
            case .ruleType: return "RULE_TYPE"
            case .sizeConstraintComparisonOperator: return "SIZE_CONSTRAINT_COMPARISON_OPERATOR"
            case .sqlInjectionMatchFieldType: return "SQL_INJECTION_MATCH_FIELD_TYPE"
            case .tags: return "TAGS"
            case .tagKeys: return "TAG_KEYS"
            case .wafAction: return "WAF_ACTION"
            case .wafOverrideAction: return "WAF_OVERRIDE_ACTION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {

    public enum ParameterExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case illegalArgument
        case illegalCombination
        case invalidOption
        case invalidTagKey
        case sdkUnknown(Swift.String)

        public static var allCases: [ParameterExceptionReason] {
            return [
                .illegalArgument,
                .illegalCombination,
                .invalidOption,
                .invalidTagKey
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .illegalArgument: return "ILLEGAL_ARGUMENT"
            case .illegalCombination: return "ILLEGAL_COMBINATION"
            case .invalidOption: return "INVALID_OPTION"
            case .invalidTagKey: return "INVALID_TAG_KEY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The operation failed because AWS WAF didn't recognize a parameter in the request. For example:
///
/// * You specified an invalid parameter name.
///
/// * You specified an invalid value.
///
/// * You tried to update an object (ByteMatchSet, IPSet, Rule, or WebACL) using an action other than INSERT or DELETE.
///
/// * You tried to create a WebACL with a DefaultActionType other than ALLOW, BLOCK, or COUNT.
///
/// * You tried to create a RateBasedRule with a RateKey value other than IP.
///
/// * You tried to update a WebACL with a WafActionType other than ALLOW, BLOCK, or COUNT.
///
/// * You tried to update a ByteMatchSet with a FieldToMatchType other than HEADER, METHOD, QUERY_STRING, URI, or BODY.
///
/// * You tried to update a ByteMatchSet with a Field of HEADER but no value for Data.
///
/// * Your request references an ARN that is malformed, or corresponds to a resource with which a web ACL cannot be associated.
public struct WAFInvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var field: WAFRegionalClientTypes.ParameterExceptionField? = nil
        public internal(set) var parameter: Swift.String? = nil
        public internal(set) var reason: WAFRegionalClientTypes.ParameterExceptionReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFInvalidParameterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        field: WAFRegionalClientTypes.ParameterExceptionField? = nil,
        parameter: Swift.String? = nil,
        reason: WAFRegionalClientTypes.ParameterExceptionReason? = nil
    )
    {
        self.properties.field = field
        self.properties.parameter = parameter
        self.properties.reason = reason
    }
}

/// The operation failed because the referenced object doesn't exist.
public struct WAFNonexistentItemException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFNonexistentItemException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the entity referenced is temporarily unavailable. Retry your request.
public struct WAFUnavailableEntityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFUnavailableEntityException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AssociateWebACLInput {
    /// The ARN (Amazon Resource Name) of the resource to be protected, either an application load balancer or Amazon API Gateway stage. The ARN should be in one of the following formats:
    ///
    /// * For an Application Load Balancer: arn:aws:elasticloadbalancing:region:account-id:loadbalancer/app/load-balancer-name/load-balancer-id
    ///
    /// * For an Amazon API Gateway stage: arn:aws:apigateway:region::/restapis/api-id/stages/stage-name
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A unique identifier (ID) for the web ACL.
    /// This member is required.
    public var webACLId: Swift.String?

    public init(
        resourceArn: Swift.String? = nil,
        webACLId: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
        self.webACLId = webACLId
    }
}

public struct AssociateWebACLOutput {

    public init() { }
}

/// The name specified is invalid.
public struct WAFDisallowedNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFDisallowedNameException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation exceeds a resource limit, for example, the maximum number of WebACL objects that you can create for an AWS account. For more information, see [Limits](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the AWS WAF Developer Guide.
public struct WAFLimitsExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFLimitsExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because you tried to create, update, or delete an object by using a change token that has already been used.
public struct WAFStaleDataException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFStaleDataException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateByteMatchSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description of the [ByteMatchSet]. You can't change Name after you create a ByteMatchSet.
    /// This member is required.
    public var name: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

extension WAFRegionalClientTypes {

    public enum MatchFieldType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allQueryArgs
        case body
        case header
        case method
        case queryString
        case singleQueryArg
        case uri
        case sdkUnknown(Swift.String)

        public static var allCases: [MatchFieldType] {
            return [
                .allQueryArgs,
                .body,
                .header,
                .method,
                .queryString,
                .singleQueryArg,
                .uri
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allQueryArgs: return "ALL_QUERY_ARGS"
            case .body: return "BODY"
            case .header: return "HEADER"
            case .method: return "METHOD"
            case .queryString: return "QUERY_STRING"
            case .singleQueryArg: return "SINGLE_QUERY_ARG"
            case .uri: return "URI"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies where in a web request to look for TargetString.
    public struct FieldToMatch {
        /// When the value of Type is HEADER, enter the name of the header that you want AWS WAF to search, for example, User-Agent or Referer. The name of the header is not case sensitive. When the value of Type is SINGLE_QUERY_ARG, enter the name of the parameter that you want AWS WAF to search, for example, UserName or SalesRegion. The parameter name is not case sensitive. If the value of Type is any other value, omit Data.
        public var data: Swift.String?
        /// The part of the web request that you want AWS WAF to search for a specified string. Parts of a request that you can search include the following:
        ///
        /// * HEADER: A specified request header, for example, the value of the User-Agent or Referer header. If you choose HEADER for the type, specify the name of the header in Data.
        ///
        /// * METHOD: The HTTP method, which indicated the type of operation that the request is asking the origin to perform. Amazon CloudFront supports the following methods: DELETE, GET, HEAD, OPTIONS, PATCH, POST, and PUT.
        ///
        /// * QUERY_STRING: A query string, which is the part of a URL that appears after a ? character, if any.
        ///
        /// * URI: The part of a web request that identifies a resource, for example, /images/daily-ad.jpg.
        ///
        /// * BODY: The part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. The request body immediately follows the request headers. Note that only the first 8192 bytes of the request body are forwarded to AWS WAF for inspection. To allow or block requests based on the length of the body, you can create a size constraint set. For more information, see [CreateSizeConstraintSet].
        ///
        /// * SINGLE_QUERY_ARG: The parameter in the query string that you will inspect, such as UserName or SalesRegion. The maximum length for SINGLE_QUERY_ARG is 30 characters.
        ///
        /// * ALL_QUERY_ARGS: Similar to SINGLE_QUERY_ARG, but rather than inspecting a single parameter, AWS WAF will inspect all parameters within the query for the value or regex pattern that you specify in TargetString.
        /// This member is required.
        public var type: WAFRegionalClientTypes.MatchFieldType?

        public init(
            data: Swift.String? = nil,
            type: WAFRegionalClientTypes.MatchFieldType? = nil
        )
        {
            self.data = data
            self.type = type
        }
    }

}

extension WAFRegionalClientTypes {

    public enum PositionalConstraint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contains
        case containsWord
        case endsWith
        case exactly
        case startsWith
        case sdkUnknown(Swift.String)

        public static var allCases: [PositionalConstraint] {
            return [
                .contains,
                .containsWord,
                .endsWith,
                .exactly,
                .startsWith
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CONTAINS"
            case .containsWord: return "CONTAINS_WORD"
            case .endsWith: return "ENDS_WITH"
            case .exactly: return "EXACTLY"
            case .startsWith: return "STARTS_WITH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {

    public enum TextTransformation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cmdLine
        case compressWhiteSpace
        case htmlEntityDecode
        case lowercase
        case `none`
        case urlDecode
        case sdkUnknown(Swift.String)

        public static var allCases: [TextTransformation] {
            return [
                .cmdLine,
                .compressWhiteSpace,
                .htmlEntityDecode,
                .lowercase,
                .none,
                .urlDecode
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cmdLine: return "CMD_LINE"
            case .compressWhiteSpace: return "COMPRESS_WHITE_SPACE"
            case .htmlEntityDecode: return "HTML_ENTITY_DECODE"
            case .lowercase: return "LOWERCASE"
            case .none: return "NONE"
            case .urlDecode: return "URL_DECODE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The bytes (typically a string that corresponds with ASCII characters) that you want AWS WAF to search for in web requests, the location in requests that you want AWS WAF to search, and other settings.
    public struct ByteMatchTuple {
        /// The part of a web request that you want AWS WAF to search, such as a specified header or a query string. For more information, see [FieldToMatch].
        /// This member is required.
        public var fieldToMatch: WAFRegionalClientTypes.FieldToMatch?
        /// Within the portion of a web request that you want to search (for example, in the query string, if any), specify where you want AWS WAF to search. Valid values include the following: CONTAINS The specified part of the web request must include the value of TargetString, but the location doesn't matter. CONTAINS_WORD The specified part of the web request must include the value of TargetString, and TargetString must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, TargetString must be a word, which means one of the following:
        ///
        /// * TargetString exactly matches the value of the specified part of the web request, such as the value of a header.
        ///
        /// * TargetString is at the beginning of the specified part of the web request and is followed by a character other than an alphanumeric character or underscore (_), for example, BadBot;.
        ///
        /// * TargetString is at the end of the specified part of the web request and is preceded by a character other than an alphanumeric character or underscore (_), for example, ;BadBot.
        ///
        /// * TargetString is in the middle of the specified part of the web request and is preceded and followed by characters other than alphanumeric characters or underscore (_), for example, -BadBot;.
        ///
        ///
        /// EXACTLY The value of the specified part of the web request must exactly match the value of TargetString. STARTS_WITH The value of TargetString must appear at the beginning of the specified part of the web request. ENDS_WITH The value of TargetString must appear at the end of the specified part of the web request.
        /// This member is required.
        public var positionalConstraint: WAFRegionalClientTypes.PositionalConstraint?
        /// The value that you want AWS WAF to search for. AWS WAF searches for the specified string in the part of web requests that you specified in FieldToMatch. The maximum length of the value is 50 bytes. Valid values depend on the values that you specified for FieldToMatch:
        ///
        /// * HEADER: The value that you want AWS WAF to search for in the request header that you specified in [FieldToMatch], for example, the value of the User-Agent or Referer header.
        ///
        /// * METHOD: The HTTP method, which indicates the type of operation specified in the request. CloudFront supports the following methods: DELETE, GET, HEAD, OPTIONS, PATCH, POST, and PUT.
        ///
        /// * QUERY_STRING: The value that you want AWS WAF to search for in the query string, which is the part of a URL that appears after a ? character.
        ///
        /// * URI: The value that you want AWS WAF to search for in the part of a URL that identifies a resource, for example, /images/daily-ad.jpg.
        ///
        /// * BODY: The part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. The request body immediately follows the request headers. Note that only the first 8192 bytes of the request body are forwarded to AWS WAF for inspection. To allow or block requests based on the length of the body, you can create a size constraint set. For more information, see [CreateSizeConstraintSet].
        ///
        /// * SINGLE_QUERY_ARG: The parameter in the query string that you will inspect, such as UserName or SalesRegion. The maximum length for SINGLE_QUERY_ARG is 30 characters.
        ///
        /// * ALL_QUERY_ARGS: Similar to SINGLE_QUERY_ARG, but instead of inspecting a single parameter, AWS WAF inspects all parameters within the query string for the value or regex pattern that you specify in TargetString.
        ///
        ///
        /// If TargetString includes alphabetic characters A-Z and a-z, note that the value is case sensitive. If you're using the AWS WAF API Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes. For example, suppose the value of Type is HEADER and the value of Data is User-Agent. If you want to search the User-Agent header for the value BadBot, you base64-encode BadBot using MIME base64-encoding and include the resulting value, QmFkQm90, in the value of TargetString. If you're using the AWS CLI or one of the AWS SDKs The value that you want AWS WAF to search for. The SDK automatically base64 encodes the value.
        /// This member is required.
        public var targetString: Foundation.Data?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on FieldToMatch before inspecting it for a match. You can only specify a single type of TextTransformation. CMD_LINE When you're concerned that attackers are injecting an operating system command line command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        ///
        /// * Delete the following characters: \ " ' ^
        ///
        /// * Delete spaces before the following characters: / (
        ///
        /// * Replace the following characters with a space: , ;
        ///
        /// * Replace multiple spaces with one space
        ///
        /// * Convert uppercase letters (A-Z) to lowercase (a-z)
        ///
        ///
        /// COMPRESS_WHITE_SPACE Use this option to replace the following characters with a space character (decimal 32):
        ///
        /// * \f, formfeed, decimal 12
        ///
        /// * \t, tab, decimal 9
        ///
        /// * \n, newline, decimal 10
        ///
        /// * \r, carriage return, decimal 13
        ///
        /// * \v, vertical tab, decimal 11
        ///
        /// * non-breaking space, decimal 160
        ///
        ///
        /// COMPRESS_WHITE_SPACE also replaces multiple spaces with one space. HTML_ENTITY_DECODE Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs the following operations:
        ///
        /// * Replaces (ampersand)quot; with "
        ///
        /// * Replaces (ampersand)nbsp; with a non-breaking space, decimal 160
        ///
        /// * Replaces (ampersand)lt; with a "less than" symbol
        ///
        /// * Replaces (ampersand)gt; with >
        ///
        /// * Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding characters
        ///
        /// * Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding characters
        ///
        ///
        /// LOWERCASE Use this option to convert uppercase letters (A-Z) to lowercase (a-z). URL_DECODE Use this option to decode a URL-encoded value. NONE Specify NONE if you don't want to perform any text transformations.
        /// This member is required.
        public var textTransformation: WAFRegionalClientTypes.TextTransformation?

        public init(
            fieldToMatch: WAFRegionalClientTypes.FieldToMatch? = nil,
            positionalConstraint: WAFRegionalClientTypes.PositionalConstraint? = nil,
            targetString: Foundation.Data? = nil,
            textTransformation: WAFRegionalClientTypes.TextTransformation? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.positionalConstraint = positionalConstraint
            self.targetString = targetString
            self.textTransformation = textTransformation
        }
    }

}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. In a [GetByteMatchSet] request, ByteMatchSet is a complex type that contains the ByteMatchSetId and Name of a ByteMatchSet, and the values that you specified when you updated the ByteMatchSet. A complex type that contains ByteMatchTuple objects, which specify the parts of web requests that you want AWS WAF to inspect and the values that you want AWS WAF to search for. If a ByteMatchSet contains more than one ByteMatchTuple object, a request needs to match the settings in only one ByteMatchTuple to be considered a match.
    public struct ByteMatchSet {
        /// The ByteMatchSetId for a ByteMatchSet. You use ByteMatchSetId to get information about a ByteMatchSet (see [GetByteMatchSet]), update a ByteMatchSet (see [UpdateByteMatchSet]), insert a ByteMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a ByteMatchSet from AWS WAF (see [DeleteByteMatchSet]). ByteMatchSetId is returned by [CreateByteMatchSet] and by [ListByteMatchSets].
        /// This member is required.
        public var byteMatchSetId: Swift.String?
        /// Specifies the bytes (typically a string that corresponds with ASCII characters) that you want AWS WAF to search for in web requests, the location in requests that you want AWS WAF to search, and other settings.
        /// This member is required.
        public var byteMatchTuples: [WAFRegionalClientTypes.ByteMatchTuple]?
        /// A friendly name or description of the [ByteMatchSet]. You can't change Name after you create a ByteMatchSet.
        public var name: Swift.String?

        public init(
            byteMatchSetId: Swift.String? = nil,
            byteMatchTuples: [WAFRegionalClientTypes.ByteMatchTuple]? = nil,
            name: Swift.String? = nil
        )
        {
            self.byteMatchSetId = byteMatchSetId
            self.byteMatchTuples = byteMatchTuples
            self.name = name
        }
    }

}

public struct CreateByteMatchSetOutput {
    /// A [ByteMatchSet] that contains no ByteMatchTuple objects.
    public var byteMatchSet: WAFRegionalClientTypes.ByteMatchSet?
    /// The ChangeToken that you used to submit the CreateByteMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        byteMatchSet: WAFRegionalClientTypes.ByteMatchSet? = nil,
        changeToken: Swift.String? = nil
    )
    {
        self.byteMatchSet = byteMatchSet
        self.changeToken = changeToken
    }
}

public struct CreateGeoMatchSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description of the [GeoMatchSet]. You can't change Name after you create the GeoMatchSet.
    /// This member is required.
    public var name: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

extension WAFRegionalClientTypes {

    public enum GeoMatchConstraintType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case country
        case sdkUnknown(Swift.String)

        public static var allCases: [GeoMatchConstraintType] {
            return [
                .country
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .country: return "Country"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {

    public enum GeoMatchConstraintValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ad
        case ae
        case af
        case ag
        case ai
        case al
        case am
        case ao
        case aq
        case ar
        case `as`
        case at
        case au
        case aw
        case ax
        case az
        case ba
        case bb
        case bd
        case be
        case bf
        case bg
        case bh
        case bi
        case bj
        case bl
        case bm
        case bn
        case bo
        case bq
        case br
        case bs
        case bt
        case bv
        case bw
        case by
        case bz
        case ca
        case cc
        case cd
        case cf
        case cg
        case ch
        case ci
        case ck
        case cl
        case cm
        case cn
        case co
        case cr
        case cu
        case cv
        case cw
        case cx
        case cy
        case cz
        case de
        case dj
        case dk
        case dm
        case `do`
        case dz
        case ec
        case ee
        case eg
        case eh
        case er
        case es
        case et
        case fi
        case fj
        case fk
        case fm
        case fo
        case fr
        case ga
        case gb
        case gd
        case ge
        case gf
        case gg
        case gh
        case gi
        case gl
        case gm
        case gn
        case gp
        case gq
        case gr
        case gs
        case gt
        case gu
        case gw
        case gy
        case hk
        case hm
        case hn
        case hr
        case ht
        case hu
        case id
        case ie
        case il
        case im
        case `in`
        case io
        case iq
        case ir
        case `is`
        case it
        case je
        case jm
        case jo
        case jp
        case ke
        case kg
        case kh
        case ki
        case km
        case kn
        case kp
        case kr
        case kw
        case ky
        case kz
        case la
        case lb
        case lc
        case li
        case lk
        case lr
        case ls
        case lt
        case lu
        case lv
        case ly
        case ma
        case mc
        case md
        case me
        case mf
        case mg
        case mh
        case mk
        case ml
        case mm
        case mn
        case mo
        case mp
        case mq
        case mr
        case ms
        case mt
        case mu
        case mv
        case mw
        case mx
        case my
        case mz
        case na
        case nc
        case ne
        case nf
        case ng
        case ni
        case nl
        case no
        case np
        case nr
        case nu
        case nz
        case om
        case pa
        case pe
        case pf
        case pg
        case ph
        case pk
        case pl
        case pm
        case pn
        case pr
        case ps
        case pt
        case pw
        case py
        case qa
        case re
        case ro
        case rs
        case ru
        case rw
        case sa
        case sb
        case sc
        case sd
        case se
        case sg
        case sh
        case si
        case sj
        case sk
        case sl
        case sm
        case sn
        case so
        case sr
        case ss
        case st
        case sv
        case sx
        case sy
        case sz
        case tc
        case td
        case tf
        case tg
        case th
        case tj
        case tk
        case tl
        case tm
        case tn
        case to
        case tr
        case tt
        case tv
        case tw
        case tz
        case ua
        case ug
        case um
        case us
        case uy
        case uz
        case va
        case vc
        case ve
        case vg
        case vi
        case vn
        case vu
        case wf
        case ws
        case ye
        case yt
        case za
        case zm
        case zw
        case sdkUnknown(Swift.String)

        public static var allCases: [GeoMatchConstraintValue] {
            return [
                .ad,
                .ae,
                .af,
                .ag,
                .ai,
                .al,
                .am,
                .ao,
                .aq,
                .ar,
                .as,
                .at,
                .au,
                .aw,
                .ax,
                .az,
                .ba,
                .bb,
                .bd,
                .be,
                .bf,
                .bg,
                .bh,
                .bi,
                .bj,
                .bl,
                .bm,
                .bn,
                .bo,
                .bq,
                .br,
                .bs,
                .bt,
                .bv,
                .bw,
                .by,
                .bz,
                .ca,
                .cc,
                .cd,
                .cf,
                .cg,
                .ch,
                .ci,
                .ck,
                .cl,
                .cm,
                .cn,
                .co,
                .cr,
                .cu,
                .cv,
                .cw,
                .cx,
                .cy,
                .cz,
                .de,
                .dj,
                .dk,
                .dm,
                .do,
                .dz,
                .ec,
                .ee,
                .eg,
                .eh,
                .er,
                .es,
                .et,
                .fi,
                .fj,
                .fk,
                .fm,
                .fo,
                .fr,
                .ga,
                .gb,
                .gd,
                .ge,
                .gf,
                .gg,
                .gh,
                .gi,
                .gl,
                .gm,
                .gn,
                .gp,
                .gq,
                .gr,
                .gs,
                .gt,
                .gu,
                .gw,
                .gy,
                .hk,
                .hm,
                .hn,
                .hr,
                .ht,
                .hu,
                .id,
                .ie,
                .il,
                .im,
                .in,
                .io,
                .iq,
                .ir,
                .is,
                .it,
                .je,
                .jm,
                .jo,
                .jp,
                .ke,
                .kg,
                .kh,
                .ki,
                .km,
                .kn,
                .kp,
                .kr,
                .kw,
                .ky,
                .kz,
                .la,
                .lb,
                .lc,
                .li,
                .lk,
                .lr,
                .ls,
                .lt,
                .lu,
                .lv,
                .ly,
                .ma,
                .mc,
                .md,
                .me,
                .mf,
                .mg,
                .mh,
                .mk,
                .ml,
                .mm,
                .mn,
                .mo,
                .mp,
                .mq,
                .mr,
                .ms,
                .mt,
                .mu,
                .mv,
                .mw,
                .mx,
                .my,
                .mz,
                .na,
                .nc,
                .ne,
                .nf,
                .ng,
                .ni,
                .nl,
                .no,
                .np,
                .nr,
                .nu,
                .nz,
                .om,
                .pa,
                .pe,
                .pf,
                .pg,
                .ph,
                .pk,
                .pl,
                .pm,
                .pn,
                .pr,
                .ps,
                .pt,
                .pw,
                .py,
                .qa,
                .re,
                .ro,
                .rs,
                .ru,
                .rw,
                .sa,
                .sb,
                .sc,
                .sd,
                .se,
                .sg,
                .sh,
                .si,
                .sj,
                .sk,
                .sl,
                .sm,
                .sn,
                .so,
                .sr,
                .ss,
                .st,
                .sv,
                .sx,
                .sy,
                .sz,
                .tc,
                .td,
                .tf,
                .tg,
                .th,
                .tj,
                .tk,
                .tl,
                .tm,
                .tn,
                .to,
                .tr,
                .tt,
                .tv,
                .tw,
                .tz,
                .ua,
                .ug,
                .um,
                .us,
                .uy,
                .uz,
                .va,
                .vc,
                .ve,
                .vg,
                .vi,
                .vn,
                .vu,
                .wf,
                .ws,
                .ye,
                .yt,
                .za,
                .zm,
                .zw
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ad: return "AD"
            case .ae: return "AE"
            case .af: return "AF"
            case .ag: return "AG"
            case .ai: return "AI"
            case .al: return "AL"
            case .am: return "AM"
            case .ao: return "AO"
            case .aq: return "AQ"
            case .ar: return "AR"
            case .as: return "AS"
            case .at: return "AT"
            case .au: return "AU"
            case .aw: return "AW"
            case .ax: return "AX"
            case .az: return "AZ"
            case .ba: return "BA"
            case .bb: return "BB"
            case .bd: return "BD"
            case .be: return "BE"
            case .bf: return "BF"
            case .bg: return "BG"
            case .bh: return "BH"
            case .bi: return "BI"
            case .bj: return "BJ"
            case .bl: return "BL"
            case .bm: return "BM"
            case .bn: return "BN"
            case .bo: return "BO"
            case .bq: return "BQ"
            case .br: return "BR"
            case .bs: return "BS"
            case .bt: return "BT"
            case .bv: return "BV"
            case .bw: return "BW"
            case .by: return "BY"
            case .bz: return "BZ"
            case .ca: return "CA"
            case .cc: return "CC"
            case .cd: return "CD"
            case .cf: return "CF"
            case .cg: return "CG"
            case .ch: return "CH"
            case .ci: return "CI"
            case .ck: return "CK"
            case .cl: return "CL"
            case .cm: return "CM"
            case .cn: return "CN"
            case .co: return "CO"
            case .cr: return "CR"
            case .cu: return "CU"
            case .cv: return "CV"
            case .cw: return "CW"
            case .cx: return "CX"
            case .cy: return "CY"
            case .cz: return "CZ"
            case .de: return "DE"
            case .dj: return "DJ"
            case .dk: return "DK"
            case .dm: return "DM"
            case .do: return "DO"
            case .dz: return "DZ"
            case .ec: return "EC"
            case .ee: return "EE"
            case .eg: return "EG"
            case .eh: return "EH"
            case .er: return "ER"
            case .es: return "ES"
            case .et: return "ET"
            case .fi: return "FI"
            case .fj: return "FJ"
            case .fk: return "FK"
            case .fm: return "FM"
            case .fo: return "FO"
            case .fr: return "FR"
            case .ga: return "GA"
            case .gb: return "GB"
            case .gd: return "GD"
            case .ge: return "GE"
            case .gf: return "GF"
            case .gg: return "GG"
            case .gh: return "GH"
            case .gi: return "GI"
            case .gl: return "GL"
            case .gm: return "GM"
            case .gn: return "GN"
            case .gp: return "GP"
            case .gq: return "GQ"
            case .gr: return "GR"
            case .gs: return "GS"
            case .gt: return "GT"
            case .gu: return "GU"
            case .gw: return "GW"
            case .gy: return "GY"
            case .hk: return "HK"
            case .hm: return "HM"
            case .hn: return "HN"
            case .hr: return "HR"
            case .ht: return "HT"
            case .hu: return "HU"
            case .id: return "ID"
            case .ie: return "IE"
            case .il: return "IL"
            case .im: return "IM"
            case .in: return "IN"
            case .io: return "IO"
            case .iq: return "IQ"
            case .ir: return "IR"
            case .is: return "IS"
            case .it: return "IT"
            case .je: return "JE"
            case .jm: return "JM"
            case .jo: return "JO"
            case .jp: return "JP"
            case .ke: return "KE"
            case .kg: return "KG"
            case .kh: return "KH"
            case .ki: return "KI"
            case .km: return "KM"
            case .kn: return "KN"
            case .kp: return "KP"
            case .kr: return "KR"
            case .kw: return "KW"
            case .ky: return "KY"
            case .kz: return "KZ"
            case .la: return "LA"
            case .lb: return "LB"
            case .lc: return "LC"
            case .li: return "LI"
            case .lk: return "LK"
            case .lr: return "LR"
            case .ls: return "LS"
            case .lt: return "LT"
            case .lu: return "LU"
            case .lv: return "LV"
            case .ly: return "LY"
            case .ma: return "MA"
            case .mc: return "MC"
            case .md: return "MD"
            case .me: return "ME"
            case .mf: return "MF"
            case .mg: return "MG"
            case .mh: return "MH"
            case .mk: return "MK"
            case .ml: return "ML"
            case .mm: return "MM"
            case .mn: return "MN"
            case .mo: return "MO"
            case .mp: return "MP"
            case .mq: return "MQ"
            case .mr: return "MR"
            case .ms: return "MS"
            case .mt: return "MT"
            case .mu: return "MU"
            case .mv: return "MV"
            case .mw: return "MW"
            case .mx: return "MX"
            case .my: return "MY"
            case .mz: return "MZ"
            case .na: return "NA"
            case .nc: return "NC"
            case .ne: return "NE"
            case .nf: return "NF"
            case .ng: return "NG"
            case .ni: return "NI"
            case .nl: return "NL"
            case .no: return "NO"
            case .np: return "NP"
            case .nr: return "NR"
            case .nu: return "NU"
            case .nz: return "NZ"
            case .om: return "OM"
            case .pa: return "PA"
            case .pe: return "PE"
            case .pf: return "PF"
            case .pg: return "PG"
            case .ph: return "PH"
            case .pk: return "PK"
            case .pl: return "PL"
            case .pm: return "PM"
            case .pn: return "PN"
            case .pr: return "PR"
            case .ps: return "PS"
            case .pt: return "PT"
            case .pw: return "PW"
            case .py: return "PY"
            case .qa: return "QA"
            case .re: return "RE"
            case .ro: return "RO"
            case .rs: return "RS"
            case .ru: return "RU"
            case .rw: return "RW"
            case .sa: return "SA"
            case .sb: return "SB"
            case .sc: return "SC"
            case .sd: return "SD"
            case .se: return "SE"
            case .sg: return "SG"
            case .sh: return "SH"
            case .si: return "SI"
            case .sj: return "SJ"
            case .sk: return "SK"
            case .sl: return "SL"
            case .sm: return "SM"
            case .sn: return "SN"
            case .so: return "SO"
            case .sr: return "SR"
            case .ss: return "SS"
            case .st: return "ST"
            case .sv: return "SV"
            case .sx: return "SX"
            case .sy: return "SY"
            case .sz: return "SZ"
            case .tc: return "TC"
            case .td: return "TD"
            case .tf: return "TF"
            case .tg: return "TG"
            case .th: return "TH"
            case .tj: return "TJ"
            case .tk: return "TK"
            case .tl: return "TL"
            case .tm: return "TM"
            case .tn: return "TN"
            case .to: return "TO"
            case .tr: return "TR"
            case .tt: return "TT"
            case .tv: return "TV"
            case .tw: return "TW"
            case .tz: return "TZ"
            case .ua: return "UA"
            case .ug: return "UG"
            case .um: return "UM"
            case .us: return "US"
            case .uy: return "UY"
            case .uz: return "UZ"
            case .va: return "VA"
            case .vc: return "VC"
            case .ve: return "VE"
            case .vg: return "VG"
            case .vi: return "VI"
            case .vn: return "VN"
            case .vu: return "VU"
            case .wf: return "WF"
            case .ws: return "WS"
            case .ye: return "YE"
            case .yt: return "YT"
            case .za: return "ZA"
            case .zm: return "ZM"
            case .zw: return "ZW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The country from which web requests originate that you want AWS WAF to search for.
    public struct GeoMatchConstraint {
        /// The type of geographical area you want AWS WAF to search for. Currently Country is the only valid value.
        /// This member is required.
        public var type: WAFRegionalClientTypes.GeoMatchConstraintType?
        /// The country that you want AWS WAF to search for.
        /// This member is required.
        public var value: WAFRegionalClientTypes.GeoMatchConstraintValue?

        public init(
            type: WAFRegionalClientTypes.GeoMatchConstraintType? = nil,
            value: WAFRegionalClientTypes.GeoMatchConstraintValue? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains one or more countries that AWS WAF will search for.
    public struct GeoMatchSet {
        /// An array of [GeoMatchConstraint] objects, which contain the country that you want AWS WAF to search for.
        /// This member is required.
        public var geoMatchConstraints: [WAFRegionalClientTypes.GeoMatchConstraint]?
        /// The GeoMatchSetId for an GeoMatchSet. You use GeoMatchSetId to get information about a GeoMatchSet (see [GeoMatchSet]), update a GeoMatchSet (see [UpdateGeoMatchSet]), insert a GeoMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a GeoMatchSet from AWS WAF (see [DeleteGeoMatchSet]). GeoMatchSetId is returned by [CreateGeoMatchSet] and by [ListGeoMatchSets].
        /// This member is required.
        public var geoMatchSetId: Swift.String?
        /// A friendly name or description of the [GeoMatchSet]. You can't change the name of an GeoMatchSet after you create it.
        public var name: Swift.String?

        public init(
            geoMatchConstraints: [WAFRegionalClientTypes.GeoMatchConstraint]? = nil,
            geoMatchSetId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.geoMatchConstraints = geoMatchConstraints
            self.geoMatchSetId = geoMatchSetId
            self.name = name
        }
    }

}

public struct CreateGeoMatchSetOutput {
    /// The ChangeToken that you used to submit the CreateGeoMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// The [GeoMatchSet] returned in the CreateGeoMatchSet response. The GeoMatchSet contains no GeoMatchConstraints.
    public var geoMatchSet: WAFRegionalClientTypes.GeoMatchSet?

    public init(
        changeToken: Swift.String? = nil,
        geoMatchSet: WAFRegionalClientTypes.GeoMatchSet? = nil
    )
    {
        self.changeToken = changeToken
        self.geoMatchSet = geoMatchSet
    }
}

public struct CreateIPSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description of the [IPSet]. You can't change Name after you create the IPSet.
    /// This member is required.
    public var name: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

extension WAFRegionalClientTypes {

    public enum IPSetDescriptorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [IPSetDescriptorType] {
            return [
                .ipv4,
                .ipv6
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ipv4: return "IPV4"
            case .ipv6: return "IPV6"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the IP address type (IPV4 or IPV6) and the IP address range (in CIDR format) that web requests originate from.
    public struct IPSetDescriptor {
        /// Specify IPV4 or IPV6.
        /// This member is required.
        public var type: WAFRegionalClientTypes.IPSetDescriptorType?
        /// Specify an IPv4 address by using CIDR notation. For example:
        ///
        /// * To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32.
        ///
        /// * To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
        ///
        ///
        /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing). Specify an IPv6 address by using CIDR notation. For example:
        ///
        /// * To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.
        ///
        /// * To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.
        /// This member is required.
        public var value: Swift.String?

        public init(
            type: WAFRegionalClientTypes.IPSetDescriptorType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains one or more IP addresses or blocks of IP addresses specified in Classless Inter-Domain Routing (CIDR) notation. AWS WAF supports IPv4 address ranges: /8 and any range between /16 through /32. AWS WAF supports IPv6 address ranges: /24, /32, /48, /56, /64, and /128. To specify an individual IP address, you specify the four-part IP address followed by a /32, for example, 192.0.2.0/32. To block a range of IP addresses, you can specify /8 or any range between /16 through /32 (for IPv4) or /24, /32, /48, /56, /64, or /128 (for IPv6). For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).
    public struct IPSet {
        /// The IP address type (IPV4 or IPV6) and the IP address range (in CIDR notation) that web requests originate from. If the WebACL is associated with a CloudFront distribution and the viewer did not use an HTTP proxy or a load balancer to send the request, this is the value of the c-ip field in the CloudFront access logs.
        /// This member is required.
        public var ipSetDescriptors: [WAFRegionalClientTypes.IPSetDescriptor]?
        /// The IPSetId for an IPSet. You use IPSetId to get information about an IPSet (see [GetIPSet]), update an IPSet (see [UpdateIPSet]), insert an IPSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete an IPSet from AWS WAF (see [DeleteIPSet]). IPSetId is returned by [CreateIPSet] and by [ListIPSets].
        /// This member is required.
        public var ipSetId: Swift.String?
        /// A friendly name or description of the [IPSet]. You can't change the name of an IPSet after you create it.
        public var name: Swift.String?

        public init(
            ipSetDescriptors: [WAFRegionalClientTypes.IPSetDescriptor]? = nil,
            ipSetId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.ipSetDescriptors = ipSetDescriptors
            self.ipSetId = ipSetId
            self.name = name
        }
    }

}

public struct CreateIPSetOutput {
    /// The ChangeToken that you used to submit the CreateIPSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// The [IPSet] returned in the CreateIPSet response.
    public var ipSet: WAFRegionalClientTypes.IPSet?

    public init(
        changeToken: Swift.String? = nil,
        ipSet: WAFRegionalClientTypes.IPSet? = nil
    )
    {
        self.changeToken = changeToken
        self.ipSet = ipSet
    }
}

///
public struct WAFBadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFBadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct WAFTagOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFTagOperationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct WAFTagOperationInternalErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFTagOperationInternalErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension WAFRegionalClientTypes {

    public enum RateKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ip
        case sdkUnknown(Swift.String)

        public static var allCases: [RateKey] {
            return [
                .ip
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ip: return "IP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A tag associated with an AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource. Tagging is only available through the API, SDKs, and CLI. You can't manage or view tags through the AWS WAF Classic console. You can tag the AWS resources that you manage through AWS WAF Classic: web ACLs, rule groups, and rules.
    public struct Tag {
        ///
        /// This member is required.
        public var key: Swift.String?
        ///
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct CreateRateBasedRuleInput {
    /// The ChangeToken that you used to submit the CreateRateBasedRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description for the metrics for this RateBasedRule. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RateBasedRule.
    /// This member is required.
    public var metricName: Swift.String?
    /// A friendly name or description of the [RateBasedRule]. You can't change the name of a RateBasedRule after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// The field that AWS WAF uses to determine if requests are likely arriving from a single source and thus subject to rate monitoring. The only valid value for RateKey is IP. IP indicates that requests that arrive from the same IP address are subject to the RateLimit that is specified in the RateBasedRule.
    /// This member is required.
    public var rateKey: WAFRegionalClientTypes.RateKey?
    /// The maximum number of requests, which have an identical value in the field that is specified by RateKey, allowed in a five-minute period. If the number of requests exceeds the RateLimit and the other predicates specified in the rule are also met, AWS WAF triggers the action that is specified for this rule.
    /// This member is required.
    public var rateLimit: Swift.Int?
    ///
    public var tags: [WAFRegionalClientTypes.Tag]?

    public init(
        changeToken: Swift.String? = nil,
        metricName: Swift.String? = nil,
        name: Swift.String? = nil,
        rateKey: WAFRegionalClientTypes.RateKey? = nil,
        rateLimit: Swift.Int? = nil,
        tags: [WAFRegionalClientTypes.Tag]? = nil
    )
    {
        self.changeToken = changeToken
        self.metricName = metricName
        self.name = name
        self.rateKey = rateKey
        self.rateLimit = rateLimit
        self.tags = tags
    }
}

extension WAFRegionalClientTypes {

    public enum PredicateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case byteMatch
        case geoMatch
        case ipMatch
        case regexMatch
        case sizeConstraint
        case sqlInjectionMatch
        case xssMatch
        case sdkUnknown(Swift.String)

        public static var allCases: [PredicateType] {
            return [
                .byteMatch,
                .geoMatch,
                .ipMatch,
                .regexMatch,
                .sizeConstraint,
                .sqlInjectionMatch,
                .xssMatch
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .byteMatch: return "ByteMatch"
            case .geoMatch: return "GeoMatch"
            case .ipMatch: return "IPMatch"
            case .regexMatch: return "RegexMatch"
            case .sizeConstraint: return "SizeConstraint"
            case .sqlInjectionMatch: return "SqlInjectionMatch"
            case .xssMatch: return "XssMatch"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the [ByteMatchSet], [IPSet], [SqlInjectionMatchSet], [XssMatchSet], [RegexMatchSet], [GeoMatchSet], and [SizeConstraintSet] objects that you want to add to a Rule and, for each object, indicates whether you want to negate the settings, for example, requests that do NOT originate from the IP address 192.0.2.44.
    public struct Predicate {
        /// A unique identifier for a predicate in a Rule, such as ByteMatchSetId or IPSetId. The ID is returned by the corresponding Create or List command.
        /// This member is required.
        public var dataId: Swift.String?
        /// Set Negated to False if you want AWS WAF to allow, block, or count requests based on the settings in the specified [ByteMatchSet], [IPSet], [SqlInjectionMatchSet], [XssMatchSet], [RegexMatchSet], [GeoMatchSet], or [SizeConstraintSet]. For example, if an IPSet includes the IP address 192.0.2.44, AWS WAF will allow or block requests based on that IP address. Set Negated to True if you want AWS WAF to allow or block a request based on the negation of the settings in the [ByteMatchSet], [IPSet], [SqlInjectionMatchSet], [XssMatchSet], [RegexMatchSet], [GeoMatchSet], or [SizeConstraintSet]. For example, if an IPSet includes the IP address 192.0.2.44, AWS WAF will allow, block, or count requests based on all IP addresses except 192.0.2.44.
        /// This member is required.
        public var negated: Swift.Bool?
        /// The type of predicate in a Rule, such as ByteMatch or IPSet.
        /// This member is required.
        public var type: WAFRegionalClientTypes.PredicateType?

        public init(
            dataId: Swift.String? = nil,
            negated: Swift.Bool? = nil,
            type: WAFRegionalClientTypes.PredicateType? = nil
        )
        {
            self.dataId = dataId
            self.negated = negated
            self.type = type
        }
    }

}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A RateBasedRule is identical to a regular [Rule], with one addition: a RateBasedRule counts the number of requests that arrive from a specified IP address every five minutes. For example, based on recent requests that you've seen from an attacker, you might create a RateBasedRule that includes the following conditions:
    ///
    /// * The requests come from 192.0.2.44.
    ///
    /// * They contain the value BadBot in the User-Agent header.
    ///
    ///
    /// In the rule, you also define the rate limit as 1,000. Requests that meet both of these conditions and exceed 1,000 requests every five minutes trigger the rule's action (block or count), which is defined in the web ACL.
    public struct RateBasedRule {
        /// The Predicates object contains one Predicate element for each [ByteMatchSet], [IPSet], or [SqlInjectionMatchSet] object that you want to include in a RateBasedRule.
        /// This member is required.
        public var matchPredicates: [WAFRegionalClientTypes.Predicate]?
        /// A friendly name or description for the metrics for a RateBasedRule. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RateBasedRule.
        public var metricName: Swift.String?
        /// A friendly name or description for a RateBasedRule. You can't change the name of a RateBasedRule after you create it.
        public var name: Swift.String?
        /// The field that AWS WAF uses to determine if requests are likely arriving from single source and thus subject to rate monitoring. The only valid value for RateKey is IP. IP indicates that requests arriving from the same IP address are subject to the RateLimit that is specified in the RateBasedRule.
        /// This member is required.
        public var rateKey: WAFRegionalClientTypes.RateKey?
        /// The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. If the number of requests exceeds the RateLimit and the other predicates specified in the rule are also met, AWS WAF triggers the action that is specified for this rule.
        /// This member is required.
        public var rateLimit: Swift.Int?
        /// A unique identifier for a RateBasedRule. You use RuleId to get more information about a RateBasedRule (see [GetRateBasedRule]), update a RateBasedRule (see [UpdateRateBasedRule]), insert a RateBasedRule into a WebACL or delete one from a WebACL (see [UpdateWebACL]), or delete a RateBasedRule from AWS WAF (see [DeleteRateBasedRule]).
        /// This member is required.
        public var ruleId: Swift.String?

        public init(
            matchPredicates: [WAFRegionalClientTypes.Predicate]? = nil,
            metricName: Swift.String? = nil,
            name: Swift.String? = nil,
            rateKey: WAFRegionalClientTypes.RateKey? = nil,
            rateLimit: Swift.Int? = nil,
            ruleId: Swift.String? = nil
        )
        {
            self.matchPredicates = matchPredicates
            self.metricName = metricName
            self.name = name
            self.rateKey = rateKey
            self.rateLimit = rateLimit
            self.ruleId = ruleId
        }
    }

}

public struct CreateRateBasedRuleOutput {
    /// The ChangeToken that you used to submit the CreateRateBasedRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// The [RateBasedRule] that is returned in the CreateRateBasedRule response.
    public var rule: WAFRegionalClientTypes.RateBasedRule?

    public init(
        changeToken: Swift.String? = nil,
        rule: WAFRegionalClientTypes.RateBasedRule? = nil
    )
    {
        self.changeToken = changeToken
        self.rule = rule
    }
}

public struct CreateRegexMatchSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description of the [RegexMatchSet]. You can't change Name after you create a RegexMatchSet.
    /// This member is required.
    public var name: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The regular expression pattern that you want AWS WAF to search for in web requests, the location in requests that you want AWS WAF to search, and other settings. Each RegexMatchTuple object contains:
    ///
    /// * The part of a web request that you want AWS WAF to inspect, such as a query string or the value of the User-Agent header.
    ///
    /// * The identifier of the pattern (a regular expression) that you want AWS WAF to look for. For more information, see [RegexPatternSet].
    ///
    /// * Whether to perform any conversions on the request, such as converting it to lowercase, before inspecting it for the specified string.
    public struct RegexMatchTuple {
        /// Specifies where in a web request to look for the RegexPatternSet.
        /// This member is required.
        public var fieldToMatch: WAFRegionalClientTypes.FieldToMatch?
        /// The RegexPatternSetId for a RegexPatternSet. You use RegexPatternSetId to get information about a RegexPatternSet (see [GetRegexPatternSet]), update a RegexPatternSet (see [UpdateRegexPatternSet]), insert a RegexPatternSet into a RegexMatchSet or delete one from a RegexMatchSet (see [UpdateRegexMatchSet]), and delete an RegexPatternSet from AWS WAF (see [DeleteRegexPatternSet]). RegexPatternSetId is returned by [CreateRegexPatternSet] and by [ListRegexPatternSets].
        /// This member is required.
        public var regexPatternSetId: Swift.String?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on RegexPatternSet before inspecting a request for a match. You can only specify a single type of TextTransformation. CMD_LINE When you're concerned that attackers are injecting an operating system commandline command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        ///
        /// * Delete the following characters: \ " ' ^
        ///
        /// * Delete spaces before the following characters: / (
        ///
        /// * Replace the following characters with a space: , ;
        ///
        /// * Replace multiple spaces with one space
        ///
        /// * Convert uppercase letters (A-Z) to lowercase (a-z)
        ///
        ///
        /// COMPRESS_WHITE_SPACE Use this option to replace the following characters with a space character (decimal 32):
        ///
        /// * \f, formfeed, decimal 12
        ///
        /// * \t, tab, decimal 9
        ///
        /// * \n, newline, decimal 10
        ///
        /// * \r, carriage return, decimal 13
        ///
        /// * \v, vertical tab, decimal 11
        ///
        /// * non-breaking space, decimal 160
        ///
        ///
        /// COMPRESS_WHITE_SPACE also replaces multiple spaces with one space. HTML_ENTITY_DECODE Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs the following operations:
        ///
        /// * Replaces (ampersand)quot; with "
        ///
        /// * Replaces (ampersand)nbsp; with a non-breaking space, decimal 160
        ///
        /// * Replaces (ampersand)lt; with a "less than" symbol
        ///
        /// * Replaces (ampersand)gt; with >
        ///
        /// * Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding characters
        ///
        /// * Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding characters
        ///
        ///
        /// LOWERCASE Use this option to convert uppercase letters (A-Z) to lowercase (a-z). URL_DECODE Use this option to decode a URL-encoded value. NONE Specify NONE if you don't want to perform any text transformations.
        /// This member is required.
        public var textTransformation: WAFRegionalClientTypes.TextTransformation?

        public init(
            fieldToMatch: WAFRegionalClientTypes.FieldToMatch? = nil,
            regexPatternSetId: Swift.String? = nil,
            textTransformation: WAFRegionalClientTypes.TextTransformation? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.regexPatternSetId = regexPatternSetId
            self.textTransformation = textTransformation
        }
    }

}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. In a [GetRegexMatchSet] request, RegexMatchSet is a complex type that contains the RegexMatchSetId and Name of a RegexMatchSet, and the values that you specified when you updated the RegexMatchSet. The values are contained in a RegexMatchTuple object, which specify the parts of web requests that you want AWS WAF to inspect and the values that you want AWS WAF to search for. If a RegexMatchSet contains more than one RegexMatchTuple object, a request needs to match the settings in only one ByteMatchTuple to be considered a match.
    public struct RegexMatchSet {
        /// A friendly name or description of the [RegexMatchSet]. You can't change Name after you create a RegexMatchSet.
        public var name: Swift.String?
        /// The RegexMatchSetId for a RegexMatchSet. You use RegexMatchSetId to get information about a RegexMatchSet (see [GetRegexMatchSet]), update a RegexMatchSet (see [UpdateRegexMatchSet]), insert a RegexMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a RegexMatchSet from AWS WAF (see [DeleteRegexMatchSet]). RegexMatchSetId is returned by [CreateRegexMatchSet] and by [ListRegexMatchSets].
        public var regexMatchSetId: Swift.String?
        /// Contains an array of [RegexMatchTuple] objects. Each RegexMatchTuple object contains:
        ///
        /// * The part of a web request that you want AWS WAF to inspect, such as a query string or the value of the User-Agent header.
        ///
        /// * The identifier of the pattern (a regular expression) that you want AWS WAF to look for. For more information, see [RegexPatternSet].
        ///
        /// * Whether to perform any conversions on the request, such as converting it to lowercase, before inspecting it for the specified string.
        public var regexMatchTuples: [WAFRegionalClientTypes.RegexMatchTuple]?

        public init(
            name: Swift.String? = nil,
            regexMatchSetId: Swift.String? = nil,
            regexMatchTuples: [WAFRegionalClientTypes.RegexMatchTuple]? = nil
        )
        {
            self.name = name
            self.regexMatchSetId = regexMatchSetId
            self.regexMatchTuples = regexMatchTuples
        }
    }

}

public struct CreateRegexMatchSetOutput {
    /// The ChangeToken that you used to submit the CreateRegexMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// A [RegexMatchSet] that contains no RegexMatchTuple objects.
    public var regexMatchSet: WAFRegionalClientTypes.RegexMatchSet?

    public init(
        changeToken: Swift.String? = nil,
        regexMatchSet: WAFRegionalClientTypes.RegexMatchSet? = nil
    )
    {
        self.changeToken = changeToken
        self.regexMatchSet = regexMatchSet
    }
}

public struct CreateRegexPatternSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description of the [RegexPatternSet]. You can't change Name after you create a RegexPatternSet.
    /// This member is required.
    public var name: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The RegexPatternSet specifies the regular expression (regex) pattern that you want AWS WAF to search for, such as B[a@]dB[o0]t. You can then configure AWS WAF to reject those requests.
    public struct RegexPatternSet {
        /// A friendly name or description of the [RegexPatternSet]. You can't change Name after you create a RegexPatternSet.
        public var name: Swift.String?
        /// The identifier for the RegexPatternSet. You use RegexPatternSetId to get information about a RegexPatternSet, update a RegexPatternSet, remove a RegexPatternSet from a RegexMatchSet, and delete a RegexPatternSet from AWS WAF. RegexMatchSetId is returned by [CreateRegexPatternSet] and by [ListRegexPatternSets].
        /// This member is required.
        public var regexPatternSetId: Swift.String?
        /// Specifies the regular expression (regex) patterns that you want AWS WAF to search for, such as B[a@]dB[o0]t.
        /// This member is required.
        public var regexPatternStrings: [Swift.String]?

        public init(
            name: Swift.String? = nil,
            regexPatternSetId: Swift.String? = nil,
            regexPatternStrings: [Swift.String]? = nil
        )
        {
            self.name = name
            self.regexPatternSetId = regexPatternSetId
            self.regexPatternStrings = regexPatternStrings
        }
    }

}

public struct CreateRegexPatternSetOutput {
    /// The ChangeToken that you used to submit the CreateRegexPatternSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// A [RegexPatternSet] that contains no objects.
    public var regexPatternSet: WAFRegionalClientTypes.RegexPatternSet?

    public init(
        changeToken: Swift.String? = nil,
        regexPatternSet: WAFRegionalClientTypes.RegexPatternSet? = nil
    )
    {
        self.changeToken = changeToken
        self.regexPatternSet = regexPatternSet
    }
}

public struct CreateRuleInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description for the metrics for this Rule. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the Rule.
    /// This member is required.
    public var metricName: Swift.String?
    /// A friendly name or description of the [Rule]. You can't change the name of a Rule after you create it.
    /// This member is required.
    public var name: Swift.String?
    ///
    public var tags: [WAFRegionalClientTypes.Tag]?

    public init(
        changeToken: Swift.String? = nil,
        metricName: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [WAFRegionalClientTypes.Tag]? = nil
    )
    {
        self.changeToken = changeToken
        self.metricName = metricName
        self.name = name
        self.tags = tags
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A combination of [ByteMatchSet], [IPSet], and/or [SqlInjectionMatchSet] objects that identify the web requests that you want to allow, block, or count. For example, you might create a Rule that includes the following predicates:
    ///
    /// * An IPSet that causes AWS WAF to search for web requests that originate from the IP address 192.0.2.44
    ///
    /// * A ByteMatchSet that causes AWS WAF to search for web requests for which the value of the User-Agent header is BadBot.
    ///
    ///
    /// To match the settings in this Rule, a request must originate from 192.0.2.44 AND include a User-Agent header for which the value is BadBot.
    public struct Rule {
        /// A friendly name or description for the metrics for this Rule. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change MetricName after you create the Rule.
        public var metricName: Swift.String?
        /// The friendly name or description for the Rule. You can't change the name of a Rule after you create it.
        public var name: Swift.String?
        /// The Predicates object contains one Predicate element for each [ByteMatchSet], [IPSet], or [SqlInjectionMatchSet] object that you want to include in a Rule.
        /// This member is required.
        public var predicates: [WAFRegionalClientTypes.Predicate]?
        /// A unique identifier for a Rule. You use RuleId to get more information about a Rule (see [GetRule]), update a Rule (see [UpdateRule]), insert a Rule into a WebACL or delete a one from a WebACL (see [UpdateWebACL]), or delete a Rule from AWS WAF (see [DeleteRule]). RuleId is returned by [CreateRule] and by [ListRules].
        /// This member is required.
        public var ruleId: Swift.String?

        public init(
            metricName: Swift.String? = nil,
            name: Swift.String? = nil,
            predicates: [WAFRegionalClientTypes.Predicate]? = nil,
            ruleId: Swift.String? = nil
        )
        {
            self.metricName = metricName
            self.name = name
            self.predicates = predicates
            self.ruleId = ruleId
        }
    }

}

public struct CreateRuleOutput {
    /// The ChangeToken that you used to submit the CreateRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// The [Rule] returned in the CreateRule response.
    public var rule: WAFRegionalClientTypes.Rule?

    public init(
        changeToken: Swift.String? = nil,
        rule: WAFRegionalClientTypes.Rule? = nil
    )
    {
        self.changeToken = changeToken
        self.rule = rule
    }
}

public struct CreateRuleGroupInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description for the metrics for this RuleGroup. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RuleGroup.
    /// This member is required.
    public var metricName: Swift.String?
    /// A friendly name or description of the [RuleGroup]. You can't change Name after you create a RuleGroup.
    /// This member is required.
    public var name: Swift.String?
    ///
    public var tags: [WAFRegionalClientTypes.Tag]?

    public init(
        changeToken: Swift.String? = nil,
        metricName: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [WAFRegionalClientTypes.Tag]? = nil
    )
    {
        self.changeToken = changeToken
        self.metricName = metricName
        self.name = name
        self.tags = tags
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A collection of predefined rules that you can add to a web ACL. Rule groups are subject to the following limits:
    ///
    /// * Three rule groups per account. You can request an increase to this limit by contacting customer support.
    ///
    /// * One rule group per web ACL.
    ///
    /// * Ten rules per rule group.
    public struct RuleGroup {
        /// A friendly name or description for the metrics for this RuleGroup. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RuleGroup.
        public var metricName: Swift.String?
        /// The friendly name or description for the RuleGroup. You can't change the name of a RuleGroup after you create it.
        public var name: Swift.String?
        /// A unique identifier for a RuleGroup. You use RuleGroupId to get more information about a RuleGroup (see [GetRuleGroup]), update a RuleGroup (see [UpdateRuleGroup]), insert a RuleGroup into a WebACL or delete a one from a WebACL (see [UpdateWebACL]), or delete a RuleGroup from AWS WAF (see [DeleteRuleGroup]). RuleGroupId is returned by [CreateRuleGroup] and by [ListRuleGroups].
        /// This member is required.
        public var ruleGroupId: Swift.String?

        public init(
            metricName: Swift.String? = nil,
            name: Swift.String? = nil,
            ruleGroupId: Swift.String? = nil
        )
        {
            self.metricName = metricName
            self.name = name
            self.ruleGroupId = ruleGroupId
        }
    }

}

public struct CreateRuleGroupOutput {
    /// The ChangeToken that you used to submit the CreateRuleGroup request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// An empty [RuleGroup].
    public var ruleGroup: WAFRegionalClientTypes.RuleGroup?

    public init(
        changeToken: Swift.String? = nil,
        ruleGroup: WAFRegionalClientTypes.RuleGroup? = nil
    )
    {
        self.changeToken = changeToken
        self.ruleGroup = ruleGroup
    }
}

public struct CreateSizeConstraintSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description of the [SizeConstraintSet]. You can't change Name after you create a SizeConstraintSet.
    /// This member is required.
    public var name: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

extension WAFRegionalClientTypes {

    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case eq
        case ge
        case gt
        case le
        case lt
        case ne
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .eq,
                .ge,
                .gt,
                .le,
                .lt,
                .ne
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .eq: return "EQ"
            case .ge: return "GE"
            case .gt: return "GT"
            case .le: return "LE"
            case .lt: return "LT"
            case .ne: return "NE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies a constraint on the size of a part of the web request. AWS WAF uses the Size, ComparisonOperator, and FieldToMatch to build an expression in the form of "SizeComparisonOperator size in bytes of FieldToMatch". If that expression is true, the SizeConstraint is considered to match.
    public struct SizeConstraint {
        /// The type of comparison you want AWS WAF to perform. AWS WAF uses this in combination with the provided Size and FieldToMatch to build an expression in the form of "SizeComparisonOperator size in bytes of FieldToMatch". If that expression is true, the SizeConstraint is considered to match. EQ: Used to test if the Size is equal to the size of the FieldToMatch NE: Used to test if the Size is not equal to the size of the FieldToMatch LE: Used to test if the Size is less than or equal to the size of the FieldToMatch LT: Used to test if the Size is strictly less than the size of the FieldToMatch GE: Used to test if the Size is greater than or equal to the size of the FieldToMatch GT: Used to test if the Size is strictly greater than the size of the FieldToMatch
        /// This member is required.
        public var comparisonOperator: WAFRegionalClientTypes.ComparisonOperator?
        /// Specifies where in a web request to look for the size constraint.
        /// This member is required.
        public var fieldToMatch: WAFRegionalClientTypes.FieldToMatch?
        /// The size in bytes that you want AWS WAF to compare against the size of the specified FieldToMatch. AWS WAF uses this in combination with ComparisonOperator and FieldToMatch to build an expression in the form of "SizeComparisonOperator size in bytes of FieldToMatch". If that expression is true, the SizeConstraint is considered to match. Valid values for size are 0 - 21474836480 bytes (0 - 20 GB). If you specify URI for the value of Type, the / in the URI counts as one character. For example, the URI /logo.jpg is nine characters long.
        /// This member is required.
        public var size: Swift.Int
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on FieldToMatch before inspecting it for a match. You can only specify a single type of TextTransformation. Note that if you choose BODY for the value of Type, you must choose NONE for TextTransformation because CloudFront forwards only the first 8192 bytes for inspection. NONE Specify NONE if you don't want to perform any text transformations. CMD_LINE When you're concerned that attackers are injecting an operating system command line command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        ///
        /// * Delete the following characters: \ " ' ^
        ///
        /// * Delete spaces before the following characters: / (
        ///
        /// * Replace the following characters with a space: , ;
        ///
        /// * Replace multiple spaces with one space
        ///
        /// * Convert uppercase letters (A-Z) to lowercase (a-z)
        ///
        ///
        /// COMPRESS_WHITE_SPACE Use this option to replace the following characters with a space character (decimal 32):
        ///
        /// * \f, formfeed, decimal 12
        ///
        /// * \t, tab, decimal 9
        ///
        /// * \n, newline, decimal 10
        ///
        /// * \r, carriage return, decimal 13
        ///
        /// * \v, vertical tab, decimal 11
        ///
        /// * non-breaking space, decimal 160
        ///
        ///
        /// COMPRESS_WHITE_SPACE also replaces multiple spaces with one space. HTML_ENTITY_DECODE Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs the following operations:
        ///
        /// * Replaces (ampersand)quot; with "
        ///
        /// * Replaces (ampersand)nbsp; with a non-breaking space, decimal 160
        ///
        /// * Replaces (ampersand)lt; with a "less than" symbol
        ///
        /// * Replaces (ampersand)gt; with >
        ///
        /// * Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding characters
        ///
        /// * Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding characters
        ///
        ///
        /// LOWERCASE Use this option to convert uppercase letters (A-Z) to lowercase (a-z). URL_DECODE Use this option to decode a URL-encoded value.
        /// This member is required.
        public var textTransformation: WAFRegionalClientTypes.TextTransformation?

        public init(
            comparisonOperator: WAFRegionalClientTypes.ComparisonOperator? = nil,
            fieldToMatch: WAFRegionalClientTypes.FieldToMatch? = nil,
            size: Swift.Int = 0,
            textTransformation: WAFRegionalClientTypes.TextTransformation? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.fieldToMatch = fieldToMatch
            self.size = size
            self.textTransformation = textTransformation
        }
    }

}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A complex type that contains SizeConstraint objects, which specify the parts of web requests that you want AWS WAF to inspect the size of. If a SizeConstraintSet contains more than one SizeConstraint object, a request only needs to match one constraint to be considered a match.
    public struct SizeConstraintSet {
        /// The name, if any, of the SizeConstraintSet.
        public var name: Swift.String?
        /// A unique identifier for a SizeConstraintSet. You use SizeConstraintSetId to get information about a SizeConstraintSet (see [GetSizeConstraintSet]), update a SizeConstraintSet (see [UpdateSizeConstraintSet]), insert a SizeConstraintSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a SizeConstraintSet from AWS WAF (see [DeleteSizeConstraintSet]). SizeConstraintSetId is returned by [CreateSizeConstraintSet] and by [ListSizeConstraintSets].
        /// This member is required.
        public var sizeConstraintSetId: Swift.String?
        /// Specifies the parts of web requests that you want to inspect the size of.
        /// This member is required.
        public var sizeConstraints: [WAFRegionalClientTypes.SizeConstraint]?

        public init(
            name: Swift.String? = nil,
            sizeConstraintSetId: Swift.String? = nil,
            sizeConstraints: [WAFRegionalClientTypes.SizeConstraint]? = nil
        )
        {
            self.name = name
            self.sizeConstraintSetId = sizeConstraintSetId
            self.sizeConstraints = sizeConstraints
        }
    }

}

public struct CreateSizeConstraintSetOutput {
    /// The ChangeToken that you used to submit the CreateSizeConstraintSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// A [SizeConstraintSet] that contains no SizeConstraint objects.
    public var sizeConstraintSet: WAFRegionalClientTypes.SizeConstraintSet?

    public init(
        changeToken: Swift.String? = nil,
        sizeConstraintSet: WAFRegionalClientTypes.SizeConstraintSet? = nil
    )
    {
        self.changeToken = changeToken
        self.sizeConstraintSet = sizeConstraintSet
    }
}

/// A request to create a [SqlInjectionMatchSet].
public struct CreateSqlInjectionMatchSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description for the [SqlInjectionMatchSet] that you're creating. You can't change Name after you create the SqlInjectionMatchSet.
    /// This member is required.
    public var name: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the part of a web request that you want AWS WAF to inspect for snippets of malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.
    public struct SqlInjectionMatchTuple {
        /// Specifies where in a web request to look for snippets of malicious SQL code.
        /// This member is required.
        public var fieldToMatch: WAFRegionalClientTypes.FieldToMatch?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on FieldToMatch before inspecting it for a match. You can only specify a single type of TextTransformation. CMD_LINE When you're concerned that attackers are injecting an operating system command line command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        ///
        /// * Delete the following characters: \ " ' ^
        ///
        /// * Delete spaces before the following characters: / (
        ///
        /// * Replace the following characters with a space: , ;
        ///
        /// * Replace multiple spaces with one space
        ///
        /// * Convert uppercase letters (A-Z) to lowercase (a-z)
        ///
        ///
        /// COMPRESS_WHITE_SPACE Use this option to replace the following characters with a space character (decimal 32):
        ///
        /// * \f, formfeed, decimal 12
        ///
        /// * \t, tab, decimal 9
        ///
        /// * \n, newline, decimal 10
        ///
        /// * \r, carriage return, decimal 13
        ///
        /// * \v, vertical tab, decimal 11
        ///
        /// * non-breaking space, decimal 160
        ///
        ///
        /// COMPRESS_WHITE_SPACE also replaces multiple spaces with one space. HTML_ENTITY_DECODE Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs the following operations:
        ///
        /// * Replaces (ampersand)quot; with "
        ///
        /// * Replaces (ampersand)nbsp; with a non-breaking space, decimal 160
        ///
        /// * Replaces (ampersand)lt; with a "less than" symbol
        ///
        /// * Replaces (ampersand)gt; with >
        ///
        /// * Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding characters
        ///
        /// * Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding characters
        ///
        ///
        /// LOWERCASE Use this option to convert uppercase letters (A-Z) to lowercase (a-z). URL_DECODE Use this option to decode a URL-encoded value. NONE Specify NONE if you don't want to perform any text transformations.
        /// This member is required.
        public var textTransformation: WAFRegionalClientTypes.TextTransformation?

        public init(
            fieldToMatch: WAFRegionalClientTypes.FieldToMatch? = nil,
            textTransformation: WAFRegionalClientTypes.TextTransformation? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.textTransformation = textTransformation
        }
    }

}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A complex type that contains SqlInjectionMatchTuple objects, which specify the parts of web requests that you want AWS WAF to inspect for snippets of malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header. If a SqlInjectionMatchSet contains more than one SqlInjectionMatchTuple object, a request needs to include snippets of SQL code in only one of the specified parts of the request to be considered a match.
    public struct SqlInjectionMatchSet {
        /// The name, if any, of the SqlInjectionMatchSet.
        public var name: Swift.String?
        /// A unique identifier for a SqlInjectionMatchSet. You use SqlInjectionMatchSetId to get information about a SqlInjectionMatchSet (see [GetSqlInjectionMatchSet]), update a SqlInjectionMatchSet (see [UpdateSqlInjectionMatchSet]), insert a SqlInjectionMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a SqlInjectionMatchSet from AWS WAF (see [DeleteSqlInjectionMatchSet]). SqlInjectionMatchSetId is returned by [CreateSqlInjectionMatchSet] and by [ListSqlInjectionMatchSets].
        /// This member is required.
        public var sqlInjectionMatchSetId: Swift.String?
        /// Specifies the parts of web requests that you want to inspect for snippets of malicious SQL code.
        /// This member is required.
        public var sqlInjectionMatchTuples: [WAFRegionalClientTypes.SqlInjectionMatchTuple]?

        public init(
            name: Swift.String? = nil,
            sqlInjectionMatchSetId: Swift.String? = nil,
            sqlInjectionMatchTuples: [WAFRegionalClientTypes.SqlInjectionMatchTuple]? = nil
        )
        {
            self.name = name
            self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
            self.sqlInjectionMatchTuples = sqlInjectionMatchTuples
        }
    }

}

/// The response to a CreateSqlInjectionMatchSet request.
public struct CreateSqlInjectionMatchSetOutput {
    /// The ChangeToken that you used to submit the CreateSqlInjectionMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// A [SqlInjectionMatchSet].
    public var sqlInjectionMatchSet: WAFRegionalClientTypes.SqlInjectionMatchSet?

    public init(
        changeToken: Swift.String? = nil,
        sqlInjectionMatchSet: WAFRegionalClientTypes.SqlInjectionMatchSet? = nil
    )
    {
        self.changeToken = changeToken
        self.sqlInjectionMatchSet = sqlInjectionMatchSet
    }
}

public struct CreateWebACLInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The action that you want AWS WAF to take when a request doesn't match the criteria specified in any of the Rule objects that are associated with the WebACL.
    /// This member is required.
    public var defaultAction: WAFRegionalClientTypes.WafAction?
    /// A friendly name or description for the metrics for this WebACL.The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change MetricName after you create the WebACL.
    /// This member is required.
    public var metricName: Swift.String?
    /// A friendly name or description of the [WebACL]. You can't change Name after you create the WebACL.
    /// This member is required.
    public var name: Swift.String?
    ///
    public var tags: [WAFRegionalClientTypes.Tag]?

    public init(
        changeToken: Swift.String? = nil,
        defaultAction: WAFRegionalClientTypes.WafAction? = nil,
        metricName: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [WAFRegionalClientTypes.Tag]? = nil
    )
    {
        self.changeToken = changeToken
        self.defaultAction = defaultAction
        self.metricName = metricName
        self.name = name
        self.tags = tags
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains the Rules that identify the requests that you want to allow, block, or count. In a WebACL, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a WebACL, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the WebACL with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a WebACL, a request needs to match only one of the specifications to be allowed, blocked, or counted. For more information, see [UpdateWebACL].
    public struct WebACL {
        /// The action to perform if none of the Rules contained in the WebACL match. The action is specified by the [WafAction] object.
        /// This member is required.
        public var defaultAction: WAFRegionalClientTypes.WafAction?
        /// A friendly name or description for the metrics for this WebACL. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change MetricName after you create the WebACL.
        public var metricName: Swift.String?
        /// A friendly name or description of the WebACL. You can't change the name of a WebACL after you create it.
        public var name: Swift.String?
        /// An array that contains the action for each Rule in a WebACL, the priority of the Rule, and the ID of the Rule.
        /// This member is required.
        public var rules: [WAFRegionalClientTypes.ActivatedRule]?
        /// Tha Amazon Resource Name (ARN) of the web ACL.
        public var webACLArn: Swift.String?
        /// A unique identifier for a WebACL. You use WebACLId to get information about a WebACL (see [GetWebACL]), update a WebACL (see [UpdateWebACL]), and delete a WebACL from AWS WAF (see [DeleteWebACL]). WebACLId is returned by [CreateWebACL] and by [ListWebACLs].
        /// This member is required.
        public var webACLId: Swift.String?

        public init(
            defaultAction: WAFRegionalClientTypes.WafAction? = nil,
            metricName: Swift.String? = nil,
            name: Swift.String? = nil,
            rules: [WAFRegionalClientTypes.ActivatedRule]? = nil,
            webACLArn: Swift.String? = nil,
            webACLId: Swift.String? = nil
        )
        {
            self.defaultAction = defaultAction
            self.metricName = metricName
            self.name = name
            self.rules = rules
            self.webACLArn = webACLArn
            self.webACLId = webACLId
        }
    }

}

public struct CreateWebACLOutput {
    /// The ChangeToken that you used to submit the CreateWebACL request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// The [WebACL] returned in the CreateWebACL response.
    public var webACL: WAFRegionalClientTypes.WebACL?

    public init(
        changeToken: Swift.String? = nil,
        webACL: WAFRegionalClientTypes.WebACL? = nil
    )
    {
        self.changeToken = changeToken
        self.webACL = webACL
    }
}

extension WAFRegionalClientTypes {

    public enum MigrationErrorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case entityNotFound
        case entityNotSupported
        case s3BucketInvalidRegion
        case s3BucketNotAccessible
        case s3BucketNotFound
        case s3BucketNoPermission
        case s3InternalError
        case sdkUnknown(Swift.String)

        public static var allCases: [MigrationErrorType] {
            return [
                .entityNotFound,
                .entityNotSupported,
                .s3BucketInvalidRegion,
                .s3BucketNotAccessible,
                .s3BucketNotFound,
                .s3BucketNoPermission,
                .s3InternalError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .entityNotFound: return "ENTITY_NOT_FOUND"
            case .entityNotSupported: return "ENTITY_NOT_SUPPORTED"
            case .s3BucketInvalidRegion: return "S3_BUCKET_INVALID_REGION"
            case .s3BucketNotAccessible: return "S3_BUCKET_NOT_ACCESSIBLE"
            case .s3BucketNotFound: return "S3_BUCKET_NOT_FOUND"
            case .s3BucketNoPermission: return "S3_BUCKET_NO_PERMISSION"
            case .s3InternalError: return "S3_INTERNAL_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The operation failed due to a problem with the migration. The failure cause is provided in the exception, in the MigrationErrorType:
///
/// * ENTITY_NOT_SUPPORTED - The web ACL has an unsupported entity but the IgnoreUnsupportedType is not set to true.
///
/// * ENTITY_NOT_FOUND - The web ACL doesn't exist.
///
/// * S3_BUCKET_NO_PERMISSION - You don't have permission to perform the PutObject action to the specified Amazon S3 bucket.
///
/// * S3_BUCKET_NOT_ACCESSIBLE - The bucket policy doesn't allow AWS WAF to perform the PutObject action in the bucket.
///
/// * S3_BUCKET_NOT_FOUND - The S3 bucket doesn't exist.
///
/// * S3_BUCKET_INVALID_REGION - The S3 bucket is not in the same Region as the web ACL.
///
/// * S3_INTERNAL_ERROR - AWS WAF failed to create the template in the S3 bucket for another reason.
public struct WAFEntityMigrationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var migrationErrorReason: Swift.String? = nil
        public internal(set) var migrationErrorType: WAFRegionalClientTypes.MigrationErrorType? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFEntityMigrationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        migrationErrorReason: Swift.String? = nil,
        migrationErrorType: WAFRegionalClientTypes.MigrationErrorType? = nil
    )
    {
        self.properties.message = message
        self.properties.migrationErrorReason = migrationErrorReason
        self.properties.migrationErrorType = migrationErrorType
    }
}

/// The operation failed because there was nothing to do. For example:
///
/// * You tried to remove a Rule from a WebACL, but the Rule isn't in the specified WebACL.
///
/// * You tried to remove an IP address from an IPSet, but the IP address isn't in the specified IPSet.
///
/// * You tried to remove a ByteMatchTuple from a ByteMatchSet, but the ByteMatchTuple isn't in the specified WebACL.
///
/// * You tried to add a Rule to a WebACL, but the Rule already exists in the specified WebACL.
///
/// * You tried to add a ByteMatchTuple to a ByteMatchSet, but the ByteMatchTuple already exists in the specified WebACL.
public struct WAFInvalidOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFInvalidOperationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateWebACLMigrationStackInput {
    /// Indicates whether to exclude entities that can't be migrated or to stop the migration. Set this to true to ignore unsupported entities in the web ACL during the migration. Otherwise, if AWS WAF encounters unsupported entities, it stops the process and throws an exception.
    /// This member is required.
    public var ignoreUnsupportedType: Swift.Bool?
    /// The name of the Amazon S3 bucket to store the CloudFormation template in. The S3 bucket must be configured as follows for the migration:
    ///
    /// * The bucket name must start with aws-waf-migration-. For example, aws-waf-migration-my-web-acl.
    ///
    /// * The bucket must be in the Region where you are deploying the template. For example, for a web ACL in us-west-2, you must use an Amazon S3 bucket in us-west-2 and you must deploy the template stack to us-west-2.
    ///
    /// * The bucket policies must permit the migration process to write data. For listings of the bucket policies, see the Examples section.
    /// This member is required.
    public var s3BucketName: Swift.String?
    /// The UUID of the WAF Classic web ACL that you want to migrate to WAF v2.
    /// This member is required.
    public var webACLId: Swift.String?

    public init(
        ignoreUnsupportedType: Swift.Bool? = nil,
        s3BucketName: Swift.String? = nil,
        webACLId: Swift.String? = nil
    )
    {
        self.ignoreUnsupportedType = ignoreUnsupportedType
        self.s3BucketName = s3BucketName
        self.webACLId = webACLId
    }
}

public struct CreateWebACLMigrationStackOutput {
    /// The URL of the template created in Amazon S3.
    /// This member is required.
    public var s3ObjectUrl: Swift.String?

    public init(
        s3ObjectUrl: Swift.String? = nil
    )
    {
        self.s3ObjectUrl = s3ObjectUrl
    }
}

/// A request to create an [XssMatchSet].
public struct CreateXssMatchSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A friendly name or description for the [XssMatchSet] that you're creating. You can't change Name after you create the XssMatchSet.
    /// This member is required.
    public var name: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.name = name
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the part of a web request that you want AWS WAF to inspect for cross-site scripting attacks and, if you want AWS WAF to inspect a header, the name of the header.
    public struct XssMatchTuple {
        /// Specifies where in a web request to look for cross-site scripting attacks.
        /// This member is required.
        public var fieldToMatch: WAFRegionalClientTypes.FieldToMatch?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF. If you specify a transformation, AWS WAF performs the transformation on FieldToMatch before inspecting it for a match. You can only specify a single type of TextTransformation. CMD_LINE When you're concerned that attackers are injecting an operating system command line command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        ///
        /// * Delete the following characters: \ " ' ^
        ///
        /// * Delete spaces before the following characters: / (
        ///
        /// * Replace the following characters with a space: , ;
        ///
        /// * Replace multiple spaces with one space
        ///
        /// * Convert uppercase letters (A-Z) to lowercase (a-z)
        ///
        ///
        /// COMPRESS_WHITE_SPACE Use this option to replace the following characters with a space character (decimal 32):
        ///
        /// * \f, formfeed, decimal 12
        ///
        /// * \t, tab, decimal 9
        ///
        /// * \n, newline, decimal 10
        ///
        /// * \r, carriage return, decimal 13
        ///
        /// * \v, vertical tab, decimal 11
        ///
        /// * non-breaking space, decimal 160
        ///
        ///
        /// COMPRESS_WHITE_SPACE also replaces multiple spaces with one space. HTML_ENTITY_DECODE Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs the following operations:
        ///
        /// * Replaces (ampersand)quot; with "
        ///
        /// * Replaces (ampersand)nbsp; with a non-breaking space, decimal 160
        ///
        /// * Replaces (ampersand)lt; with a "less than" symbol
        ///
        /// * Replaces (ampersand)gt; with >
        ///
        /// * Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding characters
        ///
        /// * Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding characters
        ///
        ///
        /// LOWERCASE Use this option to convert uppercase letters (A-Z) to lowercase (a-z). URL_DECODE Use this option to decode a URL-encoded value. NONE Specify NONE if you don't want to perform any text transformations.
        /// This member is required.
        public var textTransformation: WAFRegionalClientTypes.TextTransformation?

        public init(
            fieldToMatch: WAFRegionalClientTypes.FieldToMatch? = nil,
            textTransformation: WAFRegionalClientTypes.TextTransformation? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.textTransformation = textTransformation
        }
    }

}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A complex type that contains XssMatchTuple objects, which specify the parts of web requests that you want AWS WAF to inspect for cross-site scripting attacks and, if you want AWS WAF to inspect a header, the name of the header. If a XssMatchSet contains more than one XssMatchTuple object, a request needs to include cross-site scripting attacks in only one of the specified parts of the request to be considered a match.
    public struct XssMatchSet {
        /// The name, if any, of the XssMatchSet.
        public var name: Swift.String?
        /// A unique identifier for an XssMatchSet. You use XssMatchSetId to get information about an XssMatchSet (see [GetXssMatchSet]), update an XssMatchSet (see [UpdateXssMatchSet]), insert an XssMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete an XssMatchSet from AWS WAF (see [DeleteXssMatchSet]). XssMatchSetId is returned by [CreateXssMatchSet] and by [ListXssMatchSets].
        /// This member is required.
        public var xssMatchSetId: Swift.String?
        /// Specifies the parts of web requests that you want to inspect for cross-site scripting attacks.
        /// This member is required.
        public var xssMatchTuples: [WAFRegionalClientTypes.XssMatchTuple]?

        public init(
            name: Swift.String? = nil,
            xssMatchSetId: Swift.String? = nil,
            xssMatchTuples: [WAFRegionalClientTypes.XssMatchTuple]? = nil
        )
        {
            self.name = name
            self.xssMatchSetId = xssMatchSetId
            self.xssMatchTuples = xssMatchTuples
        }
    }

}

/// The response to a CreateXssMatchSet request.
public struct CreateXssMatchSetOutput {
    /// The ChangeToken that you used to submit the CreateXssMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?
    /// An [XssMatchSet].
    public var xssMatchSet: WAFRegionalClientTypes.XssMatchSet?

    public init(
        changeToken: Swift.String? = nil,
        xssMatchSet: WAFRegionalClientTypes.XssMatchSet? = nil
    )
    {
        self.changeToken = changeToken
        self.xssMatchSet = xssMatchSet
    }
}

/// The operation failed because you tried to delete an object that isn't empty. For example:
///
/// * You tried to delete a WebACL that still contains one or more Rule objects.
///
/// * You tried to delete a Rule that still contains one or more ByteMatchSet objects or other predicates.
///
/// * You tried to delete a ByteMatchSet that contains one or more ByteMatchTuple objects.
///
/// * You tried to delete an IPSet that references one or more IP addresses.
public struct WAFNonEmptyEntityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFNonEmptyEntityException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because you tried to delete an object that is still in use. For example:
///
/// * You tried to delete a ByteMatchSet that is still referenced by a Rule.
///
/// * You tried to delete a Rule that is still referenced by a WebACL.
public struct WAFReferencedItemException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFReferencedItemException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteByteMatchSetInput {
    /// The ByteMatchSetId of the [ByteMatchSet] that you want to delete. ByteMatchSetId is returned by [CreateByteMatchSet] and by [ListByteMatchSets].
    /// This member is required.
    public var byteMatchSetId: Swift.String?
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?

    public init(
        byteMatchSetId: Swift.String? = nil,
        changeToken: Swift.String? = nil
    )
    {
        self.byteMatchSetId = byteMatchSetId
        self.changeToken = changeToken
    }
}

public struct DeleteByteMatchSetOutput {
    /// The ChangeToken that you used to submit the DeleteByteMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

public struct DeleteGeoMatchSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The GeoMatchSetID of the [GeoMatchSet] that you want to delete. GeoMatchSetId is returned by [CreateGeoMatchSet] and by [ListGeoMatchSets].
    /// This member is required.
    public var geoMatchSetId: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        geoMatchSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.geoMatchSetId = geoMatchSetId
    }
}

public struct DeleteGeoMatchSetOutput {
    /// The ChangeToken that you used to submit the DeleteGeoMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

public struct DeleteIPSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The IPSetId of the [IPSet] that you want to delete. IPSetId is returned by [CreateIPSet] and by [ListIPSets].
    /// This member is required.
    public var ipSetId: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        ipSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.ipSetId = ipSetId
    }
}

public struct DeleteIPSetOutput {
    /// The ChangeToken that you used to submit the DeleteIPSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

public struct DeleteLoggingConfigurationInput {
    /// The Amazon Resource Name (ARN) of the web ACL from which you want to delete the [LoggingConfiguration].
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct DeleteLoggingConfigurationOutput {

    public init() { }
}

public struct DeletePermissionPolicyInput {
    /// The Amazon Resource Name (ARN) of the RuleGroup from which you want to delete the policy. The user making the request must be the owner of the RuleGroup.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct DeletePermissionPolicyOutput {

    public init() { }
}

public struct DeleteRateBasedRuleInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RuleId of the [RateBasedRule] that you want to delete. RuleId is returned by [CreateRateBasedRule] and by [ListRateBasedRules].
    /// This member is required.
    public var ruleId: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        ruleId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.ruleId = ruleId
    }
}

public struct DeleteRateBasedRuleOutput {
    /// The ChangeToken that you used to submit the DeleteRateBasedRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

public struct DeleteRegexMatchSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RegexMatchSetId of the [RegexMatchSet] that you want to delete. RegexMatchSetId is returned by [CreateRegexMatchSet] and by [ListRegexMatchSets].
    /// This member is required.
    public var regexMatchSetId: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        regexMatchSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.regexMatchSetId = regexMatchSetId
    }
}

public struct DeleteRegexMatchSetOutput {
    /// The ChangeToken that you used to submit the DeleteRegexMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

public struct DeleteRegexPatternSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RegexPatternSetId of the [RegexPatternSet] that you want to delete. RegexPatternSetId is returned by [CreateRegexPatternSet] and by [ListRegexPatternSets].
    /// This member is required.
    public var regexPatternSetId: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        regexPatternSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.regexPatternSetId = regexPatternSetId
    }
}

public struct DeleteRegexPatternSetOutput {
    /// The ChangeToken that you used to submit the DeleteRegexPatternSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

public struct DeleteRuleInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RuleId of the [Rule] that you want to delete. RuleId is returned by [CreateRule] and by [ListRules].
    /// This member is required.
    public var ruleId: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        ruleId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.ruleId = ruleId
    }
}

public struct DeleteRuleOutput {
    /// The ChangeToken that you used to submit the DeleteRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

public struct DeleteRuleGroupInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RuleGroupId of the [RuleGroup] that you want to delete. RuleGroupId is returned by [CreateRuleGroup] and by [ListRuleGroups].
    /// This member is required.
    public var ruleGroupId: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        ruleGroupId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.ruleGroupId = ruleGroupId
    }
}

public struct DeleteRuleGroupOutput {
    /// The ChangeToken that you used to submit the DeleteRuleGroup request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

public struct DeleteSizeConstraintSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The SizeConstraintSetId of the [SizeConstraintSet] that you want to delete. SizeConstraintSetId is returned by [CreateSizeConstraintSet] and by [ListSizeConstraintSets].
    /// This member is required.
    public var sizeConstraintSetId: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        sizeConstraintSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.sizeConstraintSetId = sizeConstraintSetId
    }
}

public struct DeleteSizeConstraintSetOutput {
    /// The ChangeToken that you used to submit the DeleteSizeConstraintSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

/// A request to delete a [SqlInjectionMatchSet] from AWS WAF.
public struct DeleteSqlInjectionMatchSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The SqlInjectionMatchSetId of the [SqlInjectionMatchSet] that you want to delete. SqlInjectionMatchSetId is returned by [CreateSqlInjectionMatchSet] and by [ListSqlInjectionMatchSets].
    /// This member is required.
    public var sqlInjectionMatchSetId: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        sqlInjectionMatchSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
    }
}

/// The response to a request to delete a [SqlInjectionMatchSet] from AWS WAF.
public struct DeleteSqlInjectionMatchSetOutput {
    /// The ChangeToken that you used to submit the DeleteSqlInjectionMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

public struct DeleteWebACLInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The WebACLId of the [WebACL] that you want to delete. WebACLId is returned by [CreateWebACL] and by [ListWebACLs].
    /// This member is required.
    public var webACLId: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        webACLId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.webACLId = webACLId
    }
}

public struct DeleteWebACLOutput {
    /// The ChangeToken that you used to submit the DeleteWebACL request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

/// A request to delete an [XssMatchSet] from AWS WAF.
public struct DeleteXssMatchSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The XssMatchSetId of the [XssMatchSet] that you want to delete. XssMatchSetId is returned by [CreateXssMatchSet] and by [ListXssMatchSets].
    /// This member is required.
    public var xssMatchSetId: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        xssMatchSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.xssMatchSetId = xssMatchSetId
    }
}

/// The response to a request to delete an [XssMatchSet] from AWS WAF.
public struct DeleteXssMatchSetOutput {
    /// The ChangeToken that you used to submit the DeleteXssMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

public struct DisassociateWebACLInput {
    /// The ARN (Amazon Resource Name) of the resource from which the web ACL is being removed, either an application load balancer or Amazon API Gateway stage. The ARN should be in one of the following formats:
    ///
    /// * For an Application Load Balancer: arn:aws:elasticloadbalancing:region:account-id:loadbalancer/app/load-balancer-name/load-balancer-id
    ///
    /// * For an Amazon API Gateway stage: arn:aws:apigateway:region::/restapis/api-id/stages/stage-name
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct DisassociateWebACLOutput {

    public init() { }
}

public struct GetByteMatchSetInput {
    /// The ByteMatchSetId of the [ByteMatchSet] that you want to get. ByteMatchSetId is returned by [CreateByteMatchSet] and by [ListByteMatchSets].
    /// This member is required.
    public var byteMatchSetId: Swift.String?

    public init(
        byteMatchSetId: Swift.String? = nil
    )
    {
        self.byteMatchSetId = byteMatchSetId
    }
}

public struct GetByteMatchSetOutput {
    /// Information about the [ByteMatchSet] that you specified in the GetByteMatchSet request. For more information, see the following topics:
    ///
    /// * [ByteMatchSet]: Contains ByteMatchSetId, ByteMatchTuples, and Name
    ///
    /// * ByteMatchTuples: Contains an array of [ByteMatchTuple] objects. Each ByteMatchTuple object contains [FieldToMatch], PositionalConstraint, TargetString, and TextTransformation
    ///
    /// * [FieldToMatch]: Contains Data and Type
    public var byteMatchSet: WAFRegionalClientTypes.ByteMatchSet?

    public init(
        byteMatchSet: WAFRegionalClientTypes.ByteMatchSet? = nil
    )
    {
        self.byteMatchSet = byteMatchSet
    }
}

public struct GetChangeTokenInput {

    public init() { }
}

public struct GetChangeTokenOutput {
    /// The ChangeToken that you used in the request. Use this value in a GetChangeTokenStatus request to get the current status of the request.
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

public struct GetChangeTokenStatusInput {
    /// The change token for which you want to get the status. This change token was previously returned in the GetChangeToken response.
    /// This member is required.
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

extension WAFRegionalClientTypes {

    public enum ChangeTokenStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case insync
        case pending
        case provisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeTokenStatus] {
            return [
                .insync,
                .pending,
                .provisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .insync: return "INSYNC"
            case .pending: return "PENDING"
            case .provisioned: return "PROVISIONED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetChangeTokenStatusOutput {
    /// The status of the change token.
    public var changeTokenStatus: WAFRegionalClientTypes.ChangeTokenStatus?

    public init(
        changeTokenStatus: WAFRegionalClientTypes.ChangeTokenStatus? = nil
    )
    {
        self.changeTokenStatus = changeTokenStatus
    }
}

public struct GetGeoMatchSetInput {
    /// The GeoMatchSetId of the [GeoMatchSet] that you want to get. GeoMatchSetId is returned by [CreateGeoMatchSet] and by [ListGeoMatchSets].
    /// This member is required.
    public var geoMatchSetId: Swift.String?

    public init(
        geoMatchSetId: Swift.String? = nil
    )
    {
        self.geoMatchSetId = geoMatchSetId
    }
}

public struct GetGeoMatchSetOutput {
    /// Information about the [GeoMatchSet] that you specified in the GetGeoMatchSet request. This includes the Type, which for a GeoMatchContraint is always Country, as well as the Value, which is the identifier for a specific country.
    public var geoMatchSet: WAFRegionalClientTypes.GeoMatchSet?

    public init(
        geoMatchSet: WAFRegionalClientTypes.GeoMatchSet? = nil
    )
    {
        self.geoMatchSet = geoMatchSet
    }
}

public struct GetIPSetInput {
    /// The IPSetId of the [IPSet] that you want to get. IPSetId is returned by [CreateIPSet] and by [ListIPSets].
    /// This member is required.
    public var ipSetId: Swift.String?

    public init(
        ipSetId: Swift.String? = nil
    )
    {
        self.ipSetId = ipSetId
    }
}

public struct GetIPSetOutput {
    /// Information about the [IPSet] that you specified in the GetIPSet request. For more information, see the following topics:
    ///
    /// * [IPSet]: Contains IPSetDescriptors, IPSetId, and Name
    ///
    /// * IPSetDescriptors: Contains an array of [IPSetDescriptor] objects. Each IPSetDescriptor object contains Type and Value
    public var ipSet: WAFRegionalClientTypes.IPSet?

    public init(
        ipSet: WAFRegionalClientTypes.IPSet? = nil
    )
    {
        self.ipSet = ipSet
    }
}

public struct GetLoggingConfigurationInput {
    /// The Amazon Resource Name (ARN) of the web ACL for which you want to get the [LoggingConfiguration].
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The Amazon Kinesis Data Firehose, RedactedFields information, and the web ACL Amazon Resource Name (ARN).
    public struct LoggingConfiguration {
        /// An array of Amazon Kinesis Data Firehose ARNs.
        /// This member is required.
        public var logDestinationConfigs: [Swift.String]?
        /// The parts of the request that you want redacted from the logs. For example, if you redact the cookie field, the cookie field in the firehose will be xxx.
        public var redactedFields: [WAFRegionalClientTypes.FieldToMatch]?
        /// The Amazon Resource Name (ARN) of the web ACL that you want to associate with LogDestinationConfigs.
        /// This member is required.
        public var resourceArn: Swift.String?

        public init(
            logDestinationConfigs: [Swift.String]? = nil,
            redactedFields: [WAFRegionalClientTypes.FieldToMatch]? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.logDestinationConfigs = logDestinationConfigs
            self.redactedFields = redactedFields
            self.resourceArn = resourceArn
        }
    }

}

public struct GetLoggingConfigurationOutput {
    /// The [LoggingConfiguration] for the specified web ACL.
    public var loggingConfiguration: WAFRegionalClientTypes.LoggingConfiguration?

    public init(
        loggingConfiguration: WAFRegionalClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

public struct GetPermissionPolicyInput {
    /// The Amazon Resource Name (ARN) of the RuleGroup for which you want to get the policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct GetPermissionPolicyOutput {
    /// The IAM policy attached to the specified RuleGroup.
    public var policy: Swift.String?

    public init(
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

public struct GetRateBasedRuleInput {
    /// The RuleId of the [RateBasedRule] that you want to get. RuleId is returned by [CreateRateBasedRule] and by [ListRateBasedRules].
    /// This member is required.
    public var ruleId: Swift.String?

    public init(
        ruleId: Swift.String? = nil
    )
    {
        self.ruleId = ruleId
    }
}

public struct GetRateBasedRuleOutput {
    /// Information about the [RateBasedRule] that you specified in the GetRateBasedRule request.
    public var rule: WAFRegionalClientTypes.RateBasedRule?

    public init(
        rule: WAFRegionalClientTypes.RateBasedRule? = nil
    )
    {
        self.rule = rule
    }
}

public struct GetRateBasedRuleManagedKeysInput {
    /// A null value and not currently used. Do not include this in your request.
    public var nextMarker: Swift.String?
    /// The RuleId of the [RateBasedRule] for which you want to get a list of ManagedKeys. RuleId is returned by [CreateRateBasedRule] and by [ListRateBasedRules].
    /// This member is required.
    public var ruleId: Swift.String?

    public init(
        nextMarker: Swift.String? = nil,
        ruleId: Swift.String? = nil
    )
    {
        self.nextMarker = nextMarker
        self.ruleId = ruleId
    }
}

public struct GetRateBasedRuleManagedKeysOutput {
    /// An array of IP addresses that currently are blocked by the specified [RateBasedRule].
    public var managedKeys: [Swift.String]?
    /// A null value and not currently used.
    public var nextMarker: Swift.String?

    public init(
        managedKeys: [Swift.String]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.managedKeys = managedKeys
        self.nextMarker = nextMarker
    }
}

public struct GetRegexMatchSetInput {
    /// The RegexMatchSetId of the [RegexMatchSet] that you want to get. RegexMatchSetId is returned by [CreateRegexMatchSet] and by [ListRegexMatchSets].
    /// This member is required.
    public var regexMatchSetId: Swift.String?

    public init(
        regexMatchSetId: Swift.String? = nil
    )
    {
        self.regexMatchSetId = regexMatchSetId
    }
}

public struct GetRegexMatchSetOutput {
    /// Information about the [RegexMatchSet] that you specified in the GetRegexMatchSet request. For more information, see [RegexMatchTuple].
    public var regexMatchSet: WAFRegionalClientTypes.RegexMatchSet?

    public init(
        regexMatchSet: WAFRegionalClientTypes.RegexMatchSet? = nil
    )
    {
        self.regexMatchSet = regexMatchSet
    }
}

public struct GetRegexPatternSetInput {
    /// The RegexPatternSetId of the [RegexPatternSet] that you want to get. RegexPatternSetId is returned by [CreateRegexPatternSet] and by [ListRegexPatternSets].
    /// This member is required.
    public var regexPatternSetId: Swift.String?

    public init(
        regexPatternSetId: Swift.String? = nil
    )
    {
        self.regexPatternSetId = regexPatternSetId
    }
}

public struct GetRegexPatternSetOutput {
    /// Information about the [RegexPatternSet] that you specified in the GetRegexPatternSet request, including the identifier of the pattern set and the regular expression patterns you want AWS WAF to search for.
    public var regexPatternSet: WAFRegionalClientTypes.RegexPatternSet?

    public init(
        regexPatternSet: WAFRegionalClientTypes.RegexPatternSet? = nil
    )
    {
        self.regexPatternSet = regexPatternSet
    }
}

public struct GetRuleInput {
    /// The RuleId of the [Rule] that you want to get. RuleId is returned by [CreateRule] and by [ListRules].
    /// This member is required.
    public var ruleId: Swift.String?

    public init(
        ruleId: Swift.String? = nil
    )
    {
        self.ruleId = ruleId
    }
}

public struct GetRuleOutput {
    /// Information about the [Rule] that you specified in the GetRule request. For more information, see the following topics:
    ///
    /// * [Rule]: Contains MetricName, Name, an array of Predicate objects, and RuleId
    ///
    /// * [Predicate]: Each Predicate object contains DataId, Negated, and Type
    public var rule: WAFRegionalClientTypes.Rule?

    public init(
        rule: WAFRegionalClientTypes.Rule? = nil
    )
    {
        self.rule = rule
    }
}

public struct GetRuleGroupInput {
    /// The RuleGroupId of the [RuleGroup] that you want to get. RuleGroupId is returned by [CreateRuleGroup] and by [ListRuleGroups].
    /// This member is required.
    public var ruleGroupId: Swift.String?

    public init(
        ruleGroupId: Swift.String? = nil
    )
    {
        self.ruleGroupId = ruleGroupId
    }
}

public struct GetRuleGroupOutput {
    /// Information about the [RuleGroup] that you specified in the GetRuleGroup request.
    public var ruleGroup: WAFRegionalClientTypes.RuleGroup?

    public init(
        ruleGroup: WAFRegionalClientTypes.RuleGroup? = nil
    )
    {
        self.ruleGroup = ruleGroup
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. In a [GetSampledRequests] request, the StartTime and EndTime objects specify the time range for which you want AWS WAF to return a sample of web requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". In a [GetSampledRequests] response, the StartTime and EndTime objects specify the time range for which AWS WAF actually returned a sample of web requests. AWS WAF gets the specified number of requests from among the first 5,000 requests that your AWS resource receives during the specified time period. If your resource receives more than 5,000 requests during that period, AWS WAF stops sampling after the 5,000th request. In that case, EndTime is the time that AWS WAF received the 5,000th request.
    public struct TimeWindow {
        /// The end of the time range from which you want GetSampledRequests to return a sample of the requests that your AWS resource received. You must specify the date and time in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours.
        /// This member is required.
        public var endTime: Foundation.Date?
        /// The beginning of the time range from which you want GetSampledRequests to return a sample of the requests that your AWS resource received. You must specify the date and time in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours.
        /// This member is required.
        public var startTime: Foundation.Date?

        public init(
            endTime: Foundation.Date? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

public struct GetSampledRequestsInput {
    /// The number of requests that you want AWS WAF to return from among the first 5,000 requests that your AWS resource received during the time range. If your resource received fewer requests than the value of MaxItems, GetSampledRequests returns information about all of them.
    /// This member is required.
    public var maxItems: Swift.Int?
    /// RuleId is one of three values:
    ///
    /// * The RuleId of the Rule or the RuleGroupId of the RuleGroup for which you want GetSampledRequests to return a sample of requests.
    ///
    /// * Default_Action, which causes GetSampledRequests to return a sample of the requests that didn't match any of the rules in the specified WebACL.
    /// This member is required.
    public var ruleId: Swift.String?
    /// The start date and time and the end date and time of the range for which you want GetSampledRequests to return a sample of requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours.
    /// This member is required.
    public var timeWindow: WAFRegionalClientTypes.TimeWindow?
    /// The WebACLId of the WebACL for which you want GetSampledRequests to return a sample of requests.
    /// This member is required.
    public var webAclId: Swift.String?

    public init(
        maxItems: Swift.Int? = nil,
        ruleId: Swift.String? = nil,
        timeWindow: WAFRegionalClientTypes.TimeWindow? = nil,
        webAclId: Swift.String? = nil
    )
    {
        self.maxItems = maxItems
        self.ruleId = ruleId
        self.timeWindow = timeWindow
        self.webAclId = webAclId
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The response from a [GetSampledRequests] request includes an HTTPHeader complex type that appears as Headers in the response syntax. HTTPHeader contains the names and values of all of the headers that appear in one of the web requests that were returned by GetSampledRequests.
    public struct HTTPHeader {
        /// The name of one of the headers in the sampled web request.
        public var name: Swift.String?
        /// The value of one of the headers in the sampled web request.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The response from a [GetSampledRequests] request includes an HTTPRequest complex type that appears as Request in the response syntax. HTTPRequest contains information about one of the web requests that were returned by GetSampledRequests.
    public struct HTTPRequest {
        /// The IP address that the request originated from. If the WebACL is associated with a CloudFront distribution, this is the value of one of the following fields in CloudFront access logs:
        ///
        /// * c-ip, if the viewer did not use an HTTP proxy or a load balancer to send the request
        ///
        /// * x-forwarded-for, if the viewer did use an HTTP proxy or a load balancer to send the request
        public var clientIP: Swift.String?
        /// The two-letter country code for the country that the request originated from. For a current list of country codes, see the Wikipedia entry [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
        public var country: Swift.String?
        /// A complex type that contains two values for each header in the sampled web request: the name of the header and the value of the header.
        public var headers: [WAFRegionalClientTypes.HTTPHeader]?
        /// The HTTP version specified in the sampled web request, for example, HTTP/1.1.
        public var httpVersion: Swift.String?
        /// The HTTP method specified in the sampled web request. CloudFront supports the following methods: DELETE, GET, HEAD, OPTIONS, PATCH, POST, and PUT.
        public var method: Swift.String?
        /// The part of a web request that identifies the resource, for example, /images/daily-ad.jpg.
        public var uri: Swift.String?

        public init(
            clientIP: Swift.String? = nil,
            country: Swift.String? = nil,
            headers: [WAFRegionalClientTypes.HTTPHeader]? = nil,
            httpVersion: Swift.String? = nil,
            method: Swift.String? = nil,
            uri: Swift.String? = nil
        )
        {
            self.clientIP = clientIP
            self.country = country
            self.headers = headers
            self.httpVersion = httpVersion
            self.method = method
            self.uri = uri
        }
    }

}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The response from a [GetSampledRequests] request includes a SampledHTTPRequests complex type that appears as SampledRequests in the response syntax. SampledHTTPRequests contains one SampledHTTPRequest object for each web request that is returned by GetSampledRequests.
    public struct SampledHTTPRequest {
        /// The action for the Rule that the request matched: ALLOW, BLOCK, or COUNT.
        public var action: Swift.String?
        /// A complex type that contains detailed information about the request.
        /// This member is required.
        public var request: WAFRegionalClientTypes.HTTPRequest?
        /// This value is returned if the GetSampledRequests request specifies the ID of a RuleGroup rather than the ID of an individual rule. RuleWithinRuleGroup is the rule within the specified RuleGroup that matched the request listed in the response.
        public var ruleWithinRuleGroup: Swift.String?
        /// The time at which AWS WAF received the request from your AWS resource, in Unix time format (in seconds).
        public var timestamp: Foundation.Date?
        /// A value that indicates how one result in the response relates proportionally to other results in the response. A result that has a weight of 2 represents roughly twice as many CloudFront web requests as a result that has a weight of 1.
        /// This member is required.
        public var weight: Swift.Int

        public init(
            action: Swift.String? = nil,
            request: WAFRegionalClientTypes.HTTPRequest? = nil,
            ruleWithinRuleGroup: Swift.String? = nil,
            timestamp: Foundation.Date? = nil,
            weight: Swift.Int = 0
        )
        {
            self.action = action
            self.request = request
            self.ruleWithinRuleGroup = ruleWithinRuleGroup
            self.timestamp = timestamp
            self.weight = weight
        }
    }

}

public struct GetSampledRequestsOutput {
    /// The total number of requests from which GetSampledRequests got a sample of MaxItems requests. If PopulationSize is less than MaxItems, the sample includes every request that your AWS resource received during the specified time range.
    public var populationSize: Swift.Int
    /// A complex type that contains detailed information about each of the requests in the sample.
    public var sampledRequests: [WAFRegionalClientTypes.SampledHTTPRequest]?
    /// Usually, TimeWindow is the time range that you specified in the GetSampledRequests request. However, if your AWS resource received more than 5,000 requests during the time range that you specified in the request, GetSampledRequests returns the time range for the first 5,000 requests. Times are in Coordinated Universal Time (UTC) format.
    public var timeWindow: WAFRegionalClientTypes.TimeWindow?

    public init(
        populationSize: Swift.Int = 0,
        sampledRequests: [WAFRegionalClientTypes.SampledHTTPRequest]? = nil,
        timeWindow: WAFRegionalClientTypes.TimeWindow? = nil
    )
    {
        self.populationSize = populationSize
        self.sampledRequests = sampledRequests
        self.timeWindow = timeWindow
    }
}

public struct GetSizeConstraintSetInput {
    /// The SizeConstraintSetId of the [SizeConstraintSet] that you want to get. SizeConstraintSetId is returned by [CreateSizeConstraintSet] and by [ListSizeConstraintSets].
    /// This member is required.
    public var sizeConstraintSetId: Swift.String?

    public init(
        sizeConstraintSetId: Swift.String? = nil
    )
    {
        self.sizeConstraintSetId = sizeConstraintSetId
    }
}

public struct GetSizeConstraintSetOutput {
    /// Information about the [SizeConstraintSet] that you specified in the GetSizeConstraintSet request. For more information, see the following topics:
    ///
    /// * [SizeConstraintSet]: Contains SizeConstraintSetId, SizeConstraints, and Name
    ///
    /// * SizeConstraints: Contains an array of [SizeConstraint] objects. Each SizeConstraint object contains [FieldToMatch], TextTransformation, ComparisonOperator, and Size
    ///
    /// * [FieldToMatch]: Contains Data and Type
    public var sizeConstraintSet: WAFRegionalClientTypes.SizeConstraintSet?

    public init(
        sizeConstraintSet: WAFRegionalClientTypes.SizeConstraintSet? = nil
    )
    {
        self.sizeConstraintSet = sizeConstraintSet
    }
}

/// A request to get a [SqlInjectionMatchSet].
public struct GetSqlInjectionMatchSetInput {
    /// The SqlInjectionMatchSetId of the [SqlInjectionMatchSet] that you want to get. SqlInjectionMatchSetId is returned by [CreateSqlInjectionMatchSet] and by [ListSqlInjectionMatchSets].
    /// This member is required.
    public var sqlInjectionMatchSetId: Swift.String?

    public init(
        sqlInjectionMatchSetId: Swift.String? = nil
    )
    {
        self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
    }
}

/// The response to a [GetSqlInjectionMatchSet] request.
public struct GetSqlInjectionMatchSetOutput {
    /// Information about the [SqlInjectionMatchSet] that you specified in the GetSqlInjectionMatchSet request. For more information, see the following topics:
    ///
    /// * [SqlInjectionMatchSet]: Contains Name, SqlInjectionMatchSetId, and an array of SqlInjectionMatchTuple objects
    ///
    /// * [SqlInjectionMatchTuple]: Each SqlInjectionMatchTuple object contains FieldToMatch and TextTransformation
    ///
    /// * [FieldToMatch]: Contains Data and Type
    public var sqlInjectionMatchSet: WAFRegionalClientTypes.SqlInjectionMatchSet?

    public init(
        sqlInjectionMatchSet: WAFRegionalClientTypes.SqlInjectionMatchSet? = nil
    )
    {
        self.sqlInjectionMatchSet = sqlInjectionMatchSet
    }
}

public struct GetWebACLInput {
    /// The WebACLId of the [WebACL] that you want to get. WebACLId is returned by [CreateWebACL] and by [ListWebACLs].
    /// This member is required.
    public var webACLId: Swift.String?

    public init(
        webACLId: Swift.String? = nil
    )
    {
        self.webACLId = webACLId
    }
}

public struct GetWebACLOutput {
    /// Information about the [WebACL] that you specified in the GetWebACL request. For more information, see the following topics:
    ///
    /// * [WebACL]: Contains DefaultAction, MetricName, Name, an array of Rule objects, and WebACLId
    ///
    /// * DefaultAction (Data type is [WafAction]): Contains Type
    ///
    /// * Rules: Contains an array of ActivatedRule objects, which contain Action, Priority, and RuleId
    ///
    /// * Action: Contains Type
    public var webACL: WAFRegionalClientTypes.WebACL?

    public init(
        webACL: WAFRegionalClientTypes.WebACL? = nil
    )
    {
        self.webACL = webACL
    }
}

public struct GetWebACLForResourceInput {
    /// The ARN (Amazon Resource Name) of the resource for which to get the web ACL, either an application load balancer or Amazon API Gateway stage. The ARN should be in one of the following formats:
    ///
    /// * For an Application Load Balancer: arn:aws:elasticloadbalancing:region:account-id:loadbalancer/app/load-balancer-name/load-balancer-id
    ///
    /// * For an Amazon API Gateway stage: arn:aws:apigateway:region::/restapis/api-id/stages/stage-name
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains the identifier and the name or description of the [WebACL].
    public struct WebACLSummary {
        /// A friendly name or description of the [WebACL]. You can't change the name of a WebACL after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for a WebACL. You use WebACLId to get information about a WebACL (see [GetWebACL]), update a WebACL (see [UpdateWebACL]), and delete a WebACL from AWS WAF (see [DeleteWebACL]). WebACLId is returned by [CreateWebACL] and by [ListWebACLs].
        /// This member is required.
        public var webACLId: Swift.String?

        public init(
            name: Swift.String? = nil,
            webACLId: Swift.String? = nil
        )
        {
            self.name = name
            self.webACLId = webACLId
        }
    }

}

public struct GetWebACLForResourceOutput {
    /// Information about the web ACL that you specified in the GetWebACLForResource request. If there is no associated resource, a null WebACLSummary is returned.
    public var webACLSummary: WAFRegionalClientTypes.WebACLSummary?

    public init(
        webACLSummary: WAFRegionalClientTypes.WebACLSummary? = nil
    )
    {
        self.webACLSummary = webACLSummary
    }
}

/// A request to get an [XssMatchSet].
public struct GetXssMatchSetInput {
    /// The XssMatchSetId of the [XssMatchSet] that you want to get. XssMatchSetId is returned by [CreateXssMatchSet] and by [ListXssMatchSets].
    /// This member is required.
    public var xssMatchSetId: Swift.String?

    public init(
        xssMatchSetId: Swift.String? = nil
    )
    {
        self.xssMatchSetId = xssMatchSetId
    }
}

/// The response to a [GetXssMatchSet] request.
public struct GetXssMatchSetOutput {
    /// Information about the [XssMatchSet] that you specified in the GetXssMatchSet request. For more information, see the following topics:
    ///
    /// * [XssMatchSet]: Contains Name, XssMatchSetId, and an array of XssMatchTuple objects
    ///
    /// * [XssMatchTuple]: Each XssMatchTuple object contains FieldToMatch and TextTransformation
    ///
    /// * [FieldToMatch]: Contains Data and Type
    public var xssMatchSet: WAFRegionalClientTypes.XssMatchSet?

    public init(
        xssMatchSet: WAFRegionalClientTypes.XssMatchSet? = nil
    )
    {
        self.xssMatchSet = xssMatchSet
    }
}

public struct ListActivatedRulesInRuleGroupInput {
    /// Specifies the number of ActivatedRules that you want AWS WAF to return for this request. If you have more ActivatedRules than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of ActivatedRules.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more ActivatedRules than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of ActivatedRules. For the second and subsequent ListActivatedRulesInRuleGroup requests, specify the value of NextMarker from the previous response to get information about another batch of ActivatedRules.
    public var nextMarker: Swift.String?
    /// The RuleGroupId of the [RuleGroup] for which you want to get a list of [ActivatedRule] objects.
    public var ruleGroupId: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil,
        ruleGroupId: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.ruleGroupId = ruleGroupId
    }
}

public struct ListActivatedRulesInRuleGroupOutput {
    /// An array of ActivatedRules objects.
    public var activatedRules: [WAFRegionalClientTypes.ActivatedRule]?
    /// If you have more ActivatedRules than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more ActivatedRules, submit another ListActivatedRulesInRuleGroup request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?

    public init(
        activatedRules: [WAFRegionalClientTypes.ActivatedRule]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.activatedRules = activatedRules
        self.nextMarker = nextMarker
    }
}

public struct ListByteMatchSetsInput {
    /// Specifies the number of ByteMatchSet objects that you want AWS WAF to return for this request. If you have more ByteMatchSets objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of ByteMatchSet objects.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more ByteMatchSets than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of ByteMatchSets. For the second and subsequent ListByteMatchSets requests, specify the value of NextMarker from the previous response to get information about another batch of ByteMatchSets.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Returned by [ListByteMatchSets]. Each ByteMatchSetSummary object includes the Name and ByteMatchSetId for one [ByteMatchSet].
    public struct ByteMatchSetSummary {
        /// The ByteMatchSetId for a ByteMatchSet. You use ByteMatchSetId to get information about a ByteMatchSet, update a ByteMatchSet, remove a ByteMatchSet from a Rule, and delete a ByteMatchSet from AWS WAF. ByteMatchSetId is returned by [CreateByteMatchSet] and by [ListByteMatchSets].
        /// This member is required.
        public var byteMatchSetId: Swift.String?
        /// A friendly name or description of the [ByteMatchSet]. You can't change Name after you create a ByteMatchSet.
        /// This member is required.
        public var name: Swift.String?

        public init(
            byteMatchSetId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.byteMatchSetId = byteMatchSetId
            self.name = name
        }
    }

}

public struct ListByteMatchSetsOutput {
    /// An array of [ByteMatchSetSummary] objects.
    public var byteMatchSets: [WAFRegionalClientTypes.ByteMatchSetSummary]?
    /// If you have more ByteMatchSet objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more ByteMatchSet objects, submit another ListByteMatchSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?

    public init(
        byteMatchSets: [WAFRegionalClientTypes.ByteMatchSetSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.byteMatchSets = byteMatchSets
        self.nextMarker = nextMarker
    }
}

public struct ListGeoMatchSetsInput {
    /// Specifies the number of GeoMatchSet objects that you want AWS WAF to return for this request. If you have more GeoMatchSet objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of GeoMatchSet objects.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more GeoMatchSets than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of GeoMatchSet objects. For the second and subsequent ListGeoMatchSets requests, specify the value of NextMarker from the previous response to get information about another batch of GeoMatchSet objects.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains the identifier and the name of the GeoMatchSet.
    public struct GeoMatchSetSummary {
        /// The GeoMatchSetId for an [GeoMatchSet]. You can use GeoMatchSetId in a [GetGeoMatchSet] request to get detailed information about an [GeoMatchSet].
        /// This member is required.
        public var geoMatchSetId: Swift.String?
        /// A friendly name or description of the [GeoMatchSet]. You can't change the name of an GeoMatchSet after you create it.
        /// This member is required.
        public var name: Swift.String?

        public init(
            geoMatchSetId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.geoMatchSetId = geoMatchSetId
            self.name = name
        }
    }

}

public struct ListGeoMatchSetsOutput {
    /// An array of [GeoMatchSetSummary] objects.
    public var geoMatchSets: [WAFRegionalClientTypes.GeoMatchSetSummary]?
    /// If you have more GeoMatchSet objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more GeoMatchSet objects, submit another ListGeoMatchSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?

    public init(
        geoMatchSets: [WAFRegionalClientTypes.GeoMatchSetSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.geoMatchSets = geoMatchSets
        self.nextMarker = nextMarker
    }
}

public struct ListIPSetsInput {
    /// Specifies the number of IPSet objects that you want AWS WAF to return for this request. If you have more IPSet objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of IPSet objects.
    public var limit: Swift.Int?
    /// AWS WAF returns a NextMarker value in the response that allows you to list another group of IPSets. For the second and subsequent ListIPSets requests, specify the value of NextMarker from the previous response to get information about another batch of IPSets.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains the identifier and the name of the IPSet.
    public struct IPSetSummary {
        /// The IPSetId for an [IPSet]. You can use IPSetId in a [GetIPSet] request to get detailed information about an [IPSet].
        /// This member is required.
        public var ipSetId: Swift.String?
        /// A friendly name or description of the [IPSet]. You can't change the name of an IPSet after you create it.
        /// This member is required.
        public var name: Swift.String?

        public init(
            ipSetId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.ipSetId = ipSetId
            self.name = name
        }
    }

}

public struct ListIPSetsOutput {
    /// An array of [IPSetSummary] objects.
    public var ipSets: [WAFRegionalClientTypes.IPSetSummary]?
    /// To list more IPSet objects, submit another ListIPSets request, and in the next request use the NextMarker response value as the NextMarker value.
    public var nextMarker: Swift.String?

    public init(
        ipSets: [WAFRegionalClientTypes.IPSetSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.ipSets = ipSets
        self.nextMarker = nextMarker
    }
}

public struct ListLoggingConfigurationsInput {
    /// Specifies the number of LoggingConfigurations that you want AWS WAF to return for this request. If you have more LoggingConfigurations than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of LoggingConfigurations.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more LoggingConfigurations than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of LoggingConfigurations. For the second and subsequent ListLoggingConfigurations requests, specify the value of NextMarker from the previous response to get information about another batch of ListLoggingConfigurations.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

public struct ListLoggingConfigurationsOutput {
    /// An array of [LoggingConfiguration] objects.
    public var loggingConfigurations: [WAFRegionalClientTypes.LoggingConfiguration]?
    /// If you have more LoggingConfigurations than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more LoggingConfigurations, submit another ListLoggingConfigurations request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?

    public init(
        loggingConfigurations: [WAFRegionalClientTypes.LoggingConfiguration]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.loggingConfigurations = loggingConfigurations
        self.nextMarker = nextMarker
    }
}

public struct ListRateBasedRulesInput {
    /// Specifies the number of Rules that you want AWS WAF to return for this request. If you have more Rules than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of Rules.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more Rules than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of Rules. For the second and subsequent ListRateBasedRules requests, specify the value of NextMarker from the previous response to get information about another batch of Rules.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains the identifier and the friendly name or description of the Rule.
    public struct RuleSummary {
        /// A friendly name or description of the [Rule]. You can't change the name of a Rule after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for a Rule. You use RuleId to get more information about a Rule (see [GetRule]), update a Rule (see [UpdateRule]), insert a Rule into a WebACL or delete one from a WebACL (see [UpdateWebACL]), or delete a Rule from AWS WAF (see [DeleteRule]). RuleId is returned by [CreateRule] and by [ListRules].
        /// This member is required.
        public var ruleId: Swift.String?

        public init(
            name: Swift.String? = nil,
            ruleId: Swift.String? = nil
        )
        {
            self.name = name
            self.ruleId = ruleId
        }
    }

}

public struct ListRateBasedRulesOutput {
    /// If you have more Rules than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more Rules, submit another ListRateBasedRules request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [RuleSummary] objects.
    public var rules: [WAFRegionalClientTypes.RuleSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        rules: [WAFRegionalClientTypes.RuleSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.rules = rules
    }
}

public struct ListRegexMatchSetsInput {
    /// Specifies the number of RegexMatchSet objects that you want AWS WAF to return for this request. If you have more RegexMatchSet objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of RegexMatchSet objects.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more RegexMatchSet objects than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of ByteMatchSets. For the second and subsequent ListRegexMatchSets requests, specify the value of NextMarker from the previous response to get information about another batch of RegexMatchSet objects.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Returned by [ListRegexMatchSets]. Each RegexMatchSetSummary object includes the Name and RegexMatchSetId for one [RegexMatchSet].
    public struct RegexMatchSetSummary {
        /// A friendly name or description of the [RegexMatchSet]. You can't change Name after you create a RegexMatchSet.
        /// This member is required.
        public var name: Swift.String?
        /// The RegexMatchSetId for a RegexMatchSet. You use RegexMatchSetId to get information about a RegexMatchSet, update a RegexMatchSet, remove a RegexMatchSet from a Rule, and delete a RegexMatchSet from AWS WAF. RegexMatchSetId is returned by [CreateRegexMatchSet] and by [ListRegexMatchSets].
        /// This member is required.
        public var regexMatchSetId: Swift.String?

        public init(
            name: Swift.String? = nil,
            regexMatchSetId: Swift.String? = nil
        )
        {
            self.name = name
            self.regexMatchSetId = regexMatchSetId
        }
    }

}

public struct ListRegexMatchSetsOutput {
    /// If you have more RegexMatchSet objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more RegexMatchSet objects, submit another ListRegexMatchSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [RegexMatchSetSummary] objects.
    public var regexMatchSets: [WAFRegionalClientTypes.RegexMatchSetSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        regexMatchSets: [WAFRegionalClientTypes.RegexMatchSetSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.regexMatchSets = regexMatchSets
    }
}

public struct ListRegexPatternSetsInput {
    /// Specifies the number of RegexPatternSet objects that you want AWS WAF to return for this request. If you have more RegexPatternSet objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of RegexPatternSet objects.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more RegexPatternSet objects than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of RegexPatternSet objects. For the second and subsequent ListRegexPatternSets requests, specify the value of NextMarker from the previous response to get information about another batch of RegexPatternSet objects.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Returned by [ListRegexPatternSets]. Each RegexPatternSetSummary object includes the Name and RegexPatternSetId for one [RegexPatternSet].
    public struct RegexPatternSetSummary {
        /// A friendly name or description of the [RegexPatternSet]. You can't change Name after you create a RegexPatternSet.
        /// This member is required.
        public var name: Swift.String?
        /// The RegexPatternSetId for a RegexPatternSet. You use RegexPatternSetId to get information about a RegexPatternSet, update a RegexPatternSet, remove a RegexPatternSet from a RegexMatchSet, and delete a RegexPatternSet from AWS WAF. RegexPatternSetId is returned by [CreateRegexPatternSet] and by [ListRegexPatternSets].
        /// This member is required.
        public var regexPatternSetId: Swift.String?

        public init(
            name: Swift.String? = nil,
            regexPatternSetId: Swift.String? = nil
        )
        {
            self.name = name
            self.regexPatternSetId = regexPatternSetId
        }
    }

}

public struct ListRegexPatternSetsOutput {
    /// If you have more RegexPatternSet objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more RegexPatternSet objects, submit another ListRegexPatternSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [RegexPatternSetSummary] objects.
    public var regexPatternSets: [WAFRegionalClientTypes.RegexPatternSetSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        regexPatternSets: [WAFRegionalClientTypes.RegexPatternSetSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.regexPatternSets = regexPatternSets
    }
}

extension WAFRegionalClientTypes {

    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case apiGateway
        case applicationLoadBalancer
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .apiGateway,
                .applicationLoadBalancer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .apiGateway: return "API_GATEWAY"
            case .applicationLoadBalancer: return "APPLICATION_LOAD_BALANCER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListResourcesForWebACLInput {
    /// The type of resource to list, either an application load balancer or Amazon API Gateway.
    public var resourceType: WAFRegionalClientTypes.ResourceType?
    /// The unique identifier (ID) of the web ACL for which to list the associated resources.
    /// This member is required.
    public var webACLId: Swift.String?

    public init(
        resourceType: WAFRegionalClientTypes.ResourceType? = nil,
        webACLId: Swift.String? = nil
    )
    {
        self.resourceType = resourceType
        self.webACLId = webACLId
    }
}

public struct ListResourcesForWebACLOutput {
    /// An array of ARNs (Amazon Resource Names) of the resources associated with the specified web ACL. An array with zero elements is returned if there are no resources associated with the web ACL.
    public var resourceArns: [Swift.String]?

    public init(
        resourceArns: [Swift.String]? = nil
    )
    {
        self.resourceArns = resourceArns
    }
}

public struct ListRuleGroupsInput {
    /// Specifies the number of RuleGroups that you want AWS WAF to return for this request. If you have more RuleGroups than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of RuleGroups.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more RuleGroups than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of RuleGroups. For the second and subsequent ListRuleGroups requests, specify the value of NextMarker from the previous response to get information about another batch of RuleGroups.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Contains the identifier and the friendly name or description of the RuleGroup.
    public struct RuleGroupSummary {
        /// A friendly name or description of the [RuleGroup]. You can't change the name of a RuleGroup after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for a RuleGroup. You use RuleGroupId to get more information about a RuleGroup (see [GetRuleGroup]), update a RuleGroup (see [UpdateRuleGroup]), insert a RuleGroup into a WebACL or delete one from a WebACL (see [UpdateWebACL]), or delete a RuleGroup from AWS WAF (see [DeleteRuleGroup]). RuleGroupId is returned by [CreateRuleGroup] and by [ListRuleGroups].
        /// This member is required.
        public var ruleGroupId: Swift.String?

        public init(
            name: Swift.String? = nil,
            ruleGroupId: Swift.String? = nil
        )
        {
            self.name = name
            self.ruleGroupId = ruleGroupId
        }
    }

}

public struct ListRuleGroupsOutput {
    /// If you have more RuleGroups than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more RuleGroups, submit another ListRuleGroups request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [RuleGroup] objects.
    public var ruleGroups: [WAFRegionalClientTypes.RuleGroupSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        ruleGroups: [WAFRegionalClientTypes.RuleGroupSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.ruleGroups = ruleGroups
    }
}

public struct ListRulesInput {
    /// Specifies the number of Rules that you want AWS WAF to return for this request. If you have more Rules than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of Rules.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more Rules than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of Rules. For the second and subsequent ListRules requests, specify the value of NextMarker from the previous response to get information about another batch of Rules.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

public struct ListRulesOutput {
    /// If you have more Rules than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more Rules, submit another ListRules request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [RuleSummary] objects.
    public var rules: [WAFRegionalClientTypes.RuleSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        rules: [WAFRegionalClientTypes.RuleSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.rules = rules
    }
}

public struct ListSizeConstraintSetsInput {
    /// Specifies the number of SizeConstraintSet objects that you want AWS WAF to return for this request. If you have more SizeConstraintSets objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of SizeConstraintSet objects.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more SizeConstraintSets than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of SizeConstraintSets. For the second and subsequent ListSizeConstraintSets requests, specify the value of NextMarker from the previous response to get information about another batch of SizeConstraintSets.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The Id and Name of a SizeConstraintSet.
    public struct SizeConstraintSetSummary {
        /// The name of the SizeConstraintSet, if any.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for a SizeConstraintSet. You use SizeConstraintSetId to get information about a SizeConstraintSet (see [GetSizeConstraintSet]), update a SizeConstraintSet (see [UpdateSizeConstraintSet]), insert a SizeConstraintSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a SizeConstraintSet from AWS WAF (see [DeleteSizeConstraintSet]). SizeConstraintSetId is returned by [CreateSizeConstraintSet] and by [ListSizeConstraintSets].
        /// This member is required.
        public var sizeConstraintSetId: Swift.String?

        public init(
            name: Swift.String? = nil,
            sizeConstraintSetId: Swift.String? = nil
        )
        {
            self.name = name
            self.sizeConstraintSetId = sizeConstraintSetId
        }
    }

}

public struct ListSizeConstraintSetsOutput {
    /// If you have more SizeConstraintSet objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more SizeConstraintSet objects, submit another ListSizeConstraintSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [SizeConstraintSetSummary] objects.
    public var sizeConstraintSets: [WAFRegionalClientTypes.SizeConstraintSetSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        sizeConstraintSets: [WAFRegionalClientTypes.SizeConstraintSetSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.sizeConstraintSets = sizeConstraintSets
    }
}

/// A request to list the [SqlInjectionMatchSet] objects created by the current AWS account.
public struct ListSqlInjectionMatchSetsInput {
    /// Specifies the number of [SqlInjectionMatchSet] objects that you want AWS WAF to return for this request. If you have more SqlInjectionMatchSet objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of Rules.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more [SqlInjectionMatchSet] objects than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of SqlInjectionMatchSets. For the second and subsequent ListSqlInjectionMatchSets requests, specify the value of NextMarker from the previous response to get information about another batch of SqlInjectionMatchSets.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The Id and Name of a SqlInjectionMatchSet.
    public struct SqlInjectionMatchSetSummary {
        /// The name of the SqlInjectionMatchSet, if any, specified by Id.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for a SqlInjectionMatchSet. You use SqlInjectionMatchSetId to get information about a SqlInjectionMatchSet (see [GetSqlInjectionMatchSet]), update a SqlInjectionMatchSet (see [UpdateSqlInjectionMatchSet]), insert a SqlInjectionMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete a SqlInjectionMatchSet from AWS WAF (see [DeleteSqlInjectionMatchSet]). SqlInjectionMatchSetId is returned by [CreateSqlInjectionMatchSet] and by [ListSqlInjectionMatchSets].
        /// This member is required.
        public var sqlInjectionMatchSetId: Swift.String?

        public init(
            name: Swift.String? = nil,
            sqlInjectionMatchSetId: Swift.String? = nil
        )
        {
            self.name = name
            self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
        }
    }

}

/// The response to a [ListSqlInjectionMatchSets] request.
public struct ListSqlInjectionMatchSetsOutput {
    /// If you have more [SqlInjectionMatchSet] objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more SqlInjectionMatchSet objects, submit another ListSqlInjectionMatchSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [SqlInjectionMatchSetSummary] objects.
    public var sqlInjectionMatchSets: [WAFRegionalClientTypes.SqlInjectionMatchSetSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        sqlInjectionMatchSets: [WAFRegionalClientTypes.SqlInjectionMatchSetSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.sqlInjectionMatchSets = sqlInjectionMatchSets
    }
}

public struct ListSubscribedRuleGroupsInput {
    /// Specifies the number of subscribed rule groups that you want AWS WAF to return for this request. If you have more objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of objects.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more ByteMatchSetssubscribed rule groups than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of subscribed rule groups. For the second and subsequent ListSubscribedRuleGroupsRequest requests, specify the value of NextMarker from the previous response to get information about another batch of subscribed rule groups.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. A summary of the rule groups you are subscribed to.
    public struct SubscribedRuleGroupSummary {
        /// A friendly name or description for the metrics for this RuleGroup. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RuleGroup.
        /// This member is required.
        public var metricName: Swift.String?
        /// A friendly name or description of the RuleGroup. You can't change the name of a RuleGroup after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for a RuleGroup.
        /// This member is required.
        public var ruleGroupId: Swift.String?

        public init(
            metricName: Swift.String? = nil,
            name: Swift.String? = nil,
            ruleGroupId: Swift.String? = nil
        )
        {
            self.metricName = metricName
            self.name = name
            self.ruleGroupId = ruleGroupId
        }
    }

}

public struct ListSubscribedRuleGroupsOutput {
    /// If you have more objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more objects, submit another ListSubscribedRuleGroups request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [RuleGroup] objects.
    public var ruleGroups: [WAFRegionalClientTypes.SubscribedRuleGroupSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        ruleGroups: [WAFRegionalClientTypes.SubscribedRuleGroupSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.ruleGroups = ruleGroups
    }
}

public struct ListTagsForResourceInput {
    ///
    public var limit: Swift.Int?
    ///
    public var nextMarker: Swift.String?
    ///
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.resourceARN = resourceARN
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Information for a tag associated with an AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource. Tagging is only available through the API, SDKs, and CLI. You can't manage or view tags through the AWS WAF Classic console. You can tag the AWS resources that you manage through AWS WAF Classic: web ACLs, rule groups, and rules.
    public struct TagInfoForResource {
        ///
        public var resourceARN: Swift.String?
        ///
        public var tagList: [WAFRegionalClientTypes.Tag]?

        public init(
            resourceARN: Swift.String? = nil,
            tagList: [WAFRegionalClientTypes.Tag]? = nil
        )
        {
            self.resourceARN = resourceARN
            self.tagList = tagList
        }
    }

}

public struct ListTagsForResourceOutput {
    ///
    public var nextMarker: Swift.String?
    ///
    public var tagInfoForResource: WAFRegionalClientTypes.TagInfoForResource?

    public init(
        nextMarker: Swift.String? = nil,
        tagInfoForResource: WAFRegionalClientTypes.TagInfoForResource? = nil
    )
    {
        self.nextMarker = nextMarker
        self.tagInfoForResource = tagInfoForResource
    }
}

public struct ListWebACLsInput {
    /// Specifies the number of WebACL objects that you want AWS WAF to return for this request. If you have more WebACL objects than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of WebACL objects.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more WebACL objects than the number that you specify for Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of WebACL objects. For the second and subsequent ListWebACLs requests, specify the value of NextMarker from the previous response to get information about another batch of WebACL objects.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

public struct ListWebACLsOutput {
    /// If you have more WebACL objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more WebACL objects, submit another ListWebACLs request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [WebACLSummary] objects.
    public var webACLs: [WAFRegionalClientTypes.WebACLSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        webACLs: [WAFRegionalClientTypes.WebACLSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.webACLs = webACLs
    }
}

/// A request to list the [XssMatchSet] objects created by the current AWS account.
public struct ListXssMatchSetsInput {
    /// Specifies the number of [XssMatchSet] objects that you want AWS WAF to return for this request. If you have more XssMatchSet objects than the number you specify for Limit, the response includes a NextMarker value that you can use to get another batch of Rules.
    public var limit: Swift.Int?
    /// If you specify a value for Limit and you have more [XssMatchSet] objects than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of XssMatchSets. For the second and subsequent ListXssMatchSets requests, specify the value of NextMarker from the previous response to get information about another batch of XssMatchSets.
    public var nextMarker: Swift.String?

    public init(
        limit: Swift.Int? = 0,
        nextMarker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. The Id and Name of an XssMatchSet.
    public struct XssMatchSetSummary {
        /// The name of the XssMatchSet, if any, specified by Id.
        /// This member is required.
        public var name: Swift.String?
        /// A unique identifier for an XssMatchSet. You use XssMatchSetId to get information about a XssMatchSet (see [GetXssMatchSet]), update an XssMatchSet (see [UpdateXssMatchSet]), insert an XssMatchSet into a Rule or delete one from a Rule (see [UpdateRule]), and delete an XssMatchSet from AWS WAF (see [DeleteXssMatchSet]). XssMatchSetId is returned by [CreateXssMatchSet] and by [ListXssMatchSets].
        /// This member is required.
        public var xssMatchSetId: Swift.String?

        public init(
            name: Swift.String? = nil,
            xssMatchSetId: Swift.String? = nil
        )
        {
            self.name = name
            self.xssMatchSetId = xssMatchSetId
        }
    }

}

/// The response to a [ListXssMatchSets] request.
public struct ListXssMatchSetsOutput {
    /// If you have more [XssMatchSet] objects than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more XssMatchSet objects, submit another ListXssMatchSets request, and specify the NextMarker value from the response in the NextMarker value in the next request.
    public var nextMarker: Swift.String?
    /// An array of [XssMatchSetSummary] objects.
    public var xssMatchSets: [WAFRegionalClientTypes.XssMatchSetSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        xssMatchSets: [WAFRegionalClientTypes.XssMatchSetSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.xssMatchSets = xssMatchSets
    }
}

/// AWS WAF is not able to access the service linked role. This can be caused by a previous PutLoggingConfiguration request, which can lock the service linked role for about 20 seconds. Please try your request again. The service linked role can also be locked by a previous DeleteServiceLinkedRole request, which can lock the role for 15 minutes or more. If you recently made a DeleteServiceLinkedRole, wait at least 15 minutes and try the request again. If you receive this same exception again, you will have to wait additional time until the role is unlocked.
public struct WAFServiceLinkedRoleErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFServiceLinkedRoleErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutLoggingConfigurationInput {
    /// The Amazon Kinesis Data Firehose that contains the inspected traffic information, the redacted fields details, and the Amazon Resource Name (ARN) of the web ACL to monitor. When specifying Type in RedactedFields, you must use one of the following values: URI, QUERY_STRING, HEADER, or METHOD.
    /// This member is required.
    public var loggingConfiguration: WAFRegionalClientTypes.LoggingConfiguration?

    public init(
        loggingConfiguration: WAFRegionalClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

public struct PutLoggingConfigurationOutput {
    /// The [LoggingConfiguration] that you submitted in the request.
    public var loggingConfiguration: WAFRegionalClientTypes.LoggingConfiguration?

    public init(
        loggingConfiguration: WAFRegionalClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

/// The operation failed because the specified policy is not in the proper format. The policy is subject to the following restrictions:
///
/// * You can attach only one policy with each PutPermissionPolicy request.
///
/// * The policy must include an Effect, Action and Principal.
///
/// * Effect must specify Allow.
///
/// * The Action in the policy must be waf:UpdateWebACL, waf-regional:UpdateWebACL, waf:GetRuleGroup and waf-regional:GetRuleGroup . Any extra or wildcard actions in the policy will be rejected.
///
/// * The policy cannot include a Resource parameter.
///
/// * The ARN in the request must be a valid WAF RuleGroup ARN and the RuleGroup must exist in the same region.
///
/// * The user making the request must be the owner of the RuleGroup.
///
/// * Your policy must be composed using IAM Policy version 2012-10-17.
public struct WAFInvalidPermissionPolicyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFInvalidPermissionPolicyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutPermissionPolicyInput {
    /// The policy to attach to the specified RuleGroup.
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the RuleGroup to which you want to attach the policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

public struct PutPermissionPolicyOutput {

    public init() { }
}

public struct TagResourceInput {
    ///
    /// This member is required.
    public var resourceARN: Swift.String?
    ///
    /// This member is required.
    public var tags: [WAFRegionalClientTypes.Tag]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [WAFRegionalClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    ///
    /// This member is required.
    public var resourceARN: Swift.String?
    ///
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

/// The operation failed because you tried to add an object to or delete an object from another object that doesn't exist. For example:
///
/// * You tried to add a Rule to or delete a Rule from a WebACL that doesn't exist.
///
/// * You tried to add a ByteMatchSet to or delete a ByteMatchSet from a Rule that doesn't exist.
///
/// * You tried to add an IP address to or delete an IP address from an IPSet that doesn't exist.
///
/// * You tried to add a ByteMatchTuple to or delete a ByteMatchTuple from a ByteMatchSet that doesn't exist.
public struct WAFNonexistentContainerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFNonexistentContainerException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension WAFRegionalClientTypes {

    public enum ChangeAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case delete
        case insert
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeAction] {
            return [
                .delete,
                .insert
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .insert: return "INSERT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. In an [UpdateByteMatchSet] request, ByteMatchSetUpdate specifies whether to insert or delete a [ByteMatchTuple] and includes the settings for the ByteMatchTuple.
    public struct ByteMatchSetUpdate {
        /// Specifies whether to insert or delete a [ByteMatchTuple].
        /// This member is required.
        public var action: WAFRegionalClientTypes.ChangeAction?
        /// Information about the part of a web request that you want AWS WAF to inspect and the value that you want AWS WAF to search for. If you specify DELETE for the value of Action, the ByteMatchTuple values must exactly match the values in the ByteMatchTuple that you want to delete from the ByteMatchSet.
        /// This member is required.
        public var byteMatchTuple: WAFRegionalClientTypes.ByteMatchTuple?

        public init(
            action: WAFRegionalClientTypes.ChangeAction? = nil,
            byteMatchTuple: WAFRegionalClientTypes.ByteMatchTuple? = nil
        )
        {
            self.action = action
            self.byteMatchTuple = byteMatchTuple
        }
    }

}

public struct UpdateByteMatchSetInput {
    /// The ByteMatchSetId of the [ByteMatchSet] that you want to update. ByteMatchSetId is returned by [CreateByteMatchSet] and by [ListByteMatchSets].
    /// This member is required.
    public var byteMatchSetId: Swift.String?
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// An array of ByteMatchSetUpdate objects that you want to insert into or delete from a [ByteMatchSet]. For more information, see the applicable data types:
    ///
    /// * [ByteMatchSetUpdate]: Contains Action and ByteMatchTuple
    ///
    /// * [ByteMatchTuple]: Contains FieldToMatch, PositionalConstraint, TargetString, and TextTransformation
    ///
    /// * [FieldToMatch]: Contains Data and Type
    /// This member is required.
    public var updates: [WAFRegionalClientTypes.ByteMatchSetUpdate]?

    public init(
        byteMatchSetId: Swift.String? = nil,
        changeToken: Swift.String? = nil,
        updates: [WAFRegionalClientTypes.ByteMatchSetUpdate]? = nil
    )
    {
        self.byteMatchSetId = byteMatchSetId
        self.changeToken = changeToken
        self.updates = updates
    }
}

public struct UpdateByteMatchSetOutput {
    /// The ChangeToken that you used to submit the UpdateByteMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the type of update to perform to an [GeoMatchSet] with [UpdateGeoMatchSet].
    public struct GeoMatchSetUpdate {
        /// Specifies whether to insert or delete a country with [UpdateGeoMatchSet].
        /// This member is required.
        public var action: WAFRegionalClientTypes.ChangeAction?
        /// The country from which web requests originate that you want AWS WAF to search for.
        /// This member is required.
        public var geoMatchConstraint: WAFRegionalClientTypes.GeoMatchConstraint?

        public init(
            action: WAFRegionalClientTypes.ChangeAction? = nil,
            geoMatchConstraint: WAFRegionalClientTypes.GeoMatchConstraint? = nil
        )
        {
            self.action = action
            self.geoMatchConstraint = geoMatchConstraint
        }
    }

}

public struct UpdateGeoMatchSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The GeoMatchSetId of the [GeoMatchSet] that you want to update. GeoMatchSetId is returned by [CreateGeoMatchSet] and by [ListGeoMatchSets].
    /// This member is required.
    public var geoMatchSetId: Swift.String?
    /// An array of GeoMatchSetUpdate objects that you want to insert into or delete from an [GeoMatchSet]. For more information, see the applicable data types:
    ///
    /// * [GeoMatchSetUpdate]: Contains Action and GeoMatchConstraint
    ///
    /// * [GeoMatchConstraint]: Contains Type and Value You can have only one Type and Value per GeoMatchConstraint. To add multiple countries, include multiple GeoMatchSetUpdate objects in your request.
    /// This member is required.
    public var updates: [WAFRegionalClientTypes.GeoMatchSetUpdate]?

    public init(
        changeToken: Swift.String? = nil,
        geoMatchSetId: Swift.String? = nil,
        updates: [WAFRegionalClientTypes.GeoMatchSetUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.geoMatchSetId = geoMatchSetId
        self.updates = updates
    }
}

public struct UpdateGeoMatchSetOutput {
    /// The ChangeToken that you used to submit the UpdateGeoMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the type of update to perform to an [IPSet] with [UpdateIPSet].
    public struct IPSetUpdate {
        /// Specifies whether to insert or delete an IP address with [UpdateIPSet].
        /// This member is required.
        public var action: WAFRegionalClientTypes.ChangeAction?
        /// The IP address type (IPV4 or IPV6) and the IP address range (in CIDR notation) that web requests originate from.
        /// This member is required.
        public var ipSetDescriptor: WAFRegionalClientTypes.IPSetDescriptor?

        public init(
            action: WAFRegionalClientTypes.ChangeAction? = nil,
            ipSetDescriptor: WAFRegionalClientTypes.IPSetDescriptor? = nil
        )
        {
            self.action = action
            self.ipSetDescriptor = ipSetDescriptor
        }
    }

}

public struct UpdateIPSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The IPSetId of the [IPSet] that you want to update. IPSetId is returned by [CreateIPSet] and by [ListIPSets].
    /// This member is required.
    public var ipSetId: Swift.String?
    /// An array of IPSetUpdate objects that you want to insert into or delete from an [IPSet]. For more information, see the applicable data types:
    ///
    /// * [IPSetUpdate]: Contains Action and IPSetDescriptor
    ///
    /// * [IPSetDescriptor]: Contains Type and Value
    ///
    ///
    /// You can insert a maximum of 1000 addresses in a single request.
    /// This member is required.
    public var updates: [WAFRegionalClientTypes.IPSetUpdate]?

    public init(
        changeToken: Swift.String? = nil,
        ipSetId: Swift.String? = nil,
        updates: [WAFRegionalClientTypes.IPSetUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.ipSetId = ipSetId
        self.updates = updates
    }
}

public struct UpdateIPSetOutput {
    /// The ChangeToken that you used to submit the UpdateIPSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies a Predicate (such as an IPSet) and indicates whether you want to add it to a Rule or delete it from a Rule.
    public struct RuleUpdate {
        /// Specify INSERT to add a Predicate to a Rule. Use DELETE to remove a Predicate from a Rule.
        /// This member is required.
        public var action: WAFRegionalClientTypes.ChangeAction?
        /// The ID of the Predicate (such as an IPSet) that you want to add to a Rule.
        /// This member is required.
        public var predicate: WAFRegionalClientTypes.Predicate?

        public init(
            action: WAFRegionalClientTypes.ChangeAction? = nil,
            predicate: WAFRegionalClientTypes.Predicate? = nil
        )
        {
            self.action = action
            self.predicate = predicate
        }
    }

}

public struct UpdateRateBasedRuleInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. If the number of requests exceeds the RateLimit and the other predicates specified in the rule are also met, AWS WAF triggers the action that is specified for this rule.
    /// This member is required.
    public var rateLimit: Swift.Int?
    /// The RuleId of the RateBasedRule that you want to update. RuleId is returned by CreateRateBasedRule and by [ListRateBasedRules].
    /// This member is required.
    public var ruleId: Swift.String?
    /// An array of RuleUpdate objects that you want to insert into or delete from a [RateBasedRule].
    /// This member is required.
    public var updates: [WAFRegionalClientTypes.RuleUpdate]?

    public init(
        changeToken: Swift.String? = nil,
        rateLimit: Swift.Int? = nil,
        ruleId: Swift.String? = nil,
        updates: [WAFRegionalClientTypes.RuleUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.rateLimit = rateLimit
        self.ruleId = ruleId
        self.updates = updates
    }
}

public struct UpdateRateBasedRuleOutput {
    /// The ChangeToken that you used to submit the UpdateRateBasedRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. In an [UpdateRegexMatchSet] request, RegexMatchSetUpdate specifies whether to insert or delete a [RegexMatchTuple] and includes the settings for the RegexMatchTuple.
    public struct RegexMatchSetUpdate {
        /// Specifies whether to insert or delete a [RegexMatchTuple].
        /// This member is required.
        public var action: WAFRegionalClientTypes.ChangeAction?
        /// Information about the part of a web request that you want AWS WAF to inspect and the identifier of the regular expression (regex) pattern that you want AWS WAF to search for. If you specify DELETE for the value of Action, the RegexMatchTuple values must exactly match the values in the RegexMatchTuple that you want to delete from the RegexMatchSet.
        /// This member is required.
        public var regexMatchTuple: WAFRegionalClientTypes.RegexMatchTuple?

        public init(
            action: WAFRegionalClientTypes.ChangeAction? = nil,
            regexMatchTuple: WAFRegionalClientTypes.RegexMatchTuple? = nil
        )
        {
            self.action = action
            self.regexMatchTuple = regexMatchTuple
        }
    }

}

public struct UpdateRegexMatchSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RegexMatchSetId of the [RegexMatchSet] that you want to update. RegexMatchSetId is returned by [CreateRegexMatchSet] and by [ListRegexMatchSets].
    /// This member is required.
    public var regexMatchSetId: Swift.String?
    /// An array of RegexMatchSetUpdate objects that you want to insert into or delete from a [RegexMatchSet]. For more information, see [RegexMatchTuple].
    /// This member is required.
    public var updates: [WAFRegionalClientTypes.RegexMatchSetUpdate]?

    public init(
        changeToken: Swift.String? = nil,
        regexMatchSetId: Swift.String? = nil,
        updates: [WAFRegionalClientTypes.RegexMatchSetUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.regexMatchSetId = regexMatchSetId
        self.updates = updates
    }
}

public struct UpdateRegexMatchSetOutput {
    /// The ChangeToken that you used to submit the UpdateRegexMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

/// The regular expression (regex) you specified in RegexPatternString is invalid.
public struct WAFInvalidRegexPatternException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFInvalidRegexPatternException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. In an [UpdateRegexPatternSet] request, RegexPatternSetUpdate specifies whether to insert or delete a RegexPatternString and includes the settings for the RegexPatternString.
    public struct RegexPatternSetUpdate {
        /// Specifies whether to insert or delete a RegexPatternString.
        /// This member is required.
        public var action: WAFRegionalClientTypes.ChangeAction?
        /// Specifies the regular expression (regex) pattern that you want AWS WAF to search for, such as B[a@]dB[o0]t.
        /// This member is required.
        public var regexPatternString: Swift.String?

        public init(
            action: WAFRegionalClientTypes.ChangeAction? = nil,
            regexPatternString: Swift.String? = nil
        )
        {
            self.action = action
            self.regexPatternString = regexPatternString
        }
    }

}

public struct UpdateRegexPatternSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RegexPatternSetId of the [RegexPatternSet] that you want to update. RegexPatternSetId is returned by [CreateRegexPatternSet] and by [ListRegexPatternSets].
    /// This member is required.
    public var regexPatternSetId: Swift.String?
    /// An array of RegexPatternSetUpdate objects that you want to insert into or delete from a [RegexPatternSet].
    /// This member is required.
    public var updates: [WAFRegionalClientTypes.RegexPatternSetUpdate]?

    public init(
        changeToken: Swift.String? = nil,
        regexPatternSetId: Swift.String? = nil,
        updates: [WAFRegionalClientTypes.RegexPatternSetUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.regexPatternSetId = regexPatternSetId
        self.updates = updates
    }
}

public struct UpdateRegexPatternSetOutput {
    /// The ChangeToken that you used to submit the UpdateRegexPatternSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

public struct UpdateRuleInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RuleId of the Rule that you want to update. RuleId is returned by CreateRule and by [ListRules].
    /// This member is required.
    public var ruleId: Swift.String?
    /// An array of RuleUpdate objects that you want to insert into or delete from a [Rule]. For more information, see the applicable data types:
    ///
    /// * [RuleUpdate]: Contains Action and Predicate
    ///
    /// * [Predicate]: Contains DataId, Negated, and Type
    ///
    /// * [FieldToMatch]: Contains Data and Type
    /// This member is required.
    public var updates: [WAFRegionalClientTypes.RuleUpdate]?

    public init(
        changeToken: Swift.String? = nil,
        ruleId: Swift.String? = nil,
        updates: [WAFRegionalClientTypes.RuleUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.ruleId = ruleId
        self.updates = updates
    }
}

public struct UpdateRuleOutput {
    /// The ChangeToken that you used to submit the UpdateRule request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies an ActivatedRule and indicates whether you want to add it to a RuleGroup or delete it from a RuleGroup.
    public struct RuleGroupUpdate {
        /// Specify INSERT to add an ActivatedRule to a RuleGroup. Use DELETE to remove an ActivatedRule from a RuleGroup.
        /// This member is required.
        public var action: WAFRegionalClientTypes.ChangeAction?
        /// The ActivatedRule object specifies a Rule that you want to insert or delete, the priority of the Rule in the WebACL, and the action that you want AWS WAF to take when a web request matches the Rule (ALLOW, BLOCK, or COUNT).
        /// This member is required.
        public var activatedRule: WAFRegionalClientTypes.ActivatedRule?

        public init(
            action: WAFRegionalClientTypes.ChangeAction? = nil,
            activatedRule: WAFRegionalClientTypes.ActivatedRule? = nil
        )
        {
            self.action = action
            self.activatedRule = activatedRule
        }
    }

}

public struct UpdateRuleGroupInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The RuleGroupId of the [RuleGroup] that you want to update. RuleGroupId is returned by [CreateRuleGroup] and by [ListRuleGroups].
    /// This member is required.
    public var ruleGroupId: Swift.String?
    /// An array of RuleGroupUpdate objects that you want to insert into or delete from a [RuleGroup]. You can only insert REGULAR rules into a rule group. ActivatedRule|OverrideAction applies only when updating or adding a RuleGroup to a WebACL. In this case you do not use ActivatedRule|Action. For all other update requests, ActivatedRule|Action is used instead of ActivatedRule|OverrideAction.
    /// This member is required.
    public var updates: [WAFRegionalClientTypes.RuleGroupUpdate]?

    public init(
        changeToken: Swift.String? = nil,
        ruleGroupId: Swift.String? = nil,
        updates: [WAFRegionalClientTypes.RuleGroupUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.ruleGroupId = ruleGroupId
        self.updates = updates
    }
}

public struct UpdateRuleGroupOutput {
    /// The ChangeToken that you used to submit the UpdateRuleGroup request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the part of a web request that you want to inspect the size of and indicates whether you want to add the specification to a [SizeConstraintSet] or delete it from a SizeConstraintSet.
    public struct SizeConstraintSetUpdate {
        /// Specify INSERT to add a [SizeConstraintSetUpdate] to a [SizeConstraintSet]. Use DELETE to remove a SizeConstraintSetUpdate from a SizeConstraintSet.
        /// This member is required.
        public var action: WAFRegionalClientTypes.ChangeAction?
        /// Specifies a constraint on the size of a part of the web request. AWS WAF uses the Size, ComparisonOperator, and FieldToMatch to build an expression in the form of "SizeComparisonOperator size in bytes of FieldToMatch". If that expression is true, the SizeConstraint is considered to match.
        /// This member is required.
        public var sizeConstraint: WAFRegionalClientTypes.SizeConstraint?

        public init(
            action: WAFRegionalClientTypes.ChangeAction? = nil,
            sizeConstraint: WAFRegionalClientTypes.SizeConstraint? = nil
        )
        {
            self.action = action
            self.sizeConstraint = sizeConstraint
        }
    }

}

public struct UpdateSizeConstraintSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The SizeConstraintSetId of the [SizeConstraintSet] that you want to update. SizeConstraintSetId is returned by [CreateSizeConstraintSet] and by [ListSizeConstraintSets].
    /// This member is required.
    public var sizeConstraintSetId: Swift.String?
    /// An array of SizeConstraintSetUpdate objects that you want to insert into or delete from a [SizeConstraintSet]. For more information, see the applicable data types:
    ///
    /// * [SizeConstraintSetUpdate]: Contains Action and SizeConstraint
    ///
    /// * [SizeConstraint]: Contains FieldToMatch, TextTransformation, ComparisonOperator, and Size
    ///
    /// * [FieldToMatch]: Contains Data and Type
    /// This member is required.
    public var updates: [WAFRegionalClientTypes.SizeConstraintSetUpdate]?

    public init(
        changeToken: Swift.String? = nil,
        sizeConstraintSetId: Swift.String? = nil,
        updates: [WAFRegionalClientTypes.SizeConstraintSetUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.sizeConstraintSetId = sizeConstraintSetId
        self.updates = updates
    }
}

public struct UpdateSizeConstraintSetOutput {
    /// The ChangeToken that you used to submit the UpdateSizeConstraintSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the part of a web request that you want to inspect for snippets of malicious SQL code and indicates whether you want to add the specification to a [SqlInjectionMatchSet] or delete it from a SqlInjectionMatchSet.
    public struct SqlInjectionMatchSetUpdate {
        /// Specify INSERT to add a [SqlInjectionMatchSetUpdate] to a [SqlInjectionMatchSet]. Use DELETE to remove a SqlInjectionMatchSetUpdate from a SqlInjectionMatchSet.
        /// This member is required.
        public var action: WAFRegionalClientTypes.ChangeAction?
        /// Specifies the part of a web request that you want AWS WAF to inspect for snippets of malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.
        /// This member is required.
        public var sqlInjectionMatchTuple: WAFRegionalClientTypes.SqlInjectionMatchTuple?

        public init(
            action: WAFRegionalClientTypes.ChangeAction? = nil,
            sqlInjectionMatchTuple: WAFRegionalClientTypes.SqlInjectionMatchTuple? = nil
        )
        {
            self.action = action
            self.sqlInjectionMatchTuple = sqlInjectionMatchTuple
        }
    }

}

/// A request to update a [SqlInjectionMatchSet].
public struct UpdateSqlInjectionMatchSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// The SqlInjectionMatchSetId of the SqlInjectionMatchSet that you want to update. SqlInjectionMatchSetId is returned by [CreateSqlInjectionMatchSet] and by [ListSqlInjectionMatchSets].
    /// This member is required.
    public var sqlInjectionMatchSetId: Swift.String?
    /// An array of SqlInjectionMatchSetUpdate objects that you want to insert into or delete from a [SqlInjectionMatchSet]. For more information, see the applicable data types:
    ///
    /// * [SqlInjectionMatchSetUpdate]: Contains Action and SqlInjectionMatchTuple
    ///
    /// * [SqlInjectionMatchTuple]: Contains FieldToMatch and TextTransformation
    ///
    /// * [FieldToMatch]: Contains Data and Type
    /// This member is required.
    public var updates: [WAFRegionalClientTypes.SqlInjectionMatchSetUpdate]?

    public init(
        changeToken: Swift.String? = nil,
        sqlInjectionMatchSetId: Swift.String? = nil,
        updates: [WAFRegionalClientTypes.SqlInjectionMatchSetUpdate]? = nil
    )
    {
        self.changeToken = changeToken
        self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
        self.updates = updates
    }
}

/// The response to an [UpdateSqlInjectionMatchSets] request.
public struct UpdateSqlInjectionMatchSetOutput {
    /// The ChangeToken that you used to submit the UpdateSqlInjectionMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

/// The specified subscription does not exist.
public struct WAFSubscriptionNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFSubscriptionNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies whether to insert a Rule into or delete a Rule from a WebACL.
    public struct WebACLUpdate {
        /// Specifies whether to insert a Rule into or delete a Rule from a WebACL.
        /// This member is required.
        public var action: WAFRegionalClientTypes.ChangeAction?
        /// The ActivatedRule object in an [UpdateWebACL] request specifies a Rule that you want to insert or delete, the priority of the Rule in the WebACL, and the action that you want AWS WAF to take when a web request matches the Rule (ALLOW, BLOCK, or COUNT).
        /// This member is required.
        public var activatedRule: WAFRegionalClientTypes.ActivatedRule?

        public init(
            action: WAFRegionalClientTypes.ChangeAction? = nil,
            activatedRule: WAFRegionalClientTypes.ActivatedRule? = nil
        )
        {
            self.action = action
            self.activatedRule = activatedRule
        }
    }

}

public struct UpdateWebACLInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// A default action for the web ACL, either ALLOW or BLOCK. AWS WAF performs the default action if a request doesn't match the criteria in any of the rules in a web ACL.
    public var defaultAction: WAFRegionalClientTypes.WafAction?
    /// An array of updates to make to the [WebACL]. An array of WebACLUpdate objects that you want to insert into or delete from a [WebACL]. For more information, see the applicable data types:
    ///
    /// * [WebACLUpdate]: Contains Action and ActivatedRule
    ///
    /// * [ActivatedRule]: Contains Action, OverrideAction, Priority, RuleId, and Type. ActivatedRule|OverrideAction applies only when updating or adding a RuleGroup to a WebACL. In this case, you do not use ActivatedRule|Action. For all other update requests, ActivatedRule|Action is used instead of ActivatedRule|OverrideAction.
    ///
    /// * [WafAction]: Contains Type
    public var updates: [WAFRegionalClientTypes.WebACLUpdate]?
    /// The WebACLId of the [WebACL] that you want to update. WebACLId is returned by [CreateWebACL] and by [ListWebACLs].
    /// This member is required.
    public var webACLId: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        defaultAction: WAFRegionalClientTypes.WafAction? = nil,
        updates: [WAFRegionalClientTypes.WebACLUpdate]? = nil,
        webACLId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.defaultAction = defaultAction
        self.updates = updates
        self.webACLId = webACLId
    }
}

public struct UpdateWebACLOutput {
    /// The ChangeToken that you used to submit the UpdateWebACL request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

extension WAFRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the part of a web request that you want to inspect for cross-site scripting attacks and indicates whether you want to add the specification to an [XssMatchSet] or delete it from an XssMatchSet.
    public struct XssMatchSetUpdate {
        /// Specify INSERT to add an [XssMatchSetUpdate] to an [XssMatchSet]. Use DELETE to remove an XssMatchSetUpdate from an XssMatchSet.
        /// This member is required.
        public var action: WAFRegionalClientTypes.ChangeAction?
        /// Specifies the part of a web request that you want AWS WAF to inspect for cross-site scripting attacks and, if you want AWS WAF to inspect a header, the name of the header.
        /// This member is required.
        public var xssMatchTuple: WAFRegionalClientTypes.XssMatchTuple?

        public init(
            action: WAFRegionalClientTypes.ChangeAction? = nil,
            xssMatchTuple: WAFRegionalClientTypes.XssMatchTuple? = nil
        )
        {
            self.action = action
            self.xssMatchTuple = xssMatchTuple
        }
    }

}

/// A request to update an [XssMatchSet].
public struct UpdateXssMatchSetInput {
    /// The value returned by the most recent call to [GetChangeToken].
    /// This member is required.
    public var changeToken: Swift.String?
    /// An array of XssMatchSetUpdate objects that you want to insert into or delete from an [XssMatchSet]. For more information, see the applicable data types:
    ///
    /// * [XssMatchSetUpdate]: Contains Action and XssMatchTuple
    ///
    /// * [XssMatchTuple]: Contains FieldToMatch and TextTransformation
    ///
    /// * [FieldToMatch]: Contains Data and Type
    /// This member is required.
    public var updates: [WAFRegionalClientTypes.XssMatchSetUpdate]?
    /// The XssMatchSetId of the XssMatchSet that you want to update. XssMatchSetId is returned by [CreateXssMatchSet] and by [ListXssMatchSets].
    /// This member is required.
    public var xssMatchSetId: Swift.String?

    public init(
        changeToken: Swift.String? = nil,
        updates: [WAFRegionalClientTypes.XssMatchSetUpdate]? = nil,
        xssMatchSetId: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
        self.updates = updates
        self.xssMatchSetId = xssMatchSetId
    }
}

/// The response to an [UpdateXssMatchSets] request.
public struct UpdateXssMatchSetOutput {
    /// The ChangeToken that you used to submit the UpdateXssMatchSet request. You can also use this value to query the status of the request. For more information, see [GetChangeTokenStatus].
    public var changeToken: Swift.String?

    public init(
        changeToken: Swift.String? = nil
    )
    {
        self.changeToken = changeToken
    }
}

extension AssociateWebACLInput {

    static func urlPathProvider(_ value: AssociateWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension CreateByteMatchSetInput {

    static func urlPathProvider(_ value: CreateByteMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateGeoMatchSetInput {

    static func urlPathProvider(_ value: CreateGeoMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateIPSetInput {

    static func urlPathProvider(_ value: CreateIPSetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRateBasedRuleInput {

    static func urlPathProvider(_ value: CreateRateBasedRuleInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRegexMatchSetInput {

    static func urlPathProvider(_ value: CreateRegexMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRegexPatternSetInput {

    static func urlPathProvider(_ value: CreateRegexPatternSetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRuleInput {

    static func urlPathProvider(_ value: CreateRuleInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRuleGroupInput {

    static func urlPathProvider(_ value: CreateRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateSizeConstraintSetInput {

    static func urlPathProvider(_ value: CreateSizeConstraintSetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateSqlInjectionMatchSetInput {

    static func urlPathProvider(_ value: CreateSqlInjectionMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateWebACLInput {

    static func urlPathProvider(_ value: CreateWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension CreateWebACLMigrationStackInput {

    static func urlPathProvider(_ value: CreateWebACLMigrationStackInput) -> Swift.String? {
        return "/"
    }
}

extension CreateXssMatchSetInput {

    static func urlPathProvider(_ value: CreateXssMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteByteMatchSetInput {

    static func urlPathProvider(_ value: DeleteByteMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteGeoMatchSetInput {

    static func urlPathProvider(_ value: DeleteGeoMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteIPSetInput {

    static func urlPathProvider(_ value: DeleteIPSetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLoggingConfigurationInput {

    static func urlPathProvider(_ value: DeleteLoggingConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DeletePermissionPolicyInput {

    static func urlPathProvider(_ value: DeletePermissionPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRateBasedRuleInput {

    static func urlPathProvider(_ value: DeleteRateBasedRuleInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRegexMatchSetInput {

    static func urlPathProvider(_ value: DeleteRegexMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRegexPatternSetInput {

    static func urlPathProvider(_ value: DeleteRegexPatternSetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRuleInput {

    static func urlPathProvider(_ value: DeleteRuleInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRuleGroupInput {

    static func urlPathProvider(_ value: DeleteRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteSizeConstraintSetInput {

    static func urlPathProvider(_ value: DeleteSizeConstraintSetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteSqlInjectionMatchSetInput {

    static func urlPathProvider(_ value: DeleteSqlInjectionMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteWebACLInput {

    static func urlPathProvider(_ value: DeleteWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteXssMatchSetInput {

    static func urlPathProvider(_ value: DeleteXssMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociateWebACLInput {

    static func urlPathProvider(_ value: DisassociateWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension GetByteMatchSetInput {

    static func urlPathProvider(_ value: GetByteMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension GetChangeTokenInput {

    static func urlPathProvider(_ value: GetChangeTokenInput) -> Swift.String? {
        return "/"
    }
}

extension GetChangeTokenStatusInput {

    static func urlPathProvider(_ value: GetChangeTokenStatusInput) -> Swift.String? {
        return "/"
    }
}

extension GetGeoMatchSetInput {

    static func urlPathProvider(_ value: GetGeoMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension GetIPSetInput {

    static func urlPathProvider(_ value: GetIPSetInput) -> Swift.String? {
        return "/"
    }
}

extension GetLoggingConfigurationInput {

    static func urlPathProvider(_ value: GetLoggingConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension GetPermissionPolicyInput {

    static func urlPathProvider(_ value: GetPermissionPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension GetRateBasedRuleInput {

    static func urlPathProvider(_ value: GetRateBasedRuleInput) -> Swift.String? {
        return "/"
    }
}

extension GetRateBasedRuleManagedKeysInput {

    static func urlPathProvider(_ value: GetRateBasedRuleManagedKeysInput) -> Swift.String? {
        return "/"
    }
}

extension GetRegexMatchSetInput {

    static func urlPathProvider(_ value: GetRegexMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension GetRegexPatternSetInput {

    static func urlPathProvider(_ value: GetRegexPatternSetInput) -> Swift.String? {
        return "/"
    }
}

extension GetRuleInput {

    static func urlPathProvider(_ value: GetRuleInput) -> Swift.String? {
        return "/"
    }
}

extension GetRuleGroupInput {

    static func urlPathProvider(_ value: GetRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension GetSampledRequestsInput {

    static func urlPathProvider(_ value: GetSampledRequestsInput) -> Swift.String? {
        return "/"
    }
}

extension GetSizeConstraintSetInput {

    static func urlPathProvider(_ value: GetSizeConstraintSetInput) -> Swift.String? {
        return "/"
    }
}

extension GetSqlInjectionMatchSetInput {

    static func urlPathProvider(_ value: GetSqlInjectionMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension GetWebACLInput {

    static func urlPathProvider(_ value: GetWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension GetWebACLForResourceInput {

    static func urlPathProvider(_ value: GetWebACLForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension GetXssMatchSetInput {

    static func urlPathProvider(_ value: GetXssMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension ListActivatedRulesInRuleGroupInput {

    static func urlPathProvider(_ value: ListActivatedRulesInRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ListByteMatchSetsInput {

    static func urlPathProvider(_ value: ListByteMatchSetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListGeoMatchSetsInput {

    static func urlPathProvider(_ value: ListGeoMatchSetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListIPSetsInput {

    static func urlPathProvider(_ value: ListIPSetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListLoggingConfigurationsInput {

    static func urlPathProvider(_ value: ListLoggingConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListRateBasedRulesInput {

    static func urlPathProvider(_ value: ListRateBasedRulesInput) -> Swift.String? {
        return "/"
    }
}

extension ListRegexMatchSetsInput {

    static func urlPathProvider(_ value: ListRegexMatchSetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListRegexPatternSetsInput {

    static func urlPathProvider(_ value: ListRegexPatternSetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListResourcesForWebACLInput {

    static func urlPathProvider(_ value: ListResourcesForWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension ListRuleGroupsInput {

    static func urlPathProvider(_ value: ListRuleGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListRulesInput {

    static func urlPathProvider(_ value: ListRulesInput) -> Swift.String? {
        return "/"
    }
}

extension ListSizeConstraintSetsInput {

    static func urlPathProvider(_ value: ListSizeConstraintSetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListSqlInjectionMatchSetsInput {

    static func urlPathProvider(_ value: ListSqlInjectionMatchSetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListSubscribedRuleGroupsInput {

    static func urlPathProvider(_ value: ListSubscribedRuleGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListWebACLsInput {

    static func urlPathProvider(_ value: ListWebACLsInput) -> Swift.String? {
        return "/"
    }
}

extension ListXssMatchSetsInput {

    static func urlPathProvider(_ value: ListXssMatchSetsInput) -> Swift.String? {
        return "/"
    }
}

extension PutLoggingConfigurationInput {

    static func urlPathProvider(_ value: PutLoggingConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension PutPermissionPolicyInput {

    static func urlPathProvider(_ value: PutPermissionPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateByteMatchSetInput {

    static func urlPathProvider(_ value: UpdateByteMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateGeoMatchSetInput {

    static func urlPathProvider(_ value: UpdateGeoMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateIPSetInput {

    static func urlPathProvider(_ value: UpdateIPSetInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateRateBasedRuleInput {

    static func urlPathProvider(_ value: UpdateRateBasedRuleInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateRegexMatchSetInput {

    static func urlPathProvider(_ value: UpdateRegexMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateRegexPatternSetInput {

    static func urlPathProvider(_ value: UpdateRegexPatternSetInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateRuleInput {

    static func urlPathProvider(_ value: UpdateRuleInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateRuleGroupInput {

    static func urlPathProvider(_ value: UpdateRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateSizeConstraintSetInput {

    static func urlPathProvider(_ value: UpdateSizeConstraintSetInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateSqlInjectionMatchSetInput {

    static func urlPathProvider(_ value: UpdateSqlInjectionMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateWebACLInput {

    static func urlPathProvider(_ value: UpdateWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateXssMatchSetInput {

    static func urlPathProvider(_ value: UpdateXssMatchSetInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateWebACLInput {

    static func write(value: AssociateWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["WebACLId"].write(value.webACLId)
    }
}

extension CreateByteMatchSetInput {

    static func write(value: CreateByteMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["Name"].write(value.name)
    }
}

extension CreateGeoMatchSetInput {

    static func write(value: CreateGeoMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["Name"].write(value.name)
    }
}

extension CreateIPSetInput {

    static func write(value: CreateIPSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["Name"].write(value.name)
    }
}

extension CreateRateBasedRuleInput {

    static func write(value: CreateRateBasedRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["MetricName"].write(value.metricName)
        try writer["Name"].write(value.name)
        try writer["RateKey"].write(value.rateKey)
        try writer["RateLimit"].write(value.rateLimit)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: WAFRegionalClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateRegexMatchSetInput {

    static func write(value: CreateRegexMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["Name"].write(value.name)
    }
}

extension CreateRegexPatternSetInput {

    static func write(value: CreateRegexPatternSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["Name"].write(value.name)
    }
}

extension CreateRuleInput {

    static func write(value: CreateRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["MetricName"].write(value.metricName)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: WAFRegionalClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateRuleGroupInput {

    static func write(value: CreateRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["MetricName"].write(value.metricName)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: WAFRegionalClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateSizeConstraintSetInput {

    static func write(value: CreateSizeConstraintSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["Name"].write(value.name)
    }
}

extension CreateSqlInjectionMatchSetInput {

    static func write(value: CreateSqlInjectionMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["Name"].write(value.name)
    }
}

extension CreateWebACLInput {

    static func write(value: CreateWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["DefaultAction"].write(value.defaultAction, with: WAFRegionalClientTypes.WafAction.write(value:to:))
        try writer["MetricName"].write(value.metricName)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: WAFRegionalClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateWebACLMigrationStackInput {

    static func write(value: CreateWebACLMigrationStackInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IgnoreUnsupportedType"].write(value.ignoreUnsupportedType)
        try writer["S3BucketName"].write(value.s3BucketName)
        try writer["WebACLId"].write(value.webACLId)
    }
}

extension CreateXssMatchSetInput {

    static func write(value: CreateXssMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["Name"].write(value.name)
    }
}

extension DeleteByteMatchSetInput {

    static func write(value: DeleteByteMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ByteMatchSetId"].write(value.byteMatchSetId)
        try writer["ChangeToken"].write(value.changeToken)
    }
}

extension DeleteGeoMatchSetInput {

    static func write(value: DeleteGeoMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["GeoMatchSetId"].write(value.geoMatchSetId)
    }
}

extension DeleteIPSetInput {

    static func write(value: DeleteIPSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["IPSetId"].write(value.ipSetId)
    }
}

extension DeleteLoggingConfigurationInput {

    static func write(value: DeleteLoggingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension DeletePermissionPolicyInput {

    static func write(value: DeletePermissionPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension DeleteRateBasedRuleInput {

    static func write(value: DeleteRateBasedRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["RuleId"].write(value.ruleId)
    }
}

extension DeleteRegexMatchSetInput {

    static func write(value: DeleteRegexMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["RegexMatchSetId"].write(value.regexMatchSetId)
    }
}

extension DeleteRegexPatternSetInput {

    static func write(value: DeleteRegexPatternSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["RegexPatternSetId"].write(value.regexPatternSetId)
    }
}

extension DeleteRuleInput {

    static func write(value: DeleteRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["RuleId"].write(value.ruleId)
    }
}

extension DeleteRuleGroupInput {

    static func write(value: DeleteRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["RuleGroupId"].write(value.ruleGroupId)
    }
}

extension DeleteSizeConstraintSetInput {

    static func write(value: DeleteSizeConstraintSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["SizeConstraintSetId"].write(value.sizeConstraintSetId)
    }
}

extension DeleteSqlInjectionMatchSetInput {

    static func write(value: DeleteSqlInjectionMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["SqlInjectionMatchSetId"].write(value.sqlInjectionMatchSetId)
    }
}

extension DeleteWebACLInput {

    static func write(value: DeleteWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["WebACLId"].write(value.webACLId)
    }
}

extension DeleteXssMatchSetInput {

    static func write(value: DeleteXssMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["XssMatchSetId"].write(value.xssMatchSetId)
    }
}

extension DisassociateWebACLInput {

    static func write(value: DisassociateWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension GetByteMatchSetInput {

    static func write(value: GetByteMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ByteMatchSetId"].write(value.byteMatchSetId)
    }
}

extension GetChangeTokenInput {

    static func write(value: GetChangeTokenInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetChangeTokenStatusInput {

    static func write(value: GetChangeTokenStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
    }
}

extension GetGeoMatchSetInput {

    static func write(value: GetGeoMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GeoMatchSetId"].write(value.geoMatchSetId)
    }
}

extension GetIPSetInput {

    static func write(value: GetIPSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IPSetId"].write(value.ipSetId)
    }
}

extension GetLoggingConfigurationInput {

    static func write(value: GetLoggingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension GetPermissionPolicyInput {

    static func write(value: GetPermissionPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension GetRateBasedRuleInput {

    static func write(value: GetRateBasedRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RuleId"].write(value.ruleId)
    }
}

extension GetRateBasedRuleManagedKeysInput {

    static func write(value: GetRateBasedRuleManagedKeysInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NextMarker"].write(value.nextMarker)
        try writer["RuleId"].write(value.ruleId)
    }
}

extension GetRegexMatchSetInput {

    static func write(value: GetRegexMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RegexMatchSetId"].write(value.regexMatchSetId)
    }
}

extension GetRegexPatternSetInput {

    static func write(value: GetRegexPatternSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RegexPatternSetId"].write(value.regexPatternSetId)
    }
}

extension GetRuleInput {

    static func write(value: GetRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RuleId"].write(value.ruleId)
    }
}

extension GetRuleGroupInput {

    static func write(value: GetRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RuleGroupId"].write(value.ruleGroupId)
    }
}

extension GetSampledRequestsInput {

    static func write(value: GetSampledRequestsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxItems"].write(value.maxItems)
        try writer["RuleId"].write(value.ruleId)
        try writer["TimeWindow"].write(value.timeWindow, with: WAFRegionalClientTypes.TimeWindow.write(value:to:))
        try writer["WebAclId"].write(value.webAclId)
    }
}

extension GetSizeConstraintSetInput {

    static func write(value: GetSizeConstraintSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SizeConstraintSetId"].write(value.sizeConstraintSetId)
    }
}

extension GetSqlInjectionMatchSetInput {

    static func write(value: GetSqlInjectionMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SqlInjectionMatchSetId"].write(value.sqlInjectionMatchSetId)
    }
}

extension GetWebACLInput {

    static func write(value: GetWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["WebACLId"].write(value.webACLId)
    }
}

extension GetWebACLForResourceInput {

    static func write(value: GetWebACLForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension GetXssMatchSetInput {

    static func write(value: GetXssMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["XssMatchSetId"].write(value.xssMatchSetId)
    }
}

extension ListActivatedRulesInRuleGroupInput {

    static func write(value: ListActivatedRulesInRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["RuleGroupId"].write(value.ruleGroupId)
    }
}

extension ListByteMatchSetsInput {

    static func write(value: ListByteMatchSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension ListGeoMatchSetsInput {

    static func write(value: ListGeoMatchSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension ListIPSetsInput {

    static func write(value: ListIPSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension ListLoggingConfigurationsInput {

    static func write(value: ListLoggingConfigurationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension ListRateBasedRulesInput {

    static func write(value: ListRateBasedRulesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension ListRegexMatchSetsInput {

    static func write(value: ListRegexMatchSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension ListRegexPatternSetsInput {

    static func write(value: ListRegexPatternSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension ListResourcesForWebACLInput {

    static func write(value: ListResourcesForWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceType"].write(value.resourceType)
        try writer["WebACLId"].write(value.webACLId)
    }
}

extension ListRuleGroupsInput {

    static func write(value: ListRuleGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension ListRulesInput {

    static func write(value: ListRulesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension ListSizeConstraintSetsInput {

    static func write(value: ListSizeConstraintSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension ListSqlInjectionMatchSetsInput {

    static func write(value: ListSqlInjectionMatchSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension ListSubscribedRuleGroupsInput {

    static func write(value: ListSubscribedRuleGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["ResourceARN"].write(value.resourceARN)
    }
}

extension ListWebACLsInput {

    static func write(value: ListWebACLsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension ListXssMatchSetsInput {

    static func write(value: ListXssMatchSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
    }
}

extension PutLoggingConfigurationInput {

    static func write(value: PutLoggingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LoggingConfiguration"].write(value.loggingConfiguration, with: WAFRegionalClientTypes.LoggingConfiguration.write(value:to:))
    }
}

extension PutPermissionPolicyInput {

    static func write(value: PutPermissionPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: WAFRegionalClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateByteMatchSetInput {

    static func write(value: UpdateByteMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ByteMatchSetId"].write(value.byteMatchSetId)
        try writer["ChangeToken"].write(value.changeToken)
        try writer["Updates"].writeList(value.updates, memberWritingClosure: WAFRegionalClientTypes.ByteMatchSetUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateGeoMatchSetInput {

    static func write(value: UpdateGeoMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["GeoMatchSetId"].write(value.geoMatchSetId)
        try writer["Updates"].writeList(value.updates, memberWritingClosure: WAFRegionalClientTypes.GeoMatchSetUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateIPSetInput {

    static func write(value: UpdateIPSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["IPSetId"].write(value.ipSetId)
        try writer["Updates"].writeList(value.updates, memberWritingClosure: WAFRegionalClientTypes.IPSetUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateRateBasedRuleInput {

    static func write(value: UpdateRateBasedRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["RateLimit"].write(value.rateLimit)
        try writer["RuleId"].write(value.ruleId)
        try writer["Updates"].writeList(value.updates, memberWritingClosure: WAFRegionalClientTypes.RuleUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateRegexMatchSetInput {

    static func write(value: UpdateRegexMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["RegexMatchSetId"].write(value.regexMatchSetId)
        try writer["Updates"].writeList(value.updates, memberWritingClosure: WAFRegionalClientTypes.RegexMatchSetUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateRegexPatternSetInput {

    static func write(value: UpdateRegexPatternSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["RegexPatternSetId"].write(value.regexPatternSetId)
        try writer["Updates"].writeList(value.updates, memberWritingClosure: WAFRegionalClientTypes.RegexPatternSetUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateRuleInput {

    static func write(value: UpdateRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["RuleId"].write(value.ruleId)
        try writer["Updates"].writeList(value.updates, memberWritingClosure: WAFRegionalClientTypes.RuleUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateRuleGroupInput {

    static func write(value: UpdateRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["RuleGroupId"].write(value.ruleGroupId)
        try writer["Updates"].writeList(value.updates, memberWritingClosure: WAFRegionalClientTypes.RuleGroupUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateSizeConstraintSetInput {

    static func write(value: UpdateSizeConstraintSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["SizeConstraintSetId"].write(value.sizeConstraintSetId)
        try writer["Updates"].writeList(value.updates, memberWritingClosure: WAFRegionalClientTypes.SizeConstraintSetUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateSqlInjectionMatchSetInput {

    static func write(value: UpdateSqlInjectionMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["SqlInjectionMatchSetId"].write(value.sqlInjectionMatchSetId)
        try writer["Updates"].writeList(value.updates, memberWritingClosure: WAFRegionalClientTypes.SqlInjectionMatchSetUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateWebACLInput {

    static func write(value: UpdateWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["DefaultAction"].write(value.defaultAction, with: WAFRegionalClientTypes.WafAction.write(value:to:))
        try writer["Updates"].writeList(value.updates, memberWritingClosure: WAFRegionalClientTypes.WebACLUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["WebACLId"].write(value.webACLId)
    }
}

extension UpdateXssMatchSetInput {

    static func write(value: UpdateXssMatchSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeToken"].write(value.changeToken)
        try writer["Updates"].writeList(value.updates, memberWritingClosure: WAFRegionalClientTypes.XssMatchSetUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["XssMatchSetId"].write(value.xssMatchSetId)
    }
}

extension AssociateWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateWebACLOutput {
        return AssociateWebACLOutput()
    }
}

extension CreateByteMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateByteMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateByteMatchSetOutput()
        value.byteMatchSet = try reader["ByteMatchSet"].readIfPresent(with: WAFRegionalClientTypes.ByteMatchSet.read(from:))
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension CreateGeoMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGeoMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateGeoMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        value.geoMatchSet = try reader["GeoMatchSet"].readIfPresent(with: WAFRegionalClientTypes.GeoMatchSet.read(from:))
        return value
    }
}

extension CreateIPSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateIPSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateIPSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        value.ipSet = try reader["IPSet"].readIfPresent(with: WAFRegionalClientTypes.IPSet.read(from:))
        return value
    }
}

extension CreateRateBasedRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRateBasedRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRateBasedRuleOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        value.rule = try reader["Rule"].readIfPresent(with: WAFRegionalClientTypes.RateBasedRule.read(from:))
        return value
    }
}

extension CreateRegexMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRegexMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRegexMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        value.regexMatchSet = try reader["RegexMatchSet"].readIfPresent(with: WAFRegionalClientTypes.RegexMatchSet.read(from:))
        return value
    }
}

extension CreateRegexPatternSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRegexPatternSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRegexPatternSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        value.regexPatternSet = try reader["RegexPatternSet"].readIfPresent(with: WAFRegionalClientTypes.RegexPatternSet.read(from:))
        return value
    }
}

extension CreateRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRuleOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        value.rule = try reader["Rule"].readIfPresent(with: WAFRegionalClientTypes.Rule.read(from:))
        return value
    }
}

extension CreateRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRuleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRuleGroupOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        value.ruleGroup = try reader["RuleGroup"].readIfPresent(with: WAFRegionalClientTypes.RuleGroup.read(from:))
        return value
    }
}

extension CreateSizeConstraintSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSizeConstraintSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSizeConstraintSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        value.sizeConstraintSet = try reader["SizeConstraintSet"].readIfPresent(with: WAFRegionalClientTypes.SizeConstraintSet.read(from:))
        return value
    }
}

extension CreateSqlInjectionMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSqlInjectionMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSqlInjectionMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        value.sqlInjectionMatchSet = try reader["SqlInjectionMatchSet"].readIfPresent(with: WAFRegionalClientTypes.SqlInjectionMatchSet.read(from:))
        return value
    }
}

extension CreateWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWebACLOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateWebACLOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        value.webACL = try reader["WebACL"].readIfPresent(with: WAFRegionalClientTypes.WebACL.read(from:))
        return value
    }
}

extension CreateWebACLMigrationStackOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWebACLMigrationStackOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateWebACLMigrationStackOutput()
        value.s3ObjectUrl = try reader["S3ObjectUrl"].readIfPresent() ?? ""
        return value
    }
}

extension CreateXssMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateXssMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateXssMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        value.xssMatchSet = try reader["XssMatchSet"].readIfPresent(with: WAFRegionalClientTypes.XssMatchSet.read(from:))
        return value
    }
}

extension DeleteByteMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteByteMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteByteMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension DeleteGeoMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteGeoMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteGeoMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension DeleteIPSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteIPSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteIPSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension DeleteLoggingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLoggingConfigurationOutput {
        return DeleteLoggingConfigurationOutput()
    }
}

extension DeletePermissionPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePermissionPolicyOutput {
        return DeletePermissionPolicyOutput()
    }
}

extension DeleteRateBasedRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRateBasedRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteRateBasedRuleOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension DeleteRegexMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRegexMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteRegexMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension DeleteRegexPatternSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRegexPatternSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteRegexPatternSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension DeleteRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteRuleOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension DeleteRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRuleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteRuleGroupOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension DeleteSizeConstraintSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSizeConstraintSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteSizeConstraintSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension DeleteSqlInjectionMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSqlInjectionMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteSqlInjectionMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension DeleteWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteWebACLOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteWebACLOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension DeleteXssMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteXssMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteXssMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension DisassociateWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateWebACLOutput {
        return DisassociateWebACLOutput()
    }
}

extension GetByteMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetByteMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetByteMatchSetOutput()
        value.byteMatchSet = try reader["ByteMatchSet"].readIfPresent(with: WAFRegionalClientTypes.ByteMatchSet.read(from:))
        return value
    }
}

extension GetChangeTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetChangeTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetChangeTokenOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension GetChangeTokenStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetChangeTokenStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetChangeTokenStatusOutput()
        value.changeTokenStatus = try reader["ChangeTokenStatus"].readIfPresent()
        return value
    }
}

extension GetGeoMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetGeoMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetGeoMatchSetOutput()
        value.geoMatchSet = try reader["GeoMatchSet"].readIfPresent(with: WAFRegionalClientTypes.GeoMatchSet.read(from:))
        return value
    }
}

extension GetIPSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetIPSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetIPSetOutput()
        value.ipSet = try reader["IPSet"].readIfPresent(with: WAFRegionalClientTypes.IPSet.read(from:))
        return value
    }
}

extension GetLoggingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLoggingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLoggingConfigurationOutput()
        value.loggingConfiguration = try reader["LoggingConfiguration"].readIfPresent(with: WAFRegionalClientTypes.LoggingConfiguration.read(from:))
        return value
    }
}

extension GetPermissionPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPermissionPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPermissionPolicyOutput()
        value.policy = try reader["Policy"].readIfPresent()
        return value
    }
}

extension GetRateBasedRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRateBasedRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRateBasedRuleOutput()
        value.rule = try reader["Rule"].readIfPresent(with: WAFRegionalClientTypes.RateBasedRule.read(from:))
        return value
    }
}

extension GetRateBasedRuleManagedKeysOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRateBasedRuleManagedKeysOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRateBasedRuleManagedKeysOutput()
        value.managedKeys = try reader["ManagedKeys"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension GetRegexMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRegexMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRegexMatchSetOutput()
        value.regexMatchSet = try reader["RegexMatchSet"].readIfPresent(with: WAFRegionalClientTypes.RegexMatchSet.read(from:))
        return value
    }
}

extension GetRegexPatternSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRegexPatternSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRegexPatternSetOutput()
        value.regexPatternSet = try reader["RegexPatternSet"].readIfPresent(with: WAFRegionalClientTypes.RegexPatternSet.read(from:))
        return value
    }
}

extension GetRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRuleOutput()
        value.rule = try reader["Rule"].readIfPresent(with: WAFRegionalClientTypes.Rule.read(from:))
        return value
    }
}

extension GetRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRuleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRuleGroupOutput()
        value.ruleGroup = try reader["RuleGroup"].readIfPresent(with: WAFRegionalClientTypes.RuleGroup.read(from:))
        return value
    }
}

extension GetSampledRequestsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSampledRequestsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSampledRequestsOutput()
        value.populationSize = try reader["PopulationSize"].readIfPresent() ?? 0
        value.sampledRequests = try reader["SampledRequests"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.SampledHTTPRequest.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.timeWindow = try reader["TimeWindow"].readIfPresent(with: WAFRegionalClientTypes.TimeWindow.read(from:))
        return value
    }
}

extension GetSizeConstraintSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSizeConstraintSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSizeConstraintSetOutput()
        value.sizeConstraintSet = try reader["SizeConstraintSet"].readIfPresent(with: WAFRegionalClientTypes.SizeConstraintSet.read(from:))
        return value
    }
}

extension GetSqlInjectionMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSqlInjectionMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSqlInjectionMatchSetOutput()
        value.sqlInjectionMatchSet = try reader["SqlInjectionMatchSet"].readIfPresent(with: WAFRegionalClientTypes.SqlInjectionMatchSet.read(from:))
        return value
    }
}

extension GetWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetWebACLOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetWebACLOutput()
        value.webACL = try reader["WebACL"].readIfPresent(with: WAFRegionalClientTypes.WebACL.read(from:))
        return value
    }
}

extension GetWebACLForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetWebACLForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetWebACLForResourceOutput()
        value.webACLSummary = try reader["WebACLSummary"].readIfPresent(with: WAFRegionalClientTypes.WebACLSummary.read(from:))
        return value
    }
}

extension GetXssMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetXssMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetXssMatchSetOutput()
        value.xssMatchSet = try reader["XssMatchSet"].readIfPresent(with: WAFRegionalClientTypes.XssMatchSet.read(from:))
        return value
    }
}

extension ListActivatedRulesInRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListActivatedRulesInRuleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListActivatedRulesInRuleGroupOutput()
        value.activatedRules = try reader["ActivatedRules"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.ActivatedRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension ListByteMatchSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListByteMatchSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListByteMatchSetsOutput()
        value.byteMatchSets = try reader["ByteMatchSets"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.ByteMatchSetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension ListGeoMatchSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGeoMatchSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGeoMatchSetsOutput()
        value.geoMatchSets = try reader["GeoMatchSets"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.GeoMatchSetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension ListIPSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListIPSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListIPSetsOutput()
        value.ipSets = try reader["IPSets"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.IPSetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension ListLoggingConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListLoggingConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListLoggingConfigurationsOutput()
        value.loggingConfigurations = try reader["LoggingConfigurations"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.LoggingConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension ListRateBasedRulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRateBasedRulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRateBasedRulesOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.RuleSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRegexMatchSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRegexMatchSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRegexMatchSetsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.regexMatchSets = try reader["RegexMatchSets"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.RegexMatchSetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRegexPatternSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRegexPatternSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRegexPatternSetsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.regexPatternSets = try reader["RegexPatternSets"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.RegexPatternSetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListResourcesForWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourcesForWebACLOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourcesForWebACLOutput()
        value.resourceArns = try reader["ResourceArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRuleGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRuleGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRuleGroupsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.ruleGroups = try reader["RuleGroups"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.RuleGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRulesOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.RuleSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSizeConstraintSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSizeConstraintSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSizeConstraintSetsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.sizeConstraintSets = try reader["SizeConstraintSets"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.SizeConstraintSetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSqlInjectionMatchSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSqlInjectionMatchSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSqlInjectionMatchSetsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.sqlInjectionMatchSets = try reader["SqlInjectionMatchSets"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.SqlInjectionMatchSetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSubscribedRuleGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSubscribedRuleGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSubscribedRuleGroupsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.ruleGroups = try reader["RuleGroups"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.SubscribedRuleGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.tagInfoForResource = try reader["TagInfoForResource"].readIfPresent(with: WAFRegionalClientTypes.TagInfoForResource.read(from:))
        return value
    }
}

extension ListWebACLsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListWebACLsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListWebACLsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.webACLs = try reader["WebACLs"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.WebACLSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListXssMatchSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListXssMatchSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListXssMatchSetsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.xssMatchSets = try reader["XssMatchSets"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.XssMatchSetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutLoggingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutLoggingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutLoggingConfigurationOutput()
        value.loggingConfiguration = try reader["LoggingConfiguration"].readIfPresent(with: WAFRegionalClientTypes.LoggingConfiguration.read(from:))
        return value
    }
}

extension PutPermissionPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutPermissionPolicyOutput {
        return PutPermissionPolicyOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateByteMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateByteMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateByteMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension UpdateGeoMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateGeoMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateGeoMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension UpdateIPSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateIPSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateIPSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension UpdateRateBasedRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRateBasedRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRateBasedRuleOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension UpdateRegexMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRegexMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRegexMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension UpdateRegexPatternSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRegexPatternSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRegexPatternSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension UpdateRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRuleOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension UpdateRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRuleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRuleGroupOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension UpdateSizeConstraintSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSizeConstraintSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSizeConstraintSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension UpdateSqlInjectionMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSqlInjectionMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSqlInjectionMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension UpdateWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateWebACLOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateWebACLOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

extension UpdateXssMatchSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateXssMatchSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateXssMatchSetOutput()
        value.changeToken = try reader["ChangeToken"].readIfPresent()
        return value
    }
}

enum AssociateWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFUnavailableEntityException": return try WAFUnavailableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateByteMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDisallowedNameException": return try WAFDisallowedNameException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGeoMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDisallowedNameException": return try WAFDisallowedNameException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateIPSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDisallowedNameException": return try WAFDisallowedNameException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRateBasedRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFBadRequestException": return try WAFBadRequestException.makeError(baseError: baseError)
            case "WAFDisallowedNameException": return try WAFDisallowedNameException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRegexMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDisallowedNameException": return try WAFDisallowedNameException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRegexPatternSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDisallowedNameException": return try WAFDisallowedNameException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFBadRequestException": return try WAFBadRequestException.makeError(baseError: baseError)
            case "WAFDisallowedNameException": return try WAFDisallowedNameException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFBadRequestException": return try WAFBadRequestException.makeError(baseError: baseError)
            case "WAFDisallowedNameException": return try WAFDisallowedNameException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSizeConstraintSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDisallowedNameException": return try WAFDisallowedNameException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSqlInjectionMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDisallowedNameException": return try WAFDisallowedNameException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFBadRequestException": return try WAFBadRequestException.makeError(baseError: baseError)
            case "WAFDisallowedNameException": return try WAFDisallowedNameException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWebACLMigrationStackOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFEntityMigrationException": return try WAFEntityMigrationException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateXssMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDisallowedNameException": return try WAFDisallowedNameException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteByteMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonEmptyEntityException": return try WAFNonEmptyEntityException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteGeoMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonEmptyEntityException": return try WAFNonEmptyEntityException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteIPSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonEmptyEntityException": return try WAFNonEmptyEntityException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLoggingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePermissionPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRateBasedRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonEmptyEntityException": return try WAFNonEmptyEntityException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRegexMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonEmptyEntityException": return try WAFNonEmptyEntityException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRegexPatternSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonEmptyEntityException": return try WAFNonEmptyEntityException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonEmptyEntityException": return try WAFNonEmptyEntityException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFNonEmptyEntityException": return try WAFNonEmptyEntityException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSizeConstraintSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonEmptyEntityException": return try WAFNonEmptyEntityException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSqlInjectionMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonEmptyEntityException": return try WAFNonEmptyEntityException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonEmptyEntityException": return try WAFNonEmptyEntityException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteXssMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonEmptyEntityException": return try WAFNonEmptyEntityException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetByteMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetChangeTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetChangeTokenStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetGeoMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetIPSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLoggingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPermissionPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRateBasedRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRateBasedRuleManagedKeysOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRegexMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRegexPatternSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSampledRequestsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSizeConstraintSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSqlInjectionMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetWebACLForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFUnavailableEntityException": return try WAFUnavailableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetXssMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListActivatedRulesInRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListByteMatchSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGeoMatchSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListIPSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListLoggingConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRateBasedRulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRegexMatchSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRegexPatternSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourcesForWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRuleGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSizeConstraintSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSqlInjectionMatchSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSubscribedRuleGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFBadRequestException": return try WAFBadRequestException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListWebACLsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListXssMatchSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutLoggingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFServiceLinkedRoleErrorException": return try WAFServiceLinkedRoleErrorException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutPermissionPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidPermissionPolicyException": return try WAFInvalidPermissionPolicyException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFBadRequestException": return try WAFBadRequestException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFBadRequestException": return try WAFBadRequestException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateByteMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentContainerException": return try WAFNonexistentContainerException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateGeoMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentContainerException": return try WAFNonexistentContainerException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateIPSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentContainerException": return try WAFNonexistentContainerException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRateBasedRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentContainerException": return try WAFNonexistentContainerException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRegexMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDisallowedNameException": return try WAFDisallowedNameException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentContainerException": return try WAFNonexistentContainerException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRegexPatternSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidRegexPatternException": return try WAFInvalidRegexPatternException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentContainerException": return try WAFNonexistentContainerException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentContainerException": return try WAFNonexistentContainerException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentContainerException": return try WAFNonexistentContainerException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSizeConstraintSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentContainerException": return try WAFNonexistentContainerException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSqlInjectionMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentContainerException": return try WAFNonexistentContainerException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentContainerException": return try WAFNonexistentContainerException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFReferencedItemException": return try WAFReferencedItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            case "WAFSubscriptionNotFoundException": return try WAFSubscriptionNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateXssMatchSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidAccountException": return try WAFInvalidAccountException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentContainerException": return try WAFNonexistentContainerException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFStaleDataException": return try WAFStaleDataException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension WAFInvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFInvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = WAFInvalidParameterException()
        value.properties.field = try reader["field"].readIfPresent()
        value.properties.parameter = try reader["parameter"].readIfPresent()
        value.properties.reason = try reader["reason"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFInternalErrorException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFInternalErrorException {
        let reader = baseError.errorBodyReader
        var value = WAFInternalErrorException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFUnavailableEntityException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFUnavailableEntityException {
        let reader = baseError.errorBodyReader
        var value = WAFUnavailableEntityException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFNonexistentItemException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFNonexistentItemException {
        let reader = baseError.errorBodyReader
        var value = WAFNonexistentItemException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFInvalidAccountException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFInvalidAccountException {
        var value = WAFInvalidAccountException()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFStaleDataException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFStaleDataException {
        let reader = baseError.errorBodyReader
        var value = WAFStaleDataException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFDisallowedNameException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFDisallowedNameException {
        let reader = baseError.errorBodyReader
        var value = WAFDisallowedNameException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFLimitsExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFLimitsExceededException {
        let reader = baseError.errorBodyReader
        var value = WAFLimitsExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFTagOperationInternalErrorException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFTagOperationInternalErrorException {
        let reader = baseError.errorBodyReader
        var value = WAFTagOperationInternalErrorException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFTagOperationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFTagOperationException {
        let reader = baseError.errorBodyReader
        var value = WAFTagOperationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFBadRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFBadRequestException {
        let reader = baseError.errorBodyReader
        var value = WAFBadRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFInvalidOperationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFInvalidOperationException {
        let reader = baseError.errorBodyReader
        var value = WAFInvalidOperationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFEntityMigrationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFEntityMigrationException {
        let reader = baseError.errorBodyReader
        var value = WAFEntityMigrationException()
        value.properties.migrationErrorReason = try reader["MigrationErrorReason"].readIfPresent()
        value.properties.migrationErrorType = try reader["MigrationErrorType"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFNonEmptyEntityException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFNonEmptyEntityException {
        let reader = baseError.errorBodyReader
        var value = WAFNonEmptyEntityException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFReferencedItemException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFReferencedItemException {
        let reader = baseError.errorBodyReader
        var value = WAFReferencedItemException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFServiceLinkedRoleErrorException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFServiceLinkedRoleErrorException {
        let reader = baseError.errorBodyReader
        var value = WAFServiceLinkedRoleErrorException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFInvalidPermissionPolicyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFInvalidPermissionPolicyException {
        let reader = baseError.errorBodyReader
        var value = WAFInvalidPermissionPolicyException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFNonexistentContainerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFNonexistentContainerException {
        let reader = baseError.errorBodyReader
        var value = WAFNonexistentContainerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFInvalidRegexPatternException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFInvalidRegexPatternException {
        let reader = baseError.errorBodyReader
        var value = WAFInvalidRegexPatternException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFSubscriptionNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFSubscriptionNotFoundException {
        let reader = baseError.errorBodyReader
        var value = WAFSubscriptionNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFRegionalClientTypes.ByteMatchSet {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.ByteMatchSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.ByteMatchSet()
        value.byteMatchSetId = try reader["ByteMatchSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent()
        value.byteMatchTuples = try reader["ByteMatchTuples"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.ByteMatchTuple.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFRegionalClientTypes.ByteMatchTuple {

    static func write(value: WAFRegionalClientTypes.ByteMatchTuple?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FieldToMatch"].write(value.fieldToMatch, with: WAFRegionalClientTypes.FieldToMatch.write(value:to:))
        try writer["PositionalConstraint"].write(value.positionalConstraint)
        try writer["TargetString"].write(value.targetString)
        try writer["TextTransformation"].write(value.textTransformation)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.ByteMatchTuple {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.ByteMatchTuple()
        value.fieldToMatch = try reader["FieldToMatch"].readIfPresent(with: WAFRegionalClientTypes.FieldToMatch.read(from:))
        value.targetString = try reader["TargetString"].readIfPresent() ?? Foundation.Data("".utf8)
        value.textTransformation = try reader["TextTransformation"].readIfPresent() ?? .sdkUnknown("")
        value.positionalConstraint = try reader["PositionalConstraint"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFRegionalClientTypes.FieldToMatch {

    static func write(value: WAFRegionalClientTypes.FieldToMatch?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Data"].write(value.data)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.FieldToMatch {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.FieldToMatch()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.data = try reader["Data"].readIfPresent()
        return value
    }
}

extension WAFRegionalClientTypes.GeoMatchSet {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.GeoMatchSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.GeoMatchSet()
        value.geoMatchSetId = try reader["GeoMatchSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent()
        value.geoMatchConstraints = try reader["GeoMatchConstraints"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.GeoMatchConstraint.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFRegionalClientTypes.GeoMatchConstraint {

    static func write(value: WAFRegionalClientTypes.GeoMatchConstraint?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Type"].write(value.type)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.GeoMatchConstraint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.GeoMatchConstraint()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.value = try reader["Value"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFRegionalClientTypes.IPSet {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.IPSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.IPSet()
        value.ipSetId = try reader["IPSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent()
        value.ipSetDescriptors = try reader["IPSetDescriptors"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.IPSetDescriptor.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFRegionalClientTypes.IPSetDescriptor {

    static func write(value: WAFRegionalClientTypes.IPSetDescriptor?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Type"].write(value.type)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.IPSetDescriptor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.IPSetDescriptor()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.RateBasedRule {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.RateBasedRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.RateBasedRule()
        value.ruleId = try reader["RuleId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent()
        value.metricName = try reader["MetricName"].readIfPresent()
        value.matchPredicates = try reader["MatchPredicates"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.Predicate.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.rateKey = try reader["RateKey"].readIfPresent() ?? .sdkUnknown("")
        value.rateLimit = try reader["RateLimit"].readIfPresent() ?? 0
        return value
    }
}

extension WAFRegionalClientTypes.Predicate {

    static func write(value: WAFRegionalClientTypes.Predicate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataId"].write(value.dataId)
        try writer["Negated"].write(value.negated)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.Predicate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.Predicate()
        value.negated = try reader["Negated"].readIfPresent() ?? false
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.dataId = try reader["DataId"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.RegexMatchSet {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.RegexMatchSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.RegexMatchSet()
        value.regexMatchSetId = try reader["RegexMatchSetId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.regexMatchTuples = try reader["RegexMatchTuples"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.RegexMatchTuple.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFRegionalClientTypes.RegexMatchTuple {

    static func write(value: WAFRegionalClientTypes.RegexMatchTuple?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FieldToMatch"].write(value.fieldToMatch, with: WAFRegionalClientTypes.FieldToMatch.write(value:to:))
        try writer["RegexPatternSetId"].write(value.regexPatternSetId)
        try writer["TextTransformation"].write(value.textTransformation)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.RegexMatchTuple {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.RegexMatchTuple()
        value.fieldToMatch = try reader["FieldToMatch"].readIfPresent(with: WAFRegionalClientTypes.FieldToMatch.read(from:))
        value.textTransformation = try reader["TextTransformation"].readIfPresent() ?? .sdkUnknown("")
        value.regexPatternSetId = try reader["RegexPatternSetId"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.RegexPatternSet {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.RegexPatternSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.RegexPatternSet()
        value.regexPatternSetId = try reader["RegexPatternSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent()
        value.regexPatternStrings = try reader["RegexPatternStrings"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFRegionalClientTypes.Rule {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.Rule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.Rule()
        value.ruleId = try reader["RuleId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent()
        value.metricName = try reader["MetricName"].readIfPresent()
        value.predicates = try reader["Predicates"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.Predicate.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFRegionalClientTypes.RuleGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.RuleGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.RuleGroup()
        value.ruleGroupId = try reader["RuleGroupId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent()
        value.metricName = try reader["MetricName"].readIfPresent()
        return value
    }
}

extension WAFRegionalClientTypes.SizeConstraintSet {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.SizeConstraintSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.SizeConstraintSet()
        value.sizeConstraintSetId = try reader["SizeConstraintSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent()
        value.sizeConstraints = try reader["SizeConstraints"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.SizeConstraint.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFRegionalClientTypes.SizeConstraint {

    static func write(value: WAFRegionalClientTypes.SizeConstraint?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComparisonOperator"].write(value.comparisonOperator)
        try writer["FieldToMatch"].write(value.fieldToMatch, with: WAFRegionalClientTypes.FieldToMatch.write(value:to:))
        try writer["Size"].write(value.size)
        try writer["TextTransformation"].write(value.textTransformation)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.SizeConstraint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.SizeConstraint()
        value.fieldToMatch = try reader["FieldToMatch"].readIfPresent(with: WAFRegionalClientTypes.FieldToMatch.read(from:))
        value.textTransformation = try reader["TextTransformation"].readIfPresent() ?? .sdkUnknown("")
        value.comparisonOperator = try reader["ComparisonOperator"].readIfPresent() ?? .sdkUnknown("")
        value.size = try reader["Size"].readIfPresent() ?? 0
        return value
    }
}

extension WAFRegionalClientTypes.SqlInjectionMatchSet {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.SqlInjectionMatchSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.SqlInjectionMatchSet()
        value.sqlInjectionMatchSetId = try reader["SqlInjectionMatchSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent()
        value.sqlInjectionMatchTuples = try reader["SqlInjectionMatchTuples"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.SqlInjectionMatchTuple.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFRegionalClientTypes.SqlInjectionMatchTuple {

    static func write(value: WAFRegionalClientTypes.SqlInjectionMatchTuple?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FieldToMatch"].write(value.fieldToMatch, with: WAFRegionalClientTypes.FieldToMatch.write(value:to:))
        try writer["TextTransformation"].write(value.textTransformation)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.SqlInjectionMatchTuple {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.SqlInjectionMatchTuple()
        value.fieldToMatch = try reader["FieldToMatch"].readIfPresent(with: WAFRegionalClientTypes.FieldToMatch.read(from:))
        value.textTransformation = try reader["TextTransformation"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFRegionalClientTypes.WebACL {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.WebACL {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.WebACL()
        value.webACLId = try reader["WebACLId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent()
        value.metricName = try reader["MetricName"].readIfPresent()
        value.defaultAction = try reader["DefaultAction"].readIfPresent(with: WAFRegionalClientTypes.WafAction.read(from:))
        value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.ActivatedRule.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.webACLArn = try reader["WebACLArn"].readIfPresent()
        return value
    }
}

extension WAFRegionalClientTypes.ActivatedRule {

    static func write(value: WAFRegionalClientTypes.ActivatedRule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action, with: WAFRegionalClientTypes.WafAction.write(value:to:))
        try writer["ExcludedRules"].writeList(value.excludedRules, memberWritingClosure: WAFRegionalClientTypes.ExcludedRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OverrideAction"].write(value.overrideAction, with: WAFRegionalClientTypes.WafOverrideAction.write(value:to:))
        try writer["Priority"].write(value.priority)
        try writer["RuleId"].write(value.ruleId)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.ActivatedRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.ActivatedRule()
        value.priority = try reader["Priority"].readIfPresent() ?? 0
        value.ruleId = try reader["RuleId"].readIfPresent() ?? ""
        value.action = try reader["Action"].readIfPresent(with: WAFRegionalClientTypes.WafAction.read(from:))
        value.overrideAction = try reader["OverrideAction"].readIfPresent(with: WAFRegionalClientTypes.WafOverrideAction.read(from:))
        value.type = try reader["Type"].readIfPresent()
        value.excludedRules = try reader["ExcludedRules"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.ExcludedRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFRegionalClientTypes.ExcludedRule {

    static func write(value: WAFRegionalClientTypes.ExcludedRule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RuleId"].write(value.ruleId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.ExcludedRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.ExcludedRule()
        value.ruleId = try reader["RuleId"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.WafOverrideAction {

    static func write(value: WAFRegionalClientTypes.WafOverrideAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.WafOverrideAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.WafOverrideAction()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFRegionalClientTypes.WafAction {

    static func write(value: WAFRegionalClientTypes.WafAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.WafAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.WafAction()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFRegionalClientTypes.XssMatchSet {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.XssMatchSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.XssMatchSet()
        value.xssMatchSetId = try reader["XssMatchSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent()
        value.xssMatchTuples = try reader["XssMatchTuples"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.XssMatchTuple.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFRegionalClientTypes.XssMatchTuple {

    static func write(value: WAFRegionalClientTypes.XssMatchTuple?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FieldToMatch"].write(value.fieldToMatch, with: WAFRegionalClientTypes.FieldToMatch.write(value:to:))
        try writer["TextTransformation"].write(value.textTransformation)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.XssMatchTuple {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.XssMatchTuple()
        value.fieldToMatch = try reader["FieldToMatch"].readIfPresent(with: WAFRegionalClientTypes.FieldToMatch.read(from:))
        value.textTransformation = try reader["TextTransformation"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFRegionalClientTypes.LoggingConfiguration {

    static func write(value: WAFRegionalClientTypes.LoggingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LogDestinationConfigs"].writeList(value.logDestinationConfigs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RedactedFields"].writeList(value.redactedFields, memberWritingClosure: WAFRegionalClientTypes.FieldToMatch.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ResourceArn"].write(value.resourceArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.LoggingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.LoggingConfiguration()
        value.resourceArn = try reader["ResourceArn"].readIfPresent() ?? ""
        value.logDestinationConfigs = try reader["LogDestinationConfigs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.redactedFields = try reader["RedactedFields"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.FieldToMatch.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFRegionalClientTypes.SampledHTTPRequest {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.SampledHTTPRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.SampledHTTPRequest()
        value.request = try reader["Request"].readIfPresent(with: WAFRegionalClientTypes.HTTPRequest.read(from:))
        value.weight = try reader["Weight"].readIfPresent() ?? 0
        value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.action = try reader["Action"].readIfPresent()
        value.ruleWithinRuleGroup = try reader["RuleWithinRuleGroup"].readIfPresent()
        return value
    }
}

extension WAFRegionalClientTypes.HTTPRequest {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.HTTPRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.HTTPRequest()
        value.clientIP = try reader["ClientIP"].readIfPresent()
        value.country = try reader["Country"].readIfPresent()
        value.uri = try reader["URI"].readIfPresent()
        value.method = try reader["Method"].readIfPresent()
        value.httpVersion = try reader["HTTPVersion"].readIfPresent()
        value.headers = try reader["Headers"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.HTTPHeader.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFRegionalClientTypes.HTTPHeader {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.HTTPHeader {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.HTTPHeader()
        value.name = try reader["Name"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension WAFRegionalClientTypes.TimeWindow {

    static func write(value: WAFRegionalClientTypes.TimeWindow?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.TimeWindow {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.TimeWindow()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension WAFRegionalClientTypes.WebACLSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.WebACLSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.WebACLSummary()
        value.webACLId = try reader["WebACLId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.ByteMatchSetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.ByteMatchSetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.ByteMatchSetSummary()
        value.byteMatchSetId = try reader["ByteMatchSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.GeoMatchSetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.GeoMatchSetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.GeoMatchSetSummary()
        value.geoMatchSetId = try reader["GeoMatchSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.IPSetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.IPSetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.IPSetSummary()
        value.ipSetId = try reader["IPSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.RuleSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.RuleSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.RuleSummary()
        value.ruleId = try reader["RuleId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.RegexMatchSetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.RegexMatchSetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.RegexMatchSetSummary()
        value.regexMatchSetId = try reader["RegexMatchSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.RegexPatternSetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.RegexPatternSetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.RegexPatternSetSummary()
        value.regexPatternSetId = try reader["RegexPatternSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.RuleGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.RuleGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.RuleGroupSummary()
        value.ruleGroupId = try reader["RuleGroupId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.SizeConstraintSetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.SizeConstraintSetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.SizeConstraintSetSummary()
        value.sizeConstraintSetId = try reader["SizeConstraintSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.SqlInjectionMatchSetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.SqlInjectionMatchSetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.SqlInjectionMatchSetSummary()
        value.sqlInjectionMatchSetId = try reader["SqlInjectionMatchSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.SubscribedRuleGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.SubscribedRuleGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.SubscribedRuleGroupSummary()
        value.ruleGroupId = try reader["RuleGroupId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.metricName = try reader["MetricName"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.TagInfoForResource {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.TagInfoForResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.TagInfoForResource()
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: WAFRegionalClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFRegionalClientTypes.Tag {

    static func write(value: WAFRegionalClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.XssMatchSetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFRegionalClientTypes.XssMatchSetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFRegionalClientTypes.XssMatchSetSummary()
        value.xssMatchSetId = try reader["XssMatchSetId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFRegionalClientTypes.ByteMatchSetUpdate {

    static func write(value: WAFRegionalClientTypes.ByteMatchSetUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["ByteMatchTuple"].write(value.byteMatchTuple, with: WAFRegionalClientTypes.ByteMatchTuple.write(value:to:))
    }
}

extension WAFRegionalClientTypes.GeoMatchSetUpdate {

    static func write(value: WAFRegionalClientTypes.GeoMatchSetUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["GeoMatchConstraint"].write(value.geoMatchConstraint, with: WAFRegionalClientTypes.GeoMatchConstraint.write(value:to:))
    }
}

extension WAFRegionalClientTypes.IPSetUpdate {

    static func write(value: WAFRegionalClientTypes.IPSetUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["IPSetDescriptor"].write(value.ipSetDescriptor, with: WAFRegionalClientTypes.IPSetDescriptor.write(value:to:))
    }
}

extension WAFRegionalClientTypes.RuleUpdate {

    static func write(value: WAFRegionalClientTypes.RuleUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["Predicate"].write(value.predicate, with: WAFRegionalClientTypes.Predicate.write(value:to:))
    }
}

extension WAFRegionalClientTypes.RegexMatchSetUpdate {

    static func write(value: WAFRegionalClientTypes.RegexMatchSetUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["RegexMatchTuple"].write(value.regexMatchTuple, with: WAFRegionalClientTypes.RegexMatchTuple.write(value:to:))
    }
}

extension WAFRegionalClientTypes.RegexPatternSetUpdate {

    static func write(value: WAFRegionalClientTypes.RegexPatternSetUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["RegexPatternString"].write(value.regexPatternString)
    }
}

extension WAFRegionalClientTypes.RuleGroupUpdate {

    static func write(value: WAFRegionalClientTypes.RuleGroupUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["ActivatedRule"].write(value.activatedRule, with: WAFRegionalClientTypes.ActivatedRule.write(value:to:))
    }
}

extension WAFRegionalClientTypes.SizeConstraintSetUpdate {

    static func write(value: WAFRegionalClientTypes.SizeConstraintSetUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["SizeConstraint"].write(value.sizeConstraint, with: WAFRegionalClientTypes.SizeConstraint.write(value:to:))
    }
}

extension WAFRegionalClientTypes.SqlInjectionMatchSetUpdate {

    static func write(value: WAFRegionalClientTypes.SqlInjectionMatchSetUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["SqlInjectionMatchTuple"].write(value.sqlInjectionMatchTuple, with: WAFRegionalClientTypes.SqlInjectionMatchTuple.write(value:to:))
    }
}

extension WAFRegionalClientTypes.WebACLUpdate {

    static func write(value: WAFRegionalClientTypes.WebACLUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["ActivatedRule"].write(value.activatedRule, with: WAFRegionalClientTypes.ActivatedRule.write(value:to:))
    }
}

extension WAFRegionalClientTypes.XssMatchSetUpdate {

    static func write(value: WAFRegionalClientTypes.XssMatchSetUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["XssMatchTuple"].write(value.xssMatchTuple, with: WAFRegionalClientTypes.XssMatchTuple.write(value:to:))
    }
}

public enum WAFRegionalClientTypes {}
