// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationAutoScalingClient {
    /// Paginate over `[DescribeScalableTargetsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeScalableTargetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeScalableTargetsOutputResponse`
    public func describeScalableTargetsPaginated(input: DescribeScalableTargetsInput) -> ClientRuntime.PaginatorSequence<DescribeScalableTargetsInput, DescribeScalableTargetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeScalableTargetsInput, DescribeScalableTargetsOutputResponse>(input: input, inputKey: \DescribeScalableTargetsInput.nextToken, outputKey: \DescribeScalableTargetsOutputResponse.nextToken, paginationFunction: self.describeScalableTargets(input:))
    }
}

extension DescribeScalableTargetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeScalableTargetsInput {
        return DescribeScalableTargetsInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceIds: self.resourceIds,
            scalableDimension: self.scalableDimension,
            serviceNamespace: self.serviceNamespace
        )}
}

extension PaginatorSequence where Input == DescribeScalableTargetsInput, Output == DescribeScalableTargetsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeScalableTargetsPaginated`
    /// to access the nested member `[ApplicationAutoScalingClientTypes.ScalableTarget]`
    /// - Returns: `[ApplicationAutoScalingClientTypes.ScalableTarget]`
    public func scalableTargets() async throws -> [ApplicationAutoScalingClientTypes.ScalableTarget] {
        return try await self.asyncCompactMap { item in item.scalableTargets }
    }
}
extension ApplicationAutoScalingClient {
    /// Paginate over `[DescribeScalingActivitiesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeScalingActivitiesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeScalingActivitiesOutputResponse`
    public func describeScalingActivitiesPaginated(input: DescribeScalingActivitiesInput) -> ClientRuntime.PaginatorSequence<DescribeScalingActivitiesInput, DescribeScalingActivitiesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeScalingActivitiesInput, DescribeScalingActivitiesOutputResponse>(input: input, inputKey: \DescribeScalingActivitiesInput.nextToken, outputKey: \DescribeScalingActivitiesOutputResponse.nextToken, paginationFunction: self.describeScalingActivities(input:))
    }
}

extension DescribeScalingActivitiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeScalingActivitiesInput {
        return DescribeScalingActivitiesInput(
            includeNotScaledActivities: self.includeNotScaledActivities,
            maxResults: self.maxResults,
            nextToken: token,
            resourceId: self.resourceId,
            scalableDimension: self.scalableDimension,
            serviceNamespace: self.serviceNamespace
        )}
}

extension PaginatorSequence where Input == DescribeScalingActivitiesInput, Output == DescribeScalingActivitiesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeScalingActivitiesPaginated`
    /// to access the nested member `[ApplicationAutoScalingClientTypes.ScalingActivity]`
    /// - Returns: `[ApplicationAutoScalingClientTypes.ScalingActivity]`
    public func scalingActivities() async throws -> [ApplicationAutoScalingClientTypes.ScalingActivity] {
        return try await self.asyncCompactMap { item in item.scalingActivities }
    }
}
extension ApplicationAutoScalingClient {
    /// Paginate over `[DescribeScalingPoliciesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeScalingPoliciesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeScalingPoliciesOutputResponse`
    public func describeScalingPoliciesPaginated(input: DescribeScalingPoliciesInput) -> ClientRuntime.PaginatorSequence<DescribeScalingPoliciesInput, DescribeScalingPoliciesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeScalingPoliciesInput, DescribeScalingPoliciesOutputResponse>(input: input, inputKey: \DescribeScalingPoliciesInput.nextToken, outputKey: \DescribeScalingPoliciesOutputResponse.nextToken, paginationFunction: self.describeScalingPolicies(input:))
    }
}

extension DescribeScalingPoliciesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeScalingPoliciesInput {
        return DescribeScalingPoliciesInput(
            maxResults: self.maxResults,
            nextToken: token,
            policyNames: self.policyNames,
            resourceId: self.resourceId,
            scalableDimension: self.scalableDimension,
            serviceNamespace: self.serviceNamespace
        )}
}

extension PaginatorSequence where Input == DescribeScalingPoliciesInput, Output == DescribeScalingPoliciesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeScalingPoliciesPaginated`
    /// to access the nested member `[ApplicationAutoScalingClientTypes.ScalingPolicy]`
    /// - Returns: `[ApplicationAutoScalingClientTypes.ScalingPolicy]`
    public func scalingPolicies() async throws -> [ApplicationAutoScalingClientTypes.ScalingPolicy] {
        return try await self.asyncCompactMap { item in item.scalingPolicies }
    }
}
extension ApplicationAutoScalingClient {
    /// Paginate over `[DescribeScheduledActionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeScheduledActionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeScheduledActionsOutputResponse`
    public func describeScheduledActionsPaginated(input: DescribeScheduledActionsInput) -> ClientRuntime.PaginatorSequence<DescribeScheduledActionsInput, DescribeScheduledActionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeScheduledActionsInput, DescribeScheduledActionsOutputResponse>(input: input, inputKey: \DescribeScheduledActionsInput.nextToken, outputKey: \DescribeScheduledActionsOutputResponse.nextToken, paginationFunction: self.describeScheduledActions(input:))
    }
}

extension DescribeScheduledActionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeScheduledActionsInput {
        return DescribeScheduledActionsInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceId: self.resourceId,
            scalableDimension: self.scalableDimension,
            scheduledActionNames: self.scheduledActionNames,
            serviceNamespace: self.serviceNamespace
        )}
}

extension PaginatorSequence where Input == DescribeScheduledActionsInput, Output == DescribeScheduledActionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeScheduledActionsPaginated`
    /// to access the nested member `[ApplicationAutoScalingClientTypes.ScheduledAction]`
    /// - Returns: `[ApplicationAutoScalingClientTypes.ScheduledAction]`
    public func scheduledActions() async throws -> [ApplicationAutoScalingClientTypes.ScheduledAction] {
        return try await self.asyncCompactMap { item in item.scheduledActions }
    }
}
