//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension BackupSearchClient {
    /// Paginate over `[ListSearchJobBackupsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSearchJobBackupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSearchJobBackupsOutput`
    public func listSearchJobBackupsPaginated(input: ListSearchJobBackupsInput) -> ClientRuntime.PaginatorSequence<ListSearchJobBackupsInput, ListSearchJobBackupsOutput> {
        return ClientRuntime.PaginatorSequence<ListSearchJobBackupsInput, ListSearchJobBackupsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listSearchJobBackups(input:))
    }
}

extension ListSearchJobBackupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSearchJobBackupsInput {
        return ListSearchJobBackupsInput(
            maxResults: self.maxResults,
            nextToken: token,
            searchJobIdentifier: self.searchJobIdentifier
        )}
}

extension PaginatorSequence where OperationStackInput == ListSearchJobBackupsInput, OperationStackOutput == ListSearchJobBackupsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listSearchJobBackupsPaginated`
    /// to access the nested member `[BackupSearchClientTypes.SearchJobBackupsResult]`
    /// - Returns: `[BackupSearchClientTypes.SearchJobBackupsResult]`
    public func results() async throws -> [BackupSearchClientTypes.SearchJobBackupsResult] {
        return try await self.asyncCompactMap { item in item.results }
    }
}
extension BackupSearchClient {
    /// Paginate over `[ListSearchJobResultsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSearchJobResultsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSearchJobResultsOutput`
    public func listSearchJobResultsPaginated(input: ListSearchJobResultsInput) -> ClientRuntime.PaginatorSequence<ListSearchJobResultsInput, ListSearchJobResultsOutput> {
        return ClientRuntime.PaginatorSequence<ListSearchJobResultsInput, ListSearchJobResultsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listSearchJobResults(input:))
    }
}

extension ListSearchJobResultsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSearchJobResultsInput {
        return ListSearchJobResultsInput(
            maxResults: self.maxResults,
            nextToken: token,
            searchJobIdentifier: self.searchJobIdentifier
        )}
}

extension PaginatorSequence where OperationStackInput == ListSearchJobResultsInput, OperationStackOutput == ListSearchJobResultsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listSearchJobResultsPaginated`
    /// to access the nested member `[BackupSearchClientTypes.ResultItem]`
    /// - Returns: `[BackupSearchClientTypes.ResultItem]`
    public func results() async throws -> [BackupSearchClientTypes.ResultItem] {
        return try await self.asyncCompactMap { item in item.results }
    }
}
