//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

/// Indicates that an internal error occurred.
public struct CloudHsmInternalException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Additional information about the error.
        public internal(set) var message: Swift.String? = nil
        /// Indicates if the action can be retried.
        public internal(set) var retryable: Swift.Bool = false
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CloudHsmInternalException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryable: Swift.Bool = false
    )
    {
        self.properties.message = message
        self.properties.retryable = retryable
    }
}

/// Indicates that an exception occurred in the AWS CloudHSM service.
public struct CloudHsmServiceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Additional information about the error.
        public internal(set) var message: Swift.String? = nil
        /// Indicates if the action can be retried.
        public internal(set) var retryable: Swift.Bool = false
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CloudHsmServiceException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryable: Swift.Bool = false
    )
    {
        self.properties.message = message
        self.properties.retryable = retryable
    }
}

/// Indicates that one or more of the request parameters are not valid.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Additional information about the error.
        public internal(set) var message: Swift.String? = nil
        /// Indicates if the action can be retried.
        public internal(set) var retryable: Swift.Bool = false
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryable: Swift.Bool = false
    )
    {
        self.properties.message = message
        self.properties.retryable = retryable
    }
}

extension CloudHSMClientTypes {
    /// A key-value pair that identifies or specifies metadata about an AWS CloudHSM resource.
    public struct Tag {
        /// The key of the tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the tag.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct AddTagsToResourceInput {
    /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource to tag.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// One or more tags.
    /// This member is required.
    public var tagList: [CloudHSMClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tagList: [CloudHSMClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagList = tagList
    }
}

public struct AddTagsToResourceOutput {
    /// The status of the operation.
    /// This member is required.
    public var status: Swift.String?

    public init(
        status: Swift.String? = nil
    )
    {
        self.status = status
    }
}

extension CloudHSMClientTypes {

    public enum ClientVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fiveOne
        case fiveThree
        case sdkUnknown(Swift.String)

        public static var allCases: [ClientVersion] {
            return [
                .fiveOne,
                .fiveThree
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fiveOne: return "5.1"
            case .fiveThree: return "5.3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Contains the inputs for the [CreateHapgRequest] action.
public struct CreateHapgInput {
    /// The label of the new high-availability partition group.
    /// This member is required.
    public var label: Swift.String?

    public init(
        label: Swift.String? = nil
    )
    {
        self.label = label
    }
}

/// Contains the output of the [CreateHAPartitionGroup] action.
public struct CreateHapgOutput {
    /// The ARN of the high-availability partition group.
    public var hapgArn: Swift.String?

    public init(
        hapgArn: Swift.String? = nil
    )
    {
        self.hapgArn = hapgArn
    }
}

extension CloudHSMClientTypes {

    /// Specifies the type of subscription for the HSM.
    ///
    /// * PRODUCTION - The HSM is being used in a production environment.
    ///
    /// * TRIAL - The HSM is being used in a product trial.
    public enum SubscriptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case production
        case sdkUnknown(Swift.String)

        public static var allCases: [SubscriptionType] {
            return [
                .production
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .production: return "PRODUCTION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Contains the inputs for the CreateHsm operation.
public struct CreateHsmInput {
    /// A user-defined token to ensure idempotence. Subsequent calls to this operation with the same token will be ignored.
    public var clientToken: Swift.String?
    /// The IP address to assign to the HSM's ENI. If an IP address is not specified, an IP address will be randomly chosen from the CIDR range of the subnet.
    public var eniIp: Swift.String?
    /// The external ID from IamRoleArn, if present.
    public var externalId: Swift.String?
    /// The ARN of an IAM role to enable the AWS CloudHSM service to allocate an ENI on your behalf.
    /// This member is required.
    public var iamRoleArn: Swift.String?
    /// The SSH public key to install on the HSM.
    /// This member is required.
    public var sshKey: Swift.String?
    /// The identifier of the subnet in your VPC in which to place the HSM.
    /// This member is required.
    public var subnetId: Swift.String?
    /// Specifies the type of subscription for the HSM.
    ///
    /// * PRODUCTION - The HSM is being used in a production environment.
    ///
    /// * TRIAL - The HSM is being used in a product trial.
    /// This member is required.
    public var subscriptionType: CloudHSMClientTypes.SubscriptionType?
    /// The IP address for the syslog monitoring server. The AWS CloudHSM service only supports one syslog monitoring server.
    public var syslogIp: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        eniIp: Swift.String? = nil,
        externalId: Swift.String? = nil,
        iamRoleArn: Swift.String? = nil,
        sshKey: Swift.String? = nil,
        subnetId: Swift.String? = nil,
        subscriptionType: CloudHSMClientTypes.SubscriptionType? = nil,
        syslogIp: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.eniIp = eniIp
        self.externalId = externalId
        self.iamRoleArn = iamRoleArn
        self.sshKey = sshKey
        self.subnetId = subnetId
        self.subscriptionType = subscriptionType
        self.syslogIp = syslogIp
    }
}

/// Contains the output of the CreateHsm operation.
public struct CreateHsmOutput {
    /// The ARN of the HSM.
    public var hsmArn: Swift.String?

    public init(
        hsmArn: Swift.String? = nil
    )
    {
        self.hsmArn = hsmArn
    }
}

/// Contains the inputs for the [CreateLunaClient] action.
public struct CreateLunaClientInput {
    /// The contents of a Base64-Encoded X.509 v3 certificate to be installed on the HSMs used by this client.
    /// This member is required.
    public var certificate: Swift.String?
    /// The label for the client.
    public var label: Swift.String?

    public init(
        certificate: Swift.String? = nil,
        label: Swift.String? = nil
    )
    {
        self.certificate = certificate
        self.label = label
    }
}

/// Contains the output of the [CreateLunaClient] action.
public struct CreateLunaClientOutput {
    /// The ARN of the client.
    public var clientArn: Swift.String?

    public init(
        clientArn: Swift.String? = nil
    )
    {
        self.clientArn = clientArn
    }
}

/// Contains the inputs for the [DeleteHapg] action.
public struct DeleteHapgInput {
    /// The ARN of the high-availability partition group to delete.
    /// This member is required.
    public var hapgArn: Swift.String?

    public init(
        hapgArn: Swift.String? = nil
    )
    {
        self.hapgArn = hapgArn
    }
}

/// Contains the output of the [DeleteHapg] action.
public struct DeleteHapgOutput {
    /// The status of the action.
    /// This member is required.
    public var status: Swift.String?

    public init(
        status: Swift.String? = nil
    )
    {
        self.status = status
    }
}

/// Contains the inputs for the [DeleteHsm] operation.
public struct DeleteHsmInput {
    /// The ARN of the HSM to delete.
    /// This member is required.
    public var hsmArn: Swift.String?

    public init(
        hsmArn: Swift.String? = nil
    )
    {
        self.hsmArn = hsmArn
    }
}

/// Contains the output of the [DeleteHsm] operation.
public struct DeleteHsmOutput {
    /// The status of the operation.
    /// This member is required.
    public var status: Swift.String?

    public init(
        status: Swift.String? = nil
    )
    {
        self.status = status
    }
}

public struct DeleteLunaClientInput {
    /// The ARN of the client to delete.
    /// This member is required.
    public var clientArn: Swift.String?

    public init(
        clientArn: Swift.String? = nil
    )
    {
        self.clientArn = clientArn
    }
}

public struct DeleteLunaClientOutput {
    /// The status of the action.
    /// This member is required.
    public var status: Swift.String?

    public init(
        status: Swift.String? = nil
    )
    {
        self.status = status
    }
}

/// Contains the inputs for the [DescribeHapg] action.
public struct DescribeHapgInput {
    /// The ARN of the high-availability partition group to describe.
    /// This member is required.
    public var hapgArn: Swift.String?

    public init(
        hapgArn: Swift.String? = nil
    )
    {
        self.hapgArn = hapgArn
    }
}

extension CloudHSMClientTypes {

    public enum CloudHsmObjectState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case degraded
        case ready
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [CloudHsmObjectState] {
            return [
                .degraded,
                .ready,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .degraded: return "DEGRADED"
            case .ready: return "READY"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Contains the output of the [DescribeHapg] action.
public struct DescribeHapgOutput {
    /// The ARN of the high-availability partition group.
    public var hapgArn: Swift.String?
    /// The serial number of the high-availability partition group.
    public var hapgSerial: Swift.String?
    ///
    public var hsmsLastActionFailed: [Swift.String]?
    ///
    public var hsmsPendingDeletion: [Swift.String]?
    ///
    public var hsmsPendingRegistration: [Swift.String]?
    /// The label for the high-availability partition group.
    public var label: Swift.String?
    /// The date and time the high-availability partition group was last modified.
    public var lastModifiedTimestamp: Swift.String?
    /// The list of partition serial numbers that belong to the high-availability partition group.
    public var partitionSerialList: [Swift.String]?
    /// The state of the high-availability partition group.
    public var state: CloudHSMClientTypes.CloudHsmObjectState?

    public init(
        hapgArn: Swift.String? = nil,
        hapgSerial: Swift.String? = nil,
        hsmsLastActionFailed: [Swift.String]? = nil,
        hsmsPendingDeletion: [Swift.String]? = nil,
        hsmsPendingRegistration: [Swift.String]? = nil,
        label: Swift.String? = nil,
        lastModifiedTimestamp: Swift.String? = nil,
        partitionSerialList: [Swift.String]? = nil,
        state: CloudHSMClientTypes.CloudHsmObjectState? = nil
    )
    {
        self.hapgArn = hapgArn
        self.hapgSerial = hapgSerial
        self.hsmsLastActionFailed = hsmsLastActionFailed
        self.hsmsPendingDeletion = hsmsPendingDeletion
        self.hsmsPendingRegistration = hsmsPendingRegistration
        self.label = label
        self.lastModifiedTimestamp = lastModifiedTimestamp
        self.partitionSerialList = partitionSerialList
        self.state = state
    }
}

/// Contains the inputs for the [DescribeHsm] operation.
public struct DescribeHsmInput {
    /// The ARN of the HSM. Either the HsmArn or the SerialNumber parameter must be specified.
    public var hsmArn: Swift.String?
    /// The serial number of the HSM. Either the HsmArn or the HsmSerialNumber parameter must be specified.
    public var hsmSerialNumber: Swift.String?

    public init(
        hsmArn: Swift.String? = nil,
        hsmSerialNumber: Swift.String? = nil
    )
    {
        self.hsmArn = hsmArn
        self.hsmSerialNumber = hsmSerialNumber
    }
}

extension CloudHSMClientTypes {

    public enum HsmStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case degraded
        case pending
        case running
        case suspended
        case terminated
        case terminating
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [HsmStatus] {
            return [
                .degraded,
                .pending,
                .running,
                .suspended,
                .terminated,
                .terminating,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .degraded: return "DEGRADED"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .suspended: return "SUSPENDED"
            case .terminated: return "TERMINATED"
            case .terminating: return "TERMINATING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Contains the output of the [DescribeHsm] operation.
public struct DescribeHsmOutput {
    /// The Availability Zone that the HSM is in.
    public var availabilityZone: Swift.String?
    /// The identifier of the elastic network interface (ENI) attached to the HSM.
    public var eniId: Swift.String?
    /// The IP address assigned to the HSM's ENI.
    public var eniIp: Swift.String?
    /// The ARN of the HSM.
    public var hsmArn: Swift.String?
    /// The HSM model type.
    public var hsmType: Swift.String?
    /// The ARN of the IAM role assigned to the HSM.
    public var iamRoleArn: Swift.String?
    /// The list of partitions on the HSM.
    public var partitions: [Swift.String]?
    /// The serial number of the HSM.
    public var serialNumber: Swift.String?
    /// The date and time that the server certificate was last updated.
    public var serverCertLastUpdated: Swift.String?
    /// The URI of the certificate server.
    public var serverCertUri: Swift.String?
    /// The HSM software version.
    public var softwareVersion: Swift.String?
    /// The date and time that the SSH key was last updated.
    public var sshKeyLastUpdated: Swift.String?
    /// The public SSH key.
    public var sshPublicKey: Swift.String?
    /// The status of the HSM.
    public var status: CloudHSMClientTypes.HsmStatus?
    /// Contains additional information about the status of the HSM.
    public var statusDetails: Swift.String?
    /// The identifier of the subnet that the HSM is in.
    public var subnetId: Swift.String?
    /// The subscription end date.
    public var subscriptionEndDate: Swift.String?
    /// The subscription start date.
    public var subscriptionStartDate: Swift.String?
    /// Specifies the type of subscription for the HSM.
    ///
    /// * PRODUCTION - The HSM is being used in a production environment.
    ///
    /// * TRIAL - The HSM is being used in a product trial.
    public var subscriptionType: CloudHSMClientTypes.SubscriptionType?
    /// The name of the HSM vendor.
    public var vendorName: Swift.String?
    /// The identifier of the VPC that the HSM is in.
    public var vpcId: Swift.String?

    public init(
        availabilityZone: Swift.String? = nil,
        eniId: Swift.String? = nil,
        eniIp: Swift.String? = nil,
        hsmArn: Swift.String? = nil,
        hsmType: Swift.String? = nil,
        iamRoleArn: Swift.String? = nil,
        partitions: [Swift.String]? = nil,
        serialNumber: Swift.String? = nil,
        serverCertLastUpdated: Swift.String? = nil,
        serverCertUri: Swift.String? = nil,
        softwareVersion: Swift.String? = nil,
        sshKeyLastUpdated: Swift.String? = nil,
        sshPublicKey: Swift.String? = nil,
        status: CloudHSMClientTypes.HsmStatus? = nil,
        statusDetails: Swift.String? = nil,
        subnetId: Swift.String? = nil,
        subscriptionEndDate: Swift.String? = nil,
        subscriptionStartDate: Swift.String? = nil,
        subscriptionType: CloudHSMClientTypes.SubscriptionType? = nil,
        vendorName: Swift.String? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.eniId = eniId
        self.eniIp = eniIp
        self.hsmArn = hsmArn
        self.hsmType = hsmType
        self.iamRoleArn = iamRoleArn
        self.partitions = partitions
        self.serialNumber = serialNumber
        self.serverCertLastUpdated = serverCertLastUpdated
        self.serverCertUri = serverCertUri
        self.softwareVersion = softwareVersion
        self.sshKeyLastUpdated = sshKeyLastUpdated
        self.sshPublicKey = sshPublicKey
        self.status = status
        self.statusDetails = statusDetails
        self.subnetId = subnetId
        self.subscriptionEndDate = subscriptionEndDate
        self.subscriptionStartDate = subscriptionStartDate
        self.subscriptionType = subscriptionType
        self.vendorName = vendorName
        self.vpcId = vpcId
    }
}

public struct DescribeLunaClientInput {
    /// The certificate fingerprint.
    public var certificateFingerprint: Swift.String?
    /// The ARN of the client.
    public var clientArn: Swift.String?

    public init(
        certificateFingerprint: Swift.String? = nil,
        clientArn: Swift.String? = nil
    )
    {
        self.certificateFingerprint = certificateFingerprint
        self.clientArn = clientArn
    }
}

public struct DescribeLunaClientOutput {
    /// The certificate installed on the HSMs used by this client.
    public var certificate: Swift.String?
    /// The certificate fingerprint.
    public var certificateFingerprint: Swift.String?
    /// The ARN of the client.
    public var clientArn: Swift.String?
    /// The label of the client.
    public var label: Swift.String?
    /// The date and time the client was last modified.
    public var lastModifiedTimestamp: Swift.String?

    public init(
        certificate: Swift.String? = nil,
        certificateFingerprint: Swift.String? = nil,
        clientArn: Swift.String? = nil,
        label: Swift.String? = nil,
        lastModifiedTimestamp: Swift.String? = nil
    )
    {
        self.certificate = certificate
        self.certificateFingerprint = certificateFingerprint
        self.clientArn = clientArn
        self.label = label
        self.lastModifiedTimestamp = lastModifiedTimestamp
    }
}

public struct GetConfigInput {
    /// The ARN of the client.
    /// This member is required.
    public var clientArn: Swift.String?
    /// The client version.
    /// This member is required.
    public var clientVersion: CloudHSMClientTypes.ClientVersion?
    /// A list of ARNs that identify the high-availability partition groups that are associated with the client.
    /// This member is required.
    public var hapgList: [Swift.String]?

    public init(
        clientArn: Swift.String? = nil,
        clientVersion: CloudHSMClientTypes.ClientVersion? = nil,
        hapgList: [Swift.String]? = nil
    )
    {
        self.clientArn = clientArn
        self.clientVersion = clientVersion
        self.hapgList = hapgList
    }
}

public struct GetConfigOutput {
    /// The certificate file containing the server.pem files of the HSMs.
    public var configCred: Swift.String?
    /// The chrystoki.conf configuration file.
    public var configFile: Swift.String?
    /// The type of credentials.
    public var configType: Swift.String?

    public init(
        configCred: Swift.String? = nil,
        configFile: Swift.String? = nil,
        configType: Swift.String? = nil
    )
    {
        self.configCred = configCred
        self.configFile = configFile
        self.configType = configType
    }
}

/// Contains the inputs for the [ListAvailableZones] action.
public struct ListAvailableZonesInput {

    public init() { }
}

public struct ListAvailableZonesOutput {
    /// The list of Availability Zones that have available AWS CloudHSM capacity.
    public var azList: [Swift.String]?

    public init(
        azList: [Swift.String]? = nil
    )
    {
        self.azList = azList
    }
}

public struct ListHapgsInput {
    /// The NextToken value from a previous call to ListHapgs. Pass null if this is the first call.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

public struct ListHapgsOutput {
    /// The list of high-availability partition groups.
    /// This member is required.
    public var hapgList: [Swift.String]?
    /// If not null, more results are available. Pass this value to ListHapgs to retrieve the next set of items.
    public var nextToken: Swift.String?

    public init(
        hapgList: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.hapgList = hapgList
        self.nextToken = nextToken
    }
}

public struct ListHsmsInput {
    /// The NextToken value from a previous call to ListHsms. Pass null if this is the first call.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

/// Contains the output of the ListHsms operation.
public struct ListHsmsOutput {
    /// The list of ARNs that identify the HSMs.
    public var hsmList: [Swift.String]?
    /// If not null, more results are available. Pass this value to ListHsms to retrieve the next set of items.
    public var nextToken: Swift.String?

    public init(
        hsmList: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.hsmList = hsmList
        self.nextToken = nextToken
    }
}

public struct ListLunaClientsInput {
    /// The NextToken value from a previous call to ListLunaClients. Pass null if this is the first call.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

public struct ListLunaClientsOutput {
    /// The list of clients.
    /// This member is required.
    public var clientList: [Swift.String]?
    /// If not null, more results are available. Pass this to ListLunaClients to retrieve the next set of items.
    public var nextToken: Swift.String?

    public init(
        clientList: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clientList = clientList
        self.nextToken = nextToken
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// One or more tags.
    /// This member is required.
    public var tagList: [CloudHSMClientTypes.Tag]?

    public init(
        tagList: [CloudHSMClientTypes.Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

public struct ModifyHapgInput {
    /// The ARN of the high-availability partition group to modify.
    /// This member is required.
    public var hapgArn: Swift.String?
    /// The new label for the high-availability partition group.
    public var label: Swift.String?
    /// The list of partition serial numbers to make members of the high-availability partition group.
    public var partitionSerialList: [Swift.String]?

    public init(
        hapgArn: Swift.String? = nil,
        label: Swift.String? = nil,
        partitionSerialList: [Swift.String]? = nil
    )
    {
        self.hapgArn = hapgArn
        self.label = label
        self.partitionSerialList = partitionSerialList
    }
}

public struct ModifyHapgOutput {
    /// The ARN of the high-availability partition group.
    public var hapgArn: Swift.String?

    public init(
        hapgArn: Swift.String? = nil
    )
    {
        self.hapgArn = hapgArn
    }
}

/// Contains the inputs for the [ModifyHsm] operation.
public struct ModifyHsmInput {
    /// The new IP address for the elastic network interface (ENI) attached to the HSM. If the HSM is moved to a different subnet, and an IP address is not specified, an IP address will be randomly chosen from the CIDR range of the new subnet.
    public var eniIp: Swift.String?
    /// The new external ID.
    public var externalId: Swift.String?
    /// The ARN of the HSM to modify.
    /// This member is required.
    public var hsmArn: Swift.String?
    /// The new IAM role ARN.
    public var iamRoleArn: Swift.String?
    /// The new identifier of the subnet that the HSM is in. The new subnet must be in the same Availability Zone as the current subnet.
    public var subnetId: Swift.String?
    /// The new IP address for the syslog monitoring server. The AWS CloudHSM service only supports one syslog monitoring server.
    public var syslogIp: Swift.String?

    public init(
        eniIp: Swift.String? = nil,
        externalId: Swift.String? = nil,
        hsmArn: Swift.String? = nil,
        iamRoleArn: Swift.String? = nil,
        subnetId: Swift.String? = nil,
        syslogIp: Swift.String? = nil
    )
    {
        self.eniIp = eniIp
        self.externalId = externalId
        self.hsmArn = hsmArn
        self.iamRoleArn = iamRoleArn
        self.subnetId = subnetId
        self.syslogIp = syslogIp
    }
}

/// Contains the output of the [ModifyHsm] operation.
public struct ModifyHsmOutput {
    /// The ARN of the HSM.
    public var hsmArn: Swift.String?

    public init(
        hsmArn: Swift.String? = nil
    )
    {
        self.hsmArn = hsmArn
    }
}

public struct ModifyLunaClientInput {
    /// The new certificate for the client.
    /// This member is required.
    public var certificate: Swift.String?
    /// The ARN of the client.
    /// This member is required.
    public var clientArn: Swift.String?

    public init(
        certificate: Swift.String? = nil,
        clientArn: Swift.String? = nil
    )
    {
        self.certificate = certificate
        self.clientArn = clientArn
    }
}

public struct ModifyLunaClientOutput {
    /// The ARN of the client.
    public var clientArn: Swift.String?

    public init(
        clientArn: Swift.String? = nil
    )
    {
        self.clientArn = clientArn
    }
}

public struct RemoveTagsFromResourceInput {
    /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tag key or keys to remove. Specify only the tag key to remove (not the value). To overwrite the value for an existing tag, use [AddTagsToResource].
    /// This member is required.
    public var tagKeyList: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeyList: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeyList = tagKeyList
    }
}

public struct RemoveTagsFromResourceOutput {
    /// The status of the operation.
    /// This member is required.
    public var status: Swift.String?

    public init(
        status: Swift.String? = nil
    )
    {
        self.status = status
    }
}

extension AddTagsToResourceInput {

    static func urlPathProvider(_ value: AddTagsToResourceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateHapgInput {

    static func urlPathProvider(_ value: CreateHapgInput) -> Swift.String? {
        return "/"
    }
}

extension CreateHsmInput {

    static func urlPathProvider(_ value: CreateHsmInput) -> Swift.String? {
        return "/"
    }
}

extension CreateLunaClientInput {

    static func urlPathProvider(_ value: CreateLunaClientInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteHapgInput {

    static func urlPathProvider(_ value: DeleteHapgInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteHsmInput {

    static func urlPathProvider(_ value: DeleteHsmInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLunaClientInput {

    static func urlPathProvider(_ value: DeleteLunaClientInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeHapgInput {

    static func urlPathProvider(_ value: DescribeHapgInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeHsmInput {

    static func urlPathProvider(_ value: DescribeHsmInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLunaClientInput {

    static func urlPathProvider(_ value: DescribeLunaClientInput) -> Swift.String? {
        return "/"
    }
}

extension GetConfigInput {

    static func urlPathProvider(_ value: GetConfigInput) -> Swift.String? {
        return "/"
    }
}

extension ListAvailableZonesInput {

    static func urlPathProvider(_ value: ListAvailableZonesInput) -> Swift.String? {
        return "/"
    }
}

extension ListHapgsInput {

    static func urlPathProvider(_ value: ListHapgsInput) -> Swift.String? {
        return "/"
    }
}

extension ListHsmsInput {

    static func urlPathProvider(_ value: ListHsmsInput) -> Swift.String? {
        return "/"
    }
}

extension ListLunaClientsInput {

    static func urlPathProvider(_ value: ListLunaClientsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyHapgInput {

    static func urlPathProvider(_ value: ModifyHapgInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyHsmInput {

    static func urlPathProvider(_ value: ModifyHsmInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyLunaClientInput {

    static func urlPathProvider(_ value: ModifyLunaClientInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveTagsFromResourceInput {

    static func urlPathProvider(_ value: RemoveTagsFromResourceInput) -> Swift.String? {
        return "/"
    }
}

extension AddTagsToResourceInput {

    static func write(value: AddTagsToResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["TagList"].writeList(value.tagList, memberWritingClosure: CloudHSMClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateHapgInput {

    static func write(value: CreateHapgInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Label"].write(value.label)
    }
}

extension CreateHsmInput {

    static func write(value: CreateHsmInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["EniIp"].write(value.eniIp)
        try writer["ExternalId"].write(value.externalId)
        try writer["IamRoleArn"].write(value.iamRoleArn)
        try writer["SshKey"].write(value.sshKey)
        try writer["SubnetId"].write(value.subnetId)
        try writer["SubscriptionType"].write(value.subscriptionType)
        try writer["SyslogIp"].write(value.syslogIp)
    }
}

extension CreateLunaClientInput {

    static func write(value: CreateLunaClientInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Certificate"].write(value.certificate)
        try writer["Label"].write(value.label)
    }
}

extension DeleteHapgInput {

    static func write(value: DeleteHapgInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HapgArn"].write(value.hapgArn)
    }
}

extension DeleteHsmInput {

    static func write(value: DeleteHsmInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HsmArn"].write(value.hsmArn)
    }
}

extension DeleteLunaClientInput {

    static func write(value: DeleteLunaClientInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientArn"].write(value.clientArn)
    }
}

extension DescribeHapgInput {

    static func write(value: DescribeHapgInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HapgArn"].write(value.hapgArn)
    }
}

extension DescribeHsmInput {

    static func write(value: DescribeHsmInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HsmArn"].write(value.hsmArn)
        try writer["HsmSerialNumber"].write(value.hsmSerialNumber)
    }
}

extension DescribeLunaClientInput {

    static func write(value: DescribeLunaClientInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateFingerprint"].write(value.certificateFingerprint)
        try writer["ClientArn"].write(value.clientArn)
    }
}

extension GetConfigInput {

    static func write(value: GetConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientArn"].write(value.clientArn)
        try writer["ClientVersion"].write(value.clientVersion)
        try writer["HapgList"].writeList(value.hapgList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListAvailableZonesInput {

    static func write(value: ListAvailableZonesInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension ListHapgsInput {

    static func write(value: ListHapgsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListHsmsInput {

    static func write(value: ListHsmsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListLunaClientsInput {

    static func write(value: ListLunaClientsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension ModifyHapgInput {

    static func write(value: ModifyHapgInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HapgArn"].write(value.hapgArn)
        try writer["Label"].write(value.label)
        try writer["PartitionSerialList"].writeList(value.partitionSerialList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ModifyHsmInput {

    static func write(value: ModifyHsmInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EniIp"].write(value.eniIp)
        try writer["ExternalId"].write(value.externalId)
        try writer["HsmArn"].write(value.hsmArn)
        try writer["IamRoleArn"].write(value.iamRoleArn)
        try writer["SubnetId"].write(value.subnetId)
        try writer["SyslogIp"].write(value.syslogIp)
    }
}

extension ModifyLunaClientInput {

    static func write(value: ModifyLunaClientInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Certificate"].write(value.certificate)
        try writer["ClientArn"].write(value.clientArn)
    }
}

extension RemoveTagsFromResourceInput {

    static func write(value: RemoveTagsFromResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["TagKeyList"].writeList(value.tagKeyList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension AddTagsToResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddTagsToResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AddTagsToResourceOutput()
        value.status = try reader["Status"].readIfPresent() ?? ""
        return value
    }
}

extension CreateHapgOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateHapgOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateHapgOutput()
        value.hapgArn = try reader["HapgArn"].readIfPresent()
        return value
    }
}

extension CreateHsmOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateHsmOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateHsmOutput()
        value.hsmArn = try reader["HsmArn"].readIfPresent()
        return value
    }
}

extension CreateLunaClientOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateLunaClientOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateLunaClientOutput()
        value.clientArn = try reader["ClientArn"].readIfPresent()
        return value
    }
}

extension DeleteHapgOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteHapgOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteHapgOutput()
        value.status = try reader["Status"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteHsmOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteHsmOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteHsmOutput()
        value.status = try reader["Status"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteLunaClientOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLunaClientOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteLunaClientOutput()
        value.status = try reader["Status"].readIfPresent() ?? ""
        return value
    }
}

extension DescribeHapgOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeHapgOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeHapgOutput()
        value.hapgArn = try reader["HapgArn"].readIfPresent()
        value.hapgSerial = try reader["HapgSerial"].readIfPresent()
        value.hsmsLastActionFailed = try reader["HsmsLastActionFailed"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.hsmsPendingDeletion = try reader["HsmsPendingDeletion"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.hsmsPendingRegistration = try reader["HsmsPendingRegistration"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.label = try reader["Label"].readIfPresent()
        value.lastModifiedTimestamp = try reader["LastModifiedTimestamp"].readIfPresent()
        value.partitionSerialList = try reader["PartitionSerialList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension DescribeHsmOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeHsmOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeHsmOutput()
        value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
        value.eniId = try reader["EniId"].readIfPresent()
        value.eniIp = try reader["EniIp"].readIfPresent()
        value.hsmArn = try reader["HsmArn"].readIfPresent()
        value.hsmType = try reader["HsmType"].readIfPresent()
        value.iamRoleArn = try reader["IamRoleArn"].readIfPresent()
        value.partitions = try reader["Partitions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.serialNumber = try reader["SerialNumber"].readIfPresent()
        value.serverCertLastUpdated = try reader["ServerCertLastUpdated"].readIfPresent()
        value.serverCertUri = try reader["ServerCertUri"].readIfPresent()
        value.softwareVersion = try reader["SoftwareVersion"].readIfPresent()
        value.sshKeyLastUpdated = try reader["SshKeyLastUpdated"].readIfPresent()
        value.sshPublicKey = try reader["SshPublicKey"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusDetails = try reader["StatusDetails"].readIfPresent()
        value.subnetId = try reader["SubnetId"].readIfPresent()
        value.subscriptionEndDate = try reader["SubscriptionEndDate"].readIfPresent()
        value.subscriptionStartDate = try reader["SubscriptionStartDate"].readIfPresent()
        value.subscriptionType = try reader["SubscriptionType"].readIfPresent()
        value.vendorName = try reader["VendorName"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        return value
    }
}

extension DescribeLunaClientOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLunaClientOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeLunaClientOutput()
        value.certificate = try reader["Certificate"].readIfPresent()
        value.certificateFingerprint = try reader["CertificateFingerprint"].readIfPresent()
        value.clientArn = try reader["ClientArn"].readIfPresent()
        value.label = try reader["Label"].readIfPresent()
        value.lastModifiedTimestamp = try reader["LastModifiedTimestamp"].readIfPresent()
        return value
    }
}

extension GetConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetConfigOutput()
        value.configCred = try reader["ConfigCred"].readIfPresent()
        value.configFile = try reader["ConfigFile"].readIfPresent()
        value.configType = try reader["ConfigType"].readIfPresent()
        return value
    }
}

extension ListAvailableZonesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAvailableZonesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAvailableZonesOutput()
        value.azList = try reader["AZList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListHapgsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListHapgsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListHapgsOutput()
        value.hapgList = try reader["HapgList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListHsmsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListHsmsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListHsmsOutput()
        value.hsmList = try reader["HsmList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListLunaClientsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListLunaClientsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListLunaClientsOutput()
        value.clientList = try reader["ClientList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: CloudHSMClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ModifyHapgOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyHapgOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ModifyHapgOutput()
        value.hapgArn = try reader["HapgArn"].readIfPresent()
        return value
    }
}

extension ModifyHsmOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyHsmOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ModifyHsmOutput()
        value.hsmArn = try reader["HsmArn"].readIfPresent()
        return value
    }
}

extension ModifyLunaClientOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyLunaClientOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ModifyLunaClientOutput()
        value.clientArn = try reader["ClientArn"].readIfPresent()
        return value
    }
}

extension RemoveTagsFromResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveTagsFromResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RemoveTagsFromResourceOutput()
        value.status = try reader["Status"].readIfPresent() ?? ""
        return value
    }
}

enum AddTagsToResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateHapgOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateHsmOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateLunaClientOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteHapgOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteHsmOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLunaClientOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeHapgOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeHsmOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLunaClientOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAvailableZonesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListHapgsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListHsmsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListLunaClientsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyHapgOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyHsmOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyLunaClientOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveTagsFromResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmInternalException": return try CloudHsmInternalException.makeError(baseError: baseError)
            case "CloudHsmServiceException": return try CloudHsmServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension CloudHsmServiceException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CloudHsmServiceException {
        let reader = baseError.errorBodyReader
        var value = CloudHsmServiceException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.retryable = try reader["retryable"].readIfPresent() ?? false
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CloudHsmInternalException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CloudHsmInternalException {
        let reader = baseError.errorBodyReader
        var value = CloudHsmInternalException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.retryable = try reader["retryable"].readIfPresent() ?? false
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.retryable = try reader["retryable"].readIfPresent() ?? false
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CloudHSMClientTypes.Tag {

    static func write(value: CloudHSMClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CloudHSMClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudHSMClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

public enum CloudHSMClientTypes {}
