// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PIClient {
    /// Paginate over `[DescribeDimensionKeysOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeDimensionKeysInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeDimensionKeysOutputResponse`
    public func describeDimensionKeysPaginated(input: DescribeDimensionKeysInput) -> ClientRuntime.PaginatorSequence<DescribeDimensionKeysInput, DescribeDimensionKeysOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeDimensionKeysInput, DescribeDimensionKeysOutputResponse>(input: input, inputKey: \DescribeDimensionKeysInput.nextToken, outputKey: \DescribeDimensionKeysOutputResponse.nextToken, paginationFunction: self.describeDimensionKeys(input:))
    }
}

extension DescribeDimensionKeysInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeDimensionKeysInput {
        return DescribeDimensionKeysInput(
            additionalMetrics: self.additionalMetrics,
            endTime: self.endTime,
            filter: self.filter,
            groupBy: self.groupBy,
            identifier: self.identifier,
            maxResults: self.maxResults,
            metric: self.metric,
            nextToken: token,
            partitionBy: self.partitionBy,
            periodInSeconds: self.periodInSeconds,
            serviceType: self.serviceType,
            startTime: self.startTime
        )}
}
extension PIClient {
    /// Paginate over `[GetResourceMetricsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetResourceMetricsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetResourceMetricsOutputResponse`
    public func getResourceMetricsPaginated(input: GetResourceMetricsInput) -> ClientRuntime.PaginatorSequence<GetResourceMetricsInput, GetResourceMetricsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetResourceMetricsInput, GetResourceMetricsOutputResponse>(input: input, inputKey: \GetResourceMetricsInput.nextToken, outputKey: \GetResourceMetricsOutputResponse.nextToken, paginationFunction: self.getResourceMetrics(input:))
    }
}

extension GetResourceMetricsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetResourceMetricsInput {
        return GetResourceMetricsInput(
            endTime: self.endTime,
            identifier: self.identifier,
            maxResults: self.maxResults,
            metricQueries: self.metricQueries,
            nextToken: token,
            periodInSeconds: self.periodInSeconds,
            serviceType: self.serviceType,
            startTime: self.startTime
        )}
}
extension PIClient {
    /// Paginate over `[ListAvailableResourceDimensionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAvailableResourceDimensionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAvailableResourceDimensionsOutputResponse`
    public func listAvailableResourceDimensionsPaginated(input: ListAvailableResourceDimensionsInput) -> ClientRuntime.PaginatorSequence<ListAvailableResourceDimensionsInput, ListAvailableResourceDimensionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAvailableResourceDimensionsInput, ListAvailableResourceDimensionsOutputResponse>(input: input, inputKey: \ListAvailableResourceDimensionsInput.nextToken, outputKey: \ListAvailableResourceDimensionsOutputResponse.nextToken, paginationFunction: self.listAvailableResourceDimensions(input:))
    }
}

extension ListAvailableResourceDimensionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAvailableResourceDimensionsInput {
        return ListAvailableResourceDimensionsInput(
            identifier: self.identifier,
            maxResults: self.maxResults,
            metrics: self.metrics,
            nextToken: token,
            serviceType: self.serviceType
        )}
}
extension PIClient {
    /// Paginate over `[ListAvailableResourceMetricsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAvailableResourceMetricsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAvailableResourceMetricsOutputResponse`
    public func listAvailableResourceMetricsPaginated(input: ListAvailableResourceMetricsInput) -> ClientRuntime.PaginatorSequence<ListAvailableResourceMetricsInput, ListAvailableResourceMetricsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAvailableResourceMetricsInput, ListAvailableResourceMetricsOutputResponse>(input: input, inputKey: \ListAvailableResourceMetricsInput.nextToken, outputKey: \ListAvailableResourceMetricsOutputResponse.nextToken, paginationFunction: self.listAvailableResourceMetrics(input:))
    }
}

extension ListAvailableResourceMetricsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAvailableResourceMetricsInput {
        return ListAvailableResourceMetricsInput(
            identifier: self.identifier,
            maxResults: self.maxResults,
            metricTypes: self.metricTypes,
            nextToken: token,
            serviceType: self.serviceType
        )}
}
