// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudTrailClient {
    /// Paginate over `[GetQueryResultsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetQueryResultsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetQueryResultsOutput`
    public func getQueryResultsPaginated(input: GetQueryResultsInput) -> ClientRuntime.PaginatorSequence<GetQueryResultsInput, GetQueryResultsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetQueryResultsInput, GetQueryResultsOutput>(input: input, inputKey: \GetQueryResultsInput.nextToken, outputKey: \GetQueryResultsOutput.nextToken, paginationFunction: self.getQueryResults(input:))
=======
        return ClientRuntime.PaginatorSequence<GetQueryResultsInput, GetQueryResultsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getQueryResults(input:))
>>>>>>> main
    }
}

extension GetQueryResultsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetQueryResultsInput {
        return GetQueryResultsInput(
            eventDataStore: self.eventDataStore,
            maxQueryResults: self.maxQueryResults,
            nextToken: token,
            queryId: self.queryId
        )}
}
extension CloudTrailClient {
    /// Paginate over `[ListChannelsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListChannelsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListChannelsOutput`
    public func listChannelsPaginated(input: ListChannelsInput) -> ClientRuntime.PaginatorSequence<ListChannelsInput, ListChannelsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListChannelsInput, ListChannelsOutput>(input: input, inputKey: \ListChannelsInput.nextToken, outputKey: \ListChannelsOutput.nextToken, paginationFunction: self.listChannels(input:))
=======
        return ClientRuntime.PaginatorSequence<ListChannelsInput, ListChannelsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listChannels(input:))
>>>>>>> main
    }
}

extension ListChannelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChannelsInput {
        return ListChannelsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension CloudTrailClient {
    /// Paginate over `[ListEventDataStoresOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListEventDataStoresInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListEventDataStoresOutput`
    public func listEventDataStoresPaginated(input: ListEventDataStoresInput) -> ClientRuntime.PaginatorSequence<ListEventDataStoresInput, ListEventDataStoresOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListEventDataStoresInput, ListEventDataStoresOutput>(input: input, inputKey: \ListEventDataStoresInput.nextToken, outputKey: \ListEventDataStoresOutput.nextToken, paginationFunction: self.listEventDataStores(input:))
=======
        return ClientRuntime.PaginatorSequence<ListEventDataStoresInput, ListEventDataStoresOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listEventDataStores(input:))
>>>>>>> main
    }
}

extension ListEventDataStoresInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEventDataStoresInput {
        return ListEventDataStoresInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension CloudTrailClient {
    /// Paginate over `[ListImportFailuresOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListImportFailuresInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListImportFailuresOutput`
    public func listImportFailuresPaginated(input: ListImportFailuresInput) -> ClientRuntime.PaginatorSequence<ListImportFailuresInput, ListImportFailuresOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListImportFailuresInput, ListImportFailuresOutput>(input: input, inputKey: \ListImportFailuresInput.nextToken, outputKey: \ListImportFailuresOutput.nextToken, paginationFunction: self.listImportFailures(input:))
=======
        return ClientRuntime.PaginatorSequence<ListImportFailuresInput, ListImportFailuresOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listImportFailures(input:))
>>>>>>> main
    }
}

extension ListImportFailuresInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImportFailuresInput {
        return ListImportFailuresInput(
            importId: self.importId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListImportFailuresInput, Output == ListImportFailuresOutput {
=======
extension PaginatorSequence where OperationStackInput == ListImportFailuresInput, OperationStackOutput == ListImportFailuresOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listImportFailuresPaginated`
    /// to access the nested member `[CloudTrailClientTypes.ImportFailureListItem]`
    /// - Returns: `[CloudTrailClientTypes.ImportFailureListItem]`
    public func failures() async throws -> [CloudTrailClientTypes.ImportFailureListItem] {
        return try await self.asyncCompactMap { item in item.failures }
    }
}
extension CloudTrailClient {
    /// Paginate over `[ListImportsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListImportsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListImportsOutput`
    public func listImportsPaginated(input: ListImportsInput) -> ClientRuntime.PaginatorSequence<ListImportsInput, ListImportsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListImportsInput, ListImportsOutput>(input: input, inputKey: \ListImportsInput.nextToken, outputKey: \ListImportsOutput.nextToken, paginationFunction: self.listImports(input:))
=======
        return ClientRuntime.PaginatorSequence<ListImportsInput, ListImportsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listImports(input:))
>>>>>>> main
    }
}

extension ListImportsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImportsInput {
        return ListImportsInput(
            destination: self.destination,
            importStatus: self.importStatus,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListImportsInput, Output == ListImportsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListImportsInput, OperationStackOutput == ListImportsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listImportsPaginated`
    /// to access the nested member `[CloudTrailClientTypes.ImportsListItem]`
    /// - Returns: `[CloudTrailClientTypes.ImportsListItem]`
    public func imports() async throws -> [CloudTrailClientTypes.ImportsListItem] {
        return try await self.asyncCompactMap { item in item.imports }
    }
}
extension CloudTrailClient {
    /// Paginate over `[ListPublicKeysOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPublicKeysInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPublicKeysOutput`
    public func listPublicKeysPaginated(input: ListPublicKeysInput) -> ClientRuntime.PaginatorSequence<ListPublicKeysInput, ListPublicKeysOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListPublicKeysInput, ListPublicKeysOutput>(input: input, inputKey: \ListPublicKeysInput.nextToken, outputKey: \ListPublicKeysOutput.nextToken, paginationFunction: self.listPublicKeys(input:))
=======
        return ClientRuntime.PaginatorSequence<ListPublicKeysInput, ListPublicKeysOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listPublicKeys(input:))
>>>>>>> main
    }
}

extension ListPublicKeysInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPublicKeysInput {
        return ListPublicKeysInput(
            endTime: self.endTime,
            nextToken: token,
            startTime: self.startTime
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListPublicKeysInput, Output == ListPublicKeysOutput {
=======
extension PaginatorSequence where OperationStackInput == ListPublicKeysInput, OperationStackOutput == ListPublicKeysOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listPublicKeysPaginated`
    /// to access the nested member `[CloudTrailClientTypes.PublicKey]`
    /// - Returns: `[CloudTrailClientTypes.PublicKey]`
    public func publicKeyList() async throws -> [CloudTrailClientTypes.PublicKey] {
        return try await self.asyncCompactMap { item in item.publicKeyList }
    }
}
extension CloudTrailClient {
    /// Paginate over `[ListQueriesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListQueriesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListQueriesOutput`
    public func listQueriesPaginated(input: ListQueriesInput) -> ClientRuntime.PaginatorSequence<ListQueriesInput, ListQueriesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListQueriesInput, ListQueriesOutput>(input: input, inputKey: \ListQueriesInput.nextToken, outputKey: \ListQueriesOutput.nextToken, paginationFunction: self.listQueries(input:))
=======
        return ClientRuntime.PaginatorSequence<ListQueriesInput, ListQueriesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listQueries(input:))
>>>>>>> main
    }
}

extension ListQueriesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListQueriesInput {
        return ListQueriesInput(
            endTime: self.endTime,
            eventDataStore: self.eventDataStore,
            maxResults: self.maxResults,
            nextToken: token,
            queryStatus: self.queryStatus,
            startTime: self.startTime
        )}
}
extension CloudTrailClient {
    /// Paginate over `[ListTagsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTagsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTagsOutput`
    public func listTagsPaginated(input: ListTagsInput) -> ClientRuntime.PaginatorSequence<ListTagsInput, ListTagsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListTagsInput, ListTagsOutput>(input: input, inputKey: \ListTagsInput.nextToken, outputKey: \ListTagsOutput.nextToken, paginationFunction: self.listTags(input:))
=======
        return ClientRuntime.PaginatorSequence<ListTagsInput, ListTagsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTags(input:))
>>>>>>> main
    }
}

extension ListTagsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTagsInput {
        return ListTagsInput(
            nextToken: token,
            resourceIdList: self.resourceIdList
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListTagsInput, Output == ListTagsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListTagsInput, OperationStackOutput == ListTagsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listTagsPaginated`
    /// to access the nested member `[CloudTrailClientTypes.ResourceTag]`
    /// - Returns: `[CloudTrailClientTypes.ResourceTag]`
    public func resourceTagList() async throws -> [CloudTrailClientTypes.ResourceTag] {
        return try await self.asyncCompactMap { item in item.resourceTagList }
    }
}
extension CloudTrailClient {
    /// Paginate over `[ListTrailsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTrailsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTrailsOutput`
    public func listTrailsPaginated(input: ListTrailsInput) -> ClientRuntime.PaginatorSequence<ListTrailsInput, ListTrailsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListTrailsInput, ListTrailsOutput>(input: input, inputKey: \ListTrailsInput.nextToken, outputKey: \ListTrailsOutput.nextToken, paginationFunction: self.listTrails(input:))
=======
        return ClientRuntime.PaginatorSequence<ListTrailsInput, ListTrailsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTrails(input:))
>>>>>>> main
    }
}

extension ListTrailsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTrailsInput {
        return ListTrailsInput(
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListTrailsInput, Output == ListTrailsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListTrailsInput, OperationStackOutput == ListTrailsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listTrailsPaginated`
    /// to access the nested member `[CloudTrailClientTypes.TrailInfo]`
    /// - Returns: `[CloudTrailClientTypes.TrailInfo]`
    public func trails() async throws -> [CloudTrailClientTypes.TrailInfo] {
        return try await self.asyncCompactMap { item in item.trails }
    }
}
extension CloudTrailClient {
    /// Paginate over `[LookupEventsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[LookupEventsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `LookupEventsOutput`
    public func lookupEventsPaginated(input: LookupEventsInput) -> ClientRuntime.PaginatorSequence<LookupEventsInput, LookupEventsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<LookupEventsInput, LookupEventsOutput>(input: input, inputKey: \LookupEventsInput.nextToken, outputKey: \LookupEventsOutput.nextToken, paginationFunction: self.lookupEvents(input:))
=======
        return ClientRuntime.PaginatorSequence<LookupEventsInput, LookupEventsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.lookupEvents(input:))
>>>>>>> main
    }
}

extension LookupEventsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> LookupEventsInput {
        return LookupEventsInput(
            endTime: self.endTime,
            eventCategory: self.eventCategory,
            lookupAttributes: self.lookupAttributes,
            maxResults: self.maxResults,
            nextToken: token,
            startTime: self.startTime
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == LookupEventsInput, Output == LookupEventsOutput {
=======
extension PaginatorSequence where OperationStackInput == LookupEventsInput, OperationStackOutput == LookupEventsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `lookupEventsPaginated`
    /// to access the nested member `[CloudTrailClientTypes.Event]`
    /// - Returns: `[CloudTrailClientTypes.Event]`
    public func events() async throws -> [CloudTrailClientTypes.Event] {
        return try await self.asyncCompactMap { item in item.events }
    }
}
