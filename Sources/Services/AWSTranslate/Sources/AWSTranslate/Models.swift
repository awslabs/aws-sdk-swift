//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError


public struct DeleteTerminologyOutput: Swift.Sendable {

    public init() { }
}

extension TranslateClientTypes {

    /// The term being translated by the custom terminology.
    public struct Term: Swift.Sendable {
        /// The source text of the term being translated by the custom terminology.
        public var sourceText: Swift.String?
        /// The target text of the term being translated by the custom terminology.
        public var targetText: Swift.String?

        public init(
            sourceText: Swift.String? = nil,
            targetText: Swift.String? = nil
        )
        {
            self.sourceText = sourceText
            self.targetText = targetText
        }
    }
}

extension TranslateClientTypes {

    /// The custom terminology applied to the input text by Amazon Translate for the translated text response. This is optional in the response and will only be present if you specified terminology input in the request. Currently, only one terminology can be applied per TranslateText request.
    public struct AppliedTerminology: Swift.Sendable {
        /// The name of the custom terminology applied to the input text by Amazon Translate for the translated text response.
        public var name: Swift.String?
        /// The specific terms of the custom terminology applied to the input text by Amazon Translate for the translated text response. A maximum of 250 terms will be returned, and the specific terms applied will be the first 250 terms in the source text.
        public var terms: [TranslateClientTypes.Term]?

        public init(
            name: Swift.String? = nil,
            terms: [TranslateClientTypes.Term]? = nil
        )
        {
            self.name = name
            self.terms = terms
        }
    }
}

/// Another modification is being made. That modification must complete before you can make your change.
public struct ConcurrentModificationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentModificationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There was a conflict processing the request. Try your request again.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An internal server error occurred. Retry your request.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The value of the parameter is not valid. Review the value of the parameter you are using to correct it, and then retry your operation.
public struct InvalidParameterValueException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterValueException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request that you made is not valid. Check your request to determine why it's not valid and then retry the request.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified limit has been exceeded. Review your request and retry it with a quantity below the stated limit.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You have made too many requests within a short period of time. Wait for a short time and then try your request again.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You have added too many tags to this resource. The maximum is 50 tags.
public struct TooManyTagsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var resourceArn: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTagsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceArn = resourceArn
    }
}

extension TranslateClientTypes {

    public enum EncryptionKeyType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case kms
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionKeyType] {
            return [
                .kms
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .kms: return "KMS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TranslateClientTypes {

    /// The encryption key used to encrypt this object.
    public struct EncryptionKey: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the encryption key being used to encrypt this object.
        /// This member is required.
        public var id: Swift.String?
        /// The type of encryption key used by Amazon Translate to encrypt this object.
        /// This member is required.
        public var type: TranslateClientTypes.EncryptionKeyType?

        public init(
            id: Swift.String? = nil,
            type: TranslateClientTypes.EncryptionKeyType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }
}

extension TranslateClientTypes {

    public enum ParallelDataFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case tmx
        case tsv
        case sdkUnknown(Swift.String)

        public static var allCases: [ParallelDataFormat] {
            return [
                .csv,
                .tmx,
                .tsv
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .tmx: return "TMX"
            case .tsv: return "TSV"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TranslateClientTypes {

    /// Specifies the format and S3 location of the parallel data input file.
    public struct ParallelDataConfig: Swift.Sendable {
        /// The format of the parallel data input file.
        public var format: TranslateClientTypes.ParallelDataFormat?
        /// The URI of the Amazon S3 folder that contains the parallel data input file. The folder must be in the same Region as the API endpoint you are calling.
        public var s3Uri: Swift.String?

        public init(
            format: TranslateClientTypes.ParallelDataFormat? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.format = format
            self.s3Uri = s3Uri
        }
    }
}

extension TranslateClientTypes {

    /// A key-value pair that adds as a metadata to a resource used by Amazon Translate.
    public struct Tag: Swift.Sendable {
        /// The initial part of a key-value pair that forms a tag associated with a given resource.
        /// This member is required.
        public var key: Swift.String?
        /// The second part of a key-value pair that forms a tag associated with a given resource.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct CreateParallelDataInput: Swift.Sendable {
    /// A unique identifier for the request. This token is automatically generated when you use Amazon Translate through an AWS SDK.
    /// This member is required.
    public var clientToken: Swift.String?
    /// A custom description for the parallel data resource in Amazon Translate.
    public var description: Swift.String?
    /// The encryption key used to encrypt this object.
    public var encryptionKey: TranslateClientTypes.EncryptionKey?
    /// A custom name for the parallel data resource in Amazon Translate. You must assign a name that is unique in the account and region.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies the format and S3 location of the parallel data input file.
    /// This member is required.
    public var parallelDataConfig: TranslateClientTypes.ParallelDataConfig?
    /// Tags to be associated with this resource. A tag is a key-value pair that adds metadata to a resource. Each tag key for the resource must be unique. For more information, see [ Tagging your resources](https://docs.aws.amazon.com/translate/latest/dg/tagging.html).
    public var tags: [TranslateClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        encryptionKey: TranslateClientTypes.EncryptionKey? = nil,
        name: Swift.String? = nil,
        parallelDataConfig: TranslateClientTypes.ParallelDataConfig? = nil,
        tags: [TranslateClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.encryptionKey = encryptionKey
        self.name = name
        self.parallelDataConfig = parallelDataConfig
        self.tags = tags
    }
}

extension TranslateClientTypes {

    public enum ParallelDataStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ParallelDataStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateParallelDataOutput: Swift.Sendable {
    /// The custom name that you assigned to the parallel data resource.
    public var name: Swift.String?
    /// The status of the parallel data resource. When the resource is ready for you to use, the status is ACTIVE.
    public var status: TranslateClientTypes.ParallelDataStatus?

    public init(
        name: Swift.String? = nil,
        status: TranslateClientTypes.ParallelDataStatus? = nil
    )
    {
        self.name = name
        self.status = status
    }
}

/// The resource you are looking for has not been found. Review the resource you're looking for and see if a different resource will accomplish your needs before retrying the revised request.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteParallelDataInput: Swift.Sendable {
    /// The name of the parallel data resource that is being deleted.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteParallelDataOutput: Swift.Sendable {
    /// The name of the parallel data resource that is being deleted.
    public var name: Swift.String?
    /// The status of the parallel data deletion.
    public var status: TranslateClientTypes.ParallelDataStatus?

    public init(
        name: Swift.String? = nil,
        status: TranslateClientTypes.ParallelDataStatus? = nil
    )
    {
        self.name = name
        self.status = status
    }
}

public struct DeleteTerminologyInput: Swift.Sendable {
    /// The name of the custom terminology being deleted.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DescribeTextTranslationJobInput: Swift.Sendable {
    /// The identifier that Amazon Translate generated for the job. The [StartTextTranslationJob] operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension TranslateClientTypes {

    /// The input configuration properties for requesting a batch translation job.
    public struct InputDataConfig: Swift.Sendable {
        /// Describes the format of the data that you submit to Amazon Translate as input. You can specify one of the following multipurpose internet mail extension (MIME) types:
        ///
        /// * text/html: The input data consists of one or more HTML files. Amazon Translate translates only the text that resides in the html element in each file.
        ///
        /// * text/plain: The input data consists of one or more unformatted text files. Amazon Translate translates every character in this type of input.
        ///
        /// * application/vnd.openxmlformats-officedocument.wordprocessingml.document: The input data consists of one or more Word documents (.docx).
        ///
        /// * application/vnd.openxmlformats-officedocument.presentationml.presentation: The input data consists of one or more PowerPoint Presentation files (.pptx).
        ///
        /// * application/vnd.openxmlformats-officedocument.spreadsheetml.sheet: The input data consists of one or more Excel Workbook files (.xlsx).
        ///
        /// * application/x-xliff+xml: The input data consists of one or more XML Localization Interchange File Format (XLIFF) files (.xlf). Amazon Translate supports only XLIFF version 1.2.
        ///
        ///
        /// If you structure your input data as HTML, ensure that you set this parameter to text/html. By doing so, you cut costs by limiting the translation to the contents of the html element in each file. Otherwise, if you set this parameter to text/plain, your costs will cover the translation of every character.
        /// This member is required.
        public var contentType: Swift.String?
        /// The URI of the AWS S3 folder that contains the input files. Amazon Translate translates all the files in the folder and all its sub-folders. The folder must be in the same Region as the API endpoint you are calling.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            contentType: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.contentType = contentType
            self.s3Uri = s3Uri
        }
    }
}

extension TranslateClientTypes {

    /// The number of documents successfully and unsuccessfully processed during a translation job.
    public struct JobDetails: Swift.Sendable {
        /// The number of documents that could not be processed during a translation job.
        public var documentsWithErrorsCount: Swift.Int?
        /// The number of documents used as input in a translation job.
        public var inputDocumentsCount: Swift.Int?
        /// The number of documents successfully processed during a translation job.
        public var translatedDocumentsCount: Swift.Int?

        public init(
            documentsWithErrorsCount: Swift.Int? = nil,
            inputDocumentsCount: Swift.Int? = nil,
            translatedDocumentsCount: Swift.Int? = nil
        )
        {
            self.documentsWithErrorsCount = documentsWithErrorsCount
            self.inputDocumentsCount = inputDocumentsCount
            self.translatedDocumentsCount = translatedDocumentsCount
        }
    }
}

extension TranslateClientTypes {

    public enum JobStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case completedWithError
        case failed
        case inProgress
        case stopped
        case stopRequested
        case submitted
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .completed,
                .completedWithError,
                .failed,
                .inProgress,
                .stopped,
                .stopRequested,
                .submitted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .completedWithError: return "COMPLETED_WITH_ERROR"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .stopped: return "STOPPED"
            case .stopRequested: return "STOP_REQUESTED"
            case .submitted: return "SUBMITTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TranslateClientTypes {

    /// The output configuration properties for a batch translation job.
    public struct OutputDataConfig: Swift.Sendable {
        /// The encryption key used to encrypt this object.
        public var encryptionKey: TranslateClientTypes.EncryptionKey?
        /// The URI of the S3 folder that contains a translation job's output file. The folder must be in the same Region as the API endpoint that you are calling.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            encryptionKey: TranslateClientTypes.EncryptionKey? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.encryptionKey = encryptionKey
            self.s3Uri = s3Uri
        }
    }
}

extension TranslateClientTypes {

    public enum Brevity: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case on
        case sdkUnknown(Swift.String)

        public static var allCases: [Brevity] {
            return [
                .on
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .on: return "ON"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TranslateClientTypes {

    public enum Formality: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case formal
        case informal
        case sdkUnknown(Swift.String)

        public static var allCases: [Formality] {
            return [
                .formal,
                .informal
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .formal: return "FORMAL"
            case .informal: return "INFORMAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TranslateClientTypes {

    public enum Profanity: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mask
        case sdkUnknown(Swift.String)

        public static var allCases: [Profanity] {
            return [
                .mask
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mask: return "MASK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TranslateClientTypes {

    /// Settings to configure your translation output. You can configure the following options:
    ///
    /// * Brevity: reduces the length of the translation output for most translations. Available for TranslateText only.
    ///
    /// * Formality: sets the formality level of the translation output.
    ///
    /// * Profanity: masks profane words and phrases in the translation output.
    public struct TranslationSettings: Swift.Sendable {
        /// When you turn on brevity, Amazon Translate reduces the length of the translation output for most translations (when compared with the same translation with brevity turned off). By default, brevity is turned off. If you turn on brevity for a translation request with an unsupported language pair, the translation proceeds with the brevity setting turned off. For the language pairs that brevity supports, see [Using brevity](https://docs.aws.amazon.com/translate/latest/dg/customizing-translations-brevity) in the Amazon Translate Developer Guide.
        public var brevity: TranslateClientTypes.Brevity?
        /// You can specify the desired level of formality for translations to supported target languages. The formality setting controls the level of formal language usage (also known as [register](https://en.wikipedia.org/wiki/Register_(sociolinguistics))) in the translation output. You can set the value to informal or formal. If you don't specify a value for formality, or if the target language doesn't support formality, the translation will ignore the formality setting. If you specify multiple target languages for the job, translate ignores the formality setting for any unsupported target language. For a list of target languages that support formality, see [Supported languages](https://docs.aws.amazon.com/translate/latest/dg/customizing-translations-formality.html#customizing-translations-formality-languages) in the Amazon Translate Developer Guide.
        public var formality: TranslateClientTypes.Formality?
        /// You can enable the profanity setting if you want to mask profane words and phrases in your translation output. To mask profane words and phrases, Amazon Translate replaces them with the grawlix string “?$#@$“. This 5-character sequence is used for each profane word or phrase, regardless of the length or number of words. Amazon Translate doesn't detect profanity in all of its supported languages. For languages that don't support profanity detection, see [Unsupported languages](https://docs.aws.amazon.com/translate/latest/dg/customizing-translations-profanity.html#customizing-translations-profanity-languages) in the Amazon Translate Developer Guide. If you specify multiple target languages for the job, all the target languages must support profanity masking. If any of the target languages don't support profanity masking, the translation job won't mask profanity for any target language.
        public var profanity: TranslateClientTypes.Profanity?

        public init(
            brevity: TranslateClientTypes.Brevity? = nil,
            formality: TranslateClientTypes.Formality? = nil,
            profanity: TranslateClientTypes.Profanity? = nil
        )
        {
            self.brevity = brevity
            self.formality = formality
            self.profanity = profanity
        }
    }
}

extension TranslateClientTypes {

    /// Provides information about a translation job.
    public struct TextTranslationJobProperties: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of an AWS Identity Access and Management (IAM) role that granted Amazon Translate read access to the job's input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time at which the translation job ended.
        public var endTime: Foundation.Date?
        /// The input configuration properties that were specified when the job was requested.
        public var inputDataConfig: TranslateClientTypes.InputDataConfig?
        /// The number of documents successfully and unsuccessfully processed during the translation job.
        public var jobDetails: TranslateClientTypes.JobDetails?
        /// The ID of the translation job.
        public var jobId: Swift.String?
        /// The user-defined name of the translation job.
        public var jobName: Swift.String?
        /// The status of the translation job.
        public var jobStatus: TranslateClientTypes.JobStatus?
        /// An explanation of any errors that may have occurred during the translation job.
        public var message: Swift.String?
        /// The output configuration properties that were specified when the job was requested.
        public var outputDataConfig: TranslateClientTypes.OutputDataConfig?
        /// A list containing the names of the parallel data resources applied to the translation job.
        public var parallelDataNames: [Swift.String]?
        /// Settings that modify the translation output.
        public var settings: TranslateClientTypes.TranslationSettings?
        /// The language code of the language of the source text. The language must be a language supported by Amazon Translate.
        public var sourceLanguageCode: Swift.String?
        /// The time at which the translation job was submitted.
        public var submittedTime: Foundation.Date?
        /// The language code of the language of the target text. The language must be a language supported by Amazon Translate.
        public var targetLanguageCodes: [Swift.String]?
        /// A list containing the names of the terminologies applied to a translation job. Only one terminology can be applied per [StartTextTranslationJob] request at this time.
        public var terminologyNames: [Swift.String]?

        public init(
            dataAccessRoleArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            inputDataConfig: TranslateClientTypes.InputDataConfig? = nil,
            jobDetails: TranslateClientTypes.JobDetails? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: TranslateClientTypes.JobStatus? = nil,
            message: Swift.String? = nil,
            outputDataConfig: TranslateClientTypes.OutputDataConfig? = nil,
            parallelDataNames: [Swift.String]? = nil,
            settings: TranslateClientTypes.TranslationSettings? = nil,
            sourceLanguageCode: Swift.String? = nil,
            submittedTime: Foundation.Date? = nil,
            targetLanguageCodes: [Swift.String]? = nil,
            terminologyNames: [Swift.String]? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobDetails = jobDetails
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.parallelDataNames = parallelDataNames
            self.settings = settings
            self.sourceLanguageCode = sourceLanguageCode
            self.submittedTime = submittedTime
            self.targetLanguageCodes = targetLanguageCodes
            self.terminologyNames = terminologyNames
        }
    }
}

public struct DescribeTextTranslationJobOutput: Swift.Sendable {
    /// An object that contains the properties associated with an asynchronous batch translation job.
    public var textTranslationJobProperties: TranslateClientTypes.TextTranslationJobProperties?

    public init(
        textTranslationJobProperties: TranslateClientTypes.TextTranslationJobProperties? = nil
    )
    {
        self.textTranslationJobProperties = textTranslationJobProperties
    }
}

public struct GetParallelDataInput: Swift.Sendable {
    /// The name of the parallel data resource that is being retrieved.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension TranslateClientTypes {

    /// The location of the most recent parallel data input file that was successfully imported into Amazon Translate.
    public struct ParallelDataDataLocation: Swift.Sendable {
        /// The Amazon S3 location of the parallel data input file. The location is returned as a presigned URL to that has a 30-minute expiration. Amazon Translate doesn't scan all input files for the risk of CSV injection attacks. CSV injection occurs when a .csv or .tsv file is altered so that a record contains malicious code. The record begins with a special character, such as =, +, -, or @. When the file is opened in a spreadsheet program, the program might interpret the record as a formula and run the code within it. Before you download an input file from Amazon S3, ensure that you recognize the file and trust its creator.
        /// This member is required.
        public var location: Swift.String?
        /// Describes the repository that contains the parallel data input file.
        /// This member is required.
        public var repositoryType: Swift.String?

        public init(
            location: Swift.String? = nil,
            repositoryType: Swift.String? = nil
        )
        {
            self.location = location
            self.repositoryType = repositoryType
        }
    }
}

extension TranslateClientTypes {

    /// The properties of a parallel data resource.
    public struct ParallelDataProperties: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the parallel data resource.
        public var arn: Swift.String?
        /// The time at which the parallel data resource was created.
        public var createdAt: Foundation.Date?
        /// The description assigned to the parallel data resource.
        public var description: Swift.String?
        /// The encryption key used to encrypt this object.
        public var encryptionKey: TranslateClientTypes.EncryptionKey?
        /// The number of records unsuccessfully imported from the parallel data input file.
        public var failedRecordCount: Swift.Int?
        /// The number of UTF-8 characters that Amazon Translate imported from the parallel data input file. This number includes only the characters in your translation examples. It does not include characters that are used to format your file. For example, if you provided a Translation Memory Exchange (.tmx) file, this number does not include the tags.
        public var importedDataSize: Swift.Int?
        /// The number of records successfully imported from the parallel data input file.
        public var importedRecordCount: Swift.Int?
        /// The time at which the parallel data resource was last updated.
        public var lastUpdatedAt: Foundation.Date?
        /// The time that the most recent update was attempted.
        public var latestUpdateAttemptAt: Foundation.Date?
        /// The status of the most recent update attempt for the parallel data resource.
        public var latestUpdateAttemptStatus: TranslateClientTypes.ParallelDataStatus?
        /// Additional information from Amazon Translate about the parallel data resource.
        public var message: Swift.String?
        /// The custom name assigned to the parallel data resource.
        public var name: Swift.String?
        /// Specifies the format and S3 location of the parallel data input file.
        public var parallelDataConfig: TranslateClientTypes.ParallelDataConfig?
        /// The number of items in the input file that Amazon Translate skipped when you created or updated the parallel data resource. For example, Amazon Translate skips empty records, empty target texts, and empty lines.
        public var skippedRecordCount: Swift.Int?
        /// The source language of the translations in the parallel data file.
        public var sourceLanguageCode: Swift.String?
        /// The status of the parallel data resource. When the parallel data is ready for you to use, the status is ACTIVE.
        public var status: TranslateClientTypes.ParallelDataStatus?
        /// The language codes for the target languages available in the parallel data file. All possible target languages are returned as an array.
        public var targetLanguageCodes: [Swift.String]?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            encryptionKey: TranslateClientTypes.EncryptionKey? = nil,
            failedRecordCount: Swift.Int? = nil,
            importedDataSize: Swift.Int? = nil,
            importedRecordCount: Swift.Int? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            latestUpdateAttemptAt: Foundation.Date? = nil,
            latestUpdateAttemptStatus: TranslateClientTypes.ParallelDataStatus? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            parallelDataConfig: TranslateClientTypes.ParallelDataConfig? = nil,
            skippedRecordCount: Swift.Int? = nil,
            sourceLanguageCode: Swift.String? = nil,
            status: TranslateClientTypes.ParallelDataStatus? = nil,
            targetLanguageCodes: [Swift.String]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.encryptionKey = encryptionKey
            self.failedRecordCount = failedRecordCount
            self.importedDataSize = importedDataSize
            self.importedRecordCount = importedRecordCount
            self.lastUpdatedAt = lastUpdatedAt
            self.latestUpdateAttemptAt = latestUpdateAttemptAt
            self.latestUpdateAttemptStatus = latestUpdateAttemptStatus
            self.message = message
            self.name = name
            self.parallelDataConfig = parallelDataConfig
            self.skippedRecordCount = skippedRecordCount
            self.sourceLanguageCode = sourceLanguageCode
            self.status = status
            self.targetLanguageCodes = targetLanguageCodes
        }
    }
}

public struct GetParallelDataOutput: Swift.Sendable {
    /// The Amazon S3 location of a file that provides any errors or warnings that were produced by your input file. This file was created when Amazon Translate attempted to create a parallel data resource. The location is returned as a presigned URL to that has a 30-minute expiration.
    public var auxiliaryDataLocation: TranslateClientTypes.ParallelDataDataLocation?
    /// The Amazon S3 location of the most recent parallel data input file that was successfully imported into Amazon Translate. The location is returned as a presigned URL that has a 30-minute expiration. Amazon Translate doesn't scan all input files for the risk of CSV injection attacks. CSV injection occurs when a .csv or .tsv file is altered so that a record contains malicious code. The record begins with a special character, such as =, +, -, or @. When the file is opened in a spreadsheet program, the program might interpret the record as a formula and run the code within it. Before you download an input file from Amazon S3, ensure that you recognize the file and trust its creator.
    public var dataLocation: TranslateClientTypes.ParallelDataDataLocation?
    /// The Amazon S3 location of a file that provides any errors or warnings that were produced by your input file. This file was created when Amazon Translate attempted to update a parallel data resource. The location is returned as a presigned URL to that has a 30-minute expiration.
    public var latestUpdateAttemptAuxiliaryDataLocation: TranslateClientTypes.ParallelDataDataLocation?
    /// The properties of the parallel data resource that is being retrieved.
    public var parallelDataProperties: TranslateClientTypes.ParallelDataProperties?

    public init(
        auxiliaryDataLocation: TranslateClientTypes.ParallelDataDataLocation? = nil,
        dataLocation: TranslateClientTypes.ParallelDataDataLocation? = nil,
        latestUpdateAttemptAuxiliaryDataLocation: TranslateClientTypes.ParallelDataDataLocation? = nil,
        parallelDataProperties: TranslateClientTypes.ParallelDataProperties? = nil
    )
    {
        self.auxiliaryDataLocation = auxiliaryDataLocation
        self.dataLocation = dataLocation
        self.latestUpdateAttemptAuxiliaryDataLocation = latestUpdateAttemptAuxiliaryDataLocation
        self.parallelDataProperties = parallelDataProperties
    }
}

extension TranslateClientTypes {

    public enum TerminologyDataFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case tmx
        case tsv
        case sdkUnknown(Swift.String)

        public static var allCases: [TerminologyDataFormat] {
            return [
                .csv,
                .tmx,
                .tsv
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .tmx: return "TMX"
            case .tsv: return "TSV"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetTerminologyInput: Swift.Sendable {
    /// The name of the custom terminology being retrieved.
    /// This member is required.
    public var name: Swift.String?
    /// The data format of the custom terminology being retrieved. If you don't specify this parameter, Amazon Translate returns a file with the same format as the file that was imported to create the terminology. If you specify this parameter when you retrieve a multi-directional terminology resource, you must specify the same format as the input file that was imported to create it. Otherwise, Amazon Translate throws an error.
    public var terminologyDataFormat: TranslateClientTypes.TerminologyDataFormat?

    public init(
        name: Swift.String? = nil,
        terminologyDataFormat: TranslateClientTypes.TerminologyDataFormat? = nil
    )
    {
        self.name = name
        self.terminologyDataFormat = terminologyDataFormat
    }
}

extension TranslateClientTypes {

    /// The location of the custom terminology data.
    public struct TerminologyDataLocation: Swift.Sendable {
        /// The Amazon S3 location of the most recent custom terminology input file that was successfully imported into Amazon Translate. The location is returned as a presigned URL that has a 30-minute expiration . Amazon Translate doesn't scan all input files for the risk of CSV injection attacks. CSV injection occurs when a .csv or .tsv file is altered so that a record contains malicious code. The record begins with a special character, such as =, +, -, or @. When the file is opened in a spreadsheet program, the program might interpret the record as a formula and run the code within it. Before you download an input file from Amazon S3, ensure that you recognize the file and trust its creator.
        /// This member is required.
        public var location: Swift.String?
        /// The repository type for the custom terminology data.
        /// This member is required.
        public var repositoryType: Swift.String?

        public init(
            location: Swift.String? = nil,
            repositoryType: Swift.String? = nil
        )
        {
            self.location = location
            self.repositoryType = repositoryType
        }
    }
}

extension TranslateClientTypes {

    public enum Directionality: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multi
        case uni
        case sdkUnknown(Swift.String)

        public static var allCases: [Directionality] {
            return [
                .multi,
                .uni
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multi: return "MULTI"
            case .uni: return "UNI"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TranslateClientTypes {

    /// The properties of the custom terminology.
    public struct TerminologyProperties: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the custom terminology.
        public var arn: Swift.String?
        /// The time at which the custom terminology was created, based on the timestamp.
        public var createdAt: Foundation.Date?
        /// The description of the custom terminology properties.
        public var description: Swift.String?
        /// The directionality of your terminology resource indicates whether it has one source language (uni-directional) or multiple (multi-directional). UNI The terminology resource has one source language (the first column in a CSV file), and all of its other languages are target languages. MULTI Any language in the terminology resource can be the source language.
        public var directionality: TranslateClientTypes.Directionality?
        /// The encryption key for the custom terminology.
        public var encryptionKey: TranslateClientTypes.EncryptionKey?
        /// The format of the custom terminology input file.
        public var format: TranslateClientTypes.TerminologyDataFormat?
        /// The time at which the custom terminology was last update, based on the timestamp.
        public var lastUpdatedAt: Foundation.Date?
        /// Additional information from Amazon Translate about the terminology resource.
        public var message: Swift.String?
        /// The name of the custom terminology.
        public var name: Swift.String?
        /// The size of the file used when importing a custom terminology.
        public var sizeBytes: Swift.Int?
        /// The number of terms in the input file that Amazon Translate skipped when you created or updated the terminology resource.
        public var skippedTermCount: Swift.Int?
        /// The language code for the source text of the translation request for which the custom terminology is being used.
        public var sourceLanguageCode: Swift.String?
        /// The language codes for the target languages available with the custom terminology resource. All possible target languages are returned in array.
        public var targetLanguageCodes: [Swift.String]?
        /// The number of terms included in the custom terminology.
        public var termCount: Swift.Int?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            directionality: TranslateClientTypes.Directionality? = nil,
            encryptionKey: TranslateClientTypes.EncryptionKey? = nil,
            format: TranslateClientTypes.TerminologyDataFormat? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            sizeBytes: Swift.Int? = nil,
            skippedTermCount: Swift.Int? = nil,
            sourceLanguageCode: Swift.String? = nil,
            targetLanguageCodes: [Swift.String]? = nil,
            termCount: Swift.Int? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.directionality = directionality
            self.encryptionKey = encryptionKey
            self.format = format
            self.lastUpdatedAt = lastUpdatedAt
            self.message = message
            self.name = name
            self.sizeBytes = sizeBytes
            self.skippedTermCount = skippedTermCount
            self.sourceLanguageCode = sourceLanguageCode
            self.targetLanguageCodes = targetLanguageCodes
            self.termCount = termCount
        }
    }
}

public struct GetTerminologyOutput: Swift.Sendable {
    /// The Amazon S3 location of a file that provides any errors or warnings that were produced by your input file. This file was created when Amazon Translate attempted to create a terminology resource. The location is returned as a presigned URL to that has a 30-minute expiration.
    public var auxiliaryDataLocation: TranslateClientTypes.TerminologyDataLocation?
    /// The Amazon S3 location of the most recent custom terminology input file that was successfully imported into Amazon Translate. The location is returned as a presigned URL that has a 30-minute expiration. Amazon Translate doesn't scan all input files for the risk of CSV injection attacks. CSV injection occurs when a .csv or .tsv file is altered so that a record contains malicious code. The record begins with a special character, such as =, +, -, or @. When the file is opened in a spreadsheet program, the program might interpret the record as a formula and run the code within it. Before you download an input file from Amazon S3, ensure that you recognize the file and trust its creator.
    public var terminologyDataLocation: TranslateClientTypes.TerminologyDataLocation?
    /// The properties of the custom terminology being retrieved.
    public var terminologyProperties: TranslateClientTypes.TerminologyProperties?

    public init(
        auxiliaryDataLocation: TranslateClientTypes.TerminologyDataLocation? = nil,
        terminologyDataLocation: TranslateClientTypes.TerminologyDataLocation? = nil,
        terminologyProperties: TranslateClientTypes.TerminologyProperties? = nil
    )
    {
        self.auxiliaryDataLocation = auxiliaryDataLocation
        self.terminologyDataLocation = terminologyDataLocation
        self.terminologyProperties = terminologyProperties
    }
}

extension TranslateClientTypes {

    public enum MergeStrategy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case overwrite
        case sdkUnknown(Swift.String)

        public static var allCases: [MergeStrategy] {
            return [
                .overwrite
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .overwrite: return "OVERWRITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TranslateClientTypes {

    /// The data associated with the custom terminology. For information about the custom terminology file, see [ Creating a Custom Terminology](https://docs.aws.amazon.com/translate/latest/dg/creating-custom-terminology.html).
    public struct TerminologyData: Swift.Sendable {
        /// The directionality of your terminology resource indicates whether it has one source language (uni-directional) or multiple (multi-directional). UNI The terminology resource has one source language (for example, the first column in a CSV file), and all of its other languages are target languages. MULTI Any language in the terminology resource can be the source language or a target language. A single multi-directional terminology resource can be used for jobs that translate different language pairs. For example, if the terminology contains English and Spanish terms, it can be used for jobs that translate English to Spanish and Spanish to English. When you create a custom terminology resource without specifying the directionality, it behaves as uni-directional terminology, although this parameter will have a null value.
        public var directionality: TranslateClientTypes.Directionality?
        /// The file containing the custom terminology data. Your version of the AWS SDK performs a Base64-encoding on this field before sending a request to the AWS service. Users of the SDK should not perform Base64-encoding themselves.
        /// This member is required.
        public var file: Foundation.Data?
        /// The data format of the custom terminology.
        /// This member is required.
        public var format: TranslateClientTypes.TerminologyDataFormat?

        public init(
            directionality: TranslateClientTypes.Directionality? = nil,
            file: Foundation.Data? = nil,
            format: TranslateClientTypes.TerminologyDataFormat? = nil
        )
        {
            self.directionality = directionality
            self.file = file
            self.format = format
        }
    }
}

extension TranslateClientTypes.TerminologyData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TerminologyData(directionality: \(Swift.String(describing: directionality)), format: \(Swift.String(describing: format)), file: \"CONTENT_REDACTED\")"}
}

public struct ImportTerminologyInput: Swift.Sendable {
    /// The description of the custom terminology being imported.
    public var description: Swift.String?
    /// The encryption key for the custom terminology being imported.
    public var encryptionKey: TranslateClientTypes.EncryptionKey?
    /// The merge strategy of the custom terminology being imported. Currently, only the OVERWRITE merge strategy is supported. In this case, the imported terminology will overwrite an existing terminology of the same name.
    /// This member is required.
    public var mergeStrategy: TranslateClientTypes.MergeStrategy?
    /// The name of the custom terminology being imported.
    /// This member is required.
    public var name: Swift.String?
    /// Tags to be associated with this resource. A tag is a key-value pair that adds metadata to a resource. Each tag key for the resource must be unique. For more information, see [ Tagging your resources](https://docs.aws.amazon.com/translate/latest/dg/tagging.html).
    public var tags: [TranslateClientTypes.Tag]?
    /// The terminology data for the custom terminology being imported.
    /// This member is required.
    public var terminologyData: TranslateClientTypes.TerminologyData?

    public init(
        description: Swift.String? = nil,
        encryptionKey: TranslateClientTypes.EncryptionKey? = nil,
        mergeStrategy: TranslateClientTypes.MergeStrategy? = nil,
        name: Swift.String? = nil,
        tags: [TranslateClientTypes.Tag]? = nil,
        terminologyData: TranslateClientTypes.TerminologyData? = nil
    )
    {
        self.description = description
        self.encryptionKey = encryptionKey
        self.mergeStrategy = mergeStrategy
        self.name = name
        self.tags = tags
        self.terminologyData = terminologyData
    }
}

public struct ImportTerminologyOutput: Swift.Sendable {
    /// The Amazon S3 location of a file that provides any errors or warnings that were produced by your input file. This file was created when Amazon Translate attempted to create a terminology resource. The location is returned as a presigned URL to that has a 30 minute expiration.
    public var auxiliaryDataLocation: TranslateClientTypes.TerminologyDataLocation?
    /// The properties of the custom terminology being imported.
    public var terminologyProperties: TranslateClientTypes.TerminologyProperties?

    public init(
        auxiliaryDataLocation: TranslateClientTypes.TerminologyDataLocation? = nil,
        terminologyProperties: TranslateClientTypes.TerminologyProperties? = nil
    )
    {
        self.auxiliaryDataLocation = auxiliaryDataLocation
        self.terminologyProperties = terminologyProperties
    }
}

/// Requested display language code is not supported.
public struct UnsupportedDisplayLanguageCodeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Language code passed in with the request.
        public internal(set) var displayLanguageCode: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedDisplayLanguageCodeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        displayLanguageCode: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.displayLanguageCode = displayLanguageCode
        self.properties.message = message
    }
}

extension TranslateClientTypes {

    public enum DisplayLanguageCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case de
        case en
        case es
        case fr
        case it
        case ja
        case ko
        case pt
        case zh
        case zhTw
        case sdkUnknown(Swift.String)

        public static var allCases: [DisplayLanguageCode] {
            return [
                .de,
                .en,
                .es,
                .fr,
                .it,
                .ja,
                .ko,
                .pt,
                .zh,
                .zhTw
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .de: return "de"
            case .en: return "en"
            case .es: return "es"
            case .fr: return "fr"
            case .it: return "it"
            case .ja: return "ja"
            case .ko: return "ko"
            case .pt: return "pt"
            case .zh: return "zh"
            case .zhTw: return "zh-TW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListLanguagesInput: Swift.Sendable {
    /// The language code for the language to use to display the language names in the response. The language code is en by default.
    public var displayLanguageCode: TranslateClientTypes.DisplayLanguageCode?
    /// The maximum number of results to return in each response.
    public var maxResults: Swift.Int?
    /// Include the NextToken value to fetch the next group of supported languages.
    public var nextToken: Swift.String?

    public init(
        displayLanguageCode: TranslateClientTypes.DisplayLanguageCode? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.displayLanguageCode = displayLanguageCode
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension TranslateClientTypes {

    /// A supported language.
    public struct Language: Swift.Sendable {
        /// Language code for the supported language.
        /// This member is required.
        public var languageCode: Swift.String?
        /// Language name of the supported language.
        /// This member is required.
        public var languageName: Swift.String?

        public init(
            languageCode: Swift.String? = nil,
            languageName: Swift.String? = nil
        )
        {
            self.languageCode = languageCode
            self.languageName = languageName
        }
    }
}

public struct ListLanguagesOutput: Swift.Sendable {
    /// The language code passed in with the request.
    public var displayLanguageCode: TranslateClientTypes.DisplayLanguageCode?
    /// The list of supported languages.
    public var languages: [TranslateClientTypes.Language]?
    /// If the response does not include all remaining results, use the NextToken in the next request to fetch the next group of supported languages.
    public var nextToken: Swift.String?

    public init(
        displayLanguageCode: TranslateClientTypes.DisplayLanguageCode? = nil,
        languages: [TranslateClientTypes.Language]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.displayLanguageCode = displayLanguageCode
        self.languages = languages
        self.nextToken = nextToken
    }
}

public struct ListParallelDataInput: Swift.Sendable {
    /// The maximum number of parallel data resources returned for each request.
    public var maxResults: Swift.Int?
    /// A string that specifies the next page of results to return in a paginated response.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListParallelDataOutput: Swift.Sendable {
    /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
    public var nextToken: Swift.String?
    /// The properties of the parallel data resources returned by this request.
    public var parallelDataPropertiesList: [TranslateClientTypes.ParallelDataProperties]?

    public init(
        nextToken: Swift.String? = nil,
        parallelDataPropertiesList: [TranslateClientTypes.ParallelDataProperties]? = nil
    )
    {
        self.nextToken = nextToken
        self.parallelDataPropertiesList = parallelDataPropertiesList
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the given Amazon Translate resource you are querying.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// Tags associated with the Amazon Translate resource being queried. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Translate. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [TranslateClientTypes.Tag]?

    public init(
        tags: [TranslateClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

public struct ListTerminologiesInput: Swift.Sendable {
    /// The maximum number of custom terminologies returned per list request.
    public var maxResults: Swift.Int?
    /// If the result of the request to ListTerminologies was truncated, include the NextToken to fetch the next group of custom terminologies.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListTerminologiesOutput: Swift.Sendable {
    /// If the response to the ListTerminologies was truncated, the NextToken fetches the next group of custom terminologies.
    public var nextToken: Swift.String?
    /// The properties list of the custom terminologies returned on the list request.
    public var terminologyPropertiesList: [TranslateClientTypes.TerminologyProperties]?

    public init(
        nextToken: Swift.String? = nil,
        terminologyPropertiesList: [TranslateClientTypes.TerminologyProperties]? = nil
    )
    {
        self.nextToken = nextToken
        self.terminologyPropertiesList = terminologyPropertiesList
    }
}

/// The filter specified for the operation is not valid. Specify a different filter.
public struct InvalidFilterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidFilterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TranslateClientTypes {

    /// Provides information for filtering a list of translation jobs. For more information, see [ListTextTranslationJobs].
    public struct TextTranslationJobFilter: Swift.Sendable {
        /// Filters the list of jobs by name.
        public var jobName: Swift.String?
        /// Filters the list of jobs based by job status.
        public var jobStatus: TranslateClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing and returns only the jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submittedAfterTime: Foundation.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing and returns only the jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submittedBeforeTime: Foundation.Date?

        public init(
            jobName: Swift.String? = nil,
            jobStatus: TranslateClientTypes.JobStatus? = nil,
            submittedAfterTime: Foundation.Date? = nil,
            submittedBeforeTime: Foundation.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submittedAfterTime = submittedAfterTime
            self.submittedBeforeTime = submittedBeforeTime
        }
    }
}

public struct ListTextTranslationJobsInput: Swift.Sendable {
    /// The parameters that specify which batch translation jobs to retrieve. Filters include job name, job status, and submission time. You can only set one filter at a time.
    public var filter: TranslateClientTypes.TextTranslationJobFilter?
    /// The maximum number of results to return in each page. The default value is 100.
    public var maxResults: Swift.Int?
    /// The token to request the next page of results.
    public var nextToken: Swift.String?

    public init(
        filter: TranslateClientTypes.TextTranslationJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListTextTranslationJobsOutput: Swift.Sendable {
    /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// A list containing the properties of each job that is returned.
    public var textTranslationJobPropertiesList: [TranslateClientTypes.TextTranslationJobProperties]?

    public init(
        nextToken: Swift.String? = nil,
        textTranslationJobPropertiesList: [TranslateClientTypes.TextTranslationJobProperties]? = nil
    )
    {
        self.nextToken = nextToken
        self.textTranslationJobPropertiesList = textTranslationJobPropertiesList
    }
}

/// Amazon Translate does not support translation from the language of the source text into the requested target language. For more information, see [Supported languages](https://docs.aws.amazon.com/translate/latest/dg/what-is-languages.html).
public struct UnsupportedLanguagePairException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The language code for the language of the input text.
        public internal(set) var sourceLanguageCode: Swift.String? = nil
        /// The language code for the language of the translated text.
        public internal(set) var targetLanguageCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedLanguagePairException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        sourceLanguageCode: Swift.String? = nil,
        targetLanguageCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.sourceLanguageCode = sourceLanguageCode
        self.properties.targetLanguageCode = targetLanguageCode
    }
}

public struct StartTextTranslationJobInput: Swift.Sendable {
    /// A unique identifier for the request. This token is generated for you when using the Amazon Translate SDK.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) of an AWS Identity Access and Management (IAM) role that grants Amazon Translate read access to your input data. For more information, see [Identity and access management ](https://docs.aws.amazon.com/translate/latest/dg/identity-and-access-management.html).
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Specifies the format and location of the input documents for the translation job.
    /// This member is required.
    public var inputDataConfig: TranslateClientTypes.InputDataConfig?
    /// The name of the batch translation job to be performed.
    public var jobName: Swift.String?
    /// Specifies the S3 folder to which your job output will be saved.
    /// This member is required.
    public var outputDataConfig: TranslateClientTypes.OutputDataConfig?
    /// The name of a parallel data resource to add to the translation job. This resource consists of examples that show how you want segments of text to be translated. If you specify multiple target languages for the job, the parallel data file must include translations for all the target languages. When you add parallel data to a translation job, you create an Active Custom Translation job. This parameter accepts only one parallel data resource. Active Custom Translation jobs are priced at a higher rate than other jobs that don't use parallel data. For more information, see [Amazon Translate pricing](http://aws.amazon.com/translate/pricing/). For a list of available parallel data resources, use the [ListParallelData] operation. For more information, see [ Customizing your translations with parallel data](https://docs.aws.amazon.com/translate/latest/dg/customizing-translations-parallel-data.html).
    public var parallelDataNames: [Swift.String]?
    /// Settings to configure your translation output. You can configure the following options:
    ///
    /// * Brevity: not supported.
    ///
    /// * Formality: sets the formality level of the output text.
    ///
    /// * Profanity: masks profane words and phrases in your translation output.
    public var settings: TranslateClientTypes.TranslationSettings?
    /// The language code of the input language. Specify the language if all input documents share the same language. If you don't know the language of the source files, or your input documents contains different source languages, select auto. Amazon Translate auto detects the source language for each input document. For a list of supported language codes, see [Supported languages](https://docs.aws.amazon.com/translate/latest/dg/what-is-languages.html).
    /// This member is required.
    public var sourceLanguageCode: Swift.String?
    /// The target languages of the translation job. Enter up to 10 language codes. Each input file is translated into each target language. Each language code is 2 or 5 characters long. For a list of language codes, see [Supported languages](https://docs.aws.amazon.com/translate/latest/dg/what-is-languages.html).
    /// This member is required.
    public var targetLanguageCodes: [Swift.String]?
    /// The name of a custom terminology resource to add to the translation job. This resource lists examples source terms and the desired translation for each term. This parameter accepts only one custom terminology resource. If you specify multiple target languages for the job, translate uses the designated terminology for each requested target language that has an entry for the source term in the terminology file. For a list of available custom terminology resources, use the [ListTerminologies] operation. For more information, see [Custom terminology](https://docs.aws.amazon.com/translate/latest/dg/how-custom-terminology.html).
    public var terminologyNames: [Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: TranslateClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        outputDataConfig: TranslateClientTypes.OutputDataConfig? = nil,
        parallelDataNames: [Swift.String]? = nil,
        settings: TranslateClientTypes.TranslationSettings? = nil,
        sourceLanguageCode: Swift.String? = nil,
        targetLanguageCodes: [Swift.String]? = nil,
        terminologyNames: [Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.outputDataConfig = outputDataConfig
        self.parallelDataNames = parallelDataNames
        self.settings = settings
        self.sourceLanguageCode = sourceLanguageCode
        self.targetLanguageCodes = targetLanguageCodes
        self.terminologyNames = terminologyNames
    }
}

public struct StartTextTranslationJobOutput: Swift.Sendable {
    /// The identifier generated for the job. To get the status of a job, use this ID with the [DescribeTextTranslationJob] operation.
    public var jobId: Swift.String?
    /// The status of the job. Possible values include:
    ///
    /// * SUBMITTED - The job has been received and is queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Translate is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * COMPLETED_WITH_ERROR - The job was completed with errors. The errors can be analyzed in the job's output.
    ///
    /// * FAILED - The job did not complete. To get details, use the [DescribeTextTranslationJob] operation.
    ///
    /// * STOP_REQUESTED - The user who started the job has requested that it be stopped.
    ///
    /// * STOPPED - The job has been stopped.
    public var jobStatus: TranslateClientTypes.JobStatus?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: TranslateClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StopTextTranslationJobInput: Swift.Sendable {
    /// The job ID of the job to be stopped.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StopTextTranslationJobOutput: Swift.Sendable {
    /// The job ID of the stopped batch translation job.
    public var jobId: Swift.String?
    /// The status of the designated job. Upon successful completion, the job's status will be STOPPED.
    public var jobStatus: TranslateClientTypes.JobStatus?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: TranslateClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the given Amazon Translate resource to which you want to associate the tags.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Tags being associated with a specific Amazon Translate resource. There can be a maximum of 50 tags (both existing and pending) associated with a specific resource.
    /// This member is required.
    public var tags: [TranslateClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [TranslateClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

/// The Amazon Translate service is temporarily unavailable. Wait a bit and then retry your request.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TranslateClientTypes {

    /// The content and content type of a document.
    public struct Document: Swift.Sendable {
        /// The Contentfield type is Binary large object (blob). This object contains the document content converted into base64-encoded binary data. If you use one of the AWS SDKs, the SDK performs the Base64-encoding on this field before sending the request.
        /// This member is required.
        public var content: Foundation.Data?
        /// Describes the format of the document. You can specify one of the following:
        ///
        /// * text/html - The input data consists of HTML content. Amazon Translate translates only the text in the HTML element.
        ///
        /// * text/plain - The input data consists of unformatted text. Amazon Translate translates every character in the content.
        ///
        /// * application/vnd.openxmlformats-officedocument.wordprocessingml.document - The input data consists of a Word document (.docx).
        /// This member is required.
        public var contentType: Swift.String?

        public init(
            content: Foundation.Data? = nil,
            contentType: Swift.String? = nil
        )
        {
            self.content = content
            self.contentType = contentType
        }
    }
}

extension TranslateClientTypes.Document: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Document(contentType: \(Swift.String(describing: contentType)), content: \"CONTENT_REDACTED\")"}
}

public struct TranslateDocumentInput: Swift.Sendable {
    /// The content and content type for the document to be translated. The document size must not exceed 100 KB.
    /// This member is required.
    public var document: TranslateClientTypes.Document?
    /// Settings to configure your translation output. You can configure the following options:
    ///
    /// * Brevity: not supported.
    ///
    /// * Formality: sets the formality level of the output text.
    ///
    /// * Profanity: masks profane words and phrases in your translation output.
    public var settings: TranslateClientTypes.TranslationSettings?
    /// The language code for the language of the source text. For a list of supported language codes, see [Supported languages](https://docs.aws.amazon.com/translate/latest/dg/what-is-languages.html). To have Amazon Translate determine the source language of your text, you can specify auto in the SourceLanguageCode field. If you specify auto, Amazon Translate will call [Amazon Comprehend](https://docs.aws.amazon.com/comprehend/latest/dg/comprehend-general.html) to determine the source language. If you specify auto, you must send the TranslateDocument request in a region that supports Amazon Comprehend. Otherwise, the request returns an error indicating that autodetect is not supported.
    /// This member is required.
    public var sourceLanguageCode: Swift.String?
    /// The language code requested for the translated document. For a list of supported language codes, see [Supported languages](https://docs.aws.amazon.com/translate/latest/dg/what-is-languages.html).
    /// This member is required.
    public var targetLanguageCode: Swift.String?
    /// The name of a terminology list file to add to the translation job. This file provides source terms and the desired translation for each term. A terminology list can contain a maximum of 256 terms. You can use one custom terminology resource in your translation request. Use the [ListTerminologies] operation to get the available terminology lists. For more information about custom terminology lists, see [Custom terminology](https://docs.aws.amazon.com/translate/latest/dg/how-custom-terminology.html).
    public var terminologyNames: [Swift.String]?

    public init(
        document: TranslateClientTypes.Document? = nil,
        settings: TranslateClientTypes.TranslationSettings? = nil,
        sourceLanguageCode: Swift.String? = nil,
        targetLanguageCode: Swift.String? = nil,
        terminologyNames: [Swift.String]? = nil
    )
    {
        self.document = document
        self.settings = settings
        self.sourceLanguageCode = sourceLanguageCode
        self.targetLanguageCode = targetLanguageCode
        self.terminologyNames = terminologyNames
    }
}

extension TranslateClientTypes {

    /// The translated content.
    public struct TranslatedDocument: Swift.Sendable {
        /// The document containing the translated content.
        /// This member is required.
        public var content: Foundation.Data?

        public init(
            content: Foundation.Data? = nil
        )
        {
            self.content = content
        }
    }
}

extension TranslateClientTypes.TranslatedDocument: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TranslatedDocument(content: \"CONTENT_REDACTED\")"}
}

public struct TranslateDocumentOutput: Swift.Sendable {
    /// Settings to configure your translation output. You can configure the following options:
    ///
    /// * Brevity: reduces the length of the translation output for most translations. Available for TranslateText only.
    ///
    /// * Formality: sets the formality level of the translation output.
    ///
    /// * Profanity: masks profane words and phrases in the translation output.
    public var appliedSettings: TranslateClientTypes.TranslationSettings?
    /// The names of the custom terminologies applied to the input text by Amazon Translate to produce the translated text document.
    public var appliedTerminologies: [TranslateClientTypes.AppliedTerminology]?
    /// The language code of the source document.
    /// This member is required.
    public var sourceLanguageCode: Swift.String?
    /// The language code of the translated document.
    /// This member is required.
    public var targetLanguageCode: Swift.String?
    /// The document containing the translated content. The document format matches the source document format.
    /// This member is required.
    public var translatedDocument: TranslateClientTypes.TranslatedDocument?

    public init(
        appliedSettings: TranslateClientTypes.TranslationSettings? = nil,
        appliedTerminologies: [TranslateClientTypes.AppliedTerminology]? = nil,
        sourceLanguageCode: Swift.String? = nil,
        targetLanguageCode: Swift.String? = nil,
        translatedDocument: TranslateClientTypes.TranslatedDocument? = nil
    )
    {
        self.appliedSettings = appliedSettings
        self.appliedTerminologies = appliedTerminologies
        self.sourceLanguageCode = sourceLanguageCode
        self.targetLanguageCode = targetLanguageCode
        self.translatedDocument = translatedDocument
    }
}

/// The confidence that Amazon Comprehend accurately detected the source language is low. If a low confidence level is acceptable for your application, you can use the language in the exception to call Amazon Translate again. For more information, see the [DetectDominantLanguage](https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html) operation in the Amazon Comprehend Developer Guide.
public struct DetectedLanguageLowConfidenceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The language code of the auto-detected language from Amazon Comprehend.
        public internal(set) var detectedLanguageCode: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DetectedLanguageLowConfidenceException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        detectedLanguageCode: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.detectedLanguageCode = detectedLanguageCode
        self.properties.message = message
    }
}

/// The size of the text you submitted exceeds the size limit. Reduce the size of the text or use a smaller document and then retry your request.
public struct TextSizeLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TextSizeLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct TranslateTextInput: Swift.Sendable {
    /// Settings to configure your translation output. You can configure the following options:
    ///
    /// * Brevity: reduces the length of the translated output for most translations.
    ///
    /// * Formality: sets the formality level of the output text.
    ///
    /// * Profanity: masks profane words and phrases in your translation output.
    public var settings: TranslateClientTypes.TranslationSettings?
    /// The language code for the language of the source text. For a list of language codes, see [Supported languages](https://docs.aws.amazon.com/translate/latest/dg/what-is-languages.html). To have Amazon Translate determine the source language of your text, you can specify auto in the SourceLanguageCode field. If you specify auto, Amazon Translate will call [Amazon Comprehend](https://docs.aws.amazon.com/comprehend/latest/dg/comprehend-general.html) to determine the source language. If you specify auto, you must send the TranslateText request in a region that supports Amazon Comprehend. Otherwise, the request returns an error indicating that autodetect is not supported.
    /// This member is required.
    public var sourceLanguageCode: Swift.String?
    /// The language code requested for the language of the target text. For a list of language codes, see [Supported languages](https://docs.aws.amazon.com/translate/latest/dg/what-is-languages.html).
    /// This member is required.
    public var targetLanguageCode: Swift.String?
    /// The name of a terminology list file to add to the translation job. This file provides source terms and the desired translation for each term. A terminology list can contain a maximum of 256 terms. You can use one custom terminology resource in your translation request. Use the [ListTerminologies] operation to get the available terminology lists. For more information about custom terminology lists, see [Custom terminology](https://docs.aws.amazon.com/translate/latest/dg/how-custom-terminology.html).
    public var terminologyNames: [Swift.String]?
    /// The text to translate. The text string can be a maximum of 10,000 bytes long. Depending on your character set, this may be fewer than 10,000 characters.
    /// This member is required.
    public var text: Swift.String?

    public init(
        settings: TranslateClientTypes.TranslationSettings? = nil,
        sourceLanguageCode: Swift.String? = nil,
        targetLanguageCode: Swift.String? = nil,
        terminologyNames: [Swift.String]? = nil,
        text: Swift.String? = nil
    )
    {
        self.settings = settings
        self.sourceLanguageCode = sourceLanguageCode
        self.targetLanguageCode = targetLanguageCode
        self.terminologyNames = terminologyNames
        self.text = text
    }
}

public struct TranslateTextOutput: Swift.Sendable {
    /// Optional settings that modify the translation output.
    public var appliedSettings: TranslateClientTypes.TranslationSettings?
    /// The names of the custom terminologies applied to the input text by Amazon Translate for the translated text response.
    public var appliedTerminologies: [TranslateClientTypes.AppliedTerminology]?
    /// The language code for the language of the source text.
    /// This member is required.
    public var sourceLanguageCode: Swift.String?
    /// The language code for the language of the target text.
    /// This member is required.
    public var targetLanguageCode: Swift.String?
    /// The translated text.
    /// This member is required.
    public var translatedText: Swift.String?

    public init(
        appliedSettings: TranslateClientTypes.TranslationSettings? = nil,
        appliedTerminologies: [TranslateClientTypes.AppliedTerminology]? = nil,
        sourceLanguageCode: Swift.String? = nil,
        targetLanguageCode: Swift.String? = nil,
        translatedText: Swift.String? = nil
    )
    {
        self.appliedSettings = appliedSettings
        self.appliedTerminologies = appliedTerminologies
        self.sourceLanguageCode = sourceLanguageCode
        self.targetLanguageCode = targetLanguageCode
        self.translatedText = translatedText
    }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the given Amazon Translate resource from which you want to remove the tags.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The initial part of a key-value pair that forms a tag being removed from a given resource. Keys must be unique and cannot be duplicated for a particular resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateParallelDataInput: Swift.Sendable {
    /// A unique identifier for the request. This token is automatically generated when you use Amazon Translate through an AWS SDK.
    /// This member is required.
    public var clientToken: Swift.String?
    /// A custom description for the parallel data resource in Amazon Translate.
    public var description: Swift.String?
    /// The name of the parallel data resource being updated.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies the format and S3 location of the parallel data input file.
    /// This member is required.
    public var parallelDataConfig: TranslateClientTypes.ParallelDataConfig?

    public init(
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        parallelDataConfig: TranslateClientTypes.ParallelDataConfig? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.name = name
        self.parallelDataConfig = parallelDataConfig
    }
}

public struct UpdateParallelDataOutput: Swift.Sendable {
    /// The time that the most recent update was attempted.
    public var latestUpdateAttemptAt: Foundation.Date?
    /// The status of the parallel data update attempt. When the updated parallel data resource is ready for you to use, the status is ACTIVE.
    public var latestUpdateAttemptStatus: TranslateClientTypes.ParallelDataStatus?
    /// The name of the parallel data resource being updated.
    public var name: Swift.String?
    /// The status of the parallel data resource that you are attempting to update. Your update request is accepted only if this status is either ACTIVE or FAILED.
    public var status: TranslateClientTypes.ParallelDataStatus?

    public init(
        latestUpdateAttemptAt: Foundation.Date? = nil,
        latestUpdateAttemptStatus: TranslateClientTypes.ParallelDataStatus? = nil,
        name: Swift.String? = nil,
        status: TranslateClientTypes.ParallelDataStatus? = nil
    )
    {
        self.latestUpdateAttemptAt = latestUpdateAttemptAt
        self.latestUpdateAttemptStatus = latestUpdateAttemptStatus
        self.name = name
        self.status = status
    }
}

extension CreateParallelDataInput {

    static func urlPathProvider(_ value: CreateParallelDataInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteParallelDataInput {

    static func urlPathProvider(_ value: DeleteParallelDataInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTerminologyInput {

    static func urlPathProvider(_ value: DeleteTerminologyInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTextTranslationJobInput {

    static func urlPathProvider(_ value: DescribeTextTranslationJobInput) -> Swift.String? {
        return "/"
    }
}

extension GetParallelDataInput {

    static func urlPathProvider(_ value: GetParallelDataInput) -> Swift.String? {
        return "/"
    }
}

extension GetTerminologyInput {

    static func urlPathProvider(_ value: GetTerminologyInput) -> Swift.String? {
        return "/"
    }
}

extension ImportTerminologyInput {

    static func urlPathProvider(_ value: ImportTerminologyInput) -> Swift.String? {
        return "/"
    }
}

extension ListLanguagesInput {

    static func urlPathProvider(_ value: ListLanguagesInput) -> Swift.String? {
        return "/"
    }
}

extension ListParallelDataInput {

    static func urlPathProvider(_ value: ListParallelDataInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListTerminologiesInput {

    static func urlPathProvider(_ value: ListTerminologiesInput) -> Swift.String? {
        return "/"
    }
}

extension ListTextTranslationJobsInput {

    static func urlPathProvider(_ value: ListTextTranslationJobsInput) -> Swift.String? {
        return "/"
    }
}

extension StartTextTranslationJobInput {

    static func urlPathProvider(_ value: StartTextTranslationJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopTextTranslationJobInput {

    static func urlPathProvider(_ value: StopTextTranslationJobInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension TranslateDocumentInput {

    static func urlPathProvider(_ value: TranslateDocumentInput) -> Swift.String? {
        return "/"
    }
}

extension TranslateTextInput {

    static func urlPathProvider(_ value: TranslateTextInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateParallelDataInput {

    static func urlPathProvider(_ value: UpdateParallelDataInput) -> Swift.String? {
        return "/"
    }
}

extension CreateParallelDataInput {

    static func write(value: CreateParallelDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Description"].write(value.description)
        try writer["EncryptionKey"].write(value.encryptionKey, with: TranslateClientTypes.EncryptionKey.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["ParallelDataConfig"].write(value.parallelDataConfig, with: TranslateClientTypes.ParallelDataConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: TranslateClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteParallelDataInput {

    static func write(value: DeleteParallelDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeleteTerminologyInput {

    static func write(value: DeleteTerminologyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DescribeTextTranslationJobInput {

    static func write(value: DescribeTextTranslationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension GetParallelDataInput {

    static func write(value: GetParallelDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension GetTerminologyInput {

    static func write(value: GetTerminologyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["TerminologyDataFormat"].write(value.terminologyDataFormat)
    }
}

extension ImportTerminologyInput {

    static func write(value: ImportTerminologyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["EncryptionKey"].write(value.encryptionKey, with: TranslateClientTypes.EncryptionKey.write(value:to:))
        try writer["MergeStrategy"].write(value.mergeStrategy)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: TranslateClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TerminologyData"].write(value.terminologyData, with: TranslateClientTypes.TerminologyData.write(value:to:))
    }
}

extension ListLanguagesInput {

    static func write(value: ListLanguagesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DisplayLanguageCode"].write(value.displayLanguageCode)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListParallelDataInput {

    static func write(value: ListParallelDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension ListTerminologiesInput {

    static func write(value: ListTerminologiesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTextTranslationJobsInput {

    static func write(value: ListTextTranslationJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: TranslateClientTypes.TextTranslationJobFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension StartTextTranslationJobInput {

    static func write(value: StartTextTranslationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["InputDataConfig"].write(value.inputDataConfig, with: TranslateClientTypes.InputDataConfig.write(value:to:))
        try writer["JobName"].write(value.jobName)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: TranslateClientTypes.OutputDataConfig.write(value:to:))
        try writer["ParallelDataNames"].writeList(value.parallelDataNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Settings"].write(value.settings, with: TranslateClientTypes.TranslationSettings.write(value:to:))
        try writer["SourceLanguageCode"].write(value.sourceLanguageCode)
        try writer["TargetLanguageCodes"].writeList(value.targetLanguageCodes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TerminologyNames"].writeList(value.terminologyNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StopTextTranslationJobInput {

    static func write(value: StopTextTranslationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: TranslateClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TranslateDocumentInput {

    static func write(value: TranslateDocumentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Document"].write(value.document, with: TranslateClientTypes.Document.write(value:to:))
        try writer["Settings"].write(value.settings, with: TranslateClientTypes.TranslationSettings.write(value:to:))
        try writer["SourceLanguageCode"].write(value.sourceLanguageCode)
        try writer["TargetLanguageCode"].write(value.targetLanguageCode)
        try writer["TerminologyNames"].writeList(value.terminologyNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TranslateTextInput {

    static func write(value: TranslateTextInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Settings"].write(value.settings, with: TranslateClientTypes.TranslationSettings.write(value:to:))
        try writer["SourceLanguageCode"].write(value.sourceLanguageCode)
        try writer["TargetLanguageCode"].write(value.targetLanguageCode)
        try writer["TerminologyNames"].writeList(value.terminologyNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Text"].write(value.text)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateParallelDataInput {

    static func write(value: UpdateParallelDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["ParallelDataConfig"].write(value.parallelDataConfig, with: TranslateClientTypes.ParallelDataConfig.write(value:to:))
    }
}

extension CreateParallelDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateParallelDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateParallelDataOutput()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension DeleteParallelDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteParallelDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteParallelDataOutput()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension DeleteTerminologyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTerminologyOutput {
        return DeleteTerminologyOutput()
    }
}

extension DescribeTextTranslationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTextTranslationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTextTranslationJobOutput()
        value.textTranslationJobProperties = try reader["TextTranslationJobProperties"].readIfPresent(with: TranslateClientTypes.TextTranslationJobProperties.read(from:))
        return value
    }
}

extension GetParallelDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetParallelDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetParallelDataOutput()
        value.auxiliaryDataLocation = try reader["AuxiliaryDataLocation"].readIfPresent(with: TranslateClientTypes.ParallelDataDataLocation.read(from:))
        value.dataLocation = try reader["DataLocation"].readIfPresent(with: TranslateClientTypes.ParallelDataDataLocation.read(from:))
        value.latestUpdateAttemptAuxiliaryDataLocation = try reader["LatestUpdateAttemptAuxiliaryDataLocation"].readIfPresent(with: TranslateClientTypes.ParallelDataDataLocation.read(from:))
        value.parallelDataProperties = try reader["ParallelDataProperties"].readIfPresent(with: TranslateClientTypes.ParallelDataProperties.read(from:))
        return value
    }
}

extension GetTerminologyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTerminologyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTerminologyOutput()
        value.auxiliaryDataLocation = try reader["AuxiliaryDataLocation"].readIfPresent(with: TranslateClientTypes.TerminologyDataLocation.read(from:))
        value.terminologyDataLocation = try reader["TerminologyDataLocation"].readIfPresent(with: TranslateClientTypes.TerminologyDataLocation.read(from:))
        value.terminologyProperties = try reader["TerminologyProperties"].readIfPresent(with: TranslateClientTypes.TerminologyProperties.read(from:))
        return value
    }
}

extension ImportTerminologyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportTerminologyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportTerminologyOutput()
        value.auxiliaryDataLocation = try reader["AuxiliaryDataLocation"].readIfPresent(with: TranslateClientTypes.TerminologyDataLocation.read(from:))
        value.terminologyProperties = try reader["TerminologyProperties"].readIfPresent(with: TranslateClientTypes.TerminologyProperties.read(from:))
        return value
    }
}

extension ListLanguagesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListLanguagesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListLanguagesOutput()
        value.displayLanguageCode = try reader["DisplayLanguageCode"].readIfPresent()
        value.languages = try reader["Languages"].readListIfPresent(memberReadingClosure: TranslateClientTypes.Language.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListParallelDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListParallelDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListParallelDataOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.parallelDataPropertiesList = try reader["ParallelDataPropertiesList"].readListIfPresent(memberReadingClosure: TranslateClientTypes.ParallelDataProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: TranslateClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTerminologiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTerminologiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTerminologiesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.terminologyPropertiesList = try reader["TerminologyPropertiesList"].readListIfPresent(memberReadingClosure: TranslateClientTypes.TerminologyProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTextTranslationJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTextTranslationJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTextTranslationJobsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.textTranslationJobPropertiesList = try reader["TextTranslationJobPropertiesList"].readListIfPresent(memberReadingClosure: TranslateClientTypes.TextTranslationJobProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StartTextTranslationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartTextTranslationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartTextTranslationJobOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StopTextTranslationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopTextTranslationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopTextTranslationJobOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension TranslateDocumentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TranslateDocumentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TranslateDocumentOutput()
        value.appliedSettings = try reader["AppliedSettings"].readIfPresent(with: TranslateClientTypes.TranslationSettings.read(from:))
        value.appliedTerminologies = try reader["AppliedTerminologies"].readListIfPresent(memberReadingClosure: TranslateClientTypes.AppliedTerminology.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sourceLanguageCode = try reader["SourceLanguageCode"].readIfPresent() ?? ""
        value.targetLanguageCode = try reader["TargetLanguageCode"].readIfPresent() ?? ""
        value.translatedDocument = try reader["TranslatedDocument"].readIfPresent(with: TranslateClientTypes.TranslatedDocument.read(from:))
        return value
    }
}

extension TranslateTextOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TranslateTextOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TranslateTextOutput()
        value.appliedSettings = try reader["AppliedSettings"].readIfPresent(with: TranslateClientTypes.TranslationSettings.read(from:))
        value.appliedTerminologies = try reader["AppliedTerminologies"].readListIfPresent(memberReadingClosure: TranslateClientTypes.AppliedTerminology.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sourceLanguageCode = try reader["SourceLanguageCode"].readIfPresent() ?? ""
        value.targetLanguageCode = try reader["TargetLanguageCode"].readIfPresent() ?? ""
        value.translatedText = try reader["TranslatedText"].readIfPresent() ?? ""
        return value
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateParallelDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateParallelDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateParallelDataOutput()
        value.latestUpdateAttemptAt = try reader["LatestUpdateAttemptAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.latestUpdateAttemptStatus = try reader["LatestUpdateAttemptStatus"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

enum CreateParallelDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteParallelDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTerminologyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTextTranslationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetParallelDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTerminologyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportTerminologyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListLanguagesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedDisplayLanguageCodeException": return try UnsupportedDisplayLanguageCodeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListParallelDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTerminologiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTextTranslationJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartTextTranslationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedLanguagePairException": return try UnsupportedLanguagePairException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopTextTranslationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TranslateDocumentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedLanguagePairException": return try UnsupportedLanguagePairException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TranslateTextOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DetectedLanguageLowConfidenceException": return try DetectedLanguageLowConfidenceException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedLanguagePairException": return try UnsupportedLanguagePairException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateParallelDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterValueException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidParameterValueException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterValueException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTagsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyTagsException {
        let reader = baseError.errorBodyReader
        var value = TooManyTagsException()
        value.properties.resourceArn = try reader["ResourceArn"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentModificationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentModificationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentModificationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedDisplayLanguageCodeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedDisplayLanguageCodeException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedDisplayLanguageCodeException()
        value.properties.displayLanguageCode = try reader["DisplayLanguageCode"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidFilterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidFilterException {
        let reader = baseError.errorBodyReader
        var value = InvalidFilterException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedLanguagePairException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedLanguagePairException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedLanguagePairException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.sourceLanguageCode = try reader["SourceLanguageCode"].readIfPresent()
        value.properties.targetLanguageCode = try reader["TargetLanguageCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TextSizeLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TextSizeLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = TextSizeLimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DetectedLanguageLowConfidenceException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DetectedLanguageLowConfidenceException {
        let reader = baseError.errorBodyReader
        var value = DetectedLanguageLowConfidenceException()
        value.properties.detectedLanguageCode = try reader["DetectedLanguageCode"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TranslateClientTypes.TextTranslationJobProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.TextTranslationJobProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.TextTranslationJobProperties()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobName = try reader["JobName"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.jobDetails = try reader["JobDetails"].readIfPresent(with: TranslateClientTypes.JobDetails.read(from:))
        value.sourceLanguageCode = try reader["SourceLanguageCode"].readIfPresent()
        value.targetLanguageCodes = try reader["TargetLanguageCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.terminologyNames = try reader["TerminologyNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.parallelDataNames = try reader["ParallelDataNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.message = try reader["Message"].readIfPresent()
        value.submittedTime = try reader["SubmittedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputDataConfig = try reader["InputDataConfig"].readIfPresent(with: TranslateClientTypes.InputDataConfig.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: TranslateClientTypes.OutputDataConfig.read(from:))
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.settings = try reader["Settings"].readIfPresent(with: TranslateClientTypes.TranslationSettings.read(from:))
        return value
    }
}

extension TranslateClientTypes.TranslationSettings {

    static func write(value: TranslateClientTypes.TranslationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Brevity"].write(value.brevity)
        try writer["Formality"].write(value.formality)
        try writer["Profanity"].write(value.profanity)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.TranslationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.TranslationSettings()
        value.formality = try reader["Formality"].readIfPresent()
        value.profanity = try reader["Profanity"].readIfPresent()
        value.brevity = try reader["Brevity"].readIfPresent()
        return value
    }
}

extension TranslateClientTypes.OutputDataConfig {

    static func write(value: TranslateClientTypes.OutputDataConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EncryptionKey"].write(value.encryptionKey, with: TranslateClientTypes.EncryptionKey.write(value:to:))
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.OutputDataConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.OutputDataConfig()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.encryptionKey = try reader["EncryptionKey"].readIfPresent(with: TranslateClientTypes.EncryptionKey.read(from:))
        return value
    }
}

extension TranslateClientTypes.EncryptionKey {

    static func write(value: TranslateClientTypes.EncryptionKey?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.EncryptionKey {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.EncryptionKey()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.id = try reader["Id"].readIfPresent() ?? ""
        return value
    }
}

extension TranslateClientTypes.InputDataConfig {

    static func write(value: TranslateClientTypes.InputDataConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContentType"].write(value.contentType)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.InputDataConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.InputDataConfig()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.contentType = try reader["ContentType"].readIfPresent() ?? ""
        return value
    }
}

extension TranslateClientTypes.JobDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.JobDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.JobDetails()
        value.translatedDocumentsCount = try reader["TranslatedDocumentsCount"].readIfPresent()
        value.documentsWithErrorsCount = try reader["DocumentsWithErrorsCount"].readIfPresent()
        value.inputDocumentsCount = try reader["InputDocumentsCount"].readIfPresent()
        return value
    }
}

extension TranslateClientTypes.ParallelDataProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.ParallelDataProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.ParallelDataProperties()
        value.name = try reader["Name"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.sourceLanguageCode = try reader["SourceLanguageCode"].readIfPresent()
        value.targetLanguageCodes = try reader["TargetLanguageCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.parallelDataConfig = try reader["ParallelDataConfig"].readIfPresent(with: TranslateClientTypes.ParallelDataConfig.read(from:))
        value.message = try reader["Message"].readIfPresent()
        value.importedDataSize = try reader["ImportedDataSize"].readIfPresent()
        value.importedRecordCount = try reader["ImportedRecordCount"].readIfPresent()
        value.failedRecordCount = try reader["FailedRecordCount"].readIfPresent()
        value.skippedRecordCount = try reader["SkippedRecordCount"].readIfPresent()
        value.encryptionKey = try reader["EncryptionKey"].readIfPresent(with: TranslateClientTypes.EncryptionKey.read(from:))
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.latestUpdateAttemptStatus = try reader["LatestUpdateAttemptStatus"].readIfPresent()
        value.latestUpdateAttemptAt = try reader["LatestUpdateAttemptAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension TranslateClientTypes.ParallelDataConfig {

    static func write(value: TranslateClientTypes.ParallelDataConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Format"].write(value.format)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.ParallelDataConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.ParallelDataConfig()
        value.s3Uri = try reader["S3Uri"].readIfPresent()
        value.format = try reader["Format"].readIfPresent()
        return value
    }
}

extension TranslateClientTypes.ParallelDataDataLocation {

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.ParallelDataDataLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.ParallelDataDataLocation()
        value.repositoryType = try reader["RepositoryType"].readIfPresent() ?? ""
        value.location = try reader["Location"].readIfPresent() ?? ""
        return value
    }
}

extension TranslateClientTypes.TerminologyProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.TerminologyProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.TerminologyProperties()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.sourceLanguageCode = try reader["SourceLanguageCode"].readIfPresent()
        value.targetLanguageCodes = try reader["TargetLanguageCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.encryptionKey = try reader["EncryptionKey"].readIfPresent(with: TranslateClientTypes.EncryptionKey.read(from:))
        value.sizeBytes = try reader["SizeBytes"].readIfPresent()
        value.termCount = try reader["TermCount"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.directionality = try reader["Directionality"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.skippedTermCount = try reader["SkippedTermCount"].readIfPresent()
        value.format = try reader["Format"].readIfPresent()
        return value
    }
}

extension TranslateClientTypes.TerminologyDataLocation {

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.TerminologyDataLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.TerminologyDataLocation()
        value.repositoryType = try reader["RepositoryType"].readIfPresent() ?? ""
        value.location = try reader["Location"].readIfPresent() ?? ""
        return value
    }
}

extension TranslateClientTypes.Language {

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.Language {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.Language()
        value.languageName = try reader["LanguageName"].readIfPresent() ?? ""
        value.languageCode = try reader["LanguageCode"].readIfPresent() ?? ""
        return value
    }
}

extension TranslateClientTypes.Tag {

    static func write(value: TranslateClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension TranslateClientTypes.TranslatedDocument {

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.TranslatedDocument {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.TranslatedDocument()
        value.content = try reader["Content"].readIfPresent() ?? Foundation.Data("".utf8)
        return value
    }
}

extension TranslateClientTypes.AppliedTerminology {

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.AppliedTerminology {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.AppliedTerminology()
        value.name = try reader["Name"].readIfPresent()
        value.terms = try reader["Terms"].readListIfPresent(memberReadingClosure: TranslateClientTypes.Term.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TranslateClientTypes.Term {

    static func read(from reader: SmithyJSON.Reader) throws -> TranslateClientTypes.Term {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TranslateClientTypes.Term()
        value.sourceText = try reader["SourceText"].readIfPresent()
        value.targetText = try reader["TargetText"].readIfPresent()
        return value
    }
}

extension TranslateClientTypes.TerminologyData {

    static func write(value: TranslateClientTypes.TerminologyData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Directionality"].write(value.directionality)
        try writer["File"].write(value.file)
        try writer["Format"].write(value.format)
    }
}

extension TranslateClientTypes.TextTranslationJobFilter {

    static func write(value: TranslateClientTypes.TextTranslationJobFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobName"].write(value.jobName)
        try writer["JobStatus"].write(value.jobStatus)
        try writer["SubmittedAfterTime"].writeTimestamp(value.submittedAfterTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SubmittedBeforeTime"].writeTimestamp(value.submittedBeforeTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension TranslateClientTypes.Document {

    static func write(value: TranslateClientTypes.Document?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Content"].write(value.content)
        try writer["ContentType"].write(value.contentType)
    }
}

public enum TranslateClientTypes {}
