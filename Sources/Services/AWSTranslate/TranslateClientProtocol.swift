// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

/// Provides translation of the input content from the source language to the target language.
public protocol TranslateClientProtocol {
    /// Creates a parallel data resource in Amazon Translate by importing an input file from Amazon S3. Parallel data files contain examples that show how you want segments of text to be translated. By adding parallel data, you can influence the style, tone, and word choice in your translation output.
    func createParallelData(input: CreateParallelDataInput) async throws -> CreateParallelDataOutputResponse
    /// Deletes a parallel data resource in Amazon Translate.
    func deleteParallelData(input: DeleteParallelDataInput) async throws -> DeleteParallelDataOutputResponse
    /// A synchronous action that deletes a custom terminology.
    func deleteTerminology(input: DeleteTerminologyInput) async throws -> DeleteTerminologyOutputResponse
    /// Gets the properties associated with an asynchronous batch translation job including name, ID, status, source and target languages, input/output S3 buckets, and so on.
    func describeTextTranslationJob(input: DescribeTextTranslationJobInput) async throws -> DescribeTextTranslationJobOutputResponse
    /// Provides information about a parallel data resource.
    func getParallelData(input: GetParallelDataInput) async throws -> GetParallelDataOutputResponse
    /// Retrieves a custom terminology.
    func getTerminology(input: GetTerminologyInput) async throws -> GetTerminologyOutputResponse
    /// Creates or updates a custom terminology, depending on whether one already exists for the given terminology name. Importing a terminology with the same name as an existing one will merge the terminologies based on the chosen merge strategy. The only supported merge strategy is OVERWRITE, where the imported terminology overwrites the existing terminology of the same name. If you import a terminology that overwrites an existing one, the new terminology takes up to 10 minutes to fully propagate. After that, translations have access to the new terminology.
    func importTerminology(input: ImportTerminologyInput) async throws -> ImportTerminologyOutputResponse
    /// Provides a list of languages (RFC-5646 codes and names) that Amazon Translate supports.
    func listLanguages(input: ListLanguagesInput) async throws -> ListLanguagesOutputResponse
    /// Provides a list of your parallel data resources in Amazon Translate.
    func listParallelData(input: ListParallelDataInput) async throws -> ListParallelDataOutputResponse
    /// Lists all tags associated with a given Amazon Translate resource. For more information, see [ Tagging your resources](https://docs.aws.amazon.com/translate/latest/dg/tagging.html).
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    /// Provides a list of custom terminologies associated with your account.
    func listTerminologies(input: ListTerminologiesInput) async throws -> ListTerminologiesOutputResponse
    /// Gets a list of the batch translation jobs that you have submitted.
    func listTextTranslationJobs(input: ListTextTranslationJobsInput) async throws -> ListTextTranslationJobsOutputResponse
    /// Starts an asynchronous batch translation job. Use batch translation jobs to translate large volumes of text across multiple documents at once. For batch translation, you can input documents with different source languages (specify auto as the source language). You can specify one or more target languages. Batch translation translates each input document into each of the target languages. For more information, see [Asynchronous batch processing](https://docs.aws.amazon.com/translate/latest/dg/async.html). Batch translation jobs can be described with the [DescribeTextTranslationJob] operation, listed with the [ListTextTranslationJobs] operation, and stopped with the [StopTextTranslationJob] operation.
    func startTextTranslationJob(input: StartTextTranslationJobInput) async throws -> StartTextTranslationJobOutputResponse
    /// Stops an asynchronous batch translation job that is in progress. If the job's state is IN_PROGRESS, the job will be marked for termination and put into the STOP_REQUESTED state. If the job completes before it can be stopped, it is put into the COMPLETED state. Otherwise, the job is put into the STOPPED state. Asynchronous batch translation jobs are started with the [StartTextTranslationJob] operation. You can use the [DescribeTextTranslationJob] or [ListTextTranslationJobs] operations to get a batch translation job's JobId.
    func stopTextTranslationJob(input: StopTextTranslationJobInput) async throws -> StopTextTranslationJobOutputResponse
    /// Associates a specific tag with a resource. A tag is a key-value pair that adds as a metadata to a resource. For more information, see [ Tagging your resources](https://docs.aws.amazon.com/translate/latest/dg/tagging.html).
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    /// Translates input text from the source language to the target language. For a list of available languages and language codes, see [Supported languages](https://docs.aws.amazon.com/translate/latest/dg/what-is-languages.html).
    func translateText(input: TranslateTextInput) async throws -> TranslateTextOutputResponse
    /// Removes a specific tag associated with an Amazon Translate resource. For more information, see [ Tagging your resources](https://docs.aws.amazon.com/translate/latest/dg/tagging.html).
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    /// Updates a previously created parallel data resource by importing a new input file from Amazon S3.
    func updateParallelData(input: UpdateParallelDataInput) async throws -> UpdateParallelDataOutputResponse
}

public protocol TranslateClientConfigurationProtocol : AWSClientRuntime.AWSClientConfiguration {
    var endpointResolver: EndpointResolver { get }
}

public enum TranslateClientTypes {}
