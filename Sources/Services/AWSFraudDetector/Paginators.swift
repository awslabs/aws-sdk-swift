// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[DescribeModelVersionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeModelVersionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeModelVersionsOutputResponse`
extension FraudDetectorClient {
    public func describeModelVersionsPaginated(input: DescribeModelVersionsInput) -> ClientRuntime.PaginatorSequence<DescribeModelVersionsInput, DescribeModelVersionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeModelVersionsInput, DescribeModelVersionsOutputResponse>(input: input, inputKey: \DescribeModelVersionsInput.nextToken, outputKey: \DescribeModelVersionsOutputResponse.nextToken, paginationFunction: self.describeModelVersions(input:))
    }
}

extension DescribeModelVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeModelVersionsInput {
        return DescribeModelVersionsInput(
            maxResults: self.maxResults,
            modelId: self.modelId,
            modelType: self.modelType,
            modelVersionNumber: self.modelVersionNumber,
            nextToken: token
        )}
}

/// Paginate over `[GetBatchImportJobsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetBatchImportJobsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetBatchImportJobsOutputResponse`
extension FraudDetectorClient {
    public func getBatchImportJobsPaginated(input: GetBatchImportJobsInput) -> ClientRuntime.PaginatorSequence<GetBatchImportJobsInput, GetBatchImportJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetBatchImportJobsInput, GetBatchImportJobsOutputResponse>(input: input, inputKey: \GetBatchImportJobsInput.nextToken, outputKey: \GetBatchImportJobsOutputResponse.nextToken, paginationFunction: self.getBatchImportJobs(input:))
    }
}

extension GetBatchImportJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetBatchImportJobsInput {
        return GetBatchImportJobsInput(
            jobId: self.jobId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[GetBatchPredictionJobsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetBatchPredictionJobsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetBatchPredictionJobsOutputResponse`
extension FraudDetectorClient {
    public func getBatchPredictionJobsPaginated(input: GetBatchPredictionJobsInput) -> ClientRuntime.PaginatorSequence<GetBatchPredictionJobsInput, GetBatchPredictionJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetBatchPredictionJobsInput, GetBatchPredictionJobsOutputResponse>(input: input, inputKey: \GetBatchPredictionJobsInput.nextToken, outputKey: \GetBatchPredictionJobsOutputResponse.nextToken, paginationFunction: self.getBatchPredictionJobs(input:))
    }
}

extension GetBatchPredictionJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetBatchPredictionJobsInput {
        return GetBatchPredictionJobsInput(
            jobId: self.jobId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[GetDetectorsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetDetectorsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetDetectorsOutputResponse`
extension FraudDetectorClient {
    public func getDetectorsPaginated(input: GetDetectorsInput) -> ClientRuntime.PaginatorSequence<GetDetectorsInput, GetDetectorsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetDetectorsInput, GetDetectorsOutputResponse>(input: input, inputKey: \GetDetectorsInput.nextToken, outputKey: \GetDetectorsOutputResponse.nextToken, paginationFunction: self.getDetectors(input:))
    }
}

extension GetDetectorsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetDetectorsInput {
        return GetDetectorsInput(
            detectorId: self.detectorId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[GetEntityTypesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetEntityTypesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetEntityTypesOutputResponse`
extension FraudDetectorClient {
    public func getEntityTypesPaginated(input: GetEntityTypesInput) -> ClientRuntime.PaginatorSequence<GetEntityTypesInput, GetEntityTypesOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetEntityTypesInput, GetEntityTypesOutputResponse>(input: input, inputKey: \GetEntityTypesInput.nextToken, outputKey: \GetEntityTypesOutputResponse.nextToken, paginationFunction: self.getEntityTypes(input:))
    }
}

extension GetEntityTypesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetEntityTypesInput {
        return GetEntityTypesInput(
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token
        )}
}

/// Paginate over `[GetEventTypesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetEventTypesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetEventTypesOutputResponse`
extension FraudDetectorClient {
    public func getEventTypesPaginated(input: GetEventTypesInput) -> ClientRuntime.PaginatorSequence<GetEventTypesInput, GetEventTypesOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetEventTypesInput, GetEventTypesOutputResponse>(input: input, inputKey: \GetEventTypesInput.nextToken, outputKey: \GetEventTypesOutputResponse.nextToken, paginationFunction: self.getEventTypes(input:))
    }
}

extension GetEventTypesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetEventTypesInput {
        return GetEventTypesInput(
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token
        )}
}

/// Paginate over `[GetExternalModelsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetExternalModelsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetExternalModelsOutputResponse`
extension FraudDetectorClient {
    public func getExternalModelsPaginated(input: GetExternalModelsInput) -> ClientRuntime.PaginatorSequence<GetExternalModelsInput, GetExternalModelsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetExternalModelsInput, GetExternalModelsOutputResponse>(input: input, inputKey: \GetExternalModelsInput.nextToken, outputKey: \GetExternalModelsOutputResponse.nextToken, paginationFunction: self.getExternalModels(input:))
    }
}

extension GetExternalModelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetExternalModelsInput {
        return GetExternalModelsInput(
            maxResults: self.maxResults,
            modelEndpoint: self.modelEndpoint,
            nextToken: token
        )}
}

/// Paginate over `[GetLabelsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetLabelsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetLabelsOutputResponse`
extension FraudDetectorClient {
    public func getLabelsPaginated(input: GetLabelsInput) -> ClientRuntime.PaginatorSequence<GetLabelsInput, GetLabelsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetLabelsInput, GetLabelsOutputResponse>(input: input, inputKey: \GetLabelsInput.nextToken, outputKey: \GetLabelsOutputResponse.nextToken, paginationFunction: self.getLabels(input:))
    }
}

extension GetLabelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetLabelsInput {
        return GetLabelsInput(
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token
        )}
}

/// Paginate over `[GetModelsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetModelsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetModelsOutputResponse`
extension FraudDetectorClient {
    public func getModelsPaginated(input: GetModelsInput) -> ClientRuntime.PaginatorSequence<GetModelsInput, GetModelsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetModelsInput, GetModelsOutputResponse>(input: input, inputKey: \GetModelsInput.nextToken, outputKey: \GetModelsOutputResponse.nextToken, paginationFunction: self.getModels(input:))
    }
}

extension GetModelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetModelsInput {
        return GetModelsInput(
            maxResults: self.maxResults,
            modelId: self.modelId,
            modelType: self.modelType,
            nextToken: token
        )}
}

/// Paginate over `[GetOutcomesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetOutcomesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetOutcomesOutputResponse`
extension FraudDetectorClient {
    public func getOutcomesPaginated(input: GetOutcomesInput) -> ClientRuntime.PaginatorSequence<GetOutcomesInput, GetOutcomesOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetOutcomesInput, GetOutcomesOutputResponse>(input: input, inputKey: \GetOutcomesInput.nextToken, outputKey: \GetOutcomesOutputResponse.nextToken, paginationFunction: self.getOutcomes(input:))
    }
}

extension GetOutcomesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetOutcomesInput {
        return GetOutcomesInput(
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token
        )}
}

/// Paginate over `[GetRulesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetRulesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetRulesOutputResponse`
extension FraudDetectorClient {
    public func getRulesPaginated(input: GetRulesInput) -> ClientRuntime.PaginatorSequence<GetRulesInput, GetRulesOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetRulesInput, GetRulesOutputResponse>(input: input, inputKey: \GetRulesInput.nextToken, outputKey: \GetRulesOutputResponse.nextToken, paginationFunction: self.getRules(input:))
    }
}

extension GetRulesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetRulesInput {
        return GetRulesInput(
            detectorId: self.detectorId,
            maxResults: self.maxResults,
            nextToken: token,
            ruleId: self.ruleId,
            ruleVersion: self.ruleVersion
        )}
}

/// Paginate over `[GetVariablesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetVariablesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetVariablesOutputResponse`
extension FraudDetectorClient {
    public func getVariablesPaginated(input: GetVariablesInput) -> ClientRuntime.PaginatorSequence<GetVariablesInput, GetVariablesOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetVariablesInput, GetVariablesOutputResponse>(input: input, inputKey: \GetVariablesInput.nextToken, outputKey: \GetVariablesOutputResponse.nextToken, paginationFunction: self.getVariables(input:))
    }
}

extension GetVariablesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetVariablesInput {
        return GetVariablesInput(
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token
        )}
}

/// Paginate over `[ListEventPredictionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListEventPredictionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListEventPredictionsOutputResponse`
extension FraudDetectorClient {
    public func listEventPredictionsPaginated(input: ListEventPredictionsInput) -> ClientRuntime.PaginatorSequence<ListEventPredictionsInput, ListEventPredictionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListEventPredictionsInput, ListEventPredictionsOutputResponse>(input: input, inputKey: \ListEventPredictionsInput.nextToken, outputKey: \ListEventPredictionsOutputResponse.nextToken, paginationFunction: self.listEventPredictions(input:))
    }
}

extension ListEventPredictionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEventPredictionsInput {
        return ListEventPredictionsInput(
            detectorId: self.detectorId,
            detectorVersionId: self.detectorVersionId,
            eventId: self.eventId,
            eventType: self.eventType,
            maxResults: self.maxResults,
            nextToken: token,
            predictionTimeRange: self.predictionTimeRange
        )}
}

/// Paginate over `[ListTagsForResourceOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListTagsForResourceInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListTagsForResourceOutputResponse`
extension FraudDetectorClient {
    public func listTagsForResourcePaginated(input: ListTagsForResourceInput) -> ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse>(input: input, inputKey: \ListTagsForResourceInput.nextToken, outputKey: \ListTagsForResourceOutputResponse.nextToken, paginationFunction: self.listTagsForResource(input:))
    }
}

extension ListTagsForResourceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTagsForResourceInput {
        return ListTagsForResourceInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceARN: self.resourceARN
        )}
}
