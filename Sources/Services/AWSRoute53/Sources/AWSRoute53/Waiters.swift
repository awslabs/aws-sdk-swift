// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class ClientRuntime.Waiter
import enum ClientRuntime.JMESUtils
import struct ClientRuntime.WaiterConfiguration
import struct ClientRuntime.WaiterOptions
import struct ClientRuntime.WaiterOutcome

extension Route53Client {

    static func resourceRecordSetsChangedWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<GetChangeInput, GetChangeOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<GetChangeInput, GetChangeOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetChangeInput, result: Swift.Result<GetChangeOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "ChangeInfo.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "INSYNC"
                guard case .success(let output) = result else { return false }
                let changeInfo = output.changeInfo
                let status = changeInfo?.status
                return ClientRuntime.JMESUtils.compare(status, ==, "INSYNC")
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<GetChangeInput, GetChangeOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ResourceRecordSetsChanged event on the getChange operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetChangeInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilResourceRecordSetsChanged(options: ClientRuntime.WaiterOptions, input: GetChangeInput) async throws -> ClientRuntime.WaiterOutcome<GetChangeOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.resourceRecordSetsChangedWaiterConfig(), operation: self.getChange(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
