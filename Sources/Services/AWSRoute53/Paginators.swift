// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Route53Client {
    /// Paginate over `[ListCidrBlocksOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCidrBlocksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCidrBlocksOutput`
    public func listCidrBlocksPaginated(input: ListCidrBlocksInput) -> ClientRuntime.PaginatorSequence<ListCidrBlocksInput, ListCidrBlocksOutput> {
        return ClientRuntime.PaginatorSequence<ListCidrBlocksInput, ListCidrBlocksOutput>(input: input, inputKey: \ListCidrBlocksInput.nextToken, outputKey: \ListCidrBlocksOutput.nextToken, paginationFunction: self.listCidrBlocks(input:))
    }
}

extension ListCidrBlocksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCidrBlocksInput {
        return ListCidrBlocksInput(
            collectionId: self.collectionId,
            locationName: self.locationName,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListCidrBlocksInput, Output == ListCidrBlocksOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listCidrBlocksPaginated`
    /// to access the nested member `[Route53ClientTypes.CidrBlockSummary]`
    /// - Returns: `[Route53ClientTypes.CidrBlockSummary]`
    public func cidrBlocks() async throws -> [Route53ClientTypes.CidrBlockSummary] {
        return try await self.asyncCompactMap { item in item.cidrBlocks }
    }
}
extension Route53Client {
    /// Paginate over `[ListCidrCollectionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCidrCollectionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCidrCollectionsOutput`
    public func listCidrCollectionsPaginated(input: ListCidrCollectionsInput) -> ClientRuntime.PaginatorSequence<ListCidrCollectionsInput, ListCidrCollectionsOutput> {
        return ClientRuntime.PaginatorSequence<ListCidrCollectionsInput, ListCidrCollectionsOutput>(input: input, inputKey: \ListCidrCollectionsInput.nextToken, outputKey: \ListCidrCollectionsOutput.nextToken, paginationFunction: self.listCidrCollections(input:))
    }
}

extension ListCidrCollectionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCidrCollectionsInput {
        return ListCidrCollectionsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListCidrCollectionsInput, Output == ListCidrCollectionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listCidrCollectionsPaginated`
    /// to access the nested member `[Route53ClientTypes.CollectionSummary]`
    /// - Returns: `[Route53ClientTypes.CollectionSummary]`
    public func cidrCollections() async throws -> [Route53ClientTypes.CollectionSummary] {
        return try await self.asyncCompactMap { item in item.cidrCollections }
    }
}
extension Route53Client {
    /// Paginate over `[ListCidrLocationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCidrLocationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCidrLocationsOutput`
    public func listCidrLocationsPaginated(input: ListCidrLocationsInput) -> ClientRuntime.PaginatorSequence<ListCidrLocationsInput, ListCidrLocationsOutput> {
        return ClientRuntime.PaginatorSequence<ListCidrLocationsInput, ListCidrLocationsOutput>(input: input, inputKey: \ListCidrLocationsInput.nextToken, outputKey: \ListCidrLocationsOutput.nextToken, paginationFunction: self.listCidrLocations(input:))
    }
}

extension ListCidrLocationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCidrLocationsInput {
        return ListCidrLocationsInput(
            collectionId: self.collectionId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListCidrLocationsInput, Output == ListCidrLocationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listCidrLocationsPaginated`
    /// to access the nested member `[Route53ClientTypes.LocationSummary]`
    /// - Returns: `[Route53ClientTypes.LocationSummary]`
    public func cidrLocations() async throws -> [Route53ClientTypes.LocationSummary] {
        return try await self.asyncCompactMap { item in item.cidrLocations }
    }
}
extension Route53Client {
    /// Paginate over `[ListHealthChecksOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListHealthChecksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListHealthChecksOutput`
    public func listHealthChecksPaginated(input: ListHealthChecksInput) -> ClientRuntime.PaginatorSequence<ListHealthChecksInput, ListHealthChecksOutput> {
        return ClientRuntime.PaginatorSequence<ListHealthChecksInput, ListHealthChecksOutput>(input: input, inputKey: \ListHealthChecksInput.marker, outputKey: \ListHealthChecksOutput.nextMarker, paginationFunction: self.listHealthChecks(input:))
    }
}

extension ListHealthChecksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListHealthChecksInput {
        return ListHealthChecksInput(
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where Input == ListHealthChecksInput, Output == ListHealthChecksOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listHealthChecksPaginated`
    /// to access the nested member `[Route53ClientTypes.HealthCheck]`
    /// - Returns: `[Route53ClientTypes.HealthCheck]`
    public func healthChecks() async throws -> [Route53ClientTypes.HealthCheck] {
        return try await self.asyncCompactMap { item in item.healthChecks }
    }
}
extension Route53Client {
    /// Paginate over `[ListHostedZonesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListHostedZonesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListHostedZonesOutput`
    public func listHostedZonesPaginated(input: ListHostedZonesInput) -> ClientRuntime.PaginatorSequence<ListHostedZonesInput, ListHostedZonesOutput> {
        return ClientRuntime.PaginatorSequence<ListHostedZonesInput, ListHostedZonesOutput>(input: input, inputKey: \ListHostedZonesInput.marker, outputKey: \ListHostedZonesOutput.nextMarker, paginationFunction: self.listHostedZones(input:))
    }
}

extension ListHostedZonesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListHostedZonesInput {
        return ListHostedZonesInput(
            delegationSetId: self.delegationSetId,
            hostedZoneType: self.hostedZoneType,
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where Input == ListHostedZonesInput, Output == ListHostedZonesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listHostedZonesPaginated`
    /// to access the nested member `[Route53ClientTypes.HostedZone]`
    /// - Returns: `[Route53ClientTypes.HostedZone]`
    public func hostedZones() async throws -> [Route53ClientTypes.HostedZone] {
        return try await self.asyncCompactMap { item in item.hostedZones }
    }
}
extension Route53Client {
    /// Paginate over `[ListQueryLoggingConfigsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListQueryLoggingConfigsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListQueryLoggingConfigsOutput`
    public func listQueryLoggingConfigsPaginated(input: ListQueryLoggingConfigsInput) -> ClientRuntime.PaginatorSequence<ListQueryLoggingConfigsInput, ListQueryLoggingConfigsOutput> {
        return ClientRuntime.PaginatorSequence<ListQueryLoggingConfigsInput, ListQueryLoggingConfigsOutput>(input: input, inputKey: \ListQueryLoggingConfigsInput.nextToken, outputKey: \ListQueryLoggingConfigsOutput.nextToken, paginationFunction: self.listQueryLoggingConfigs(input:))
    }
}

extension ListQueryLoggingConfigsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListQueryLoggingConfigsInput {
        return ListQueryLoggingConfigsInput(
            hostedZoneId: self.hostedZoneId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListQueryLoggingConfigsInput, Output == ListQueryLoggingConfigsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listQueryLoggingConfigsPaginated`
    /// to access the nested member `[Route53ClientTypes.QueryLoggingConfig]`
    /// - Returns: `[Route53ClientTypes.QueryLoggingConfig]`
    public func queryLoggingConfigs() async throws -> [Route53ClientTypes.QueryLoggingConfig] {
        return try await self.asyncCompactMap { item in item.queryLoggingConfigs }
    }
}
