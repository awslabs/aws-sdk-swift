// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KafkaConnectClient {
    /// Paginate over `[ListConnectorsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListConnectorsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListConnectorsOutputResponse`
    public func listConnectorsPaginated(input: ListConnectorsInput) -> ClientRuntime.PaginatorSequence<ListConnectorsInput, ListConnectorsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListConnectorsInput, ListConnectorsOutputResponse>(input: input, inputKey: \ListConnectorsInput.nextToken, outputKey: \ListConnectorsOutputResponse.nextToken, paginationFunction: self.listConnectors(input:))
    }
}

extension ListConnectorsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListConnectorsInput {
        return ListConnectorsInput(
            connectorNamePrefix: self.connectorNamePrefix,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListConnectorsInput, Output == ListConnectorsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listConnectorsPaginated`
    /// to access the nested member `[KafkaConnectClientTypes.ConnectorSummary]`
    /// - Returns: `[KafkaConnectClientTypes.ConnectorSummary]`
    public func connectors() async throws -> [KafkaConnectClientTypes.ConnectorSummary] {
        return try await self.asyncCompactMap { item in item.connectors }
    }
}
extension KafkaConnectClient {
    /// Paginate over `[ListCustomPluginsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCustomPluginsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCustomPluginsOutputResponse`
    public func listCustomPluginsPaginated(input: ListCustomPluginsInput) -> ClientRuntime.PaginatorSequence<ListCustomPluginsInput, ListCustomPluginsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListCustomPluginsInput, ListCustomPluginsOutputResponse>(input: input, inputKey: \ListCustomPluginsInput.nextToken, outputKey: \ListCustomPluginsOutputResponse.nextToken, paginationFunction: self.listCustomPlugins(input:))
    }
}

extension ListCustomPluginsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCustomPluginsInput {
        return ListCustomPluginsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListCustomPluginsInput, Output == ListCustomPluginsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listCustomPluginsPaginated`
    /// to access the nested member `[KafkaConnectClientTypes.CustomPluginSummary]`
    /// - Returns: `[KafkaConnectClientTypes.CustomPluginSummary]`
    public func customPlugins() async throws -> [KafkaConnectClientTypes.CustomPluginSummary] {
        return try await self.asyncCompactMap { item in item.customPlugins }
    }
}
extension KafkaConnectClient {
    /// Paginate over `[ListWorkerConfigurationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListWorkerConfigurationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListWorkerConfigurationsOutputResponse`
    public func listWorkerConfigurationsPaginated(input: ListWorkerConfigurationsInput) -> ClientRuntime.PaginatorSequence<ListWorkerConfigurationsInput, ListWorkerConfigurationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListWorkerConfigurationsInput, ListWorkerConfigurationsOutputResponse>(input: input, inputKey: \ListWorkerConfigurationsInput.nextToken, outputKey: \ListWorkerConfigurationsOutputResponse.nextToken, paginationFunction: self.listWorkerConfigurations(input:))
    }
}

extension ListWorkerConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListWorkerConfigurationsInput {
        return ListWorkerConfigurationsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListWorkerConfigurationsInput, Output == ListWorkerConfigurationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listWorkerConfigurationsPaginated`
    /// to access the nested member `[KafkaConnectClientTypes.WorkerConfigurationSummary]`
    /// - Returns: `[KafkaConnectClientTypes.WorkerConfigurationSummary]`
    public func workerConfigurations() async throws -> [KafkaConnectClientTypes.WorkerConfigurationSummary] {
        return try await self.asyncCompactMap { item in item.workerConfigurations }
    }
}
