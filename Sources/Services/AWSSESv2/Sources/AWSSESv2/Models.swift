//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.listWritingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.timestampReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

extension SESv2ClientTypes {

    public enum ContactLanguage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case en
        case ja
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactLanguage] {
            return [
                .en,
                .ja
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .en: return "EN"
            case .ja: return "JA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {

    public enum MailType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case marketing
        case transactional
        case sdkUnknown(Swift.String)

        public static var allCases: [MailType] {
            return [
                .marketing,
                .transactional
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .marketing: return "MARKETING"
            case .transactional: return "TRANSACTIONAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {

    public enum ReviewStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case denied
        case failed
        case granted
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ReviewStatus] {
            return [
                .denied,
                .failed,
                .granted,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .denied: return "DENIED"
            case .failed: return "FAILED"
            case .granted: return "GRANTED"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about your account details review.
    public struct ReviewDetails {
        /// The associated support center case ID (if any).
        public var caseId: Swift.String?
        /// The status of the latest review of your account. The status can be one of the following:
        ///
        /// * PENDING – We have received your appeal and are in the process of reviewing it.
        ///
        /// * GRANTED – Your appeal has been reviewed and your production access has been granted.
        ///
        /// * DENIED – Your appeal has been reviewed and your production access has been denied.
        ///
        /// * FAILED – An internal error occurred and we didn't receive your appeal. You can submit your appeal again.
        public var status: SESv2ClientTypes.ReviewStatus?

        public init(
            caseId: Swift.String? = nil,
            status: SESv2ClientTypes.ReviewStatus? = nil
        )
        {
            self.caseId = caseId
            self.status = status
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains information about your account details.
    public struct AccountDetails {
        /// Additional email addresses where updates are sent about your account review process.
        public var additionalContactEmailAddresses: [Swift.String]?
        /// The language you would prefer for the case. The contact language can be one of ENGLISH or JAPANESE.
        public var contactLanguage: SESv2ClientTypes.ContactLanguage?
        /// The type of email your account is sending. The mail type can be one of the following:
        ///
        /// * MARKETING – Most of your sending traffic is to keep your customers informed of your latest offering.
        ///
        /// * TRANSACTIONAL – Most of your sending traffic is to communicate during a transaction with a customer.
        public var mailType: SESv2ClientTypes.MailType?
        /// Information about the review of the latest details you submitted.
        public var reviewDetails: SESv2ClientTypes.ReviewDetails?
        /// A description of the types of email that you plan to send.
        @available(*, deprecated, message: "Use case description is optional and deprecated")
        public var useCaseDescription: Swift.String?
        /// The URL of your website. This information helps us better understand the type of content that you plan to send.
        public var websiteURL: Swift.String?

        public init(
            additionalContactEmailAddresses: [Swift.String]? = nil,
            contactLanguage: SESv2ClientTypes.ContactLanguage? = nil,
            mailType: SESv2ClientTypes.MailType? = nil,
            reviewDetails: SESv2ClientTypes.ReviewDetails? = nil,
            useCaseDescription: Swift.String? = nil,
            websiteURL: Swift.String? = nil
        )
        {
            self.additionalContactEmailAddresses = additionalContactEmailAddresses
            self.contactLanguage = contactLanguage
            self.mailType = mailType
            self.reviewDetails = reviewDetails
            self.useCaseDescription = useCaseDescription
            self.websiteURL = websiteURL
        }
    }

}

extension SESv2ClientTypes.AccountDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccountDetails(contactLanguage: \(Swift.String(describing: contactLanguage)), mailType: \(Swift.String(describing: mailType)), reviewDetails: \(Swift.String(describing: reviewDetails)), additionalContactEmailAddresses: \"CONTENT_REDACTED\", useCaseDescription: \"CONTENT_REDACTED\", websiteURL: \"CONTENT_REDACTED\")"}
}

/// The message can't be sent because the account's ability to send email has been permanently restricted.
public struct AccountSuspendedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccountSuspendedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource specified in your request already exists.
public struct AlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The input you provided is invalid.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request couldn't be processed because an error occurred with the Amazon SES API v2.
public struct InternalServiceErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServiceErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource you attempted to access doesn't exist.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Too many requests have been made to the operation.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SESv2ClientTypes {

    /// The BatchGetMetricDataQuery dimension name. This can be one of the following:
    ///
    /// * EMAIL_IDENTITY – The email identity used when sending messages.
    ///
    /// * CONFIGURATION_SET – The configuration set used when sending messages (if one was used).
    ///
    /// * ISP – The recipient ISP (e.g. Gmail, Yahoo, etc.).
    public enum MetricDimensionName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case configurationSet
        case emailIdentity
        case isp
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricDimensionName] {
            return [
                .configurationSet,
                .emailIdentity,
                .isp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .configurationSet: return "CONFIGURATION_SET"
            case .emailIdentity: return "EMAIL_IDENTITY"
            case .isp: return "ISP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {

    /// The metric to export, can be one of the following:
    ///
    /// * SEND - Emails sent eligible for tracking in the VDM dashboard. This excludes emails sent to the mailbox simulator and emails addressed to more than one recipient.
    ///
    /// * COMPLAINT - Complaints received for your account. This excludes complaints from the mailbox simulator, those originating from your account-level suppression list (if enabled), and those for emails addressed to more than one recipient
    ///
    /// * PERMANENT_BOUNCE - Permanent bounces - i.e., feedback received for emails sent to non-existent mailboxes. Excludes bounces from the mailbox simulator, those originating from your account-level suppression list (if enabled), and those for emails addressed to more than one recipient.
    ///
    /// * TRANSIENT_BOUNCE - Transient bounces - i.e., feedback received for delivery failures excluding issues with non-existent mailboxes. Excludes bounces from the mailbox simulator, and those for emails addressed to more than one recipient.
    ///
    /// * OPEN - Unique open events for emails including open trackers. Excludes opens for emails addressed to more than one recipient.
    ///
    /// * CLICK - Unique click events for emails including wrapped links. Excludes clicks for emails addressed to more than one recipient.
    ///
    /// * DELIVERY - Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator and for emails addressed to more than one recipient.
    ///
    /// * DELIVERY_OPEN - Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator, for emails addressed to more than one recipient, and emails without open trackers.
    ///
    /// * DELIVERY_CLICK - Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator, for emails addressed to more than one recipient, and emails without click trackers.
    ///
    /// * DELIVERY_COMPLAINT - Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator, for emails addressed to more than one recipient, and emails addressed to recipients hosted by ISPs with which Amazon SES does not have a feedback loop agreement.
    public enum Metric: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case click
        case complaint
        case delivery
        case deliveryClick
        case deliveryComplaint
        case deliveryOpen
        case `open`
        case permanentBounce
        case send
        case transientBounce
        case sdkUnknown(Swift.String)

        public static var allCases: [Metric] {
            return [
                .click,
                .complaint,
                .delivery,
                .deliveryClick,
                .deliveryComplaint,
                .deliveryOpen,
                .open,
                .permanentBounce,
                .send,
                .transientBounce
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .click: return "CLICK"
            case .complaint: return "COMPLAINT"
            case .delivery: return "DELIVERY"
            case .deliveryClick: return "DELIVERY_CLICK"
            case .deliveryComplaint: return "DELIVERY_COMPLAINT"
            case .deliveryOpen: return "DELIVERY_OPEN"
            case .open: return "OPEN"
            case .permanentBounce: return "PERMANENT_BOUNCE"
            case .send: return "SEND"
            case .transientBounce: return "TRANSIENT_BOUNCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {

    public enum MetricNamespace: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case vdm
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricNamespace] {
            return [
                .vdm
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .vdm: return "VDM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// Represents a single metric data query to include in a batch.
    public struct BatchGetMetricDataQuery {
        /// An object that contains mapping between MetricDimensionName and MetricDimensionValue to filter metrics by.
        public var dimensions: [Swift.String: Swift.String]?
        /// Represents the end date for the query interval.
        /// This member is required.
        public var endDate: Foundation.Date?
        /// The query identifier.
        /// This member is required.
        public var id: Swift.String?
        /// The queried metric. This can be one of the following:
        ///
        /// * SEND – Emails sent eligible for tracking in the VDM dashboard. This excludes emails sent to the mailbox simulator and emails addressed to more than one recipient.
        ///
        /// * COMPLAINT – Complaints received for your account. This excludes complaints from the mailbox simulator, those originating from your account-level suppression list (if enabled), and those for emails addressed to more than one recipient
        ///
        /// * PERMANENT_BOUNCE – Permanent bounces - i.e. feedback received for emails sent to non-existent mailboxes. Excludes bounces from the mailbox simulator, those originating from your account-level suppression list (if enabled), and those for emails addressed to more than one recipient.
        ///
        /// * TRANSIENT_BOUNCE – Transient bounces - i.e. feedback received for delivery failures excluding issues with non-existent mailboxes. Excludes bounces from the mailbox simulator, and those for emails addressed to more than one recipient.
        ///
        /// * OPEN – Unique open events for emails including open trackers. Excludes opens for emails addressed to more than one recipient.
        ///
        /// * CLICK – Unique click events for emails including wrapped links. Excludes clicks for emails addressed to more than one recipient.
        ///
        /// * DELIVERY – Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator and for emails addressed to more than one recipient.
        ///
        /// * DELIVERY_OPEN – Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator, for emails addressed to more than one recipient, and emails without open trackers.
        ///
        /// * DELIVERY_CLICK – Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator, for emails addressed to more than one recipient, and emails without click trackers.
        ///
        /// * DELIVERY_COMPLAINT – Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator, for emails addressed to more than one recipient, and emails addressed to recipients hosted by ISPs with which Amazon SES does not have a feedback loop agreement.
        /// This member is required.
        public var metric: SESv2ClientTypes.Metric?
        /// The query namespace - e.g. VDM
        /// This member is required.
        public var namespace: SESv2ClientTypes.MetricNamespace?
        /// Represents the start date for the query interval.
        /// This member is required.
        public var startDate: Foundation.Date?

        public init(
            dimensions: [Swift.String: Swift.String]? = nil,
            endDate: Foundation.Date? = nil,
            id: Swift.String? = nil,
            metric: SESv2ClientTypes.Metric? = nil,
            namespace: SESv2ClientTypes.MetricNamespace? = nil,
            startDate: Foundation.Date? = nil
        )
        {
            self.dimensions = dimensions
            self.endDate = endDate
            self.id = id
            self.metric = metric
            self.namespace = namespace
            self.startDate = startDate
        }
    }

}

/// Represents a request to retrieve a batch of metric data.
public struct BatchGetMetricDataInput {
    /// A list of queries for metrics to be retrieved.
    /// This member is required.
    public var queries: [SESv2ClientTypes.BatchGetMetricDataQuery]?

    public init(
        queries: [SESv2ClientTypes.BatchGetMetricDataQuery]? = nil
    )
    {
        self.queries = queries
    }
}

extension SESv2ClientTypes {

    public enum QueryErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessDenied
        case internalFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryErrorCode] {
            return [
                .accessDenied,
                .internalFailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "ACCESS_DENIED"
            case .internalFailure: return "INTERNAL_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An error corresponding to the unsuccessful processing of a single metric data query.
    public struct MetricDataError {
        /// The query error code. Can be one of:
        ///
        /// * INTERNAL_FAILURE – Amazon SES has failed to process one of the queries.
        ///
        /// * ACCESS_DENIED – You have insufficient access to retrieve metrics based on the given query.
        public var code: SESv2ClientTypes.QueryErrorCode?
        /// The query identifier.
        public var id: Swift.String?
        /// The error message associated with the current query error.
        public var message: Swift.String?

        public init(
            code: SESv2ClientTypes.QueryErrorCode? = nil,
            id: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.id = id
            self.message = message
        }
    }

}

extension SESv2ClientTypes {
    /// The result of a single metric data query.
    public struct MetricDataResult {
        /// The query identifier.
        public var id: Swift.String?
        /// A list of timestamps for the metric data results.
        public var timestamps: [Foundation.Date]?
        /// A list of values (cumulative / sum) for the metric data results.
        public var values: [Swift.Int]?

        public init(
            id: Swift.String? = nil,
            timestamps: [Foundation.Date]? = nil,
            values: [Swift.Int]? = nil
        )
        {
            self.id = id
            self.timestamps = timestamps
            self.values = values
        }
    }

}

/// Represents the result of processing your metric data batch request
public struct BatchGetMetricDataOutput {
    /// A list of MetricDataError encountered while processing your metric data batch request.
    public var errors: [SESv2ClientTypes.MetricDataError]?
    /// A list of successfully retrieved MetricDataResult.
    public var results: [SESv2ClientTypes.MetricDataResult]?

    public init(
        errors: [SESv2ClientTypes.MetricDataError]? = nil,
        results: [SESv2ClientTypes.MetricDataResult]? = nil
    )
    {
        self.errors = errors
        self.results = results
    }
}

extension SESv2ClientTypes {

    /// The action to take if the required MX record can't be found when you send an email. When you set this value to UseDefaultValue, the mail is sent using amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage, the Amazon SES API v2 returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
    public enum BehaviorOnMxFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rejectMessage
        case useDefaultValue
        case sdkUnknown(Swift.String)

        public static var allCases: [BehaviorOnMxFailure] {
            return [
                .rejectMessage,
                .useDefaultValue
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rejectMessage: return "REJECT_MESSAGE"
            case .useDefaultValue: return "USE_DEFAULT_VALUE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about a blacklisting event that impacts one of the dedicated IP addresses that is associated with your account.
    public struct BlacklistEntry {
        /// Additional information about the blacklisting event, as provided by the blacklist maintainer.
        public var description: Swift.String?
        /// The time when the blacklisting event occurred.
        public var listingTime: Foundation.Date?
        /// The name of the blacklist that the IP address appears on.
        public var rblName: Swift.String?

        public init(
            description: Swift.String? = nil,
            listingTime: Foundation.Date? = nil,
            rblName: Swift.String? = nil
        )
        {
            self.description = description
            self.listingTime = listingTime
            self.rblName = rblName
        }
    }

}

extension SESv2ClientTypes {
    /// An object that represents the content of the email, and optionally a character set specification.
    public struct Content {
        /// The character set for the content. Because of the constraints of the SMTP protocol, Amazon SES uses 7-bit ASCII by default. If the text includes characters outside of the ASCII range, you have to specify a character set. For example, you could specify UTF-8, ISO-8859-1, or Shift_JIS.
        public var charset: Swift.String?
        /// The content of the message itself.
        /// This member is required.
        public var data: Swift.String?

        public init(
            charset: Swift.String? = nil,
            data: Swift.String? = nil
        )
        {
            self.charset = charset
            self.data = data
        }
    }

}

extension SESv2ClientTypes {
    /// Represents the body of the email message.
    public struct Body {
        /// An object that represents the version of the message that is displayed in email clients that support HTML. HTML messages can include formatted text, hyperlinks, images, and more.
        public var html: SESv2ClientTypes.Content?
        /// An object that represents the version of the message that is displayed in email clients that don't support HTML, or clients where the recipient has disabled HTML rendering.
        public var text: SESv2ClientTypes.Content?

        public init(
            html: SESv2ClientTypes.Content? = nil,
            text: SESv2ClientTypes.Content? = nil
        )
        {
            self.html = html
            self.text = text
        }
    }

}

extension SESv2ClientTypes {

    public enum BounceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case permanent
        case transient
        case undetermined
        case sdkUnknown(Swift.String)

        public static var allCases: [BounceType] {
            return [
                .permanent,
                .transient,
                .undetermined
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .permanent: return "PERMANENT"
            case .transient: return "TRANSIENT"
            case .undetermined: return "UNDETERMINED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// Information about a Bounce event.
    public struct Bounce {
        /// The subtype of the bounce, as determined by SES.
        public var bounceSubType: Swift.String?
        /// The type of the bounce, as determined by SES. Can be one of UNDETERMINED, TRANSIENT, or PERMANENT
        public var bounceType: SESv2ClientTypes.BounceType?
        /// The status code issued by the reporting Message Transfer Authority (MTA). This field only appears if a delivery status notification (DSN) was attached to the bounce and the Diagnostic-Code was provided in the DSN.
        public var diagnosticCode: Swift.String?

        public init(
            bounceSubType: Swift.String? = nil,
            bounceType: SESv2ClientTypes.BounceType? = nil,
            diagnosticCode: Swift.String? = nil
        )
        {
            self.bounceSubType = bounceSubType
            self.bounceType = bounceType
            self.diagnosticCode = diagnosticCode
        }
    }

}

extension SESv2ClientTypes {
    /// Contains the name and value of a message header that you add to an email.
    public struct MessageHeader {
        /// The name of the message header. The message header name has to meet the following criteria:
        ///
        /// * Can contain any printable ASCII character (33 - 126) except for colon (:).
        ///
        /// * Can contain no more than 126 characters.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the message header. The message header value has to meet the following criteria:
        ///
        /// * Can contain any printable ASCII character.
        ///
        /// * Can contain no more than 870 characters.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SESv2ClientTypes {
    /// An object that defines the email template to use for an email message, and the values to use for any message variables in that template. An email template is a type of message template that contains content that you want to define, save, and reuse in email messages that you send.
    public struct Template {
        /// The list of message headers that will be added to the email message.
        public var headers: [SESv2ClientTypes.MessageHeader]?
        /// The Amazon Resource Name (ARN) of the template.
        public var templateArn: Swift.String?
        /// An object that defines the values to use for message variables in the template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the value to use for that variable.
        public var templateData: Swift.String?
        /// The name of the template. You will refer to this name when you send email using the SendTemplatedEmail or SendBulkTemplatedEmail operations.
        public var templateName: Swift.String?

        public init(
            headers: [SESv2ClientTypes.MessageHeader]? = nil,
            templateArn: Swift.String? = nil,
            templateData: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.headers = headers
            self.templateArn = templateArn
            self.templateData = templateData
            self.templateName = templateName
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains the body of the message. You can specify a template message.
    public struct BulkEmailContent {
        /// The template to use for the bulk email message.
        public var template: SESv2ClientTypes.Template?

        public init(
            template: SESv2ClientTypes.Template? = nil
        )
        {
            self.template = template
        }
    }

}

extension SESv2ClientTypes {
    /// An object that describes the recipients for an email. Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the local part of a destination email address (the part of the email address that precedes the @ sign) may only contain [7-bit ASCII characters](https://en.wikipedia.org/wiki/Email_address#Local-part). If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in [RFC3492](https://tools.ietf.org/html/rfc3492.html).
    public struct Destination {
        /// An array that contains the email addresses of the "BCC" (blind carbon copy) recipients for the email.
        public var bccAddresses: [Swift.String]?
        /// An array that contains the email addresses of the "CC" (carbon copy) recipients for the email.
        public var ccAddresses: [Swift.String]?
        /// An array that contains the email addresses of the "To" recipients for the email.
        public var toAddresses: [Swift.String]?

        public init(
            bccAddresses: [Swift.String]? = nil,
            ccAddresses: [Swift.String]? = nil,
            toAddresses: [Swift.String]? = nil
        )
        {
            self.bccAddresses = bccAddresses
            self.ccAddresses = ccAddresses
            self.toAddresses = toAddresses
        }
    }

}

extension SESv2ClientTypes {
    /// An object which contains ReplacementTemplateData to be used for a specific BulkEmailEntry.
    public struct ReplacementTemplate {
        /// A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
        public var replacementTemplateData: Swift.String?

        public init(
            replacementTemplateData: Swift.String? = nil
        )
        {
            self.replacementTemplateData = replacementTemplateData
        }
    }

}

extension SESv2ClientTypes {
    /// The ReplaceEmailContent object to be used for a specific BulkEmailEntry. The ReplacementTemplate can be specified within this object.
    public struct ReplacementEmailContent {
        /// The ReplacementTemplate associated with ReplacementEmailContent.
        public var replacementTemplate: SESv2ClientTypes.ReplacementTemplate?

        public init(
            replacementTemplate: SESv2ClientTypes.ReplacementTemplate? = nil
        )
        {
            self.replacementTemplate = replacementTemplate
        }
    }

}

extension SESv2ClientTypes {
    /// Contains the name and value of a tag that you apply to an email. You can use message tags when you publish email sending events.
    public struct MessageTag {
        /// The name of the message tag. The message tag name has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the message tag. The message tag value has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SESv2ClientTypes {
    public struct BulkEmailEntry {
        /// Represents the destination of the message, consisting of To:, CC:, and BCC: fields. Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the local part of a destination email address (the part of the email address that precedes the @ sign) may only contain [7-bit ASCII characters](https://en.wikipedia.org/wiki/Email_address#Local-part). If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in [RFC3492](https://tools.ietf.org/html/rfc3492.html).
        /// This member is required.
        public var destination: SESv2ClientTypes.Destination?
        /// The ReplacementEmailContent associated with a BulkEmailEntry.
        public var replacementEmailContent: SESv2ClientTypes.ReplacementEmailContent?
        /// The list of message headers associated with the BulkEmailEntry data type.
        ///
        /// * Headers Not Present in BulkEmailEntry: If a header is specified in [Template](https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_Template.html) but not in BulkEmailEntry, the header from Template will be added to the outgoing email.
        ///
        /// * Headers Present in BulkEmailEntry: If a header is specified in BulkEmailEntry, it takes precedence over any header of the same name specified in [Template](https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_Template.html):
        ///
        /// * If the header is also defined within Template, the value from BulkEmailEntry will replace the header's value in the email.
        ///
        /// * If the header is not defined within Template, it will simply be added to the email as specified in BulkEmailEntry.
        public var replacementHeaders: [SESv2ClientTypes.MessageHeader]?
        /// A list of tags, in the form of name/value pairs, to apply to an email that you send using the SendBulkTemplatedEmail operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
        public var replacementTags: [SESv2ClientTypes.MessageTag]?

        public init(
            destination: SESv2ClientTypes.Destination? = nil,
            replacementEmailContent: SESv2ClientTypes.ReplacementEmailContent? = nil,
            replacementHeaders: [SESv2ClientTypes.MessageHeader]? = nil,
            replacementTags: [SESv2ClientTypes.MessageTag]? = nil
        )
        {
            self.destination = destination
            self.replacementEmailContent = replacementEmailContent
            self.replacementHeaders = replacementHeaders
            self.replacementTags = replacementTags
        }
    }

}

extension SESv2ClientTypes {

    public enum BulkEmailStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountDailyQuotaExceeded
        case accountSendingPaused
        case accountSuspended
        case accountThrottled
        case configurationSetNotFound
        case configurationSetSendingPaused
        case failed
        case invalidParameter
        case invalidSendingPoolName
        case mailFromDomainNotVerified
        case messageRejected
        case success
        case templateNotFound
        case transientFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [BulkEmailStatus] {
            return [
                .accountDailyQuotaExceeded,
                .accountSendingPaused,
                .accountSuspended,
                .accountThrottled,
                .configurationSetNotFound,
                .configurationSetSendingPaused,
                .failed,
                .invalidParameter,
                .invalidSendingPoolName,
                .mailFromDomainNotVerified,
                .messageRejected,
                .success,
                .templateNotFound,
                .transientFailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountDailyQuotaExceeded: return "ACCOUNT_DAILY_QUOTA_EXCEEDED"
            case .accountSendingPaused: return "ACCOUNT_SENDING_PAUSED"
            case .accountSuspended: return "ACCOUNT_SUSPENDED"
            case .accountThrottled: return "ACCOUNT_THROTTLED"
            case .configurationSetNotFound: return "CONFIGURATION_SET_NOT_FOUND"
            case .configurationSetSendingPaused: return "CONFIGURATION_SET_SENDING_PAUSED"
            case .failed: return "FAILED"
            case .invalidParameter: return "INVALID_PARAMETER"
            case .invalidSendingPoolName: return "INVALID_SENDING_POOL_NAME"
            case .mailFromDomainNotVerified: return "MAIL_FROM_DOMAIN_NOT_VERIFIED"
            case .messageRejected: return "MESSAGE_REJECTED"
            case .success: return "SUCCESS"
            case .templateNotFound: return "TEMPLATE_NOT_FOUND"
            case .transientFailure: return "TRANSIENT_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// The result of the SendBulkEmail operation of each specified BulkEmailEntry.
    public struct BulkEmailEntryResult {
        /// A description of an error that prevented a message being sent using the SendBulkTemplatedEmail operation.
        public var error: Swift.String?
        /// The unique message identifier returned from the SendBulkTemplatedEmail operation.
        public var messageId: Swift.String?
        /// The status of a message sent using the SendBulkTemplatedEmail operation. Possible values for this parameter include:
        ///
        /// * SUCCESS: Amazon SES accepted the message, and will attempt to deliver it to the recipients.
        ///
        /// * MESSAGE_REJECTED: The message was rejected because it contained a virus.
        ///
        /// * MAIL_FROM_DOMAIN_NOT_VERIFIED: The sender's email address or domain was not verified.
        ///
        /// * CONFIGURATION_SET_DOES_NOT_EXIST: The configuration set you specified does not exist.
        ///
        /// * TEMPLATE_DOES_NOT_EXIST: The template you specified does not exist.
        ///
        /// * ACCOUNT_SUSPENDED: Your account has been shut down because of issues related to your email sending practices.
        ///
        /// * ACCOUNT_THROTTLED: The number of emails you can send has been reduced because your account has exceeded its allocated sending limit.
        ///
        /// * ACCOUNT_DAILY_QUOTA_EXCEEDED: You have reached or exceeded the maximum number of emails you can send from your account in a 24-hour period.
        ///
        /// * INVALID_SENDING_POOL_NAME: The configuration set you specified refers to an IP pool that does not exist.
        ///
        /// * ACCOUNT_SENDING_PAUSED: Email sending for the Amazon SES account was disabled using the [UpdateAccountSendingEnabled](https://docs.aws.amazon.com/ses/latest/APIReference/API_UpdateAccountSendingEnabled.html) operation.
        ///
        /// * CONFIGURATION_SET_SENDING_PAUSED: Email sending for this configuration set was disabled using the [UpdateConfigurationSetSendingEnabled](https://docs.aws.amazon.com/ses/latest/APIReference/API_UpdateConfigurationSetSendingEnabled.html) operation.
        ///
        /// * INVALID_PARAMETER_VALUE: One or more of the parameters you specified when calling this operation was invalid. See the error message for additional information.
        ///
        /// * TRANSIENT_FAILURE: Amazon SES was unable to process your request because of a temporary issue.
        ///
        /// * FAILED: Amazon SES was unable to process your request. See the error message for additional information.
        public var status: SESv2ClientTypes.BulkEmailStatus?

        public init(
            error: Swift.String? = nil,
            messageId: Swift.String? = nil,
            status: SESv2ClientTypes.BulkEmailStatus? = nil
        )
        {
            self.error = error
            self.messageId = messageId
            self.status = status
        }
    }

}

/// Represents a request to cancel an export job using the export job ID.
public struct CancelExportJobInput {
    /// The export job ID.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CancelExportJobOutput {

    public init() { }
}

extension SESv2ClientTypes {

    /// The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail or SendRawEmail API, choose messageTag. To use your own email headers, choose emailHeader. To use link tags, choose linkTags.
    public enum DimensionValueSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case emailHeader
        case linkTag
        case messageTag
        case sdkUnknown(Swift.String)

        public static var allCases: [DimensionValueSource] {
            return [
                .emailHeader,
                .linkTag,
                .messageTag
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .emailHeader: return "EMAIL_HEADER"
            case .linkTag: return "LINK_TAG"
            case .messageTag: return "MESSAGE_TAG"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object that defines the dimension configuration to use when you send email events to Amazon CloudWatch.
    public struct CloudWatchDimensionConfiguration {
        /// The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email. This value has to meet the following criteria:
        ///
        /// * Can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-), at signs (@), and periods (.).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var defaultDimensionValue: Swift.String?
        /// The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var dimensionName: Swift.String?
        /// The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail or SendRawEmail API, choose messageTag. To use your own email headers, choose emailHeader. To use link tags, choose linkTags.
        /// This member is required.
        public var dimensionValueSource: SESv2ClientTypes.DimensionValueSource?

        public init(
            defaultDimensionValue: Swift.String? = nil,
            dimensionName: Swift.String? = nil,
            dimensionValueSource: SESv2ClientTypes.DimensionValueSource? = nil
        )
        {
            self.defaultDimensionValue = defaultDimensionValue
            self.dimensionName = dimensionName
            self.dimensionValueSource = dimensionValueSource
        }
    }

}

extension SESv2ClientTypes {
    /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
    public struct CloudWatchDestination {
        /// An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch.
        /// This member is required.
        public var dimensionConfigurations: [SESv2ClientTypes.CloudWatchDimensionConfiguration]?

        public init(
            dimensionConfigurations: [SESv2ClientTypes.CloudWatchDimensionConfiguration]? = nil
        )
        {
            self.dimensionConfigurations = dimensionConfigurations
        }
    }

}

extension SESv2ClientTypes {
    /// Information about a Complaint event.
    public struct Complaint {
        /// The value of the Feedback-Type field from the feedback report received from the ISP.
        public var complaintFeedbackType: Swift.String?
        /// Can either be null or OnAccountSuppressionList. If the value is OnAccountSuppressionList, SES accepted the message, but didn't attempt to send it because it was on the account-level suppression list.
        public var complaintSubType: Swift.String?

        public init(
            complaintFeedbackType: Swift.String? = nil,
            complaintSubType: Swift.String? = nil
        )
        {
            self.complaintFeedbackType = complaintFeedbackType
            self.complaintSubType = complaintSubType
        }
    }

}

/// The resource is being modified by another operation or thread.
public struct ConcurrentModificationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentModificationException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// If there is already an ongoing account details update under review.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SESv2ClientTypes {

    public enum SubscriptionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case optIn
        case optOut
        case sdkUnknown(Swift.String)

        public static var allCases: [SubscriptionStatus] {
            return [
                .optIn,
                .optOut
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .optIn: return "OPT_IN"
            case .optOut: return "OPT_OUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// The contact's preference for being opted-in to or opted-out of a topic.
    public struct TopicPreference {
        /// The contact's subscription status to a topic which is either OPT_IN or OPT_OUT.
        /// This member is required.
        public var subscriptionStatus: SESv2ClientTypes.SubscriptionStatus?
        /// The name of the topic.
        /// This member is required.
        public var topicName: Swift.String?

        public init(
            subscriptionStatus: SESv2ClientTypes.SubscriptionStatus? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.subscriptionStatus = subscriptionStatus
            self.topicName = topicName
        }
    }

}

extension SESv2ClientTypes {
    /// A contact is the end-user who is receiving the email.
    public struct Contact {
        /// The contact's email address.
        public var emailAddress: Swift.String?
        /// A timestamp noting the last time the contact's information was updated.
        public var lastUpdatedTimestamp: Foundation.Date?
        /// The default topic preferences applied to the contact.
        public var topicDefaultPreferences: [SESv2ClientTypes.TopicPreference]?
        /// The contact's preference for being opted-in to or opted-out of a topic.
        public var topicPreferences: [SESv2ClientTypes.TopicPreference]?
        /// A boolean value status noting if the contact is unsubscribed from all contact list topics.
        public var unsubscribeAll: Swift.Bool

        public init(
            emailAddress: Swift.String? = nil,
            lastUpdatedTimestamp: Foundation.Date? = nil,
            topicDefaultPreferences: [SESv2ClientTypes.TopicPreference]? = nil,
            topicPreferences: [SESv2ClientTypes.TopicPreference]? = nil,
            unsubscribeAll: Swift.Bool = false
        )
        {
            self.emailAddress = emailAddress
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.topicDefaultPreferences = topicDefaultPreferences
            self.topicPreferences = topicPreferences
            self.unsubscribeAll = unsubscribeAll
        }
    }

}

extension SESv2ClientTypes {
    /// A list that contains contacts that have subscribed to a particular topic or topics.
    public struct ContactList {
        /// The name of the contact list.
        public var contactListName: Swift.String?
        /// A timestamp noting the last time the contact list was updated.
        public var lastUpdatedTimestamp: Foundation.Date?

        public init(
            contactListName: Swift.String? = nil,
            lastUpdatedTimestamp: Foundation.Date? = nil
        )
        {
            self.contactListName = contactListName
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
        }
    }

}

extension SESv2ClientTypes {

    public enum ContactListImportAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case delete
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactListImportAction] {
            return [
                .delete,
                .put
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object that contains details about the action of a contact list.
    public struct ContactListDestination {
        /// >The type of action to perform on the addresses. The following are the possible values:
        ///
        /// * PUT: add the addresses to the contact list. If the record already exists, it will override it with the new value.
        ///
        /// * DELETE: remove the addresses from the contact list.
        /// This member is required.
        public var contactListImportAction: SESv2ClientTypes.ContactListImportAction?
        /// The name of the contact list.
        /// This member is required.
        public var contactListName: Swift.String?

        public init(
            contactListImportAction: SESv2ClientTypes.ContactListImportAction? = nil,
            contactListName: Swift.String? = nil
        )
        {
            self.contactListImportAction = contactListImportAction
            self.contactListName = contactListName
        }
    }

}

/// There are too many instances of the specified resource type.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SESv2ClientTypes {

    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
    public enum TlsPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `optional`
        case require
        case sdkUnknown(Swift.String)

        public static var allCases: [TlsPolicy] {
            return [
                .optional,
                .require
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .optional: return "OPTIONAL"
            case .require: return "REQUIRE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// Used to associate a configuration set with a dedicated IP pool.
    public struct DeliveryOptions {
        /// The name of the dedicated IP pool to associate with the configuration set.
        public var sendingPoolName: Swift.String?
        /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
        public var tlsPolicy: SESv2ClientTypes.TlsPolicy?

        public init(
            sendingPoolName: Swift.String? = nil,
            tlsPolicy: SESv2ClientTypes.TlsPolicy? = nil
        )
        {
            self.sendingPoolName = sendingPoolName
            self.tlsPolicy = tlsPolicy
        }
    }

}

extension SESv2ClientTypes {
    /// Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current Amazon Web Services Region.
    public struct ReputationOptions {
        /// The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.
        public var lastFreshStart: Foundation.Date?
        /// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
        public var reputationMetricsEnabled: Swift.Bool

        public init(
            lastFreshStart: Foundation.Date? = nil,
            reputationMetricsEnabled: Swift.Bool = false
        )
        {
            self.lastFreshStart = lastFreshStart
            self.reputationMetricsEnabled = reputationMetricsEnabled
        }
    }

}

extension SESv2ClientTypes {
    /// Used to enable or disable email sending for messages that use this configuration set in the current Amazon Web Services Region.
    public struct SendingOptions {
        /// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
        public var sendingEnabled: Swift.Bool

        public init(
            sendingEnabled: Swift.Bool = false
        )
        {
            self.sendingEnabled = sendingEnabled
        }
    }

}

extension SESv2ClientTypes {

    /// The reason that the address was added to the suppression list for your account. The value can be one of the following:
    ///
    /// * COMPLAINT – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a complaint.
    ///
    /// * BOUNCE – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a hard bounce.
    public enum SuppressionListReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bounce
        case complaint
        case sdkUnknown(Swift.String)

        public static var allCases: [SuppressionListReason] {
            return [
                .bounce,
                .complaint
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "BOUNCE"
            case .complaint: return "COMPLAINT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about the suppression list preferences for your account.
    public struct SuppressionOptions {
        /// A list that contains the reasons that email addresses are automatically added to the suppression list for your account. This list can contain any or all of the following:
        ///
        /// * COMPLAINT – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a complaint.
        ///
        /// * BOUNCE – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a hard bounce.
        public var suppressedReasons: [SESv2ClientTypes.SuppressionListReason]?

        public init(
            suppressedReasons: [SESv2ClientTypes.SuppressionListReason]? = nil
        )
        {
            self.suppressedReasons = suppressedReasons
        }
    }

}

extension SESv2ClientTypes {
    /// An object that defines the tags that are associated with a resource. A tag is a label that you optionally define and associate with a resource. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria. A resource can have as many as 50 tags. Each tag consists of a required tag key and an associated tag value, both of which you define. A tag key is a general label that acts as a category for a more specific tag value. A tag value acts as a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag value can contain as many as 256 characters. The characters can be Unicode letters, digits, white space, or one of the following symbols: _ . : / = + -. The following additional restrictions apply to tags:
    ///
    /// * Tag keys and values are case sensitive.
    ///
    /// * For each associated resource, each tag key must be unique and it can have only one value.
    ///
    /// * The aws: prefix is reserved for use by Amazon Web Services; you can’t use it in any tag keys or values that you define. In addition, you can't edit or remove tag keys or values that use this prefix. Tags that use this prefix don’t count against the limit of 50 tags per resource.
    ///
    /// * You can associate tags with public or shared resources, but the tags are available only for your Amazon Web Services account, not any other accounts that share the resource. In addition, the tags are available only for resources that are located in the specified Amazon Web Services Region for your Amazon Web Services account.
    public struct Tag {
        /// One part of a key-value pair that defines a tag. The maximum length of a tag key is 128 characters. The minimum length is 1 character.
        /// This member is required.
        public var key: Swift.String?
        /// The optional part of a key-value pair that defines a tag. The maximum length of a tag value is 256 characters. The minimum length is 0 characters. If you don't want a resource to have a specific tag value, don't specify a value for this parameter. If you don't specify a value, Amazon SES sets the value to an empty string.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension SESv2ClientTypes {
    /// An object that defines the tracking options for a configuration set. When you use the Amazon SES API v2 to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them. These images and links include references to a domain operated by Amazon Web Services. You can optionally configure the Amazon SES to use a domain that you operate for these images and links.
    public struct TrackingOptions {
        /// The domain to use for tracking open and click events.
        /// This member is required.
        public var customRedirectDomain: Swift.String?

        public init(
            customRedirectDomain: Swift.String? = nil
        )
        {
            self.customRedirectDomain = customRedirectDomain
        }
    }

}

extension SESv2ClientTypes {

    public enum FeatureStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object containing additional settings for your VDM configuration as applicable to the Dashboard.
    public struct DashboardOptions {
        /// Specifies the status of your VDM engagement metrics collection. Can be one of the following:
        ///
        /// * ENABLED – Amazon SES enables engagement metrics for the configuration set.
        ///
        /// * DISABLED – Amazon SES disables engagement metrics for the configuration set.
        public var engagementMetrics: SESv2ClientTypes.FeatureStatus?

        public init(
            engagementMetrics: SESv2ClientTypes.FeatureStatus? = nil
        )
        {
            self.engagementMetrics = engagementMetrics
        }
    }

}

extension SESv2ClientTypes {
    /// An object containing additional settings for your VDM configuration as applicable to the Guardian.
    public struct GuardianOptions {
        /// Specifies the status of your VDM optimized shared delivery. Can be one of the following:
        ///
        /// * ENABLED – Amazon SES enables optimized shared delivery for the configuration set.
        ///
        /// * DISABLED – Amazon SES disables optimized shared delivery for the configuration set.
        public var optimizedSharedDelivery: SESv2ClientTypes.FeatureStatus?

        public init(
            optimizedSharedDelivery: SESv2ClientTypes.FeatureStatus? = nil
        )
        {
            self.optimizedSharedDelivery = optimizedSharedDelivery
        }
    }

}

extension SESv2ClientTypes {
    /// An object that defines the VDM settings that apply to emails that you send using the configuration set.
    public struct VdmOptions {
        /// Specifies additional settings for your VDM configuration as applicable to the Dashboard.
        public var dashboardOptions: SESv2ClientTypes.DashboardOptions?
        /// Specifies additional settings for your VDM configuration as applicable to the Guardian.
        public var guardianOptions: SESv2ClientTypes.GuardianOptions?

        public init(
            dashboardOptions: SESv2ClientTypes.DashboardOptions? = nil,
            guardianOptions: SESv2ClientTypes.GuardianOptions? = nil
        )
        {
            self.dashboardOptions = dashboardOptions
            self.guardianOptions = guardianOptions
        }
    }

}

/// A request to create a configuration set.
public struct CreateConfigurationSetInput {
    /// The name of the configuration set. The name can contain up to 64 alphanumeric characters, including letters, numbers, hyphens (-) and underscores (_) only.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
    public var deliveryOptions: SESv2ClientTypes.DeliveryOptions?
    /// An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set.
    public var reputationOptions: SESv2ClientTypes.ReputationOptions?
    /// An object that defines whether or not Amazon SES can send email that you send using the configuration set.
    public var sendingOptions: SESv2ClientTypes.SendingOptions?
    /// An object that contains information about the suppression list preferences for your account.
    public var suppressionOptions: SESv2ClientTypes.SuppressionOptions?
    /// An array of objects that define the tags (keys and values) to associate with the configuration set.
    public var tags: [SESv2ClientTypes.Tag]?
    /// An object that defines the open and click tracking options for emails that you send using the configuration set.
    public var trackingOptions: SESv2ClientTypes.TrackingOptions?
    /// An object that defines the VDM options for emails that you send using the configuration set.
    public var vdmOptions: SESv2ClientTypes.VdmOptions?

    public init(
        configurationSetName: Swift.String? = nil,
        deliveryOptions: SESv2ClientTypes.DeliveryOptions? = nil,
        reputationOptions: SESv2ClientTypes.ReputationOptions? = nil,
        sendingOptions: SESv2ClientTypes.SendingOptions? = nil,
        suppressionOptions: SESv2ClientTypes.SuppressionOptions? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil,
        trackingOptions: SESv2ClientTypes.TrackingOptions? = nil,
        vdmOptions: SESv2ClientTypes.VdmOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.deliveryOptions = deliveryOptions
        self.reputationOptions = reputationOptions
        self.sendingOptions = sendingOptions
        self.suppressionOptions = suppressionOptions
        self.tags = tags
        self.trackingOptions = trackingOptions
        self.vdmOptions = vdmOptions
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateConfigurationSetOutput {

    public init() { }
}

extension SESv2ClientTypes {
    /// An object that defines an Amazon EventBridge destination for email events. You can use Amazon EventBridge to send notifications when certain email events occur.
    public struct EventBridgeDestination {
        /// The Amazon Resource Name (ARN) of the Amazon EventBridge bus to publish email events to. Only the default bus is supported.
        /// This member is required.
        public var eventBusArn: Swift.String?

        public init(
            eventBusArn: Swift.String? = nil
        )
        {
            self.eventBusArn = eventBusArn
        }
    }

}

extension SESv2ClientTypes {
    /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
    public struct KinesisFirehoseDestination {
        /// The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that the Amazon SES API v2 sends email events to.
        /// This member is required.
        public var deliveryStreamArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that the Amazon SES API v2 uses to send email events to the Amazon Kinesis Data Firehose stream.
        /// This member is required.
        public var iamRoleArn: Swift.String?

        public init(
            deliveryStreamArn: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil
        )
        {
            self.deliveryStreamArn = deliveryStreamArn
            self.iamRoleArn = iamRoleArn
        }
    }

}

extension SESv2ClientTypes {

    /// An email sending event type. For example, email sends, opens, and bounces are all email events.
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bounce
        case click
        case complaint
        case delivery
        case deliveryDelay
        case `open`
        case reject
        case renderingFailure
        case send
        case subscription
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .bounce,
                .click,
                .complaint,
                .delivery,
                .deliveryDelay,
                .open,
                .reject,
                .renderingFailure,
                .send,
                .subscription
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "BOUNCE"
            case .click: return "CLICK"
            case .complaint: return "COMPLAINT"
            case .delivery: return "DELIVERY"
            case .deliveryDelay: return "DELIVERY_DELAY"
            case .open: return "OPEN"
            case .reject: return "REJECT"
            case .renderingFailure: return "RENDERING_FAILURE"
            case .send: return "SEND"
            case .subscription: return "SUBSCRIPTION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object that defines an Amazon Pinpoint project destination for email events. You can send email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging dashboards that are built in to Amazon Pinpoint. For more information, see [Transactional Messaging Charts](https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html) in the Amazon Pinpoint User Guide.
    public struct PinpointDestination {
        /// The Amazon Resource Name (ARN) of the Amazon Pinpoint project to send email events to.
        public var applicationArn: Swift.String?

        public init(
            applicationArn: Swift.String? = nil
        )
        {
            self.applicationArn = applicationArn
        }
    }

}

extension SESv2ClientTypes {
    /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notifications when certain email events occur.
    public struct SnsDestination {
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to publish email events to. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        /// This member is required.
        public var topicArn: Swift.String?

        public init(
            topicArn: Swift.String? = nil
        )
        {
            self.topicArn = topicArn
        }
    }

}

extension SESv2ClientTypes {
    /// An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
    public struct EventDestinationDefinition {
        /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
        public var cloudWatchDestination: SESv2ClientTypes.CloudWatchDestination?
        /// If true, the event destination is enabled. When the event destination is enabled, the specified event types are sent to the destinations in this EventDestinationDefinition. If false, the event destination is disabled. When the event destination is disabled, events aren't sent to the specified destinations.
        public var enabled: Swift.Bool
        /// An object that defines an Amazon EventBridge destination for email events. You can use Amazon EventBridge to send notifications when certain email events occur.
        public var eventBridgeDestination: SESv2ClientTypes.EventBridgeDestination?
        /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
        public var kinesisFirehoseDestination: SESv2ClientTypes.KinesisFirehoseDestination?
        /// An array that specifies which events the Amazon SES API v2 should send to the destinations in this EventDestinationDefinition.
        public var matchingEventTypes: [SESv2ClientTypes.EventType]?
        /// An object that defines an Amazon Pinpoint project destination for email events. You can send email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging dashboards that are built in to Amazon Pinpoint. For more information, see [Transactional Messaging Charts](https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html) in the Amazon Pinpoint User Guide.
        public var pinpointDestination: SESv2ClientTypes.PinpointDestination?
        /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notifications when certain email events occur.
        public var snsDestination: SESv2ClientTypes.SnsDestination?

        public init(
            cloudWatchDestination: SESv2ClientTypes.CloudWatchDestination? = nil,
            enabled: Swift.Bool = false,
            eventBridgeDestination: SESv2ClientTypes.EventBridgeDestination? = nil,
            kinesisFirehoseDestination: SESv2ClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [SESv2ClientTypes.EventType]? = nil,
            pinpointDestination: SESv2ClientTypes.PinpointDestination? = nil,
            snsDestination: SESv2ClientTypes.SnsDestination? = nil
        )
        {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.eventBridgeDestination = eventBridgeDestination
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.pinpointDestination = pinpointDestination
            self.snsDestination = snsDestination
        }
    }

}

/// A request to add an event destination to a configuration set.
public struct CreateConfigurationSetEventDestinationInput {
    /// The name of the configuration set .
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines the event destination.
    /// This member is required.
    public var eventDestination: SESv2ClientTypes.EventDestinationDefinition?
    /// A name that identifies the event destination within the configuration set.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestination: SESv2ClientTypes.EventDestinationDefinition? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
        self.eventDestinationName = eventDestinationName
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateConfigurationSetEventDestinationOutput {

    public init() { }
}

public struct CreateContactInput {
    /// The attribute data attached to a contact.
    public var attributesData: Swift.String?
    /// The name of the contact list to which the contact should be added.
    /// This member is required.
    public var contactListName: Swift.String?
    /// The contact's email address.
    /// This member is required.
    public var emailAddress: Swift.String?
    /// The contact's preferences for being opted-in to or opted-out of topics.
    public var topicPreferences: [SESv2ClientTypes.TopicPreference]?
    /// A boolean value status noting if the contact is unsubscribed from all contact list topics.
    public var unsubscribeAll: Swift.Bool?

    public init(
        attributesData: Swift.String? = nil,
        contactListName: Swift.String? = nil,
        emailAddress: Swift.String? = nil,
        topicPreferences: [SESv2ClientTypes.TopicPreference]? = nil,
        unsubscribeAll: Swift.Bool? = false
    )
    {
        self.attributesData = attributesData
        self.contactListName = contactListName
        self.emailAddress = emailAddress
        self.topicPreferences = topicPreferences
        self.unsubscribeAll = unsubscribeAll
    }
}

public struct CreateContactOutput {

    public init() { }
}

extension SESv2ClientTypes {
    /// An interest group, theme, or label within a list. Lists can have multiple topics.
    public struct Topic {
        /// The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.
        /// This member is required.
        public var defaultSubscriptionStatus: SESv2ClientTypes.SubscriptionStatus?
        /// A description of what the topic is about, which the contact will see.
        public var description: Swift.String?
        /// The name of the topic the contact will see.
        /// This member is required.
        public var displayName: Swift.String?
        /// The name of the topic.
        /// This member is required.
        public var topicName: Swift.String?

        public init(
            defaultSubscriptionStatus: SESv2ClientTypes.SubscriptionStatus? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.defaultSubscriptionStatus = defaultSubscriptionStatus
            self.description = description
            self.displayName = displayName
            self.topicName = topicName
        }
    }

}

public struct CreateContactListInput {
    /// The name of the contact list.
    /// This member is required.
    public var contactListName: Swift.String?
    /// A description of what the contact list is about.
    public var description: Swift.String?
    /// The tags associated with a contact list.
    public var tags: [SESv2ClientTypes.Tag]?
    /// An interest group, theme, or label within a list. A contact list can have multiple topics.
    public var topics: [SESv2ClientTypes.Topic]?

    public init(
        contactListName: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil,
        topics: [SESv2ClientTypes.Topic]? = nil
    )
    {
        self.contactListName = contactListName
        self.description = description
        self.tags = tags
        self.topics = topics
    }
}

public struct CreateContactListOutput {

    public init() { }
}

/// Represents a request to create a custom verification email template.
public struct CreateCustomVerificationEmailTemplateInput {
    /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    /// This member is required.
    public var failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    /// This member is required.
    public var fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    /// This member is required.
    public var successRedirectionURL: Swift.String?
    /// The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see [Custom verification email frequently asked questions](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom-faq) in the Amazon SES Developer Guide.
    /// This member is required.
    public var templateContent: Swift.String?
    /// The name of the custom verification email template.
    /// This member is required.
    public var templateName: Swift.String?
    /// The subject line of the custom verification email.
    /// This member is required.
    public var templateSubject: Swift.String?

    public init(
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct CreateCustomVerificationEmailTemplateOutput {

    public init() { }
}

extension SESv2ClientTypes {

    public enum ScalingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case managed
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingMode] {
            return [
                .managed,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .managed: return "MANAGED"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// A request to create a new dedicated IP pool.
public struct CreateDedicatedIpPoolInput {
    /// The name of the dedicated IP pool.
    /// This member is required.
    public var poolName: Swift.String?
    /// The type of scaling mode.
    public var scalingMode: SESv2ClientTypes.ScalingMode?
    /// An object that defines the tags (keys and values) that you want to associate with the pool.
    public var tags: [SESv2ClientTypes.Tag]?

    public init(
        poolName: Swift.String? = nil,
        scalingMode: SESv2ClientTypes.ScalingMode? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil
    )
    {
        self.poolName = poolName
        self.scalingMode = scalingMode
        self.tags = tags
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateDedicatedIpPoolOutput {

    public init() { }
}

/// The message can't be sent because the sending domain isn't verified.
public struct MailFromDomainNotVerifiedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MailFromDomainNotVerifiedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The message can't be sent because it contains invalid content.
public struct MessageRejected: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MessageRejected" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The message can't be sent because the account's ability to send email is currently paused.
public struct SendingPausedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SendingPausedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SESv2ClientTypes {
    /// Represents the raw content of an email message.
    public struct RawMessage {
        /// The raw email message. The message has to meet the following criteria:
        ///
        /// * The message has to contain a header and a body, separated by one blank line.
        ///
        /// * All of the required header fields must be present in the message.
        ///
        /// * Each part of a multipart MIME message must be formatted properly.
        ///
        /// * Attachments must be in a file format that the Amazon SES supports.
        ///
        /// * The raw data of the message needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an Amazon Web Services SDK, the SDK takes care of the base 64-encoding for you.
        ///
        /// * If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients' email clients render the message properly.
        ///
        /// * The length of any single line of text in the message can't exceed 1,000 characters. This restriction is defined in [RFC 5321](https://tools.ietf.org/html/rfc5321).
        /// This member is required.
        public var data: Foundation.Data?

        public init(
            data: Foundation.Data? = nil
        )
        {
            self.data = data
        }
    }

}

extension SESv2ClientTypes {
    /// Represents the email message that you're sending. The Message object consists of a subject line and a message body.
    public struct Message {
        /// The body of the message. You can specify an HTML version of the message, a text-only version of the message, or both.
        /// This member is required.
        public var body: SESv2ClientTypes.Body?
        /// The list of message headers that will be added to the email message.
        public var headers: [SESv2ClientTypes.MessageHeader]?
        /// The subject line of the email. The subject line can only contain 7-bit ASCII characters. However, you can specify non-ASCII characters in the subject line by using encoded-word syntax, as described in [RFC 2047](https://tools.ietf.org/html/rfc2047).
        /// This member is required.
        public var subject: SESv2ClientTypes.Content?

        public init(
            body: SESv2ClientTypes.Body? = nil,
            headers: [SESv2ClientTypes.MessageHeader]? = nil,
            subject: SESv2ClientTypes.Content? = nil
        )
        {
            self.body = body
            self.headers = headers
            self.subject = subject
        }
    }

}

extension SESv2ClientTypes {
    /// An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
    public struct EmailContent {
        /// The raw email message. The message has to meet the following criteria:
        ///
        /// * The message has to contain a header and a body, separated by one blank line.
        ///
        /// * All of the required header fields must be present in the message.
        ///
        /// * Each part of a multipart MIME message must be formatted properly.
        ///
        /// * If you include attachments, they must be in a file format that the Amazon SES API v2 supports.
        ///
        /// * The raw data of the message needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an Amazon Web Services SDK, the SDK takes care of the base 64-encoding for you.
        ///
        /// * If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients' email clients render the message properly.
        ///
        /// * The length of any single line of text in the message can't exceed 1,000 characters. This restriction is defined in [RFC 5321](https://tools.ietf.org/html/rfc5321).
        public var raw: SESv2ClientTypes.RawMessage?
        /// The simple email message. The message consists of a subject and a message body.
        public var simple: SESv2ClientTypes.Message?
        /// The template to use for the email message.
        public var template: SESv2ClientTypes.Template?

        public init(
            raw: SESv2ClientTypes.RawMessage? = nil,
            simple: SESv2ClientTypes.Message? = nil,
            template: SESv2ClientTypes.Template? = nil
        )
        {
            self.raw = raw
            self.simple = simple
            self.template = template
        }
    }

}

/// A request to perform a predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled by various email providers around the world. When you perform a predictive inbox placement test, you provide a sample message that contains the content that you plan to send to your customers. We send that message to special email addresses spread across several major email providers around the world. The test takes about 24 hours to complete. When the test is complete, you can use the GetDeliverabilityTestReport operation to view the results of the test.
public struct CreateDeliverabilityTestReportInput {
    /// The HTML body of the message that you sent when you performed the predictive inbox placement test.
    /// This member is required.
    public var content: SESv2ClientTypes.EmailContent?
    /// The email address that the predictive inbox placement test email was sent from.
    /// This member is required.
    public var fromEmailAddress: Swift.String?
    /// A unique name that helps you to identify the predictive inbox placement test when you retrieve the results.
    public var reportName: Swift.String?
    /// An array of objects that define the tags (keys and values) that you want to associate with the predictive inbox placement test.
    public var tags: [SESv2ClientTypes.Tag]?

    public init(
        content: SESv2ClientTypes.EmailContent? = nil,
        fromEmailAddress: Swift.String? = nil,
        reportName: Swift.String? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil
    )
    {
        self.content = content
        self.fromEmailAddress = fromEmailAddress
        self.reportName = reportName
        self.tags = tags
    }
}

extension SESv2ClientTypes {

    /// The status of a predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport operation to view the results of the test.
    public enum DeliverabilityTestStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliverabilityTestStatus] {
            return [
                .completed,
                .inProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Information about the predictive inbox placement test that you created.
public struct CreateDeliverabilityTestReportOutput {
    /// The status of the predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport to view the results of the test.
    /// This member is required.
    public var deliverabilityTestStatus: SESv2ClientTypes.DeliverabilityTestStatus?
    /// A unique string that identifies the predictive inbox placement test.
    /// This member is required.
    public var reportId: Swift.String?

    public init(
        deliverabilityTestStatus: SESv2ClientTypes.DeliverabilityTestStatus? = nil,
        reportId: Swift.String? = nil
    )
    {
        self.deliverabilityTestStatus = deliverabilityTestStatus
        self.reportId = reportId
    }
}

extension SESv2ClientTypes {

    public enum DkimSigningKeyLength: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rsa1024Bit
        case rsa2048Bit
        case sdkUnknown(Swift.String)

        public static var allCases: [DkimSigningKeyLength] {
            return [
                .rsa1024Bit,
                .rsa2048Bit
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rsa1024Bit: return "RSA_1024_BIT"
            case .rsa2048Bit: return "RSA_2048_BIT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object that contains configuration for Bring Your Own DKIM (BYODKIM), or, for Easy DKIM
    public struct DkimSigningAttributes {
        /// [Bring Your Own DKIM] A private key that's used to generate a DKIM signature. The private key must use 1024 or 2048-bit RSA encryption, and must be encoded using base64 encoding.
        public var domainSigningPrivateKey: Swift.String?
        /// [Bring Your Own DKIM] A string that's used to identify a public key in the DNS configuration for a domain.
        public var domainSigningSelector: Swift.String?
        /// [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.
        public var nextSigningKeyLength: SESv2ClientTypes.DkimSigningKeyLength?

        public init(
            domainSigningPrivateKey: Swift.String? = nil,
            domainSigningSelector: Swift.String? = nil,
            nextSigningKeyLength: SESv2ClientTypes.DkimSigningKeyLength? = nil
        )
        {
            self.domainSigningPrivateKey = domainSigningPrivateKey
            self.domainSigningSelector = domainSigningSelector
            self.nextSigningKeyLength = nextSigningKeyLength
        }
    }

}

extension SESv2ClientTypes.DkimSigningAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DkimSigningAttributes(domainSigningSelector: \(Swift.String(describing: domainSigningSelector)), nextSigningKeyLength: \(Swift.String(describing: nextSigningKeyLength)), domainSigningPrivateKey: \"CONTENT_REDACTED\")"}
}

/// A request to begin the verification process for an email identity (an email address or domain).
public struct CreateEmailIdentityInput {
    /// The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
    public var configurationSetName: Swift.String?
    /// If your request includes this object, Amazon SES configures the identity to use Bring Your Own DKIM (BYODKIM) for DKIM authentication purposes, or, configures the key length to be used for [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html). You can only specify this object if the email identity is a domain, as opposed to an address.
    public var dkimSigningAttributes: SESv2ClientTypes.DkimSigningAttributes?
    /// The email address or domain to verify.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// An array of objects that define the tags (keys and values) to associate with the email identity.
    public var tags: [SESv2ClientTypes.Tag]?

    public init(
        configurationSetName: Swift.String? = nil,
        dkimSigningAttributes: SESv2ClientTypes.DkimSigningAttributes? = nil,
        emailIdentity: Swift.String? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.dkimSigningAttributes = dkimSigningAttributes
        self.emailIdentity = emailIdentity
        self.tags = tags
    }
}

extension SESv2ClientTypes {

    public enum DkimSigningAttributesOrigin: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsSes
        case external
        case sdkUnknown(Swift.String)

        public static var allCases: [DkimSigningAttributesOrigin] {
            return [
                .awsSes,
                .external
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsSes: return "AWS_SES"
            case .external: return "EXTERNAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {

    /// The DKIM authentication status of the identity. The status can be one of the following:
    ///
    /// * PENDING – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.
    ///
    /// * SUCCESS – The verification process completed successfully.
    ///
    /// * FAILED – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.
    ///
    /// * TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.
    ///
    /// * NOT_STARTED – The DKIM verification process hasn't been initiated for the domain.
    public enum DkimStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case notStarted
        case pending
        case success
        case temporaryFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [DkimStatus] {
            return [
                .failed,
                .notStarted,
                .pending,
                .success,
                .temporaryFailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .notStarted: return "NOT_STARTED"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case .temporaryFailure: return "TEMPORARY_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about the DKIM authentication status for an email identity. Amazon SES determines the authentication status by searching for specific records in the DNS configuration for the domain. If you used [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html) to set up DKIM authentication, Amazon SES tries to find three unique CNAME records in the DNS configuration for your domain. If you provided a public key to perform DKIM authentication, Amazon SES tries to find a TXT record that uses the selector that you specified. The value of the TXT record must be a public key that's paired with the private key that you specified in the process of creating the identity
    public struct DkimAttributes {
        /// [Easy DKIM] The key length of the DKIM key pair in use.
        public var currentSigningKeyLength: SESv2ClientTypes.DkimSigningKeyLength?
        /// [Easy DKIM] The last time a key pair was generated for this identity.
        public var lastKeyGenerationTimestamp: Foundation.Date?
        /// [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.
        public var nextSigningKeyLength: SESv2ClientTypes.DkimSigningKeyLength?
        /// A string that indicates how DKIM was configured for the identity. These are the possible values:
        ///
        /// * AWS_SES – Indicates that DKIM was configured for the identity by using [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html).
        ///
        /// * EXTERNAL – Indicates that DKIM was configured for the identity by using Bring Your Own DKIM (BYODKIM).
        public var signingAttributesOrigin: SESv2ClientTypes.DkimSigningAttributesOrigin?
        /// If the value is true, then the messages that you send from the identity are signed using DKIM. If the value is false, then the messages that you send from the identity aren't DKIM-signed.
        public var signingEnabled: Swift.Bool
        /// Describes whether or not Amazon SES has successfully located the DKIM records in the DNS records for the domain. The status can be one of the following:
        ///
        /// * PENDING – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.
        ///
        /// * SUCCESS – The verification process completed successfully.
        ///
        /// * FAILED – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.
        ///
        /// * TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.
        ///
        /// * NOT_STARTED – The DKIM verification process hasn't been initiated for the domain.
        public var status: SESv2ClientTypes.DkimStatus?
        /// If you used [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html) to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete. If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector for the public key. Regardless of the DKIM authentication method you use, Amazon SES searches for the appropriate records in the DNS configuration of the domain for up to 72 hours.
        public var tokens: [Swift.String]?

        public init(
            currentSigningKeyLength: SESv2ClientTypes.DkimSigningKeyLength? = nil,
            lastKeyGenerationTimestamp: Foundation.Date? = nil,
            nextSigningKeyLength: SESv2ClientTypes.DkimSigningKeyLength? = nil,
            signingAttributesOrigin: SESv2ClientTypes.DkimSigningAttributesOrigin? = nil,
            signingEnabled: Swift.Bool = false,
            status: SESv2ClientTypes.DkimStatus? = nil,
            tokens: [Swift.String]? = nil
        )
        {
            self.currentSigningKeyLength = currentSigningKeyLength
            self.lastKeyGenerationTimestamp = lastKeyGenerationTimestamp
            self.nextSigningKeyLength = nextSigningKeyLength
            self.signingAttributesOrigin = signingAttributesOrigin
            self.signingEnabled = signingEnabled
            self.status = status
            self.tokens = tokens
        }
    }

}

extension SESv2ClientTypes {

    public enum IdentityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case domain
        case emailAddress
        case managedDomain
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityType] {
            return [
                .domain,
                .emailAddress,
                .managedDomain
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .domain: return "DOMAIN"
            case .emailAddress: return "EMAIL_ADDRESS"
            case .managedDomain: return "MANAGED_DOMAIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// If the email identity is a domain, this object contains information about the DKIM verification status for the domain. If the email identity is an email address, this object is empty.
public struct CreateEmailIdentityOutput {
    /// An object that contains information about the DKIM attributes for the identity.
    public var dkimAttributes: SESv2ClientTypes.DkimAttributes?
    /// The email identity type. Note: the MANAGED_DOMAIN identity type is not supported.
    public var identityType: SESv2ClientTypes.IdentityType?
    /// Specifies whether or not the identity is verified. You can only send email from verified email addresses or domains. For more information about verifying identities, see the [Amazon Pinpoint User Guide](https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html).
    public var verifiedForSendingStatus: Swift.Bool

    public init(
        dkimAttributes: SESv2ClientTypes.DkimAttributes? = nil,
        identityType: SESv2ClientTypes.IdentityType? = nil,
        verifiedForSendingStatus: Swift.Bool = false
    )
    {
        self.dkimAttributes = dkimAttributes
        self.identityType = identityType
        self.verifiedForSendingStatus = verifiedForSendingStatus
    }
}

/// Represents a request to create a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html).
public struct CreateEmailIdentityPolicyInput {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// The text of the policy in JSON format. The policy cannot exceed 4 KB. For information about the syntax of sending authorization policies, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html).
    /// This member is required.
    public var policy: Swift.String?
    /// The name of the policy. The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.
    /// This member is required.
    public var policyName: Swift.String?

    public init(
        emailIdentity: Swift.String? = nil,
        policy: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.policy = policy
        self.policyName = policyName
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateEmailIdentityPolicyOutput {

    public init() { }
}

extension SESv2ClientTypes {
    /// The content of the email, composed of a subject line, an HTML part, and a text-only part.
    public struct EmailTemplateContent {
        /// The HTML body of the email.
        public var html: Swift.String?
        /// The subject line of the email.
        public var subject: Swift.String?
        /// The email body that will be visible to recipients whose email clients do not display HTML.
        public var text: Swift.String?

        public init(
            html: Swift.String? = nil,
            subject: Swift.String? = nil,
            text: Swift.String? = nil
        )
        {
            self.html = html
            self.subject = subject
            self.text = text
        }
    }

}

/// Represents a request to create an email template. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct CreateEmailTemplateInput {
    /// The content of the email template, composed of a subject line, an HTML part, and a text-only part.
    /// This member is required.
    public var templateContent: SESv2ClientTypes.EmailTemplateContent?
    /// The name of the template.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        templateContent: SESv2ClientTypes.EmailTemplateContent? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateContent = templateContent
        self.templateName = templateName
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct CreateEmailTemplateOutput {

    public init() { }
}

extension SESv2ClientTypes {

    /// The type of delivery events:
    ///
    /// * SEND - The send request was successful and SES will attempt to deliver the message to the recipient’s mail server. (If account-level or global suppression is being used, SES will still count it as a send, but delivery is suppressed.)
    ///
    /// * DELIVERY - SES successfully delivered the email to the recipient's mail server. Excludes deliveries to the mailbox simulator and emails addressed to more than one recipient.
    ///
    /// * TRANSIENT_BOUNCE - Feedback received for delivery failures excluding issues with non-existent mailboxes. Excludes bounces from the mailbox simulator, and those from emails addressed to more than one recipient.
    ///
    /// * PERMANENT_BOUNCE - Feedback received for emails sent to non-existent mailboxes. Excludes bounces from the mailbox simulator, those originating from your account-level suppression list (if enabled), and those from emails addressed to more than one recipient.
    ///
    /// * UNDETERMINED_BOUNCE - SES was unable to determine the bounce reason.
    ///
    /// * COMPLAINT - Complaint received for the email. This excludes complaints from the mailbox simulator, those originating from your account-level suppression list (if enabled), and those from emails addressed to more than one recipient.
    public enum DeliveryEventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case complaint
        case delivery
        case permanentBounce
        case send
        case transientBounce
        case undeterminedBounce
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryEventType] {
            return [
                .complaint,
                .delivery,
                .permanentBounce,
                .send,
                .transientBounce,
                .undeterminedBounce
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .complaint: return "COMPLAINT"
            case .delivery: return "DELIVERY"
            case .permanentBounce: return "PERMANENT_BOUNCE"
            case .send: return "SEND"
            case .transientBounce: return "TRANSIENT_BOUNCE"
            case .undeterminedBounce: return "UNDETERMINED_BOUNCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {

    /// The type of delivery events:
    ///
    /// * OPEN - Open event for emails including open trackers. Excludes opens for emails addressed to more than one recipient.
    ///
    /// * CLICK - Click event for emails including wrapped links. Excludes clicks for emails addressed to more than one recipient.
    public enum EngagementEventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case click
        case `open`
        case sdkUnknown(Swift.String)

        public static var allCases: [EngagementEventType] {
            return [
                .click,
                .open
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .click: return "CLICK"
            case .open: return "OPEN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object containing Message Insights filters. If you specify multiple filters, the filters are joined by AND. If you specify multiple values for a filter, the values are joined by OR. Filter values are case-sensitive. FromEmailAddress, Destination, and Subject filters support partial match. A partial match is performed by using the * wildcard character placed at the beginning (suffix match), the end (prefix match) or both ends of the string (contains match). In order to match the literal characters * or \, they must be escaped using the \ character. If no wildcard character is present, an exact match is performed.
    public struct MessageInsightsFilters {
        /// The recipient's email address.
        public var destination: [Swift.String]?
        /// The from address used to send the message.
        public var fromEmailAddress: [Swift.String]?
        /// The recipient's ISP (e.g., Gmail, Yahoo, etc.).
        public var isp: [Swift.String]?
        /// The last delivery-related event for the email, where the ordering is as follows: SEND < BOUNCE < DELIVERY < COMPLAINT.
        public var lastDeliveryEvent: [SESv2ClientTypes.DeliveryEventType]?
        /// The last engagement-related event for the email, where the ordering is as follows: OPEN < CLICK. Engagement events are only available if [Engagement tracking](https://docs.aws.amazon.com/ses/latest/dg/vdm-settings.html) is enabled.
        public var lastEngagementEvent: [SESv2ClientTypes.EngagementEventType]?
        /// The subject line of the message.
        public var subject: [Swift.String]?

        public init(
            destination: [Swift.String]? = nil,
            fromEmailAddress: [Swift.String]? = nil,
            isp: [Swift.String]? = nil,
            lastDeliveryEvent: [SESv2ClientTypes.DeliveryEventType]? = nil,
            lastEngagementEvent: [SESv2ClientTypes.EngagementEventType]? = nil,
            subject: [Swift.String]? = nil
        )
        {
            self.destination = destination
            self.fromEmailAddress = fromEmailAddress
            self.isp = isp
            self.lastDeliveryEvent = lastDeliveryEvent
            self.lastEngagementEvent = lastEngagementEvent
            self.subject = subject
        }
    }

}

extension SESv2ClientTypes.MessageInsightsFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MessageInsightsFilters(isp: \(Swift.String(describing: isp)), lastDeliveryEvent: \(Swift.String(describing: lastDeliveryEvent)), lastEngagementEvent: \(Swift.String(describing: lastEngagementEvent)), destination: \"CONTENT_REDACTED\", fromEmailAddress: \"CONTENT_REDACTED\", subject: \"CONTENT_REDACTED\")"}
}

extension SESv2ClientTypes {
    /// An object that contains filters applied when performing the Message Insights export.
    public struct MessageInsightsDataSource {
        /// Represents the end date for the export interval as a timestamp. The end date is inclusive.
        /// This member is required.
        public var endDate: Foundation.Date?
        /// Filters for results to be excluded from the export file.
        public var exclude: SESv2ClientTypes.MessageInsightsFilters?
        /// Filters for results to be included in the export file.
        public var include: SESv2ClientTypes.MessageInsightsFilters?
        /// The maximum number of results.
        public var maxResults: Swift.Int?
        /// Represents the start date for the export interval as a timestamp. The start date is inclusive.
        /// This member is required.
        public var startDate: Foundation.Date?

        public init(
            endDate: Foundation.Date? = nil,
            exclude: SESv2ClientTypes.MessageInsightsFilters? = nil,
            include: SESv2ClientTypes.MessageInsightsFilters? = nil,
            maxResults: Swift.Int? = nil,
            startDate: Foundation.Date? = nil
        )
        {
            self.endDate = endDate
            self.exclude = exclude
            self.include = include
            self.maxResults = maxResults
            self.startDate = startDate
        }
    }

}

extension SESv2ClientTypes {

    /// The aggregation to apply to a metric, can be one of the following:
    ///
    /// * VOLUME - The volume of events for this metric.
    ///
    /// * RATE - The rate for this metric relative to the SEND metric volume.
    public enum MetricAggregation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rate
        case volume
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricAggregation] {
            return [
                .rate,
                .volume
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rate: return "RATE"
            case .volume: return "VOLUME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object that contains a mapping between a Metric and MetricAggregation.
    public struct ExportMetric {
        /// The aggregation to apply to a metric, can be one of the following:
        ///
        /// * VOLUME - The volume of events for this metric.
        ///
        /// * RATE - The rate for this metric relative to the SEND metric volume.
        public var aggregation: SESv2ClientTypes.MetricAggregation?
        /// The metric to export, can be one of the following:
        ///
        /// * SEND - Emails sent eligible for tracking in the VDM dashboard. This excludes emails sent to the mailbox simulator and emails addressed to more than one recipient.
        ///
        /// * COMPLAINT - Complaints received for your account. This excludes complaints from the mailbox simulator, those originating from your account-level suppression list (if enabled), and those for emails addressed to more than one recipient
        ///
        /// * PERMANENT_BOUNCE - Permanent bounces - i.e., feedback received for emails sent to non-existent mailboxes. Excludes bounces from the mailbox simulator, those originating from your account-level suppression list (if enabled), and those for emails addressed to more than one recipient.
        ///
        /// * TRANSIENT_BOUNCE - Transient bounces - i.e., feedback received for delivery failures excluding issues with non-existent mailboxes. Excludes bounces from the mailbox simulator, and those for emails addressed to more than one recipient.
        ///
        /// * OPEN - Unique open events for emails including open trackers. Excludes opens for emails addressed to more than one recipient.
        ///
        /// * CLICK - Unique click events for emails including wrapped links. Excludes clicks for emails addressed to more than one recipient.
        ///
        /// * DELIVERY - Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator and for emails addressed to more than one recipient.
        ///
        /// * DELIVERY_OPEN - Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator, for emails addressed to more than one recipient, and emails without open trackers.
        ///
        /// * DELIVERY_CLICK - Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator, for emails addressed to more than one recipient, and emails without click trackers.
        ///
        /// * DELIVERY_COMPLAINT - Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator, for emails addressed to more than one recipient, and emails addressed to recipients hosted by ISPs with which Amazon SES does not have a feedback loop agreement.
        public var name: SESv2ClientTypes.Metric?

        public init(
            aggregation: SESv2ClientTypes.MetricAggregation? = nil,
            name: SESv2ClientTypes.Metric? = nil
        )
        {
            self.aggregation = aggregation
            self.name = name
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains details about the data source for the metrics export.
    public struct MetricsDataSource {
        /// An object that contains a mapping between a MetricDimensionName and MetricDimensionValue to filter metrics by. Must contain a least 1 dimension but no more than 3 unique ones.
        /// This member is required.
        public var dimensions: [Swift.String: [Swift.String]]?
        /// Represents the end date for the export interval as a timestamp.
        /// This member is required.
        public var endDate: Foundation.Date?
        /// A list of ExportMetric objects to export.
        /// This member is required.
        public var metrics: [SESv2ClientTypes.ExportMetric]?
        /// The metrics namespace - e.g., VDM.
        /// This member is required.
        public var namespace: SESv2ClientTypes.MetricNamespace?
        /// Represents the start date for the export interval as a timestamp.
        /// This member is required.
        public var startDate: Foundation.Date?

        public init(
            dimensions: [Swift.String: [Swift.String]]? = nil,
            endDate: Foundation.Date? = nil,
            metrics: [SESv2ClientTypes.ExportMetric]? = nil,
            namespace: SESv2ClientTypes.MetricNamespace? = nil,
            startDate: Foundation.Date? = nil
        )
        {
            self.dimensions = dimensions
            self.endDate = endDate
            self.metrics = metrics
            self.namespace = namespace
            self.startDate = startDate
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains details about the data source of the export job. It can only contain one of MetricsDataSource or MessageInsightsDataSource object.
    public struct ExportDataSource {
        /// An object that contains filters applied when performing the Message Insights export.
        public var messageInsightsDataSource: SESv2ClientTypes.MessageInsightsDataSource?
        /// An object that contains details about the data source for the metrics export.
        public var metricsDataSource: SESv2ClientTypes.MetricsDataSource?

        public init(
            messageInsightsDataSource: SESv2ClientTypes.MessageInsightsDataSource? = nil,
            metricsDataSource: SESv2ClientTypes.MetricsDataSource? = nil
        )
        {
            self.messageInsightsDataSource = messageInsightsDataSource
            self.metricsDataSource = metricsDataSource
        }
    }

}

extension SESv2ClientTypes {

    /// The data format of a file, can be one of the following:
    ///
    /// * CSV – A comma-separated values file.
    ///
    /// * JSON – A JSON file.
    public enum DataFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case json
        case sdkUnknown(Swift.String)

        public static var allCases: [DataFormat] {
            return [
                .csv,
                .json
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .json: return "JSON"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object that contains details about the destination of the export job.
    public struct ExportDestination {
        /// The data format of the final export job file, can be one of the following:
        ///
        /// * CSV - A comma-separated values file.
        ///
        /// * JSON - A Json file.
        /// This member is required.
        public var dataFormat: SESv2ClientTypes.DataFormat?
        /// An Amazon S3 pre-signed URL that points to the generated export file.
        public var s3Url: Swift.String?

        public init(
            dataFormat: SESv2ClientTypes.DataFormat? = nil,
            s3Url: Swift.String? = nil
        )
        {
            self.dataFormat = dataFormat
            self.s3Url = s3Url
        }
    }

}

/// Represents a request to create an export job from a data source to a data destination.
public struct CreateExportJobInput {
    /// The data source for the export job.
    /// This member is required.
    public var exportDataSource: SESv2ClientTypes.ExportDataSource?
    /// The destination for the export job.
    /// This member is required.
    public var exportDestination: SESv2ClientTypes.ExportDestination?

    public init(
        exportDataSource: SESv2ClientTypes.ExportDataSource? = nil,
        exportDestination: SESv2ClientTypes.ExportDestination? = nil
    )
    {
        self.exportDataSource = exportDataSource
        self.exportDestination = exportDestination
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateExportJobOutput {
    /// A string that represents the export job ID.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension SESv2ClientTypes {
    /// An object that contains details about the data source of the import job.
    public struct ImportDataSource {
        /// The data format of the import job's data source.
        /// This member is required.
        public var dataFormat: SESv2ClientTypes.DataFormat?
        /// An Amazon S3 URL in the format s3:///.
        /// This member is required.
        public var s3Url: Swift.String?

        public init(
            dataFormat: SESv2ClientTypes.DataFormat? = nil,
            s3Url: Swift.String? = nil
        )
        {
            self.dataFormat = dataFormat
            self.s3Url = s3Url
        }
    }

}

extension SESv2ClientTypes {

    /// The type of action to perform on the address. The following are possible values:
    ///
    /// * PUT: add the addresses to the suppression list.
    ///
    /// * DELETE: remove the address from the suppression list.
    public enum SuppressionListImportAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case delete
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [SuppressionListImportAction] {
            return [
                .delete,
                .put
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object that contains details about the action of suppression list.
    public struct SuppressionListDestination {
        /// The type of action to perform on the address. The following are possible values:
        ///
        /// * PUT: add the addresses to the suppression list. If the record already exists, it will override it with the new value.
        ///
        /// * DELETE: remove the addresses from the suppression list.
        /// This member is required.
        public var suppressionListImportAction: SESv2ClientTypes.SuppressionListImportAction?

        public init(
            suppressionListImportAction: SESv2ClientTypes.SuppressionListImportAction? = nil
        )
        {
            self.suppressionListImportAction = suppressionListImportAction
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains details about the resource destination the import job is going to target.
    public struct ImportDestination {
        /// An object that contains the action of the import job towards a contact list.
        public var contactListDestination: SESv2ClientTypes.ContactListDestination?
        /// An object that contains the action of the import job towards suppression list.
        public var suppressionListDestination: SESv2ClientTypes.SuppressionListDestination?

        public init(
            contactListDestination: SESv2ClientTypes.ContactListDestination? = nil,
            suppressionListDestination: SESv2ClientTypes.SuppressionListDestination? = nil
        )
        {
            self.contactListDestination = contactListDestination
            self.suppressionListDestination = suppressionListDestination
        }
    }

}

/// Represents a request to create an import job from a data source for a data destination.
public struct CreateImportJobInput {
    /// The data source for the import job.
    /// This member is required.
    public var importDataSource: SESv2ClientTypes.ImportDataSource?
    /// The destination for the import job.
    /// This member is required.
    public var importDestination: SESv2ClientTypes.ImportDestination?

    public init(
        importDataSource: SESv2ClientTypes.ImportDataSource? = nil,
        importDestination: SESv2ClientTypes.ImportDestination? = nil
    )
    {
        self.importDataSource = importDataSource
        self.importDestination = importDestination
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateImportJobOutput {
    /// A string that represents the import job ID.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension SESv2ClientTypes {
    /// Contains information about a custom verification email template.
    public struct CustomVerificationEmailTemplateMetadata {
        /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
        public var failureRedirectionURL: Swift.String?
        /// The email address that the custom verification email is sent from.
        public var fromEmailAddress: Swift.String?
        /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
        public var successRedirectionURL: Swift.String?
        /// The name of the custom verification email template.
        public var templateName: Swift.String?
        /// The subject line of the custom verification email.
        public var templateSubject: Swift.String?

        public init(
            failureRedirectionURL: Swift.String? = nil,
            fromEmailAddress: Swift.String? = nil,
            successRedirectionURL: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateSubject: Swift.String? = nil
        )
        {
            self.failureRedirectionURL = failureRedirectionURL
            self.fromEmailAddress = fromEmailAddress
            self.successRedirectionURL = successRedirectionURL
            self.templateName = templateName
            self.templateSubject = templateSubject
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains inbox placement data for email sent from one of your email domains to a specific email provider.
    public struct DomainIspPlacement {
        /// The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.
        public var inboxPercentage: Swift.Double?
        /// The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.
        public var inboxRawCount: Swift.Int?
        /// The name of the email provider that the inbox placement data applies to.
        public var ispName: Swift.String?
        /// The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.
        public var spamPercentage: Swift.Double?
        /// The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.
        public var spamRawCount: Swift.Int?

        public init(
            inboxPercentage: Swift.Double? = nil,
            inboxRawCount: Swift.Int? = nil,
            ispName: Swift.String? = nil,
            spamPercentage: Swift.Double? = nil,
            spamRawCount: Swift.Int? = nil
        )
        {
            self.inboxPercentage = inboxPercentage
            self.inboxRawCount = inboxRawCount
            self.ispName = ispName
            self.spamPercentage = spamPercentage
            self.spamRawCount = spamRawCount
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains information about the amount of email that was delivered to recipients.
    public struct VolumeStatistics {
        /// The total number of emails that arrived in recipients' inboxes.
        public var inboxRawCount: Swift.Int?
        /// An estimate of the percentage of emails sent from the current domain that will arrive in recipients' inboxes.
        public var projectedInbox: Swift.Int?
        /// An estimate of the percentage of emails sent from the current domain that will arrive in recipients' spam or junk mail folders.
        public var projectedSpam: Swift.Int?
        /// The total number of emails that arrived in recipients' spam or junk mail folders.
        public var spamRawCount: Swift.Int?

        public init(
            inboxRawCount: Swift.Int? = nil,
            projectedInbox: Swift.Int? = nil,
            projectedSpam: Swift.Int? = nil,
            spamRawCount: Swift.Int? = nil
        )
        {
            self.inboxRawCount = inboxRawCount
            self.projectedInbox = projectedInbox
            self.projectedSpam = projectedSpam
            self.spamRawCount = spamRawCount
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains information about the volume of email sent on each day of the analysis period.
    public struct DailyVolume {
        /// An object that contains inbox placement metrics for a specified day in the analysis period, broken out by the recipient's email provider.
        public var domainIspPlacements: [SESv2ClientTypes.DomainIspPlacement]?
        /// The date that the DailyVolume metrics apply to, in Unix time.
        public var startDate: Foundation.Date?
        /// An object that contains inbox placement metrics for a specific day in the analysis period.
        public var volumeStatistics: SESv2ClientTypes.VolumeStatistics?

        public init(
            domainIspPlacements: [SESv2ClientTypes.DomainIspPlacement]? = nil,
            startDate: Foundation.Date? = nil,
            volumeStatistics: SESv2ClientTypes.VolumeStatistics? = nil
        )
        {
            self.domainIspPlacements = domainIspPlacements
            self.startDate = startDate
            self.volumeStatistics = volumeStatistics
        }
    }

}

extension SESv2ClientTypes {
    /// An object containing additional settings for your VDM configuration as applicable to the Dashboard.
    public struct DashboardAttributes {
        /// Specifies the status of your VDM engagement metrics collection. Can be one of the following:
        ///
        /// * ENABLED – Amazon SES enables engagement metrics for your account.
        ///
        /// * DISABLED – Amazon SES disables engagement metrics for your account.
        public var engagementMetrics: SESv2ClientTypes.FeatureStatus?

        public init(
            engagementMetrics: SESv2ClientTypes.FeatureStatus? = nil
        )
        {
            self.engagementMetrics = engagementMetrics
        }
    }

}

extension SESv2ClientTypes {

    /// The warmup status of a dedicated IP.
    public enum WarmupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case done
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [WarmupStatus] {
            return [
                .done,
                .inProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .done: return "DONE"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// Contains information about a dedicated IP address that is associated with your Amazon SES account. To learn more about requesting dedicated IP addresses, see [Requesting and Relinquishing Dedicated IP Addresses](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/dedicated-ip-case.html) in the Amazon SES Developer Guide.
    public struct DedicatedIp {
        /// An IPv4 address.
        /// This member is required.
        public var ip: Swift.String?
        /// The name of the dedicated IP pool that the IP address is associated with.
        public var poolName: Swift.String?
        /// Indicates how complete the dedicated IP warm-up process is. When this value equals 1, the address has completed the warm-up process and is ready for use.
        /// This member is required.
        public var warmupPercentage: Swift.Int?
        /// The warm-up status of a dedicated IP address. The status can have one of the following values:
        ///
        /// * IN_PROGRESS – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.
        ///
        /// * DONE – The dedicated IP warm-up process is complete, and the IP address is ready to use.
        /// This member is required.
        public var warmupStatus: SESv2ClientTypes.WarmupStatus?

        public init(
            ip: Swift.String? = nil,
            poolName: Swift.String? = nil,
            warmupPercentage: Swift.Int? = nil,
            warmupStatus: SESv2ClientTypes.WarmupStatus? = nil
        )
        {
            self.ip = ip
            self.poolName = poolName
            self.warmupPercentage = warmupPercentage
            self.warmupStatus = warmupStatus
        }
    }

}

extension SESv2ClientTypes {
    /// Contains information about a dedicated IP pool.
    public struct DedicatedIpPool {
        /// The name of the dedicated IP pool.
        /// This member is required.
        public var poolName: Swift.String?
        /// The type of the dedicated IP pool.
        ///
        /// * STANDARD – A dedicated IP pool where you can control which IPs are part of the pool.
        ///
        /// * MANAGED – A dedicated IP pool where the reputation and number of IPs are automatically managed by Amazon SES.
        /// This member is required.
        public var scalingMode: SESv2ClientTypes.ScalingMode?

        public init(
            poolName: Swift.String? = nil,
            scalingMode: SESv2ClientTypes.ScalingMode? = nil
        )
        {
            self.poolName = poolName
            self.scalingMode = scalingMode
        }
    }

}

/// A request to delete a configuration set.
public struct DeleteConfigurationSetInput {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteConfigurationSetOutput {

    public init() { }
}

/// A request to delete an event destination from a configuration set.
public struct DeleteConfigurationSetEventDestinationInput {
    /// The name of the configuration set that contains the event destination to delete.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The name of the event destination to delete.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteConfigurationSetEventDestinationOutput {

    public init() { }
}

public struct DeleteContactInput {
    /// The name of the contact list from which the contact should be removed.
    /// This member is required.
    public var contactListName: Swift.String?
    /// The contact's email address.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init(
        contactListName: Swift.String? = nil,
        emailAddress: Swift.String? = nil
    )
    {
        self.contactListName = contactListName
        self.emailAddress = emailAddress
    }
}

public struct DeleteContactOutput {

    public init() { }
}

public struct DeleteContactListInput {
    /// The name of the contact list.
    /// This member is required.
    public var contactListName: Swift.String?

    public init(
        contactListName: Swift.String? = nil
    )
    {
        self.contactListName = contactListName
    }
}

public struct DeleteContactListOutput {

    public init() { }
}

/// Represents a request to delete an existing custom verification email template.
public struct DeleteCustomVerificationEmailTemplateInput {
    /// The name of the custom verification email template that you want to delete.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct DeleteCustomVerificationEmailTemplateOutput {

    public init() { }
}

/// A request to delete a dedicated IP pool.
public struct DeleteDedicatedIpPoolInput {
    /// The name of the dedicated IP pool that you want to delete.
    /// This member is required.
    public var poolName: Swift.String?

    public init(
        poolName: Swift.String? = nil
    )
    {
        self.poolName = poolName
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteDedicatedIpPoolOutput {

    public init() { }
}

/// A request to delete an existing email identity. When you delete an identity, you lose the ability to send email from that identity. You can restore your ability to send email by completing the verification process for the identity again.
public struct DeleteEmailIdentityInput {
    /// The identity (that is, the email address or domain) to delete.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init(
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteEmailIdentityOutput {

    public init() { }
}

/// Represents a request to delete a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html).
public struct DeleteEmailIdentityPolicyInput {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// The name of the policy. The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.
    /// This member is required.
    public var policyName: Swift.String?

    public init(
        emailIdentity: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.policyName = policyName
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteEmailIdentityPolicyOutput {

    public init() { }
}

/// Represents a request to delete an email template. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct DeleteEmailTemplateInput {
    /// The name of the template to be deleted.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct DeleteEmailTemplateOutput {

    public init() { }
}

/// A request to remove an email address from the suppression list for your account.
public struct DeleteSuppressedDestinationInput {
    /// The suppressed email destination to remove from the account suppression list.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init(
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteSuppressedDestinationOutput {

    public init() { }
}

extension SESv2ClientTypes {

    /// The current status of your Deliverability dashboard subscription. If this value is PENDING_EXPIRATION, your subscription is scheduled to expire at the end of the current calendar month.
    public enum DeliverabilityDashboardAccountStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case disabled
        case pendingExpiration
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliverabilityDashboardAccountStatus] {
            return [
                .active,
                .disabled,
                .pendingExpiration
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .disabled: return "DISABLED"
            case .pendingExpiration: return "PENDING_EXPIRATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object that contains metadata related to a predictive inbox placement test.
    public struct DeliverabilityTestReport {
        /// The date and time when the predictive inbox placement test was created.
        public var createDate: Foundation.Date?
        /// The status of the predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport to view the results of the test.
        public var deliverabilityTestStatus: SESv2ClientTypes.DeliverabilityTestStatus?
        /// The sender address that you specified for the predictive inbox placement test.
        public var fromEmailAddress: Swift.String?
        /// A unique string that identifies the predictive inbox placement test.
        public var reportId: Swift.String?
        /// A name that helps you identify a predictive inbox placement test report.
        public var reportName: Swift.String?
        /// The subject line for an email that you submitted in a predictive inbox placement test.
        public var subject: Swift.String?

        public init(
            createDate: Foundation.Date? = nil,
            deliverabilityTestStatus: SESv2ClientTypes.DeliverabilityTestStatus? = nil,
            fromEmailAddress: Swift.String? = nil,
            reportId: Swift.String? = nil,
            reportName: Swift.String? = nil,
            subject: Swift.String? = nil
        )
        {
            self.createDate = createDate
            self.deliverabilityTestStatus = deliverabilityTestStatus
            self.fromEmailAddress = fromEmailAddress
            self.reportId = reportId
            self.reportName = reportName
            self.subject = subject
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (PutDeliverabilityDashboardOption operation).
    public struct DomainDeliverabilityCampaign {
        /// The unique identifier for the campaign. The Deliverability dashboard automatically generates and assigns this identifier to a campaign.
        public var campaignId: Swift.String?
        /// The percentage of email messages that were deleted by recipients, without being opened first. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public var deleteRate: Swift.Double?
        /// The major email providers who handled the email message.
        public var esps: [Swift.String]?
        /// The first time when the email message was delivered to any recipient's inbox. This value can help you determine how long it took for a campaign to deliver an email message.
        public var firstSeenDateTime: Foundation.Date?
        /// The verified email address that the email message was sent from.
        public var fromAddress: Swift.String?
        /// The URL of an image that contains a snapshot of the email message that was sent.
        public var imageUrl: Swift.String?
        /// The number of email messages that were delivered to recipients’ inboxes.
        public var inboxCount: Swift.Int?
        /// The last time when the email message was delivered to any recipient's inbox. This value can help you determine how long it took for a campaign to deliver an email message.
        public var lastSeenDateTime: Foundation.Date?
        /// The projected number of recipients that the email message was sent to.
        public var projectedVolume: Swift.Int?
        /// The percentage of email messages that were opened and then deleted by recipients. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public var readDeleteRate: Swift.Double?
        /// The percentage of email messages that were opened by recipients. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public var readRate: Swift.Double?
        /// The IP addresses that were used to send the email message.
        public var sendingIps: [Swift.String]?
        /// The number of email messages that were delivered to recipients' spam or junk mail folders.
        public var spamCount: Swift.Int?
        /// The subject line, or title, of the email message.
        public var subject: Swift.String?

        public init(
            campaignId: Swift.String? = nil,
            deleteRate: Swift.Double? = nil,
            esps: [Swift.String]? = nil,
            firstSeenDateTime: Foundation.Date? = nil,
            fromAddress: Swift.String? = nil,
            imageUrl: Swift.String? = nil,
            inboxCount: Swift.Int? = nil,
            lastSeenDateTime: Foundation.Date? = nil,
            projectedVolume: Swift.Int? = nil,
            readDeleteRate: Swift.Double? = nil,
            readRate: Swift.Double? = nil,
            sendingIps: [Swift.String]? = nil,
            spamCount: Swift.Int? = nil,
            subject: Swift.String? = nil
        )
        {
            self.campaignId = campaignId
            self.deleteRate = deleteRate
            self.esps = esps
            self.firstSeenDateTime = firstSeenDateTime
            self.fromAddress = fromAddress
            self.imageUrl = imageUrl
            self.inboxCount = inboxCount
            self.lastSeenDateTime = lastSeenDateTime
            self.projectedVolume = projectedVolume
            self.readDeleteRate = readDeleteRate
            self.readRate = readRate
            self.sendingIps = sendingIps
            self.spamCount = spamCount
            self.subject = subject
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains information about the inbox placement data settings for a verified domain that’s associated with your Amazon Web Services account. This data is available only if you enabled the Deliverability dashboard for the domain.
    public struct InboxPlacementTrackingOption {
        /// Specifies whether inbox placement data is being tracked for the domain.
        public var global: Swift.Bool
        /// An array of strings, one for each major email provider that the inbox placement data applies to.
        public var trackedIsps: [Swift.String]?

        public init(
            global: Swift.Bool = false,
            trackedIsps: [Swift.String]? = nil
        )
        {
            self.global = global
            self.trackedIsps = trackedIsps
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.
    public struct DomainDeliverabilityTrackingOption {
        /// A verified domain that’s associated with your Amazon Web Services account and currently has an active Deliverability dashboard subscription.
        public var domain: Swift.String?
        /// An object that contains information about the inbox placement data settings for the domain.
        public var inboxPlacementTrackingOption: SESv2ClientTypes.InboxPlacementTrackingOption?
        /// The date when you enabled the Deliverability dashboard for the domain.
        public var subscriptionStartDate: Foundation.Date?

        public init(
            domain: Swift.String? = nil,
            inboxPlacementTrackingOption: SESv2ClientTypes.InboxPlacementTrackingOption? = nil,
            subscriptionStartDate: Foundation.Date? = nil
        )
        {
            self.domain = domain
            self.inboxPlacementTrackingOption = inboxPlacementTrackingOption
            self.subscriptionStartDate = subscriptionStartDate
        }
    }

}

extension SESv2ClientTypes {
    /// Contains a Bounce object if the event type is BOUNCE. Contains a Complaint object if the event type is COMPLAINT.
    public struct EventDetails {
        /// Information about a Bounce event.
        public var bounce: SESv2ClientTypes.Bounce?
        /// Information about a Complaint event.
        public var complaint: SESv2ClientTypes.Complaint?

        public init(
            bounce: SESv2ClientTypes.Bounce? = nil,
            complaint: SESv2ClientTypes.Complaint? = nil
        )
        {
            self.bounce = bounce
            self.complaint = complaint
        }
    }

}

extension SESv2ClientTypes {
    /// An object containing details about a specific event.
    public struct InsightsEvent {
        /// Details about bounce or complaint events.
        public var details: SESv2ClientTypes.EventDetails?
        /// The timestamp of the event.
        public var timestamp: Foundation.Date?
        /// The type of event:
        ///
        /// * SEND - The send request was successful and SES will attempt to deliver the message to the recipient’s mail server. (If account-level or global suppression is being used, SES will still count it as a send, but delivery is suppressed.)
        ///
        /// * DELIVERY - SES successfully delivered the email to the recipient's mail server. Excludes deliveries to the mailbox simulator, and those from emails addressed to more than one recipient.
        ///
        /// * BOUNCE - Feedback received for delivery failures. Additional details about the bounce are provided in the Details object. Excludes bounces from the mailbox simulator, and those from emails addressed to more than one recipient.
        ///
        /// * COMPLAINT - Complaint received for the email. Additional details about the complaint are provided in the Details object. This excludes complaints from the mailbox simulator, those originating from your account-level suppression list (if enabled), and those from emails addressed to more than one recipient.
        ///
        /// * OPEN - Open event for emails including open trackers. Excludes opens for emails addressed to more than one recipient.
        ///
        /// * CLICK - Click event for emails including wrapped links. Excludes clicks for emails addressed to more than one recipient.
        public var type: SESv2ClientTypes.EventType?

        public init(
            details: SESv2ClientTypes.EventDetails? = nil,
            timestamp: Foundation.Date? = nil,
            type: SESv2ClientTypes.EventType? = nil
        )
        {
            self.details = details
            self.timestamp = timestamp
            self.type = type
        }
    }

}

extension SESv2ClientTypes {
    /// An email's insights contain metadata and delivery information about a specific email.
    public struct EmailInsights {
        /// The recipient of the email.
        public var destination: Swift.String?
        /// A list of events associated with the sent email.
        public var events: [SESv2ClientTypes.InsightsEvent]?
        /// The recipient's ISP (e.g., Gmail, Yahoo, etc.).
        public var isp: Swift.String?

        public init(
            destination: Swift.String? = nil,
            events: [SESv2ClientTypes.InsightsEvent]? = nil,
            isp: Swift.String? = nil
        )
        {
            self.destination = destination
            self.events = events
            self.isp = isp
        }
    }

}

extension SESv2ClientTypes.EmailInsights: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EmailInsights(events: \(Swift.String(describing: events)), isp: \(Swift.String(describing: isp)), destination: \"CONTENT_REDACTED\")"}
}

extension SESv2ClientTypes {
    /// Contains information about an email template.
    public struct EmailTemplateMetadata {
        /// The time and date the template was created.
        public var createdTimestamp: Foundation.Date?
        /// The name of the template.
        public var templateName: Swift.String?

        public init(
            createdTimestamp: Foundation.Date? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.templateName = templateName
        }
    }

}

extension SESv2ClientTypes {
    /// In the Amazon SES API v2, events include message sends, deliveries, opens, clicks, bounces, complaints and delivery delays. Event destinations are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.
    public struct EventDestination {
        /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
        public var cloudWatchDestination: SESv2ClientTypes.CloudWatchDestination?
        /// If true, the event destination is enabled. When the event destination is enabled, the specified event types are sent to the destinations in this EventDestinationDefinition. If false, the event destination is disabled. When the event destination is disabled, events aren't sent to the specified destinations.
        public var enabled: Swift.Bool
        /// An object that defines an Amazon EventBridge destination for email events. You can use Amazon EventBridge to send notifications when certain email events occur.
        public var eventBridgeDestination: SESv2ClientTypes.EventBridgeDestination?
        /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
        public var kinesisFirehoseDestination: SESv2ClientTypes.KinesisFirehoseDestination?
        /// The types of events that Amazon SES sends to the specified event destinations.
        ///
        /// * SEND - The send request was successful and SES will attempt to deliver the message to the recipient’s mail server. (If account-level or global suppression is being used, SES will still count it as a send, but delivery is suppressed.)
        ///
        /// * REJECT - SES accepted the email, but determined that it contained a virus and didn’t attempt to deliver it to the recipient’s mail server.
        ///
        /// * BOUNCE - (Hard bounce) The recipient's mail server permanently rejected the email. (Soft bounces are only included when SES fails to deliver the email after retrying for a period of time.)
        ///
        /// * COMPLAINT - The email was successfully delivered to the recipient’s mail server, but the recipient marked it as spam.
        ///
        /// * DELIVERY - SES successfully delivered the email to the recipient's mail server.
        ///
        /// * OPEN - The recipient received the message and opened it in their email client.
        ///
        /// * CLICK - The recipient clicked one or more links in the email.
        ///
        /// * RENDERING_FAILURE - The email wasn't sent because of a template rendering issue. This event type can occur when template data is missing, or when there is a mismatch between template parameters and data. (This event type only occurs when you send email using the [SendTemplatedEmail](https://docs.aws.amazon.com/ses/latest/APIReference/API_SendTemplatedEmail.html) or [SendBulkTemplatedEmail](https://docs.aws.amazon.com/ses/latest/APIReference/API_SendBulkTemplatedEmail.html) API operations.)
        ///
        /// * DELIVERY_DELAY - The email couldn't be delivered to the recipient’s mail server because a temporary issue occurred. Delivery delays can occur, for example, when the recipient's inbox is full, or when the receiving email server experiences a transient issue.
        ///
        /// * SUBSCRIPTION - The email was successfully delivered, but the recipient updated their subscription preferences by clicking on an unsubscribe link as part of your [subscription management](https://docs.aws.amazon.com/ses/latest/dg/sending-email-subscription-management.html).
        /// This member is required.
        public var matchingEventTypes: [SESv2ClientTypes.EventType]?
        /// A name that identifies the event destination.
        /// This member is required.
        public var name: Swift.String?
        /// An object that defines an Amazon Pinpoint project destination for email events. You can send email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging dashboards that are built in to Amazon Pinpoint. For more information, see [Transactional Messaging Charts](https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html) in the Amazon Pinpoint User Guide.
        public var pinpointDestination: SESv2ClientTypes.PinpointDestination?
        /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notifications when certain email events occur.
        public var snsDestination: SESv2ClientTypes.SnsDestination?

        public init(
            cloudWatchDestination: SESv2ClientTypes.CloudWatchDestination? = nil,
            enabled: Swift.Bool = false,
            eventBridgeDestination: SESv2ClientTypes.EventBridgeDestination? = nil,
            kinesisFirehoseDestination: SESv2ClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [SESv2ClientTypes.EventType]? = nil,
            name: Swift.String? = nil,
            pinpointDestination: SESv2ClientTypes.PinpointDestination? = nil,
            snsDestination: SESv2ClientTypes.SnsDestination? = nil
        )
        {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.eventBridgeDestination = eventBridgeDestination
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.name = name
            self.pinpointDestination = pinpointDestination
            self.snsDestination = snsDestination
        }
    }

}

extension SESv2ClientTypes {

    /// The type of data source of an export, can be one of the following:
    ///
    /// * METRICS_DATA - The metrics export.
    ///
    /// * MESSAGE_INSIGHTS - The Message Insights export.
    public enum ExportSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case messageInsights
        case metricsData
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportSourceType] {
            return [
                .messageInsights,
                .metricsData
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .messageInsights: return "MESSAGE_INSIGHTS"
            case .metricsData: return "METRICS_DATA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {

    /// The status of a job.
    ///
    /// * CREATED – Job has just been created.
    ///
    /// * PROCESSING – Job is processing.
    ///
    /// * ERROR – An error occurred during processing.
    ///
    /// * COMPLETED – Job has completed processing successfully.
    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case completed
        case created
        case failed
        case processing
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .cancelled,
                .completed,
                .created,
                .failed,
                .processing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .completed: return "COMPLETED"
            case .created: return "CREATED"
            case .failed: return "FAILED"
            case .processing: return "PROCESSING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// A summary of the export job.
    public struct ExportJobSummary {
        /// The timestamp of when the export job was completed.
        public var completedTimestamp: Foundation.Date?
        /// The timestamp of when the export job was created.
        public var createdTimestamp: Foundation.Date?
        /// The source type of the export job.
        public var exportSourceType: SESv2ClientTypes.ExportSourceType?
        /// The export job ID.
        public var jobId: Swift.String?
        /// The status of the export job.
        public var jobStatus: SESv2ClientTypes.JobStatus?

        public init(
            completedTimestamp: Foundation.Date? = nil,
            createdTimestamp: Foundation.Date? = nil,
            exportSourceType: SESv2ClientTypes.ExportSourceType? = nil,
            jobId: Swift.String? = nil,
            jobStatus: SESv2ClientTypes.JobStatus? = nil
        )
        {
            self.completedTimestamp = completedTimestamp
            self.createdTimestamp = createdTimestamp
            self.exportSourceType = exportSourceType
            self.jobId = jobId
            self.jobStatus = jobStatus
        }
    }

}

extension SESv2ClientTypes {
    /// Statistics about the execution of an export job.
    public struct ExportStatistics {
        /// The number of records that were exported to the final export file. This value might not be available for all export source types
        public var exportedRecordsCount: Swift.Int?
        /// The number of records that were processed to generate the final export file.
        public var processedRecordsCount: Swift.Int?

        public init(
            exportedRecordsCount: Swift.Int? = nil,
            processedRecordsCount: Swift.Int? = nil
        )
        {
            self.exportedRecordsCount = exportedRecordsCount
            self.processedRecordsCount = processedRecordsCount
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains the failure details about a job.
    public struct FailureInfo {
        /// A message about why the job failed.
        public var errorMessage: Swift.String?
        /// An Amazon S3 pre-signed URL that contains all the failed records and related information.
        public var failedRecordsS3Url: Swift.String?

        public init(
            errorMessage: Swift.String? = nil,
            failedRecordsS3Url: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
            self.failedRecordsS3Url = failedRecordsS3Url
        }
    }

}

/// A request to obtain information about the email-sending capabilities of your Amazon SES account.
public struct GetAccountInput {

    public init() { }
}

extension SESv2ClientTypes {
    /// An object that contains information about the per-day and per-second sending limits for your Amazon SES account in the current Amazon Web Services Region.
    public struct SendQuota {
        /// The maximum number of emails that you can send in the current Amazon Web Services Region over a 24-hour period. A value of -1 signifies an unlimited quota. (This value is also referred to as your sending quota.)
        public var max24HourSend: Swift.Double
        /// The maximum number of emails that you can send per second in the current Amazon Web Services Region. This value is also called your maximum sending rate or your maximum TPS (transactions per second) rate.
        public var maxSendRate: Swift.Double
        /// The number of emails sent from your Amazon SES account in the current Amazon Web Services Region over the past 24 hours.
        public var sentLast24Hours: Swift.Double

        public init(
            max24HourSend: Swift.Double = 0.0,
            maxSendRate: Swift.Double = 0.0,
            sentLast24Hours: Swift.Double = 0.0
        )
        {
            self.max24HourSend = max24HourSend
            self.maxSendRate = maxSendRate
            self.sentLast24Hours = sentLast24Hours
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains information about the email address suppression preferences for your account in the current Amazon Web Services Region.
    public struct SuppressionAttributes {
        /// A list that contains the reasons that email addresses will be automatically added to the suppression list for your account. This list can contain any or all of the following:
        ///
        /// * COMPLAINT – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a complaint.
        ///
        /// * BOUNCE – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a hard bounce.
        public var suppressedReasons: [SESv2ClientTypes.SuppressionListReason]?

        public init(
            suppressedReasons: [SESv2ClientTypes.SuppressionListReason]? = nil
        )
        {
            self.suppressedReasons = suppressedReasons
        }
    }

}

extension SESv2ClientTypes {
    /// An object containing additional settings for your VDM configuration as applicable to the Guardian.
    public struct GuardianAttributes {
        /// Specifies the status of your VDM optimized shared delivery. Can be one of the following:
        ///
        /// * ENABLED – Amazon SES enables optimized shared delivery for your account.
        ///
        /// * DISABLED – Amazon SES disables optimized shared delivery for your account.
        public var optimizedSharedDelivery: SESv2ClientTypes.FeatureStatus?

        public init(
            optimizedSharedDelivery: SESv2ClientTypes.FeatureStatus? = nil
        )
        {
            self.optimizedSharedDelivery = optimizedSharedDelivery
        }
    }

}

extension SESv2ClientTypes {
    /// The VDM attributes that apply to your Amazon SES account.
    public struct VdmAttributes {
        /// Specifies additional settings for your VDM configuration as applicable to the Dashboard.
        public var dashboardAttributes: SESv2ClientTypes.DashboardAttributes?
        /// Specifies additional settings for your VDM configuration as applicable to the Guardian.
        public var guardianAttributes: SESv2ClientTypes.GuardianAttributes?
        /// Specifies the status of your VDM configuration. Can be one of the following:
        ///
        /// * ENABLED – Amazon SES enables VDM for your account.
        ///
        /// * DISABLED – Amazon SES disables VDM for your account.
        /// This member is required.
        public var vdmEnabled: SESv2ClientTypes.FeatureStatus?

        public init(
            dashboardAttributes: SESv2ClientTypes.DashboardAttributes? = nil,
            guardianAttributes: SESv2ClientTypes.GuardianAttributes? = nil,
            vdmEnabled: SESv2ClientTypes.FeatureStatus? = nil
        )
        {
            self.dashboardAttributes = dashboardAttributes
            self.guardianAttributes = guardianAttributes
            self.vdmEnabled = vdmEnabled
        }
    }

}

/// A list of details about the email-sending capabilities of your Amazon SES account in the current Amazon Web Services Region.
public struct GetAccountOutput {
    /// Indicates whether or not the automatic warm-up feature is enabled for dedicated IP addresses that are associated with your account.
    public var dedicatedIpAutoWarmupEnabled: Swift.Bool
    /// An object that defines your account details.
    public var details: SESv2ClientTypes.AccountDetails?
    /// The reputation status of your Amazon SES account. The status can be one of the following:
    ///
    /// * HEALTHY – There are no reputation-related issues that currently impact your account.
    ///
    /// * PROBATION – We've identified potential issues with your Amazon SES account. We're placing your account under review while you work on correcting these issues.
    ///
    /// * SHUTDOWN – Your account's ability to send email is currently paused because of an issue with the email sent from your account. When you correct the issue, you can contact us and request that your account's ability to send email is resumed.
    public var enforcementStatus: Swift.String?
    /// Indicates whether or not your account has production access in the current Amazon Web Services Region. If the value is false, then your account is in the sandbox. When your account is in the sandbox, you can only send email to verified identities. If the value is true, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.
    public var productionAccessEnabled: Swift.Bool
    /// An object that contains information about the per-day and per-second sending limits for your Amazon SES account in the current Amazon Web Services Region.
    public var sendQuota: SESv2ClientTypes.SendQuota?
    /// Indicates whether or not email sending is enabled for your Amazon SES account in the current Amazon Web Services Region.
    public var sendingEnabled: Swift.Bool
    /// An object that contains information about the email address suppression preferences for your account in the current Amazon Web Services Region.
    public var suppressionAttributes: SESv2ClientTypes.SuppressionAttributes?
    /// The VDM attributes that apply to your Amazon SES account.
    public var vdmAttributes: SESv2ClientTypes.VdmAttributes?

    public init(
        dedicatedIpAutoWarmupEnabled: Swift.Bool = false,
        details: SESv2ClientTypes.AccountDetails? = nil,
        enforcementStatus: Swift.String? = nil,
        productionAccessEnabled: Swift.Bool = false,
        sendQuota: SESv2ClientTypes.SendQuota? = nil,
        sendingEnabled: Swift.Bool = false,
        suppressionAttributes: SESv2ClientTypes.SuppressionAttributes? = nil,
        vdmAttributes: SESv2ClientTypes.VdmAttributes? = nil
    )
    {
        self.dedicatedIpAutoWarmupEnabled = dedicatedIpAutoWarmupEnabled
        self.details = details
        self.enforcementStatus = enforcementStatus
        self.productionAccessEnabled = productionAccessEnabled
        self.sendQuota = sendQuota
        self.sendingEnabled = sendingEnabled
        self.suppressionAttributes = suppressionAttributes
        self.vdmAttributes = vdmAttributes
    }
}

/// A request to retrieve a list of the blacklists that your dedicated IP addresses appear on.
public struct GetBlacklistReportsInput {
    /// A list of IP addresses that you want to retrieve blacklist information about. You can only specify the dedicated IP addresses that you use to send email using Amazon SES or Amazon Pinpoint.
    /// This member is required.
    public var blacklistItemNames: [Swift.String]?

    public init(
        blacklistItemNames: [Swift.String]? = nil
    )
    {
        self.blacklistItemNames = blacklistItemNames
    }
}

/// An object that contains information about blacklist events.
public struct GetBlacklistReportsOutput {
    /// An object that contains information about a blacklist that one of your dedicated IP addresses appears on.
    /// This member is required.
    public var blacklistReport: [Swift.String: [SESv2ClientTypes.BlacklistEntry]]?

    public init(
        blacklistReport: [Swift.String: [SESv2ClientTypes.BlacklistEntry]]? = nil
    )
    {
        self.blacklistReport = blacklistReport
    }
}

/// A request to obtain information about a configuration set.
public struct GetConfigurationSetInput {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

/// Information about a configuration set.
public struct GetConfigurationSetOutput {
    /// The name of the configuration set.
    public var configurationSetName: Swift.String?
    /// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
    public var deliveryOptions: SESv2ClientTypes.DeliveryOptions?
    /// An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set.
    public var reputationOptions: SESv2ClientTypes.ReputationOptions?
    /// An object that defines whether or not Amazon SES can send email that you send using the configuration set.
    public var sendingOptions: SESv2ClientTypes.SendingOptions?
    /// An object that contains information about the suppression list preferences for your account.
    public var suppressionOptions: SESv2ClientTypes.SuppressionOptions?
    /// An array of objects that define the tags (keys and values) that are associated with the configuration set.
    public var tags: [SESv2ClientTypes.Tag]?
    /// An object that defines the open and click tracking options for emails that you send using the configuration set.
    public var trackingOptions: SESv2ClientTypes.TrackingOptions?
    /// An object that contains information about the VDM preferences for your configuration set.
    public var vdmOptions: SESv2ClientTypes.VdmOptions?

    public init(
        configurationSetName: Swift.String? = nil,
        deliveryOptions: SESv2ClientTypes.DeliveryOptions? = nil,
        reputationOptions: SESv2ClientTypes.ReputationOptions? = nil,
        sendingOptions: SESv2ClientTypes.SendingOptions? = nil,
        suppressionOptions: SESv2ClientTypes.SuppressionOptions? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil,
        trackingOptions: SESv2ClientTypes.TrackingOptions? = nil,
        vdmOptions: SESv2ClientTypes.VdmOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.deliveryOptions = deliveryOptions
        self.reputationOptions = reputationOptions
        self.sendingOptions = sendingOptions
        self.suppressionOptions = suppressionOptions
        self.tags = tags
        self.trackingOptions = trackingOptions
        self.vdmOptions = vdmOptions
    }
}

/// A request to obtain information about the event destinations for a configuration set.
public struct GetConfigurationSetEventDestinationsInput {
    /// The name of the configuration set that contains the event destination.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

/// Information about an event destination for a configuration set.
public struct GetConfigurationSetEventDestinationsOutput {
    /// An array that includes all of the events destinations that have been configured for the configuration set.
    public var eventDestinations: [SESv2ClientTypes.EventDestination]?

    public init(
        eventDestinations: [SESv2ClientTypes.EventDestination]? = nil
    )
    {
        self.eventDestinations = eventDestinations
    }
}

public struct GetContactInput {
    /// The name of the contact list to which the contact belongs.
    /// This member is required.
    public var contactListName: Swift.String?
    /// The contact's email address.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init(
        contactListName: Swift.String? = nil,
        emailAddress: Swift.String? = nil
    )
    {
        self.contactListName = contactListName
        self.emailAddress = emailAddress
    }
}

public struct GetContactOutput {
    /// The attribute data attached to a contact.
    public var attributesData: Swift.String?
    /// The name of the contact list to which the contact belongs.
    public var contactListName: Swift.String?
    /// A timestamp noting when the contact was created.
    public var createdTimestamp: Foundation.Date?
    /// The contact's email address.
    public var emailAddress: Swift.String?
    /// A timestamp noting the last time the contact's information was updated.
    public var lastUpdatedTimestamp: Foundation.Date?
    /// The default topic preferences applied to the contact.
    public var topicDefaultPreferences: [SESv2ClientTypes.TopicPreference]?
    /// The contact's preference for being opted-in to or opted-out of a topic.>
    public var topicPreferences: [SESv2ClientTypes.TopicPreference]?
    /// A boolean value status noting if the contact is unsubscribed from all contact list topics.
    public var unsubscribeAll: Swift.Bool

    public init(
        attributesData: Swift.String? = nil,
        contactListName: Swift.String? = nil,
        createdTimestamp: Foundation.Date? = nil,
        emailAddress: Swift.String? = nil,
        lastUpdatedTimestamp: Foundation.Date? = nil,
        topicDefaultPreferences: [SESv2ClientTypes.TopicPreference]? = nil,
        topicPreferences: [SESv2ClientTypes.TopicPreference]? = nil,
        unsubscribeAll: Swift.Bool = false
    )
    {
        self.attributesData = attributesData
        self.contactListName = contactListName
        self.createdTimestamp = createdTimestamp
        self.emailAddress = emailAddress
        self.lastUpdatedTimestamp = lastUpdatedTimestamp
        self.topicDefaultPreferences = topicDefaultPreferences
        self.topicPreferences = topicPreferences
        self.unsubscribeAll = unsubscribeAll
    }
}

public struct GetContactListInput {
    /// The name of the contact list.
    /// This member is required.
    public var contactListName: Swift.String?

    public init(
        contactListName: Swift.String? = nil
    )
    {
        self.contactListName = contactListName
    }
}

public struct GetContactListOutput {
    /// The name of the contact list.
    public var contactListName: Swift.String?
    /// A timestamp noting when the contact list was created.
    public var createdTimestamp: Foundation.Date?
    /// A description of what the contact list is about.
    public var description: Swift.String?
    /// A timestamp noting the last time the contact list was updated.
    public var lastUpdatedTimestamp: Foundation.Date?
    /// The tags associated with a contact list.
    public var tags: [SESv2ClientTypes.Tag]?
    /// An interest group, theme, or label within a list. A contact list can have multiple topics.
    public var topics: [SESv2ClientTypes.Topic]?

    public init(
        contactListName: Swift.String? = nil,
        createdTimestamp: Foundation.Date? = nil,
        description: Swift.String? = nil,
        lastUpdatedTimestamp: Foundation.Date? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil,
        topics: [SESv2ClientTypes.Topic]? = nil
    )
    {
        self.contactListName = contactListName
        self.createdTimestamp = createdTimestamp
        self.description = description
        self.lastUpdatedTimestamp = lastUpdatedTimestamp
        self.tags = tags
        self.topics = topics
    }
}

/// Represents a request to retrieve an existing custom verification email template.
public struct GetCustomVerificationEmailTemplateInput {
    /// The name of the custom verification email template that you want to retrieve.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

/// The following elements are returned by the service.
public struct GetCustomVerificationEmailTemplateOutput {
    /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    public var failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    public var fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    public var successRedirectionURL: Swift.String?
    /// The content of the custom verification email.
    public var templateContent: Swift.String?
    /// The name of the custom verification email template.
    public var templateName: Swift.String?
    /// The subject line of the custom verification email.
    public var templateSubject: Swift.String?

    public init(
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

/// A request to obtain more information about a dedicated IP address.
public struct GetDedicatedIpInput {
    /// The IP address that you want to obtain more information about. The value you specify has to be a dedicated IP address that's assocaited with your Amazon Web Services account.
    /// This member is required.
    public var ip: Swift.String?

    public init(
        ip: Swift.String? = nil
    )
    {
        self.ip = ip
    }
}

/// Information about a dedicated IP address.
public struct GetDedicatedIpOutput {
    /// An object that contains information about a dedicated IP address.
    public var dedicatedIp: SESv2ClientTypes.DedicatedIp?

    public init(
        dedicatedIp: SESv2ClientTypes.DedicatedIp? = nil
    )
    {
        self.dedicatedIp = dedicatedIp
    }
}

/// A request to obtain more information about a dedicated IP pool.
public struct GetDedicatedIpPoolInput {
    /// The name of the dedicated IP pool to retrieve.
    /// This member is required.
    public var poolName: Swift.String?

    public init(
        poolName: Swift.String? = nil
    )
    {
        self.poolName = poolName
    }
}

/// The following element is returned by the service.
public struct GetDedicatedIpPoolOutput {
    /// An object that contains information about a dedicated IP pool.
    public var dedicatedIpPool: SESv2ClientTypes.DedicatedIpPool?

    public init(
        dedicatedIpPool: SESv2ClientTypes.DedicatedIpPool? = nil
    )
    {
        self.dedicatedIpPool = dedicatedIpPool
    }
}

/// A request to obtain more information about dedicated IP pools.
public struct GetDedicatedIpsInput {
    /// A token returned from a previous call to GetDedicatedIps to indicate the position of the dedicated IP pool in the list of IP pools.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to GetDedicatedIpsRequest. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?
    /// The name of the IP pool that the dedicated IP address is associated with.
    public var poolName: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        poolName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.poolName = poolName
    }
}

/// Information about the dedicated IP addresses that are associated with your Amazon Web Services account.
public struct GetDedicatedIpsOutput {
    /// A list of dedicated IP addresses that are associated with your Amazon Web Services account.
    public var dedicatedIps: [SESv2ClientTypes.DedicatedIp]?
    /// A token that indicates that there are additional dedicated IP addresses to list. To view additional addresses, issue another request to GetDedicatedIps, passing this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init(
        dedicatedIps: [SESv2ClientTypes.DedicatedIp]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dedicatedIps = dedicatedIps
        self.nextToken = nextToken
    }
}

/// Retrieve information about the status of the Deliverability dashboard for your Amazon Web Services account. When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and other metrics for your domains. You also gain the ability to perform predictive inbox placement tests. When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon SES and other Amazon Web Services services. For more information about the features and cost of a Deliverability dashboard subscription, see [Amazon Pinpoint Pricing](http://aws.amazon.com/pinpoint/pricing/).
public struct GetDeliverabilityDashboardOptionsInput {

    public init() { }
}

/// An object that shows the status of the Deliverability dashboard.
public struct GetDeliverabilityDashboardOptionsOutput {
    /// The current status of your Deliverability dashboard subscription. If this value is PENDING_EXPIRATION, your subscription is scheduled to expire at the end of the current calendar month.
    public var accountStatus: SESv2ClientTypes.DeliverabilityDashboardAccountStatus?
    /// An array of objects, one for each verified domain that you use to send email and currently has an active Deliverability dashboard subscription that isn’t scheduled to expire at the end of the current calendar month.
    public var activeSubscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]?
    /// Specifies whether the Deliverability dashboard is enabled. If this value is true, the dashboard is enabled.
    /// This member is required.
    public var dashboardEnabled: Swift.Bool
    /// An array of objects, one for each verified domain that you use to send email and currently has an active Deliverability dashboard subscription that's scheduled to expire at the end of the current calendar month.
    public var pendingExpirationSubscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]?
    /// The date when your current subscription to the Deliverability dashboard is scheduled to expire, if your subscription is scheduled to expire at the end of the current calendar month. This value is null if you have an active subscription that isn’t due to expire at the end of the month.
    public var subscriptionExpiryDate: Foundation.Date?

    public init(
        accountStatus: SESv2ClientTypes.DeliverabilityDashboardAccountStatus? = nil,
        activeSubscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]? = nil,
        dashboardEnabled: Swift.Bool = false,
        pendingExpirationSubscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]? = nil,
        subscriptionExpiryDate: Foundation.Date? = nil
    )
    {
        self.accountStatus = accountStatus
        self.activeSubscribedDomains = activeSubscribedDomains
        self.dashboardEnabled = dashboardEnabled
        self.pendingExpirationSubscribedDomains = pendingExpirationSubscribedDomains
        self.subscriptionExpiryDate = subscriptionExpiryDate
    }
}

/// A request to retrieve the results of a predictive inbox placement test.
public struct GetDeliverabilityTestReportInput {
    /// A unique string that identifies the predictive inbox placement test.
    /// This member is required.
    public var reportId: Swift.String?

    public init(
        reportId: Swift.String? = nil
    )
    {
        self.reportId = reportId
    }
}

extension SESv2ClientTypes {
    /// An object that contains inbox placement data for an email provider.
    public struct PlacementStatistics {
        /// The percentage of emails that were authenticated by using DomainKeys Identified Mail (DKIM) during the predictive inbox placement test.
        public var dkimPercentage: Swift.Double?
        /// The percentage of emails that arrived in recipients' inboxes during the predictive inbox placement test.
        public var inboxPercentage: Swift.Double?
        /// The percentage of emails that didn't arrive in recipients' inboxes at all during the predictive inbox placement test.
        public var missingPercentage: Swift.Double?
        /// The percentage of emails that arrived in recipients' spam or junk mail folders during the predictive inbox placement test.
        public var spamPercentage: Swift.Double?
        /// The percentage of emails that were authenticated by using Sender Policy Framework (SPF) during the predictive inbox placement test.
        public var spfPercentage: Swift.Double?

        public init(
            dkimPercentage: Swift.Double? = nil,
            inboxPercentage: Swift.Double? = nil,
            missingPercentage: Swift.Double? = nil,
            spamPercentage: Swift.Double? = nil,
            spfPercentage: Swift.Double? = nil
        )
        {
            self.dkimPercentage = dkimPercentage
            self.inboxPercentage = inboxPercentage
            self.missingPercentage = missingPercentage
            self.spamPercentage = spamPercentage
            self.spfPercentage = spfPercentage
        }
    }

}

extension SESv2ClientTypes {
    /// An object that describes how email sent during the predictive inbox placement test was handled by a certain email provider.
    public struct IspPlacement {
        /// The name of the email provider that the inbox placement data applies to.
        public var ispName: Swift.String?
        /// An object that contains inbox placement metrics for a specific email provider.
        public var placementStatistics: SESv2ClientTypes.PlacementStatistics?

        public init(
            ispName: Swift.String? = nil,
            placementStatistics: SESv2ClientTypes.PlacementStatistics? = nil
        )
        {
            self.ispName = ispName
            self.placementStatistics = placementStatistics
        }
    }

}

/// The results of the predictive inbox placement test.
public struct GetDeliverabilityTestReportOutput {
    /// An object that contains the results of the predictive inbox placement test.
    /// This member is required.
    public var deliverabilityTestReport: SESv2ClientTypes.DeliverabilityTestReport?
    /// An object that describes how the test email was handled by several email providers, including Gmail, Hotmail, Yahoo, AOL, and others.
    /// This member is required.
    public var ispPlacements: [SESv2ClientTypes.IspPlacement]?
    /// An object that contains the message that you sent when you performed this predictive inbox placement test.
    public var message: Swift.String?
    /// An object that specifies how many test messages that were sent during the predictive inbox placement test were delivered to recipients' inboxes, how many were sent to recipients' spam folders, and how many weren't delivered.
    /// This member is required.
    public var overallPlacement: SESv2ClientTypes.PlacementStatistics?
    /// An array of objects that define the tags (keys and values) that are associated with the predictive inbox placement test.
    public var tags: [SESv2ClientTypes.Tag]?

    public init(
        deliverabilityTestReport: SESv2ClientTypes.DeliverabilityTestReport? = nil,
        ispPlacements: [SESv2ClientTypes.IspPlacement]? = nil,
        message: Swift.String? = nil,
        overallPlacement: SESv2ClientTypes.PlacementStatistics? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil
    )
    {
        self.deliverabilityTestReport = deliverabilityTestReport
        self.ispPlacements = ispPlacements
        self.message = message
        self.overallPlacement = overallPlacement
        self.tags = tags
    }
}

/// Retrieve all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (PutDeliverabilityDashboardOption operation).
public struct GetDomainDeliverabilityCampaignInput {
    /// The unique identifier for the campaign. The Deliverability dashboard automatically generates and assigns this identifier to a campaign.
    /// This member is required.
    public var campaignId: Swift.String?

    public init(
        campaignId: Swift.String? = nil
    )
    {
        self.campaignId = campaignId
    }
}

/// An object that contains all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for.
public struct GetDomainDeliverabilityCampaignOutput {
    /// An object that contains the deliverability data for the campaign.
    /// This member is required.
    public var domainDeliverabilityCampaign: SESv2ClientTypes.DomainDeliverabilityCampaign?

    public init(
        domainDeliverabilityCampaign: SESv2ClientTypes.DomainDeliverabilityCampaign? = nil
    )
    {
        self.domainDeliverabilityCampaign = domainDeliverabilityCampaign
    }
}

/// A request to obtain deliverability metrics for a domain.
public struct GetDomainStatisticsReportInput {
    /// The domain that you want to obtain deliverability metrics for.
    /// This member is required.
    public var domain: Swift.String?
    /// The last day (in Unix time) that you want to obtain domain deliverability metrics for. The EndDate that you specify has to be less than or equal to 30 days after the StartDate.
    /// This member is required.
    public var endDate: Foundation.Date?
    /// The first day (in Unix time) that you want to obtain domain deliverability metrics for.
    /// This member is required.
    public var startDate: Foundation.Date?

    public init(
        domain: Swift.String? = nil,
        endDate: Foundation.Date? = nil,
        startDate: Foundation.Date? = nil
    )
    {
        self.domain = domain
        self.endDate = endDate
        self.startDate = startDate
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about email that was sent from the selected domain.
    public struct OverallVolume {
        /// An object that contains inbox and junk mail placement metrics for individual email providers.
        public var domainIspPlacements: [SESv2ClientTypes.DomainIspPlacement]?
        /// The percentage of emails that were sent from the domain that were read by their recipients.
        public var readRatePercent: Swift.Double?
        /// An object that contains information about the numbers of messages that arrived in recipients' inboxes and junk mail folders.
        public var volumeStatistics: SESv2ClientTypes.VolumeStatistics?

        public init(
            domainIspPlacements: [SESv2ClientTypes.DomainIspPlacement]? = nil,
            readRatePercent: Swift.Double? = nil,
            volumeStatistics: SESv2ClientTypes.VolumeStatistics? = nil
        )
        {
            self.domainIspPlacements = domainIspPlacements
            self.readRatePercent = readRatePercent
            self.volumeStatistics = volumeStatistics
        }
    }

}

/// An object that includes statistics that are related to the domain that you specified.
public struct GetDomainStatisticsReportOutput {
    /// An object that contains deliverability metrics for the domain that you specified. This object contains data for each day, starting on the StartDate and ending on the EndDate.
    /// This member is required.
    public var dailyVolumes: [SESv2ClientTypes.DailyVolume]?
    /// An object that contains deliverability metrics for the domain that you specified. The data in this object is a summary of all of the data that was collected from the StartDate to the EndDate.
    /// This member is required.
    public var overallVolume: SESv2ClientTypes.OverallVolume?

    public init(
        dailyVolumes: [SESv2ClientTypes.DailyVolume]? = nil,
        overallVolume: SESv2ClientTypes.OverallVolume? = nil
    )
    {
        self.dailyVolumes = dailyVolumes
        self.overallVolume = overallVolume
    }
}

/// A request to return details about an email identity.
public struct GetEmailIdentityInput {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init(
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
    }
}

extension SESv2ClientTypes {

    /// The status of the MAIL FROM domain. This status can have the following values:
    ///
    /// * PENDING – Amazon SES hasn't started searching for the MX record yet.
    ///
    /// * SUCCESS – Amazon SES detected the required MX record for the MAIL FROM domain.
    ///
    /// * FAILED – Amazon SES can't find the required MX record, or the record no longer exists.
    ///
    /// * TEMPORARY_FAILURE – A temporary issue occurred, which prevented Amazon SES from determining the status of the MAIL FROM domain.
    public enum MailFromDomainStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pending
        case success
        case temporaryFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [MailFromDomainStatus] {
            return [
                .failed,
                .pending,
                .success,
                .temporaryFailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case .temporaryFailure: return "TEMPORARY_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// A list of attributes that are associated with a MAIL FROM domain.
    public struct MailFromAttributes {
        /// The action to take if the required MX record can't be found when you send an email. When you set this value to USE_DEFAULT_VALUE, the mail is sent using amazonses.com as the MAIL FROM domain. When you set this value to REJECT_MESSAGE, the Amazon SES API v2 returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
        /// This member is required.
        public var behaviorOnMxFailure: SESv2ClientTypes.BehaviorOnMxFailure?
        /// The name of a domain that an email identity uses as a custom MAIL FROM domain.
        /// This member is required.
        public var mailFromDomain: Swift.String?
        /// The status of the MAIL FROM domain. This status can have the following values:
        ///
        /// * PENDING – Amazon SES hasn't started searching for the MX record yet.
        ///
        /// * SUCCESS – Amazon SES detected the required MX record for the MAIL FROM domain.
        ///
        /// * FAILED – Amazon SES can't find the required MX record, or the record no longer exists.
        ///
        /// * TEMPORARY_FAILURE – A temporary issue occurred, which prevented Amazon SES from determining the status of the MAIL FROM domain.
        /// This member is required.
        public var mailFromDomainStatus: SESv2ClientTypes.MailFromDomainStatus?

        public init(
            behaviorOnMxFailure: SESv2ClientTypes.BehaviorOnMxFailure? = nil,
            mailFromDomain: Swift.String? = nil,
            mailFromDomainStatus: SESv2ClientTypes.MailFromDomainStatus? = nil
        )
        {
            self.behaviorOnMxFailure = behaviorOnMxFailure
            self.mailFromDomain = mailFromDomain
            self.mailFromDomainStatus = mailFromDomainStatus
        }
    }

}

extension SESv2ClientTypes {

    public enum VerificationError: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dnsServerError
        case hostNotFound
        case invalidValue
        case serviceError
        case typeNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [VerificationError] {
            return [
                .dnsServerError,
                .hostNotFound,
                .invalidValue,
                .serviceError,
                .typeNotFound
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dnsServerError: return "DNS_SERVER_ERROR"
            case .hostNotFound: return "HOST_NOT_FOUND"
            case .invalidValue: return "INVALID_VALUE"
            case .serviceError: return "SERVICE_ERROR"
            case .typeNotFound: return "TYPE_NOT_FOUND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about the start of authority (SOA) record associated with the identity.
    public struct SOARecord {
        /// Administrative contact email from the SOA record.
        public var adminEmail: Swift.String?
        /// Primary name server specified in the SOA record.
        public var primaryNameServer: Swift.String?
        /// Serial number from the SOA record.
        public var serialNumber: Swift.Int

        public init(
            adminEmail: Swift.String? = nil,
            primaryNameServer: Swift.String? = nil,
            serialNumber: Swift.Int = 0
        )
        {
            self.adminEmail = adminEmail
            self.primaryNameServer = primaryNameServer
            self.serialNumber = serialNumber
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains additional information about the verification status for the identity.
    public struct VerificationInfo {
        /// Provides the reason for the failure describing why Amazon SES was not able to successfully verify the identity. Below are the possible values:
        ///
        /// * INVALID_VALUE – Amazon SES was able to find the record, but the value contained within the record was invalid. Ensure you have published the correct values for the record.
        ///
        /// * TYPE_NOT_FOUND – The queried hostname exists but does not have the requested type of DNS record. Ensure that you have published the correct type of DNS record.
        ///
        /// * HOST_NOT_FOUND – The queried hostname does not exist or was not reachable at the time of the request. Ensure that you have published the required DNS record(s).
        ///
        /// * SERVICE_ERROR – A temporary issue is preventing Amazon SES from determining the verification status of the domain.
        ///
        /// * DNS_SERVER_ERROR – The DNS server encountered an issue and was unable to complete the request.
        public var errorType: SESv2ClientTypes.VerificationError?
        /// The last time a verification attempt was made for this identity.
        public var lastCheckedTimestamp: Foundation.Date?
        /// The last time a successful verification was made for this identity.
        public var lastSuccessTimestamp: Foundation.Date?
        /// An object that contains information about the start of authority (SOA) record associated with the identity.
        public var soaRecord: SESv2ClientTypes.SOARecord?

        public init(
            errorType: SESv2ClientTypes.VerificationError? = nil,
            lastCheckedTimestamp: Foundation.Date? = nil,
            lastSuccessTimestamp: Foundation.Date? = nil,
            soaRecord: SESv2ClientTypes.SOARecord? = nil
        )
        {
            self.errorType = errorType
            self.lastCheckedTimestamp = lastCheckedTimestamp
            self.lastSuccessTimestamp = lastSuccessTimestamp
            self.soaRecord = soaRecord
        }
    }

}

extension SESv2ClientTypes {

    public enum VerificationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case notStarted
        case pending
        case success
        case temporaryFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [VerificationStatus] {
            return [
                .failed,
                .notStarted,
                .pending,
                .success,
                .temporaryFailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .notStarted: return "NOT_STARTED"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case .temporaryFailure: return "TEMPORARY_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Details about an email identity.
public struct GetEmailIdentityOutput {
    /// The configuration set used by default when sending from this identity.
    public var configurationSetName: Swift.String?
    /// An object that contains information about the DKIM attributes for the identity.
    public var dkimAttributes: SESv2ClientTypes.DkimAttributes?
    /// The feedback forwarding configuration for the identity. If the value is true, you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the Return-Path header of the original email. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).
    public var feedbackForwardingStatus: Swift.Bool
    /// The email identity type. Note: the MANAGED_DOMAIN identity type is not supported.
    public var identityType: SESv2ClientTypes.IdentityType?
    /// An object that contains information about the Mail-From attributes for the email identity.
    public var mailFromAttributes: SESv2ClientTypes.MailFromAttributes?
    /// A map of policy names to policies.
    public var policies: [Swift.String: Swift.String]?
    /// An array of objects that define the tags (keys and values) that are associated with the email identity.
    public var tags: [SESv2ClientTypes.Tag]?
    /// An object that contains additional information about the verification status for the identity.
    public var verificationInfo: SESv2ClientTypes.VerificationInfo?
    /// The verification status of the identity. The status can be one of the following:
    ///
    /// * PENDING – The verification process was initiated, but Amazon SES hasn't yet been able to verify the identity.
    ///
    /// * SUCCESS – The verification process completed successfully.
    ///
    /// * FAILED – The verification process failed.
    ///
    /// * TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES from determining the verification status of the identity.
    ///
    /// * NOT_STARTED – The verification process hasn't been initiated for the identity.
    public var verificationStatus: SESv2ClientTypes.VerificationStatus?
    /// Specifies whether or not the identity is verified. You can only send email from verified email addresses or domains. For more information about verifying identities, see the [Amazon Pinpoint User Guide](https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html).
    public var verifiedForSendingStatus: Swift.Bool

    public init(
        configurationSetName: Swift.String? = nil,
        dkimAttributes: SESv2ClientTypes.DkimAttributes? = nil,
        feedbackForwardingStatus: Swift.Bool = false,
        identityType: SESv2ClientTypes.IdentityType? = nil,
        mailFromAttributes: SESv2ClientTypes.MailFromAttributes? = nil,
        policies: [Swift.String: Swift.String]? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil,
        verificationInfo: SESv2ClientTypes.VerificationInfo? = nil,
        verificationStatus: SESv2ClientTypes.VerificationStatus? = nil,
        verifiedForSendingStatus: Swift.Bool = false
    )
    {
        self.configurationSetName = configurationSetName
        self.dkimAttributes = dkimAttributes
        self.feedbackForwardingStatus = feedbackForwardingStatus
        self.identityType = identityType
        self.mailFromAttributes = mailFromAttributes
        self.policies = policies
        self.tags = tags
        self.verificationInfo = verificationInfo
        self.verificationStatus = verificationStatus
        self.verifiedForSendingStatus = verifiedForSendingStatus
    }
}

/// A request to return the policies of an email identity.
public struct GetEmailIdentityPoliciesInput {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init(
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
    }
}

/// Identity policies associated with email identity.
public struct GetEmailIdentityPoliciesOutput {
    /// A map of policy names to policies.
    public var policies: [Swift.String: Swift.String]?

    public init(
        policies: [Swift.String: Swift.String]? = nil
    )
    {
        self.policies = policies
    }
}

/// Represents a request to display the template object (which includes the subject line, HTML part and text part) for the template you specify.
public struct GetEmailTemplateInput {
    /// The name of the template.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

/// The following element is returned by the service.
public struct GetEmailTemplateOutput {
    /// The content of the email template, composed of a subject line, an HTML part, and a text-only part.
    /// This member is required.
    public var templateContent: SESv2ClientTypes.EmailTemplateContent?
    /// The name of the template.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        templateContent: SESv2ClientTypes.EmailTemplateContent? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateContent = templateContent
        self.templateName = templateName
    }
}

/// Represents a request to retrieve information about an export job using the export job ID.
public struct GetExportJobInput {
    /// The export job ID.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct GetExportJobOutput {
    /// The timestamp of when the export job was completed.
    public var completedTimestamp: Foundation.Date?
    /// The timestamp of when the export job was created.
    public var createdTimestamp: Foundation.Date?
    /// The data source of the export job.
    public var exportDataSource: SESv2ClientTypes.ExportDataSource?
    /// The destination of the export job.
    public var exportDestination: SESv2ClientTypes.ExportDestination?
    /// The type of source of the export job.
    public var exportSourceType: SESv2ClientTypes.ExportSourceType?
    /// The failure details about an export job.
    public var failureInfo: SESv2ClientTypes.FailureInfo?
    /// The export job ID.
    public var jobId: Swift.String?
    /// The status of the export job.
    public var jobStatus: SESv2ClientTypes.JobStatus?
    /// The statistics about the export job.
    public var statistics: SESv2ClientTypes.ExportStatistics?

    public init(
        completedTimestamp: Foundation.Date? = nil,
        createdTimestamp: Foundation.Date? = nil,
        exportDataSource: SESv2ClientTypes.ExportDataSource? = nil,
        exportDestination: SESv2ClientTypes.ExportDestination? = nil,
        exportSourceType: SESv2ClientTypes.ExportSourceType? = nil,
        failureInfo: SESv2ClientTypes.FailureInfo? = nil,
        jobId: Swift.String? = nil,
        jobStatus: SESv2ClientTypes.JobStatus? = nil,
        statistics: SESv2ClientTypes.ExportStatistics? = nil
    )
    {
        self.completedTimestamp = completedTimestamp
        self.createdTimestamp = createdTimestamp
        self.exportDataSource = exportDataSource
        self.exportDestination = exportDestination
        self.exportSourceType = exportSourceType
        self.failureInfo = failureInfo
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.statistics = statistics
    }
}

/// Represents a request for information about an import job using the import job ID.
public struct GetImportJobInput {
    /// The ID of the import job.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct GetImportJobOutput {
    /// The time stamp of when the import job was completed.
    public var completedTimestamp: Foundation.Date?
    /// The time stamp of when the import job was created.
    public var createdTimestamp: Foundation.Date?
    /// The number of records that failed processing because of invalid input or other reasons.
    public var failedRecordsCount: Swift.Int?
    /// The failure details about an import job.
    public var failureInfo: SESv2ClientTypes.FailureInfo?
    /// The data source of the import job.
    public var importDataSource: SESv2ClientTypes.ImportDataSource?
    /// The destination of the import job.
    public var importDestination: SESv2ClientTypes.ImportDestination?
    /// A string that represents the import job ID.
    public var jobId: Swift.String?
    /// The status of the import job.
    public var jobStatus: SESv2ClientTypes.JobStatus?
    /// The current number of records processed.
    public var processedRecordsCount: Swift.Int?

    public init(
        completedTimestamp: Foundation.Date? = nil,
        createdTimestamp: Foundation.Date? = nil,
        failedRecordsCount: Swift.Int? = nil,
        failureInfo: SESv2ClientTypes.FailureInfo? = nil,
        importDataSource: SESv2ClientTypes.ImportDataSource? = nil,
        importDestination: SESv2ClientTypes.ImportDestination? = nil,
        jobId: Swift.String? = nil,
        jobStatus: SESv2ClientTypes.JobStatus? = nil,
        processedRecordsCount: Swift.Int? = nil
    )
    {
        self.completedTimestamp = completedTimestamp
        self.createdTimestamp = createdTimestamp
        self.failedRecordsCount = failedRecordsCount
        self.failureInfo = failureInfo
        self.importDataSource = importDataSource
        self.importDestination = importDestination
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.processedRecordsCount = processedRecordsCount
    }
}

/// A request to return information about a message.
public struct GetMessageInsightsInput {
    /// A MessageId is a unique identifier for a message, and is returned when sending emails through Amazon SES.
    /// This member is required.
    public var messageId: Swift.String?

    public init(
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

/// Information about a message.
public struct GetMessageInsightsOutput {
    /// A list of tags, in the form of name/value pairs, that were applied to the email you sent, along with Amazon SES [Auto-Tags](https://docs.aws.amazon.com/ses/latest/dg/monitor-using-event-publishing.html).
    public var emailTags: [SESv2ClientTypes.MessageTag]?
    /// The from address used to send the message.
    public var fromEmailAddress: Swift.String?
    /// A set of insights associated with the message.
    public var insights: [SESv2ClientTypes.EmailInsights]?
    /// A unique identifier for the message.
    public var messageId: Swift.String?
    /// The subject line of the message.
    public var subject: Swift.String?

    public init(
        emailTags: [SESv2ClientTypes.MessageTag]? = nil,
        fromEmailAddress: Swift.String? = nil,
        insights: [SESv2ClientTypes.EmailInsights]? = nil,
        messageId: Swift.String? = nil,
        subject: Swift.String? = nil
    )
    {
        self.emailTags = emailTags
        self.fromEmailAddress = fromEmailAddress
        self.insights = insights
        self.messageId = messageId
        self.subject = subject
    }
}

extension GetMessageInsightsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMessageInsightsOutput(emailTags: \(Swift.String(describing: emailTags)), insights: \(Swift.String(describing: insights)), messageId: \(Swift.String(describing: messageId)), fromEmailAddress: \"CONTENT_REDACTED\", subject: \"CONTENT_REDACTED\")"}
}

/// A request to retrieve information about an email address that's on the suppression list for your account.
public struct GetSuppressedDestinationInput {
    /// The email address that's on the account suppression list.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init(
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

extension SESv2ClientTypes {
    /// An object that contains additional attributes that are related an email address that is on the suppression list for your account.
    public struct SuppressedDestinationAttributes {
        /// A unique identifier that's generated when an email address is added to the suppression list for your account.
        public var feedbackId: Swift.String?
        /// The unique identifier of the email message that caused the email address to be added to the suppression list for your account.
        public var messageId: Swift.String?

        public init(
            feedbackId: Swift.String? = nil,
            messageId: Swift.String? = nil
        )
        {
            self.feedbackId = feedbackId
            self.messageId = messageId
        }
    }

}

extension SESv2ClientTypes {
    /// An object that contains information about an email address that is on the suppression list for your account.
    public struct SuppressedDestination {
        /// An optional value that can contain additional information about the reasons that the address was added to the suppression list for your account.
        public var attributes: SESv2ClientTypes.SuppressedDestinationAttributes?
        /// The email address that is on the suppression list for your account.
        /// This member is required.
        public var emailAddress: Swift.String?
        /// The date and time when the suppressed destination was last updated, shown in Unix time format.
        /// This member is required.
        public var lastUpdateTime: Foundation.Date?
        /// The reason that the address was added to the suppression list for your account.
        /// This member is required.
        public var reason: SESv2ClientTypes.SuppressionListReason?

        public init(
            attributes: SESv2ClientTypes.SuppressedDestinationAttributes? = nil,
            emailAddress: Swift.String? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            reason: SESv2ClientTypes.SuppressionListReason? = nil
        )
        {
            self.attributes = attributes
            self.emailAddress = emailAddress
            self.lastUpdateTime = lastUpdateTime
            self.reason = reason
        }
    }

}

/// Information about the suppressed email address.
public struct GetSuppressedDestinationOutput {
    /// An object containing information about the suppressed email address.
    /// This member is required.
    public var suppressedDestination: SESv2ClientTypes.SuppressedDestination?

    public init(
        suppressedDestination: SESv2ClientTypes.SuppressedDestination? = nil
    )
    {
        self.suppressedDestination = suppressedDestination
    }
}

extension SESv2ClientTypes {
    /// Information about an email identity.
    public struct IdentityInfo {
        /// The address or domain of the identity.
        public var identityName: Swift.String?
        /// The email identity type. Note: the MANAGED_DOMAIN type is not supported for email identity types.
        public var identityType: SESv2ClientTypes.IdentityType?
        /// Indicates whether or not you can send email from the identity. An identity is an email address or domain that you send email from. Before you can send email from an identity, you have to demostrate that you own the identity, and that you authorize Amazon SES to send email from that identity.
        public var sendingEnabled: Swift.Bool
        /// The verification status of the identity. The status can be one of the following:
        ///
        /// * PENDING – The verification process was initiated, but Amazon SES hasn't yet been able to verify the identity.
        ///
        /// * SUCCESS – The verification process completed successfully.
        ///
        /// * FAILED – The verification process failed.
        ///
        /// * TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES from determining the verification status of the identity.
        ///
        /// * NOT_STARTED – The verification process hasn't been initiated for the identity.
        public var verificationStatus: SESv2ClientTypes.VerificationStatus?

        public init(
            identityName: Swift.String? = nil,
            identityType: SESv2ClientTypes.IdentityType? = nil,
            sendingEnabled: Swift.Bool = false,
            verificationStatus: SESv2ClientTypes.VerificationStatus? = nil
        )
        {
            self.identityName = identityName
            self.identityType = identityType
            self.sendingEnabled = sendingEnabled
            self.verificationStatus = verificationStatus
        }
    }

}

extension SESv2ClientTypes {

    /// The destination of the import job, which can be used to list import jobs that have a certain ImportDestinationType.
    public enum ImportDestinationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contactList
        case suppressionList
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportDestinationType] {
            return [
                .contactList,
                .suppressionList
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contactList: return "CONTACT_LIST"
            case .suppressionList: return "SUPPRESSION_LIST"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// A summary of the import job.
    public struct ImportJobSummary {
        /// The date and time when the import job was created.
        public var createdTimestamp: Foundation.Date?
        /// The number of records that failed processing because of invalid input or other reasons.
        public var failedRecordsCount: Swift.Int?
        /// An object that contains details about the resource destination the import job is going to target.
        public var importDestination: SESv2ClientTypes.ImportDestination?
        /// A string that represents a job ID.
        public var jobId: Swift.String?
        /// The status of a job.
        ///
        /// * CREATED – Job has just been created.
        ///
        /// * PROCESSING – Job is processing.
        ///
        /// * ERROR – An error occurred during processing.
        ///
        /// * COMPLETED – Job has completed processing successfully.
        public var jobStatus: SESv2ClientTypes.JobStatus?
        /// The current number of records processed.
        public var processedRecordsCount: Swift.Int?

        public init(
            createdTimestamp: Foundation.Date? = nil,
            failedRecordsCount: Swift.Int? = nil,
            importDestination: SESv2ClientTypes.ImportDestination? = nil,
            jobId: Swift.String? = nil,
            jobStatus: SESv2ClientTypes.JobStatus? = nil,
            processedRecordsCount: Swift.Int? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.failedRecordsCount = failedRecordsCount
            self.importDestination = importDestination
            self.jobId = jobId
            self.jobStatus = jobStatus
            self.processedRecordsCount = processedRecordsCount
        }
    }

}

/// The specified request includes an invalid or expired token.
public struct InvalidNextTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNextTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A request to obtain a list of configuration sets for your Amazon SES account in the current Amazon Web Services Region.
public struct ListConfigurationSetsInput {
    /// A token returned from a previous call to ListConfigurationSets to indicate the position in the list of configuration sets.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListConfigurationSets. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

/// A list of configuration sets in your Amazon SES account in the current Amazon Web Services Region.
public struct ListConfigurationSetsOutput {
    /// An array that contains all of the configuration sets in your Amazon SES account in the current Amazon Web Services Region.
    public var configurationSets: [Swift.String]?
    /// A token that indicates that there are additional configuration sets to list. To view additional configuration sets, issue another request to ListConfigurationSets, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init(
        configurationSets: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationSets = configurationSets
        self.nextToken = nextToken
    }
}

public struct ListContactListsInput {
    /// A string token indicating that there might be additional contact lists available to be listed. Use the token provided in the Response to use in the subsequent call to ListContactLists with the same parameters to retrieve the next page of contact lists.
    public var nextToken: Swift.String?
    /// Maximum number of contact lists to return at once. Use this parameter to paginate results. If additional contact lists exist beyond the specified limit, the NextToken element is sent in the response. Use the NextToken value in subsequent requests to retrieve additional lists.
    public var pageSize: Swift.Int?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

public struct ListContactListsOutput {
    /// The available contact lists.
    public var contactLists: [SESv2ClientTypes.ContactList]?
    /// A string token indicating that there might be additional contact lists available to be listed. Copy this token to a subsequent call to ListContactLists with the same parameters to retrieve the next page of contact lists.
    public var nextToken: Swift.String?

    public init(
        contactLists: [SESv2ClientTypes.ContactList]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.contactLists = contactLists
        self.nextToken = nextToken
    }
}

extension SESv2ClientTypes {
    /// Used for filtering by a specific topic preference.
    public struct TopicFilter {
        /// The name of a topic on which you wish to apply the filter.
        public var topicName: Swift.String?
        /// Notes that the default subscription status should be applied to a contact because the contact has not noted their preference for subscribing to a topic.
        public var useDefaultIfPreferenceUnavailable: Swift.Bool

        public init(
            topicName: Swift.String? = nil,
            useDefaultIfPreferenceUnavailable: Swift.Bool = false
        )
        {
            self.topicName = topicName
            self.useDefaultIfPreferenceUnavailable = useDefaultIfPreferenceUnavailable
        }
    }

}

extension SESv2ClientTypes {
    /// A filter that can be applied to a list of contacts.
    public struct ListContactsFilter {
        /// The status by which you are filtering: OPT_IN or OPT_OUT.
        public var filteredStatus: SESv2ClientTypes.SubscriptionStatus?
        /// Used for filtering by a specific topic preference.
        public var topicFilter: SESv2ClientTypes.TopicFilter?

        public init(
            filteredStatus: SESv2ClientTypes.SubscriptionStatus? = nil,
            topicFilter: SESv2ClientTypes.TopicFilter? = nil
        )
        {
            self.filteredStatus = filteredStatus
            self.topicFilter = topicFilter
        }
    }

}

public struct ListContactsInput {
    /// The name of the contact list.
    /// This member is required.
    public var contactListName: Swift.String?
    /// A filter that can be applied to a list of contacts.
    public var filter: SESv2ClientTypes.ListContactsFilter?
    /// A string token indicating that there might be additional contacts available to be listed. Use the token provided in the Response to use in the subsequent call to ListContacts with the same parameters to retrieve the next page of contacts.
    public var nextToken: Swift.String?
    /// The number of contacts that may be returned at once, which is dependent on if there are more or less contacts than the value of the PageSize. Use this parameter to paginate results. If additional contacts exist beyond the specified limit, the NextToken element is sent in the response. Use the NextToken value in subsequent requests to retrieve additional contacts.
    public var pageSize: Swift.Int?

    public init(
        contactListName: Swift.String? = nil,
        filter: SESv2ClientTypes.ListContactsFilter? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.contactListName = contactListName
        self.filter = filter
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

public struct ListContactsOutput {
    /// The contacts present in a specific contact list.
    public var contacts: [SESv2ClientTypes.Contact]?
    /// A string token indicating that there might be additional contacts available to be listed. Copy this token to a subsequent call to ListContacts with the same parameters to retrieve the next page of contacts.
    public var nextToken: Swift.String?

    public init(
        contacts: [SESv2ClientTypes.Contact]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.contacts = contacts
        self.nextToken = nextToken
    }
}

/// Represents a request to list the existing custom verification email templates for your account.
public struct ListCustomVerificationEmailTemplatesInput {
    /// A token returned from a previous call to ListCustomVerificationEmailTemplates to indicate the position in the list of custom verification email templates.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListCustomVerificationEmailTemplates. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 1, and can be no more than 50.
    public var pageSize: Swift.Int?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

/// The following elements are returned by the service.
public struct ListCustomVerificationEmailTemplatesOutput {
    /// A list of the custom verification email templates that exist in your account.
    public var customVerificationEmailTemplates: [SESv2ClientTypes.CustomVerificationEmailTemplateMetadata]?
    /// A token indicating that there are additional custom verification email templates available to be listed. Pass this token to a subsequent call to ListCustomVerificationEmailTemplates to retrieve the next 50 custom verification email templates.
    public var nextToken: Swift.String?

    public init(
        customVerificationEmailTemplates: [SESv2ClientTypes.CustomVerificationEmailTemplateMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.customVerificationEmailTemplates = customVerificationEmailTemplates
        self.nextToken = nextToken
    }
}

/// A request to obtain a list of dedicated IP pools.
public struct ListDedicatedIpPoolsInput {
    /// A token returned from a previous call to ListDedicatedIpPools to indicate the position in the list of dedicated IP pools.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListDedicatedIpPools. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

/// A list of dedicated IP pools.
public struct ListDedicatedIpPoolsOutput {
    /// A list of all of the dedicated IP pools that are associated with your Amazon Web Services account in the current Region.
    public var dedicatedIpPools: [Swift.String]?
    /// A token that indicates that there are additional IP pools to list. To view additional IP pools, issue another request to ListDedicatedIpPools, passing this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init(
        dedicatedIpPools: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dedicatedIpPools = dedicatedIpPools
        self.nextToken = nextToken
    }
}

/// A request to list all of the predictive inbox placement tests that you've performed.
public struct ListDeliverabilityTestReportsInput {
    /// A token returned from a previous call to ListDeliverabilityTestReports to indicate the position in the list of predictive inbox placement tests.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListDeliverabilityTestReports. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 0, and can be no more than 1000.
    public var pageSize: Swift.Int?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

/// A list of the predictive inbox placement test reports that are available for your account, regardless of whether or not those tests are complete.
public struct ListDeliverabilityTestReportsOutput {
    /// An object that contains a lists of predictive inbox placement tests that you've performed.
    /// This member is required.
    public var deliverabilityTestReports: [SESv2ClientTypes.DeliverabilityTestReport]?
    /// A token that indicates that there are additional predictive inbox placement tests to list. To view additional predictive inbox placement tests, issue another request to ListDeliverabilityTestReports, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init(
        deliverabilityTestReports: [SESv2ClientTypes.DeliverabilityTestReport]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deliverabilityTestReports = deliverabilityTestReports
        self.nextToken = nextToken
    }
}

/// Retrieve deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard.
public struct ListDomainDeliverabilityCampaignsInput {
    /// The last day that you want to obtain deliverability data for. This value has to be less than or equal to 30 days after the value of the StartDate parameter.
    /// This member is required.
    public var endDate: Foundation.Date?
    /// A token that’s returned from a previous call to the ListDomainDeliverabilityCampaigns operation. This token indicates the position of a campaign in the list of campaigns.
    public var nextToken: Swift.String?
    /// The maximum number of results to include in response to a single call to the ListDomainDeliverabilityCampaigns operation. If the number of results is larger than the number that you specify in this parameter, the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?
    /// The first day that you want to obtain deliverability data for.
    /// This member is required.
    public var startDate: Foundation.Date?
    /// The domain to obtain deliverability data for.
    /// This member is required.
    public var subscribedDomain: Swift.String?

    public init(
        endDate: Foundation.Date? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        startDate: Foundation.Date? = nil,
        subscribedDomain: Swift.String? = nil
    )
    {
        self.endDate = endDate
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.startDate = startDate
        self.subscribedDomain = subscribedDomain
    }
}

/// An array of objects that provide deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard for the domain.
public struct ListDomainDeliverabilityCampaignsOutput {
    /// An array of responses, one for each campaign that used the domain to send email during the specified time range.
    /// This member is required.
    public var domainDeliverabilityCampaigns: [SESv2ClientTypes.DomainDeliverabilityCampaign]?
    /// A token that’s returned from a previous call to the ListDomainDeliverabilityCampaigns operation. This token indicates the position of the campaign in the list of campaigns.
    public var nextToken: Swift.String?

    public init(
        domainDeliverabilityCampaigns: [SESv2ClientTypes.DomainDeliverabilityCampaign]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainDeliverabilityCampaigns = domainDeliverabilityCampaigns
        self.nextToken = nextToken
    }
}

/// A request to list all of the email identities associated with your Amazon Web Services account. This list includes identities that you've already verified, identities that are unverified, and identities that were verified in the past, but are no longer verified.
public struct ListEmailIdentitiesInput {
    /// A token returned from a previous call to ListEmailIdentities to indicate the position in the list of identities.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListEmailIdentities. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 0, and can be no more than 1000.
    public var pageSize: Swift.Int?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

/// A list of all of the identities that you've attempted to verify, regardless of whether or not those identities were successfully verified.
public struct ListEmailIdentitiesOutput {
    /// An array that includes all of the email identities associated with your Amazon Web Services account.
    public var emailIdentities: [SESv2ClientTypes.IdentityInfo]?
    /// A token that indicates that there are additional configuration sets to list. To view additional configuration sets, issue another request to ListEmailIdentities, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init(
        emailIdentities: [SESv2ClientTypes.IdentityInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.emailIdentities = emailIdentities
        self.nextToken = nextToken
    }
}

/// Represents a request to list the email templates present in your Amazon SES account in the current Amazon Web Services Region. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct ListEmailTemplatesInput {
    /// A token returned from a previous call to ListEmailTemplates to indicate the position in the list of email templates.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListEmailTemplates. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 1, and can be no more than 100.
    public var pageSize: Swift.Int?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

/// The following elements are returned by the service.
public struct ListEmailTemplatesOutput {
    /// A token indicating that there are additional email templates available to be listed. Pass this token to a subsequent ListEmailTemplates call to retrieve the next 10 email templates.
    public var nextToken: Swift.String?
    /// An array the contains the name and creation time stamp for each template in your Amazon SES account.
    public var templatesMetadata: [SESv2ClientTypes.EmailTemplateMetadata]?

    public init(
        nextToken: Swift.String? = nil,
        templatesMetadata: [SESv2ClientTypes.EmailTemplateMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.templatesMetadata = templatesMetadata
    }
}

/// Represents a request to list all export jobs with filters.
public struct ListExportJobsInput {
    /// A value used to list export jobs that have a certain ExportSourceType.
    public var exportSourceType: SESv2ClientTypes.ExportSourceType?
    /// A value used to list export jobs that have a certain JobStatus.
    public var jobStatus: SESv2ClientTypes.JobStatus?
    /// The pagination token returned from a previous call to ListExportJobs to indicate the position in the list of export jobs.
    public var nextToken: Swift.String?
    /// Maximum number of export jobs to return at once. Use this parameter to paginate results. If additional export jobs exist beyond the specified limit, the NextToken element is sent in the response. Use the NextToken value in subsequent calls to ListExportJobs to retrieve additional export jobs.
    public var pageSize: Swift.Int?

    public init(
        exportSourceType: SESv2ClientTypes.ExportSourceType? = nil,
        jobStatus: SESv2ClientTypes.JobStatus? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.exportSourceType = exportSourceType
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct ListExportJobsOutput {
    /// A list of the export job summaries.
    public var exportJobs: [SESv2ClientTypes.ExportJobSummary]?
    /// A string token indicating that there might be additional export jobs available to be listed. Use this token to a subsequent call to ListExportJobs with the same parameters to retrieve the next page of export jobs.
    public var nextToken: Swift.String?

    public init(
        exportJobs: [SESv2ClientTypes.ExportJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exportJobs = exportJobs
        self.nextToken = nextToken
    }
}

/// Represents a request to list all of the import jobs for a data destination within the specified maximum number of import jobs.
public struct ListImportJobsInput {
    /// The destination of the import job, which can be used to list import jobs that have a certain ImportDestinationType.
    public var importDestinationType: SESv2ClientTypes.ImportDestinationType?
    /// A string token indicating that there might be additional import jobs available to be listed. Copy this token to a subsequent call to ListImportJobs with the same parameters to retrieve the next page of import jobs.
    public var nextToken: Swift.String?
    /// Maximum number of import jobs to return at once. Use this parameter to paginate results. If additional import jobs exist beyond the specified limit, the NextToken element is sent in the response. Use the NextToken value in subsequent requests to retrieve additional addresses.
    public var pageSize: Swift.Int?

    public init(
        importDestinationType: SESv2ClientTypes.ImportDestinationType? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.importDestinationType = importDestinationType
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct ListImportJobsOutput {
    /// A list of the import job summaries.
    public var importJobs: [SESv2ClientTypes.ImportJobSummary]?
    /// A string token indicating that there might be additional import jobs available to be listed. Copy this token to a subsequent call to ListImportJobs with the same parameters to retrieve the next page of import jobs.
    public var nextToken: Swift.String?

    public init(
        importJobs: [SESv2ClientTypes.ImportJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.importJobs = importJobs
        self.nextToken = nextToken
    }
}

extension SESv2ClientTypes {
    /// An object used to specify a list or topic to which an email belongs, which will be used when a contact chooses to unsubscribe.
    public struct ListManagementOptions {
        /// The name of the contact list.
        /// This member is required.
        public var contactListName: Swift.String?
        /// The name of the topic.
        public var topicName: Swift.String?

        public init(
            contactListName: Swift.String? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.contactListName = contactListName
            self.topicName = topicName
        }
    }

}

extension SESv2ClientTypes {

    /// The ListRecommendations filter type. This can be one of the following:
    ///
    /// * TYPE – The recommendation type, with values like DKIM, SPF, DMARC or BIMI.
    ///
    /// * IMPACT – The recommendation impact, with values like HIGH or LOW.
    ///
    /// * STATUS – The recommendation status, with values like OPEN or FIXED.
    ///
    /// * RESOURCE_ARN – The resource affected by the recommendation, with values like arn:aws:ses:us-east-1:123456789012:identity/example.com.
    public enum ListRecommendationsFilterKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case impact
        case resourceArn
        case status
        case type
        case sdkUnknown(Swift.String)

        public static var allCases: [ListRecommendationsFilterKey] {
            return [
                .impact,
                .resourceArn,
                .status,
                .type
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .impact: return "IMPACT"
            case .resourceArn: return "RESOURCE_ARN"
            case .status: return "STATUS"
            case .type: return "TYPE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Represents a request to list the existing recommendations for your account.
public struct ListRecommendationsInput {
    /// Filters applied when retrieving recommendations. Can eiter be an individual filter, or combinations of STATUS and IMPACT or STATUS and TYPE
    public var filter: [Swift.String: Swift.String]?
    /// A token returned from a previous call to ListRecommendations to indicate the position in the list of recommendations.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListRecommendations. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 1, and can be no more than 100.
    public var pageSize: Swift.Int?

    public init(
        filter: [Swift.String: Swift.String]? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.filter = filter
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

extension SESv2ClientTypes {

    public enum RecommendationImpact: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationImpact] {
            return [
                .high,
                .low
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {

    public enum RecommendationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fixed
        case `open`
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationStatus] {
            return [
                .fixed,
                .open
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fixed: return "FIXED"
            case .open: return "OPEN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {

    public enum RecommendationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bimi
        case dkim
        case dmarc
        case spf
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationType] {
            return [
                .bimi,
                .dkim,
                .dmarc,
                .spf
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bimi: return "BIMI"
            case .dkim: return "DKIM"
            case .dmarc: return "DMARC"
            case .spf: return "SPF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SESv2ClientTypes {
    /// A recommendation generated for your account.
    public struct Recommendation {
        /// The first time this issue was encountered and the recommendation was generated.
        public var createdTimestamp: Foundation.Date?
        /// The recommendation description / disambiguator - e.g. DKIM1 and DKIM2 are different recommendations about your DKIM setup.
        public var description: Swift.String?
        /// The recommendation impact, with values like HIGH or LOW.
        public var impact: SESv2ClientTypes.RecommendationImpact?
        /// The last time the recommendation was updated.
        public var lastUpdatedTimestamp: Foundation.Date?
        /// The resource affected by the recommendation, with values like arn:aws:ses:us-east-1:123456789012:identity/example.com.
        public var resourceArn: Swift.String?
        /// The recommendation status, with values like OPEN or FIXED.
        public var status: SESv2ClientTypes.RecommendationStatus?
        /// The recommendation type, with values like DKIM, SPF, DMARC or BIMI.
        public var type: SESv2ClientTypes.RecommendationType?

        public init(
            createdTimestamp: Foundation.Date? = nil,
            description: Swift.String? = nil,
            impact: SESv2ClientTypes.RecommendationImpact? = nil,
            lastUpdatedTimestamp: Foundation.Date? = nil,
            resourceArn: Swift.String? = nil,
            status: SESv2ClientTypes.RecommendationStatus? = nil,
            type: SESv2ClientTypes.RecommendationType? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.description = description
            self.impact = impact
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.resourceArn = resourceArn
            self.status = status
            self.type = type
        }
    }

}

/// Contains the response to your request to retrieve the list of recommendations for your account.
public struct ListRecommendationsOutput {
    /// A string token indicating that there might be additional recommendations available to be listed. Use the token provided in the ListRecommendationsResponse to use in the subsequent call to ListRecommendations with the same parameters to retrieve the next page of recommendations.
    public var nextToken: Swift.String?
    /// The recommendations applicable to your account.
    public var recommendations: [SESv2ClientTypes.Recommendation]?

    public init(
        nextToken: Swift.String? = nil,
        recommendations: [SESv2ClientTypes.Recommendation]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendations = recommendations
    }
}

/// A request to obtain a list of email destinations that are on the suppression list for your account.
public struct ListSuppressedDestinationsInput {
    /// Used to filter the list of suppressed email destinations so that it only includes addresses that were added to the list before a specific date.
    public var endDate: Foundation.Date?
    /// A token returned from a previous call to ListSuppressedDestinations to indicate the position in the list of suppressed email addresses.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListSuppressedDestinations. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?
    /// The factors that caused the email address to be added to .
    public var reasons: [SESv2ClientTypes.SuppressionListReason]?
    /// Used to filter the list of suppressed email destinations so that it only includes addresses that were added to the list after a specific date.
    public var startDate: Foundation.Date?

    public init(
        endDate: Foundation.Date? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        reasons: [SESv2ClientTypes.SuppressionListReason]? = nil,
        startDate: Foundation.Date? = nil
    )
    {
        self.endDate = endDate
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.reasons = reasons
        self.startDate = startDate
    }
}

extension SESv2ClientTypes {
    /// A summary that describes the suppressed email address.
    public struct SuppressedDestinationSummary {
        /// The email address that's on the suppression list for your account.
        /// This member is required.
        public var emailAddress: Swift.String?
        /// The date and time when the suppressed destination was last updated, shown in Unix time format.
        /// This member is required.
        public var lastUpdateTime: Foundation.Date?
        /// The reason that the address was added to the suppression list for your account.
        /// This member is required.
        public var reason: SESv2ClientTypes.SuppressionListReason?

        public init(
            emailAddress: Swift.String? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            reason: SESv2ClientTypes.SuppressionListReason? = nil
        )
        {
            self.emailAddress = emailAddress
            self.lastUpdateTime = lastUpdateTime
            self.reason = reason
        }
    }

}

/// A list of suppressed email addresses.
public struct ListSuppressedDestinationsOutput {
    /// A token that indicates that there are additional email addresses on the suppression list for your account. To view additional suppressed addresses, issue another request to ListSuppressedDestinations, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?
    /// A list of summaries, each containing a summary for a suppressed email destination.
    public var suppressedDestinationSummaries: [SESv2ClientTypes.SuppressedDestinationSummary]?

    public init(
        nextToken: Swift.String? = nil,
        suppressedDestinationSummaries: [SESv2ClientTypes.SuppressedDestinationSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.suppressedDestinationSummaries = suppressedDestinationSummaries
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) of the resource that you want to retrieve tag information for.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// An array that lists all the tags that are associated with the resource. Each tag consists of a required tag key (Key) and an associated tag value (Value)
    /// This member is required.
    public var tags: [SESv2ClientTypes.Tag]?

    public init(
        tags: [SESv2ClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

/// A request to enable or disable the automatic IP address warm-up feature.
public struct PutAccountDedicatedIpWarmupAttributesInput {
    /// Enables or disables the automatic warm-up feature for dedicated IP addresses that are associated with your Amazon SES account in the current Amazon Web Services Region. Set to true to enable the automatic warm-up feature, or set to false to disable it.
    public var autoWarmupEnabled: Swift.Bool?

    public init(
        autoWarmupEnabled: Swift.Bool? = false
    )
    {
        self.autoWarmupEnabled = autoWarmupEnabled
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutAccountDedicatedIpWarmupAttributesOutput {

    public init() { }
}

/// A request to submit new account details.
public struct PutAccountDetailsInput {
    /// Additional email addresses that you would like to be notified regarding Amazon SES matters.
    public var additionalContactEmailAddresses: [Swift.String]?
    /// The language you would prefer to be contacted with.
    public var contactLanguage: SESv2ClientTypes.ContactLanguage?
    /// The type of email your account will send.
    /// This member is required.
    public var mailType: SESv2ClientTypes.MailType?
    /// Indicates whether or not your account should have production access in the current Amazon Web Services Region. If the value is false, then your account is in the sandbox. When your account is in the sandbox, you can only send email to verified identities. If the value is true, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.
    public var productionAccessEnabled: Swift.Bool?
    /// A description of the types of email that you plan to send.
    @available(*, deprecated, message: "Use case description is optional and deprecated")
    public var useCaseDescription: Swift.String?
    /// The URL of your website. This information helps us better understand the type of content that you plan to send.
    /// This member is required.
    public var websiteURL: Swift.String?

    public init(
        additionalContactEmailAddresses: [Swift.String]? = nil,
        contactLanguage: SESv2ClientTypes.ContactLanguage? = nil,
        mailType: SESv2ClientTypes.MailType? = nil,
        productionAccessEnabled: Swift.Bool? = nil,
        useCaseDescription: Swift.String? = nil,
        websiteURL: Swift.String? = nil
    )
    {
        self.additionalContactEmailAddresses = additionalContactEmailAddresses
        self.contactLanguage = contactLanguage
        self.mailType = mailType
        self.productionAccessEnabled = productionAccessEnabled
        self.useCaseDescription = useCaseDescription
        self.websiteURL = websiteURL
    }
}

extension PutAccountDetailsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAccountDetailsInput(contactLanguage: \(Swift.String(describing: contactLanguage)), mailType: \(Swift.String(describing: mailType)), productionAccessEnabled: \(Swift.String(describing: productionAccessEnabled)), additionalContactEmailAddresses: \"CONTENT_REDACTED\", useCaseDescription: \"CONTENT_REDACTED\", websiteURL: \"CONTENT_REDACTED\")"}
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutAccountDetailsOutput {

    public init() { }
}

/// A request to change the ability of your account to send email.
public struct PutAccountSendingAttributesInput {
    /// Enables or disables your account's ability to send email. Set to true to enable email sending, or set to false to disable email sending. If Amazon Web Services paused your account's ability to send email, you can't use this operation to resume your account's ability to send email.
    public var sendingEnabled: Swift.Bool?

    public init(
        sendingEnabled: Swift.Bool? = false
    )
    {
        self.sendingEnabled = sendingEnabled
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutAccountSendingAttributesOutput {

    public init() { }
}

/// A request to change your account's suppression preferences.
public struct PutAccountSuppressionAttributesInput {
    /// A list that contains the reasons that email addresses will be automatically added to the suppression list for your account. This list can contain any or all of the following:
    ///
    /// * COMPLAINT – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a complaint.
    ///
    /// * BOUNCE – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a hard bounce.
    public var suppressedReasons: [SESv2ClientTypes.SuppressionListReason]?

    public init(
        suppressedReasons: [SESv2ClientTypes.SuppressionListReason]? = nil
    )
    {
        self.suppressedReasons = suppressedReasons
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutAccountSuppressionAttributesOutput {

    public init() { }
}

/// A request to submit new account VDM attributes.
public struct PutAccountVdmAttributesInput {
    /// The VDM attributes that you wish to apply to your Amazon SES account.
    /// This member is required.
    public var vdmAttributes: SESv2ClientTypes.VdmAttributes?

    public init(
        vdmAttributes: SESv2ClientTypes.VdmAttributes? = nil
    )
    {
        self.vdmAttributes = vdmAttributes
    }
}

public struct PutAccountVdmAttributesOutput {

    public init() { }
}

/// A request to associate a configuration set with a dedicated IP pool.
public struct PutConfigurationSetDeliveryOptionsInput {
    /// The name of the configuration set to associate with a dedicated IP pool.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The name of the dedicated IP pool to associate with the configuration set.
    public var sendingPoolName: Swift.String?
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
    public var tlsPolicy: SESv2ClientTypes.TlsPolicy?

    public init(
        configurationSetName: Swift.String? = nil,
        sendingPoolName: Swift.String? = nil,
        tlsPolicy: SESv2ClientTypes.TlsPolicy? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.sendingPoolName = sendingPoolName
        self.tlsPolicy = tlsPolicy
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetDeliveryOptionsOutput {

    public init() { }
}

/// A request to enable or disable tracking of reputation metrics for a configuration set.
public struct PutConfigurationSetReputationOptionsInput {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
    public var reputationMetricsEnabled: Swift.Bool?

    public init(
        configurationSetName: Swift.String? = nil,
        reputationMetricsEnabled: Swift.Bool? = false
    )
    {
        self.configurationSetName = configurationSetName
        self.reputationMetricsEnabled = reputationMetricsEnabled
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetReputationOptionsOutput {

    public init() { }
}

/// A request to enable or disable the ability of Amazon SES to send emails that use a specific configuration set.
public struct PutConfigurationSetSendingOptionsInput {
    /// The name of the configuration set to enable or disable email sending for.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
    public var sendingEnabled: Swift.Bool?

    public init(
        configurationSetName: Swift.String? = nil,
        sendingEnabled: Swift.Bool? = false
    )
    {
        self.configurationSetName = configurationSetName
        self.sendingEnabled = sendingEnabled
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetSendingOptionsOutput {

    public init() { }
}

/// A request to change the account suppression list preferences for a specific configuration set.
public struct PutConfigurationSetSuppressionOptionsInput {
    /// The name of the configuration set to change the suppression list preferences for.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// A list that contains the reasons that email addresses are automatically added to the suppression list for your account. This list can contain any or all of the following:
    ///
    /// * COMPLAINT – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a complaint.
    ///
    /// * BOUNCE – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a hard bounce.
    public var suppressedReasons: [SESv2ClientTypes.SuppressionListReason]?

    public init(
        configurationSetName: Swift.String? = nil,
        suppressedReasons: [SESv2ClientTypes.SuppressionListReason]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.suppressedReasons = suppressedReasons
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetSuppressionOptionsOutput {

    public init() { }
}

/// A request to add a custom domain for tracking open and click events to a configuration set.
public struct PutConfigurationSetTrackingOptionsInput {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The domain to use to track open and click events.
    public var customRedirectDomain: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        customRedirectDomain: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.customRedirectDomain = customRedirectDomain
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetTrackingOptionsOutput {

    public init() { }
}

/// A request to add specific VDM settings to a configuration set.
public struct PutConfigurationSetVdmOptionsInput {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The VDM options to apply to the configuration set.
    public var vdmOptions: SESv2ClientTypes.VdmOptions?

    public init(
        configurationSetName: Swift.String? = nil,
        vdmOptions: SESv2ClientTypes.VdmOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.vdmOptions = vdmOptions
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetVdmOptionsOutput {

    public init() { }
}

/// A request to move a dedicated IP address to a dedicated IP pool.
public struct PutDedicatedIpInPoolInput {
    /// The name of the IP pool that you want to add the dedicated IP address to. You have to specify an IP pool that already exists.
    /// This member is required.
    public var destinationPoolName: Swift.String?
    /// The IP address that you want to move to the dedicated IP pool. The value you specify has to be a dedicated IP address that's associated with your Amazon Web Services account.
    /// This member is required.
    public var ip: Swift.String?

    public init(
        destinationPoolName: Swift.String? = nil,
        ip: Swift.String? = nil
    )
    {
        self.destinationPoolName = destinationPoolName
        self.ip = ip
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutDedicatedIpInPoolOutput {

    public init() { }
}

/// A request to convert a dedicated IP pool to a different scaling mode.
public struct PutDedicatedIpPoolScalingAttributesInput {
    /// The name of the dedicated IP pool.
    /// This member is required.
    public var poolName: Swift.String?
    /// The scaling mode to apply to the dedicated IP pool. Changing the scaling mode from MANAGED to STANDARD is not supported.
    /// This member is required.
    public var scalingMode: SESv2ClientTypes.ScalingMode?

    public init(
        poolName: Swift.String? = nil,
        scalingMode: SESv2ClientTypes.ScalingMode? = nil
    )
    {
        self.poolName = poolName
        self.scalingMode = scalingMode
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutDedicatedIpPoolScalingAttributesOutput {

    public init() { }
}

/// A request to change the warm-up attributes for a dedicated IP address. This operation is useful when you want to resume the warm-up process for an existing IP address.
public struct PutDedicatedIpWarmupAttributesInput {
    /// The dedicated IP address that you want to update the warm-up attributes for.
    /// This member is required.
    public var ip: Swift.String?
    /// The warm-up percentage that you want to associate with the dedicated IP address.
    /// This member is required.
    public var warmupPercentage: Swift.Int?

    public init(
        ip: Swift.String? = nil,
        warmupPercentage: Swift.Int? = nil
    )
    {
        self.ip = ip
        self.warmupPercentage = warmupPercentage
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutDedicatedIpWarmupAttributesOutput {

    public init() { }
}

/// Enable or disable the Deliverability dashboard. When you enable the Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email using Amazon SES API v2. You also gain the ability to perform predictive inbox placement tests. When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon SES and other Amazon Web Services services. For more information about the features and cost of a Deliverability dashboard subscription, see [Amazon Pinpoint Pricing](http://aws.amazon.com/pinpoint/pricing/).
public struct PutDeliverabilityDashboardOptionInput {
    /// Specifies whether to enable the Deliverability dashboard. To enable the dashboard, set this value to true.
    /// This member is required.
    public var dashboardEnabled: Swift.Bool?
    /// An array of objects, one for each verified domain that you use to send email and enabled the Deliverability dashboard for.
    public var subscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]?

    public init(
        dashboardEnabled: Swift.Bool? = false,
        subscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]? = nil
    )
    {
        self.dashboardEnabled = dashboardEnabled
        self.subscribedDomains = subscribedDomains
    }
}

/// A response that indicates whether the Deliverability dashboard is enabled.
public struct PutDeliverabilityDashboardOptionOutput {

    public init() { }
}

/// A request to associate a configuration set with an email identity.
public struct PutEmailIdentityConfigurationSetAttributesInput {
    /// The configuration set to associate with an email identity.
    public var configurationSetName: Swift.String?
    /// The email address or domain to associate with a configuration set.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        emailIdentity: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.emailIdentity = emailIdentity
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct PutEmailIdentityConfigurationSetAttributesOutput {

    public init() { }
}

/// A request to enable or disable DKIM signing of email that you send from an email identity.
public struct PutEmailIdentityDkimAttributesInput {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// Sets the DKIM signing configuration for the identity. When you set this value true, then the messages that are sent from the identity are signed using DKIM. If you set this value to false, your messages are sent without DKIM signing.
    public var signingEnabled: Swift.Bool?

    public init(
        emailIdentity: Swift.String? = nil,
        signingEnabled: Swift.Bool? = false
    )
    {
        self.emailIdentity = emailIdentity
        self.signingEnabled = signingEnabled
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutEmailIdentityDkimAttributesOutput {

    public init() { }
}

/// A request to change the DKIM attributes for an email identity.
public struct PutEmailIdentityDkimSigningAttributesInput {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// An object that contains information about the private key and selector that you want to use to configure DKIM for the identity for Bring Your Own DKIM (BYODKIM) for the identity, or, configures the key length to be used for [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html).
    public var signingAttributes: SESv2ClientTypes.DkimSigningAttributes?
    /// The method to use to configure DKIM for the identity. There are the following possible values:
    ///
    /// * AWS_SES – Configure DKIM for the identity by using [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html).
    ///
    /// * EXTERNAL – Configure DKIM for the identity by using Bring Your Own DKIM (BYODKIM).
    /// This member is required.
    public var signingAttributesOrigin: SESv2ClientTypes.DkimSigningAttributesOrigin?

    public init(
        emailIdentity: Swift.String? = nil,
        signingAttributes: SESv2ClientTypes.DkimSigningAttributes? = nil,
        signingAttributesOrigin: SESv2ClientTypes.DkimSigningAttributesOrigin? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.signingAttributes = signingAttributes
        self.signingAttributesOrigin = signingAttributesOrigin
    }
}

/// If the action is successful, the service sends back an HTTP 200 response. The following data is returned in JSON format by the service.
public struct PutEmailIdentityDkimSigningAttributesOutput {
    /// The DKIM authentication status of the identity. Amazon SES determines the authentication status by searching for specific records in the DNS configuration for your domain. If you used [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html) to set up DKIM authentication, Amazon SES tries to find three unique CNAME records in the DNS configuration for your domain. If you provided a public key to perform DKIM authentication, Amazon SES tries to find a TXT record that uses the selector that you specified. The value of the TXT record must be a public key that's paired with the private key that you specified in the process of creating the identity. The status can be one of the following:
    ///
    /// * PENDING – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.
    ///
    /// * SUCCESS – The verification process completed successfully.
    ///
    /// * FAILED – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.
    ///
    /// * TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.
    ///
    /// * NOT_STARTED – The DKIM verification process hasn't been initiated for the domain.
    public var dkimStatus: SESv2ClientTypes.DkimStatus?
    /// If you used [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html) to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete. If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector that's associated with your public key. Regardless of the DKIM authentication method you use, Amazon SES searches for the appropriate records in the DNS configuration of the domain for up to 72 hours.
    public var dkimTokens: [Swift.String]?

    public init(
        dkimStatus: SESv2ClientTypes.DkimStatus? = nil,
        dkimTokens: [Swift.String]? = nil
    )
    {
        self.dkimStatus = dkimStatus
        self.dkimTokens = dkimTokens
    }
}

/// A request to set the attributes that control how bounce and complaint events are processed.
public struct PutEmailIdentityFeedbackAttributesInput {
    /// Sets the feedback forwarding configuration for the identity. If the value is true, you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the Return-Path header of the original email. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).
    public var emailForwardingEnabled: Swift.Bool?
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init(
        emailForwardingEnabled: Swift.Bool? = false,
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailForwardingEnabled = emailForwardingEnabled
        self.emailIdentity = emailIdentity
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutEmailIdentityFeedbackAttributesOutput {

    public init() { }
}

/// A request to configure the custom MAIL FROM domain for a verified identity.
public struct PutEmailIdentityMailFromAttributesInput {
    /// The action to take if the required MX record isn't found when you send an email. When you set this value to UseDefaultValue, the mail is sent using amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage, the Amazon SES API v2 returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
    public var behaviorOnMxFailure: SESv2ClientTypes.BehaviorOnMxFailure?
    /// The verified email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must meet the following criteria:
    ///
    /// * It has to be a subdomain of the verified identity.
    ///
    /// * It can't be used to receive email.
    ///
    /// * It can't be used in a "From" address if the MAIL FROM domain is a destination for feedback forwarding emails.
    public var mailFromDomain: Swift.String?

    public init(
        behaviorOnMxFailure: SESv2ClientTypes.BehaviorOnMxFailure? = nil,
        emailIdentity: Swift.String? = nil,
        mailFromDomain: Swift.String? = nil
    )
    {
        self.behaviorOnMxFailure = behaviorOnMxFailure
        self.emailIdentity = emailIdentity
        self.mailFromDomain = mailFromDomain
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutEmailIdentityMailFromAttributesOutput {

    public init() { }
}

/// A request to add an email destination to the suppression list for your account.
public struct PutSuppressedDestinationInput {
    /// The email address that should be added to the suppression list for your account.
    /// This member is required.
    public var emailAddress: Swift.String?
    /// The factors that should cause the email address to be added to the suppression list for your account.
    /// This member is required.
    public var reason: SESv2ClientTypes.SuppressionListReason?

    public init(
        emailAddress: Swift.String? = nil,
        reason: SESv2ClientTypes.SuppressionListReason? = nil
    )
    {
        self.emailAddress = emailAddress
        self.reason = reason
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutSuppressedDestinationOutput {

    public init() { }
}

/// Represents a request to send email messages to multiple destinations using Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct SendBulkEmailInput {
    /// The list of bulk email entry objects.
    /// This member is required.
    public var bulkEmailEntries: [SESv2ClientTypes.BulkEmailEntry]?
    /// The name of the configuration set to use when sending the email.
    public var configurationSetName: Swift.String?
    /// An object that contains the body of the message. You can specify a template message.
    /// This member is required.
    public var defaultContent: SESv2ClientTypes.BulkEmailContent?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send using the SendEmail operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    public var defaultEmailTags: [SESv2ClientTypes.MessageTag]?
    /// The address that you want bounce and complaint notifications to be sent to.
    public var feedbackForwardingEmailAddress: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the FeedbackForwardingEmailAddress parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the FeedbackForwardingEmailAddressIdentityArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the FeedbackForwardingEmailAddress to be feedback@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
    public var feedbackForwardingEmailAddressIdentityArn: Swift.String?
    /// The email address to use as the "From" address for the email. The address that you specify has to be verified.
    public var fromEmailAddress: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the FromEmailAddress parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use sender@example.com, then you would specify the FromEmailAddressIdentityArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the FromEmailAddress to be sender@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
    public var fromEmailAddressIdentityArn: Swift.String?
    /// The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.
    public var replyToAddresses: [Swift.String]?

    public init(
        bulkEmailEntries: [SESv2ClientTypes.BulkEmailEntry]? = nil,
        configurationSetName: Swift.String? = nil,
        defaultContent: SESv2ClientTypes.BulkEmailContent? = nil,
        defaultEmailTags: [SESv2ClientTypes.MessageTag]? = nil,
        feedbackForwardingEmailAddress: Swift.String? = nil,
        feedbackForwardingEmailAddressIdentityArn: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        fromEmailAddressIdentityArn: Swift.String? = nil,
        replyToAddresses: [Swift.String]? = nil
    )
    {
        self.bulkEmailEntries = bulkEmailEntries
        self.configurationSetName = configurationSetName
        self.defaultContent = defaultContent
        self.defaultEmailTags = defaultEmailTags
        self.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress
        self.feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArn
        self.fromEmailAddress = fromEmailAddress
        self.fromEmailAddressIdentityArn = fromEmailAddressIdentityArn
        self.replyToAddresses = replyToAddresses
    }
}

/// The following data is returned in JSON format by the service.
public struct SendBulkEmailOutput {
    /// One object per intended recipient. Check each response object and retry any messages with a failure status.
    /// This member is required.
    public var bulkEmailEntryResults: [SESv2ClientTypes.BulkEmailEntryResult]?

    public init(
        bulkEmailEntryResults: [SESv2ClientTypes.BulkEmailEntryResult]? = nil
    )
    {
        self.bulkEmailEntryResults = bulkEmailEntryResults
    }
}

/// Represents a request to send a custom verification email to a specified recipient.
public struct SendCustomVerificationEmailInput {
    /// Name of a configuration set to use when sending the verification email.
    public var configurationSetName: Swift.String?
    /// The email address to verify.
    /// This member is required.
    public var emailAddress: Swift.String?
    /// The name of the custom verification email template to use when sending the verification email.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        emailAddress: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.emailAddress = emailAddress
        self.templateName = templateName
    }
}

/// The following element is returned by the service.
public struct SendCustomVerificationEmailOutput {
    /// The unique message identifier returned from the SendCustomVerificationEmail operation.
    public var messageId: Swift.String?

    public init(
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

/// Represents a request to send a single formatted email using Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-formatted.html).
public struct SendEmailInput {
    /// The name of the configuration set to use when sending the email.
    public var configurationSetName: Swift.String?
    /// An object that contains the body of the message. You can send either a Simple message, Raw message, or a Templated message.
    /// This member is required.
    public var content: SESv2ClientTypes.EmailContent?
    /// An object that contains the recipients of the email message.
    public var destination: SESv2ClientTypes.Destination?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send using the SendEmail operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    public var emailTags: [SESv2ClientTypes.MessageTag]?
    /// The address that you want bounce and complaint notifications to be sent to.
    public var feedbackForwardingEmailAddress: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the FeedbackForwardingEmailAddress parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the FeedbackForwardingEmailAddressIdentityArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the FeedbackForwardingEmailAddress to be feedback@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
    public var feedbackForwardingEmailAddressIdentityArn: Swift.String?
    /// The email address to use as the "From" address for the email. The address that you specify has to be verified.
    public var fromEmailAddress: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the FromEmailAddress parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use sender@example.com, then you would specify the FromEmailAddressIdentityArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the FromEmailAddress to be sender@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html). For Raw emails, the FromEmailAddressIdentityArn value overrides the X-SES-SOURCE-ARN and X-SES-FROM-ARN headers specified in raw email message content.
    public var fromEmailAddressIdentityArn: Swift.String?
    /// An object used to specify a list or topic to which an email belongs, which will be used when a contact chooses to unsubscribe.
    public var listManagementOptions: SESv2ClientTypes.ListManagementOptions?
    /// The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.
    public var replyToAddresses: [Swift.String]?

    public init(
        configurationSetName: Swift.String? = nil,
        content: SESv2ClientTypes.EmailContent? = nil,
        destination: SESv2ClientTypes.Destination? = nil,
        emailTags: [SESv2ClientTypes.MessageTag]? = nil,
        feedbackForwardingEmailAddress: Swift.String? = nil,
        feedbackForwardingEmailAddressIdentityArn: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        fromEmailAddressIdentityArn: Swift.String? = nil,
        listManagementOptions: SESv2ClientTypes.ListManagementOptions? = nil,
        replyToAddresses: [Swift.String]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.content = content
        self.destination = destination
        self.emailTags = emailTags
        self.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress
        self.feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArn
        self.fromEmailAddress = fromEmailAddress
        self.fromEmailAddressIdentityArn = fromEmailAddressIdentityArn
        self.listManagementOptions = listManagementOptions
        self.replyToAddresses = replyToAddresses
    }
}

/// A unique message ID that you receive when an email is accepted for sending.
public struct SendEmailOutput {
    /// A unique identifier for the message that is generated when the message is accepted. It's possible for Amazon SES to accept a message without sending it. For example, this can happen when the message that you're trying to send has an attachment that contains a virus, or when you send a templated email that contains invalid personalization content.
    public var messageId: Swift.String?

    public init(
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource that you want to add one or more tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of the tags that you want to add to the resource. A tag consists of a required tag key (Key) and an associated tag value (Value). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
    /// This member is required.
    public var tags: [SESv2ClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

/// >Represents a request to create a preview of the MIME content of an email when provided with a template and a set of replacement data.
public struct TestRenderEmailTemplateInput {
    /// A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
    /// This member is required.
    public var templateData: Swift.String?
    /// The name of the template.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        templateData: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateData = templateData
        self.templateName = templateName
    }
}

/// The following element is returned by the service.
public struct TestRenderEmailTemplateOutput {
    /// The complete MIME message rendered by applying the data in the TemplateData parameter to the template specified in the TemplateName parameter.
    /// This member is required.
    public var renderedTemplate: Swift.String?

    public init(
        renderedTemplate: Swift.String? = nil
    )
    {
        self.renderedTemplate = renderedTemplate
    }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource that you want to remove one or more tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags (tag keys) that you want to remove from the resource. When you specify a tag key, the action removes both that key and its associated tag value. To remove more than one tag from the resource, append the TagKeys parameter and argument for each additional tag to remove, separated by an ampersand. For example: /v2/email/tags?ResourceArn=ResourceArn&TagKeys=Key1&TagKeys=Key2
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

/// A request to change the settings for an event destination for a configuration set.
public struct UpdateConfigurationSetEventDestinationInput {
    /// The name of the configuration set that contains the event destination to modify.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines the event destination.
    /// This member is required.
    public var eventDestination: SESv2ClientTypes.EventDestinationDefinition?
    /// The name of the event destination.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init(
        configurationSetName: Swift.String? = nil,
        eventDestination: SESv2ClientTypes.EventDestinationDefinition? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
        self.eventDestinationName = eventDestinationName
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct UpdateConfigurationSetEventDestinationOutput {

    public init() { }
}

public struct UpdateContactInput {
    /// The attribute data attached to a contact.
    public var attributesData: Swift.String?
    /// The name of the contact list.
    /// This member is required.
    public var contactListName: Swift.String?
    /// The contact's email address.
    /// This member is required.
    public var emailAddress: Swift.String?
    /// The contact's preference for being opted-in to or opted-out of a topic.
    public var topicPreferences: [SESv2ClientTypes.TopicPreference]?
    /// A boolean value status noting if the contact is unsubscribed from all contact list topics.
    public var unsubscribeAll: Swift.Bool?

    public init(
        attributesData: Swift.String? = nil,
        contactListName: Swift.String? = nil,
        emailAddress: Swift.String? = nil,
        topicPreferences: [SESv2ClientTypes.TopicPreference]? = nil,
        unsubscribeAll: Swift.Bool? = false
    )
    {
        self.attributesData = attributesData
        self.contactListName = contactListName
        self.emailAddress = emailAddress
        self.topicPreferences = topicPreferences
        self.unsubscribeAll = unsubscribeAll
    }
}

public struct UpdateContactOutput {

    public init() { }
}

public struct UpdateContactListInput {
    /// The name of the contact list.
    /// This member is required.
    public var contactListName: Swift.String?
    /// A description of what the contact list is about.
    public var description: Swift.String?
    /// An interest group, theme, or label within a list. A contact list can have multiple topics.
    public var topics: [SESv2ClientTypes.Topic]?

    public init(
        contactListName: Swift.String? = nil,
        description: Swift.String? = nil,
        topics: [SESv2ClientTypes.Topic]? = nil
    )
    {
        self.contactListName = contactListName
        self.description = description
        self.topics = topics
    }
}

public struct UpdateContactListOutput {

    public init() { }
}

/// Represents a request to update an existing custom verification email template.
public struct UpdateCustomVerificationEmailTemplateInput {
    /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    /// This member is required.
    public var failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    /// This member is required.
    public var fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    /// This member is required.
    public var successRedirectionURL: Swift.String?
    /// The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see [Custom verification email frequently asked questions](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom-faq) in the Amazon SES Developer Guide.
    /// This member is required.
    public var templateContent: Swift.String?
    /// The name of the custom verification email template that you want to update.
    /// This member is required.
    public var templateName: Swift.String?
    /// The subject line of the custom verification email.
    /// This member is required.
    public var templateSubject: Swift.String?

    public init(
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct UpdateCustomVerificationEmailTemplateOutput {

    public init() { }
}

/// Represents a request to update a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html).
public struct UpdateEmailIdentityPolicyInput {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// The text of the policy in JSON format. The policy cannot exceed 4 KB. For information about the syntax of sending authorization policies, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html).
    /// This member is required.
    public var policy: Swift.String?
    /// The name of the policy. The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.
    /// This member is required.
    public var policyName: Swift.String?

    public init(
        emailIdentity: Swift.String? = nil,
        policy: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.policy = policy
        self.policyName = policyName
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct UpdateEmailIdentityPolicyOutput {

    public init() { }
}

/// Represents a request to update an email template. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct UpdateEmailTemplateInput {
    /// The content of the email template, composed of a subject line, an HTML part, and a text-only part.
    /// This member is required.
    public var templateContent: SESv2ClientTypes.EmailTemplateContent?
    /// The name of the template.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        templateContent: SESv2ClientTypes.EmailTemplateContent? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateContent = templateContent
        self.templateName = templateName
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct UpdateEmailTemplateOutput {

    public init() { }
}

extension BatchGetMetricDataInput {

    static func urlPathProvider(_ value: BatchGetMetricDataInput) -> Swift.String? {
        return "/v2/email/metrics/batch"
    }
}

extension CancelExportJobInput {

    static func urlPathProvider(_ value: CancelExportJobInput) -> Swift.String? {
        guard let jobId = value.jobId else {
            return nil
        }
        return "/v2/email/export-jobs/\(jobId.urlPercentEncoding())/cancel"
    }
}

extension CreateConfigurationSetInput {

    static func urlPathProvider(_ value: CreateConfigurationSetInput) -> Swift.String? {
        return "/v2/email/configuration-sets"
    }
}

extension CreateConfigurationSetEventDestinationInput {

    static func urlPathProvider(_ value: CreateConfigurationSetEventDestinationInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations"
    }
}

extension CreateContactInput {

    static func urlPathProvider(_ value: CreateContactInput) -> Swift.String? {
        guard let contactListName = value.contactListName else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())/contacts"
    }
}

extension CreateContactListInput {

    static func urlPathProvider(_ value: CreateContactListInput) -> Swift.String? {
        return "/v2/email/contact-lists"
    }
}

extension CreateCustomVerificationEmailTemplateInput {

    static func urlPathProvider(_ value: CreateCustomVerificationEmailTemplateInput) -> Swift.String? {
        return "/v2/email/custom-verification-email-templates"
    }
}

extension CreateDedicatedIpPoolInput {

    static func urlPathProvider(_ value: CreateDedicatedIpPoolInput) -> Swift.String? {
        return "/v2/email/dedicated-ip-pools"
    }
}

extension CreateDeliverabilityTestReportInput {

    static func urlPathProvider(_ value: CreateDeliverabilityTestReportInput) -> Swift.String? {
        return "/v2/email/deliverability-dashboard/test"
    }
}

extension CreateEmailIdentityInput {

    static func urlPathProvider(_ value: CreateEmailIdentityInput) -> Swift.String? {
        return "/v2/email/identities"
    }
}

extension CreateEmailIdentityPolicyInput {

    static func urlPathProvider(_ value: CreateEmailIdentityPolicyInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        guard let policyName = value.policyName else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/policies/\(policyName.urlPercentEncoding())"
    }
}

extension CreateEmailTemplateInput {

    static func urlPathProvider(_ value: CreateEmailTemplateInput) -> Swift.String? {
        return "/v2/email/templates"
    }
}

extension CreateExportJobInput {

    static func urlPathProvider(_ value: CreateExportJobInput) -> Swift.String? {
        return "/v2/email/export-jobs"
    }
}

extension CreateImportJobInput {

    static func urlPathProvider(_ value: CreateImportJobInput) -> Swift.String? {
        return "/v2/email/import-jobs"
    }
}

extension DeleteConfigurationSetInput {

    static func urlPathProvider(_ value: DeleteConfigurationSetInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())"
    }
}

extension DeleteConfigurationSetEventDestinationInput {

    static func urlPathProvider(_ value: DeleteConfigurationSetEventDestinationInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        guard let eventDestinationName = value.eventDestinationName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations/\(eventDestinationName.urlPercentEncoding())"
    }
}

extension DeleteContactInput {

    static func urlPathProvider(_ value: DeleteContactInput) -> Swift.String? {
        guard let contactListName = value.contactListName else {
            return nil
        }
        guard let emailAddress = value.emailAddress else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())/contacts/\(emailAddress.urlPercentEncoding())"
    }
}

extension DeleteContactListInput {

    static func urlPathProvider(_ value: DeleteContactListInput) -> Swift.String? {
        guard let contactListName = value.contactListName else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())"
    }
}

extension DeleteCustomVerificationEmailTemplateInput {

    static func urlPathProvider(_ value: DeleteCustomVerificationEmailTemplateInput) -> Swift.String? {
        guard let templateName = value.templateName else {
            return nil
        }
        return "/v2/email/custom-verification-email-templates/\(templateName.urlPercentEncoding())"
    }
}

extension DeleteDedicatedIpPoolInput {

    static func urlPathProvider(_ value: DeleteDedicatedIpPoolInput) -> Swift.String? {
        guard let poolName = value.poolName else {
            return nil
        }
        return "/v2/email/dedicated-ip-pools/\(poolName.urlPercentEncoding())"
    }
}

extension DeleteEmailIdentityInput {

    static func urlPathProvider(_ value: DeleteEmailIdentityInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())"
    }
}

extension DeleteEmailIdentityPolicyInput {

    static func urlPathProvider(_ value: DeleteEmailIdentityPolicyInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        guard let policyName = value.policyName else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/policies/\(policyName.urlPercentEncoding())"
    }
}

extension DeleteEmailTemplateInput {

    static func urlPathProvider(_ value: DeleteEmailTemplateInput) -> Swift.String? {
        guard let templateName = value.templateName else {
            return nil
        }
        return "/v2/email/templates/\(templateName.urlPercentEncoding())"
    }
}

extension DeleteSuppressedDestinationInput {

    static func urlPathProvider(_ value: DeleteSuppressedDestinationInput) -> Swift.String? {
        guard let emailAddress = value.emailAddress else {
            return nil
        }
        return "/v2/email/suppression/addresses/\(emailAddress.urlPercentEncoding())"
    }
}

extension GetAccountInput {

    static func urlPathProvider(_ value: GetAccountInput) -> Swift.String? {
        return "/v2/email/account"
    }
}

extension GetBlacklistReportsInput {

    static func urlPathProvider(_ value: GetBlacklistReportsInput) -> Swift.String? {
        return "/v2/email/deliverability-dashboard/blacklist-report"
    }
}

extension GetBlacklistReportsInput {

    static func queryItemProvider(_ value: GetBlacklistReportsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let blacklistItemNames = value.blacklistItemNames else {
            let message = "Creating a URL Query Item failed. blacklistItemNames is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        blacklistItemNames.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "BlacklistItemNames".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension GetConfigurationSetInput {

    static func urlPathProvider(_ value: GetConfigurationSetInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())"
    }
}

extension GetConfigurationSetEventDestinationsInput {

    static func urlPathProvider(_ value: GetConfigurationSetEventDestinationsInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations"
    }
}

extension GetContactInput {

    static func urlPathProvider(_ value: GetContactInput) -> Swift.String? {
        guard let contactListName = value.contactListName else {
            return nil
        }
        guard let emailAddress = value.emailAddress else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())/contacts/\(emailAddress.urlPercentEncoding())"
    }
}

extension GetContactListInput {

    static func urlPathProvider(_ value: GetContactListInput) -> Swift.String? {
        guard let contactListName = value.contactListName else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())"
    }
}

extension GetCustomVerificationEmailTemplateInput {

    static func urlPathProvider(_ value: GetCustomVerificationEmailTemplateInput) -> Swift.String? {
        guard let templateName = value.templateName else {
            return nil
        }
        return "/v2/email/custom-verification-email-templates/\(templateName.urlPercentEncoding())"
    }
}

extension GetDedicatedIpInput {

    static func urlPathProvider(_ value: GetDedicatedIpInput) -> Swift.String? {
        guard let ip = value.ip else {
            return nil
        }
        return "/v2/email/dedicated-ips/\(ip.urlPercentEncoding())"
    }
}

extension GetDedicatedIpPoolInput {

    static func urlPathProvider(_ value: GetDedicatedIpPoolInput) -> Swift.String? {
        guard let poolName = value.poolName else {
            return nil
        }
        return "/v2/email/dedicated-ip-pools/\(poolName.urlPercentEncoding())"
    }
}

extension GetDedicatedIpsInput {

    static func urlPathProvider(_ value: GetDedicatedIpsInput) -> Swift.String? {
        return "/v2/email/dedicated-ips"
    }
}

extension GetDedicatedIpsInput {

    static func queryItemProvider(_ value: GetDedicatedIpsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        if let poolName = value.poolName {
            let poolNameQueryItem = Smithy.URIQueryItem(name: "PoolName".urlPercentEncoding(), value: Swift.String(poolName).urlPercentEncoding())
            items.append(poolNameQueryItem)
        }
        return items
    }
}

extension GetDeliverabilityDashboardOptionsInput {

    static func urlPathProvider(_ value: GetDeliverabilityDashboardOptionsInput) -> Swift.String? {
        return "/v2/email/deliverability-dashboard"
    }
}

extension GetDeliverabilityTestReportInput {

    static func urlPathProvider(_ value: GetDeliverabilityTestReportInput) -> Swift.String? {
        guard let reportId = value.reportId else {
            return nil
        }
        return "/v2/email/deliverability-dashboard/test-reports/\(reportId.urlPercentEncoding())"
    }
}

extension GetDomainDeliverabilityCampaignInput {

    static func urlPathProvider(_ value: GetDomainDeliverabilityCampaignInput) -> Swift.String? {
        guard let campaignId = value.campaignId else {
            return nil
        }
        return "/v2/email/deliverability-dashboard/campaigns/\(campaignId.urlPercentEncoding())"
    }
}

extension GetDomainStatisticsReportInput {

    static func urlPathProvider(_ value: GetDomainStatisticsReportInput) -> Swift.String? {
        guard let domain = value.domain else {
            return nil
        }
        return "/v2/email/deliverability-dashboard/statistics-report/\(domain.urlPercentEncoding())"
    }
}

extension GetDomainStatisticsReportInput {

    static func queryItemProvider(_ value: GetDomainStatisticsReportInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let startDate = value.startDate else {
            let message = "Creating a URL Query Item failed. startDate is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let startDateQueryItem = Smithy.URIQueryItem(name: "StartDate".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: startDate)).urlPercentEncoding())
        items.append(startDateQueryItem)
        guard let endDate = value.endDate else {
            let message = "Creating a URL Query Item failed. endDate is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let endDateQueryItem = Smithy.URIQueryItem(name: "EndDate".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: endDate)).urlPercentEncoding())
        items.append(endDateQueryItem)
        return items
    }
}

extension GetEmailIdentityInput {

    static func urlPathProvider(_ value: GetEmailIdentityInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())"
    }
}

extension GetEmailIdentityPoliciesInput {

    static func urlPathProvider(_ value: GetEmailIdentityPoliciesInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/policies"
    }
}

extension GetEmailTemplateInput {

    static func urlPathProvider(_ value: GetEmailTemplateInput) -> Swift.String? {
        guard let templateName = value.templateName else {
            return nil
        }
        return "/v2/email/templates/\(templateName.urlPercentEncoding())"
    }
}

extension GetExportJobInput {

    static func urlPathProvider(_ value: GetExportJobInput) -> Swift.String? {
        guard let jobId = value.jobId else {
            return nil
        }
        return "/v2/email/export-jobs/\(jobId.urlPercentEncoding())"
    }
}

extension GetImportJobInput {

    static func urlPathProvider(_ value: GetImportJobInput) -> Swift.String? {
        guard let jobId = value.jobId else {
            return nil
        }
        return "/v2/email/import-jobs/\(jobId.urlPercentEncoding())"
    }
}

extension GetMessageInsightsInput {

    static func urlPathProvider(_ value: GetMessageInsightsInput) -> Swift.String? {
        guard let messageId = value.messageId else {
            return nil
        }
        return "/v2/email/insights/\(messageId.urlPercentEncoding())"
    }
}

extension GetSuppressedDestinationInput {

    static func urlPathProvider(_ value: GetSuppressedDestinationInput) -> Swift.String? {
        guard let emailAddress = value.emailAddress else {
            return nil
        }
        return "/v2/email/suppression/addresses/\(emailAddress.urlPercentEncoding())"
    }
}

extension ListConfigurationSetsInput {

    static func urlPathProvider(_ value: ListConfigurationSetsInput) -> Swift.String? {
        return "/v2/email/configuration-sets"
    }
}

extension ListConfigurationSetsInput {

    static func queryItemProvider(_ value: ListConfigurationSetsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        return items
    }
}

extension ListContactListsInput {

    static func urlPathProvider(_ value: ListContactListsInput) -> Swift.String? {
        return "/v2/email/contact-lists"
    }
}

extension ListContactListsInput {

    static func queryItemProvider(_ value: ListContactListsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListContactsInput {

    static func urlPathProvider(_ value: ListContactsInput) -> Swift.String? {
        guard let contactListName = value.contactListName else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())/contacts/list"
    }
}

extension ListCustomVerificationEmailTemplatesInput {

    static func urlPathProvider(_ value: ListCustomVerificationEmailTemplatesInput) -> Swift.String? {
        return "/v2/email/custom-verification-email-templates"
    }
}

extension ListCustomVerificationEmailTemplatesInput {

    static func queryItemProvider(_ value: ListCustomVerificationEmailTemplatesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        return items
    }
}

extension ListDedicatedIpPoolsInput {

    static func urlPathProvider(_ value: ListDedicatedIpPoolsInput) -> Swift.String? {
        return "/v2/email/dedicated-ip-pools"
    }
}

extension ListDedicatedIpPoolsInput {

    static func queryItemProvider(_ value: ListDedicatedIpPoolsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        return items
    }
}

extension ListDeliverabilityTestReportsInput {

    static func urlPathProvider(_ value: ListDeliverabilityTestReportsInput) -> Swift.String? {
        return "/v2/email/deliverability-dashboard/test-reports"
    }
}

extension ListDeliverabilityTestReportsInput {

    static func queryItemProvider(_ value: ListDeliverabilityTestReportsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        return items
    }
}

extension ListDomainDeliverabilityCampaignsInput {

    static func urlPathProvider(_ value: ListDomainDeliverabilityCampaignsInput) -> Swift.String? {
        guard let subscribedDomain = value.subscribedDomain else {
            return nil
        }
        return "/v2/email/deliverability-dashboard/domains/\(subscribedDomain.urlPercentEncoding())/campaigns"
    }
}

extension ListDomainDeliverabilityCampaignsInput {

    static func queryItemProvider(_ value: ListDomainDeliverabilityCampaignsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let startDate = value.startDate else {
            let message = "Creating a URL Query Item failed. startDate is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let startDateQueryItem = Smithy.URIQueryItem(name: "StartDate".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: startDate)).urlPercentEncoding())
        items.append(startDateQueryItem)
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        guard let endDate = value.endDate else {
            let message = "Creating a URL Query Item failed. endDate is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let endDateQueryItem = Smithy.URIQueryItem(name: "EndDate".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: endDate)).urlPercentEncoding())
        items.append(endDateQueryItem)
        return items
    }
}

extension ListEmailIdentitiesInput {

    static func urlPathProvider(_ value: ListEmailIdentitiesInput) -> Swift.String? {
        return "/v2/email/identities"
    }
}

extension ListEmailIdentitiesInput {

    static func queryItemProvider(_ value: ListEmailIdentitiesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        return items
    }
}

extension ListEmailTemplatesInput {

    static func urlPathProvider(_ value: ListEmailTemplatesInput) -> Swift.String? {
        return "/v2/email/templates"
    }
}

extension ListEmailTemplatesInput {

    static func queryItemProvider(_ value: ListEmailTemplatesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        return items
    }
}

extension ListExportJobsInput {

    static func urlPathProvider(_ value: ListExportJobsInput) -> Swift.String? {
        return "/v2/email/list-export-jobs"
    }
}

extension ListImportJobsInput {

    static func urlPathProvider(_ value: ListImportJobsInput) -> Swift.String? {
        return "/v2/email/import-jobs/list"
    }
}

extension ListRecommendationsInput {

    static func urlPathProvider(_ value: ListRecommendationsInput) -> Swift.String? {
        return "/v2/email/vdm/recommendations"
    }
}

extension ListSuppressedDestinationsInput {

    static func urlPathProvider(_ value: ListSuppressedDestinationsInput) -> Swift.String? {
        return "/v2/email/suppression/addresses"
    }
}

extension ListSuppressedDestinationsInput {

    static func queryItemProvider(_ value: ListSuppressedDestinationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let startDate = value.startDate {
            let startDateQueryItem = Smithy.URIQueryItem(name: "StartDate".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: startDate)).urlPercentEncoding())
            items.append(startDateQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let pageSize = value.pageSize {
            let pageSizeQueryItem = Smithy.URIQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            items.append(pageSizeQueryItem)
        }
        if let reasons = value.reasons {
            reasons.forEach { queryItemValue in
                let queryItem = Smithy.URIQueryItem(name: "Reason".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                items.append(queryItem)
            }
        }
        if let endDate = value.endDate {
            let endDateQueryItem = Smithy.URIQueryItem(name: "EndDate".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: endDate)).urlPercentEncoding())
            items.append(endDateQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/v2/email/tags"
    }
}

extension ListTagsForResourceInput {

    static func queryItemProvider(_ value: ListTagsForResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceArn = value.resourceArn else {
            let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceArnQueryItem = Smithy.URIQueryItem(name: "ResourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
        items.append(resourceArnQueryItem)
        return items
    }
}

extension PutAccountDedicatedIpWarmupAttributesInput {

    static func urlPathProvider(_ value: PutAccountDedicatedIpWarmupAttributesInput) -> Swift.String? {
        return "/v2/email/account/dedicated-ips/warmup"
    }
}

extension PutAccountDetailsInput {

    static func urlPathProvider(_ value: PutAccountDetailsInput) -> Swift.String? {
        return "/v2/email/account/details"
    }
}

extension PutAccountSendingAttributesInput {

    static func urlPathProvider(_ value: PutAccountSendingAttributesInput) -> Swift.String? {
        return "/v2/email/account/sending"
    }
}

extension PutAccountSuppressionAttributesInput {

    static func urlPathProvider(_ value: PutAccountSuppressionAttributesInput) -> Swift.String? {
        return "/v2/email/account/suppression"
    }
}

extension PutAccountVdmAttributesInput {

    static func urlPathProvider(_ value: PutAccountVdmAttributesInput) -> Swift.String? {
        return "/v2/email/account/vdm"
    }
}

extension PutConfigurationSetDeliveryOptionsInput {

    static func urlPathProvider(_ value: PutConfigurationSetDeliveryOptionsInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/delivery-options"
    }
}

extension PutConfigurationSetReputationOptionsInput {

    static func urlPathProvider(_ value: PutConfigurationSetReputationOptionsInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/reputation-options"
    }
}

extension PutConfigurationSetSendingOptionsInput {

    static func urlPathProvider(_ value: PutConfigurationSetSendingOptionsInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/sending"
    }
}

extension PutConfigurationSetSuppressionOptionsInput {

    static func urlPathProvider(_ value: PutConfigurationSetSuppressionOptionsInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/suppression-options"
    }
}

extension PutConfigurationSetTrackingOptionsInput {

    static func urlPathProvider(_ value: PutConfigurationSetTrackingOptionsInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/tracking-options"
    }
}

extension PutConfigurationSetVdmOptionsInput {

    static func urlPathProvider(_ value: PutConfigurationSetVdmOptionsInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/vdm-options"
    }
}

extension PutDedicatedIpInPoolInput {

    static func urlPathProvider(_ value: PutDedicatedIpInPoolInput) -> Swift.String? {
        guard let ip = value.ip else {
            return nil
        }
        return "/v2/email/dedicated-ips/\(ip.urlPercentEncoding())/pool"
    }
}

extension PutDedicatedIpPoolScalingAttributesInput {

    static func urlPathProvider(_ value: PutDedicatedIpPoolScalingAttributesInput) -> Swift.String? {
        guard let poolName = value.poolName else {
            return nil
        }
        return "/v2/email/dedicated-ip-pools/\(poolName.urlPercentEncoding())/scaling"
    }
}

extension PutDedicatedIpWarmupAttributesInput {

    static func urlPathProvider(_ value: PutDedicatedIpWarmupAttributesInput) -> Swift.String? {
        guard let ip = value.ip else {
            return nil
        }
        return "/v2/email/dedicated-ips/\(ip.urlPercentEncoding())/warmup"
    }
}

extension PutDeliverabilityDashboardOptionInput {

    static func urlPathProvider(_ value: PutDeliverabilityDashboardOptionInput) -> Swift.String? {
        return "/v2/email/deliverability-dashboard"
    }
}

extension PutEmailIdentityConfigurationSetAttributesInput {

    static func urlPathProvider(_ value: PutEmailIdentityConfigurationSetAttributesInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/configuration-set"
    }
}

extension PutEmailIdentityDkimAttributesInput {

    static func urlPathProvider(_ value: PutEmailIdentityDkimAttributesInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/dkim"
    }
}

extension PutEmailIdentityDkimSigningAttributesInput {

    static func urlPathProvider(_ value: PutEmailIdentityDkimSigningAttributesInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        return "/v1/email/identities/\(emailIdentity.urlPercentEncoding())/dkim/signing"
    }
}

extension PutEmailIdentityFeedbackAttributesInput {

    static func urlPathProvider(_ value: PutEmailIdentityFeedbackAttributesInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/feedback"
    }
}

extension PutEmailIdentityMailFromAttributesInput {

    static func urlPathProvider(_ value: PutEmailIdentityMailFromAttributesInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/mail-from"
    }
}

extension PutSuppressedDestinationInput {

    static func urlPathProvider(_ value: PutSuppressedDestinationInput) -> Swift.String? {
        return "/v2/email/suppression/addresses"
    }
}

extension SendBulkEmailInput {

    static func urlPathProvider(_ value: SendBulkEmailInput) -> Swift.String? {
        return "/v2/email/outbound-bulk-emails"
    }
}

extension SendCustomVerificationEmailInput {

    static func urlPathProvider(_ value: SendCustomVerificationEmailInput) -> Swift.String? {
        return "/v2/email/outbound-custom-verification-emails"
    }
}

extension SendEmailInput {

    static func urlPathProvider(_ value: SendEmailInput) -> Swift.String? {
        return "/v2/email/outbound-emails"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/v2/email/tags"
    }
}

extension TestRenderEmailTemplateInput {

    static func urlPathProvider(_ value: TestRenderEmailTemplateInput) -> Swift.String? {
        guard let templateName = value.templateName else {
            return nil
        }
        return "/v2/email/templates/\(templateName.urlPercentEncoding())/render"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/v2/email/tags"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceArn = value.resourceArn else {
            let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceArnQueryItem = Smithy.URIQueryItem(name: "ResourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
        items.append(resourceArnQueryItem)
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "TagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateConfigurationSetEventDestinationInput {

    static func urlPathProvider(_ value: UpdateConfigurationSetEventDestinationInput) -> Swift.String? {
        guard let configurationSetName = value.configurationSetName else {
            return nil
        }
        guard let eventDestinationName = value.eventDestinationName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations/\(eventDestinationName.urlPercentEncoding())"
    }
}

extension UpdateContactInput {

    static func urlPathProvider(_ value: UpdateContactInput) -> Swift.String? {
        guard let contactListName = value.contactListName else {
            return nil
        }
        guard let emailAddress = value.emailAddress else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())/contacts/\(emailAddress.urlPercentEncoding())"
    }
}

extension UpdateContactListInput {

    static func urlPathProvider(_ value: UpdateContactListInput) -> Swift.String? {
        guard let contactListName = value.contactListName else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())"
    }
}

extension UpdateCustomVerificationEmailTemplateInput {

    static func urlPathProvider(_ value: UpdateCustomVerificationEmailTemplateInput) -> Swift.String? {
        guard let templateName = value.templateName else {
            return nil
        }
        return "/v2/email/custom-verification-email-templates/\(templateName.urlPercentEncoding())"
    }
}

extension UpdateEmailIdentityPolicyInput {

    static func urlPathProvider(_ value: UpdateEmailIdentityPolicyInput) -> Swift.String? {
        guard let emailIdentity = value.emailIdentity else {
            return nil
        }
        guard let policyName = value.policyName else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/policies/\(policyName.urlPercentEncoding())"
    }
}

extension UpdateEmailTemplateInput {

    static func urlPathProvider(_ value: UpdateEmailTemplateInput) -> Swift.String? {
        guard let templateName = value.templateName else {
            return nil
        }
        return "/v2/email/templates/\(templateName.urlPercentEncoding())"
    }
}

extension BatchGetMetricDataInput {

    static func write(value: BatchGetMetricDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Queries"].writeList(value.queries, memberWritingClosure: SESv2ClientTypes.BatchGetMetricDataQuery.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateConfigurationSetInput {

    static func write(value: CreateConfigurationSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationSetName"].write(value.configurationSetName)
        try writer["DeliveryOptions"].write(value.deliveryOptions, with: SESv2ClientTypes.DeliveryOptions.write(value:to:))
        try writer["ReputationOptions"].write(value.reputationOptions, with: SESv2ClientTypes.ReputationOptions.write(value:to:))
        try writer["SendingOptions"].write(value.sendingOptions, with: SESv2ClientTypes.SendingOptions.write(value:to:))
        try writer["SuppressionOptions"].write(value.suppressionOptions, with: SESv2ClientTypes.SuppressionOptions.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SESv2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrackingOptions"].write(value.trackingOptions, with: SESv2ClientTypes.TrackingOptions.write(value:to:))
        try writer["VdmOptions"].write(value.vdmOptions, with: SESv2ClientTypes.VdmOptions.write(value:to:))
    }
}

extension CreateConfigurationSetEventDestinationInput {

    static func write(value: CreateConfigurationSetEventDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventDestination"].write(value.eventDestination, with: SESv2ClientTypes.EventDestinationDefinition.write(value:to:))
        try writer["EventDestinationName"].write(value.eventDestinationName)
    }
}

extension CreateContactInput {

    static func write(value: CreateContactInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributesData"].write(value.attributesData)
        try writer["EmailAddress"].write(value.emailAddress)
        try writer["TopicPreferences"].writeList(value.topicPreferences, memberWritingClosure: SESv2ClientTypes.TopicPreference.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UnsubscribeAll"].write(value.unsubscribeAll)
    }
}

extension CreateContactListInput {

    static func write(value: CreateContactListInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContactListName"].write(value.contactListName)
        try writer["Description"].write(value.description)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SESv2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Topics"].writeList(value.topics, memberWritingClosure: SESv2ClientTypes.Topic.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateCustomVerificationEmailTemplateInput {

    static func write(value: CreateCustomVerificationEmailTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FailureRedirectionURL"].write(value.failureRedirectionURL)
        try writer["FromEmailAddress"].write(value.fromEmailAddress)
        try writer["SuccessRedirectionURL"].write(value.successRedirectionURL)
        try writer["TemplateContent"].write(value.templateContent)
        try writer["TemplateName"].write(value.templateName)
        try writer["TemplateSubject"].write(value.templateSubject)
    }
}

extension CreateDedicatedIpPoolInput {

    static func write(value: CreateDedicatedIpPoolInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PoolName"].write(value.poolName)
        try writer["ScalingMode"].write(value.scalingMode)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SESv2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDeliverabilityTestReportInput {

    static func write(value: CreateDeliverabilityTestReportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Content"].write(value.content, with: SESv2ClientTypes.EmailContent.write(value:to:))
        try writer["FromEmailAddress"].write(value.fromEmailAddress)
        try writer["ReportName"].write(value.reportName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SESv2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateEmailIdentityInput {

    static func write(value: CreateEmailIdentityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationSetName"].write(value.configurationSetName)
        try writer["DkimSigningAttributes"].write(value.dkimSigningAttributes, with: SESv2ClientTypes.DkimSigningAttributes.write(value:to:))
        try writer["EmailIdentity"].write(value.emailIdentity)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SESv2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateEmailIdentityPolicyInput {

    static func write(value: CreateEmailIdentityPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
    }
}

extension CreateEmailTemplateInput {

    static func write(value: CreateEmailTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TemplateContent"].write(value.templateContent, with: SESv2ClientTypes.EmailTemplateContent.write(value:to:))
        try writer["TemplateName"].write(value.templateName)
    }
}

extension CreateExportJobInput {

    static func write(value: CreateExportJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExportDataSource"].write(value.exportDataSource, with: SESv2ClientTypes.ExportDataSource.write(value:to:))
        try writer["ExportDestination"].write(value.exportDestination, with: SESv2ClientTypes.ExportDestination.write(value:to:))
    }
}

extension CreateImportJobInput {

    static func write(value: CreateImportJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ImportDataSource"].write(value.importDataSource, with: SESv2ClientTypes.ImportDataSource.write(value:to:))
        try writer["ImportDestination"].write(value.importDestination, with: SESv2ClientTypes.ImportDestination.write(value:to:))
    }
}

extension ListContactsInput {

    static func write(value: ListContactsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: SESv2ClientTypes.ListContactsFilter.write(value:to:))
        try writer["NextToken"].write(value.nextToken)
        try writer["PageSize"].write(value.pageSize)
    }
}

extension ListExportJobsInput {

    static func write(value: ListExportJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExportSourceType"].write(value.exportSourceType)
        try writer["JobStatus"].write(value.jobStatus)
        try writer["NextToken"].write(value.nextToken)
        try writer["PageSize"].write(value.pageSize)
    }
}

extension ListImportJobsInput {

    static func write(value: ListImportJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ImportDestinationType"].write(value.importDestinationType)
        try writer["NextToken"].write(value.nextToken)
        try writer["PageSize"].write(value.pageSize)
    }
}

extension ListRecommendationsInput {

    static func write(value: ListRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].writeMap(value.filter, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["NextToken"].write(value.nextToken)
        try writer["PageSize"].write(value.pageSize)
    }
}

extension PutAccountDedicatedIpWarmupAttributesInput {

    static func write(value: PutAccountDedicatedIpWarmupAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoWarmupEnabled"].write(value.autoWarmupEnabled)
    }
}

extension PutAccountDetailsInput {

    static func write(value: PutAccountDetailsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdditionalContactEmailAddresses"].writeList(value.additionalContactEmailAddresses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ContactLanguage"].write(value.contactLanguage)
        try writer["MailType"].write(value.mailType)
        try writer["ProductionAccessEnabled"].write(value.productionAccessEnabled)
        try writer["UseCaseDescription"].write(value.useCaseDescription)
        try writer["WebsiteURL"].write(value.websiteURL)
    }
}

extension PutAccountSendingAttributesInput {

    static func write(value: PutAccountSendingAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SendingEnabled"].write(value.sendingEnabled)
    }
}

extension PutAccountSuppressionAttributesInput {

    static func write(value: PutAccountSuppressionAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SuppressedReasons"].writeList(value.suppressedReasons, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SESv2ClientTypes.SuppressionListReason>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutAccountVdmAttributesInput {

    static func write(value: PutAccountVdmAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["VdmAttributes"].write(value.vdmAttributes, with: SESv2ClientTypes.VdmAttributes.write(value:to:))
    }
}

extension PutConfigurationSetDeliveryOptionsInput {

    static func write(value: PutConfigurationSetDeliveryOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SendingPoolName"].write(value.sendingPoolName)
        try writer["TlsPolicy"].write(value.tlsPolicy)
    }
}

extension PutConfigurationSetReputationOptionsInput {

    static func write(value: PutConfigurationSetReputationOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ReputationMetricsEnabled"].write(value.reputationMetricsEnabled)
    }
}

extension PutConfigurationSetSendingOptionsInput {

    static func write(value: PutConfigurationSetSendingOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SendingEnabled"].write(value.sendingEnabled)
    }
}

extension PutConfigurationSetSuppressionOptionsInput {

    static func write(value: PutConfigurationSetSuppressionOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SuppressedReasons"].writeList(value.suppressedReasons, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SESv2ClientTypes.SuppressionListReason>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutConfigurationSetTrackingOptionsInput {

    static func write(value: PutConfigurationSetTrackingOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomRedirectDomain"].write(value.customRedirectDomain)
    }
}

extension PutConfigurationSetVdmOptionsInput {

    static func write(value: PutConfigurationSetVdmOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["VdmOptions"].write(value.vdmOptions, with: SESv2ClientTypes.VdmOptions.write(value:to:))
    }
}

extension PutDedicatedIpInPoolInput {

    static func write(value: PutDedicatedIpInPoolInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DestinationPoolName"].write(value.destinationPoolName)
    }
}

extension PutDedicatedIpPoolScalingAttributesInput {

    static func write(value: PutDedicatedIpPoolScalingAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ScalingMode"].write(value.scalingMode)
    }
}

extension PutDedicatedIpWarmupAttributesInput {

    static func write(value: PutDedicatedIpWarmupAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["WarmupPercentage"].write(value.warmupPercentage)
    }
}

extension PutDeliverabilityDashboardOptionInput {

    static func write(value: PutDeliverabilityDashboardOptionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DashboardEnabled"].write(value.dashboardEnabled)
        try writer["SubscribedDomains"].writeList(value.subscribedDomains, memberWritingClosure: SESv2ClientTypes.DomainDeliverabilityTrackingOption.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutEmailIdentityConfigurationSetAttributesInput {

    static func write(value: PutEmailIdentityConfigurationSetAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationSetName"].write(value.configurationSetName)
    }
}

extension PutEmailIdentityDkimAttributesInput {

    static func write(value: PutEmailIdentityDkimAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SigningEnabled"].write(value.signingEnabled)
    }
}

extension PutEmailIdentityDkimSigningAttributesInput {

    static func write(value: PutEmailIdentityDkimSigningAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SigningAttributes"].write(value.signingAttributes, with: SESv2ClientTypes.DkimSigningAttributes.write(value:to:))
        try writer["SigningAttributesOrigin"].write(value.signingAttributesOrigin)
    }
}

extension PutEmailIdentityFeedbackAttributesInput {

    static func write(value: PutEmailIdentityFeedbackAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EmailForwardingEnabled"].write(value.emailForwardingEnabled)
    }
}

extension PutEmailIdentityMailFromAttributesInput {

    static func write(value: PutEmailIdentityMailFromAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BehaviorOnMxFailure"].write(value.behaviorOnMxFailure)
        try writer["MailFromDomain"].write(value.mailFromDomain)
    }
}

extension PutSuppressedDestinationInput {

    static func write(value: PutSuppressedDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EmailAddress"].write(value.emailAddress)
        try writer["Reason"].write(value.reason)
    }
}

extension SendBulkEmailInput {

    static func write(value: SendBulkEmailInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BulkEmailEntries"].writeList(value.bulkEmailEntries, memberWritingClosure: SESv2ClientTypes.BulkEmailEntry.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ConfigurationSetName"].write(value.configurationSetName)
        try writer["DefaultContent"].write(value.defaultContent, with: SESv2ClientTypes.BulkEmailContent.write(value:to:))
        try writer["DefaultEmailTags"].writeList(value.defaultEmailTags, memberWritingClosure: SESv2ClientTypes.MessageTag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FeedbackForwardingEmailAddress"].write(value.feedbackForwardingEmailAddress)
        try writer["FeedbackForwardingEmailAddressIdentityArn"].write(value.feedbackForwardingEmailAddressIdentityArn)
        try writer["FromEmailAddress"].write(value.fromEmailAddress)
        try writer["FromEmailAddressIdentityArn"].write(value.fromEmailAddressIdentityArn)
        try writer["ReplyToAddresses"].writeList(value.replyToAddresses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SendCustomVerificationEmailInput {

    static func write(value: SendCustomVerificationEmailInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationSetName"].write(value.configurationSetName)
        try writer["EmailAddress"].write(value.emailAddress)
        try writer["TemplateName"].write(value.templateName)
    }
}

extension SendEmailInput {

    static func write(value: SendEmailInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationSetName"].write(value.configurationSetName)
        try writer["Content"].write(value.content, with: SESv2ClientTypes.EmailContent.write(value:to:))
        try writer["Destination"].write(value.destination, with: SESv2ClientTypes.Destination.write(value:to:))
        try writer["EmailTags"].writeList(value.emailTags, memberWritingClosure: SESv2ClientTypes.MessageTag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FeedbackForwardingEmailAddress"].write(value.feedbackForwardingEmailAddress)
        try writer["FeedbackForwardingEmailAddressIdentityArn"].write(value.feedbackForwardingEmailAddressIdentityArn)
        try writer["FromEmailAddress"].write(value.fromEmailAddress)
        try writer["FromEmailAddressIdentityArn"].write(value.fromEmailAddressIdentityArn)
        try writer["ListManagementOptions"].write(value.listManagementOptions, with: SESv2ClientTypes.ListManagementOptions.write(value:to:))
        try writer["ReplyToAddresses"].writeList(value.replyToAddresses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SESv2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TestRenderEmailTemplateInput {

    static func write(value: TestRenderEmailTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TemplateData"].write(value.templateData)
    }
}

extension UpdateConfigurationSetEventDestinationInput {

    static func write(value: UpdateConfigurationSetEventDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventDestination"].write(value.eventDestination, with: SESv2ClientTypes.EventDestinationDefinition.write(value:to:))
    }
}

extension UpdateContactInput {

    static func write(value: UpdateContactInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributesData"].write(value.attributesData)
        try writer["TopicPreferences"].writeList(value.topicPreferences, memberWritingClosure: SESv2ClientTypes.TopicPreference.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UnsubscribeAll"].write(value.unsubscribeAll)
    }
}

extension UpdateContactListInput {

    static func write(value: UpdateContactListInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Topics"].writeList(value.topics, memberWritingClosure: SESv2ClientTypes.Topic.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateCustomVerificationEmailTemplateInput {

    static func write(value: UpdateCustomVerificationEmailTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FailureRedirectionURL"].write(value.failureRedirectionURL)
        try writer["FromEmailAddress"].write(value.fromEmailAddress)
        try writer["SuccessRedirectionURL"].write(value.successRedirectionURL)
        try writer["TemplateContent"].write(value.templateContent)
        try writer["TemplateSubject"].write(value.templateSubject)
    }
}

extension UpdateEmailIdentityPolicyInput {

    static func write(value: UpdateEmailIdentityPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
    }
}

extension UpdateEmailTemplateInput {

    static func write(value: UpdateEmailTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TemplateContent"].write(value.templateContent, with: SESv2ClientTypes.EmailTemplateContent.write(value:to:))
    }
}

extension BatchGetMetricDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetMetricDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetMetricDataOutput()
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.MetricDataError.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.results = try reader["Results"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.MetricDataResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CancelExportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelExportJobOutput {
        return CancelExportJobOutput()
    }
}

extension CreateConfigurationSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateConfigurationSetOutput {
        return CreateConfigurationSetOutput()
    }
}

extension CreateConfigurationSetEventDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateConfigurationSetEventDestinationOutput {
        return CreateConfigurationSetEventDestinationOutput()
    }
}

extension CreateContactOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateContactOutput {
        return CreateContactOutput()
    }
}

extension CreateContactListOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateContactListOutput {
        return CreateContactListOutput()
    }
}

extension CreateCustomVerificationEmailTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCustomVerificationEmailTemplateOutput {
        return CreateCustomVerificationEmailTemplateOutput()
    }
}

extension CreateDedicatedIpPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDedicatedIpPoolOutput {
        return CreateDedicatedIpPoolOutput()
    }
}

extension CreateDeliverabilityTestReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDeliverabilityTestReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDeliverabilityTestReportOutput()
        value.deliverabilityTestStatus = try reader["DeliverabilityTestStatus"].readIfPresent() ?? .sdkUnknown("")
        value.reportId = try reader["ReportId"].readIfPresent() ?? ""
        return value
    }
}

extension CreateEmailIdentityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEmailIdentityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEmailIdentityOutput()
        value.dkimAttributes = try reader["DkimAttributes"].readIfPresent(with: SESv2ClientTypes.DkimAttributes.read(from:))
        value.identityType = try reader["IdentityType"].readIfPresent()
        value.verifiedForSendingStatus = try reader["VerifiedForSendingStatus"].readIfPresent() ?? false
        return value
    }
}

extension CreateEmailIdentityPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEmailIdentityPolicyOutput {
        return CreateEmailIdentityPolicyOutput()
    }
}

extension CreateEmailTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEmailTemplateOutput {
        return CreateEmailTemplateOutput()
    }
}

extension CreateExportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateExportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateExportJobOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension CreateImportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateImportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateImportJobOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension DeleteConfigurationSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteConfigurationSetOutput {
        return DeleteConfigurationSetOutput()
    }
}

extension DeleteConfigurationSetEventDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteConfigurationSetEventDestinationOutput {
        return DeleteConfigurationSetEventDestinationOutput()
    }
}

extension DeleteContactOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteContactOutput {
        return DeleteContactOutput()
    }
}

extension DeleteContactListOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteContactListOutput {
        return DeleteContactListOutput()
    }
}

extension DeleteCustomVerificationEmailTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCustomVerificationEmailTemplateOutput {
        return DeleteCustomVerificationEmailTemplateOutput()
    }
}

extension DeleteDedicatedIpPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDedicatedIpPoolOutput {
        return DeleteDedicatedIpPoolOutput()
    }
}

extension DeleteEmailIdentityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEmailIdentityOutput {
        return DeleteEmailIdentityOutput()
    }
}

extension DeleteEmailIdentityPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEmailIdentityPolicyOutput {
        return DeleteEmailIdentityPolicyOutput()
    }
}

extension DeleteEmailTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEmailTemplateOutput {
        return DeleteEmailTemplateOutput()
    }
}

extension DeleteSuppressedDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSuppressedDestinationOutput {
        return DeleteSuppressedDestinationOutput()
    }
}

extension GetAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAccountOutput()
        value.dedicatedIpAutoWarmupEnabled = try reader["DedicatedIpAutoWarmupEnabled"].readIfPresent() ?? false
        value.details = try reader["Details"].readIfPresent(with: SESv2ClientTypes.AccountDetails.read(from:))
        value.enforcementStatus = try reader["EnforcementStatus"].readIfPresent()
        value.productionAccessEnabled = try reader["ProductionAccessEnabled"].readIfPresent() ?? false
        value.sendQuota = try reader["SendQuota"].readIfPresent(with: SESv2ClientTypes.SendQuota.read(from:))
        value.sendingEnabled = try reader["SendingEnabled"].readIfPresent() ?? false
        value.suppressionAttributes = try reader["SuppressionAttributes"].readIfPresent(with: SESv2ClientTypes.SuppressionAttributes.read(from:))
        value.vdmAttributes = try reader["VdmAttributes"].readIfPresent(with: SESv2ClientTypes.VdmAttributes.read(from:))
        return value
    }
}

extension GetBlacklistReportsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBlacklistReportsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBlacklistReportsOutput()
        value.blacklistReport = try reader["BlacklistReport"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SESv2ClientTypes.BlacklistEntry.read(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension GetConfigurationSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConfigurationSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetConfigurationSetOutput()
        value.configurationSetName = try reader["ConfigurationSetName"].readIfPresent()
        value.deliveryOptions = try reader["DeliveryOptions"].readIfPresent(with: SESv2ClientTypes.DeliveryOptions.read(from:))
        value.reputationOptions = try reader["ReputationOptions"].readIfPresent(with: SESv2ClientTypes.ReputationOptions.read(from:))
        value.sendingOptions = try reader["SendingOptions"].readIfPresent(with: SESv2ClientTypes.SendingOptions.read(from:))
        value.suppressionOptions = try reader["SuppressionOptions"].readIfPresent(with: SESv2ClientTypes.SuppressionOptions.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.trackingOptions = try reader["TrackingOptions"].readIfPresent(with: SESv2ClientTypes.TrackingOptions.read(from:))
        value.vdmOptions = try reader["VdmOptions"].readIfPresent(with: SESv2ClientTypes.VdmOptions.read(from:))
        return value
    }
}

extension GetConfigurationSetEventDestinationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConfigurationSetEventDestinationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetConfigurationSetEventDestinationsOutput()
        value.eventDestinations = try reader["EventDestinations"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.EventDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetContactOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetContactOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetContactOutput()
        value.attributesData = try reader["AttributesData"].readIfPresent()
        value.contactListName = try reader["ContactListName"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.emailAddress = try reader["EmailAddress"].readIfPresent()
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.topicDefaultPreferences = try reader["TopicDefaultPreferences"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.TopicPreference.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.topicPreferences = try reader["TopicPreferences"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.TopicPreference.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.unsubscribeAll = try reader["UnsubscribeAll"].readIfPresent() ?? false
        return value
    }
}

extension GetContactListOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetContactListOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetContactListOutput()
        value.contactListName = try reader["ContactListName"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.topics = try reader["Topics"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.Topic.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetCustomVerificationEmailTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCustomVerificationEmailTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCustomVerificationEmailTemplateOutput()
        value.failureRedirectionURL = try reader["FailureRedirectionURL"].readIfPresent()
        value.fromEmailAddress = try reader["FromEmailAddress"].readIfPresent()
        value.successRedirectionURL = try reader["SuccessRedirectionURL"].readIfPresent()
        value.templateContent = try reader["TemplateContent"].readIfPresent()
        value.templateName = try reader["TemplateName"].readIfPresent()
        value.templateSubject = try reader["TemplateSubject"].readIfPresent()
        return value
    }
}

extension GetDedicatedIpOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDedicatedIpOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDedicatedIpOutput()
        value.dedicatedIp = try reader["DedicatedIp"].readIfPresent(with: SESv2ClientTypes.DedicatedIp.read(from:))
        return value
    }
}

extension GetDedicatedIpPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDedicatedIpPoolOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDedicatedIpPoolOutput()
        value.dedicatedIpPool = try reader["DedicatedIpPool"].readIfPresent(with: SESv2ClientTypes.DedicatedIpPool.read(from:))
        return value
    }
}

extension GetDedicatedIpsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDedicatedIpsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDedicatedIpsOutput()
        value.dedicatedIps = try reader["DedicatedIps"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.DedicatedIp.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension GetDeliverabilityDashboardOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeliverabilityDashboardOptionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeliverabilityDashboardOptionsOutput()
        value.accountStatus = try reader["AccountStatus"].readIfPresent()
        value.activeSubscribedDomains = try reader["ActiveSubscribedDomains"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.DomainDeliverabilityTrackingOption.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.dashboardEnabled = try reader["DashboardEnabled"].readIfPresent() ?? false
        value.pendingExpirationSubscribedDomains = try reader["PendingExpirationSubscribedDomains"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.DomainDeliverabilityTrackingOption.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.subscriptionExpiryDate = try reader["SubscriptionExpiryDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GetDeliverabilityTestReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeliverabilityTestReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeliverabilityTestReportOutput()
        value.deliverabilityTestReport = try reader["DeliverabilityTestReport"].readIfPresent(with: SESv2ClientTypes.DeliverabilityTestReport.read(from:))
        value.ispPlacements = try reader["IspPlacements"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.IspPlacement.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.message = try reader["Message"].readIfPresent()
        value.overallPlacement = try reader["OverallPlacement"].readIfPresent(with: SESv2ClientTypes.PlacementStatistics.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetDomainDeliverabilityCampaignOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDomainDeliverabilityCampaignOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDomainDeliverabilityCampaignOutput()
        value.domainDeliverabilityCampaign = try reader["DomainDeliverabilityCampaign"].readIfPresent(with: SESv2ClientTypes.DomainDeliverabilityCampaign.read(from:))
        return value
    }
}

extension GetDomainStatisticsReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDomainStatisticsReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDomainStatisticsReportOutput()
        value.dailyVolumes = try reader["DailyVolumes"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.DailyVolume.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.overallVolume = try reader["OverallVolume"].readIfPresent(with: SESv2ClientTypes.OverallVolume.read(from:))
        return value
    }
}

extension GetEmailIdentityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEmailIdentityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEmailIdentityOutput()
        value.configurationSetName = try reader["ConfigurationSetName"].readIfPresent()
        value.dkimAttributes = try reader["DkimAttributes"].readIfPresent(with: SESv2ClientTypes.DkimAttributes.read(from:))
        value.feedbackForwardingStatus = try reader["FeedbackForwardingStatus"].readIfPresent() ?? false
        value.identityType = try reader["IdentityType"].readIfPresent()
        value.mailFromAttributes = try reader["MailFromAttributes"].readIfPresent(with: SESv2ClientTypes.MailFromAttributes.read(from:))
        value.policies = try reader["Policies"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.verificationInfo = try reader["VerificationInfo"].readIfPresent(with: SESv2ClientTypes.VerificationInfo.read(from:))
        value.verificationStatus = try reader["VerificationStatus"].readIfPresent()
        value.verifiedForSendingStatus = try reader["VerifiedForSendingStatus"].readIfPresent() ?? false
        return value
    }
}

extension GetEmailIdentityPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEmailIdentityPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEmailIdentityPoliciesOutput()
        value.policies = try reader["Policies"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetEmailTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEmailTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEmailTemplateOutput()
        value.templateContent = try reader["TemplateContent"].readIfPresent(with: SESv2ClientTypes.EmailTemplateContent.read(from:))
        value.templateName = try reader["TemplateName"].readIfPresent() ?? ""
        return value
    }
}

extension GetExportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetExportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetExportJobOutput()
        value.completedTimestamp = try reader["CompletedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.exportDataSource = try reader["ExportDataSource"].readIfPresent(with: SESv2ClientTypes.ExportDataSource.read(from:))
        value.exportDestination = try reader["ExportDestination"].readIfPresent(with: SESv2ClientTypes.ExportDestination.read(from:))
        value.exportSourceType = try reader["ExportSourceType"].readIfPresent()
        value.failureInfo = try reader["FailureInfo"].readIfPresent(with: SESv2ClientTypes.FailureInfo.read(from:))
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.statistics = try reader["Statistics"].readIfPresent(with: SESv2ClientTypes.ExportStatistics.read(from:))
        return value
    }
}

extension GetImportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetImportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetImportJobOutput()
        value.completedTimestamp = try reader["CompletedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failedRecordsCount = try reader["FailedRecordsCount"].readIfPresent()
        value.failureInfo = try reader["FailureInfo"].readIfPresent(with: SESv2ClientTypes.FailureInfo.read(from:))
        value.importDataSource = try reader["ImportDataSource"].readIfPresent(with: SESv2ClientTypes.ImportDataSource.read(from:))
        value.importDestination = try reader["ImportDestination"].readIfPresent(with: SESv2ClientTypes.ImportDestination.read(from:))
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.processedRecordsCount = try reader["ProcessedRecordsCount"].readIfPresent()
        return value
    }
}

extension GetMessageInsightsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMessageInsightsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMessageInsightsOutput()
        value.emailTags = try reader["EmailTags"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.MessageTag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.fromEmailAddress = try reader["FromEmailAddress"].readIfPresent()
        value.insights = try reader["Insights"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.EmailInsights.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.messageId = try reader["MessageId"].readIfPresent()
        value.subject = try reader["Subject"].readIfPresent()
        return value
    }
}

extension GetSuppressedDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSuppressedDestinationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSuppressedDestinationOutput()
        value.suppressedDestination = try reader["SuppressedDestination"].readIfPresent(with: SESv2ClientTypes.SuppressedDestination.read(from:))
        return value
    }
}

extension ListConfigurationSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListConfigurationSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListConfigurationSetsOutput()
        value.configurationSets = try reader["ConfigurationSets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListContactListsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListContactListsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListContactListsOutput()
        value.contactLists = try reader["ContactLists"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.ContactList.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListContactsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListContactsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListContactsOutput()
        value.contacts = try reader["Contacts"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.Contact.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListCustomVerificationEmailTemplatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCustomVerificationEmailTemplatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCustomVerificationEmailTemplatesOutput()
        value.customVerificationEmailTemplates = try reader["CustomVerificationEmailTemplates"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.CustomVerificationEmailTemplateMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDedicatedIpPoolsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDedicatedIpPoolsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDedicatedIpPoolsOutput()
        value.dedicatedIpPools = try reader["DedicatedIpPools"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDeliverabilityTestReportsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDeliverabilityTestReportsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDeliverabilityTestReportsOutput()
        value.deliverabilityTestReports = try reader["DeliverabilityTestReports"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.DeliverabilityTestReport.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDomainDeliverabilityCampaignsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDomainDeliverabilityCampaignsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDomainDeliverabilityCampaignsOutput()
        value.domainDeliverabilityCampaigns = try reader["DomainDeliverabilityCampaigns"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.DomainDeliverabilityCampaign.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEmailIdentitiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEmailIdentitiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEmailIdentitiesOutput()
        value.emailIdentities = try reader["EmailIdentities"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.IdentityInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEmailTemplatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEmailTemplatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEmailTemplatesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.templatesMetadata = try reader["TemplatesMetadata"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.EmailTemplateMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListExportJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListExportJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListExportJobsOutput()
        value.exportJobs = try reader["ExportJobs"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.ExportJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListImportJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListImportJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListImportJobsOutput()
        value.importJobs = try reader["ImportJobs"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.ImportJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRecommendationsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.recommendations = try reader["Recommendations"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.Recommendation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSuppressedDestinationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSuppressedDestinationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSuppressedDestinationsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.suppressedDestinationSummaries = try reader["SuppressedDestinationSummaries"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.SuppressedDestinationSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension PutAccountDedicatedIpWarmupAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAccountDedicatedIpWarmupAttributesOutput {
        return PutAccountDedicatedIpWarmupAttributesOutput()
    }
}

extension PutAccountDetailsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAccountDetailsOutput {
        return PutAccountDetailsOutput()
    }
}

extension PutAccountSendingAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAccountSendingAttributesOutput {
        return PutAccountSendingAttributesOutput()
    }
}

extension PutAccountSuppressionAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAccountSuppressionAttributesOutput {
        return PutAccountSuppressionAttributesOutput()
    }
}

extension PutAccountVdmAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAccountVdmAttributesOutput {
        return PutAccountVdmAttributesOutput()
    }
}

extension PutConfigurationSetDeliveryOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutConfigurationSetDeliveryOptionsOutput {
        return PutConfigurationSetDeliveryOptionsOutput()
    }
}

extension PutConfigurationSetReputationOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutConfigurationSetReputationOptionsOutput {
        return PutConfigurationSetReputationOptionsOutput()
    }
}

extension PutConfigurationSetSendingOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutConfigurationSetSendingOptionsOutput {
        return PutConfigurationSetSendingOptionsOutput()
    }
}

extension PutConfigurationSetSuppressionOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutConfigurationSetSuppressionOptionsOutput {
        return PutConfigurationSetSuppressionOptionsOutput()
    }
}

extension PutConfigurationSetTrackingOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutConfigurationSetTrackingOptionsOutput {
        return PutConfigurationSetTrackingOptionsOutput()
    }
}

extension PutConfigurationSetVdmOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutConfigurationSetVdmOptionsOutput {
        return PutConfigurationSetVdmOptionsOutput()
    }
}

extension PutDedicatedIpInPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDedicatedIpInPoolOutput {
        return PutDedicatedIpInPoolOutput()
    }
}

extension PutDedicatedIpPoolScalingAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDedicatedIpPoolScalingAttributesOutput {
        return PutDedicatedIpPoolScalingAttributesOutput()
    }
}

extension PutDedicatedIpWarmupAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDedicatedIpWarmupAttributesOutput {
        return PutDedicatedIpWarmupAttributesOutput()
    }
}

extension PutDeliverabilityDashboardOptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDeliverabilityDashboardOptionOutput {
        return PutDeliverabilityDashboardOptionOutput()
    }
}

extension PutEmailIdentityConfigurationSetAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutEmailIdentityConfigurationSetAttributesOutput {
        return PutEmailIdentityConfigurationSetAttributesOutput()
    }
}

extension PutEmailIdentityDkimAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutEmailIdentityDkimAttributesOutput {
        return PutEmailIdentityDkimAttributesOutput()
    }
}

extension PutEmailIdentityDkimSigningAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutEmailIdentityDkimSigningAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutEmailIdentityDkimSigningAttributesOutput()
        value.dkimStatus = try reader["DkimStatus"].readIfPresent()
        value.dkimTokens = try reader["DkimTokens"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutEmailIdentityFeedbackAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutEmailIdentityFeedbackAttributesOutput {
        return PutEmailIdentityFeedbackAttributesOutput()
    }
}

extension PutEmailIdentityMailFromAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutEmailIdentityMailFromAttributesOutput {
        return PutEmailIdentityMailFromAttributesOutput()
    }
}

extension PutSuppressedDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutSuppressedDestinationOutput {
        return PutSuppressedDestinationOutput()
    }
}

extension SendBulkEmailOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendBulkEmailOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SendBulkEmailOutput()
        value.bulkEmailEntryResults = try reader["BulkEmailEntryResults"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.BulkEmailEntryResult.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SendCustomVerificationEmailOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendCustomVerificationEmailOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SendCustomVerificationEmailOutput()
        value.messageId = try reader["MessageId"].readIfPresent()
        return value
    }
}

extension SendEmailOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendEmailOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SendEmailOutput()
        value.messageId = try reader["MessageId"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension TestRenderEmailTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TestRenderEmailTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TestRenderEmailTemplateOutput()
        value.renderedTemplate = try reader["RenderedTemplate"].readIfPresent() ?? ""
        return value
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateConfigurationSetEventDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateConfigurationSetEventDestinationOutput {
        return UpdateConfigurationSetEventDestinationOutput()
    }
}

extension UpdateContactOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateContactOutput {
        return UpdateContactOutput()
    }
}

extension UpdateContactListOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateContactListOutput {
        return UpdateContactListOutput()
    }
}

extension UpdateCustomVerificationEmailTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateCustomVerificationEmailTemplateOutput {
        return UpdateCustomVerificationEmailTemplateOutput()
    }
}

extension UpdateEmailIdentityPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEmailIdentityPolicyOutput {
        return UpdateEmailIdentityPolicyOutput()
    }
}

extension UpdateEmailTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEmailTemplateOutput {
        return UpdateEmailTemplateOutput()
    }
}

enum BatchGetMetricDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelExportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateConfigurationSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateConfigurationSetEventDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateContactOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateContactListOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCustomVerificationEmailTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDedicatedIpPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDeliverabilityTestReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccountSuspendedException": return try AccountSuspendedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MailFromDomainNotVerifiedException": return try MailFromDomainNotVerifiedException.makeError(baseError: baseError)
            case "MessageRejected": return try MessageRejected.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "SendingPausedException": return try SendingPausedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEmailIdentityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEmailIdentityPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEmailTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateExportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateImportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteConfigurationSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteConfigurationSetEventDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteContactOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteContactListOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCustomVerificationEmailTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDedicatedIpPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEmailIdentityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEmailIdentityPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEmailTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSuppressedDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBlacklistReportsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConfigurationSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConfigurationSetEventDestinationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetContactOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetContactListOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCustomVerificationEmailTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDedicatedIpOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDedicatedIpPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDedicatedIpsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeliverabilityDashboardOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeliverabilityTestReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDomainDeliverabilityCampaignOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDomainStatisticsReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEmailIdentityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEmailIdentityPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEmailTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetExportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetImportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMessageInsightsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSuppressedDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListConfigurationSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListContactListsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListContactsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCustomVerificationEmailTemplatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDedicatedIpPoolsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDeliverabilityTestReportsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDomainDeliverabilityCampaignsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEmailIdentitiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEmailTemplatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListExportJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListImportJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSuppressedDestinationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAccountDedicatedIpWarmupAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAccountDetailsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAccountSendingAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAccountSuppressionAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAccountVdmAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutConfigurationSetDeliveryOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutConfigurationSetReputationOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutConfigurationSetSendingOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutConfigurationSetSuppressionOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutConfigurationSetTrackingOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutConfigurationSetVdmOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDedicatedIpInPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDedicatedIpPoolScalingAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDedicatedIpWarmupAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDeliverabilityDashboardOptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutEmailIdentityConfigurationSetAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutEmailIdentityDkimAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutEmailIdentityDkimSigningAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutEmailIdentityFeedbackAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutEmailIdentityMailFromAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutSuppressedDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendBulkEmailOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccountSuspendedException": return try AccountSuspendedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MailFromDomainNotVerifiedException": return try MailFromDomainNotVerifiedException.makeError(baseError: baseError)
            case "MessageRejected": return try MessageRejected.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "SendingPausedException": return try SendingPausedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendCustomVerificationEmailOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MailFromDomainNotVerifiedException": return try MailFromDomainNotVerifiedException.makeError(baseError: baseError)
            case "MessageRejected": return try MessageRejected.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "SendingPausedException": return try SendingPausedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendEmailOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccountSuspendedException": return try AccountSuspendedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MailFromDomainNotVerifiedException": return try MailFromDomainNotVerifiedException.makeError(baseError: baseError)
            case "MessageRejected": return try MessageRejected.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "SendingPausedException": return try SendingPausedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TestRenderEmailTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateConfigurationSetEventDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateContactOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateContactListOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateCustomVerificationEmailTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEmailIdentityPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEmailTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServiceErrorException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServiceErrorException {
        let reader = baseError.errorBodyReader
        var value = InternalServiceErrorException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = AlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentModificationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConcurrentModificationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentModificationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MailFromDomainNotVerifiedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> MailFromDomainNotVerifiedException {
        let reader = baseError.errorBodyReader
        var value = MailFromDomainNotVerifiedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccountSuspendedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccountSuspendedException {
        let reader = baseError.errorBodyReader
        var value = AccountSuspendedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SendingPausedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> SendingPausedException {
        let reader = baseError.errorBodyReader
        var value = SendingPausedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MessageRejected {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> MessageRejected {
        let reader = baseError.errorBodyReader
        var value = MessageRejected()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidNextTokenException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidNextTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidNextTokenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SESv2ClientTypes.MetricDataResult {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.MetricDataResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.MetricDataResult()
        value.id = try reader["Id"].readIfPresent()
        value.timestamps = try reader["Timestamps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.timestampReadingClosure(format: SmithyTimestamps.TimestampFormat.epochSeconds), memberNodeInfo: "member", isFlattened: false)
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SESv2ClientTypes.MetricDataError {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.MetricDataError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.MetricDataError()
        value.id = try reader["Id"].readIfPresent()
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.DkimAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.DkimAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.DkimAttributes()
        value.signingEnabled = try reader["SigningEnabled"].readIfPresent() ?? false
        value.status = try reader["Status"].readIfPresent()
        value.tokens = try reader["Tokens"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.signingAttributesOrigin = try reader["SigningAttributesOrigin"].readIfPresent()
        value.nextSigningKeyLength = try reader["NextSigningKeyLength"].readIfPresent()
        value.currentSigningKeyLength = try reader["CurrentSigningKeyLength"].readIfPresent()
        value.lastKeyGenerationTimestamp = try reader["LastKeyGenerationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SESv2ClientTypes.SendQuota {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.SendQuota {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.SendQuota()
        value.max24HourSend = try reader["Max24HourSend"].readIfPresent() ?? 0
        value.maxSendRate = try reader["MaxSendRate"].readIfPresent() ?? 0
        value.sentLast24Hours = try reader["SentLast24Hours"].readIfPresent() ?? 0
        return value
    }
}

extension SESv2ClientTypes.SuppressionAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.SuppressionAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.SuppressionAttributes()
        value.suppressedReasons = try reader["SuppressedReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SESv2ClientTypes.SuppressionListReason>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SESv2ClientTypes.AccountDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.AccountDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.AccountDetails()
        value.mailType = try reader["MailType"].readIfPresent()
        value.websiteURL = try reader["WebsiteURL"].readIfPresent()
        value.contactLanguage = try reader["ContactLanguage"].readIfPresent()
        value.useCaseDescription = try reader["UseCaseDescription"].readIfPresent()
        value.additionalContactEmailAddresses = try reader["AdditionalContactEmailAddresses"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.reviewDetails = try reader["ReviewDetails"].readIfPresent(with: SESv2ClientTypes.ReviewDetails.read(from:))
        return value
    }
}

extension SESv2ClientTypes.ReviewDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.ReviewDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.ReviewDetails()
        value.status = try reader["Status"].readIfPresent()
        value.caseId = try reader["CaseId"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.VdmAttributes {

    static func write(value: SESv2ClientTypes.VdmAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DashboardAttributes"].write(value.dashboardAttributes, with: SESv2ClientTypes.DashboardAttributes.write(value:to:))
        try writer["GuardianAttributes"].write(value.guardianAttributes, with: SESv2ClientTypes.GuardianAttributes.write(value:to:))
        try writer["VdmEnabled"].write(value.vdmEnabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.VdmAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.VdmAttributes()
        value.vdmEnabled = try reader["VdmEnabled"].readIfPresent() ?? .sdkUnknown("")
        value.dashboardAttributes = try reader["DashboardAttributes"].readIfPresent(with: SESv2ClientTypes.DashboardAttributes.read(from:))
        value.guardianAttributes = try reader["GuardianAttributes"].readIfPresent(with: SESv2ClientTypes.GuardianAttributes.read(from:))
        return value
    }
}

extension SESv2ClientTypes.GuardianAttributes {

    static func write(value: SESv2ClientTypes.GuardianAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OptimizedSharedDelivery"].write(value.optimizedSharedDelivery)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.GuardianAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.GuardianAttributes()
        value.optimizedSharedDelivery = try reader["OptimizedSharedDelivery"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.DashboardAttributes {

    static func write(value: SESv2ClientTypes.DashboardAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EngagementMetrics"].write(value.engagementMetrics)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.DashboardAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.DashboardAttributes()
        value.engagementMetrics = try reader["EngagementMetrics"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.BlacklistEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.BlacklistEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.BlacklistEntry()
        value.rblName = try reader["RblName"].readIfPresent()
        value.listingTime = try reader["ListingTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.TrackingOptions {

    static func write(value: SESv2ClientTypes.TrackingOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomRedirectDomain"].write(value.customRedirectDomain)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.TrackingOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.TrackingOptions()
        value.customRedirectDomain = try reader["CustomRedirectDomain"].readIfPresent() ?? ""
        return value
    }
}

extension SESv2ClientTypes.DeliveryOptions {

    static func write(value: SESv2ClientTypes.DeliveryOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SendingPoolName"].write(value.sendingPoolName)
        try writer["TlsPolicy"].write(value.tlsPolicy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.DeliveryOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.DeliveryOptions()
        value.tlsPolicy = try reader["TlsPolicy"].readIfPresent()
        value.sendingPoolName = try reader["SendingPoolName"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.ReputationOptions {

    static func write(value: SESv2ClientTypes.ReputationOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LastFreshStart"].writeTimestamp(value.lastFreshStart, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ReputationMetricsEnabled"].write(value.reputationMetricsEnabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.ReputationOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.ReputationOptions()
        value.reputationMetricsEnabled = try reader["ReputationMetricsEnabled"].readIfPresent() ?? false
        value.lastFreshStart = try reader["LastFreshStart"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SESv2ClientTypes.SendingOptions {

    static func write(value: SESv2ClientTypes.SendingOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SendingEnabled"].write(value.sendingEnabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.SendingOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.SendingOptions()
        value.sendingEnabled = try reader["SendingEnabled"].readIfPresent() ?? false
        return value
    }
}

extension SESv2ClientTypes.Tag {

    static func write(value: SESv2ClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension SESv2ClientTypes.SuppressionOptions {

    static func write(value: SESv2ClientTypes.SuppressionOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SuppressedReasons"].writeList(value.suppressedReasons, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SESv2ClientTypes.SuppressionListReason>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.SuppressionOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.SuppressionOptions()
        value.suppressedReasons = try reader["SuppressedReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SESv2ClientTypes.SuppressionListReason>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SESv2ClientTypes.VdmOptions {

    static func write(value: SESv2ClientTypes.VdmOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DashboardOptions"].write(value.dashboardOptions, with: SESv2ClientTypes.DashboardOptions.write(value:to:))
        try writer["GuardianOptions"].write(value.guardianOptions, with: SESv2ClientTypes.GuardianOptions.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.VdmOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.VdmOptions()
        value.dashboardOptions = try reader["DashboardOptions"].readIfPresent(with: SESv2ClientTypes.DashboardOptions.read(from:))
        value.guardianOptions = try reader["GuardianOptions"].readIfPresent(with: SESv2ClientTypes.GuardianOptions.read(from:))
        return value
    }
}

extension SESv2ClientTypes.GuardianOptions {

    static func write(value: SESv2ClientTypes.GuardianOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OptimizedSharedDelivery"].write(value.optimizedSharedDelivery)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.GuardianOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.GuardianOptions()
        value.optimizedSharedDelivery = try reader["OptimizedSharedDelivery"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.DashboardOptions {

    static func write(value: SESv2ClientTypes.DashboardOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EngagementMetrics"].write(value.engagementMetrics)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.DashboardOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.DashboardOptions()
        value.engagementMetrics = try reader["EngagementMetrics"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.EventDestination {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.EventDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.EventDestination()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.enabled = try reader["Enabled"].readIfPresent() ?? false
        value.matchingEventTypes = try reader["MatchingEventTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SESv2ClientTypes.EventType>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.kinesisFirehoseDestination = try reader["KinesisFirehoseDestination"].readIfPresent(with: SESv2ClientTypes.KinesisFirehoseDestination.read(from:))
        value.cloudWatchDestination = try reader["CloudWatchDestination"].readIfPresent(with: SESv2ClientTypes.CloudWatchDestination.read(from:))
        value.snsDestination = try reader["SnsDestination"].readIfPresent(with: SESv2ClientTypes.SnsDestination.read(from:))
        value.eventBridgeDestination = try reader["EventBridgeDestination"].readIfPresent(with: SESv2ClientTypes.EventBridgeDestination.read(from:))
        value.pinpointDestination = try reader["PinpointDestination"].readIfPresent(with: SESv2ClientTypes.PinpointDestination.read(from:))
        return value
    }
}

extension SESv2ClientTypes.PinpointDestination {

    static func write(value: SESv2ClientTypes.PinpointDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApplicationArn"].write(value.applicationArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.PinpointDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.PinpointDestination()
        value.applicationArn = try reader["ApplicationArn"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.EventBridgeDestination {

    static func write(value: SESv2ClientTypes.EventBridgeDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventBusArn"].write(value.eventBusArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.EventBridgeDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.EventBridgeDestination()
        value.eventBusArn = try reader["EventBusArn"].readIfPresent() ?? ""
        return value
    }
}

extension SESv2ClientTypes.SnsDestination {

    static func write(value: SESv2ClientTypes.SnsDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TopicArn"].write(value.topicArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.SnsDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.SnsDestination()
        value.topicArn = try reader["TopicArn"].readIfPresent() ?? ""
        return value
    }
}

extension SESv2ClientTypes.CloudWatchDestination {

    static func write(value: SESv2ClientTypes.CloudWatchDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DimensionConfigurations"].writeList(value.dimensionConfigurations, memberWritingClosure: SESv2ClientTypes.CloudWatchDimensionConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.CloudWatchDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.CloudWatchDestination()
        value.dimensionConfigurations = try reader["DimensionConfigurations"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.CloudWatchDimensionConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SESv2ClientTypes.CloudWatchDimensionConfiguration {

    static func write(value: SESv2ClientTypes.CloudWatchDimensionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultDimensionValue"].write(value.defaultDimensionValue)
        try writer["DimensionName"].write(value.dimensionName)
        try writer["DimensionValueSource"].write(value.dimensionValueSource)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.CloudWatchDimensionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.CloudWatchDimensionConfiguration()
        value.dimensionName = try reader["DimensionName"].readIfPresent() ?? ""
        value.dimensionValueSource = try reader["DimensionValueSource"].readIfPresent() ?? .sdkUnknown("")
        value.defaultDimensionValue = try reader["DefaultDimensionValue"].readIfPresent() ?? ""
        return value
    }
}

extension SESv2ClientTypes.KinesisFirehoseDestination {

    static func write(value: SESv2ClientTypes.KinesisFirehoseDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeliveryStreamArn"].write(value.deliveryStreamArn)
        try writer["IamRoleArn"].write(value.iamRoleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.KinesisFirehoseDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.KinesisFirehoseDestination()
        value.iamRoleArn = try reader["IamRoleArn"].readIfPresent() ?? ""
        value.deliveryStreamArn = try reader["DeliveryStreamArn"].readIfPresent() ?? ""
        return value
    }
}

extension SESv2ClientTypes.TopicPreference {

    static func write(value: SESv2ClientTypes.TopicPreference?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SubscriptionStatus"].write(value.subscriptionStatus)
        try writer["TopicName"].write(value.topicName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.TopicPreference {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.TopicPreference()
        value.topicName = try reader["TopicName"].readIfPresent() ?? ""
        value.subscriptionStatus = try reader["SubscriptionStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SESv2ClientTypes.Topic {

    static func write(value: SESv2ClientTypes.Topic?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultSubscriptionStatus"].write(value.defaultSubscriptionStatus)
        try writer["Description"].write(value.description)
        try writer["DisplayName"].write(value.displayName)
        try writer["TopicName"].write(value.topicName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.Topic {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.Topic()
        value.topicName = try reader["TopicName"].readIfPresent() ?? ""
        value.displayName = try reader["DisplayName"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.defaultSubscriptionStatus = try reader["DefaultSubscriptionStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SESv2ClientTypes.DedicatedIp {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.DedicatedIp {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.DedicatedIp()
        value.ip = try reader["Ip"].readIfPresent() ?? ""
        value.warmupStatus = try reader["WarmupStatus"].readIfPresent() ?? .sdkUnknown("")
        value.warmupPercentage = try reader["WarmupPercentage"].readIfPresent() ?? 0
        value.poolName = try reader["PoolName"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.DedicatedIpPool {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.DedicatedIpPool {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.DedicatedIpPool()
        value.poolName = try reader["PoolName"].readIfPresent() ?? ""
        value.scalingMode = try reader["ScalingMode"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SESv2ClientTypes.DomainDeliverabilityTrackingOption {

    static func write(value: SESv2ClientTypes.DomainDeliverabilityTrackingOption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Domain"].write(value.domain)
        try writer["InboxPlacementTrackingOption"].write(value.inboxPlacementTrackingOption, with: SESv2ClientTypes.InboxPlacementTrackingOption.write(value:to:))
        try writer["SubscriptionStartDate"].writeTimestamp(value.subscriptionStartDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.DomainDeliverabilityTrackingOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.DomainDeliverabilityTrackingOption()
        value.domain = try reader["Domain"].readIfPresent()
        value.subscriptionStartDate = try reader["SubscriptionStartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inboxPlacementTrackingOption = try reader["InboxPlacementTrackingOption"].readIfPresent(with: SESv2ClientTypes.InboxPlacementTrackingOption.read(from:))
        return value
    }
}

extension SESv2ClientTypes.InboxPlacementTrackingOption {

    static func write(value: SESv2ClientTypes.InboxPlacementTrackingOption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Global"].write(value.global)
        try writer["TrackedIsps"].writeList(value.trackedIsps, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.InboxPlacementTrackingOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.InboxPlacementTrackingOption()
        value.global = try reader["Global"].readIfPresent() ?? false
        value.trackedIsps = try reader["TrackedIsps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SESv2ClientTypes.DeliverabilityTestReport {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.DeliverabilityTestReport {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.DeliverabilityTestReport()
        value.reportId = try reader["ReportId"].readIfPresent()
        value.reportName = try reader["ReportName"].readIfPresent()
        value.subject = try reader["Subject"].readIfPresent()
        value.fromEmailAddress = try reader["FromEmailAddress"].readIfPresent()
        value.createDate = try reader["CreateDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deliverabilityTestStatus = try reader["DeliverabilityTestStatus"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.PlacementStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.PlacementStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.PlacementStatistics()
        value.inboxPercentage = try reader["InboxPercentage"].readIfPresent()
        value.spamPercentage = try reader["SpamPercentage"].readIfPresent()
        value.missingPercentage = try reader["MissingPercentage"].readIfPresent()
        value.spfPercentage = try reader["SpfPercentage"].readIfPresent()
        value.dkimPercentage = try reader["DkimPercentage"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.IspPlacement {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.IspPlacement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.IspPlacement()
        value.ispName = try reader["IspName"].readIfPresent()
        value.placementStatistics = try reader["PlacementStatistics"].readIfPresent(with: SESv2ClientTypes.PlacementStatistics.read(from:))
        return value
    }
}

extension SESv2ClientTypes.DomainDeliverabilityCampaign {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.DomainDeliverabilityCampaign {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.DomainDeliverabilityCampaign()
        value.campaignId = try reader["CampaignId"].readIfPresent()
        value.imageUrl = try reader["ImageUrl"].readIfPresent()
        value.subject = try reader["Subject"].readIfPresent()
        value.fromAddress = try reader["FromAddress"].readIfPresent()
        value.sendingIps = try reader["SendingIps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.firstSeenDateTime = try reader["FirstSeenDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastSeenDateTime = try reader["LastSeenDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inboxCount = try reader["InboxCount"].readIfPresent()
        value.spamCount = try reader["SpamCount"].readIfPresent()
        value.readRate = try reader["ReadRate"].readIfPresent()
        value.deleteRate = try reader["DeleteRate"].readIfPresent()
        value.readDeleteRate = try reader["ReadDeleteRate"].readIfPresent()
        value.projectedVolume = try reader["ProjectedVolume"].readIfPresent()
        value.esps = try reader["Esps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SESv2ClientTypes.OverallVolume {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.OverallVolume {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.OverallVolume()
        value.volumeStatistics = try reader["VolumeStatistics"].readIfPresent(with: SESv2ClientTypes.VolumeStatistics.read(from:))
        value.readRatePercent = try reader["ReadRatePercent"].readIfPresent()
        value.domainIspPlacements = try reader["DomainIspPlacements"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.DomainIspPlacement.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SESv2ClientTypes.DomainIspPlacement {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.DomainIspPlacement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.DomainIspPlacement()
        value.ispName = try reader["IspName"].readIfPresent()
        value.inboxRawCount = try reader["InboxRawCount"].readIfPresent()
        value.spamRawCount = try reader["SpamRawCount"].readIfPresent()
        value.inboxPercentage = try reader["InboxPercentage"].readIfPresent()
        value.spamPercentage = try reader["SpamPercentage"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.VolumeStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.VolumeStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.VolumeStatistics()
        value.inboxRawCount = try reader["InboxRawCount"].readIfPresent()
        value.spamRawCount = try reader["SpamRawCount"].readIfPresent()
        value.projectedInbox = try reader["ProjectedInbox"].readIfPresent()
        value.projectedSpam = try reader["ProjectedSpam"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.DailyVolume {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.DailyVolume {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.DailyVolume()
        value.startDate = try reader["StartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.volumeStatistics = try reader["VolumeStatistics"].readIfPresent(with: SESv2ClientTypes.VolumeStatistics.read(from:))
        value.domainIspPlacements = try reader["DomainIspPlacements"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.DomainIspPlacement.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SESv2ClientTypes.MailFromAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.MailFromAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.MailFromAttributes()
        value.mailFromDomain = try reader["MailFromDomain"].readIfPresent() ?? ""
        value.mailFromDomainStatus = try reader["MailFromDomainStatus"].readIfPresent() ?? .sdkUnknown("")
        value.behaviorOnMxFailure = try reader["BehaviorOnMxFailure"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SESv2ClientTypes.VerificationInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.VerificationInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.VerificationInfo()
        value.lastCheckedTimestamp = try reader["LastCheckedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastSuccessTimestamp = try reader["LastSuccessTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.errorType = try reader["ErrorType"].readIfPresent()
        value.soaRecord = try reader["SOARecord"].readIfPresent(with: SESv2ClientTypes.SOARecord.read(from:))
        return value
    }
}

extension SESv2ClientTypes.SOARecord {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.SOARecord {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.SOARecord()
        value.primaryNameServer = try reader["PrimaryNameServer"].readIfPresent()
        value.adminEmail = try reader["AdminEmail"].readIfPresent()
        value.serialNumber = try reader["SerialNumber"].readIfPresent() ?? 0
        return value
    }
}

extension SESv2ClientTypes.EmailTemplateContent {

    static func write(value: SESv2ClientTypes.EmailTemplateContent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Html"].write(value.html)
        try writer["Subject"].write(value.subject)
        try writer["Text"].write(value.text)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.EmailTemplateContent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.EmailTemplateContent()
        value.subject = try reader["Subject"].readIfPresent()
        value.text = try reader["Text"].readIfPresent()
        value.html = try reader["Html"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.ExportDestination {

    static func write(value: SESv2ClientTypes.ExportDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataFormat"].write(value.dataFormat)
        try writer["S3Url"].write(value.s3Url)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.ExportDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.ExportDestination()
        value.dataFormat = try reader["DataFormat"].readIfPresent() ?? .sdkUnknown("")
        value.s3Url = try reader["S3Url"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.ExportDataSource {

    static func write(value: SESv2ClientTypes.ExportDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MessageInsightsDataSource"].write(value.messageInsightsDataSource, with: SESv2ClientTypes.MessageInsightsDataSource.write(value:to:))
        try writer["MetricsDataSource"].write(value.metricsDataSource, with: SESv2ClientTypes.MetricsDataSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.ExportDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.ExportDataSource()
        value.metricsDataSource = try reader["MetricsDataSource"].readIfPresent(with: SESv2ClientTypes.MetricsDataSource.read(from:))
        value.messageInsightsDataSource = try reader["MessageInsightsDataSource"].readIfPresent(with: SESv2ClientTypes.MessageInsightsDataSource.read(from:))
        return value
    }
}

extension SESv2ClientTypes.MessageInsightsDataSource {

    static func write(value: SESv2ClientTypes.MessageInsightsDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndDate"].writeTimestamp(value.endDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Exclude"].write(value.exclude, with: SESv2ClientTypes.MessageInsightsFilters.write(value:to:))
        try writer["Include"].write(value.include, with: SESv2ClientTypes.MessageInsightsFilters.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["StartDate"].writeTimestamp(value.startDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.MessageInsightsDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.MessageInsightsDataSource()
        value.startDate = try reader["StartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endDate = try reader["EndDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.include = try reader["Include"].readIfPresent(with: SESv2ClientTypes.MessageInsightsFilters.read(from:))
        value.exclude = try reader["Exclude"].readIfPresent(with: SESv2ClientTypes.MessageInsightsFilters.read(from:))
        value.maxResults = try reader["MaxResults"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.MessageInsightsFilters {

    static func write(value: SESv2ClientTypes.MessageInsightsFilters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Destination"].writeList(value.destination, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FromEmailAddress"].writeList(value.fromEmailAddress, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Isp"].writeList(value.isp, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LastDeliveryEvent"].writeList(value.lastDeliveryEvent, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SESv2ClientTypes.DeliveryEventType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LastEngagementEvent"].writeList(value.lastEngagementEvent, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SESv2ClientTypes.EngagementEventType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Subject"].writeList(value.subject, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.MessageInsightsFilters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.MessageInsightsFilters()
        value.fromEmailAddress = try reader["FromEmailAddress"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.destination = try reader["Destination"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.subject = try reader["Subject"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.isp = try reader["Isp"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastDeliveryEvent = try reader["LastDeliveryEvent"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SESv2ClientTypes.DeliveryEventType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastEngagementEvent = try reader["LastEngagementEvent"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SESv2ClientTypes.EngagementEventType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SESv2ClientTypes.MetricsDataSource {

    static func write(value: SESv2ClientTypes.MetricsDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Dimensions"].writeMap(value.dimensions, valueWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["EndDate"].writeTimestamp(value.endDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Metrics"].writeList(value.metrics, memberWritingClosure: SESv2ClientTypes.ExportMetric.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Namespace"].write(value.namespace)
        try writer["StartDate"].writeTimestamp(value.startDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.MetricsDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.MetricsDataSource()
        value.dimensions = try reader["Dimensions"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.namespace = try reader["Namespace"].readIfPresent() ?? .sdkUnknown("")
        value.metrics = try reader["Metrics"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.ExportMetric.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.startDate = try reader["StartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endDate = try reader["EndDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension SESv2ClientTypes.ExportMetric {

    static func write(value: SESv2ClientTypes.ExportMetric?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Aggregation"].write(value.aggregation)
        try writer["Name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.ExportMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.ExportMetric()
        value.name = try reader["Name"].readIfPresent()
        value.aggregation = try reader["Aggregation"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.FailureInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.FailureInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.FailureInfo()
        value.failedRecordsS3Url = try reader["FailedRecordsS3Url"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.ExportStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.ExportStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.ExportStatistics()
        value.processedRecordsCount = try reader["ProcessedRecordsCount"].readIfPresent()
        value.exportedRecordsCount = try reader["ExportedRecordsCount"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.ImportDestination {

    static func write(value: SESv2ClientTypes.ImportDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContactListDestination"].write(value.contactListDestination, with: SESv2ClientTypes.ContactListDestination.write(value:to:))
        try writer["SuppressionListDestination"].write(value.suppressionListDestination, with: SESv2ClientTypes.SuppressionListDestination.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.ImportDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.ImportDestination()
        value.suppressionListDestination = try reader["SuppressionListDestination"].readIfPresent(with: SESv2ClientTypes.SuppressionListDestination.read(from:))
        value.contactListDestination = try reader["ContactListDestination"].readIfPresent(with: SESv2ClientTypes.ContactListDestination.read(from:))
        return value
    }
}

extension SESv2ClientTypes.ContactListDestination {

    static func write(value: SESv2ClientTypes.ContactListDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContactListImportAction"].write(value.contactListImportAction)
        try writer["ContactListName"].write(value.contactListName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.ContactListDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.ContactListDestination()
        value.contactListName = try reader["ContactListName"].readIfPresent() ?? ""
        value.contactListImportAction = try reader["ContactListImportAction"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SESv2ClientTypes.SuppressionListDestination {

    static func write(value: SESv2ClientTypes.SuppressionListDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SuppressionListImportAction"].write(value.suppressionListImportAction)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.SuppressionListDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.SuppressionListDestination()
        value.suppressionListImportAction = try reader["SuppressionListImportAction"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SESv2ClientTypes.ImportDataSource {

    static func write(value: SESv2ClientTypes.ImportDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataFormat"].write(value.dataFormat)
        try writer["S3Url"].write(value.s3Url)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.ImportDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.ImportDataSource()
        value.s3Url = try reader["S3Url"].readIfPresent() ?? ""
        value.dataFormat = try reader["DataFormat"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SESv2ClientTypes.MessageTag {

    static func write(value: SESv2ClientTypes.MessageTag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.MessageTag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.MessageTag()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension SESv2ClientTypes.EmailInsights {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.EmailInsights {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.EmailInsights()
        value.destination = try reader["Destination"].readIfPresent()
        value.isp = try reader["Isp"].readIfPresent()
        value.events = try reader["Events"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.InsightsEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SESv2ClientTypes.InsightsEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.InsightsEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.InsightsEvent()
        value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.type = try reader["Type"].readIfPresent()
        value.details = try reader["Details"].readIfPresent(with: SESv2ClientTypes.EventDetails.read(from:))
        return value
    }
}

extension SESv2ClientTypes.EventDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.EventDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.EventDetails()
        value.bounce = try reader["Bounce"].readIfPresent(with: SESv2ClientTypes.Bounce.read(from:))
        value.complaint = try reader["Complaint"].readIfPresent(with: SESv2ClientTypes.Complaint.read(from:))
        return value
    }
}

extension SESv2ClientTypes.Complaint {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.Complaint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.Complaint()
        value.complaintSubType = try reader["ComplaintSubType"].readIfPresent()
        value.complaintFeedbackType = try reader["ComplaintFeedbackType"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.Bounce {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.Bounce {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.Bounce()
        value.bounceType = try reader["BounceType"].readIfPresent()
        value.bounceSubType = try reader["BounceSubType"].readIfPresent()
        value.diagnosticCode = try reader["DiagnosticCode"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.SuppressedDestination {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.SuppressedDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.SuppressedDestination()
        value.emailAddress = try reader["EmailAddress"].readIfPresent() ?? ""
        value.reason = try reader["Reason"].readIfPresent() ?? .sdkUnknown("")
        value.lastUpdateTime = try reader["LastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.attributes = try reader["Attributes"].readIfPresent(with: SESv2ClientTypes.SuppressedDestinationAttributes.read(from:))
        return value
    }
}

extension SESv2ClientTypes.SuppressedDestinationAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.SuppressedDestinationAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.SuppressedDestinationAttributes()
        value.messageId = try reader["MessageId"].readIfPresent()
        value.feedbackId = try reader["FeedbackId"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.ContactList {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.ContactList {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.ContactList()
        value.contactListName = try reader["ContactListName"].readIfPresent()
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SESv2ClientTypes.Contact {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.Contact {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.Contact()
        value.emailAddress = try reader["EmailAddress"].readIfPresent()
        value.topicPreferences = try reader["TopicPreferences"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.TopicPreference.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.topicDefaultPreferences = try reader["TopicDefaultPreferences"].readListIfPresent(memberReadingClosure: SESv2ClientTypes.TopicPreference.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.unsubscribeAll = try reader["UnsubscribeAll"].readIfPresent() ?? false
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SESv2ClientTypes.CustomVerificationEmailTemplateMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.CustomVerificationEmailTemplateMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.CustomVerificationEmailTemplateMetadata()
        value.templateName = try reader["TemplateName"].readIfPresent()
        value.fromEmailAddress = try reader["FromEmailAddress"].readIfPresent()
        value.templateSubject = try reader["TemplateSubject"].readIfPresent()
        value.successRedirectionURL = try reader["SuccessRedirectionURL"].readIfPresent()
        value.failureRedirectionURL = try reader["FailureRedirectionURL"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.IdentityInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.IdentityInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.IdentityInfo()
        value.identityType = try reader["IdentityType"].readIfPresent()
        value.identityName = try reader["IdentityName"].readIfPresent()
        value.sendingEnabled = try reader["SendingEnabled"].readIfPresent() ?? false
        value.verificationStatus = try reader["VerificationStatus"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.EmailTemplateMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.EmailTemplateMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.EmailTemplateMetadata()
        value.templateName = try reader["TemplateName"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SESv2ClientTypes.ExportJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.ExportJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.ExportJobSummary()
        value.jobId = try reader["JobId"].readIfPresent()
        value.exportSourceType = try reader["ExportSourceType"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.completedTimestamp = try reader["CompletedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SESv2ClientTypes.ImportJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.ImportJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.ImportJobSummary()
        value.jobId = try reader["JobId"].readIfPresent()
        value.importDestination = try reader["ImportDestination"].readIfPresent(with: SESv2ClientTypes.ImportDestination.read(from:))
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.processedRecordsCount = try reader["ProcessedRecordsCount"].readIfPresent()
        value.failedRecordsCount = try reader["FailedRecordsCount"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.Recommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.Recommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.Recommendation()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.impact = try reader["Impact"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.SuppressedDestinationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.SuppressedDestinationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.SuppressedDestinationSummary()
        value.emailAddress = try reader["EmailAddress"].readIfPresent() ?? ""
        value.reason = try reader["Reason"].readIfPresent() ?? .sdkUnknown("")
        value.lastUpdateTime = try reader["LastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension SESv2ClientTypes.BulkEmailEntryResult {

    static func read(from reader: SmithyJSON.Reader) throws -> SESv2ClientTypes.BulkEmailEntryResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SESv2ClientTypes.BulkEmailEntryResult()
        value.status = try reader["Status"].readIfPresent()
        value.error = try reader["Error"].readIfPresent()
        value.messageId = try reader["MessageId"].readIfPresent()
        return value
    }
}

extension SESv2ClientTypes.BatchGetMetricDataQuery {

    static func write(value: SESv2ClientTypes.BatchGetMetricDataQuery?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Dimensions"].writeMap(value.dimensions, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["EndDate"].writeTimestamp(value.endDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Id"].write(value.id)
        try writer["Metric"].write(value.metric)
        try writer["Namespace"].write(value.namespace)
        try writer["StartDate"].writeTimestamp(value.startDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension SESv2ClientTypes.EventDestinationDefinition {

    static func write(value: SESv2ClientTypes.EventDestinationDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CloudWatchDestination"].write(value.cloudWatchDestination, with: SESv2ClientTypes.CloudWatchDestination.write(value:to:))
        try writer["Enabled"].write(value.enabled)
        try writer["EventBridgeDestination"].write(value.eventBridgeDestination, with: SESv2ClientTypes.EventBridgeDestination.write(value:to:))
        try writer["KinesisFirehoseDestination"].write(value.kinesisFirehoseDestination, with: SESv2ClientTypes.KinesisFirehoseDestination.write(value:to:))
        try writer["MatchingEventTypes"].writeList(value.matchingEventTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SESv2ClientTypes.EventType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PinpointDestination"].write(value.pinpointDestination, with: SESv2ClientTypes.PinpointDestination.write(value:to:))
        try writer["SnsDestination"].write(value.snsDestination, with: SESv2ClientTypes.SnsDestination.write(value:to:))
    }
}

extension SESv2ClientTypes.EmailContent {

    static func write(value: SESv2ClientTypes.EmailContent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Raw"].write(value.raw, with: SESv2ClientTypes.RawMessage.write(value:to:))
        try writer["Simple"].write(value.simple, with: SESv2ClientTypes.Message.write(value:to:))
        try writer["Template"].write(value.template, with: SESv2ClientTypes.Template.write(value:to:))
    }
}

extension SESv2ClientTypes.Template {

    static func write(value: SESv2ClientTypes.Template?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Headers"].writeList(value.headers, memberWritingClosure: SESv2ClientTypes.MessageHeader.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TemplateArn"].write(value.templateArn)
        try writer["TemplateData"].write(value.templateData)
        try writer["TemplateName"].write(value.templateName)
    }
}

extension SESv2ClientTypes.MessageHeader {

    static func write(value: SESv2ClientTypes.MessageHeader?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }
}

extension SESv2ClientTypes.RawMessage {

    static func write(value: SESv2ClientTypes.RawMessage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Data"].write(value.data)
    }
}

extension SESv2ClientTypes.Message {

    static func write(value: SESv2ClientTypes.Message?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Body"].write(value.body, with: SESv2ClientTypes.Body.write(value:to:))
        try writer["Headers"].writeList(value.headers, memberWritingClosure: SESv2ClientTypes.MessageHeader.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Subject"].write(value.subject, with: SESv2ClientTypes.Content.write(value:to:))
    }
}

extension SESv2ClientTypes.Body {

    static func write(value: SESv2ClientTypes.Body?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Html"].write(value.html, with: SESv2ClientTypes.Content.write(value:to:))
        try writer["Text"].write(value.text, with: SESv2ClientTypes.Content.write(value:to:))
    }
}

extension SESv2ClientTypes.Content {

    static func write(value: SESv2ClientTypes.Content?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Charset"].write(value.charset)
        try writer["Data"].write(value.data)
    }
}

extension SESv2ClientTypes.DkimSigningAttributes {

    static func write(value: SESv2ClientTypes.DkimSigningAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainSigningPrivateKey"].write(value.domainSigningPrivateKey)
        try writer["DomainSigningSelector"].write(value.domainSigningSelector)
        try writer["NextSigningKeyLength"].write(value.nextSigningKeyLength)
    }
}

extension SESv2ClientTypes.ListContactsFilter {

    static func write(value: SESv2ClientTypes.ListContactsFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FilteredStatus"].write(value.filteredStatus)
        try writer["TopicFilter"].write(value.topicFilter, with: SESv2ClientTypes.TopicFilter.write(value:to:))
    }
}

extension SESv2ClientTypes.TopicFilter {

    static func write(value: SESv2ClientTypes.TopicFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TopicName"].write(value.topicName)
        try writer["UseDefaultIfPreferenceUnavailable"].write(value.useDefaultIfPreferenceUnavailable)
    }
}

extension SESv2ClientTypes.BulkEmailContent {

    static func write(value: SESv2ClientTypes.BulkEmailContent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Template"].write(value.template, with: SESv2ClientTypes.Template.write(value:to:))
    }
}

extension SESv2ClientTypes.BulkEmailEntry {

    static func write(value: SESv2ClientTypes.BulkEmailEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Destination"].write(value.destination, with: SESv2ClientTypes.Destination.write(value:to:))
        try writer["ReplacementEmailContent"].write(value.replacementEmailContent, with: SESv2ClientTypes.ReplacementEmailContent.write(value:to:))
        try writer["ReplacementHeaders"].writeList(value.replacementHeaders, memberWritingClosure: SESv2ClientTypes.MessageHeader.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReplacementTags"].writeList(value.replacementTags, memberWritingClosure: SESv2ClientTypes.MessageTag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SESv2ClientTypes.ReplacementEmailContent {

    static func write(value: SESv2ClientTypes.ReplacementEmailContent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ReplacementTemplate"].write(value.replacementTemplate, with: SESv2ClientTypes.ReplacementTemplate.write(value:to:))
    }
}

extension SESv2ClientTypes.ReplacementTemplate {

    static func write(value: SESv2ClientTypes.ReplacementTemplate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ReplacementTemplateData"].write(value.replacementTemplateData)
    }
}

extension SESv2ClientTypes.Destination {

    static func write(value: SESv2ClientTypes.Destination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BccAddresses"].writeList(value.bccAddresses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CcAddresses"].writeList(value.ccAddresses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ToAddresses"].writeList(value.toAddresses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SESv2ClientTypes.ListManagementOptions {

    static func write(value: SESv2ClientTypes.ListManagementOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContactListName"].write(value.contactListName)
        try writer["TopicName"].write(value.topicName)
    }
}

public enum SESv2ClientTypes {}
