// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension SESv2ClientTypes.AccountDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalContactEmailAddresses = "AdditionalContactEmailAddresses"
        case contactLanguage = "ContactLanguage"
        case mailType = "MailType"
        case reviewDetails = "ReviewDetails"
        case useCaseDescription = "UseCaseDescription"
        case websiteURL = "WebsiteURL"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalContactEmailAddresses = additionalContactEmailAddresses {
            var additionalContactEmailAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalContactEmailAddresses)
            for additionalcontactemailaddress0 in additionalContactEmailAddresses {
                try additionalContactEmailAddressesContainer.encode(additionalcontactemailaddress0)
            }
        }
        if let contactLanguage = self.contactLanguage {
            try encodeContainer.encode(contactLanguage.rawValue, forKey: .contactLanguage)
        }
        if let mailType = self.mailType {
            try encodeContainer.encode(mailType.rawValue, forKey: .mailType)
        }
        if let reviewDetails = self.reviewDetails {
            try encodeContainer.encode(reviewDetails, forKey: .reviewDetails)
        }
        if let useCaseDescription = self.useCaseDescription {
            try encodeContainer.encode(useCaseDescription, forKey: .useCaseDescription)
        }
        if let websiteURL = self.websiteURL {
            try encodeContainer.encode(websiteURL, forKey: .websiteURL)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailTypeDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.MailType.self, forKey: .mailType)
        mailType = mailTypeDecoded
        let websiteURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .websiteURL)
        websiteURL = websiteURLDecoded
        let contactLanguageDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ContactLanguage.self, forKey: .contactLanguage)
        contactLanguage = contactLanguageDecoded
        let useCaseDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .useCaseDescription)
        useCaseDescription = useCaseDescriptionDecoded
        let additionalContactEmailAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalContactEmailAddresses)
        var additionalContactEmailAddressesDecoded0:[Swift.String]? = nil
        if let additionalContactEmailAddressesContainer = additionalContactEmailAddressesContainer {
            additionalContactEmailAddressesDecoded0 = [Swift.String]()
            for string0 in additionalContactEmailAddressesContainer {
                if let string0 = string0 {
                    additionalContactEmailAddressesDecoded0?.append(string0)
                }
            }
        }
        additionalContactEmailAddresses = additionalContactEmailAddressesDecoded0
        let reviewDetailsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ReviewDetails.self, forKey: .reviewDetails)
        reviewDetails = reviewDetailsDecoded
    }
}

extension SESv2ClientTypes.AccountDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccountDetails(contactLanguage: \(Swift.String(describing: contactLanguage)), mailType: \(Swift.String(describing: mailType)), reviewDetails: \(Swift.String(describing: reviewDetails)), additionalContactEmailAddresses: \"CONTENT_REDACTED\", useCaseDescription: \"CONTENT_REDACTED\", websiteURL: \"CONTENT_REDACTED\")"}
}

extension SESv2ClientTypes {
    /// An object that contains information about your account details.
    public struct AccountDetails: Swift.Equatable {
        /// Additional email addresses where updates are sent about your account review process.
        public var additionalContactEmailAddresses: [Swift.String]?
        /// The language you would prefer for the case. The contact language can be one of ENGLISH or JAPANESE.
        public var contactLanguage: SESv2ClientTypes.ContactLanguage?
        /// The type of email your account is sending. The mail type can be one of the following:
        ///
        /// * MARKETING – Most of your sending traffic is to keep your customers informed of your latest offering.
        ///
        /// * TRANSACTIONAL – Most of your sending traffic is to communicate during a transaction with a customer.
        public var mailType: SESv2ClientTypes.MailType?
        /// Information about the review of the latest details you submitted.
        public var reviewDetails: SESv2ClientTypes.ReviewDetails?
        /// A description of the types of email that you plan to send.
        public var useCaseDescription: Swift.String?
        /// The URL of your website. This information helps us better understand the type of content that you plan to send.
        public var websiteURL: Swift.String?

        public init (
            additionalContactEmailAddresses: [Swift.String]? = nil,
            contactLanguage: SESv2ClientTypes.ContactLanguage? = nil,
            mailType: SESv2ClientTypes.MailType? = nil,
            reviewDetails: SESv2ClientTypes.ReviewDetails? = nil,
            useCaseDescription: Swift.String? = nil,
            websiteURL: Swift.String? = nil
        )
        {
            self.additionalContactEmailAddresses = additionalContactEmailAddresses
            self.contactLanguage = contactLanguage
            self.mailType = mailType
            self.reviewDetails = reviewDetails
            self.useCaseDescription = useCaseDescription
            self.websiteURL = websiteURL
        }
    }

}

extension AccountSuspendedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccountSuspendedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The message can't be sent because the account's ability to send email has been permanently restricted.
public struct AccountSuspendedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccountSuspendedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccountSuspendedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource specified in your request already exists.
public struct AlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BadRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The input you provided is invalid.
public struct BadRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension BadRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BatchGetMetricDataInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queries = "Queries"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queries = queries {
            var queriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queries)
            for batchgetmetricdataquery0 in queries {
                try queriesContainer.encode(batchgetmetricdataquery0)
            }
        }
    }
}

extension BatchGetMetricDataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/metrics/batch"
    }
}

/// Represents a request to retrieve a batch of metric data.
public struct BatchGetMetricDataInput: Swift.Equatable {
    /// A list of queries for metrics to be retrieved.
    /// This member is required.
    public var queries: [SESv2ClientTypes.BatchGetMetricDataQuery]?

    public init (
        queries: [SESv2ClientTypes.BatchGetMetricDataQuery]? = nil
    )
    {
        self.queries = queries
    }
}

struct BatchGetMetricDataInputBody: Swift.Equatable {
    let queries: [SESv2ClientTypes.BatchGetMetricDataQuery]?
}

extension BatchGetMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queries = "Queries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queriesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.BatchGetMetricDataQuery?].self, forKey: .queries)
        var queriesDecoded0:[SESv2ClientTypes.BatchGetMetricDataQuery]? = nil
        if let queriesContainer = queriesContainer {
            queriesDecoded0 = [SESv2ClientTypes.BatchGetMetricDataQuery]()
            for structure0 in queriesContainer {
                if let structure0 = structure0 {
                    queriesDecoded0?.append(structure0)
                }
            }
        }
        queries = queriesDecoded0
    }
}

extension BatchGetMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchGetMetricDataOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalServiceErrorException(InternalServiceErrorException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchGetMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.results = output.results
        } else {
            self.errors = nil
            self.results = nil
        }
    }
}

/// Represents the result of processing your metric data batch request
public struct BatchGetMetricDataOutputResponse: Swift.Equatable {
    /// A list of MetricDataError encountered while processing your metric data batch request.
    public var errors: [SESv2ClientTypes.MetricDataError]?
    /// A list of successfully retrieved MetricDataResult.
    public var results: [SESv2ClientTypes.MetricDataResult]?

    public init (
        errors: [SESv2ClientTypes.MetricDataError]? = nil,
        results: [SESv2ClientTypes.MetricDataResult]? = nil
    )
    {
        self.errors = errors
        self.results = results
    }
}

struct BatchGetMetricDataOutputResponseBody: Swift.Equatable {
    let results: [SESv2ClientTypes.MetricDataResult]?
    let errors: [SESv2ClientTypes.MetricDataError]?
}

extension BatchGetMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
        case results = "Results"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.MetricDataResult?].self, forKey: .results)
        var resultsDecoded0:[SESv2ClientTypes.MetricDataResult]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [SESv2ClientTypes.MetricDataResult]()
            for structure0 in resultsContainer {
                if let structure0 = structure0 {
                    resultsDecoded0?.append(structure0)
                }
            }
        }
        results = resultsDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.MetricDataError?].self, forKey: .errors)
        var errorsDecoded0:[SESv2ClientTypes.MetricDataError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [SESv2ClientTypes.MetricDataError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension SESv2ClientTypes.BatchGetMetricDataQuery: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case endDate = "EndDate"
        case id = "Id"
        case metric = "Metric"
        case namespace = "Namespace"
        case startDate = "StartDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .dimensions)
            for (dictKey0, dimensions0) in dimensions {
                try dimensionsContainer.encode(dimensions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let endDate = self.endDate {
            try encodeContainer.encodeTimestamp(endDate, format: .epochSeconds, forKey: .endDate)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let metric = self.metric {
            try encodeContainer.encode(metric.rawValue, forKey: .metric)
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace.rawValue, forKey: .namespace)
        }
        if let startDate = self.startDate {
            try encodeContainer.encodeTimestamp(startDate, format: .epochSeconds, forKey: .startDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.MetricNamespace.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.Metric.self, forKey: .metric)
        metric = metricDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .dimensions)
        var dimensionsDecoded0: [Swift.String:Swift.String]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, metricdimensionvalue0) in dimensionsContainer {
                if let metricdimensionvalue0 = metricdimensionvalue0 {
                    dimensionsDecoded0?[key0] = metricdimensionvalue0
                }
            }
        }
        dimensions = dimensionsDecoded0
        let startDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDate)
        startDate = startDateDecoded
        let endDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endDate)
        endDate = endDateDecoded
    }
}

extension SESv2ClientTypes {
    /// Represents a single metric data query to include in a batch.
    public struct BatchGetMetricDataQuery: Swift.Equatable {
        /// An object that contains mapping between MetricDimensionName and MetricDimensionValue to filter metrics by.
        public var dimensions: [Swift.String:Swift.String]?
        /// Represents the end date for the query interval.
        /// This member is required.
        public var endDate: ClientRuntime.Date?
        /// The query identifier.
        /// This member is required.
        public var id: Swift.String?
        /// The queried metric. This can be one of the following:
        ///
        /// * SEND – Emails sent eligible for tracking in the VDM dashboard. This excludes emails sent to the mailbox simulator and emails addressed to more than one recipient.
        ///
        /// * COMPLAINT – Complaints received for your account. This excludes complaints from the mailbox simulator, those originating from your account-level suppression list (if enabled), and those for emails addressed to more than one recipient
        ///
        /// * PERMANENT_BOUNCE – Permanent bounces - i.e. feedback received for emails sent to non-existent mailboxes. Excludes bounces from the mailbox simulator, those originating from your account-level suppression list (if enabled), and those for emails addressed to more than one recipient.
        ///
        /// * TRANSIENT_BOUNCE – Transient bounces - i.e. feedback received for delivery failures excluding issues with non-existent mailboxes. Excludes bounces from the mailbox simulator, and those for emails addressed to more than one recipient.
        ///
        /// * OPEN – Unique open events for emails including open trackers. Excludes opens for emails addressed to more than one recipient.
        ///
        /// * CLICK – Unique click events for emails including wrapped links. Excludes clicks for emails addressed to more than one recipient.
        ///
        /// * DELIVERY – Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator and for emails addressed to more than one recipient.
        ///
        /// * DELIVERY_OPEN – Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator, for emails addressed to more than one recipient, and emails without open trackers.
        ///
        /// * DELIVERY_CLICK – Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator, for emails addressed to more than one recipient, and emails without click trackers.
        ///
        /// * DELIVERY_COMPLAINT – Successful deliveries for email sending attempts. Excludes deliveries to the mailbox simulator, for emails addressed to more than one recipient, and emails addressed to recipients hosted by ISPs with which Amazon SES does not have a feedback loop agreement.
        /// This member is required.
        public var metric: SESv2ClientTypes.Metric?
        /// The query namespace - e.g. VDM
        /// This member is required.
        public var namespace: SESv2ClientTypes.MetricNamespace?
        /// Represents the start date for the query interval.
        /// This member is required.
        public var startDate: ClientRuntime.Date?

        public init (
            dimensions: [Swift.String:Swift.String]? = nil,
            endDate: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            metric: SESv2ClientTypes.Metric? = nil,
            namespace: SESv2ClientTypes.MetricNamespace? = nil,
            startDate: ClientRuntime.Date? = nil
        )
        {
            self.dimensions = dimensions
            self.endDate = endDate
            self.id = id
            self.metric = metric
            self.namespace = namespace
            self.startDate = startDate
        }
    }

}

extension SESv2ClientTypes {
    /// The action to take if the required MX record can't be found when you send an email. When you set this value to UseDefaultValue, the mail is sent using amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage, the Amazon SES API v2 returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
    public enum BehaviorOnMxFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rejectMessage
        case useDefaultValue
        case sdkUnknown(Swift.String)

        public static var allCases: [BehaviorOnMxFailure] {
            return [
                .rejectMessage,
                .useDefaultValue,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rejectMessage: return "REJECT_MESSAGE"
            case .useDefaultValue: return "USE_DEFAULT_VALUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BehaviorOnMxFailure(rawValue: rawValue) ?? BehaviorOnMxFailure.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.BlacklistEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case listingTime = "ListingTime"
        case rblName = "RblName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let listingTime = self.listingTime {
            try encodeContainer.encodeTimestamp(listingTime, format: .epochSeconds, forKey: .listingTime)
        }
        if let rblName = self.rblName {
            try encodeContainer.encode(rblName, forKey: .rblName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rblNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rblName)
        rblName = rblNameDecoded
        let listingTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .listingTime)
        listingTime = listingTimeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about a blacklisting event that impacts one of the dedicated IP addresses that is associated with your account.
    public struct BlacklistEntry: Swift.Equatable {
        /// Additional information about the blacklisting event, as provided by the blacklist maintainer.
        public var description: Swift.String?
        /// The time when the blacklisting event occurred.
        public var listingTime: ClientRuntime.Date?
        /// The name of the blacklist that the IP address appears on.
        public var rblName: Swift.String?

        public init (
            description: Swift.String? = nil,
            listingTime: ClientRuntime.Date? = nil,
            rblName: Swift.String? = nil
        )
        {
            self.description = description
            self.listingTime = listingTime
            self.rblName = rblName
        }
    }

}

extension SESv2ClientTypes.Body: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case html = "Html"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let html = self.html {
            try encodeContainer.encode(html, forKey: .html)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.Content.self, forKey: .text)
        text = textDecoded
        let htmlDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.Content.self, forKey: .html)
        html = htmlDecoded
    }
}

extension SESv2ClientTypes {
    /// Represents the body of the email message.
    public struct Body: Swift.Equatable {
        /// An object that represents the version of the message that is displayed in email clients that support HTML. HTML messages can include formatted text, hyperlinks, images, and more.
        public var html: SESv2ClientTypes.Content?
        /// An object that represents the version of the message that is displayed in email clients that don't support HTML, or clients where the recipient has disabled HTML rendering.
        public var text: SESv2ClientTypes.Content?

        public init (
            html: SESv2ClientTypes.Content? = nil,
            text: SESv2ClientTypes.Content? = nil
        )
        {
            self.html = html
            self.text = text
        }
    }

}

extension SESv2ClientTypes.BulkEmailContent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case template = "Template"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let template = self.template {
            try encodeContainer.encode(template, forKey: .template)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.Template.self, forKey: .template)
        template = templateDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains the body of the message. You can specify a template message.
    public struct BulkEmailContent: Swift.Equatable {
        /// The template to use for the bulk email message.
        public var template: SESv2ClientTypes.Template?

        public init (
            template: SESv2ClientTypes.Template? = nil
        )
        {
            self.template = template
        }
    }

}

extension SESv2ClientTypes.BulkEmailEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case replacementEmailContent = "ReplacementEmailContent"
        case replacementTags = "ReplacementTags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let replacementEmailContent = self.replacementEmailContent {
            try encodeContainer.encode(replacementEmailContent, forKey: .replacementEmailContent)
        }
        if let replacementTags = replacementTags {
            var replacementTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replacementTags)
            for messagetag0 in replacementTags {
                try replacementTagsContainer.encode(messagetag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        let replacementTagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.MessageTag?].self, forKey: .replacementTags)
        var replacementTagsDecoded0:[SESv2ClientTypes.MessageTag]? = nil
        if let replacementTagsContainer = replacementTagsContainer {
            replacementTagsDecoded0 = [SESv2ClientTypes.MessageTag]()
            for structure0 in replacementTagsContainer {
                if let structure0 = structure0 {
                    replacementTagsDecoded0?.append(structure0)
                }
            }
        }
        replacementTags = replacementTagsDecoded0
        let replacementEmailContentDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ReplacementEmailContent.self, forKey: .replacementEmailContent)
        replacementEmailContent = replacementEmailContentDecoded
    }
}

extension SESv2ClientTypes {
    public struct BulkEmailEntry: Swift.Equatable {
        /// Represents the destination of the message, consisting of To:, CC:, and BCC: fields. Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the local part of a destination email address (the part of the email address that precedes the @ sign) may only contain [7-bit ASCII characters](https://en.wikipedia.org/wiki/Email_address#Local-part). If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in [RFC3492](https://tools.ietf.org/html/rfc3492.html).
        /// This member is required.
        public var destination: SESv2ClientTypes.Destination?
        /// The ReplacementEmailContent associated with a BulkEmailEntry.
        public var replacementEmailContent: SESv2ClientTypes.ReplacementEmailContent?
        /// A list of tags, in the form of name/value pairs, to apply to an email that you send using the SendBulkTemplatedEmail operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
        public var replacementTags: [SESv2ClientTypes.MessageTag]?

        public init (
            destination: SESv2ClientTypes.Destination? = nil,
            replacementEmailContent: SESv2ClientTypes.ReplacementEmailContent? = nil,
            replacementTags: [SESv2ClientTypes.MessageTag]? = nil
        )
        {
            self.destination = destination
            self.replacementEmailContent = replacementEmailContent
            self.replacementTags = replacementTags
        }
    }

}

extension SESv2ClientTypes.BulkEmailEntryResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case error = "Error"
        case messageId = "MessageId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let messageId = self.messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.BulkEmailStatus.self, forKey: .status)
        status = statusDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension SESv2ClientTypes {
    /// The result of the SendBulkEmail operation of each specified BulkEmailEntry.
    public struct BulkEmailEntryResult: Swift.Equatable {
        /// A description of an error that prevented a message being sent using the SendBulkTemplatedEmail operation.
        public var error: Swift.String?
        /// The unique message identifier returned from the SendBulkTemplatedEmail operation.
        public var messageId: Swift.String?
        /// The status of a message sent using the SendBulkTemplatedEmail operation. Possible values for this parameter include:
        ///
        /// * SUCCESS: Amazon SES accepted the message, and will attempt to deliver it to the recipients.
        ///
        /// * MESSAGE_REJECTED: The message was rejected because it contained a virus.
        ///
        /// * MAIL_FROM_DOMAIN_NOT_VERIFIED: The sender's email address or domain was not verified.
        ///
        /// * CONFIGURATION_SET_DOES_NOT_EXIST: The configuration set you specified does not exist.
        ///
        /// * TEMPLATE_DOES_NOT_EXIST: The template you specified does not exist.
        ///
        /// * ACCOUNT_SUSPENDED: Your account has been shut down because of issues related to your email sending practices.
        ///
        /// * ACCOUNT_THROTTLED: The number of emails you can send has been reduced because your account has exceeded its allocated sending limit.
        ///
        /// * ACCOUNT_DAILY_QUOTA_EXCEEDED: You have reached or exceeded the maximum number of emails you can send from your account in a 24-hour period.
        ///
        /// * INVALID_SENDING_POOL_NAME: The configuration set you specified refers to an IP pool that does not exist.
        ///
        /// * ACCOUNT_SENDING_PAUSED: Email sending for the Amazon SES account was disabled using the [UpdateAccountSendingEnabled](https://docs.aws.amazon.com/ses/latest/APIReference/API_UpdateAccountSendingEnabled.html) operation.
        ///
        /// * CONFIGURATION_SET_SENDING_PAUSED: Email sending for this configuration set was disabled using the [UpdateConfigurationSetSendingEnabled](https://docs.aws.amazon.com/ses/latest/APIReference/API_UpdateConfigurationSetSendingEnabled.html) operation.
        ///
        /// * INVALID_PARAMETER_VALUE: One or more of the parameters you specified when calling this operation was invalid. See the error message for additional information.
        ///
        /// * TRANSIENT_FAILURE: Amazon SES was unable to process your request because of a temporary issue.
        ///
        /// * FAILED: Amazon SES was unable to process your request. See the error message for additional information.
        public var status: SESv2ClientTypes.BulkEmailStatus?

        public init (
            error: Swift.String? = nil,
            messageId: Swift.String? = nil,
            status: SESv2ClientTypes.BulkEmailStatus? = nil
        )
        {
            self.error = error
            self.messageId = messageId
            self.status = status
        }
    }

}

extension SESv2ClientTypes {
    public enum BulkEmailStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountDailyQuotaExceeded
        case accountSendingPaused
        case accountSuspended
        case accountThrottled
        case configurationSetNotFound
        case configurationSetSendingPaused
        case failed
        case invalidParameter
        case invalidSendingPoolName
        case mailFromDomainNotVerified
        case messageRejected
        case success
        case templateNotFound
        case transientFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [BulkEmailStatus] {
            return [
                .accountDailyQuotaExceeded,
                .accountSendingPaused,
                .accountSuspended,
                .accountThrottled,
                .configurationSetNotFound,
                .configurationSetSendingPaused,
                .failed,
                .invalidParameter,
                .invalidSendingPoolName,
                .mailFromDomainNotVerified,
                .messageRejected,
                .success,
                .templateNotFound,
                .transientFailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountDailyQuotaExceeded: return "ACCOUNT_DAILY_QUOTA_EXCEEDED"
            case .accountSendingPaused: return "ACCOUNT_SENDING_PAUSED"
            case .accountSuspended: return "ACCOUNT_SUSPENDED"
            case .accountThrottled: return "ACCOUNT_THROTTLED"
            case .configurationSetNotFound: return "CONFIGURATION_SET_NOT_FOUND"
            case .configurationSetSendingPaused: return "CONFIGURATION_SET_SENDING_PAUSED"
            case .failed: return "FAILED"
            case .invalidParameter: return "INVALID_PARAMETER"
            case .invalidSendingPoolName: return "INVALID_SENDING_POOL_NAME"
            case .mailFromDomainNotVerified: return "MAIL_FROM_DOMAIN_NOT_VERIFIED"
            case .messageRejected: return "MESSAGE_REJECTED"
            case .success: return "SUCCESS"
            case .templateNotFound: return "TEMPLATE_NOT_FOUND"
            case .transientFailure: return "TRANSIENT_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BulkEmailStatus(rawValue: rawValue) ?? BulkEmailStatus.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.CloudWatchDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionConfigurations = "DimensionConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensionConfigurations = dimensionConfigurations {
            var dimensionConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensionConfigurations)
            for cloudwatchdimensionconfiguration0 in dimensionConfigurations {
                try dimensionConfigurationsContainer.encode(cloudwatchdimensionconfiguration0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionConfigurationsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.CloudWatchDimensionConfiguration?].self, forKey: .dimensionConfigurations)
        var dimensionConfigurationsDecoded0:[SESv2ClientTypes.CloudWatchDimensionConfiguration]? = nil
        if let dimensionConfigurationsContainer = dimensionConfigurationsContainer {
            dimensionConfigurationsDecoded0 = [SESv2ClientTypes.CloudWatchDimensionConfiguration]()
            for structure0 in dimensionConfigurationsContainer {
                if let structure0 = structure0 {
                    dimensionConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        dimensionConfigurations = dimensionConfigurationsDecoded0
    }
}

extension SESv2ClientTypes {
    /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
    public struct CloudWatchDestination: Swift.Equatable {
        /// An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch.
        /// This member is required.
        public var dimensionConfigurations: [SESv2ClientTypes.CloudWatchDimensionConfiguration]?

        public init (
            dimensionConfigurations: [SESv2ClientTypes.CloudWatchDimensionConfiguration]? = nil
        )
        {
            self.dimensionConfigurations = dimensionConfigurations
        }
    }

}

extension SESv2ClientTypes.CloudWatchDimensionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultDimensionValue = "DefaultDimensionValue"
        case dimensionName = "DimensionName"
        case dimensionValueSource = "DimensionValueSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultDimensionValue = self.defaultDimensionValue {
            try encodeContainer.encode(defaultDimensionValue, forKey: .defaultDimensionValue)
        }
        if let dimensionName = self.dimensionName {
            try encodeContainer.encode(dimensionName, forKey: .dimensionName)
        }
        if let dimensionValueSource = self.dimensionValueSource {
            try encodeContainer.encode(dimensionValueSource.rawValue, forKey: .dimensionValueSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dimensionName)
        dimensionName = dimensionNameDecoded
        let dimensionValueSourceDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DimensionValueSource.self, forKey: .dimensionValueSource)
        dimensionValueSource = dimensionValueSourceDecoded
        let defaultDimensionValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultDimensionValue)
        defaultDimensionValue = defaultDimensionValueDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that defines the dimension configuration to use when you send email events to Amazon CloudWatch.
    public struct CloudWatchDimensionConfiguration: Swift.Equatable {
        /// The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email. This value has to meet the following criteria:
        ///
        /// * Can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-), at signs (@), and periods (.).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var defaultDimensionValue: Swift.String?
        /// The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var dimensionName: Swift.String?
        /// The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail or SendRawEmail API, choose messageTag. To use your own email headers, choose emailHeader. To use link tags, choose linkTags.
        /// This member is required.
        public var dimensionValueSource: SESv2ClientTypes.DimensionValueSource?

        public init (
            defaultDimensionValue: Swift.String? = nil,
            dimensionName: Swift.String? = nil,
            dimensionValueSource: SESv2ClientTypes.DimensionValueSource? = nil
        )
        {
            self.defaultDimensionValue = defaultDimensionValue
            self.dimensionName = dimensionName
            self.dimensionValueSource = dimensionValueSource
        }
    }

}

extension ConcurrentModificationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConcurrentModificationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource is being modified by another operation or thread.
public struct ConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// If there is already an ongoing account details update under review.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESv2ClientTypes.Contact: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case topicDefaultPreferences = "TopicDefaultPreferences"
        case topicPreferences = "TopicPreferences"
        case unsubscribeAll = "UnsubscribeAll"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailAddress = self.emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let lastUpdatedTimestamp = self.lastUpdatedTimestamp {
            try encodeContainer.encodeTimestamp(lastUpdatedTimestamp, format: .epochSeconds, forKey: .lastUpdatedTimestamp)
        }
        if let topicDefaultPreferences = topicDefaultPreferences {
            var topicDefaultPreferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topicDefaultPreferences)
            for topicpreference0 in topicDefaultPreferences {
                try topicDefaultPreferencesContainer.encode(topicpreference0)
            }
        }
        if let topicPreferences = topicPreferences {
            var topicPreferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topicPreferences)
            for topicpreference0 in topicPreferences {
                try topicPreferencesContainer.encode(topicpreference0)
            }
        }
        if unsubscribeAll != false {
            try encodeContainer.encode(unsubscribeAll, forKey: .unsubscribeAll)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let topicPreferencesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.TopicPreference?].self, forKey: .topicPreferences)
        var topicPreferencesDecoded0:[SESv2ClientTypes.TopicPreference]? = nil
        if let topicPreferencesContainer = topicPreferencesContainer {
            topicPreferencesDecoded0 = [SESv2ClientTypes.TopicPreference]()
            for structure0 in topicPreferencesContainer {
                if let structure0 = structure0 {
                    topicPreferencesDecoded0?.append(structure0)
                }
            }
        }
        topicPreferences = topicPreferencesDecoded0
        let topicDefaultPreferencesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.TopicPreference?].self, forKey: .topicDefaultPreferences)
        var topicDefaultPreferencesDecoded0:[SESv2ClientTypes.TopicPreference]? = nil
        if let topicDefaultPreferencesContainer = topicDefaultPreferencesContainer {
            topicDefaultPreferencesDecoded0 = [SESv2ClientTypes.TopicPreference]()
            for structure0 in topicDefaultPreferencesContainer {
                if let structure0 = structure0 {
                    topicDefaultPreferencesDecoded0?.append(structure0)
                }
            }
        }
        topicDefaultPreferences = topicDefaultPreferencesDecoded0
        let unsubscribeAllDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unsubscribeAll) ?? false
        unsubscribeAll = unsubscribeAllDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
    }
}

extension SESv2ClientTypes {
    /// A contact is the end-user who is receiving the email.
    public struct Contact: Swift.Equatable {
        /// The contact's email address.
        public var emailAddress: Swift.String?
        /// A timestamp noting the last time the contact's information was updated.
        public var lastUpdatedTimestamp: ClientRuntime.Date?
        /// The default topic preferences applied to the contact.
        public var topicDefaultPreferences: [SESv2ClientTypes.TopicPreference]?
        /// The contact's preference for being opted-in to or opted-out of a topic.
        public var topicPreferences: [SESv2ClientTypes.TopicPreference]?
        /// A boolean value status noting if the contact is unsubscribed from all contact list topics.
        public var unsubscribeAll: Swift.Bool

        public init (
            emailAddress: Swift.String? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            topicDefaultPreferences: [SESv2ClientTypes.TopicPreference]? = nil,
            topicPreferences: [SESv2ClientTypes.TopicPreference]? = nil,
            unsubscribeAll: Swift.Bool = false
        )
        {
            self.emailAddress = emailAddress
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.topicDefaultPreferences = topicDefaultPreferences
            self.topicPreferences = topicPreferences
            self.unsubscribeAll = unsubscribeAll
        }
    }

}

extension SESv2ClientTypes {
    public enum ContactLanguage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case en
        case ja
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactLanguage] {
            return [
                .en,
                .ja,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .en: return "EN"
            case .ja: return "JA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContactLanguage(rawValue: rawValue) ?? ContactLanguage.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.ContactList: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListName = "ContactListName"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactListName = self.contactListName {
            try encodeContainer.encode(contactListName, forKey: .contactListName)
        }
        if let lastUpdatedTimestamp = self.lastUpdatedTimestamp {
            try encodeContainer.encodeTimestamp(lastUpdatedTimestamp, format: .epochSeconds, forKey: .lastUpdatedTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactListName)
        contactListName = contactListNameDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
    }
}

extension SESv2ClientTypes {
    /// A list that contains contacts that have subscribed to a particular topic or topics.
    public struct ContactList: Swift.Equatable {
        /// The name of the contact list.
        public var contactListName: Swift.String?
        /// A timestamp noting the last time the contact list was updated.
        public var lastUpdatedTimestamp: ClientRuntime.Date?

        public init (
            contactListName: Swift.String? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil
        )
        {
            self.contactListName = contactListName
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
        }
    }

}

extension SESv2ClientTypes.ContactListDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListImportAction = "ContactListImportAction"
        case contactListName = "ContactListName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactListImportAction = self.contactListImportAction {
            try encodeContainer.encode(contactListImportAction.rawValue, forKey: .contactListImportAction)
        }
        if let contactListName = self.contactListName {
            try encodeContainer.encode(contactListName, forKey: .contactListName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactListName)
        contactListName = contactListNameDecoded
        let contactListImportActionDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ContactListImportAction.self, forKey: .contactListImportAction)
        contactListImportAction = contactListImportActionDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains details about the action of a contact list.
    public struct ContactListDestination: Swift.Equatable {
        /// >The type of action to perform on the addresses. The following are the possible values:
        ///
        /// * PUT: add the addresses to the contact list. If the record already exists, it will override it with the new value.
        ///
        /// * DELETE: remove the addresses from the contact list.
        /// This member is required.
        public var contactListImportAction: SESv2ClientTypes.ContactListImportAction?
        /// The name of the contact list.
        /// This member is required.
        public var contactListName: Swift.String?

        public init (
            contactListImportAction: SESv2ClientTypes.ContactListImportAction? = nil,
            contactListName: Swift.String? = nil
        )
        {
            self.contactListImportAction = contactListImportAction
            self.contactListName = contactListName
        }
    }

}

extension SESv2ClientTypes {
    public enum ContactListImportAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactListImportAction] {
            return [
                .delete,
                .put,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContactListImportAction(rawValue: rawValue) ?? ContactListImportAction.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.Content: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case charset = "Charset"
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let charset = self.charset {
            try encodeContainer.encode(charset, forKey: .charset)
        }
        if let data = self.data {
            try encodeContainer.encode(data, forKey: .data)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .data)
        data = dataDecoded
        let charsetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .charset)
        charset = charsetDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that represents the content of the email, and optionally a character set specification.
    public struct Content: Swift.Equatable {
        /// The character set for the content. Because of the constraints of the SMTP protocol, Amazon SES uses 7-bit ASCII by default. If the text includes characters outside of the ASCII range, you have to specify a character set. For example, you could specify UTF-8, ISO-8859-1, or Shift_JIS.
        public var charset: Swift.String?
        /// The content of the message itself.
        /// This member is required.
        public var data: Swift.String?

        public init (
            charset: Swift.String? = nil,
            data: Swift.String? = nil
        )
        {
            self.charset = charset
            self.data = data
        }
    }

}

extension CreateConfigurationSetEventDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestination = "EventDestination"
        case eventDestinationName = "EventDestinationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventDestination = self.eventDestination {
            try encodeContainer.encode(eventDestination, forKey: .eventDestination)
        }
        if let eventDestinationName = self.eventDestinationName {
            try encodeContainer.encode(eventDestinationName, forKey: .eventDestinationName)
        }
    }
}

extension CreateConfigurationSetEventDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations"
    }
}

/// A request to add an event destination to a configuration set.
public struct CreateConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set .
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines the event destination.
    /// This member is required.
    public var eventDestination: SESv2ClientTypes.EventDestinationDefinition?
    /// A name that identifies the event destination within the configuration set.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestination: SESv2ClientTypes.EventDestinationDefinition? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
        self.eventDestinationName = eventDestinationName
    }
}

struct CreateConfigurationSetEventDestinationInputBody: Swift.Equatable {
    let eventDestinationName: Swift.String?
    let eventDestination: SESv2ClientTypes.EventDestinationDefinition?
}

extension CreateConfigurationSetEventDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestination = "EventDestination"
        case eventDestinationName = "EventDestinationName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let eventDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.EventDestinationDefinition.self, forKey: .eventDestination)
        eventDestination = eventDestinationDecoded
    }
}

extension CreateConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateConfigurationSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case deliveryOptions = "DeliveryOptions"
        case reputationOptions = "ReputationOptions"
        case sendingOptions = "SendingOptions"
        case suppressionOptions = "SuppressionOptions"
        case tags = "Tags"
        case trackingOptions = "TrackingOptions"
        case vdmOptions = "VdmOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetName = self.configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let deliveryOptions = self.deliveryOptions {
            try encodeContainer.encode(deliveryOptions, forKey: .deliveryOptions)
        }
        if let reputationOptions = self.reputationOptions {
            try encodeContainer.encode(reputationOptions, forKey: .reputationOptions)
        }
        if let sendingOptions = self.sendingOptions {
            try encodeContainer.encode(sendingOptions, forKey: .sendingOptions)
        }
        if let suppressionOptions = self.suppressionOptions {
            try encodeContainer.encode(suppressionOptions, forKey: .suppressionOptions)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let trackingOptions = self.trackingOptions {
            try encodeContainer.encode(trackingOptions, forKey: .trackingOptions)
        }
        if let vdmOptions = self.vdmOptions {
            try encodeContainer.encode(vdmOptions, forKey: .vdmOptions)
        }
    }
}

extension CreateConfigurationSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/configuration-sets"
    }
}

/// A request to create a configuration set.
public struct CreateConfigurationSetInput: Swift.Equatable {
    /// The name of the configuration set. The name can contain up to 64 alphanumeric characters, including letters, numbers, hyphens (-) and underscores (_) only.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
    public var deliveryOptions: SESv2ClientTypes.DeliveryOptions?
    /// An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set.
    public var reputationOptions: SESv2ClientTypes.ReputationOptions?
    /// An object that defines whether or not Amazon SES can send email that you send using the configuration set.
    public var sendingOptions: SESv2ClientTypes.SendingOptions?
    /// An object that contains information about the suppression list preferences for your account.
    public var suppressionOptions: SESv2ClientTypes.SuppressionOptions?
    /// An array of objects that define the tags (keys and values) to associate with the configuration set.
    public var tags: [SESv2ClientTypes.Tag]?
    /// An object that defines the open and click tracking options for emails that you send using the configuration set.
    public var trackingOptions: SESv2ClientTypes.TrackingOptions?
    /// An object that defines the VDM options for emails that you send using the configuration set.
    public var vdmOptions: SESv2ClientTypes.VdmOptions?

    public init (
        configurationSetName: Swift.String? = nil,
        deliveryOptions: SESv2ClientTypes.DeliveryOptions? = nil,
        reputationOptions: SESv2ClientTypes.ReputationOptions? = nil,
        sendingOptions: SESv2ClientTypes.SendingOptions? = nil,
        suppressionOptions: SESv2ClientTypes.SuppressionOptions? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil,
        trackingOptions: SESv2ClientTypes.TrackingOptions? = nil,
        vdmOptions: SESv2ClientTypes.VdmOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.deliveryOptions = deliveryOptions
        self.reputationOptions = reputationOptions
        self.sendingOptions = sendingOptions
        self.suppressionOptions = suppressionOptions
        self.tags = tags
        self.trackingOptions = trackingOptions
        self.vdmOptions = vdmOptions
    }
}

struct CreateConfigurationSetInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let trackingOptions: SESv2ClientTypes.TrackingOptions?
    let deliveryOptions: SESv2ClientTypes.DeliveryOptions?
    let reputationOptions: SESv2ClientTypes.ReputationOptions?
    let sendingOptions: SESv2ClientTypes.SendingOptions?
    let tags: [SESv2ClientTypes.Tag]?
    let suppressionOptions: SESv2ClientTypes.SuppressionOptions?
    let vdmOptions: SESv2ClientTypes.VdmOptions?
}

extension CreateConfigurationSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case deliveryOptions = "DeliveryOptions"
        case reputationOptions = "ReputationOptions"
        case sendingOptions = "SendingOptions"
        case suppressionOptions = "SuppressionOptions"
        case tags = "Tags"
        case trackingOptions = "TrackingOptions"
        case vdmOptions = "VdmOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let trackingOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.TrackingOptions.self, forKey: .trackingOptions)
        trackingOptions = trackingOptionsDecoded
        let deliveryOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DeliveryOptions.self, forKey: .deliveryOptions)
        deliveryOptions = deliveryOptionsDecoded
        let reputationOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ReputationOptions.self, forKey: .reputationOptions)
        reputationOptions = reputationOptionsDecoded
        let sendingOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SendingOptions.self, forKey: .sendingOptions)
        sendingOptions = sendingOptionsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SESv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SESv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let suppressionOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SuppressionOptions.self, forKey: .suppressionOptions)
        suppressionOptions = suppressionOptionsDecoded
        let vdmOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.VdmOptions.self, forKey: .vdmOptions)
        vdmOptions = vdmOptionsDecoded
    }
}

extension CreateConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateConfigurationSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateContactInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesData = "AttributesData"
        case emailAddress = "EmailAddress"
        case topicPreferences = "TopicPreferences"
        case unsubscribeAll = "UnsubscribeAll"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesData = self.attributesData {
            try encodeContainer.encode(attributesData, forKey: .attributesData)
        }
        if let emailAddress = self.emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let topicPreferences = topicPreferences {
            var topicPreferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topicPreferences)
            for topicpreference0 in topicPreferences {
                try topicPreferencesContainer.encode(topicpreference0)
            }
        }
        if unsubscribeAll != false {
            try encodeContainer.encode(unsubscribeAll, forKey: .unsubscribeAll)
        }
    }
}

extension CreateContactInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let contactListName = contactListName else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())/contacts"
    }
}

public struct CreateContactInput: Swift.Equatable {
    /// The attribute data attached to a contact.
    public var attributesData: Swift.String?
    /// The name of the contact list to which the contact should be added.
    /// This member is required.
    public var contactListName: Swift.String?
    /// The contact's email address.
    /// This member is required.
    public var emailAddress: Swift.String?
    /// The contact's preferences for being opted-in to or opted-out of topics.
    public var topicPreferences: [SESv2ClientTypes.TopicPreference]?
    /// A boolean value status noting if the contact is unsubscribed from all contact list topics.
    public var unsubscribeAll: Swift.Bool

    public init (
        attributesData: Swift.String? = nil,
        contactListName: Swift.String? = nil,
        emailAddress: Swift.String? = nil,
        topicPreferences: [SESv2ClientTypes.TopicPreference]? = nil,
        unsubscribeAll: Swift.Bool = false
    )
    {
        self.attributesData = attributesData
        self.contactListName = contactListName
        self.emailAddress = emailAddress
        self.topicPreferences = topicPreferences
        self.unsubscribeAll = unsubscribeAll
    }
}

struct CreateContactInputBody: Swift.Equatable {
    let emailAddress: Swift.String?
    let topicPreferences: [SESv2ClientTypes.TopicPreference]?
    let unsubscribeAll: Swift.Bool
    let attributesData: Swift.String?
}

extension CreateContactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesData = "AttributesData"
        case emailAddress = "EmailAddress"
        case topicPreferences = "TopicPreferences"
        case unsubscribeAll = "UnsubscribeAll"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let topicPreferencesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.TopicPreference?].self, forKey: .topicPreferences)
        var topicPreferencesDecoded0:[SESv2ClientTypes.TopicPreference]? = nil
        if let topicPreferencesContainer = topicPreferencesContainer {
            topicPreferencesDecoded0 = [SESv2ClientTypes.TopicPreference]()
            for structure0 in topicPreferencesContainer {
                if let structure0 = structure0 {
                    topicPreferencesDecoded0?.append(structure0)
                }
            }
        }
        topicPreferences = topicPreferencesDecoded0
        let unsubscribeAllDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unsubscribeAll) ?? false
        unsubscribeAll = unsubscribeAllDecoded
        let attributesDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributesData)
        attributesData = attributesDataDecoded
    }
}

extension CreateContactListInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListName = "ContactListName"
        case description = "Description"
        case tags = "Tags"
        case topics = "Topics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactListName = self.contactListName {
            try encodeContainer.encode(contactListName, forKey: .contactListName)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let topics = topics {
            var topicsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topics)
            for topic0 in topics {
                try topicsContainer.encode(topic0)
            }
        }
    }
}

extension CreateContactListInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/contact-lists"
    }
}

public struct CreateContactListInput: Swift.Equatable {
    /// The name of the contact list.
    /// This member is required.
    public var contactListName: Swift.String?
    /// A description of what the contact list is about.
    public var description: Swift.String?
    /// The tags associated with a contact list.
    public var tags: [SESv2ClientTypes.Tag]?
    /// An interest group, theme, or label within a list. A contact list can have multiple topics.
    public var topics: [SESv2ClientTypes.Topic]?

    public init (
        contactListName: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil,
        topics: [SESv2ClientTypes.Topic]? = nil
    )
    {
        self.contactListName = contactListName
        self.description = description
        self.tags = tags
        self.topics = topics
    }
}

struct CreateContactListInputBody: Swift.Equatable {
    let contactListName: Swift.String?
    let topics: [SESv2ClientTypes.Topic]?
    let description: Swift.String?
    let tags: [SESv2ClientTypes.Tag]?
}

extension CreateContactListInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListName = "ContactListName"
        case description = "Description"
        case tags = "Tags"
        case topics = "Topics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactListName)
        contactListName = contactListNameDecoded
        let topicsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Topic?].self, forKey: .topics)
        var topicsDecoded0:[SESv2ClientTypes.Topic]? = nil
        if let topicsContainer = topicsContainer {
            topicsDecoded0 = [SESv2ClientTypes.Topic]()
            for structure0 in topicsContainer {
                if let structure0 = structure0 {
                    topicsDecoded0?.append(structure0)
                }
            }
        }
        topics = topicsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SESv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SESv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateContactListOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContactListOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateContactListOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContactListOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateContactListOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateContactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateContactOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateContactOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateCustomVerificationEmailTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureRedirectionURL = self.failureRedirectionURL {
            try encodeContainer.encode(failureRedirectionURL, forKey: .failureRedirectionURL)
        }
        if let fromEmailAddress = self.fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let successRedirectionURL = self.successRedirectionURL {
            try encodeContainer.encode(successRedirectionURL, forKey: .successRedirectionURL)
        }
        if let templateContent = self.templateContent {
            try encodeContainer.encode(templateContent, forKey: .templateContent)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateSubject = self.templateSubject {
            try encodeContainer.encode(templateSubject, forKey: .templateSubject)
        }
    }
}

extension CreateCustomVerificationEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/custom-verification-email-templates"
    }
}

/// Represents a request to create a custom verification email template.
public struct CreateCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    /// This member is required.
    public var failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    /// This member is required.
    public var fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    /// This member is required.
    public var successRedirectionURL: Swift.String?
    /// The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see [Custom verification email frequently asked questions](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom-faq) in the Amazon SES Developer Guide.
    /// This member is required.
    public var templateContent: Swift.String?
    /// The name of the custom verification email template.
    /// This member is required.
    public var templateName: Swift.String?
    /// The subject line of the custom verification email.
    /// This member is required.
    public var templateSubject: Swift.String?

    public init (
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

struct CreateCustomVerificationEmailTemplateInputBody: Swift.Equatable {
    let templateName: Swift.String?
    let fromEmailAddress: Swift.String?
    let templateSubject: Swift.String?
    let templateContent: Swift.String?
    let successRedirectionURL: Swift.String?
    let failureRedirectionURL: Swift.String?
}

extension CreateCustomVerificationEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateContent)
        templateContent = templateContentDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

extension CreateCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct CreateCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateDedicatedIpPoolInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case poolName = "PoolName"
        case scalingMode = "ScalingMode"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let poolName = self.poolName {
            try encodeContainer.encode(poolName, forKey: .poolName)
        }
        if let scalingMode = self.scalingMode {
            try encodeContainer.encode(scalingMode.rawValue, forKey: .scalingMode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateDedicatedIpPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/dedicated-ip-pools"
    }
}

/// A request to create a new dedicated IP pool.
public struct CreateDedicatedIpPoolInput: Swift.Equatable {
    /// The name of the dedicated IP pool.
    /// This member is required.
    public var poolName: Swift.String?
    /// The type of scaling mode.
    public var scalingMode: SESv2ClientTypes.ScalingMode?
    /// An object that defines the tags (keys and values) that you want to associate with the pool.
    public var tags: [SESv2ClientTypes.Tag]?

    public init (
        poolName: Swift.String? = nil,
        scalingMode: SESv2ClientTypes.ScalingMode? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil
    )
    {
        self.poolName = poolName
        self.scalingMode = scalingMode
        self.tags = tags
    }
}

struct CreateDedicatedIpPoolInputBody: Swift.Equatable {
    let poolName: Swift.String?
    let tags: [SESv2ClientTypes.Tag]?
    let scalingMode: SESv2ClientTypes.ScalingMode?
}

extension CreateDedicatedIpPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case poolName = "PoolName"
        case scalingMode = "ScalingMode"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let poolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolName)
        poolName = poolNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SESv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SESv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let scalingModeDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ScalingMode.self, forKey: .scalingMode)
        scalingMode = scalingModeDecoded
    }
}

extension CreateDedicatedIpPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDedicatedIpPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDedicatedIpPoolOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case limitExceededException(LimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDedicatedIpPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateDedicatedIpPoolOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateDeliverabilityTestReportInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case fromEmailAddress = "FromEmailAddress"
        case reportName = "ReportName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = self.content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let fromEmailAddress = self.fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let reportName = self.reportName {
            try encodeContainer.encode(reportName, forKey: .reportName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateDeliverabilityTestReportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/deliverability-dashboard/test"
    }
}

/// A request to perform a predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled by various email providers around the world. When you perform a predictive inbox placement test, you provide a sample message that contains the content that you plan to send to your customers. We send that message to special email addresses spread across several major email providers around the world. The test takes about 24 hours to complete. When the test is complete, you can use the GetDeliverabilityTestReport operation to view the results of the test.
public struct CreateDeliverabilityTestReportInput: Swift.Equatable {
    /// The HTML body of the message that you sent when you performed the predictive inbox placement test.
    /// This member is required.
    public var content: SESv2ClientTypes.EmailContent?
    /// The email address that the predictive inbox placement test email was sent from.
    /// This member is required.
    public var fromEmailAddress: Swift.String?
    /// A unique name that helps you to identify the predictive inbox placement test when you retrieve the results.
    public var reportName: Swift.String?
    /// An array of objects that define the tags (keys and values) that you want to associate with the predictive inbox placement test.
    public var tags: [SESv2ClientTypes.Tag]?

    public init (
        content: SESv2ClientTypes.EmailContent? = nil,
        fromEmailAddress: Swift.String? = nil,
        reportName: Swift.String? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil
    )
    {
        self.content = content
        self.fromEmailAddress = fromEmailAddress
        self.reportName = reportName
        self.tags = tags
    }
}

struct CreateDeliverabilityTestReportInputBody: Swift.Equatable {
    let reportName: Swift.String?
    let fromEmailAddress: Swift.String?
    let content: SESv2ClientTypes.EmailContent?
    let tags: [SESv2ClientTypes.Tag]?
}

extension CreateDeliverabilityTestReportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case fromEmailAddress = "FromEmailAddress"
        case reportName = "ReportName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportName)
        reportName = reportNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let contentDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.EmailContent.self, forKey: .content)
        content = contentDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SESv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SESv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDeliverabilityTestReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDeliverabilityTestReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSuspendedException" : self = .accountSuspendedException(try AccountSuspendedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SendingPausedException" : self = .sendingPausedException(try SendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDeliverabilityTestReportOutputError: Swift.Error, Swift.Equatable {
    case accountSuspendedException(AccountSuspendedException)
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case limitExceededException(LimitExceededException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case notFoundException(NotFoundException)
    case sendingPausedException(SendingPausedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDeliverabilityTestReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDeliverabilityTestReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliverabilityTestStatus = output.deliverabilityTestStatus
            self.reportId = output.reportId
        } else {
            self.deliverabilityTestStatus = nil
            self.reportId = nil
        }
    }
}

/// Information about the predictive inbox placement test that you created.
public struct CreateDeliverabilityTestReportOutputResponse: Swift.Equatable {
    /// The status of the predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport to view the results of the test.
    /// This member is required.
    public var deliverabilityTestStatus: SESv2ClientTypes.DeliverabilityTestStatus?
    /// A unique string that identifies the predictive inbox placement test.
    /// This member is required.
    public var reportId: Swift.String?

    public init (
        deliverabilityTestStatus: SESv2ClientTypes.DeliverabilityTestStatus? = nil,
        reportId: Swift.String? = nil
    )
    {
        self.deliverabilityTestStatus = deliverabilityTestStatus
        self.reportId = reportId
    }
}

struct CreateDeliverabilityTestReportOutputResponseBody: Swift.Equatable {
    let reportId: Swift.String?
    let deliverabilityTestStatus: SESv2ClientTypes.DeliverabilityTestStatus?
}

extension CreateDeliverabilityTestReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliverabilityTestStatus = "DeliverabilityTestStatus"
        case reportId = "ReportId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportId)
        reportId = reportIdDecoded
        let deliverabilityTestStatusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DeliverabilityTestStatus.self, forKey: .deliverabilityTestStatus)
        deliverabilityTestStatus = deliverabilityTestStatusDecoded
    }
}

extension CreateEmailIdentityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case dkimSigningAttributes = "DkimSigningAttributes"
        case emailIdentity = "EmailIdentity"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetName = self.configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let dkimSigningAttributes = self.dkimSigningAttributes {
            try encodeContainer.encode(dkimSigningAttributes, forKey: .dkimSigningAttributes)
        }
        if let emailIdentity = self.emailIdentity {
            try encodeContainer.encode(emailIdentity, forKey: .emailIdentity)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateEmailIdentityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/identities"
    }
}

/// A request to begin the verification process for an email identity (an email address or domain).
public struct CreateEmailIdentityInput: Swift.Equatable {
    /// The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
    public var configurationSetName: Swift.String?
    /// If your request includes this object, Amazon SES configures the identity to use Bring Your Own DKIM (BYODKIM) for DKIM authentication purposes, or, configures the key length to be used for [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html). You can only specify this object if the email identity is a domain, as opposed to an address.
    public var dkimSigningAttributes: SESv2ClientTypes.DkimSigningAttributes?
    /// The email address or domain to verify.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// An array of objects that define the tags (keys and values) to associate with the email identity.
    public var tags: [SESv2ClientTypes.Tag]?

    public init (
        configurationSetName: Swift.String? = nil,
        dkimSigningAttributes: SESv2ClientTypes.DkimSigningAttributes? = nil,
        emailIdentity: Swift.String? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.dkimSigningAttributes = dkimSigningAttributes
        self.emailIdentity = emailIdentity
        self.tags = tags
    }
}

struct CreateEmailIdentityInputBody: Swift.Equatable {
    let emailIdentity: Swift.String?
    let tags: [SESv2ClientTypes.Tag]?
    let dkimSigningAttributes: SESv2ClientTypes.DkimSigningAttributes?
    let configurationSetName: Swift.String?
}

extension CreateEmailIdentityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case dkimSigningAttributes = "DkimSigningAttributes"
        case emailIdentity = "EmailIdentity"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailIdentity)
        emailIdentity = emailIdentityDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SESv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SESv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let dkimSigningAttributesDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DkimSigningAttributes.self, forKey: .dkimSigningAttributes)
        dkimSigningAttributes = dkimSigningAttributesDecoded
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension CreateEmailIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEmailIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateEmailIdentityOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEmailIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateEmailIdentityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dkimAttributes = output.dkimAttributes
            self.identityType = output.identityType
            self.verifiedForSendingStatus = output.verifiedForSendingStatus
        } else {
            self.dkimAttributes = nil
            self.identityType = nil
            self.verifiedForSendingStatus = false
        }
    }
}

/// If the email identity is a domain, this object contains information about the DKIM verification status for the domain. If the email identity is an email address, this object is empty.
public struct CreateEmailIdentityOutputResponse: Swift.Equatable {
    /// An object that contains information about the DKIM attributes for the identity.
    public var dkimAttributes: SESv2ClientTypes.DkimAttributes?
    /// The email identity type. Note: the MANAGED_DOMAIN identity type is not supported.
    public var identityType: SESv2ClientTypes.IdentityType?
    /// Specifies whether or not the identity is verified. You can only send email from verified email addresses or domains. For more information about verifying identities, see the [Amazon Pinpoint User Guide](https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html).
    public var verifiedForSendingStatus: Swift.Bool

    public init (
        dkimAttributes: SESv2ClientTypes.DkimAttributes? = nil,
        identityType: SESv2ClientTypes.IdentityType? = nil,
        verifiedForSendingStatus: Swift.Bool = false
    )
    {
        self.dkimAttributes = dkimAttributes
        self.identityType = identityType
        self.verifiedForSendingStatus = verifiedForSendingStatus
    }
}

struct CreateEmailIdentityOutputResponseBody: Swift.Equatable {
    let identityType: SESv2ClientTypes.IdentityType?
    let verifiedForSendingStatus: Swift.Bool
    let dkimAttributes: SESv2ClientTypes.DkimAttributes?
}

extension CreateEmailIdentityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimAttributes = "DkimAttributes"
        case identityType = "IdentityType"
        case verifiedForSendingStatus = "VerifiedForSendingStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityTypeDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let verifiedForSendingStatusDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .verifiedForSendingStatus) ?? false
        verifiedForSendingStatus = verifiedForSendingStatusDecoded
        let dkimAttributesDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DkimAttributes.self, forKey: .dkimAttributes)
        dkimAttributes = dkimAttributesDecoded
    }
}

extension CreateEmailIdentityPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policy = self.policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
    }
}

extension CreateEmailIdentityPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        guard let policyName = policyName else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/policies/\(policyName.urlPercentEncoding())"
    }
}

/// Represents a request to create a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html).
public struct CreateEmailIdentityPolicyInput: Swift.Equatable {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// The text of the policy in JSON format. The policy cannot exceed 4 KB. For information about the syntax of sending authorization policies, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html).
    /// This member is required.
    public var policy: Swift.String?
    /// The name of the policy. The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil,
        policy: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.policy = policy
        self.policyName = policyName
    }
}

struct CreateEmailIdentityPolicyInputBody: Swift.Equatable {
    let policy: Swift.String?
}

extension CreateEmailIdentityPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension CreateEmailIdentityPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEmailIdentityPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateEmailIdentityPolicyOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEmailIdentityPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateEmailIdentityPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateEmailTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let templateContent = self.templateContent {
            try encodeContainer.encode(templateContent, forKey: .templateContent)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
    }
}

extension CreateEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/templates"
    }
}

/// Represents a request to create an email template. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct CreateEmailTemplateInput: Swift.Equatable {
    /// The content of the email template, composed of a subject line, an HTML part, and a text-only part.
    /// This member is required.
    public var templateContent: SESv2ClientTypes.EmailTemplateContent?
    /// The name of the template.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        templateContent: SESv2ClientTypes.EmailTemplateContent? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateContent = templateContent
        self.templateName = templateName
    }
}

struct CreateEmailTemplateInputBody: Swift.Equatable {
    let templateName: Swift.String?
    let templateContent: SESv2ClientTypes.EmailTemplateContent?
}

extension CreateEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.EmailTemplateContent.self, forKey: .templateContent)
        templateContent = templateContentDecoded
    }
}

extension CreateEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct CreateEmailTemplateOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateImportJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importDataSource = "ImportDataSource"
        case importDestination = "ImportDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let importDataSource = self.importDataSource {
            try encodeContainer.encode(importDataSource, forKey: .importDataSource)
        }
        if let importDestination = self.importDestination {
            try encodeContainer.encode(importDestination, forKey: .importDestination)
        }
    }
}

extension CreateImportJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/import-jobs"
    }
}

/// Represents a request to create an import job from a data source for a data destination.
public struct CreateImportJobInput: Swift.Equatable {
    /// The data source for the import job.
    /// This member is required.
    public var importDataSource: SESv2ClientTypes.ImportDataSource?
    /// The destination for the import job.
    /// This member is required.
    public var importDestination: SESv2ClientTypes.ImportDestination?

    public init (
        importDataSource: SESv2ClientTypes.ImportDataSource? = nil,
        importDestination: SESv2ClientTypes.ImportDestination? = nil
    )
    {
        self.importDataSource = importDataSource
        self.importDestination = importDestination
    }
}

struct CreateImportJobInputBody: Swift.Equatable {
    let importDestination: SESv2ClientTypes.ImportDestination?
    let importDataSource: SESv2ClientTypes.ImportDataSource?
}

extension CreateImportJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importDataSource = "ImportDataSource"
        case importDestination = "ImportDestination"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ImportDestination.self, forKey: .importDestination)
        importDestination = importDestinationDecoded
        let importDataSourceDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ImportDataSource.self, forKey: .importDataSource)
        importDataSource = importDataSourceDecoded
    }
}

extension CreateImportJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateImportJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateImportJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateImportJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateImportJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct CreateImportJobOutputResponse: Swift.Equatable {
    /// A string that represents the import job ID.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct CreateImportJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension CreateImportJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension SESv2ClientTypes.CustomVerificationEmailTemplateMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureRedirectionURL = self.failureRedirectionURL {
            try encodeContainer.encode(failureRedirectionURL, forKey: .failureRedirectionURL)
        }
        if let fromEmailAddress = self.fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let successRedirectionURL = self.successRedirectionURL {
            try encodeContainer.encode(successRedirectionURL, forKey: .successRedirectionURL)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateSubject = self.templateSubject {
            try encodeContainer.encode(templateSubject, forKey: .templateSubject)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

extension SESv2ClientTypes {
    /// Contains information about a custom verification email template.
    public struct CustomVerificationEmailTemplateMetadata: Swift.Equatable {
        /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
        public var failureRedirectionURL: Swift.String?
        /// The email address that the custom verification email is sent from.
        public var fromEmailAddress: Swift.String?
        /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
        public var successRedirectionURL: Swift.String?
        /// The name of the custom verification email template.
        public var templateName: Swift.String?
        /// The subject line of the custom verification email.
        public var templateSubject: Swift.String?

        public init (
            failureRedirectionURL: Swift.String? = nil,
            fromEmailAddress: Swift.String? = nil,
            successRedirectionURL: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateSubject: Swift.String? = nil
        )
        {
            self.failureRedirectionURL = failureRedirectionURL
            self.fromEmailAddress = fromEmailAddress
            self.successRedirectionURL = successRedirectionURL
            self.templateName = templateName
            self.templateSubject = templateSubject
        }
    }

}

extension SESv2ClientTypes.DailyVolume: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainIspPlacements = "DomainIspPlacements"
        case startDate = "StartDate"
        case volumeStatistics = "VolumeStatistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainIspPlacements = domainIspPlacements {
            var domainIspPlacementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainIspPlacements)
            for domainispplacement0 in domainIspPlacements {
                try domainIspPlacementsContainer.encode(domainispplacement0)
            }
        }
        if let startDate = self.startDate {
            try encodeContainer.encodeTimestamp(startDate, format: .epochSeconds, forKey: .startDate)
        }
        if let volumeStatistics = self.volumeStatistics {
            try encodeContainer.encode(volumeStatistics, forKey: .volumeStatistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDate)
        startDate = startDateDecoded
        let volumeStatisticsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.VolumeStatistics.self, forKey: .volumeStatistics)
        volumeStatistics = volumeStatisticsDecoded
        let domainIspPlacementsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.DomainIspPlacement?].self, forKey: .domainIspPlacements)
        var domainIspPlacementsDecoded0:[SESv2ClientTypes.DomainIspPlacement]? = nil
        if let domainIspPlacementsContainer = domainIspPlacementsContainer {
            domainIspPlacementsDecoded0 = [SESv2ClientTypes.DomainIspPlacement]()
            for structure0 in domainIspPlacementsContainer {
                if let structure0 = structure0 {
                    domainIspPlacementsDecoded0?.append(structure0)
                }
            }
        }
        domainIspPlacements = domainIspPlacementsDecoded0
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about the volume of email sent on each day of the analysis period.
    public struct DailyVolume: Swift.Equatable {
        /// An object that contains inbox placement metrics for a specified day in the analysis period, broken out by the recipient's email provider.
        public var domainIspPlacements: [SESv2ClientTypes.DomainIspPlacement]?
        /// The date that the DailyVolume metrics apply to, in Unix time.
        public var startDate: ClientRuntime.Date?
        /// An object that contains inbox placement metrics for a specific day in the analysis period.
        public var volumeStatistics: SESv2ClientTypes.VolumeStatistics?

        public init (
            domainIspPlacements: [SESv2ClientTypes.DomainIspPlacement]? = nil,
            startDate: ClientRuntime.Date? = nil,
            volumeStatistics: SESv2ClientTypes.VolumeStatistics? = nil
        )
        {
            self.domainIspPlacements = domainIspPlacements
            self.startDate = startDate
            self.volumeStatistics = volumeStatistics
        }
    }

}

extension SESv2ClientTypes.DashboardAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case engagementMetrics = "EngagementMetrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let engagementMetrics = self.engagementMetrics {
            try encodeContainer.encode(engagementMetrics.rawValue, forKey: .engagementMetrics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engagementMetricsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.FeatureStatus.self, forKey: .engagementMetrics)
        engagementMetrics = engagementMetricsDecoded
    }
}

extension SESv2ClientTypes {
    /// An object containing additional settings for your VDM configuration as applicable to the Dashboard.
    public struct DashboardAttributes: Swift.Equatable {
        /// Specifies the status of your VDM engagement metrics collection. Can be one of the following:
        ///
        /// * ENABLED – Amazon SES enables engagement metrics for your account.
        ///
        /// * DISABLED – Amazon SES disables engagement metrics for your account.
        public var engagementMetrics: SESv2ClientTypes.FeatureStatus?

        public init (
            engagementMetrics: SESv2ClientTypes.FeatureStatus? = nil
        )
        {
            self.engagementMetrics = engagementMetrics
        }
    }

}

extension SESv2ClientTypes.DashboardOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case engagementMetrics = "EngagementMetrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let engagementMetrics = self.engagementMetrics {
            try encodeContainer.encode(engagementMetrics.rawValue, forKey: .engagementMetrics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engagementMetricsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.FeatureStatus.self, forKey: .engagementMetrics)
        engagementMetrics = engagementMetricsDecoded
    }
}

extension SESv2ClientTypes {
    /// An object containing additional settings for your VDM configuration as applicable to the Dashboard.
    public struct DashboardOptions: Swift.Equatable {
        /// Specifies the status of your VDM engagement metrics collection. Can be one of the following:
        ///
        /// * ENABLED – Amazon SES enables engagement metrics for the configuration set.
        ///
        /// * DISABLED – Amazon SES disables engagement metrics for the configuration set.
        public var engagementMetrics: SESv2ClientTypes.FeatureStatus?

        public init (
            engagementMetrics: SESv2ClientTypes.FeatureStatus? = nil
        )
        {
            self.engagementMetrics = engagementMetrics
        }
    }

}

extension SESv2ClientTypes {
    /// The data format of the import job's data source.
    public enum DataFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csv
        case json
        case sdkUnknown(Swift.String)

        public static var allCases: [DataFormat] {
            return [
                .csv,
                .json,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .json: return "JSON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataFormat(rawValue: rawValue) ?? DataFormat.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.DedicatedIp: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ip = "Ip"
        case poolName = "PoolName"
        case warmupPercentage = "WarmupPercentage"
        case warmupStatus = "WarmupStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ip = self.ip {
            try encodeContainer.encode(ip, forKey: .ip)
        }
        if let poolName = self.poolName {
            try encodeContainer.encode(poolName, forKey: .poolName)
        }
        if let warmupPercentage = self.warmupPercentage {
            try encodeContainer.encode(warmupPercentage, forKey: .warmupPercentage)
        }
        if let warmupStatus = self.warmupStatus {
            try encodeContainer.encode(warmupStatus.rawValue, forKey: .warmupStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ip)
        ip = ipDecoded
        let warmupStatusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.WarmupStatus.self, forKey: .warmupStatus)
        warmupStatus = warmupStatusDecoded
        let warmupPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warmupPercentage)
        warmupPercentage = warmupPercentageDecoded
        let poolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolName)
        poolName = poolNameDecoded
    }
}

extension SESv2ClientTypes {
    /// Contains information about a dedicated IP address that is associated with your Amazon SES account. To learn more about requesting dedicated IP addresses, see [Requesting and Relinquishing Dedicated IP Addresses](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/dedicated-ip-case.html) in the Amazon SES Developer Guide.
    public struct DedicatedIp: Swift.Equatable {
        /// An IPv4 address.
        /// This member is required.
        public var ip: Swift.String?
        /// The name of the dedicated IP pool that the IP address is associated with.
        public var poolName: Swift.String?
        /// Indicates how complete the dedicated IP warm-up process is. When this value equals 1, the address has completed the warm-up process and is ready for use.
        /// This member is required.
        public var warmupPercentage: Swift.Int?
        /// The warm-up status of a dedicated IP address. The status can have one of the following values:
        ///
        /// * IN_PROGRESS – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.
        ///
        /// * DONE – The dedicated IP warm-up process is complete, and the IP address is ready to use.
        /// This member is required.
        public var warmupStatus: SESv2ClientTypes.WarmupStatus?

        public init (
            ip: Swift.String? = nil,
            poolName: Swift.String? = nil,
            warmupPercentage: Swift.Int? = nil,
            warmupStatus: SESv2ClientTypes.WarmupStatus? = nil
        )
        {
            self.ip = ip
            self.poolName = poolName
            self.warmupPercentage = warmupPercentage
            self.warmupStatus = warmupStatus
        }
    }

}

extension SESv2ClientTypes.DedicatedIpPool: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case poolName = "PoolName"
        case scalingMode = "ScalingMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let poolName = self.poolName {
            try encodeContainer.encode(poolName, forKey: .poolName)
        }
        if let scalingMode = self.scalingMode {
            try encodeContainer.encode(scalingMode.rawValue, forKey: .scalingMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let poolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolName)
        poolName = poolNameDecoded
        let scalingModeDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ScalingMode.self, forKey: .scalingMode)
        scalingMode = scalingModeDecoded
    }
}

extension SESv2ClientTypes {
    /// Contains information about a dedicated IP pool.
    public struct DedicatedIpPool: Swift.Equatable {
        /// The name of the dedicated IP pool.
        /// This member is required.
        public var poolName: Swift.String?
        /// The type of the dedicated IP pool.
        ///
        /// * STANDARD – A dedicated IP pool where the customer can control which IPs are part of the pool.
        ///
        /// * MANAGED – A dedicated IP pool where the reputation and number of IPs is automatically managed by Amazon SES.
        /// This member is required.
        public var scalingMode: SESv2ClientTypes.ScalingMode?

        public init (
            poolName: Swift.String? = nil,
            scalingMode: SESv2ClientTypes.ScalingMode? = nil
        )
        {
            self.poolName = poolName
            self.scalingMode = scalingMode
        }
    }

}

extension DeleteConfigurationSetEventDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        guard let eventDestinationName = eventDestinationName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations/\(eventDestinationName.urlPercentEncoding())"
    }
}

/// A request to delete an event destination from a configuration set.
public struct DeleteConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set that contains the event destination to delete.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The name of the event destination to delete.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
    }
}

struct DeleteConfigurationSetEventDestinationInputBody: Swift.Equatable {
}

extension DeleteConfigurationSetEventDestinationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteConfigurationSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())"
    }
}

/// A request to delete a configuration set.
public struct DeleteConfigurationSetInput: Swift.Equatable {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

struct DeleteConfigurationSetInputBody: Swift.Equatable {
}

extension DeleteConfigurationSetInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteConfigurationSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteContactInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let contactListName = contactListName else {
            return nil
        }
        guard let emailAddress = emailAddress else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())/contacts/\(emailAddress.urlPercentEncoding())"
    }
}

public struct DeleteContactInput: Swift.Equatable {
    /// The name of the contact list from which the contact should be removed.
    /// This member is required.
    public var contactListName: Swift.String?
    /// The contact's email address.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init (
        contactListName: Swift.String? = nil,
        emailAddress: Swift.String? = nil
    )
    {
        self.contactListName = contactListName
        self.emailAddress = emailAddress
    }
}

struct DeleteContactInputBody: Swift.Equatable {
}

extension DeleteContactInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteContactListInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let contactListName = contactListName else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())"
    }
}

public struct DeleteContactListInput: Swift.Equatable {
    /// The name of the contact list.
    /// This member is required.
    public var contactListName: Swift.String?

    public init (
        contactListName: Swift.String? = nil
    )
    {
        self.contactListName = contactListName
    }
}

struct DeleteContactListInputBody: Swift.Equatable {
}

extension DeleteContactListInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteContactListOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteContactListOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteContactListOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteContactListOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteContactListOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteContactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteContactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteContactOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteContactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteContactOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteCustomVerificationEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v2/email/custom-verification-email-templates/\(templateName.urlPercentEncoding())"
    }
}

/// Represents a request to delete an existing custom verification email template.
public struct DeleteCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The name of the custom verification email template that you want to delete.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct DeleteCustomVerificationEmailTemplateInputBody: Swift.Equatable {
}

extension DeleteCustomVerificationEmailTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct DeleteCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteDedicatedIpPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let poolName = poolName else {
            return nil
        }
        return "/v2/email/dedicated-ip-pools/\(poolName.urlPercentEncoding())"
    }
}

/// A request to delete a dedicated IP pool.
public struct DeleteDedicatedIpPoolInput: Swift.Equatable {
    /// The name of the dedicated IP pool that you want to delete.
    /// This member is required.
    public var poolName: Swift.String?

    public init (
        poolName: Swift.String? = nil
    )
    {
        self.poolName = poolName
    }
}

struct DeleteDedicatedIpPoolInputBody: Swift.Equatable {
}

extension DeleteDedicatedIpPoolInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDedicatedIpPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDedicatedIpPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDedicatedIpPoolOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDedicatedIpPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteDedicatedIpPoolOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteEmailIdentityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())"
    }
}

/// A request to delete an existing email identity. When you delete an identity, you lose the ability to send email from that identity. You can restore your ability to send email by completing the verification process for the identity again.
public struct DeleteEmailIdentityInput: Swift.Equatable {
    /// The identity (that is, the email address or domain) to delete.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
    }
}

struct DeleteEmailIdentityInputBody: Swift.Equatable {
}

extension DeleteEmailIdentityInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEmailIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEmailIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteEmailIdentityOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEmailIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteEmailIdentityOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteEmailIdentityPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        guard let policyName = policyName else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/policies/\(policyName.urlPercentEncoding())"
    }
}

/// Represents a request to delete a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html).
public struct DeleteEmailIdentityPolicyInput: Swift.Equatable {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// The name of the policy. The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.policyName = policyName
    }
}

struct DeleteEmailIdentityPolicyInputBody: Swift.Equatable {
}

extension DeleteEmailIdentityPolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEmailIdentityPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEmailIdentityPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteEmailIdentityPolicyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEmailIdentityPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteEmailIdentityPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v2/email/templates/\(templateName.urlPercentEncoding())"
    }
}

/// Represents a request to delete an email template. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct DeleteEmailTemplateInput: Swift.Equatable {
    /// The name of the template to be deleted.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct DeleteEmailTemplateInputBody: Swift.Equatable {
}

extension DeleteEmailTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct DeleteEmailTemplateOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteSuppressedDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailAddress = emailAddress else {
            return nil
        }
        return "/v2/email/suppression/addresses/\(emailAddress.urlPercentEncoding())"
    }
}

/// A request to remove an email address from the suppression list for your account.
public struct DeleteSuppressedDestinationInput: Swift.Equatable {
    /// The suppressed email destination to remove from the account suppression list.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init (
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

struct DeleteSuppressedDestinationInputBody: Swift.Equatable {
}

extension DeleteSuppressedDestinationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSuppressedDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSuppressedDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteSuppressedDestinationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSuppressedDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct DeleteSuppressedDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension SESv2ClientTypes {
    /// The current status of your Deliverability dashboard subscription. If this value is PENDING_EXPIRATION, your subscription is scheduled to expire at the end of the current calendar month.
    public enum DeliverabilityDashboardAccountStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case disabled
        case pendingExpiration
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliverabilityDashboardAccountStatus] {
            return [
                .active,
                .disabled,
                .pendingExpiration,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .disabled: return "DISABLED"
            case .pendingExpiration: return "PENDING_EXPIRATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliverabilityDashboardAccountStatus(rawValue: rawValue) ?? DeliverabilityDashboardAccountStatus.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.DeliverabilityTestReport: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createDate = "CreateDate"
        case deliverabilityTestStatus = "DeliverabilityTestStatus"
        case fromEmailAddress = "FromEmailAddress"
        case reportId = "ReportId"
        case reportName = "ReportName"
        case subject = "Subject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createDate = self.createDate {
            try encodeContainer.encodeTimestamp(createDate, format: .epochSeconds, forKey: .createDate)
        }
        if let deliverabilityTestStatus = self.deliverabilityTestStatus {
            try encodeContainer.encode(deliverabilityTestStatus.rawValue, forKey: .deliverabilityTestStatus)
        }
        if let fromEmailAddress = self.fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let reportId = self.reportId {
            try encodeContainer.encode(reportId, forKey: .reportId)
        }
        if let reportName = self.reportName {
            try encodeContainer.encode(reportName, forKey: .reportName)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportId)
        reportId = reportIdDecoded
        let reportNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportName)
        reportName = reportNameDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let createDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createDate)
        createDate = createDateDecoded
        let deliverabilityTestStatusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DeliverabilityTestStatus.self, forKey: .deliverabilityTestStatus)
        deliverabilityTestStatus = deliverabilityTestStatusDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains metadata related to a predictive inbox placement test.
    public struct DeliverabilityTestReport: Swift.Equatable {
        /// The date and time when the predictive inbox placement test was created.
        public var createDate: ClientRuntime.Date?
        /// The status of the predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport to view the results of the test.
        public var deliverabilityTestStatus: SESv2ClientTypes.DeliverabilityTestStatus?
        /// The sender address that you specified for the predictive inbox placement test.
        public var fromEmailAddress: Swift.String?
        /// A unique string that identifies the predictive inbox placement test.
        public var reportId: Swift.String?
        /// A name that helps you identify a predictive inbox placement test report.
        public var reportName: Swift.String?
        /// The subject line for an email that you submitted in a predictive inbox placement test.
        public var subject: Swift.String?

        public init (
            createDate: ClientRuntime.Date? = nil,
            deliverabilityTestStatus: SESv2ClientTypes.DeliverabilityTestStatus? = nil,
            fromEmailAddress: Swift.String? = nil,
            reportId: Swift.String? = nil,
            reportName: Swift.String? = nil,
            subject: Swift.String? = nil
        )
        {
            self.createDate = createDate
            self.deliverabilityTestStatus = deliverabilityTestStatus
            self.fromEmailAddress = fromEmailAddress
            self.reportId = reportId
            self.reportName = reportName
            self.subject = subject
        }
    }

}

extension SESv2ClientTypes {
    /// The status of a predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport operation to view the results of the test.
    public enum DeliverabilityTestStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliverabilityTestStatus] {
            return [
                .completed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliverabilityTestStatus(rawValue: rawValue) ?? DeliverabilityTestStatus.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.DeliveryOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingPoolName = "SendingPoolName"
        case tlsPolicy = "TlsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sendingPoolName = self.sendingPoolName {
            try encodeContainer.encode(sendingPoolName, forKey: .sendingPoolName)
        }
        if let tlsPolicy = self.tlsPolicy {
            try encodeContainer.encode(tlsPolicy.rawValue, forKey: .tlsPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tlsPolicyDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.TlsPolicy.self, forKey: .tlsPolicy)
        tlsPolicy = tlsPolicyDecoded
        let sendingPoolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sendingPoolName)
        sendingPoolName = sendingPoolNameDecoded
    }
}

extension SESv2ClientTypes {
    /// Used to associate a configuration set with a dedicated IP pool.
    public struct DeliveryOptions: Swift.Equatable {
        /// The name of the dedicated IP pool to associate with the configuration set.
        public var sendingPoolName: Swift.String?
        /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
        public var tlsPolicy: SESv2ClientTypes.TlsPolicy?

        public init (
            sendingPoolName: Swift.String? = nil,
            tlsPolicy: SESv2ClientTypes.TlsPolicy? = nil
        )
        {
            self.sendingPoolName = sendingPoolName
            self.tlsPolicy = tlsPolicy
        }
    }

}

extension SESv2ClientTypes.Destination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bccAddresses = "BccAddresses"
        case ccAddresses = "CcAddresses"
        case toAddresses = "ToAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bccAddresses = bccAddresses {
            var bccAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bccAddresses)
            for emailaddress0 in bccAddresses {
                try bccAddressesContainer.encode(emailaddress0)
            }
        }
        if let ccAddresses = ccAddresses {
            var ccAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ccAddresses)
            for emailaddress0 in ccAddresses {
                try ccAddressesContainer.encode(emailaddress0)
            }
        }
        if let toAddresses = toAddresses {
            var toAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .toAddresses)
            for emailaddress0 in toAddresses {
                try toAddressesContainer.encode(emailaddress0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let toAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .toAddresses)
        var toAddressesDecoded0:[Swift.String]? = nil
        if let toAddressesContainer = toAddressesContainer {
            toAddressesDecoded0 = [Swift.String]()
            for string0 in toAddressesContainer {
                if let string0 = string0 {
                    toAddressesDecoded0?.append(string0)
                }
            }
        }
        toAddresses = toAddressesDecoded0
        let ccAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ccAddresses)
        var ccAddressesDecoded0:[Swift.String]? = nil
        if let ccAddressesContainer = ccAddressesContainer {
            ccAddressesDecoded0 = [Swift.String]()
            for string0 in ccAddressesContainer {
                if let string0 = string0 {
                    ccAddressesDecoded0?.append(string0)
                }
            }
        }
        ccAddresses = ccAddressesDecoded0
        let bccAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .bccAddresses)
        var bccAddressesDecoded0:[Swift.String]? = nil
        if let bccAddressesContainer = bccAddressesContainer {
            bccAddressesDecoded0 = [Swift.String]()
            for string0 in bccAddressesContainer {
                if let string0 = string0 {
                    bccAddressesDecoded0?.append(string0)
                }
            }
        }
        bccAddresses = bccAddressesDecoded0
    }
}

extension SESv2ClientTypes {
    /// An object that describes the recipients for an email. Amazon SES does not support the SMTPUTF8 extension, as described in [RFC6531](https://tools.ietf.org/html/rfc6531). For this reason, the local part of a destination email address (the part of the email address that precedes the @ sign) may only contain [7-bit ASCII characters](https://en.wikipedia.org/wiki/Email_address#Local-part). If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in [RFC3492](https://tools.ietf.org/html/rfc3492.html).
    public struct Destination: Swift.Equatable {
        /// An array that contains the email addresses of the "BCC" (blind carbon copy) recipients for the email.
        public var bccAddresses: [Swift.String]?
        /// An array that contains the email addresses of the "CC" (carbon copy) recipients for the email.
        public var ccAddresses: [Swift.String]?
        /// An array that contains the email addresses of the "To" recipients for the email.
        public var toAddresses: [Swift.String]?

        public init (
            bccAddresses: [Swift.String]? = nil,
            ccAddresses: [Swift.String]? = nil,
            toAddresses: [Swift.String]? = nil
        )
        {
            self.bccAddresses = bccAddresses
            self.ccAddresses = ccAddresses
            self.toAddresses = toAddresses
        }
    }

}

extension SESv2ClientTypes {
    /// The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail or SendRawEmail API, choose messageTag. To use your own email headers, choose emailHeader. To use link tags, choose linkTags.
    public enum DimensionValueSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case emailHeader
        case linkTag
        case messageTag
        case sdkUnknown(Swift.String)

        public static var allCases: [DimensionValueSource] {
            return [
                .emailHeader,
                .linkTag,
                .messageTag,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .emailHeader: return "EMAIL_HEADER"
            case .linkTag: return "LINK_TAG"
            case .messageTag: return "MESSAGE_TAG"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DimensionValueSource(rawValue: rawValue) ?? DimensionValueSource.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.DkimAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentSigningKeyLength = "CurrentSigningKeyLength"
        case lastKeyGenerationTimestamp = "LastKeyGenerationTimestamp"
        case nextSigningKeyLength = "NextSigningKeyLength"
        case signingAttributesOrigin = "SigningAttributesOrigin"
        case signingEnabled = "SigningEnabled"
        case status = "Status"
        case tokens = "Tokens"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentSigningKeyLength = self.currentSigningKeyLength {
            try encodeContainer.encode(currentSigningKeyLength.rawValue, forKey: .currentSigningKeyLength)
        }
        if let lastKeyGenerationTimestamp = self.lastKeyGenerationTimestamp {
            try encodeContainer.encodeTimestamp(lastKeyGenerationTimestamp, format: .epochSeconds, forKey: .lastKeyGenerationTimestamp)
        }
        if let nextSigningKeyLength = self.nextSigningKeyLength {
            try encodeContainer.encode(nextSigningKeyLength.rawValue, forKey: .nextSigningKeyLength)
        }
        if let signingAttributesOrigin = self.signingAttributesOrigin {
            try encodeContainer.encode(signingAttributesOrigin.rawValue, forKey: .signingAttributesOrigin)
        }
        if signingEnabled != false {
            try encodeContainer.encode(signingEnabled, forKey: .signingEnabled)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tokens = tokens {
            var tokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tokens)
            for dnstoken0 in tokens {
                try tokensContainer.encode(dnstoken0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .signingEnabled) ?? false
        signingEnabled = signingEnabledDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DkimStatus.self, forKey: .status)
        status = statusDecoded
        let tokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tokens)
        var tokensDecoded0:[Swift.String]? = nil
        if let tokensContainer = tokensContainer {
            tokensDecoded0 = [Swift.String]()
            for string0 in tokensContainer {
                if let string0 = string0 {
                    tokensDecoded0?.append(string0)
                }
            }
        }
        tokens = tokensDecoded0
        let signingAttributesOriginDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DkimSigningAttributesOrigin.self, forKey: .signingAttributesOrigin)
        signingAttributesOrigin = signingAttributesOriginDecoded
        let nextSigningKeyLengthDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DkimSigningKeyLength.self, forKey: .nextSigningKeyLength)
        nextSigningKeyLength = nextSigningKeyLengthDecoded
        let currentSigningKeyLengthDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DkimSigningKeyLength.self, forKey: .currentSigningKeyLength)
        currentSigningKeyLength = currentSigningKeyLengthDecoded
        let lastKeyGenerationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastKeyGenerationTimestamp)
        lastKeyGenerationTimestamp = lastKeyGenerationTimestampDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about the DKIM authentication status for an email identity. Amazon SES determines the authentication status by searching for specific records in the DNS configuration for the domain. If you used [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html) to set up DKIM authentication, Amazon SES tries to find three unique CNAME records in the DNS configuration for your domain. If you provided a public key to perform DKIM authentication, Amazon SES tries to find a TXT record that uses the selector that you specified. The value of the TXT record must be a public key that's paired with the private key that you specified in the process of creating the identity
    public struct DkimAttributes: Swift.Equatable {
        /// [Easy DKIM] The key length of the DKIM key pair in use.
        public var currentSigningKeyLength: SESv2ClientTypes.DkimSigningKeyLength?
        /// [Easy DKIM] The last time a key pair was generated for this identity.
        public var lastKeyGenerationTimestamp: ClientRuntime.Date?
        /// [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.
        public var nextSigningKeyLength: SESv2ClientTypes.DkimSigningKeyLength?
        /// A string that indicates how DKIM was configured for the identity. These are the possible values:
        ///
        /// * AWS_SES – Indicates that DKIM was configured for the identity by using [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html).
        ///
        /// * EXTERNAL – Indicates that DKIM was configured for the identity by using Bring Your Own DKIM (BYODKIM).
        public var signingAttributesOrigin: SESv2ClientTypes.DkimSigningAttributesOrigin?
        /// If the value is true, then the messages that you send from the identity are signed using DKIM. If the value is false, then the messages that you send from the identity aren't DKIM-signed.
        public var signingEnabled: Swift.Bool
        /// Describes whether or not Amazon SES has successfully located the DKIM records in the DNS records for the domain. The status can be one of the following:
        ///
        /// * PENDING – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.
        ///
        /// * SUCCESS – The verification process completed successfully.
        ///
        /// * FAILED – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.
        ///
        /// * TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.
        ///
        /// * NOT_STARTED – The DKIM verification process hasn't been initiated for the domain.
        public var status: SESv2ClientTypes.DkimStatus?
        /// If you used [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html) to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete. If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector for the public key. Regardless of the DKIM authentication method you use, Amazon SES searches for the appropriate records in the DNS configuration of the domain for up to 72 hours.
        public var tokens: [Swift.String]?

        public init (
            currentSigningKeyLength: SESv2ClientTypes.DkimSigningKeyLength? = nil,
            lastKeyGenerationTimestamp: ClientRuntime.Date? = nil,
            nextSigningKeyLength: SESv2ClientTypes.DkimSigningKeyLength? = nil,
            signingAttributesOrigin: SESv2ClientTypes.DkimSigningAttributesOrigin? = nil,
            signingEnabled: Swift.Bool = false,
            status: SESv2ClientTypes.DkimStatus? = nil,
            tokens: [Swift.String]? = nil
        )
        {
            self.currentSigningKeyLength = currentSigningKeyLength
            self.lastKeyGenerationTimestamp = lastKeyGenerationTimestamp
            self.nextSigningKeyLength = nextSigningKeyLength
            self.signingAttributesOrigin = signingAttributesOrigin
            self.signingEnabled = signingEnabled
            self.status = status
            self.tokens = tokens
        }
    }

}

extension SESv2ClientTypes.DkimSigningAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainSigningPrivateKey = "DomainSigningPrivateKey"
        case domainSigningSelector = "DomainSigningSelector"
        case nextSigningKeyLength = "NextSigningKeyLength"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainSigningPrivateKey = self.domainSigningPrivateKey {
            try encodeContainer.encode(domainSigningPrivateKey, forKey: .domainSigningPrivateKey)
        }
        if let domainSigningSelector = self.domainSigningSelector {
            try encodeContainer.encode(domainSigningSelector, forKey: .domainSigningSelector)
        }
        if let nextSigningKeyLength = self.nextSigningKeyLength {
            try encodeContainer.encode(nextSigningKeyLength.rawValue, forKey: .nextSigningKeyLength)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainSigningSelectorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainSigningSelector)
        domainSigningSelector = domainSigningSelectorDecoded
        let domainSigningPrivateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainSigningPrivateKey)
        domainSigningPrivateKey = domainSigningPrivateKeyDecoded
        let nextSigningKeyLengthDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DkimSigningKeyLength.self, forKey: .nextSigningKeyLength)
        nextSigningKeyLength = nextSigningKeyLengthDecoded
    }
}

extension SESv2ClientTypes.DkimSigningAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DkimSigningAttributes(domainSigningSelector: \(Swift.String(describing: domainSigningSelector)), nextSigningKeyLength: \(Swift.String(describing: nextSigningKeyLength)), domainSigningPrivateKey: \"CONTENT_REDACTED\")"}
}

extension SESv2ClientTypes {
    /// An object that contains configuration for Bring Your Own DKIM (BYODKIM), or, for Easy DKIM
    public struct DkimSigningAttributes: Swift.Equatable {
        /// [Bring Your Own DKIM] A private key that's used to generate a DKIM signature. The private key must use 1024 or 2048-bit RSA encryption, and must be encoded using base64 encoding.
        public var domainSigningPrivateKey: Swift.String?
        /// [Bring Your Own DKIM] A string that's used to identify a public key in the DNS configuration for a domain.
        public var domainSigningSelector: Swift.String?
        /// [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.
        public var nextSigningKeyLength: SESv2ClientTypes.DkimSigningKeyLength?

        public init (
            domainSigningPrivateKey: Swift.String? = nil,
            domainSigningSelector: Swift.String? = nil,
            nextSigningKeyLength: SESv2ClientTypes.DkimSigningKeyLength? = nil
        )
        {
            self.domainSigningPrivateKey = domainSigningPrivateKey
            self.domainSigningSelector = domainSigningSelector
            self.nextSigningKeyLength = nextSigningKeyLength
        }
    }

}

extension SESv2ClientTypes {
    public enum DkimSigningAttributesOrigin: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsSes
        case external
        case sdkUnknown(Swift.String)

        public static var allCases: [DkimSigningAttributesOrigin] {
            return [
                .awsSes,
                .external,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsSes: return "AWS_SES"
            case .external: return "EXTERNAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DkimSigningAttributesOrigin(rawValue: rawValue) ?? DkimSigningAttributesOrigin.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes {
    public enum DkimSigningKeyLength: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rsa1024Bit
        case rsa2048Bit
        case sdkUnknown(Swift.String)

        public static var allCases: [DkimSigningKeyLength] {
            return [
                .rsa1024Bit,
                .rsa2048Bit,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rsa1024Bit: return "RSA_1024_BIT"
            case .rsa2048Bit: return "RSA_2048_BIT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DkimSigningKeyLength(rawValue: rawValue) ?? DkimSigningKeyLength.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes {
    /// The DKIM authentication status of the identity. The status can be one of the following:
    ///
    /// * PENDING – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.
    ///
    /// * SUCCESS – The verification process completed successfully.
    ///
    /// * FAILED – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.
    ///
    /// * TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.
    ///
    /// * NOT_STARTED – The DKIM verification process hasn't been initiated for the domain.
    public enum DkimStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case notStarted
        case pending
        case success
        case temporaryFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [DkimStatus] {
            return [
                .failed,
                .notStarted,
                .pending,
                .success,
                .temporaryFailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .notStarted: return "NOT_STARTED"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case .temporaryFailure: return "TEMPORARY_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DkimStatus(rawValue: rawValue) ?? DkimStatus.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.DomainDeliverabilityCampaign: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignId = "CampaignId"
        case deleteRate = "DeleteRate"
        case esps = "Esps"
        case firstSeenDateTime = "FirstSeenDateTime"
        case fromAddress = "FromAddress"
        case imageUrl = "ImageUrl"
        case inboxCount = "InboxCount"
        case lastSeenDateTime = "LastSeenDateTime"
        case projectedVolume = "ProjectedVolume"
        case readDeleteRate = "ReadDeleteRate"
        case readRate = "ReadRate"
        case sendingIps = "SendingIps"
        case spamCount = "SpamCount"
        case subject = "Subject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let campaignId = self.campaignId {
            try encodeContainer.encode(campaignId, forKey: .campaignId)
        }
        if let deleteRate = self.deleteRate {
            try encodeContainer.encode(deleteRate, forKey: .deleteRate)
        }
        if let esps = esps {
            var espsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .esps)
            for esp0 in esps {
                try espsContainer.encode(esp0)
            }
        }
        if let firstSeenDateTime = self.firstSeenDateTime {
            try encodeContainer.encodeTimestamp(firstSeenDateTime, format: .epochSeconds, forKey: .firstSeenDateTime)
        }
        if let fromAddress = self.fromAddress {
            try encodeContainer.encode(fromAddress, forKey: .fromAddress)
        }
        if let imageUrl = self.imageUrl {
            try encodeContainer.encode(imageUrl, forKey: .imageUrl)
        }
        if let inboxCount = self.inboxCount {
            try encodeContainer.encode(inboxCount, forKey: .inboxCount)
        }
        if let lastSeenDateTime = self.lastSeenDateTime {
            try encodeContainer.encodeTimestamp(lastSeenDateTime, format: .epochSeconds, forKey: .lastSeenDateTime)
        }
        if let projectedVolume = self.projectedVolume {
            try encodeContainer.encode(projectedVolume, forKey: .projectedVolume)
        }
        if let readDeleteRate = self.readDeleteRate {
            try encodeContainer.encode(readDeleteRate, forKey: .readDeleteRate)
        }
        if let readRate = self.readRate {
            try encodeContainer.encode(readRate, forKey: .readRate)
        }
        if let sendingIps = sendingIps {
            var sendingIpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sendingIps)
            for ip0 in sendingIps {
                try sendingIpsContainer.encode(ip0)
            }
        }
        if let spamCount = self.spamCount {
            try encodeContainer.encode(spamCount, forKey: .spamCount)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .campaignId)
        campaignId = campaignIdDecoded
        let imageUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUrl)
        imageUrl = imageUrlDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let fromAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromAddress)
        fromAddress = fromAddressDecoded
        let sendingIpsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sendingIps)
        var sendingIpsDecoded0:[Swift.String]? = nil
        if let sendingIpsContainer = sendingIpsContainer {
            sendingIpsDecoded0 = [Swift.String]()
            for string0 in sendingIpsContainer {
                if let string0 = string0 {
                    sendingIpsDecoded0?.append(string0)
                }
            }
        }
        sendingIps = sendingIpsDecoded0
        let firstSeenDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .firstSeenDateTime)
        firstSeenDateTime = firstSeenDateTimeDecoded
        let lastSeenDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastSeenDateTime)
        lastSeenDateTime = lastSeenDateTimeDecoded
        let inboxCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inboxCount)
        inboxCount = inboxCountDecoded
        let spamCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spamCount)
        spamCount = spamCountDecoded
        let readRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .readRate)
        readRate = readRateDecoded
        let deleteRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .deleteRate)
        deleteRate = deleteRateDecoded
        let readDeleteRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .readDeleteRate)
        readDeleteRate = readDeleteRateDecoded
        let projectedVolumeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .projectedVolume)
        projectedVolume = projectedVolumeDecoded
        let espsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .esps)
        var espsDecoded0:[Swift.String]? = nil
        if let espsContainer = espsContainer {
            espsDecoded0 = [Swift.String]()
            for string0 in espsContainer {
                if let string0 = string0 {
                    espsDecoded0?.append(string0)
                }
            }
        }
        esps = espsDecoded0
    }
}

extension SESv2ClientTypes {
    /// An object that contains the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (PutDeliverabilityDashboardOption operation).
    public struct DomainDeliverabilityCampaign: Swift.Equatable {
        /// The unique identifier for the campaign. The Deliverability dashboard automatically generates and assigns this identifier to a campaign.
        public var campaignId: Swift.String?
        /// The percentage of email messages that were deleted by recipients, without being opened first. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public var deleteRate: Swift.Double?
        /// The major email providers who handled the email message.
        public var esps: [Swift.String]?
        /// The first time when the email message was delivered to any recipient's inbox. This value can help you determine how long it took for a campaign to deliver an email message.
        public var firstSeenDateTime: ClientRuntime.Date?
        /// The verified email address that the email message was sent from.
        public var fromAddress: Swift.String?
        /// The URL of an image that contains a snapshot of the email message that was sent.
        public var imageUrl: Swift.String?
        /// The number of email messages that were delivered to recipients’ inboxes.
        public var inboxCount: Swift.Int?
        /// The last time when the email message was delivered to any recipient's inbox. This value can help you determine how long it took for a campaign to deliver an email message.
        public var lastSeenDateTime: ClientRuntime.Date?
        /// The projected number of recipients that the email message was sent to.
        public var projectedVolume: Swift.Int?
        /// The percentage of email messages that were opened and then deleted by recipients. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public var readDeleteRate: Swift.Double?
        /// The percentage of email messages that were opened by recipients. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public var readRate: Swift.Double?
        /// The IP addresses that were used to send the email message.
        public var sendingIps: [Swift.String]?
        /// The number of email messages that were delivered to recipients' spam or junk mail folders.
        public var spamCount: Swift.Int?
        /// The subject line, or title, of the email message.
        public var subject: Swift.String?

        public init (
            campaignId: Swift.String? = nil,
            deleteRate: Swift.Double? = nil,
            esps: [Swift.String]? = nil,
            firstSeenDateTime: ClientRuntime.Date? = nil,
            fromAddress: Swift.String? = nil,
            imageUrl: Swift.String? = nil,
            inboxCount: Swift.Int? = nil,
            lastSeenDateTime: ClientRuntime.Date? = nil,
            projectedVolume: Swift.Int? = nil,
            readDeleteRate: Swift.Double? = nil,
            readRate: Swift.Double? = nil,
            sendingIps: [Swift.String]? = nil,
            spamCount: Swift.Int? = nil,
            subject: Swift.String? = nil
        )
        {
            self.campaignId = campaignId
            self.deleteRate = deleteRate
            self.esps = esps
            self.firstSeenDateTime = firstSeenDateTime
            self.fromAddress = fromAddress
            self.imageUrl = imageUrl
            self.inboxCount = inboxCount
            self.lastSeenDateTime = lastSeenDateTime
            self.projectedVolume = projectedVolume
            self.readDeleteRate = readDeleteRate
            self.readRate = readRate
            self.sendingIps = sendingIps
            self.spamCount = spamCount
            self.subject = subject
        }
    }

}

extension SESv2ClientTypes.DomainDeliverabilityTrackingOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case inboxPlacementTrackingOption = "InboxPlacementTrackingOption"
        case subscriptionStartDate = "SubscriptionStartDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let inboxPlacementTrackingOption = self.inboxPlacementTrackingOption {
            try encodeContainer.encode(inboxPlacementTrackingOption, forKey: .inboxPlacementTrackingOption)
        }
        if let subscriptionStartDate = self.subscriptionStartDate {
            try encodeContainer.encodeTimestamp(subscriptionStartDate, format: .epochSeconds, forKey: .subscriptionStartDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let subscriptionStartDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .subscriptionStartDate)
        subscriptionStartDate = subscriptionStartDateDecoded
        let inboxPlacementTrackingOptionDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.InboxPlacementTrackingOption.self, forKey: .inboxPlacementTrackingOption)
        inboxPlacementTrackingOption = inboxPlacementTrackingOptionDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.
    public struct DomainDeliverabilityTrackingOption: Swift.Equatable {
        /// A verified domain that’s associated with your Amazon Web Services account and currently has an active Deliverability dashboard subscription.
        public var domain: Swift.String?
        /// An object that contains information about the inbox placement data settings for the domain.
        public var inboxPlacementTrackingOption: SESv2ClientTypes.InboxPlacementTrackingOption?
        /// The date when you enabled the Deliverability dashboard for the domain.
        public var subscriptionStartDate: ClientRuntime.Date?

        public init (
            domain: Swift.String? = nil,
            inboxPlacementTrackingOption: SESv2ClientTypes.InboxPlacementTrackingOption? = nil,
            subscriptionStartDate: ClientRuntime.Date? = nil
        )
        {
            self.domain = domain
            self.inboxPlacementTrackingOption = inboxPlacementTrackingOption
            self.subscriptionStartDate = subscriptionStartDate
        }
    }

}

extension SESv2ClientTypes.DomainIspPlacement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inboxPercentage = "InboxPercentage"
        case inboxRawCount = "InboxRawCount"
        case ispName = "IspName"
        case spamPercentage = "SpamPercentage"
        case spamRawCount = "SpamRawCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inboxPercentage = self.inboxPercentage {
            try encodeContainer.encode(inboxPercentage, forKey: .inboxPercentage)
        }
        if let inboxRawCount = self.inboxRawCount {
            try encodeContainer.encode(inboxRawCount, forKey: .inboxRawCount)
        }
        if let ispName = self.ispName {
            try encodeContainer.encode(ispName, forKey: .ispName)
        }
        if let spamPercentage = self.spamPercentage {
            try encodeContainer.encode(spamPercentage, forKey: .spamPercentage)
        }
        if let spamRawCount = self.spamRawCount {
            try encodeContainer.encode(spamRawCount, forKey: .spamRawCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ispNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ispName)
        ispName = ispNameDecoded
        let inboxRawCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inboxRawCount)
        inboxRawCount = inboxRawCountDecoded
        let spamRawCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spamRawCount)
        spamRawCount = spamRawCountDecoded
        let inboxPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .inboxPercentage)
        inboxPercentage = inboxPercentageDecoded
        let spamPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .spamPercentage)
        spamPercentage = spamPercentageDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains inbox placement data for email sent from one of your email domains to a specific email provider.
    public struct DomainIspPlacement: Swift.Equatable {
        /// The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.
        public var inboxPercentage: Swift.Double?
        /// The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.
        public var inboxRawCount: Swift.Int?
        /// The name of the email provider that the inbox placement data applies to.
        public var ispName: Swift.String?
        /// The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.
        public var spamPercentage: Swift.Double?
        /// The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.
        public var spamRawCount: Swift.Int?

        public init (
            inboxPercentage: Swift.Double? = nil,
            inboxRawCount: Swift.Int? = nil,
            ispName: Swift.String? = nil,
            spamPercentage: Swift.Double? = nil,
            spamRawCount: Swift.Int? = nil
        )
        {
            self.inboxPercentage = inboxPercentage
            self.inboxRawCount = inboxRawCount
            self.ispName = ispName
            self.spamPercentage = spamPercentage
            self.spamRawCount = spamRawCount
        }
    }

}

extension SESv2ClientTypes.EmailContent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case raw = "Raw"
        case simple = "Simple"
        case template = "Template"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let raw = self.raw {
            try encodeContainer.encode(raw, forKey: .raw)
        }
        if let simple = self.simple {
            try encodeContainer.encode(simple, forKey: .simple)
        }
        if let template = self.template {
            try encodeContainer.encode(template, forKey: .template)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let simpleDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.Message.self, forKey: .simple)
        simple = simpleDecoded
        let rawDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.RawMessage.self, forKey: .raw)
        raw = rawDecoded
        let templateDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.Template.self, forKey: .template)
        template = templateDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
    public struct EmailContent: Swift.Equatable {
        /// The raw email message. The message has to meet the following criteria:
        ///
        /// * The message has to contain a header and a body, separated by one blank line.
        ///
        /// * All of the required header fields must be present in the message.
        ///
        /// * Each part of a multipart MIME message must be formatted properly.
        ///
        /// * If you include attachments, they must be in a file format that the Amazon SES API v2 supports.
        ///
        /// * The entire message must be Base64 encoded.
        ///
        /// * If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients' email clients render the message properly.
        ///
        /// * The length of any single line of text in the message can't exceed 1,000 characters. This restriction is defined in [RFC 5321](https://tools.ietf.org/html/rfc5321).
        public var raw: SESv2ClientTypes.RawMessage?
        /// The simple email message. The message consists of a subject and a message body.
        public var simple: SESv2ClientTypes.Message?
        /// The template to use for the email message.
        public var template: SESv2ClientTypes.Template?

        public init (
            raw: SESv2ClientTypes.RawMessage? = nil,
            simple: SESv2ClientTypes.Message? = nil,
            template: SESv2ClientTypes.Template? = nil
        )
        {
            self.raw = raw
            self.simple = simple
            self.template = template
        }
    }

}

extension SESv2ClientTypes.EmailTemplateContent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case html = "Html"
        case subject = "Subject"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let html = self.html {
            try encodeContainer.encode(html, forKey: .html)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let htmlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .html)
        html = htmlDecoded
    }
}

extension SESv2ClientTypes {
    /// The content of the email, composed of a subject line, an HTML part, and a text-only part.
    public struct EmailTemplateContent: Swift.Equatable {
        /// The HTML body of the email.
        public var html: Swift.String?
        /// The subject line of the email.
        public var subject: Swift.String?
        /// The email body that will be visible to recipients whose email clients do not display HTML.
        public var text: Swift.String?

        public init (
            html: Swift.String? = nil,
            subject: Swift.String? = nil,
            text: Swift.String? = nil
        )
        {
            self.html = html
            self.subject = subject
            self.text = text
        }
    }

}

extension SESv2ClientTypes.EmailTemplateMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTimestamp = self.createdTimestamp {
            try encodeContainer.encodeTimestamp(createdTimestamp, format: .epochSeconds, forKey: .createdTimestamp)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let createdTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
    }
}

extension SESv2ClientTypes {
    /// Contains information about an email template.
    public struct EmailTemplateMetadata: Swift.Equatable {
        /// The time and date the template was created.
        public var createdTimestamp: ClientRuntime.Date?
        /// The name of the template.
        public var templateName: Swift.String?

        public init (
            createdTimestamp: ClientRuntime.Date? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.templateName = templateName
        }
    }

}

extension SESv2ClientTypes.EventDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchDestination = "CloudWatchDestination"
        case enabled = "Enabled"
        case kinesisFirehoseDestination = "KinesisFirehoseDestination"
        case matchingEventTypes = "MatchingEventTypes"
        case name = "Name"
        case pinpointDestination = "PinpointDestination"
        case snsDestination = "SnsDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchDestination = self.cloudWatchDestination {
            try encodeContainer.encode(cloudWatchDestination, forKey: .cloudWatchDestination)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let kinesisFirehoseDestination = self.kinesisFirehoseDestination {
            try encodeContainer.encode(kinesisFirehoseDestination, forKey: .kinesisFirehoseDestination)
        }
        if let matchingEventTypes = matchingEventTypes {
            var matchingEventTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchingEventTypes)
            for eventtype0 in matchingEventTypes {
                try matchingEventTypesContainer.encode(eventtype0.rawValue)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pinpointDestination = self.pinpointDestination {
            try encodeContainer.encode(pinpointDestination, forKey: .pinpointDestination)
        }
        if let snsDestination = self.snsDestination {
            try encodeContainer.encode(snsDestination, forKey: .snsDestination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let matchingEventTypesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.EventType?].self, forKey: .matchingEventTypes)
        var matchingEventTypesDecoded0:[SESv2ClientTypes.EventType]? = nil
        if let matchingEventTypesContainer = matchingEventTypesContainer {
            matchingEventTypesDecoded0 = [SESv2ClientTypes.EventType]()
            for enum0 in matchingEventTypesContainer {
                if let enum0 = enum0 {
                    matchingEventTypesDecoded0?.append(enum0)
                }
            }
        }
        matchingEventTypes = matchingEventTypesDecoded0
        let kinesisFirehoseDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.KinesisFirehoseDestination.self, forKey: .kinesisFirehoseDestination)
        kinesisFirehoseDestination = kinesisFirehoseDestinationDecoded
        let cloudWatchDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.CloudWatchDestination.self, forKey: .cloudWatchDestination)
        cloudWatchDestination = cloudWatchDestinationDecoded
        let snsDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SnsDestination.self, forKey: .snsDestination)
        snsDestination = snsDestinationDecoded
        let pinpointDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.PinpointDestination.self, forKey: .pinpointDestination)
        pinpointDestination = pinpointDestinationDecoded
    }
}

extension SESv2ClientTypes {
    /// In the Amazon SES API v2, events include message sends, deliveries, opens, clicks, bounces, complaints and delivery delays. Event destinations are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.
    public struct EventDestination: Swift.Equatable {
        /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
        public var cloudWatchDestination: SESv2ClientTypes.CloudWatchDestination?
        /// If true, the event destination is enabled. When the event destination is enabled, the specified event types are sent to the destinations in this EventDestinationDefinition. If false, the event destination is disabled. When the event destination is disabled, events aren't sent to the specified destinations.
        public var enabled: Swift.Bool
        /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
        public var kinesisFirehoseDestination: SESv2ClientTypes.KinesisFirehoseDestination?
        /// The types of events that Amazon SES sends to the specified event destinations.
        /// This member is required.
        public var matchingEventTypes: [SESv2ClientTypes.EventType]?
        /// A name that identifies the event destination.
        /// This member is required.
        public var name: Swift.String?
        /// An object that defines an Amazon Pinpoint project destination for email events. You can send email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging dashboards that are built in to Amazon Pinpoint. For more information, see [Transactional Messaging Charts](https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html) in the Amazon Pinpoint User Guide.
        public var pinpointDestination: SESv2ClientTypes.PinpointDestination?
        /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
        public var snsDestination: SESv2ClientTypes.SnsDestination?

        public init (
            cloudWatchDestination: SESv2ClientTypes.CloudWatchDestination? = nil,
            enabled: Swift.Bool = false,
            kinesisFirehoseDestination: SESv2ClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [SESv2ClientTypes.EventType]? = nil,
            name: Swift.String? = nil,
            pinpointDestination: SESv2ClientTypes.PinpointDestination? = nil,
            snsDestination: SESv2ClientTypes.SnsDestination? = nil
        )
        {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.name = name
            self.pinpointDestination = pinpointDestination
            self.snsDestination = snsDestination
        }
    }

}

extension SESv2ClientTypes.EventDestinationDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchDestination = "CloudWatchDestination"
        case enabled = "Enabled"
        case kinesisFirehoseDestination = "KinesisFirehoseDestination"
        case matchingEventTypes = "MatchingEventTypes"
        case pinpointDestination = "PinpointDestination"
        case snsDestination = "SnsDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchDestination = self.cloudWatchDestination {
            try encodeContainer.encode(cloudWatchDestination, forKey: .cloudWatchDestination)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let kinesisFirehoseDestination = self.kinesisFirehoseDestination {
            try encodeContainer.encode(kinesisFirehoseDestination, forKey: .kinesisFirehoseDestination)
        }
        if let matchingEventTypes = matchingEventTypes {
            var matchingEventTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchingEventTypes)
            for eventtype0 in matchingEventTypes {
                try matchingEventTypesContainer.encode(eventtype0.rawValue)
            }
        }
        if let pinpointDestination = self.pinpointDestination {
            try encodeContainer.encode(pinpointDestination, forKey: .pinpointDestination)
        }
        if let snsDestination = self.snsDestination {
            try encodeContainer.encode(snsDestination, forKey: .snsDestination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let matchingEventTypesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.EventType?].self, forKey: .matchingEventTypes)
        var matchingEventTypesDecoded0:[SESv2ClientTypes.EventType]? = nil
        if let matchingEventTypesContainer = matchingEventTypesContainer {
            matchingEventTypesDecoded0 = [SESv2ClientTypes.EventType]()
            for enum0 in matchingEventTypesContainer {
                if let enum0 = enum0 {
                    matchingEventTypesDecoded0?.append(enum0)
                }
            }
        }
        matchingEventTypes = matchingEventTypesDecoded0
        let kinesisFirehoseDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.KinesisFirehoseDestination.self, forKey: .kinesisFirehoseDestination)
        kinesisFirehoseDestination = kinesisFirehoseDestinationDecoded
        let cloudWatchDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.CloudWatchDestination.self, forKey: .cloudWatchDestination)
        cloudWatchDestination = cloudWatchDestinationDecoded
        let snsDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SnsDestination.self, forKey: .snsDestination)
        snsDestination = snsDestinationDecoded
        let pinpointDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.PinpointDestination.self, forKey: .pinpointDestination)
        pinpointDestination = pinpointDestinationDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
    public struct EventDestinationDefinition: Swift.Equatable {
        /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
        public var cloudWatchDestination: SESv2ClientTypes.CloudWatchDestination?
        /// If true, the event destination is enabled. When the event destination is enabled, the specified event types are sent to the destinations in this EventDestinationDefinition. If false, the event destination is disabled. When the event destination is disabled, events aren't sent to the specified destinations.
        public var enabled: Swift.Bool
        /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
        public var kinesisFirehoseDestination: SESv2ClientTypes.KinesisFirehoseDestination?
        /// An array that specifies which events the Amazon SES API v2 should send to the destinations in this EventDestinationDefinition.
        public var matchingEventTypes: [SESv2ClientTypes.EventType]?
        /// An object that defines an Amazon Pinpoint project destination for email events. You can send email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging dashboards that are built in to Amazon Pinpoint. For more information, see [Transactional Messaging Charts](https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html) in the Amazon Pinpoint User Guide.
        public var pinpointDestination: SESv2ClientTypes.PinpointDestination?
        /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
        public var snsDestination: SESv2ClientTypes.SnsDestination?

        public init (
            cloudWatchDestination: SESv2ClientTypes.CloudWatchDestination? = nil,
            enabled: Swift.Bool = false,
            kinesisFirehoseDestination: SESv2ClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [SESv2ClientTypes.EventType]? = nil,
            pinpointDestination: SESv2ClientTypes.PinpointDestination? = nil,
            snsDestination: SESv2ClientTypes.SnsDestination? = nil
        )
        {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.pinpointDestination = pinpointDestination
            self.snsDestination = snsDestination
        }
    }

}

extension SESv2ClientTypes {
    /// An email sending event type. For example, email sends, opens, and bounces are all email events.
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bounce
        case click
        case complaint
        case delivery
        case deliveryDelay
        case `open`
        case reject
        case renderingFailure
        case send
        case subscription
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .bounce,
                .click,
                .complaint,
                .delivery,
                .deliveryDelay,
                .open,
                .reject,
                .renderingFailure,
                .send,
                .subscription,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "BOUNCE"
            case .click: return "CLICK"
            case .complaint: return "COMPLAINT"
            case .delivery: return "DELIVERY"
            case .deliveryDelay: return "DELIVERY_DELAY"
            case .open: return "OPEN"
            case .reject: return "REJECT"
            case .renderingFailure: return "RENDERING_FAILURE"
            case .send: return "SEND"
            case .subscription: return "SUBSCRIPTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.FailureInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage = "ErrorMessage"
        case failedRecordsS3Url = "FailedRecordsS3Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let failedRecordsS3Url = self.failedRecordsS3Url {
            try encodeContainer.encode(failedRecordsS3Url, forKey: .failedRecordsS3Url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedRecordsS3UrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failedRecordsS3Url)
        failedRecordsS3Url = failedRecordsS3UrlDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains the failure details about an import job.
    public struct FailureInfo: Swift.Equatable {
        /// A message about why the import job failed.
        public var errorMessage: Swift.String?
        /// An Amazon S3 presigned URL that contains all the failed records and related information.
        public var failedRecordsS3Url: Swift.String?

        public init (
            errorMessage: Swift.String? = nil,
            failedRecordsS3Url: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
            self.failedRecordsS3Url = failedRecordsS3Url
        }
    }

}

extension SESv2ClientTypes {
    public enum FeatureStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FeatureStatus(rawValue: rawValue) ?? FeatureStatus.sdkUnknown(rawValue)
        }
    }
}

extension GetAccountInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/account"
    }
}

/// A request to obtain information about the email-sending capabilities of your Amazon SES account.
public struct GetAccountInput: Swift.Equatable {

    public init () { }
}

struct GetAccountInputBody: Swift.Equatable {
}

extension GetAccountInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAccountOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetAccountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dedicatedIpAutoWarmupEnabled = output.dedicatedIpAutoWarmupEnabled
            self.details = output.details
            self.enforcementStatus = output.enforcementStatus
            self.productionAccessEnabled = output.productionAccessEnabled
            self.sendQuota = output.sendQuota
            self.sendingEnabled = output.sendingEnabled
            self.suppressionAttributes = output.suppressionAttributes
            self.vdmAttributes = output.vdmAttributes
        } else {
            self.dedicatedIpAutoWarmupEnabled = false
            self.details = nil
            self.enforcementStatus = nil
            self.productionAccessEnabled = false
            self.sendQuota = nil
            self.sendingEnabled = false
            self.suppressionAttributes = nil
            self.vdmAttributes = nil
        }
    }
}

/// A list of details about the email-sending capabilities of your Amazon SES account in the current Amazon Web Services Region.
public struct GetAccountOutputResponse: Swift.Equatable {
    /// Indicates whether or not the automatic warm-up feature is enabled for dedicated IP addresses that are associated with your account.
    public var dedicatedIpAutoWarmupEnabled: Swift.Bool
    /// An object that defines your account details.
    public var details: SESv2ClientTypes.AccountDetails?
    /// The reputation status of your Amazon SES account. The status can be one of the following:
    ///
    /// * HEALTHY – There are no reputation-related issues that currently impact your account.
    ///
    /// * PROBATION – We've identified potential issues with your Amazon SES account. We're placing your account under review while you work on correcting these issues.
    ///
    /// * SHUTDOWN – Your account's ability to send email is currently paused because of an issue with the email sent from your account. When you correct the issue, you can contact us and request that your account's ability to send email is resumed.
    public var enforcementStatus: Swift.String?
    /// Indicates whether or not your account has production access in the current Amazon Web Services Region. If the value is false, then your account is in the sandbox. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1. If the value is true, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.
    public var productionAccessEnabled: Swift.Bool
    /// An object that contains information about the per-day and per-second sending limits for your Amazon SES account in the current Amazon Web Services Region.
    public var sendQuota: SESv2ClientTypes.SendQuota?
    /// Indicates whether or not email sending is enabled for your Amazon SES account in the current Amazon Web Services Region.
    public var sendingEnabled: Swift.Bool
    /// An object that contains information about the email address suppression preferences for your account in the current Amazon Web Services Region.
    public var suppressionAttributes: SESv2ClientTypes.SuppressionAttributes?
    /// The VDM attributes that apply to your Amazon SES account.
    public var vdmAttributes: SESv2ClientTypes.VdmAttributes?

    public init (
        dedicatedIpAutoWarmupEnabled: Swift.Bool = false,
        details: SESv2ClientTypes.AccountDetails? = nil,
        enforcementStatus: Swift.String? = nil,
        productionAccessEnabled: Swift.Bool = false,
        sendQuota: SESv2ClientTypes.SendQuota? = nil,
        sendingEnabled: Swift.Bool = false,
        suppressionAttributes: SESv2ClientTypes.SuppressionAttributes? = nil,
        vdmAttributes: SESv2ClientTypes.VdmAttributes? = nil
    )
    {
        self.dedicatedIpAutoWarmupEnabled = dedicatedIpAutoWarmupEnabled
        self.details = details
        self.enforcementStatus = enforcementStatus
        self.productionAccessEnabled = productionAccessEnabled
        self.sendQuota = sendQuota
        self.sendingEnabled = sendingEnabled
        self.suppressionAttributes = suppressionAttributes
        self.vdmAttributes = vdmAttributes
    }
}

struct GetAccountOutputResponseBody: Swift.Equatable {
    let dedicatedIpAutoWarmupEnabled: Swift.Bool
    let enforcementStatus: Swift.String?
    let productionAccessEnabled: Swift.Bool
    let sendQuota: SESv2ClientTypes.SendQuota?
    let sendingEnabled: Swift.Bool
    let suppressionAttributes: SESv2ClientTypes.SuppressionAttributes?
    let details: SESv2ClientTypes.AccountDetails?
    let vdmAttributes: SESv2ClientTypes.VdmAttributes?
}

extension GetAccountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedIpAutoWarmupEnabled = "DedicatedIpAutoWarmupEnabled"
        case details = "Details"
        case enforcementStatus = "EnforcementStatus"
        case productionAccessEnabled = "ProductionAccessEnabled"
        case sendQuota = "SendQuota"
        case sendingEnabled = "SendingEnabled"
        case suppressionAttributes = "SuppressionAttributes"
        case vdmAttributes = "VdmAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dedicatedIpAutoWarmupEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dedicatedIpAutoWarmupEnabled) ?? false
        dedicatedIpAutoWarmupEnabled = dedicatedIpAutoWarmupEnabledDecoded
        let enforcementStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enforcementStatus)
        enforcementStatus = enforcementStatusDecoded
        let productionAccessEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .productionAccessEnabled) ?? false
        productionAccessEnabled = productionAccessEnabledDecoded
        let sendQuotaDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SendQuota.self, forKey: .sendQuota)
        sendQuota = sendQuotaDecoded
        let sendingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendingEnabled) ?? false
        sendingEnabled = sendingEnabledDecoded
        let suppressionAttributesDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SuppressionAttributes.self, forKey: .suppressionAttributes)
        suppressionAttributes = suppressionAttributesDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.AccountDetails.self, forKey: .details)
        details = detailsDecoded
        let vdmAttributesDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.VdmAttributes.self, forKey: .vdmAttributes)
        vdmAttributes = vdmAttributesDecoded
    }
}

extension GetBlacklistReportsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let blacklistItemNames = blacklistItemNames else {
                let message = "Creating a URL Query Item failed. blacklistItemNames is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            blacklistItemNames.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "BlacklistItemNames".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            return items
        }
    }
}

extension GetBlacklistReportsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/deliverability-dashboard/blacklist-report"
    }
}

/// A request to retrieve a list of the blacklists that your dedicated IP addresses appear on.
public struct GetBlacklistReportsInput: Swift.Equatable {
    /// A list of IP addresses that you want to retrieve blacklist information about. You can only specify the dedicated IP addresses that you use to send email using Amazon SES or Amazon Pinpoint.
    /// This member is required.
    public var blacklistItemNames: [Swift.String]?

    public init (
        blacklistItemNames: [Swift.String]? = nil
    )
    {
        self.blacklistItemNames = blacklistItemNames
    }
}

struct GetBlacklistReportsInputBody: Swift.Equatable {
}

extension GetBlacklistReportsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBlacklistReportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBlacklistReportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetBlacklistReportsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBlacklistReportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetBlacklistReportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blacklistReport = output.blacklistReport
        } else {
            self.blacklistReport = nil
        }
    }
}

/// An object that contains information about blacklist events.
public struct GetBlacklistReportsOutputResponse: Swift.Equatable {
    /// An object that contains information about a blacklist that one of your dedicated IP addresses appears on.
    /// This member is required.
    public var blacklistReport: [Swift.String:[SESv2ClientTypes.BlacklistEntry]]?

    public init (
        blacklistReport: [Swift.String:[SESv2ClientTypes.BlacklistEntry]]? = nil
    )
    {
        self.blacklistReport = blacklistReport
    }
}

struct GetBlacklistReportsOutputResponseBody: Swift.Equatable {
    let blacklistReport: [Swift.String:[SESv2ClientTypes.BlacklistEntry]]?
}

extension GetBlacklistReportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blacklistReport = "BlacklistReport"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blacklistReportContainer = try containerValues.decodeIfPresent([Swift.String: [SESv2ClientTypes.BlacklistEntry?]?].self, forKey: .blacklistReport)
        var blacklistReportDecoded0: [Swift.String:[SESv2ClientTypes.BlacklistEntry]]? = nil
        if let blacklistReportContainer = blacklistReportContainer {
            blacklistReportDecoded0 = [Swift.String:[SESv2ClientTypes.BlacklistEntry]]()
            for (key0, blacklistentries0) in blacklistReportContainer {
                var blacklistentries0Decoded0: [SESv2ClientTypes.BlacklistEntry]? = nil
                if let blacklistentries0 = blacklistentries0 {
                    blacklistentries0Decoded0 = [SESv2ClientTypes.BlacklistEntry]()
                    for structure1 in blacklistentries0 {
                        if let structure1 = structure1 {
                            blacklistentries0Decoded0?.append(structure1)
                        }
                    }
                }
                blacklistReportDecoded0?[key0] = blacklistentries0Decoded0
            }
        }
        blacklistReport = blacklistReportDecoded0
    }
}

extension GetConfigurationSetEventDestinationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations"
    }
}

/// A request to obtain information about the event destinations for a configuration set.
public struct GetConfigurationSetEventDestinationsInput: Swift.Equatable {
    /// The name of the configuration set that contains the event destination.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

struct GetConfigurationSetEventDestinationsInputBody: Swift.Equatable {
}

extension GetConfigurationSetEventDestinationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetConfigurationSetEventDestinationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetConfigurationSetEventDestinationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetConfigurationSetEventDestinationsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetConfigurationSetEventDestinationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetConfigurationSetEventDestinationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.eventDestinations = output.eventDestinations
        } else {
            self.eventDestinations = nil
        }
    }
}

/// Information about an event destination for a configuration set.
public struct GetConfigurationSetEventDestinationsOutputResponse: Swift.Equatable {
    /// An array that includes all of the events destinations that have been configured for the configuration set.
    public var eventDestinations: [SESv2ClientTypes.EventDestination]?

    public init (
        eventDestinations: [SESv2ClientTypes.EventDestination]? = nil
    )
    {
        self.eventDestinations = eventDestinations
    }
}

struct GetConfigurationSetEventDestinationsOutputResponseBody: Swift.Equatable {
    let eventDestinations: [SESv2ClientTypes.EventDestination]?
}

extension GetConfigurationSetEventDestinationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestinations = "EventDestinations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventDestinationsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.EventDestination?].self, forKey: .eventDestinations)
        var eventDestinationsDecoded0:[SESv2ClientTypes.EventDestination]? = nil
        if let eventDestinationsContainer = eventDestinationsContainer {
            eventDestinationsDecoded0 = [SESv2ClientTypes.EventDestination]()
            for structure0 in eventDestinationsContainer {
                if let structure0 = structure0 {
                    eventDestinationsDecoded0?.append(structure0)
                }
            }
        }
        eventDestinations = eventDestinationsDecoded0
    }
}

extension GetConfigurationSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())"
    }
}

/// A request to obtain information about a configuration set.
public struct GetConfigurationSetInput: Swift.Equatable {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

struct GetConfigurationSetInputBody: Swift.Equatable {
}

extension GetConfigurationSetInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetConfigurationSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.configurationSetName
            self.deliveryOptions = output.deliveryOptions
            self.reputationOptions = output.reputationOptions
            self.sendingOptions = output.sendingOptions
            self.suppressionOptions = output.suppressionOptions
            self.tags = output.tags
            self.trackingOptions = output.trackingOptions
            self.vdmOptions = output.vdmOptions
        } else {
            self.configurationSetName = nil
            self.deliveryOptions = nil
            self.reputationOptions = nil
            self.sendingOptions = nil
            self.suppressionOptions = nil
            self.tags = nil
            self.trackingOptions = nil
            self.vdmOptions = nil
        }
    }
}

/// Information about a configuration set.
public struct GetConfigurationSetOutputResponse: Swift.Equatable {
    /// The name of the configuration set.
    public var configurationSetName: Swift.String?
    /// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
    public var deliveryOptions: SESv2ClientTypes.DeliveryOptions?
    /// An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set.
    public var reputationOptions: SESv2ClientTypes.ReputationOptions?
    /// An object that defines whether or not Amazon SES can send email that you send using the configuration set.
    public var sendingOptions: SESv2ClientTypes.SendingOptions?
    /// An object that contains information about the suppression list preferences for your account.
    public var suppressionOptions: SESv2ClientTypes.SuppressionOptions?
    /// An array of objects that define the tags (keys and values) that are associated with the configuration set.
    public var tags: [SESv2ClientTypes.Tag]?
    /// An object that defines the open and click tracking options for emails that you send using the configuration set.
    public var trackingOptions: SESv2ClientTypes.TrackingOptions?
    /// An object that contains information about the VDM preferences for your configuration set.
    public var vdmOptions: SESv2ClientTypes.VdmOptions?

    public init (
        configurationSetName: Swift.String? = nil,
        deliveryOptions: SESv2ClientTypes.DeliveryOptions? = nil,
        reputationOptions: SESv2ClientTypes.ReputationOptions? = nil,
        sendingOptions: SESv2ClientTypes.SendingOptions? = nil,
        suppressionOptions: SESv2ClientTypes.SuppressionOptions? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil,
        trackingOptions: SESv2ClientTypes.TrackingOptions? = nil,
        vdmOptions: SESv2ClientTypes.VdmOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.deliveryOptions = deliveryOptions
        self.reputationOptions = reputationOptions
        self.sendingOptions = sendingOptions
        self.suppressionOptions = suppressionOptions
        self.tags = tags
        self.trackingOptions = trackingOptions
        self.vdmOptions = vdmOptions
    }
}

struct GetConfigurationSetOutputResponseBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let trackingOptions: SESv2ClientTypes.TrackingOptions?
    let deliveryOptions: SESv2ClientTypes.DeliveryOptions?
    let reputationOptions: SESv2ClientTypes.ReputationOptions?
    let sendingOptions: SESv2ClientTypes.SendingOptions?
    let tags: [SESv2ClientTypes.Tag]?
    let suppressionOptions: SESv2ClientTypes.SuppressionOptions?
    let vdmOptions: SESv2ClientTypes.VdmOptions?
}

extension GetConfigurationSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case deliveryOptions = "DeliveryOptions"
        case reputationOptions = "ReputationOptions"
        case sendingOptions = "SendingOptions"
        case suppressionOptions = "SuppressionOptions"
        case tags = "Tags"
        case trackingOptions = "TrackingOptions"
        case vdmOptions = "VdmOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let trackingOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.TrackingOptions.self, forKey: .trackingOptions)
        trackingOptions = trackingOptionsDecoded
        let deliveryOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DeliveryOptions.self, forKey: .deliveryOptions)
        deliveryOptions = deliveryOptionsDecoded
        let reputationOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ReputationOptions.self, forKey: .reputationOptions)
        reputationOptions = reputationOptionsDecoded
        let sendingOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SendingOptions.self, forKey: .sendingOptions)
        sendingOptions = sendingOptionsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SESv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SESv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let suppressionOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SuppressionOptions.self, forKey: .suppressionOptions)
        suppressionOptions = suppressionOptionsDecoded
        let vdmOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.VdmOptions.self, forKey: .vdmOptions)
        vdmOptions = vdmOptionsDecoded
    }
}

extension GetContactInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let contactListName = contactListName else {
            return nil
        }
        guard let emailAddress = emailAddress else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())/contacts/\(emailAddress.urlPercentEncoding())"
    }
}

public struct GetContactInput: Swift.Equatable {
    /// The name of the contact list to which the contact belongs.
    /// This member is required.
    public var contactListName: Swift.String?
    /// The contact's email addres.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init (
        contactListName: Swift.String? = nil,
        emailAddress: Swift.String? = nil
    )
    {
        self.contactListName = contactListName
        self.emailAddress = emailAddress
    }
}

struct GetContactInputBody: Swift.Equatable {
}

extension GetContactInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContactListInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let contactListName = contactListName else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())"
    }
}

public struct GetContactListInput: Swift.Equatable {
    /// The name of the contact list.
    /// This member is required.
    public var contactListName: Swift.String?

    public init (
        contactListName: Swift.String? = nil
    )
    {
        self.contactListName = contactListName
    }
}

struct GetContactListInputBody: Swift.Equatable {
}

extension GetContactListInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContactListOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContactListOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetContactListOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContactListOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetContactListOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contactListName = output.contactListName
            self.createdTimestamp = output.createdTimestamp
            self.description = output.description
            self.lastUpdatedTimestamp = output.lastUpdatedTimestamp
            self.tags = output.tags
            self.topics = output.topics
        } else {
            self.contactListName = nil
            self.createdTimestamp = nil
            self.description = nil
            self.lastUpdatedTimestamp = nil
            self.tags = nil
            self.topics = nil
        }
    }
}

public struct GetContactListOutputResponse: Swift.Equatable {
    /// The name of the contact list.
    public var contactListName: Swift.String?
    /// A timestamp noting when the contact list was created.
    public var createdTimestamp: ClientRuntime.Date?
    /// A description of what the contact list is about.
    public var description: Swift.String?
    /// A timestamp noting the last time the contact list was updated.
    public var lastUpdatedTimestamp: ClientRuntime.Date?
    /// The tags associated with a contact list.
    public var tags: [SESv2ClientTypes.Tag]?
    /// An interest group, theme, or label within a list. A contact list can have multiple topics.
    public var topics: [SESv2ClientTypes.Topic]?

    public init (
        contactListName: Swift.String? = nil,
        createdTimestamp: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        lastUpdatedTimestamp: ClientRuntime.Date? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil,
        topics: [SESv2ClientTypes.Topic]? = nil
    )
    {
        self.contactListName = contactListName
        self.createdTimestamp = createdTimestamp
        self.description = description
        self.lastUpdatedTimestamp = lastUpdatedTimestamp
        self.tags = tags
        self.topics = topics
    }
}

struct GetContactListOutputResponseBody: Swift.Equatable {
    let contactListName: Swift.String?
    let topics: [SESv2ClientTypes.Topic]?
    let description: Swift.String?
    let createdTimestamp: ClientRuntime.Date?
    let lastUpdatedTimestamp: ClientRuntime.Date?
    let tags: [SESv2ClientTypes.Tag]?
}

extension GetContactListOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListName = "ContactListName"
        case createdTimestamp = "CreatedTimestamp"
        case description = "Description"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case tags = "Tags"
        case topics = "Topics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactListName)
        contactListName = contactListNameDecoded
        let topicsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Topic?].self, forKey: .topics)
        var topicsDecoded0:[SESv2ClientTypes.Topic]? = nil
        if let topicsContainer = topicsContainer {
            topicsDecoded0 = [SESv2ClientTypes.Topic]()
            for structure0 in topicsContainer {
                if let structure0 = structure0 {
                    topicsDecoded0?.append(structure0)
                }
            }
        }
        topics = topicsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SESv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SESv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension GetContactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetContactOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetContactOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.attributesData = output.attributesData
            self.contactListName = output.contactListName
            self.createdTimestamp = output.createdTimestamp
            self.emailAddress = output.emailAddress
            self.lastUpdatedTimestamp = output.lastUpdatedTimestamp
            self.topicDefaultPreferences = output.topicDefaultPreferences
            self.topicPreferences = output.topicPreferences
            self.unsubscribeAll = output.unsubscribeAll
        } else {
            self.attributesData = nil
            self.contactListName = nil
            self.createdTimestamp = nil
            self.emailAddress = nil
            self.lastUpdatedTimestamp = nil
            self.topicDefaultPreferences = nil
            self.topicPreferences = nil
            self.unsubscribeAll = false
        }
    }
}

public struct GetContactOutputResponse: Swift.Equatable {
    /// The attribute data attached to a contact.
    public var attributesData: Swift.String?
    /// The name of the contact list to which the contact belongs.
    public var contactListName: Swift.String?
    /// A timestamp noting when the contact was created.
    public var createdTimestamp: ClientRuntime.Date?
    /// The contact's email addres.
    public var emailAddress: Swift.String?
    /// A timestamp noting the last time the contact's information was updated.
    public var lastUpdatedTimestamp: ClientRuntime.Date?
    /// The default topic preferences applied to the contact.
    public var topicDefaultPreferences: [SESv2ClientTypes.TopicPreference]?
    /// The contact's preference for being opted-in to or opted-out of a topic.>
    public var topicPreferences: [SESv2ClientTypes.TopicPreference]?
    /// A boolean value status noting if the contact is unsubscribed from all contact list topics.
    public var unsubscribeAll: Swift.Bool

    public init (
        attributesData: Swift.String? = nil,
        contactListName: Swift.String? = nil,
        createdTimestamp: ClientRuntime.Date? = nil,
        emailAddress: Swift.String? = nil,
        lastUpdatedTimestamp: ClientRuntime.Date? = nil,
        topicDefaultPreferences: [SESv2ClientTypes.TopicPreference]? = nil,
        topicPreferences: [SESv2ClientTypes.TopicPreference]? = nil,
        unsubscribeAll: Swift.Bool = false
    )
    {
        self.attributesData = attributesData
        self.contactListName = contactListName
        self.createdTimestamp = createdTimestamp
        self.emailAddress = emailAddress
        self.lastUpdatedTimestamp = lastUpdatedTimestamp
        self.topicDefaultPreferences = topicDefaultPreferences
        self.topicPreferences = topicPreferences
        self.unsubscribeAll = unsubscribeAll
    }
}

struct GetContactOutputResponseBody: Swift.Equatable {
    let contactListName: Swift.String?
    let emailAddress: Swift.String?
    let topicPreferences: [SESv2ClientTypes.TopicPreference]?
    let topicDefaultPreferences: [SESv2ClientTypes.TopicPreference]?
    let unsubscribeAll: Swift.Bool
    let attributesData: Swift.String?
    let createdTimestamp: ClientRuntime.Date?
    let lastUpdatedTimestamp: ClientRuntime.Date?
}

extension GetContactOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesData = "AttributesData"
        case contactListName = "ContactListName"
        case createdTimestamp = "CreatedTimestamp"
        case emailAddress = "EmailAddress"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case topicDefaultPreferences = "TopicDefaultPreferences"
        case topicPreferences = "TopicPreferences"
        case unsubscribeAll = "UnsubscribeAll"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactListName)
        contactListName = contactListNameDecoded
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let topicPreferencesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.TopicPreference?].self, forKey: .topicPreferences)
        var topicPreferencesDecoded0:[SESv2ClientTypes.TopicPreference]? = nil
        if let topicPreferencesContainer = topicPreferencesContainer {
            topicPreferencesDecoded0 = [SESv2ClientTypes.TopicPreference]()
            for structure0 in topicPreferencesContainer {
                if let structure0 = structure0 {
                    topicPreferencesDecoded0?.append(structure0)
                }
            }
        }
        topicPreferences = topicPreferencesDecoded0
        let topicDefaultPreferencesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.TopicPreference?].self, forKey: .topicDefaultPreferences)
        var topicDefaultPreferencesDecoded0:[SESv2ClientTypes.TopicPreference]? = nil
        if let topicDefaultPreferencesContainer = topicDefaultPreferencesContainer {
            topicDefaultPreferencesDecoded0 = [SESv2ClientTypes.TopicPreference]()
            for structure0 in topicDefaultPreferencesContainer {
                if let structure0 = structure0 {
                    topicDefaultPreferencesDecoded0?.append(structure0)
                }
            }
        }
        topicDefaultPreferences = topicDefaultPreferencesDecoded0
        let unsubscribeAllDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unsubscribeAll) ?? false
        unsubscribeAll = unsubscribeAllDecoded
        let attributesDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributesData)
        attributesData = attributesDataDecoded
        let createdTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
    }
}

extension GetCustomVerificationEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v2/email/custom-verification-email-templates/\(templateName.urlPercentEncoding())"
    }
}

/// Represents a request to retrieve an existing custom verification email template.
public struct GetCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The name of the custom verification email template that you want to retrieve.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct GetCustomVerificationEmailTemplateInputBody: Swift.Equatable {
}

extension GetCustomVerificationEmailTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetCustomVerificationEmailTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failureRedirectionURL = output.failureRedirectionURL
            self.fromEmailAddress = output.fromEmailAddress
            self.successRedirectionURL = output.successRedirectionURL
            self.templateContent = output.templateContent
            self.templateName = output.templateName
            self.templateSubject = output.templateSubject
        } else {
            self.failureRedirectionURL = nil
            self.fromEmailAddress = nil
            self.successRedirectionURL = nil
            self.templateContent = nil
            self.templateName = nil
            self.templateSubject = nil
        }
    }
}

/// The following elements are returned by the service.
public struct GetCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {
    /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    public var failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    public var fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    public var successRedirectionURL: Swift.String?
    /// The content of the custom verification email.
    public var templateContent: Swift.String?
    /// The name of the custom verification email template.
    public var templateName: Swift.String?
    /// The subject line of the custom verification email.
    public var templateSubject: Swift.String?

    public init (
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

struct GetCustomVerificationEmailTemplateOutputResponseBody: Swift.Equatable {
    let templateName: Swift.String?
    let fromEmailAddress: Swift.String?
    let templateSubject: Swift.String?
    let templateContent: Swift.String?
    let successRedirectionURL: Swift.String?
    let failureRedirectionURL: Swift.String?
}

extension GetCustomVerificationEmailTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateContent)
        templateContent = templateContentDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

extension GetDedicatedIpInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let ip = ip else {
            return nil
        }
        return "/v2/email/dedicated-ips/\(ip.urlPercentEncoding())"
    }
}

/// A request to obtain more information about a dedicated IP address.
public struct GetDedicatedIpInput: Swift.Equatable {
    /// The IP address that you want to obtain more information about. The value you specify has to be a dedicated IP address that's assocaited with your Amazon Web Services account.
    /// This member is required.
    public var ip: Swift.String?

    public init (
        ip: Swift.String? = nil
    )
    {
        self.ip = ip
    }
}

struct GetDedicatedIpInputBody: Swift.Equatable {
}

extension GetDedicatedIpInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDedicatedIpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDedicatedIpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDedicatedIpOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDedicatedIpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDedicatedIpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dedicatedIp = output.dedicatedIp
        } else {
            self.dedicatedIp = nil
        }
    }
}

/// Information about a dedicated IP address.
public struct GetDedicatedIpOutputResponse: Swift.Equatable {
    /// An object that contains information about a dedicated IP address.
    public var dedicatedIp: SESv2ClientTypes.DedicatedIp?

    public init (
        dedicatedIp: SESv2ClientTypes.DedicatedIp? = nil
    )
    {
        self.dedicatedIp = dedicatedIp
    }
}

struct GetDedicatedIpOutputResponseBody: Swift.Equatable {
    let dedicatedIp: SESv2ClientTypes.DedicatedIp?
}

extension GetDedicatedIpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedIp = "DedicatedIp"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dedicatedIpDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DedicatedIp.self, forKey: .dedicatedIp)
        dedicatedIp = dedicatedIpDecoded
    }
}

extension GetDedicatedIpPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let poolName = poolName else {
            return nil
        }
        return "/v2/email/dedicated-ip-pools/\(poolName.urlPercentEncoding())"
    }
}

/// A request to obtain more information about a dedicated IP pool.
public struct GetDedicatedIpPoolInput: Swift.Equatable {
    /// The name of the dedicated IP pool to retrieve.
    /// This member is required.
    public var poolName: Swift.String?

    public init (
        poolName: Swift.String? = nil
    )
    {
        self.poolName = poolName
    }
}

struct GetDedicatedIpPoolInputBody: Swift.Equatable {
}

extension GetDedicatedIpPoolInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDedicatedIpPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDedicatedIpPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDedicatedIpPoolOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDedicatedIpPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDedicatedIpPoolOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dedicatedIpPool = output.dedicatedIpPool
        } else {
            self.dedicatedIpPool = nil
        }
    }
}

/// The following element is returned by the service.
public struct GetDedicatedIpPoolOutputResponse: Swift.Equatable {
    /// An object that contains information about a dedicated IP pool.
    public var dedicatedIpPool: SESv2ClientTypes.DedicatedIpPool?

    public init (
        dedicatedIpPool: SESv2ClientTypes.DedicatedIpPool? = nil
    )
    {
        self.dedicatedIpPool = dedicatedIpPool
    }
}

struct GetDedicatedIpPoolOutputResponseBody: Swift.Equatable {
    let dedicatedIpPool: SESv2ClientTypes.DedicatedIpPool?
}

extension GetDedicatedIpPoolOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedIpPool = "DedicatedIpPool"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dedicatedIpPoolDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DedicatedIpPool.self, forKey: .dedicatedIpPool)
        dedicatedIpPool = dedicatedIpPoolDecoded
    }
}

extension GetDedicatedIpsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let poolName = poolName {
                let poolNameQueryItem = ClientRuntime.URLQueryItem(name: "PoolName".urlPercentEncoding(), value: Swift.String(poolName).urlPercentEncoding())
                items.append(poolNameQueryItem)
            }
            return items
        }
    }
}

extension GetDedicatedIpsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/dedicated-ips"
    }
}

/// A request to obtain more information about dedicated IP pools.
public struct GetDedicatedIpsInput: Swift.Equatable {
    /// A token returned from a previous call to GetDedicatedIps to indicate the position of the dedicated IP pool in the list of IP pools.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to GetDedicatedIpsRequest. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?
    /// The name of the IP pool that the dedicated IP address is associated with.
    public var poolName: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        poolName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.poolName = poolName
    }
}

struct GetDedicatedIpsInputBody: Swift.Equatable {
}

extension GetDedicatedIpsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDedicatedIpsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDedicatedIpsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDedicatedIpsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDedicatedIpsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDedicatedIpsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dedicatedIps = output.dedicatedIps
            self.nextToken = output.nextToken
        } else {
            self.dedicatedIps = nil
            self.nextToken = nil
        }
    }
}

/// Information about the dedicated IP addresses that are associated with your Amazon Web Services account.
public struct GetDedicatedIpsOutputResponse: Swift.Equatable {
    /// A list of dedicated IP addresses that are associated with your Amazon Web Services account.
    public var dedicatedIps: [SESv2ClientTypes.DedicatedIp]?
    /// A token that indicates that there are additional dedicated IP addresses to list. To view additional addresses, issue another request to GetDedicatedIps, passing this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init (
        dedicatedIps: [SESv2ClientTypes.DedicatedIp]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dedicatedIps = dedicatedIps
        self.nextToken = nextToken
    }
}

struct GetDedicatedIpsOutputResponseBody: Swift.Equatable {
    let dedicatedIps: [SESv2ClientTypes.DedicatedIp]?
    let nextToken: Swift.String?
}

extension GetDedicatedIpsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedIps = "DedicatedIps"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dedicatedIpsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.DedicatedIp?].self, forKey: .dedicatedIps)
        var dedicatedIpsDecoded0:[SESv2ClientTypes.DedicatedIp]? = nil
        if let dedicatedIpsContainer = dedicatedIpsContainer {
            dedicatedIpsDecoded0 = [SESv2ClientTypes.DedicatedIp]()
            for structure0 in dedicatedIpsContainer {
                if let structure0 = structure0 {
                    dedicatedIpsDecoded0?.append(structure0)
                }
            }
        }
        dedicatedIps = dedicatedIpsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetDeliverabilityDashboardOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/deliverability-dashboard"
    }
}

/// Retrieve information about the status of the Deliverability dashboard for your Amazon Web Services account. When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and other metrics for your domains. You also gain the ability to perform predictive inbox placement tests. When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon SES and other Amazon Web Services services. For more information about the features and cost of a Deliverability dashboard subscription, see [Amazon Pinpoint Pricing](http://aws.amazon.com/pinpoint/pricing/).
public struct GetDeliverabilityDashboardOptionsInput: Swift.Equatable {

    public init () { }
}

struct GetDeliverabilityDashboardOptionsInputBody: Swift.Equatable {
}

extension GetDeliverabilityDashboardOptionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDeliverabilityDashboardOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeliverabilityDashboardOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDeliverabilityDashboardOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeliverabilityDashboardOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDeliverabilityDashboardOptionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accountStatus = output.accountStatus
            self.activeSubscribedDomains = output.activeSubscribedDomains
            self.dashboardEnabled = output.dashboardEnabled
            self.pendingExpirationSubscribedDomains = output.pendingExpirationSubscribedDomains
            self.subscriptionExpiryDate = output.subscriptionExpiryDate
        } else {
            self.accountStatus = nil
            self.activeSubscribedDomains = nil
            self.dashboardEnabled = false
            self.pendingExpirationSubscribedDomains = nil
            self.subscriptionExpiryDate = nil
        }
    }
}

/// An object that shows the status of the Deliverability dashboard.
public struct GetDeliverabilityDashboardOptionsOutputResponse: Swift.Equatable {
    /// The current status of your Deliverability dashboard subscription. If this value is PENDING_EXPIRATION, your subscription is scheduled to expire at the end of the current calendar month.
    public var accountStatus: SESv2ClientTypes.DeliverabilityDashboardAccountStatus?
    /// An array of objects, one for each verified domain that you use to send email and currently has an active Deliverability dashboard subscription that isn’t scheduled to expire at the end of the current calendar month.
    public var activeSubscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]?
    /// Specifies whether the Deliverability dashboard is enabled. If this value is true, the dashboard is enabled.
    /// This member is required.
    public var dashboardEnabled: Swift.Bool
    /// An array of objects, one for each verified domain that you use to send email and currently has an active Deliverability dashboard subscription that's scheduled to expire at the end of the current calendar month.
    public var pendingExpirationSubscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]?
    /// The date when your current subscription to the Deliverability dashboard is scheduled to expire, if your subscription is scheduled to expire at the end of the current calendar month. This value is null if you have an active subscription that isn’t due to expire at the end of the month.
    public var subscriptionExpiryDate: ClientRuntime.Date?

    public init (
        accountStatus: SESv2ClientTypes.DeliverabilityDashboardAccountStatus? = nil,
        activeSubscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]? = nil,
        dashboardEnabled: Swift.Bool = false,
        pendingExpirationSubscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]? = nil,
        subscriptionExpiryDate: ClientRuntime.Date? = nil
    )
    {
        self.accountStatus = accountStatus
        self.activeSubscribedDomains = activeSubscribedDomains
        self.dashboardEnabled = dashboardEnabled
        self.pendingExpirationSubscribedDomains = pendingExpirationSubscribedDomains
        self.subscriptionExpiryDate = subscriptionExpiryDate
    }
}

struct GetDeliverabilityDashboardOptionsOutputResponseBody: Swift.Equatable {
    let dashboardEnabled: Swift.Bool
    let subscriptionExpiryDate: ClientRuntime.Date?
    let accountStatus: SESv2ClientTypes.DeliverabilityDashboardAccountStatus?
    let activeSubscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]?
    let pendingExpirationSubscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]?
}

extension GetDeliverabilityDashboardOptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountStatus = "AccountStatus"
        case activeSubscribedDomains = "ActiveSubscribedDomains"
        case dashboardEnabled = "DashboardEnabled"
        case pendingExpirationSubscribedDomains = "PendingExpirationSubscribedDomains"
        case subscriptionExpiryDate = "SubscriptionExpiryDate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dashboardEnabled) ?? false
        dashboardEnabled = dashboardEnabledDecoded
        let subscriptionExpiryDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .subscriptionExpiryDate)
        subscriptionExpiryDate = subscriptionExpiryDateDecoded
        let accountStatusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DeliverabilityDashboardAccountStatus.self, forKey: .accountStatus)
        accountStatus = accountStatusDecoded
        let activeSubscribedDomainsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.DomainDeliverabilityTrackingOption?].self, forKey: .activeSubscribedDomains)
        var activeSubscribedDomainsDecoded0:[SESv2ClientTypes.DomainDeliverabilityTrackingOption]? = nil
        if let activeSubscribedDomainsContainer = activeSubscribedDomainsContainer {
            activeSubscribedDomainsDecoded0 = [SESv2ClientTypes.DomainDeliverabilityTrackingOption]()
            for structure0 in activeSubscribedDomainsContainer {
                if let structure0 = structure0 {
                    activeSubscribedDomainsDecoded0?.append(structure0)
                }
            }
        }
        activeSubscribedDomains = activeSubscribedDomainsDecoded0
        let pendingExpirationSubscribedDomainsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.DomainDeliverabilityTrackingOption?].self, forKey: .pendingExpirationSubscribedDomains)
        var pendingExpirationSubscribedDomainsDecoded0:[SESv2ClientTypes.DomainDeliverabilityTrackingOption]? = nil
        if let pendingExpirationSubscribedDomainsContainer = pendingExpirationSubscribedDomainsContainer {
            pendingExpirationSubscribedDomainsDecoded0 = [SESv2ClientTypes.DomainDeliverabilityTrackingOption]()
            for structure0 in pendingExpirationSubscribedDomainsContainer {
                if let structure0 = structure0 {
                    pendingExpirationSubscribedDomainsDecoded0?.append(structure0)
                }
            }
        }
        pendingExpirationSubscribedDomains = pendingExpirationSubscribedDomainsDecoded0
    }
}

extension GetDeliverabilityTestReportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let reportId = reportId else {
            return nil
        }
        return "/v2/email/deliverability-dashboard/test-reports/\(reportId.urlPercentEncoding())"
    }
}

/// A request to retrieve the results of a predictive inbox placement test.
public struct GetDeliverabilityTestReportInput: Swift.Equatable {
    /// A unique string that identifies the predictive inbox placement test.
    /// This member is required.
    public var reportId: Swift.String?

    public init (
        reportId: Swift.String? = nil
    )
    {
        self.reportId = reportId
    }
}

struct GetDeliverabilityTestReportInputBody: Swift.Equatable {
}

extension GetDeliverabilityTestReportInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDeliverabilityTestReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeliverabilityTestReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDeliverabilityTestReportOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeliverabilityTestReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDeliverabilityTestReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliverabilityTestReport = output.deliverabilityTestReport
            self.ispPlacements = output.ispPlacements
            self.message = output.message
            self.overallPlacement = output.overallPlacement
            self.tags = output.tags
        } else {
            self.deliverabilityTestReport = nil
            self.ispPlacements = nil
            self.message = nil
            self.overallPlacement = nil
            self.tags = nil
        }
    }
}

/// The results of the predictive inbox placement test.
public struct GetDeliverabilityTestReportOutputResponse: Swift.Equatable {
    /// An object that contains the results of the predictive inbox placement test.
    /// This member is required.
    public var deliverabilityTestReport: SESv2ClientTypes.DeliverabilityTestReport?
    /// An object that describes how the test email was handled by several email providers, including Gmail, Hotmail, Yahoo, AOL, and others.
    /// This member is required.
    public var ispPlacements: [SESv2ClientTypes.IspPlacement]?
    /// An object that contains the message that you sent when you performed this predictive inbox placement test.
    public var message: Swift.String?
    /// An object that specifies how many test messages that were sent during the predictive inbox placement test were delivered to recipients' inboxes, how many were sent to recipients' spam folders, and how many weren't delivered.
    /// This member is required.
    public var overallPlacement: SESv2ClientTypes.PlacementStatistics?
    /// An array of objects that define the tags (keys and values) that are associated with the predictive inbox placement test.
    public var tags: [SESv2ClientTypes.Tag]?

    public init (
        deliverabilityTestReport: SESv2ClientTypes.DeliverabilityTestReport? = nil,
        ispPlacements: [SESv2ClientTypes.IspPlacement]? = nil,
        message: Swift.String? = nil,
        overallPlacement: SESv2ClientTypes.PlacementStatistics? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil
    )
    {
        self.deliverabilityTestReport = deliverabilityTestReport
        self.ispPlacements = ispPlacements
        self.message = message
        self.overallPlacement = overallPlacement
        self.tags = tags
    }
}

struct GetDeliverabilityTestReportOutputResponseBody: Swift.Equatable {
    let deliverabilityTestReport: SESv2ClientTypes.DeliverabilityTestReport?
    let overallPlacement: SESv2ClientTypes.PlacementStatistics?
    let ispPlacements: [SESv2ClientTypes.IspPlacement]?
    let message: Swift.String?
    let tags: [SESv2ClientTypes.Tag]?
}

extension GetDeliverabilityTestReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliverabilityTestReport = "DeliverabilityTestReport"
        case ispPlacements = "IspPlacements"
        case message = "Message"
        case overallPlacement = "OverallPlacement"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliverabilityTestReportDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DeliverabilityTestReport.self, forKey: .deliverabilityTestReport)
        deliverabilityTestReport = deliverabilityTestReportDecoded
        let overallPlacementDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.PlacementStatistics.self, forKey: .overallPlacement)
        overallPlacement = overallPlacementDecoded
        let ispPlacementsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.IspPlacement?].self, forKey: .ispPlacements)
        var ispPlacementsDecoded0:[SESv2ClientTypes.IspPlacement]? = nil
        if let ispPlacementsContainer = ispPlacementsContainer {
            ispPlacementsDecoded0 = [SESv2ClientTypes.IspPlacement]()
            for structure0 in ispPlacementsContainer {
                if let structure0 = structure0 {
                    ispPlacementsDecoded0?.append(structure0)
                }
            }
        }
        ispPlacements = ispPlacementsDecoded0
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SESv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SESv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension GetDomainDeliverabilityCampaignInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let campaignId = campaignId else {
            return nil
        }
        return "/v2/email/deliverability-dashboard/campaigns/\(campaignId.urlPercentEncoding())"
    }
}

/// Retrieve all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (PutDeliverabilityDashboardOption operation).
public struct GetDomainDeliverabilityCampaignInput: Swift.Equatable {
    /// The unique identifier for the campaign. The Deliverability dashboard automatically generates and assigns this identifier to a campaign.
    /// This member is required.
    public var campaignId: Swift.String?

    public init (
        campaignId: Swift.String? = nil
    )
    {
        self.campaignId = campaignId
    }
}

struct GetDomainDeliverabilityCampaignInputBody: Swift.Equatable {
}

extension GetDomainDeliverabilityCampaignInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDomainDeliverabilityCampaignOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDomainDeliverabilityCampaignOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDomainDeliverabilityCampaignOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDomainDeliverabilityCampaignOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDomainDeliverabilityCampaignOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainDeliverabilityCampaign = output.domainDeliverabilityCampaign
        } else {
            self.domainDeliverabilityCampaign = nil
        }
    }
}

/// An object that contains all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for.
public struct GetDomainDeliverabilityCampaignOutputResponse: Swift.Equatable {
    /// An object that contains the deliverability data for the campaign.
    /// This member is required.
    public var domainDeliverabilityCampaign: SESv2ClientTypes.DomainDeliverabilityCampaign?

    public init (
        domainDeliverabilityCampaign: SESv2ClientTypes.DomainDeliverabilityCampaign? = nil
    )
    {
        self.domainDeliverabilityCampaign = domainDeliverabilityCampaign
    }
}

struct GetDomainDeliverabilityCampaignOutputResponseBody: Swift.Equatable {
    let domainDeliverabilityCampaign: SESv2ClientTypes.DomainDeliverabilityCampaign?
}

extension GetDomainDeliverabilityCampaignOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainDeliverabilityCampaign = "DomainDeliverabilityCampaign"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDeliverabilityCampaignDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DomainDeliverabilityCampaign.self, forKey: .domainDeliverabilityCampaign)
        domainDeliverabilityCampaign = domainDeliverabilityCampaignDecoded
    }
}

extension GetDomainStatisticsReportInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let startDate = startDate else {
                let message = "Creating a URL Query Item failed. startDate is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let startDateQueryItem = ClientRuntime.URLQueryItem(name: "StartDate".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: startDate)).urlPercentEncoding())
            items.append(startDateQueryItem)
            guard let endDate = endDate else {
                let message = "Creating a URL Query Item failed. endDate is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let endDateQueryItem = ClientRuntime.URLQueryItem(name: "EndDate".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: endDate)).urlPercentEncoding())
            items.append(endDateQueryItem)
            return items
        }
    }
}

extension GetDomainStatisticsReportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domain = domain else {
            return nil
        }
        return "/v2/email/deliverability-dashboard/statistics-report/\(domain.urlPercentEncoding())"
    }
}

/// A request to obtain deliverability metrics for a domain.
public struct GetDomainStatisticsReportInput: Swift.Equatable {
    /// The domain that you want to obtain deliverability metrics for.
    /// This member is required.
    public var domain: Swift.String?
    /// The last day (in Unix time) that you want to obtain domain deliverability metrics for. The EndDate that you specify has to be less than or equal to 30 days after the StartDate.
    /// This member is required.
    public var endDate: ClientRuntime.Date?
    /// The first day (in Unix time) that you want to obtain domain deliverability metrics for.
    /// This member is required.
    public var startDate: ClientRuntime.Date?

    public init (
        domain: Swift.String? = nil,
        endDate: ClientRuntime.Date? = nil,
        startDate: ClientRuntime.Date? = nil
    )
    {
        self.domain = domain
        self.endDate = endDate
        self.startDate = startDate
    }
}

struct GetDomainStatisticsReportInputBody: Swift.Equatable {
}

extension GetDomainStatisticsReportInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDomainStatisticsReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDomainStatisticsReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDomainStatisticsReportOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDomainStatisticsReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDomainStatisticsReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dailyVolumes = output.dailyVolumes
            self.overallVolume = output.overallVolume
        } else {
            self.dailyVolumes = nil
            self.overallVolume = nil
        }
    }
}

/// An object that includes statistics that are related to the domain that you specified.
public struct GetDomainStatisticsReportOutputResponse: Swift.Equatable {
    /// An object that contains deliverability metrics for the domain that you specified. This object contains data for each day, starting on the StartDate and ending on the EndDate.
    /// This member is required.
    public var dailyVolumes: [SESv2ClientTypes.DailyVolume]?
    /// An object that contains deliverability metrics for the domain that you specified. The data in this object is a summary of all of the data that was collected from the StartDate to the EndDate.
    /// This member is required.
    public var overallVolume: SESv2ClientTypes.OverallVolume?

    public init (
        dailyVolumes: [SESv2ClientTypes.DailyVolume]? = nil,
        overallVolume: SESv2ClientTypes.OverallVolume? = nil
    )
    {
        self.dailyVolumes = dailyVolumes
        self.overallVolume = overallVolume
    }
}

struct GetDomainStatisticsReportOutputResponseBody: Swift.Equatable {
    let overallVolume: SESv2ClientTypes.OverallVolume?
    let dailyVolumes: [SESv2ClientTypes.DailyVolume]?
}

extension GetDomainStatisticsReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dailyVolumes = "DailyVolumes"
        case overallVolume = "OverallVolume"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let overallVolumeDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.OverallVolume.self, forKey: .overallVolume)
        overallVolume = overallVolumeDecoded
        let dailyVolumesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.DailyVolume?].self, forKey: .dailyVolumes)
        var dailyVolumesDecoded0:[SESv2ClientTypes.DailyVolume]? = nil
        if let dailyVolumesContainer = dailyVolumesContainer {
            dailyVolumesDecoded0 = [SESv2ClientTypes.DailyVolume]()
            for structure0 in dailyVolumesContainer {
                if let structure0 = structure0 {
                    dailyVolumesDecoded0?.append(structure0)
                }
            }
        }
        dailyVolumes = dailyVolumesDecoded0
    }
}

extension GetEmailIdentityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())"
    }
}

/// A request to return details about an email identity.
public struct GetEmailIdentityInput: Swift.Equatable {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
    }
}

struct GetEmailIdentityInputBody: Swift.Equatable {
}

extension GetEmailIdentityInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetEmailIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEmailIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEmailIdentityOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEmailIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetEmailIdentityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.configurationSetName
            self.dkimAttributes = output.dkimAttributes
            self.feedbackForwardingStatus = output.feedbackForwardingStatus
            self.identityType = output.identityType
            self.mailFromAttributes = output.mailFromAttributes
            self.policies = output.policies
            self.tags = output.tags
            self.verificationStatus = output.verificationStatus
            self.verifiedForSendingStatus = output.verifiedForSendingStatus
        } else {
            self.configurationSetName = nil
            self.dkimAttributes = nil
            self.feedbackForwardingStatus = false
            self.identityType = nil
            self.mailFromAttributes = nil
            self.policies = nil
            self.tags = nil
            self.verificationStatus = nil
            self.verifiedForSendingStatus = false
        }
    }
}

/// Details about an email identity.
public struct GetEmailIdentityOutputResponse: Swift.Equatable {
    /// The configuration set used by default when sending from this identity.
    public var configurationSetName: Swift.String?
    /// An object that contains information about the DKIM attributes for the identity.
    public var dkimAttributes: SESv2ClientTypes.DkimAttributes?
    /// The feedback forwarding configuration for the identity. If the value is true, you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the Return-Path header of the original email. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).
    public var feedbackForwardingStatus: Swift.Bool
    /// The email identity type. Note: the MANAGED_DOMAIN identity type is not supported.
    public var identityType: SESv2ClientTypes.IdentityType?
    /// An object that contains information about the Mail-From attributes for the email identity.
    public var mailFromAttributes: SESv2ClientTypes.MailFromAttributes?
    /// A map of policy names to policies.
    public var policies: [Swift.String:Swift.String]?
    /// An array of objects that define the tags (keys and values) that are associated with the email identity.
    public var tags: [SESv2ClientTypes.Tag]?
    /// The verification status of the identity. The status can be one of the following:
    ///
    /// * PENDING – The verification process was initiated, but Amazon SES hasn't yet been able to verify the identity.
    ///
    /// * SUCCESS – The verification process completed successfully.
    ///
    /// * FAILED – The verification process failed.
    ///
    /// * TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES from determining the verification status of the identity.
    ///
    /// * NOT_STARTED – The verification process hasn't been initiated for the identity.
    public var verificationStatus: SESv2ClientTypes.VerificationStatus?
    /// Specifies whether or not the identity is verified. You can only send email from verified email addresses or domains. For more information about verifying identities, see the [Amazon Pinpoint User Guide](https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html).
    public var verifiedForSendingStatus: Swift.Bool

    public init (
        configurationSetName: Swift.String? = nil,
        dkimAttributes: SESv2ClientTypes.DkimAttributes? = nil,
        feedbackForwardingStatus: Swift.Bool = false,
        identityType: SESv2ClientTypes.IdentityType? = nil,
        mailFromAttributes: SESv2ClientTypes.MailFromAttributes? = nil,
        policies: [Swift.String:Swift.String]? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil,
        verificationStatus: SESv2ClientTypes.VerificationStatus? = nil,
        verifiedForSendingStatus: Swift.Bool = false
    )
    {
        self.configurationSetName = configurationSetName
        self.dkimAttributes = dkimAttributes
        self.feedbackForwardingStatus = feedbackForwardingStatus
        self.identityType = identityType
        self.mailFromAttributes = mailFromAttributes
        self.policies = policies
        self.tags = tags
        self.verificationStatus = verificationStatus
        self.verifiedForSendingStatus = verifiedForSendingStatus
    }
}

struct GetEmailIdentityOutputResponseBody: Swift.Equatable {
    let identityType: SESv2ClientTypes.IdentityType?
    let feedbackForwardingStatus: Swift.Bool
    let verifiedForSendingStatus: Swift.Bool
    let dkimAttributes: SESv2ClientTypes.DkimAttributes?
    let mailFromAttributes: SESv2ClientTypes.MailFromAttributes?
    let policies: [Swift.String:Swift.String]?
    let tags: [SESv2ClientTypes.Tag]?
    let configurationSetName: Swift.String?
    let verificationStatus: SESv2ClientTypes.VerificationStatus?
}

extension GetEmailIdentityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case dkimAttributes = "DkimAttributes"
        case feedbackForwardingStatus = "FeedbackForwardingStatus"
        case identityType = "IdentityType"
        case mailFromAttributes = "MailFromAttributes"
        case policies = "Policies"
        case tags = "Tags"
        case verificationStatus = "VerificationStatus"
        case verifiedForSendingStatus = "VerifiedForSendingStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityTypeDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let feedbackForwardingStatusDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .feedbackForwardingStatus) ?? false
        feedbackForwardingStatus = feedbackForwardingStatusDecoded
        let verifiedForSendingStatusDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .verifiedForSendingStatus) ?? false
        verifiedForSendingStatus = verifiedForSendingStatusDecoded
        let dkimAttributesDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DkimAttributes.self, forKey: .dkimAttributes)
        dkimAttributes = dkimAttributesDecoded
        let mailFromAttributesDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.MailFromAttributes.self, forKey: .mailFromAttributes)
        mailFromAttributes = mailFromAttributesDecoded
        let policiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .policies)
        var policiesDecoded0: [Swift.String:Swift.String]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, policy0) in policiesContainer {
                if let policy0 = policy0 {
                    policiesDecoded0?[key0] = policy0
                }
            }
        }
        policies = policiesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SESv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SESv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let verificationStatusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.VerificationStatus.self, forKey: .verificationStatus)
        verificationStatus = verificationStatusDecoded
    }
}

extension GetEmailIdentityPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/policies"
    }
}

/// A request to return the policies of an email identity.
public struct GetEmailIdentityPoliciesInput: Swift.Equatable {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
    }
}

struct GetEmailIdentityPoliciesInputBody: Swift.Equatable {
}

extension GetEmailIdentityPoliciesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetEmailIdentityPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEmailIdentityPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEmailIdentityPoliciesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEmailIdentityPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetEmailIdentityPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policies = output.policies
        } else {
            self.policies = nil
        }
    }
}

/// Identity policies associated with email identity.
public struct GetEmailIdentityPoliciesOutputResponse: Swift.Equatable {
    /// A map of policy names to policies.
    public var policies: [Swift.String:Swift.String]?

    public init (
        policies: [Swift.String:Swift.String]? = nil
    )
    {
        self.policies = policies
    }
}

struct GetEmailIdentityPoliciesOutputResponseBody: Swift.Equatable {
    let policies: [Swift.String:Swift.String]?
}

extension GetEmailIdentityPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policies = "Policies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .policies)
        var policiesDecoded0: [Swift.String:Swift.String]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, policy0) in policiesContainer {
                if let policy0 = policy0 {
                    policiesDecoded0?[key0] = policy0
                }
            }
        }
        policies = policiesDecoded0
    }
}

extension GetEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v2/email/templates/\(templateName.urlPercentEncoding())"
    }
}

/// Represents a request to display the template object (which includes the subject line, HTML part and text part) for the template you specify.
public struct GetEmailTemplateInput: Swift.Equatable {
    /// The name of the template.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct GetEmailTemplateInputBody: Swift.Equatable {
}

extension GetEmailTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetEmailTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.templateContent = output.templateContent
            self.templateName = output.templateName
        } else {
            self.templateContent = nil
            self.templateName = nil
        }
    }
}

/// The following element is returned by the service.
public struct GetEmailTemplateOutputResponse: Swift.Equatable {
    /// The content of the email template, composed of a subject line, an HTML part, and a text-only part.
    /// This member is required.
    public var templateContent: SESv2ClientTypes.EmailTemplateContent?
    /// The name of the template.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        templateContent: SESv2ClientTypes.EmailTemplateContent? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateContent = templateContent
        self.templateName = templateName
    }
}

struct GetEmailTemplateOutputResponseBody: Swift.Equatable {
    let templateName: Swift.String?
    let templateContent: SESv2ClientTypes.EmailTemplateContent?
}

extension GetEmailTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.EmailTemplateContent.self, forKey: .templateContent)
        templateContent = templateContentDecoded
    }
}

extension GetImportJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let jobId = jobId else {
            return nil
        }
        return "/v2/email/import-jobs/\(jobId.urlPercentEncoding())"
    }
}

/// Represents a request for information about an import job using the import job ID.
public struct GetImportJobInput: Swift.Equatable {
    /// The ID of the import job.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct GetImportJobInputBody: Swift.Equatable {
}

extension GetImportJobInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetImportJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetImportJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetImportJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetImportJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetImportJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.completedTimestamp = output.completedTimestamp
            self.createdTimestamp = output.createdTimestamp
            self.failedRecordsCount = output.failedRecordsCount
            self.failureInfo = output.failureInfo
            self.importDataSource = output.importDataSource
            self.importDestination = output.importDestination
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
            self.processedRecordsCount = output.processedRecordsCount
        } else {
            self.completedTimestamp = nil
            self.createdTimestamp = nil
            self.failedRecordsCount = nil
            self.failureInfo = nil
            self.importDataSource = nil
            self.importDestination = nil
            self.jobId = nil
            self.jobStatus = nil
            self.processedRecordsCount = nil
        }
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct GetImportJobOutputResponse: Swift.Equatable {
    /// The time stamp of when the import job was completed.
    public var completedTimestamp: ClientRuntime.Date?
    /// The time stamp of when the import job was created.
    public var createdTimestamp: ClientRuntime.Date?
    /// The number of records that failed processing because of invalid input or other reasons.
    public var failedRecordsCount: Swift.Int?
    /// The failure details about an import job.
    public var failureInfo: SESv2ClientTypes.FailureInfo?
    /// The data source of the import job.
    public var importDataSource: SESv2ClientTypes.ImportDataSource?
    /// The destination of the import job.
    public var importDestination: SESv2ClientTypes.ImportDestination?
    /// A string that represents the import job ID.
    public var jobId: Swift.String?
    /// The status of the import job.
    public var jobStatus: SESv2ClientTypes.JobStatus?
    /// The current number of records processed.
    public var processedRecordsCount: Swift.Int?

    public init (
        completedTimestamp: ClientRuntime.Date? = nil,
        createdTimestamp: ClientRuntime.Date? = nil,
        failedRecordsCount: Swift.Int? = nil,
        failureInfo: SESv2ClientTypes.FailureInfo? = nil,
        importDataSource: SESv2ClientTypes.ImportDataSource? = nil,
        importDestination: SESv2ClientTypes.ImportDestination? = nil,
        jobId: Swift.String? = nil,
        jobStatus: SESv2ClientTypes.JobStatus? = nil,
        processedRecordsCount: Swift.Int? = nil
    )
    {
        self.completedTimestamp = completedTimestamp
        self.createdTimestamp = createdTimestamp
        self.failedRecordsCount = failedRecordsCount
        self.failureInfo = failureInfo
        self.importDataSource = importDataSource
        self.importDestination = importDestination
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.processedRecordsCount = processedRecordsCount
    }
}

struct GetImportJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let importDestination: SESv2ClientTypes.ImportDestination?
    let importDataSource: SESv2ClientTypes.ImportDataSource?
    let failureInfo: SESv2ClientTypes.FailureInfo?
    let jobStatus: SESv2ClientTypes.JobStatus?
    let createdTimestamp: ClientRuntime.Date?
    let completedTimestamp: ClientRuntime.Date?
    let processedRecordsCount: Swift.Int?
    let failedRecordsCount: Swift.Int?
}

extension GetImportJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completedTimestamp = "CompletedTimestamp"
        case createdTimestamp = "CreatedTimestamp"
        case failedRecordsCount = "FailedRecordsCount"
        case failureInfo = "FailureInfo"
        case importDataSource = "ImportDataSource"
        case importDestination = "ImportDestination"
        case jobId = "JobId"
        case jobStatus = "JobStatus"
        case processedRecordsCount = "ProcessedRecordsCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let importDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ImportDestination.self, forKey: .importDestination)
        importDestination = importDestinationDecoded
        let importDataSourceDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ImportDataSource.self, forKey: .importDataSource)
        importDataSource = importDataSourceDecoded
        let failureInfoDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.FailureInfo.self, forKey: .failureInfo)
        failureInfo = failureInfoDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let createdTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let completedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .completedTimestamp)
        completedTimestamp = completedTimestampDecoded
        let processedRecordsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .processedRecordsCount)
        processedRecordsCount = processedRecordsCountDecoded
        let failedRecordsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedRecordsCount)
        failedRecordsCount = failedRecordsCountDecoded
    }
}

extension GetSuppressedDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailAddress = emailAddress else {
            return nil
        }
        return "/v2/email/suppression/addresses/\(emailAddress.urlPercentEncoding())"
    }
}

/// A request to retrieve information about an email address that's on the suppression list for your account.
public struct GetSuppressedDestinationInput: Swift.Equatable {
    /// The email address that's on the account suppression list.
    /// This member is required.
    public var emailAddress: Swift.String?

    public init (
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

struct GetSuppressedDestinationInputBody: Swift.Equatable {
}

extension GetSuppressedDestinationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSuppressedDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSuppressedDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSuppressedDestinationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSuppressedDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetSuppressedDestinationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.suppressedDestination = output.suppressedDestination
        } else {
            self.suppressedDestination = nil
        }
    }
}

/// Information about the suppressed email address.
public struct GetSuppressedDestinationOutputResponse: Swift.Equatable {
    /// An object containing information about the suppressed email address.
    /// This member is required.
    public var suppressedDestination: SESv2ClientTypes.SuppressedDestination?

    public init (
        suppressedDestination: SESv2ClientTypes.SuppressedDestination? = nil
    )
    {
        self.suppressedDestination = suppressedDestination
    }
}

struct GetSuppressedDestinationOutputResponseBody: Swift.Equatable {
    let suppressedDestination: SESv2ClientTypes.SuppressedDestination?
}

extension GetSuppressedDestinationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedDestination = "SuppressedDestination"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SuppressedDestination.self, forKey: .suppressedDestination)
        suppressedDestination = suppressedDestinationDecoded
    }
}

extension SESv2ClientTypes.GuardianAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case optimizedSharedDelivery = "OptimizedSharedDelivery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let optimizedSharedDelivery = self.optimizedSharedDelivery {
            try encodeContainer.encode(optimizedSharedDelivery.rawValue, forKey: .optimizedSharedDelivery)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optimizedSharedDeliveryDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.FeatureStatus.self, forKey: .optimizedSharedDelivery)
        optimizedSharedDelivery = optimizedSharedDeliveryDecoded
    }
}

extension SESv2ClientTypes {
    /// An object containing additional settings for your VDM configuration as applicable to the Guardian.
    public struct GuardianAttributes: Swift.Equatable {
        /// Specifies the status of your VDM optimized shared delivery. Can be one of the following:
        ///
        /// * ENABLED – Amazon SES enables optimized shared delivery for your account.
        ///
        /// * DISABLED – Amazon SES disables optimized shared delivery for your account.
        public var optimizedSharedDelivery: SESv2ClientTypes.FeatureStatus?

        public init (
            optimizedSharedDelivery: SESv2ClientTypes.FeatureStatus? = nil
        )
        {
            self.optimizedSharedDelivery = optimizedSharedDelivery
        }
    }

}

extension SESv2ClientTypes.GuardianOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case optimizedSharedDelivery = "OptimizedSharedDelivery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let optimizedSharedDelivery = self.optimizedSharedDelivery {
            try encodeContainer.encode(optimizedSharedDelivery.rawValue, forKey: .optimizedSharedDelivery)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optimizedSharedDeliveryDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.FeatureStatus.self, forKey: .optimizedSharedDelivery)
        optimizedSharedDelivery = optimizedSharedDeliveryDecoded
    }
}

extension SESv2ClientTypes {
    /// An object containing additional settings for your VDM configuration as applicable to the Guardian.
    public struct GuardianOptions: Swift.Equatable {
        /// Specifies the status of your VDM optimized shared delivery. Can be one of the following:
        ///
        /// * ENABLED – Amazon SES enables optimized shared delivery for the configuration set.
        ///
        /// * DISABLED – Amazon SES disables optimized shared delivery for the configuration set.
        public var optimizedSharedDelivery: SESv2ClientTypes.FeatureStatus?

        public init (
            optimizedSharedDelivery: SESv2ClientTypes.FeatureStatus? = nil
        )
        {
            self.optimizedSharedDelivery = optimizedSharedDelivery
        }
    }

}

extension SESv2ClientTypes.IdentityInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case sendingEnabled = "SendingEnabled"
        case verificationStatus = "VerificationStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityName = self.identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = self.identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if sendingEnabled != false {
            try encodeContainer.encode(sendingEnabled, forKey: .sendingEnabled)
        }
        if let verificationStatus = self.verificationStatus {
            try encodeContainer.encode(verificationStatus.rawValue, forKey: .verificationStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityTypeDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let sendingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendingEnabled) ?? false
        sendingEnabled = sendingEnabledDecoded
        let verificationStatusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.VerificationStatus.self, forKey: .verificationStatus)
        verificationStatus = verificationStatusDecoded
    }
}

extension SESv2ClientTypes {
    /// Information about an email identity.
    public struct IdentityInfo: Swift.Equatable {
        /// The address or domain of the identity.
        public var identityName: Swift.String?
        /// The email identity type. Note: the MANAGED_DOMAIN type is not supported for email identity types.
        public var identityType: SESv2ClientTypes.IdentityType?
        /// Indicates whether or not you can send email from the identity. An identity is an email address or domain that you send email from. Before you can send email from an identity, you have to demostrate that you own the identity, and that you authorize Amazon SES to send email from that identity.
        public var sendingEnabled: Swift.Bool
        /// The verification status of the identity. The status can be one of the following:
        ///
        /// * PENDING – The verification process was initiated, but Amazon SES hasn't yet been able to verify the identity.
        ///
        /// * SUCCESS – The verification process completed successfully.
        ///
        /// * FAILED – The verification process failed.
        ///
        /// * TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES from determining the verification status of the identity.
        ///
        /// * NOT_STARTED – The verification process hasn't been initiated for the identity.
        public var verificationStatus: SESv2ClientTypes.VerificationStatus?

        public init (
            identityName: Swift.String? = nil,
            identityType: SESv2ClientTypes.IdentityType? = nil,
            sendingEnabled: Swift.Bool = false,
            verificationStatus: SESv2ClientTypes.VerificationStatus? = nil
        )
        {
            self.identityName = identityName
            self.identityType = identityType
            self.sendingEnabled = sendingEnabled
            self.verificationStatus = verificationStatus
        }
    }

}

extension SESv2ClientTypes {
    public enum IdentityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case domain
        case emailAddress
        case managedDomain
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityType] {
            return [
                .domain,
                .emailAddress,
                .managedDomain,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .domain: return "DOMAIN"
            case .emailAddress: return "EMAIL_ADDRESS"
            case .managedDomain: return "MANAGED_DOMAIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IdentityType(rawValue: rawValue) ?? IdentityType.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.ImportDataSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataFormat = "DataFormat"
        case s3Url = "S3Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataFormat = self.dataFormat {
            try encodeContainer.encode(dataFormat.rawValue, forKey: .dataFormat)
        }
        if let s3Url = self.s3Url {
            try encodeContainer.encode(s3Url, forKey: .s3Url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Url)
        s3Url = s3UrlDecoded
        let dataFormatDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains details about the data source of the import job.
    public struct ImportDataSource: Swift.Equatable {
        /// The data format of the import job's data source.
        /// This member is required.
        public var dataFormat: SESv2ClientTypes.DataFormat?
        /// An Amazon S3 URL in the format s3:///.
        /// This member is required.
        public var s3Url: Swift.String?

        public init (
            dataFormat: SESv2ClientTypes.DataFormat? = nil,
            s3Url: Swift.String? = nil
        )
        {
            self.dataFormat = dataFormat
            self.s3Url = s3Url
        }
    }

}

extension SESv2ClientTypes.ImportDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListDestination = "ContactListDestination"
        case suppressionListDestination = "SuppressionListDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactListDestination = self.contactListDestination {
            try encodeContainer.encode(contactListDestination, forKey: .contactListDestination)
        }
        if let suppressionListDestination = self.suppressionListDestination {
            try encodeContainer.encode(suppressionListDestination, forKey: .suppressionListDestination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressionListDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SuppressionListDestination.self, forKey: .suppressionListDestination)
        suppressionListDestination = suppressionListDestinationDecoded
        let contactListDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ContactListDestination.self, forKey: .contactListDestination)
        contactListDestination = contactListDestinationDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains details about the resource destination the import job is going to target.
    public struct ImportDestination: Swift.Equatable {
        /// An object that contains the action of the import job towards a contact list.
        public var contactListDestination: SESv2ClientTypes.ContactListDestination?
        /// An object that contains the action of the import job towards suppression list.
        public var suppressionListDestination: SESv2ClientTypes.SuppressionListDestination?

        public init (
            contactListDestination: SESv2ClientTypes.ContactListDestination? = nil,
            suppressionListDestination: SESv2ClientTypes.SuppressionListDestination? = nil
        )
        {
            self.contactListDestination = contactListDestination
            self.suppressionListDestination = suppressionListDestination
        }
    }

}

extension SESv2ClientTypes {
    /// The destination of the import job, which can be used to list import jobs that have a certain ImportDestinationType.
    public enum ImportDestinationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case contactList
        case suppressionList
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportDestinationType] {
            return [
                .contactList,
                .suppressionList,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .contactList: return "CONTACT_LIST"
            case .suppressionList: return "SUPPRESSION_LIST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ImportDestinationType(rawValue: rawValue) ?? ImportDestinationType.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.ImportJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case failedRecordsCount = "FailedRecordsCount"
        case importDestination = "ImportDestination"
        case jobId = "JobId"
        case jobStatus = "JobStatus"
        case processedRecordsCount = "ProcessedRecordsCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTimestamp = self.createdTimestamp {
            try encodeContainer.encodeTimestamp(createdTimestamp, format: .epochSeconds, forKey: .createdTimestamp)
        }
        if let failedRecordsCount = self.failedRecordsCount {
            try encodeContainer.encode(failedRecordsCount, forKey: .failedRecordsCount)
        }
        if let importDestination = self.importDestination {
            try encodeContainer.encode(importDestination, forKey: .importDestination)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let processedRecordsCount = self.processedRecordsCount {
            try encodeContainer.encode(processedRecordsCount, forKey: .processedRecordsCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let importDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ImportDestination.self, forKey: .importDestination)
        importDestination = importDestinationDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let createdTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let processedRecordsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .processedRecordsCount)
        processedRecordsCount = processedRecordsCountDecoded
        let failedRecordsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedRecordsCount)
        failedRecordsCount = failedRecordsCountDecoded
    }
}

extension SESv2ClientTypes {
    /// A summary of the import job.
    public struct ImportJobSummary: Swift.Equatable {
        /// The date and time when the import job was created.
        public var createdTimestamp: ClientRuntime.Date?
        /// The number of records that failed processing because of invalid input or other reasons.
        public var failedRecordsCount: Swift.Int?
        /// An object that contains details about the resource destination the import job is going to target.
        public var importDestination: SESv2ClientTypes.ImportDestination?
        /// A string that represents the import job ID.
        public var jobId: Swift.String?
        /// The status of the import job.
        public var jobStatus: SESv2ClientTypes.JobStatus?
        /// The current number of records processed.
        public var processedRecordsCount: Swift.Int?

        public init (
            createdTimestamp: ClientRuntime.Date? = nil,
            failedRecordsCount: Swift.Int? = nil,
            importDestination: SESv2ClientTypes.ImportDestination? = nil,
            jobId: Swift.String? = nil,
            jobStatus: SESv2ClientTypes.JobStatus? = nil,
            processedRecordsCount: Swift.Int? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.failedRecordsCount = failedRecordsCount
            self.importDestination = importDestination
            self.jobId = jobId
            self.jobStatus = jobStatus
            self.processedRecordsCount = processedRecordsCount
        }
    }

}

extension SESv2ClientTypes.InboxPlacementTrackingOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case global = "Global"
        case trackedIsps = "TrackedIsps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if global != false {
            try encodeContainer.encode(global, forKey: .global)
        }
        if let trackedIsps = trackedIsps {
            var trackedIspsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trackedIsps)
            for ispname0 in trackedIsps {
                try trackedIspsContainer.encode(ispname0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .global) ?? false
        global = globalDecoded
        let trackedIspsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .trackedIsps)
        var trackedIspsDecoded0:[Swift.String]? = nil
        if let trackedIspsContainer = trackedIspsContainer {
            trackedIspsDecoded0 = [Swift.String]()
            for string0 in trackedIspsContainer {
                if let string0 = string0 {
                    trackedIspsDecoded0?.append(string0)
                }
            }
        }
        trackedIsps = trackedIspsDecoded0
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about the inbox placement data settings for a verified domain that’s associated with your Amazon Web Services account. This data is available only if you enabled the Deliverability dashboard for the domain.
    public struct InboxPlacementTrackingOption: Swift.Equatable {
        /// Specifies whether inbox placement data is being tracked for the domain.
        public var global: Swift.Bool
        /// An array of strings, one for each major email provider that the inbox placement data applies to.
        public var trackedIsps: [Swift.String]?

        public init (
            global: Swift.Bool = false,
            trackedIsps: [Swift.String]? = nil
        )
        {
            self.global = global
            self.trackedIsps = trackedIsps
        }
    }

}

extension InternalServiceErrorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServiceErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request couldn't be processed because an error occurred with the Amazon SES API v2.
public struct InternalServiceErrorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServiceErrorExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServiceErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidNextTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidNextTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified request includes an invalid or expired token.
public struct InvalidNextTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidNextTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESv2ClientTypes.IspPlacement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ispName = "IspName"
        case placementStatistics = "PlacementStatistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ispName = self.ispName {
            try encodeContainer.encode(ispName, forKey: .ispName)
        }
        if let placementStatistics = self.placementStatistics {
            try encodeContainer.encode(placementStatistics, forKey: .placementStatistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ispNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ispName)
        ispName = ispNameDecoded
        let placementStatisticsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.PlacementStatistics.self, forKey: .placementStatistics)
        placementStatistics = placementStatisticsDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that describes how email sent during the predictive inbox placement test was handled by a certain email provider.
    public struct IspPlacement: Swift.Equatable {
        /// The name of the email provider that the inbox placement data applies to.
        public var ispName: Swift.String?
        /// An object that contains inbox placement metrics for a specific email provider.
        public var placementStatistics: SESv2ClientTypes.PlacementStatistics?

        public init (
            ispName: Swift.String? = nil,
            placementStatistics: SESv2ClientTypes.PlacementStatistics? = nil
        )
        {
            self.ispName = ispName
            self.placementStatistics = placementStatistics
        }
    }

}

extension SESv2ClientTypes {
    /// The status of the import job.
    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case created
        case failed
        case processing
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .completed,
                .created,
                .failed,
                .processing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .created: return "CREATED"
            case .failed: return "FAILED"
            case .processing: return "PROCESSING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobStatus(rawValue: rawValue) ?? JobStatus.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.KinesisFirehoseDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamArn = "DeliveryStreamArn"
        case iamRoleArn = "IamRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamArn = self.deliveryStreamArn {
            try encodeContainer.encode(deliveryStreamArn, forKey: .deliveryStreamArn)
        }
        if let iamRoleArn = self.iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let deliveryStreamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamArn)
        deliveryStreamArn = deliveryStreamArnDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
    public struct KinesisFirehoseDestination: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that the Amazon SES API v2 sends email events to.
        /// This member is required.
        public var deliveryStreamArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that the Amazon SES API v2 uses to send email events to the Amazon Kinesis Data Firehose stream.
        /// This member is required.
        public var iamRoleArn: Swift.String?

        public init (
            deliveryStreamArn: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil
        )
        {
            self.deliveryStreamArn = deliveryStreamArn
            self.iamRoleArn = iamRoleArn
        }
    }

}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There are too many instances of the specified resource type.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListConfigurationSetsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension ListConfigurationSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/configuration-sets"
    }
}

/// A request to obtain a list of configuration sets for your Amazon SES account in the current Amazon Web Services Region.
public struct ListConfigurationSetsInput: Swift.Equatable {
    /// A token returned from a previous call to ListConfigurationSets to indicate the position in the list of configuration sets.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListConfigurationSets. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListConfigurationSetsInputBody: Swift.Equatable {
}

extension ListConfigurationSetsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListConfigurationSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListConfigurationSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListConfigurationSetsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListConfigurationSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListConfigurationSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationSets = output.configurationSets
            self.nextToken = output.nextToken
        } else {
            self.configurationSets = nil
            self.nextToken = nil
        }
    }
}

/// A list of configuration sets in your Amazon SES account in the current Amazon Web Services Region.
public struct ListConfigurationSetsOutputResponse: Swift.Equatable {
    /// An array that contains all of the configuration sets in your Amazon SES account in the current Amazon Web Services Region.
    public var configurationSets: [Swift.String]?
    /// A token that indicates that there are additional configuration sets to list. To view additional configuration sets, issue another request to ListConfigurationSets, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init (
        configurationSets: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationSets = configurationSets
        self.nextToken = nextToken
    }
}

struct ListConfigurationSetsOutputResponseBody: Swift.Equatable {
    let configurationSets: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListConfigurationSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSets = "ConfigurationSets"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configurationSets)
        var configurationSetsDecoded0:[Swift.String]? = nil
        if let configurationSetsContainer = configurationSetsContainer {
            configurationSetsDecoded0 = [Swift.String]()
            for string0 in configurationSetsContainer {
                if let string0 = string0 {
                    configurationSetsDecoded0?.append(string0)
                }
            }
        }
        configurationSets = configurationSetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListContactListsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            return items
        }
    }
}

extension ListContactListsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/contact-lists"
    }
}

public struct ListContactListsInput: Swift.Equatable {
    /// A string token indicating that there might be additional contact lists available to be listed. Use the token provided in the Response to use in the subsequent call to ListContactLists with the same parameters to retrieve the next page of contact lists.
    public var nextToken: Swift.String?
    /// Maximum number of contact lists to return at once. Use this parameter to paginate results. If additional contact lists exist beyond the specified limit, the NextToken element is sent in the response. Use the NextToken value in subsequent requests to retrieve additional lists.
    public var pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListContactListsInputBody: Swift.Equatable {
}

extension ListContactListsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListContactListsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListContactListsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListContactListsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListContactListsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListContactListsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contactLists = output.contactLists
            self.nextToken = output.nextToken
        } else {
            self.contactLists = nil
            self.nextToken = nil
        }
    }
}

public struct ListContactListsOutputResponse: Swift.Equatable {
    /// The available contact lists.
    public var contactLists: [SESv2ClientTypes.ContactList]?
    /// A string token indicating that there might be additional contact lists available to be listed. Copy this token to a subsequent call to ListContactLists with the same parameters to retrieve the next page of contact lists.
    public var nextToken: Swift.String?

    public init (
        contactLists: [SESv2ClientTypes.ContactList]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.contactLists = contactLists
        self.nextToken = nextToken
    }
}

struct ListContactListsOutputResponseBody: Swift.Equatable {
    let contactLists: [SESv2ClientTypes.ContactList]?
    let nextToken: Swift.String?
}

extension ListContactListsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactLists = "ContactLists"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.ContactList?].self, forKey: .contactLists)
        var contactListsDecoded0:[SESv2ClientTypes.ContactList]? = nil
        if let contactListsContainer = contactListsContainer {
            contactListsDecoded0 = [SESv2ClientTypes.ContactList]()
            for structure0 in contactListsContainer {
                if let structure0 = structure0 {
                    contactListsDecoded0?.append(structure0)
                }
            }
        }
        contactLists = contactListsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SESv2ClientTypes.ListContactsFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filteredStatus = "FilteredStatus"
        case topicFilter = "TopicFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filteredStatus = self.filteredStatus {
            try encodeContainer.encode(filteredStatus.rawValue, forKey: .filteredStatus)
        }
        if let topicFilter = self.topicFilter {
            try encodeContainer.encode(topicFilter, forKey: .topicFilter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filteredStatusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SubscriptionStatus.self, forKey: .filteredStatus)
        filteredStatus = filteredStatusDecoded
        let topicFilterDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.TopicFilter.self, forKey: .topicFilter)
        topicFilter = topicFilterDecoded
    }
}

extension SESv2ClientTypes {
    /// A filter that can be applied to a list of contacts.
    public struct ListContactsFilter: Swift.Equatable {
        /// The status by which you are filtering: OPT_IN or OPT_OUT.
        public var filteredStatus: SESv2ClientTypes.SubscriptionStatus?
        /// Used for filtering by a specific topic preference.
        public var topicFilter: SESv2ClientTypes.TopicFilter?

        public init (
            filteredStatus: SESv2ClientTypes.SubscriptionStatus? = nil,
            topicFilter: SESv2ClientTypes.TopicFilter? = nil
        )
        {
            self.filteredStatus = filteredStatus
            self.topicFilter = topicFilter
        }
    }

}

extension ListContactsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
    }
}

extension ListContactsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            return items
        }
    }
}

extension ListContactsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let contactListName = contactListName else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())/contacts"
    }
}

public struct ListContactsInput: Swift.Equatable {
    /// The name of the contact list.
    /// This member is required.
    public var contactListName: Swift.String?
    /// A filter that can be applied to a list of contacts.
    public var filter: SESv2ClientTypes.ListContactsFilter?
    /// A string token indicating that there might be additional contacts available to be listed. Use the token provided in the Response to use in the subsequent call to ListContacts with the same parameters to retrieve the next page of contacts.
    public var nextToken: Swift.String?
    /// The number of contacts that may be returned at once, which is dependent on if there are more or less contacts than the value of the PageSize. Use this parameter to paginate results. If additional contacts exist beyond the specified limit, the NextToken element is sent in the response. Use the NextToken value in subsequent requests to retrieve additional contacts.
    public var pageSize: Swift.Int?

    public init (
        contactListName: Swift.String? = nil,
        filter: SESv2ClientTypes.ListContactsFilter? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.contactListName = contactListName
        self.filter = filter
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListContactsInputBody: Swift.Equatable {
    let filter: SESv2ClientTypes.ListContactsFilter?
}

extension ListContactsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ListContactsFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension ListContactsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListContactsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListContactsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListContactsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListContactsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contacts = output.contacts
            self.nextToken = output.nextToken
        } else {
            self.contacts = nil
            self.nextToken = nil
        }
    }
}

public struct ListContactsOutputResponse: Swift.Equatable {
    /// The contacts present in a specific contact list.
    public var contacts: [SESv2ClientTypes.Contact]?
    /// A string token indicating that there might be additional contacts available to be listed. Copy this token to a subsequent call to ListContacts with the same parameters to retrieve the next page of contacts.
    public var nextToken: Swift.String?

    public init (
        contacts: [SESv2ClientTypes.Contact]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.contacts = contacts
        self.nextToken = nextToken
    }
}

struct ListContactsOutputResponseBody: Swift.Equatable {
    let contacts: [SESv2ClientTypes.Contact]?
    let nextToken: Swift.String?
}

extension ListContactsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contacts = "Contacts"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Contact?].self, forKey: .contacts)
        var contactsDecoded0:[SESv2ClientTypes.Contact]? = nil
        if let contactsContainer = contactsContainer {
            contactsDecoded0 = [SESv2ClientTypes.Contact]()
            for structure0 in contactsContainer {
                if let structure0 = structure0 {
                    contactsDecoded0?.append(structure0)
                }
            }
        }
        contacts = contactsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListCustomVerificationEmailTemplatesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension ListCustomVerificationEmailTemplatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/custom-verification-email-templates"
    }
}

/// Represents a request to list the existing custom verification email templates for your account.
public struct ListCustomVerificationEmailTemplatesInput: Swift.Equatable {
    /// A token returned from a previous call to ListCustomVerificationEmailTemplates to indicate the position in the list of custom verification email templates.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListCustomVerificationEmailTemplates. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 1, and can be no more than 50.
    public var pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListCustomVerificationEmailTemplatesInputBody: Swift.Equatable {
}

extension ListCustomVerificationEmailTemplatesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListCustomVerificationEmailTemplatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCustomVerificationEmailTemplatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListCustomVerificationEmailTemplatesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCustomVerificationEmailTemplatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListCustomVerificationEmailTemplatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.customVerificationEmailTemplates = output.customVerificationEmailTemplates
            self.nextToken = output.nextToken
        } else {
            self.customVerificationEmailTemplates = nil
            self.nextToken = nil
        }
    }
}

/// The following elements are returned by the service.
public struct ListCustomVerificationEmailTemplatesOutputResponse: Swift.Equatable {
    /// A list of the custom verification email templates that exist in your account.
    public var customVerificationEmailTemplates: [SESv2ClientTypes.CustomVerificationEmailTemplateMetadata]?
    /// A token indicating that there are additional custom verification email templates available to be listed. Pass this token to a subsequent call to ListCustomVerificationEmailTemplates to retrieve the next 50 custom verification email templates.
    public var nextToken: Swift.String?

    public init (
        customVerificationEmailTemplates: [SESv2ClientTypes.CustomVerificationEmailTemplateMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.customVerificationEmailTemplates = customVerificationEmailTemplates
        self.nextToken = nextToken
    }
}

struct ListCustomVerificationEmailTemplatesOutputResponseBody: Swift.Equatable {
    let customVerificationEmailTemplates: [SESv2ClientTypes.CustomVerificationEmailTemplateMetadata]?
    let nextToken: Swift.String?
}

extension ListCustomVerificationEmailTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customVerificationEmailTemplates = "CustomVerificationEmailTemplates"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customVerificationEmailTemplatesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.CustomVerificationEmailTemplateMetadata?].self, forKey: .customVerificationEmailTemplates)
        var customVerificationEmailTemplatesDecoded0:[SESv2ClientTypes.CustomVerificationEmailTemplateMetadata]? = nil
        if let customVerificationEmailTemplatesContainer = customVerificationEmailTemplatesContainer {
            customVerificationEmailTemplatesDecoded0 = [SESv2ClientTypes.CustomVerificationEmailTemplateMetadata]()
            for structure0 in customVerificationEmailTemplatesContainer {
                if let structure0 = structure0 {
                    customVerificationEmailTemplatesDecoded0?.append(structure0)
                }
            }
        }
        customVerificationEmailTemplates = customVerificationEmailTemplatesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDedicatedIpPoolsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension ListDedicatedIpPoolsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/dedicated-ip-pools"
    }
}

/// A request to obtain a list of dedicated IP pools.
public struct ListDedicatedIpPoolsInput: Swift.Equatable {
    /// A token returned from a previous call to ListDedicatedIpPools to indicate the position in the list of dedicated IP pools.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListDedicatedIpPools. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListDedicatedIpPoolsInputBody: Swift.Equatable {
}

extension ListDedicatedIpPoolsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDedicatedIpPoolsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDedicatedIpPoolsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDedicatedIpPoolsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDedicatedIpPoolsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDedicatedIpPoolsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dedicatedIpPools = output.dedicatedIpPools
            self.nextToken = output.nextToken
        } else {
            self.dedicatedIpPools = nil
            self.nextToken = nil
        }
    }
}

/// A list of dedicated IP pools.
public struct ListDedicatedIpPoolsOutputResponse: Swift.Equatable {
    /// A list of all of the dedicated IP pools that are associated with your Amazon Web Services account in the current Region.
    public var dedicatedIpPools: [Swift.String]?
    /// A token that indicates that there are additional IP pools to list. To view additional IP pools, issue another request to ListDedicatedIpPools, passing this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init (
        dedicatedIpPools: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dedicatedIpPools = dedicatedIpPools
        self.nextToken = nextToken
    }
}

struct ListDedicatedIpPoolsOutputResponseBody: Swift.Equatable {
    let dedicatedIpPools: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListDedicatedIpPoolsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedIpPools = "DedicatedIpPools"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dedicatedIpPoolsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dedicatedIpPools)
        var dedicatedIpPoolsDecoded0:[Swift.String]? = nil
        if let dedicatedIpPoolsContainer = dedicatedIpPoolsContainer {
            dedicatedIpPoolsDecoded0 = [Swift.String]()
            for string0 in dedicatedIpPoolsContainer {
                if let string0 = string0 {
                    dedicatedIpPoolsDecoded0?.append(string0)
                }
            }
        }
        dedicatedIpPools = dedicatedIpPoolsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeliverabilityTestReportsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension ListDeliverabilityTestReportsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/deliverability-dashboard/test-reports"
    }
}

/// A request to list all of the predictive inbox placement tests that you've performed.
public struct ListDeliverabilityTestReportsInput: Swift.Equatable {
    /// A token returned from a previous call to ListDeliverabilityTestReports to indicate the position in the list of predictive inbox placement tests.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListDeliverabilityTestReports. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 0, and can be no more than 1000.
    public var pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListDeliverabilityTestReportsInputBody: Swift.Equatable {
}

extension ListDeliverabilityTestReportsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDeliverabilityTestReportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeliverabilityTestReportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDeliverabilityTestReportsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeliverabilityTestReportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDeliverabilityTestReportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliverabilityTestReports = output.deliverabilityTestReports
            self.nextToken = output.nextToken
        } else {
            self.deliverabilityTestReports = nil
            self.nextToken = nil
        }
    }
}

/// A list of the predictive inbox placement test reports that are available for your account, regardless of whether or not those tests are complete.
public struct ListDeliverabilityTestReportsOutputResponse: Swift.Equatable {
    /// An object that contains a lists of predictive inbox placement tests that you've performed.
    /// This member is required.
    public var deliverabilityTestReports: [SESv2ClientTypes.DeliverabilityTestReport]?
    /// A token that indicates that there are additional predictive inbox placement tests to list. To view additional predictive inbox placement tests, issue another request to ListDeliverabilityTestReports, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init (
        deliverabilityTestReports: [SESv2ClientTypes.DeliverabilityTestReport]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deliverabilityTestReports = deliverabilityTestReports
        self.nextToken = nextToken
    }
}

struct ListDeliverabilityTestReportsOutputResponseBody: Swift.Equatable {
    let deliverabilityTestReports: [SESv2ClientTypes.DeliverabilityTestReport]?
    let nextToken: Swift.String?
}

extension ListDeliverabilityTestReportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliverabilityTestReports = "DeliverabilityTestReports"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliverabilityTestReportsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.DeliverabilityTestReport?].self, forKey: .deliverabilityTestReports)
        var deliverabilityTestReportsDecoded0:[SESv2ClientTypes.DeliverabilityTestReport]? = nil
        if let deliverabilityTestReportsContainer = deliverabilityTestReportsContainer {
            deliverabilityTestReportsDecoded0 = [SESv2ClientTypes.DeliverabilityTestReport]()
            for structure0 in deliverabilityTestReportsContainer {
                if let structure0 = structure0 {
                    deliverabilityTestReportsDecoded0?.append(structure0)
                }
            }
        }
        deliverabilityTestReports = deliverabilityTestReportsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDomainDeliverabilityCampaignsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let startDate = startDate else {
                let message = "Creating a URL Query Item failed. startDate is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let startDateQueryItem = ClientRuntime.URLQueryItem(name: "StartDate".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: startDate)).urlPercentEncoding())
            items.append(startDateQueryItem)
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            guard let endDate = endDate else {
                let message = "Creating a URL Query Item failed. endDate is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let endDateQueryItem = ClientRuntime.URLQueryItem(name: "EndDate".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: endDate)).urlPercentEncoding())
            items.append(endDateQueryItem)
            return items
        }
    }
}

extension ListDomainDeliverabilityCampaignsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let subscribedDomain = subscribedDomain else {
            return nil
        }
        return "/v2/email/deliverability-dashboard/domains/\(subscribedDomain.urlPercentEncoding())/campaigns"
    }
}

/// Retrieve deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard.
public struct ListDomainDeliverabilityCampaignsInput: Swift.Equatable {
    /// The last day that you want to obtain deliverability data for. This value has to be less than or equal to 30 days after the value of the StartDate parameter.
    /// This member is required.
    public var endDate: ClientRuntime.Date?
    /// A token that’s returned from a previous call to the ListDomainDeliverabilityCampaigns operation. This token indicates the position of a campaign in the list of campaigns.
    public var nextToken: Swift.String?
    /// The maximum number of results to include in response to a single call to the ListDomainDeliverabilityCampaigns operation. If the number of results is larger than the number that you specify in this parameter, the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?
    /// The first day that you want to obtain deliverability data for.
    /// This member is required.
    public var startDate: ClientRuntime.Date?
    /// The domain to obtain deliverability data for.
    /// This member is required.
    public var subscribedDomain: Swift.String?

    public init (
        endDate: ClientRuntime.Date? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        startDate: ClientRuntime.Date? = nil,
        subscribedDomain: Swift.String? = nil
    )
    {
        self.endDate = endDate
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.startDate = startDate
        self.subscribedDomain = subscribedDomain
    }
}

struct ListDomainDeliverabilityCampaignsInputBody: Swift.Equatable {
}

extension ListDomainDeliverabilityCampaignsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDomainDeliverabilityCampaignsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDomainDeliverabilityCampaignsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDomainDeliverabilityCampaignsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDomainDeliverabilityCampaignsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDomainDeliverabilityCampaignsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainDeliverabilityCampaigns = output.domainDeliverabilityCampaigns
            self.nextToken = output.nextToken
        } else {
            self.domainDeliverabilityCampaigns = nil
            self.nextToken = nil
        }
    }
}

/// An array of objects that provide deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard for the domain.
public struct ListDomainDeliverabilityCampaignsOutputResponse: Swift.Equatable {
    /// An array of responses, one for each campaign that used the domain to send email during the specified time range.
    /// This member is required.
    public var domainDeliverabilityCampaigns: [SESv2ClientTypes.DomainDeliverabilityCampaign]?
    /// A token that’s returned from a previous call to the ListDomainDeliverabilityCampaigns operation. This token indicates the position of the campaign in the list of campaigns.
    public var nextToken: Swift.String?

    public init (
        domainDeliverabilityCampaigns: [SESv2ClientTypes.DomainDeliverabilityCampaign]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainDeliverabilityCampaigns = domainDeliverabilityCampaigns
        self.nextToken = nextToken
    }
}

struct ListDomainDeliverabilityCampaignsOutputResponseBody: Swift.Equatable {
    let domainDeliverabilityCampaigns: [SESv2ClientTypes.DomainDeliverabilityCampaign]?
    let nextToken: Swift.String?
}

extension ListDomainDeliverabilityCampaignsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainDeliverabilityCampaigns = "DomainDeliverabilityCampaigns"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDeliverabilityCampaignsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.DomainDeliverabilityCampaign?].self, forKey: .domainDeliverabilityCampaigns)
        var domainDeliverabilityCampaignsDecoded0:[SESv2ClientTypes.DomainDeliverabilityCampaign]? = nil
        if let domainDeliverabilityCampaignsContainer = domainDeliverabilityCampaignsContainer {
            domainDeliverabilityCampaignsDecoded0 = [SESv2ClientTypes.DomainDeliverabilityCampaign]()
            for structure0 in domainDeliverabilityCampaignsContainer {
                if let structure0 = structure0 {
                    domainDeliverabilityCampaignsDecoded0?.append(structure0)
                }
            }
        }
        domainDeliverabilityCampaigns = domainDeliverabilityCampaignsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEmailIdentitiesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension ListEmailIdentitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/identities"
    }
}

/// A request to list all of the email identities associated with your Amazon Web Services account. This list includes identities that you've already verified, identities that are unverified, and identities that were verified in the past, but are no longer verified.
public struct ListEmailIdentitiesInput: Swift.Equatable {
    /// A token returned from a previous call to ListEmailIdentities to indicate the position in the list of identities.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListEmailIdentities. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 0, and can be no more than 1000.
    public var pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListEmailIdentitiesInputBody: Swift.Equatable {
}

extension ListEmailIdentitiesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListEmailIdentitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEmailIdentitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListEmailIdentitiesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEmailIdentitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListEmailIdentitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.emailIdentities = output.emailIdentities
            self.nextToken = output.nextToken
        } else {
            self.emailIdentities = nil
            self.nextToken = nil
        }
    }
}

/// A list of all of the identities that you've attempted to verify, regardless of whether or not those identities were successfully verified.
public struct ListEmailIdentitiesOutputResponse: Swift.Equatable {
    /// An array that includes all of the email identities associated with your Amazon Web Services account.
    public var emailIdentities: [SESv2ClientTypes.IdentityInfo]?
    /// A token that indicates that there are additional configuration sets to list. To view additional configuration sets, issue another request to ListEmailIdentities, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?

    public init (
        emailIdentities: [SESv2ClientTypes.IdentityInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.emailIdentities = emailIdentities
        self.nextToken = nextToken
    }
}

struct ListEmailIdentitiesOutputResponseBody: Swift.Equatable {
    let emailIdentities: [SESv2ClientTypes.IdentityInfo]?
    let nextToken: Swift.String?
}

extension ListEmailIdentitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailIdentities = "EmailIdentities"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailIdentitiesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.IdentityInfo?].self, forKey: .emailIdentities)
        var emailIdentitiesDecoded0:[SESv2ClientTypes.IdentityInfo]? = nil
        if let emailIdentitiesContainer = emailIdentitiesContainer {
            emailIdentitiesDecoded0 = [SESv2ClientTypes.IdentityInfo]()
            for structure0 in emailIdentitiesContainer {
                if let structure0 = structure0 {
                    emailIdentitiesDecoded0?.append(structure0)
                }
            }
        }
        emailIdentities = emailIdentitiesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEmailTemplatesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension ListEmailTemplatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/templates"
    }
}

/// Represents a request to list the email templates present in your Amazon SES account in the current Amazon Web Services Region. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct ListEmailTemplatesInput: Swift.Equatable {
    /// A token returned from a previous call to ListEmailTemplates to indicate the position in the list of email templates.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListEmailTemplates. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 1, and can be no more than 10.
    public var pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListEmailTemplatesInputBody: Swift.Equatable {
}

extension ListEmailTemplatesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListEmailTemplatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEmailTemplatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListEmailTemplatesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEmailTemplatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListEmailTemplatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.templatesMetadata = output.templatesMetadata
        } else {
            self.nextToken = nil
            self.templatesMetadata = nil
        }
    }
}

/// The following elements are returned by the service.
public struct ListEmailTemplatesOutputResponse: Swift.Equatable {
    /// A token indicating that there are additional email templates available to be listed. Pass this token to a subsequent ListEmailTemplates call to retrieve the next 10 email templates.
    public var nextToken: Swift.String?
    /// An array the contains the name and creation time stamp for each template in your Amazon SES account.
    public var templatesMetadata: [SESv2ClientTypes.EmailTemplateMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        templatesMetadata: [SESv2ClientTypes.EmailTemplateMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.templatesMetadata = templatesMetadata
    }
}

struct ListEmailTemplatesOutputResponseBody: Swift.Equatable {
    let templatesMetadata: [SESv2ClientTypes.EmailTemplateMetadata]?
    let nextToken: Swift.String?
}

extension ListEmailTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case templatesMetadata = "TemplatesMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templatesMetadataContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.EmailTemplateMetadata?].self, forKey: .templatesMetadata)
        var templatesMetadataDecoded0:[SESv2ClientTypes.EmailTemplateMetadata]? = nil
        if let templatesMetadataContainer = templatesMetadataContainer {
            templatesMetadataDecoded0 = [SESv2ClientTypes.EmailTemplateMetadata]()
            for structure0 in templatesMetadataContainer {
                if let structure0 = structure0 {
                    templatesMetadataDecoded0?.append(structure0)
                }
            }
        }
        templatesMetadata = templatesMetadataDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListImportJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importDestinationType = "ImportDestinationType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let importDestinationType = self.importDestinationType {
            try encodeContainer.encode(importDestinationType.rawValue, forKey: .importDestinationType)
        }
    }
}

extension ListImportJobsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension ListImportJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/import-jobs"
    }
}

/// Represents a request to list all of the import jobs for a data destination within the specified maximum number of import jobs.
public struct ListImportJobsInput: Swift.Equatable {
    /// The destination of the import job, which can be used to list import jobs that have a certain ImportDestinationType.
    public var importDestinationType: SESv2ClientTypes.ImportDestinationType?
    /// A string token indicating that there might be additional import jobs available to be listed. Copy this token to a subsequent call to ListImportJobs with the same parameters to retrieve the next page of import jobs.
    public var nextToken: Swift.String?
    /// Maximum number of import jobs to return at once. Use this parameter to paginate results. If additional import jobs exist beyond the specified limit, the NextToken element is sent in the response. Use the NextToken value in subsequent requests to retrieve additional addresses.
    public var pageSize: Swift.Int?

    public init (
        importDestinationType: SESv2ClientTypes.ImportDestinationType? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.importDestinationType = importDestinationType
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListImportJobsInputBody: Swift.Equatable {
    let importDestinationType: SESv2ClientTypes.ImportDestinationType?
}

extension ListImportJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importDestinationType = "ImportDestinationType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importDestinationTypeDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ImportDestinationType.self, forKey: .importDestinationType)
        importDestinationType = importDestinationTypeDecoded
    }
}

extension ListImportJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListImportJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListImportJobsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListImportJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListImportJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.importJobs = output.importJobs
            self.nextToken = output.nextToken
        } else {
            self.importJobs = nil
            self.nextToken = nil
        }
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct ListImportJobsOutputResponse: Swift.Equatable {
    /// A list of the import job summaries.
    public var importJobs: [SESv2ClientTypes.ImportJobSummary]?
    /// A string token indicating that there might be additional import jobs available to be listed. Copy this token to a subsequent call to ListImportJobs with the same parameters to retrieve the next page of import jobs.
    public var nextToken: Swift.String?

    public init (
        importJobs: [SESv2ClientTypes.ImportJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.importJobs = importJobs
        self.nextToken = nextToken
    }
}

struct ListImportJobsOutputResponseBody: Swift.Equatable {
    let importJobs: [SESv2ClientTypes.ImportJobSummary]?
    let nextToken: Swift.String?
}

extension ListImportJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importJobs = "ImportJobs"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importJobsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.ImportJobSummary?].self, forKey: .importJobs)
        var importJobsDecoded0:[SESv2ClientTypes.ImportJobSummary]? = nil
        if let importJobsContainer = importJobsContainer {
            importJobsDecoded0 = [SESv2ClientTypes.ImportJobSummary]()
            for structure0 in importJobsContainer {
                if let structure0 = structure0 {
                    importJobsDecoded0?.append(structure0)
                }
            }
        }
        importJobs = importJobsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SESv2ClientTypes.ListManagementOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListName = "ContactListName"
        case topicName = "TopicName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactListName = self.contactListName {
            try encodeContainer.encode(contactListName, forKey: .contactListName)
        }
        if let topicName = self.topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactListName)
        contactListName = contactListNameDecoded
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
    }
}

extension SESv2ClientTypes {
    /// An object used to specify a list or topic to which an email belongs, which will be used when a contact chooses to unsubscribe.
    public struct ListManagementOptions: Swift.Equatable {
        /// The name of the contact list.
        /// This member is required.
        public var contactListName: Swift.String?
        /// The name of the topic.
        public var topicName: Swift.String?

        public init (
            contactListName: Swift.String? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.contactListName = contactListName
            self.topicName = topicName
        }
    }

}

extension SESv2ClientTypes {
    /// The ListRecommendations filter type. This can be one of the following:
    ///
    /// * TYPE – The recommendation type, with values like DKIM, SPF or DMARC.
    ///
    /// * IMPACT – The recommendation impact, with values like HIGH or LOW.
    ///
    /// * STATUS – The recommendation status, with values like OPEN or FIXED.
    ///
    /// * RESOURCE_ARN – The resource affected by the recommendation, with values like arn:aws:ses:us-east-1:123456789012:identity/example.com.
    public enum ListRecommendationsFilterKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case impact
        case resourceArn
        case status
        case type
        case sdkUnknown(Swift.String)

        public static var allCases: [ListRecommendationsFilterKey] {
            return [
                .impact,
                .resourceArn,
                .status,
                .type,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .impact: return "IMPACT"
            case .resourceArn: return "RESOURCE_ARN"
            case .status: return "STATUS"
            case .type: return "TYPE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ListRecommendationsFilterKey(rawValue: rawValue) ?? ListRecommendationsFilterKey.sdkUnknown(rawValue)
        }
    }
}

extension ListRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case nextToken = "NextToken"
        case pageSize = "PageSize"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            var filterContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .filter)
            for (dictKey0, listRecommendationsFilter0) in filter {
                try filterContainer.encode(listRecommendationsFilter0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let pageSize = self.pageSize {
            try encodeContainer.encode(pageSize, forKey: .pageSize)
        }
    }
}

extension ListRecommendationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/vdm/recommendations"
    }
}

/// Represents a request to list the existing recommendations for your account.
public struct ListRecommendationsInput: Swift.Equatable {
    /// Filters applied when retrieving recommendations. Can eiter be an individual filter, or combinations of STATUS and IMPACT or STATUS and TYPE
    public var filter: [Swift.String:Swift.String]?
    /// A token returned from a previous call to ListRecommendations to indicate the position in the list of recommendations.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListRecommendations. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 1, and can be no more than 100.
    public var pageSize: Swift.Int?

    public init (
        filter: [Swift.String:Swift.String]? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.filter = filter
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListRecommendationsInputBody: Swift.Equatable {
    let filter: [Swift.String:Swift.String]?
    let nextToken: Swift.String?
    let pageSize: Swift.Int?
}

extension ListRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case nextToken = "NextToken"
        case pageSize = "PageSize"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .filter)
        var filterDecoded0: [Swift.String:Swift.String]? = nil
        if let filterContainer = filterContainer {
            filterDecoded0 = [Swift.String:Swift.String]()
            for (key0, listrecommendationfiltervalue0) in filterContainer {
                if let listrecommendationfiltervalue0 = listrecommendationfiltervalue0 {
                    filterDecoded0?[key0] = listrecommendationfiltervalue0
                }
            }
        }
        filter = filterDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let pageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pageSize)
        pageSize = pageSizeDecoded
    }
}

extension ListRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.recommendations = output.recommendations
        } else {
            self.nextToken = nil
            self.recommendations = nil
        }
    }
}

/// Contains the response to your request to retrieve the list of recommendations for your account.
public struct ListRecommendationsOutputResponse: Swift.Equatable {
    /// A string token indicating that there might be additional recommendations available to be listed. Use the token provided in the ListRecommendationsResponse to use in the subsequent call to ListRecommendations with the same parameters to retrieve the next page of recommendations.
    public var nextToken: Swift.String?
    /// The recommendations applicable to your account.
    public var recommendations: [SESv2ClientTypes.Recommendation]?

    public init (
        nextToken: Swift.String? = nil,
        recommendations: [SESv2ClientTypes.Recommendation]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendations = recommendations
    }
}

struct ListRecommendationsOutputResponseBody: Swift.Equatable {
    let recommendations: [SESv2ClientTypes.Recommendation]?
    let nextToken: Swift.String?
}

extension ListRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case recommendations = "Recommendations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Recommendation?].self, forKey: .recommendations)
        var recommendationsDecoded0:[SESv2ClientTypes.Recommendation]? = nil
        if let recommendationsContainer = recommendationsContainer {
            recommendationsDecoded0 = [SESv2ClientTypes.Recommendation]()
            for structure0 in recommendationsContainer {
                if let structure0 = structure0 {
                    recommendationsDecoded0?.append(structure0)
                }
            }
        }
        recommendations = recommendationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSuppressedDestinationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let startDate = startDate {
                let startDateQueryItem = ClientRuntime.URLQueryItem(name: "StartDate".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: startDate)).urlPercentEncoding())
                items.append(startDateQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let reasons = reasons {
                reasons.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "Reason".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            if let endDate = endDate {
                let endDateQueryItem = ClientRuntime.URLQueryItem(name: "EndDate".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: endDate)).urlPercentEncoding())
                items.append(endDateQueryItem)
            }
            return items
        }
    }
}

extension ListSuppressedDestinationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/suppression/addresses"
    }
}

/// A request to obtain a list of email destinations that are on the suppression list for your account.
public struct ListSuppressedDestinationsInput: Swift.Equatable {
    /// Used to filter the list of suppressed email destinations so that it only includes addresses that were added to the list before a specific date.
    public var endDate: ClientRuntime.Date?
    /// A token returned from a previous call to ListSuppressedDestinations to indicate the position in the list of suppressed email addresses.
    public var nextToken: Swift.String?
    /// The number of results to show in a single call to ListSuppressedDestinations. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
    public var pageSize: Swift.Int?
    /// The factors that caused the email address to be added to .
    public var reasons: [SESv2ClientTypes.SuppressionListReason]?
    /// Used to filter the list of suppressed email destinations so that it only includes addresses that were added to the list after a specific date.
    public var startDate: ClientRuntime.Date?

    public init (
        endDate: ClientRuntime.Date? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        reasons: [SESv2ClientTypes.SuppressionListReason]? = nil,
        startDate: ClientRuntime.Date? = nil
    )
    {
        self.endDate = endDate
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.reasons = reasons
        self.startDate = startDate
    }
}

struct ListSuppressedDestinationsInputBody: Swift.Equatable {
}

extension ListSuppressedDestinationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListSuppressedDestinationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSuppressedDestinationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListSuppressedDestinationsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case invalidNextTokenException(InvalidNextTokenException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSuppressedDestinationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListSuppressedDestinationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.suppressedDestinationSummaries = output.suppressedDestinationSummaries
        } else {
            self.nextToken = nil
            self.suppressedDestinationSummaries = nil
        }
    }
}

/// A list of suppressed email addresses.
public struct ListSuppressedDestinationsOutputResponse: Swift.Equatable {
    /// A token that indicates that there are additional email addresses on the suppression list for your account. To view additional suppressed addresses, issue another request to ListSuppressedDestinations, and pass this token in the NextToken parameter.
    public var nextToken: Swift.String?
    /// A list of summaries, each containing a summary for a suppressed email destination.
    public var suppressedDestinationSummaries: [SESv2ClientTypes.SuppressedDestinationSummary]?

    public init (
        nextToken: Swift.String? = nil,
        suppressedDestinationSummaries: [SESv2ClientTypes.SuppressedDestinationSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.suppressedDestinationSummaries = suppressedDestinationSummaries
    }
}

struct ListSuppressedDestinationsOutputResponseBody: Swift.Equatable {
    let suppressedDestinationSummaries: [SESv2ClientTypes.SuppressedDestinationSummary]?
    let nextToken: Swift.String?
}

extension ListSuppressedDestinationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case suppressedDestinationSummaries = "SuppressedDestinationSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedDestinationSummariesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.SuppressedDestinationSummary?].self, forKey: .suppressedDestinationSummaries)
        var suppressedDestinationSummariesDecoded0:[SESv2ClientTypes.SuppressedDestinationSummary]? = nil
        if let suppressedDestinationSummariesContainer = suppressedDestinationSummariesContainer {
            suppressedDestinationSummariesDecoded0 = [SESv2ClientTypes.SuppressedDestinationSummary]()
            for structure0 in suppressedDestinationSummariesContainer {
                if let structure0 = structure0 {
                    suppressedDestinationSummariesDecoded0?.append(structure0)
                }
            }
        }
        suppressedDestinationSummaries = suppressedDestinationSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let resourceArn = resourceArn else {
                let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let resourceArnQueryItem = ClientRuntime.URLQueryItem(name: "ResourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
            items.append(resourceArnQueryItem)
            return items
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/tags"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource that you want to retrieve tag information for.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// An array that lists all the tags that are associated with the resource. Each tag consists of a required tag key (Key) and an associated tag value (Value)
    /// This member is required.
    public var tags: [SESv2ClientTypes.Tag]?

    public init (
        tags: [SESv2ClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [SESv2ClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SESv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SESv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SESv2ClientTypes.MailFromAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMxFailure = "BehaviorOnMxFailure"
        case mailFromDomain = "MailFromDomain"
        case mailFromDomainStatus = "MailFromDomainStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behaviorOnMxFailure = self.behaviorOnMxFailure {
            try encodeContainer.encode(behaviorOnMxFailure.rawValue, forKey: .behaviorOnMxFailure)
        }
        if let mailFromDomain = self.mailFromDomain {
            try encodeContainer.encode(mailFromDomain, forKey: .mailFromDomain)
        }
        if let mailFromDomainStatus = self.mailFromDomainStatus {
            try encodeContainer.encode(mailFromDomainStatus.rawValue, forKey: .mailFromDomainStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailFromDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mailFromDomain)
        mailFromDomain = mailFromDomainDecoded
        let mailFromDomainStatusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.MailFromDomainStatus.self, forKey: .mailFromDomainStatus)
        mailFromDomainStatus = mailFromDomainStatusDecoded
        let behaviorOnMxFailureDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.BehaviorOnMxFailure.self, forKey: .behaviorOnMxFailure)
        behaviorOnMxFailure = behaviorOnMxFailureDecoded
    }
}

extension SESv2ClientTypes {
    /// A list of attributes that are associated with a MAIL FROM domain.
    public struct MailFromAttributes: Swift.Equatable {
        /// The action to take if the required MX record can't be found when you send an email. When you set this value to USE_DEFAULT_VALUE, the mail is sent using amazonses.com as the MAIL FROM domain. When you set this value to REJECT_MESSAGE, the Amazon SES API v2 returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
        /// This member is required.
        public var behaviorOnMxFailure: SESv2ClientTypes.BehaviorOnMxFailure?
        /// The name of a domain that an email identity uses as a custom MAIL FROM domain.
        /// This member is required.
        public var mailFromDomain: Swift.String?
        /// The status of the MAIL FROM domain. This status can have the following values:
        ///
        /// * PENDING – Amazon SES hasn't started searching for the MX record yet.
        ///
        /// * SUCCESS – Amazon SES detected the required MX record for the MAIL FROM domain.
        ///
        /// * FAILED – Amazon SES can't find the required MX record, or the record no longer exists.
        ///
        /// * TEMPORARY_FAILURE – A temporary issue occurred, which prevented Amazon SES from determining the status of the MAIL FROM domain.
        /// This member is required.
        public var mailFromDomainStatus: SESv2ClientTypes.MailFromDomainStatus?

        public init (
            behaviorOnMxFailure: SESv2ClientTypes.BehaviorOnMxFailure? = nil,
            mailFromDomain: Swift.String? = nil,
            mailFromDomainStatus: SESv2ClientTypes.MailFromDomainStatus? = nil
        )
        {
            self.behaviorOnMxFailure = behaviorOnMxFailure
            self.mailFromDomain = mailFromDomain
            self.mailFromDomainStatus = mailFromDomainStatus
        }
    }

}

extension MailFromDomainNotVerifiedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MailFromDomainNotVerifiedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The message can't be sent because the sending domain isn't verified.
public struct MailFromDomainNotVerifiedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MailFromDomainNotVerifiedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension MailFromDomainNotVerifiedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESv2ClientTypes {
    /// The status of the MAIL FROM domain. This status can have the following values:
    ///
    /// * PENDING – Amazon SES hasn't started searching for the MX record yet.
    ///
    /// * SUCCESS – Amazon SES detected the required MX record for the MAIL FROM domain.
    ///
    /// * FAILED – Amazon SES can't find the required MX record, or the record no longer exists.
    ///
    /// * TEMPORARY_FAILURE – A temporary issue occurred, which prevented Amazon SES from determining the status of the MAIL FROM domain.
    public enum MailFromDomainStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case success
        case temporaryFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [MailFromDomainStatus] {
            return [
                .failed,
                .pending,
                .success,
                .temporaryFailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case .temporaryFailure: return "TEMPORARY_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MailFromDomainStatus(rawValue: rawValue) ?? MailFromDomainStatus.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes {
    public enum MailType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case marketing
        case transactional
        case sdkUnknown(Swift.String)

        public static var allCases: [MailType] {
            return [
                .marketing,
                .transactional,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .marketing: return "MARKETING"
            case .transactional: return "TRANSACTIONAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MailType(rawValue: rawValue) ?? MailType.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.Message: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case subject = "Subject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subjectDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.Content.self, forKey: .subject)
        subject = subjectDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.Body.self, forKey: .body)
        body = bodyDecoded
    }
}

extension SESv2ClientTypes {
    /// Represents the email message that you're sending. The Message object consists of a subject line and a message body.
    public struct Message: Swift.Equatable {
        /// The body of the message. You can specify an HTML version of the message, a text-only version of the message, or both.
        /// This member is required.
        public var body: SESv2ClientTypes.Body?
        /// The subject line of the email. The subject line can only contain 7-bit ASCII characters. However, you can specify non-ASCII characters in the subject line by using encoded-word syntax, as described in [RFC 2047](https://tools.ietf.org/html/rfc2047).
        /// This member is required.
        public var subject: SESv2ClientTypes.Content?

        public init (
            body: SESv2ClientTypes.Body? = nil,
            subject: SESv2ClientTypes.Content? = nil
        )
        {
            self.body = body
            self.subject = subject
        }
    }

}

extension MessageRejected {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MessageRejectedBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The message can't be sent because it contains invalid content.
public struct MessageRejected: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MessageRejectedBody: Swift.Equatable {
    let message: Swift.String?
}

extension MessageRejectedBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESv2ClientTypes.MessageTag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SESv2ClientTypes {
    /// Contains the name and value of a tag that you apply to an email. You can use message tags when you publish email sending events.
    public struct MessageTag: Swift.Equatable {
        /// The name of the message tag. The message tag name has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the message tag. The message tag value has to meet the following criteria:
        ///
        /// * It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).
        ///
        /// * It can contain no more than 256 characters.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SESv2ClientTypes {
    public enum Metric: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case click
        case complaint
        case delivery
        case deliveryClick
        case deliveryComplaint
        case deliveryOpen
        case `open`
        case permanentBounce
        case send
        case transientBounce
        case sdkUnknown(Swift.String)

        public static var allCases: [Metric] {
            return [
                .click,
                .complaint,
                .delivery,
                .deliveryClick,
                .deliveryComplaint,
                .deliveryOpen,
                .open,
                .permanentBounce,
                .send,
                .transientBounce,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .click: return "CLICK"
            case .complaint: return "COMPLAINT"
            case .delivery: return "DELIVERY"
            case .deliveryClick: return "DELIVERY_CLICK"
            case .deliveryComplaint: return "DELIVERY_COMPLAINT"
            case .deliveryOpen: return "DELIVERY_OPEN"
            case .open: return "OPEN"
            case .permanentBounce: return "PERMANENT_BOUNCE"
            case .send: return "SEND"
            case .transientBounce: return "TRANSIENT_BOUNCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Metric(rawValue: rawValue) ?? Metric.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.MetricDataError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case id = "Id"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let codeDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.QueryErrorCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESv2ClientTypes {
    /// An error corresponding to the unsuccessful processing of a single metric data query.
    public struct MetricDataError: Swift.Equatable {
        /// The query error code. Can be one of:
        ///
        /// * INTERNAL_FAILURE – Amazon SES has failed to process one of the queries.
        ///
        /// * ACCESS_DENIED – You have insufficient access to retrieve metrics based on the given query.
        public var code: SESv2ClientTypes.QueryErrorCode?
        /// The query identifier.
        public var id: Swift.String?
        /// The error message associated with the current query error.
        public var message: Swift.String?

        public init (
            code: SESv2ClientTypes.QueryErrorCode? = nil,
            id: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.id = id
            self.message = message
        }
    }

}

extension SESv2ClientTypes.MetricDataResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case timestamps = "Timestamps"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let timestamps = timestamps {
            var timestampsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .timestamps)
            for timestamp0 in timestamps {
                try timestampsContainer.encodeTimestamp(timestamp0, format: .epochSeconds)
            }
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for counter0 in values {
                try valuesContainer.encode(counter0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let timestampsContainer = try containerValues.decodeIfPresent([ClientRuntime.Date?].self, forKey: .timestamps)
        var timestampsDecoded0:[ClientRuntime.Date]? = nil
        if let timestampsContainer = timestampsContainer {
            timestampsDecoded0 = [ClientRuntime.Date]()
            for timestamp0 in timestampsContainer {
                if let timestamp0 = timestamp0 {
                    timestampsDecoded0?.append(timestamp0)
                }
            }
        }
        timestamps = timestampsDecoded0
        let valuesContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .values)
        var valuesDecoded0:[Swift.Int]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.Int]()
            for long0 in valuesContainer {
                if let long0 = long0 {
                    valuesDecoded0?.append(long0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension SESv2ClientTypes {
    /// The result of a single metric data query.
    public struct MetricDataResult: Swift.Equatable {
        /// The query identifier.
        public var id: Swift.String?
        /// A list of timestamps for the metric data results.
        public var timestamps: [ClientRuntime.Date]?
        /// A list of values (cumulative / sum) for the metric data results.
        public var values: [Swift.Int]?

        public init (
            id: Swift.String? = nil,
            timestamps: [ClientRuntime.Date]? = nil,
            values: [Swift.Int]? = nil
        )
        {
            self.id = id
            self.timestamps = timestamps
            self.values = values
        }
    }

}

extension SESv2ClientTypes {
    /// The BatchGetMetricDataQuery dimension name. This can be one of the following:
    ///
    /// * EMAIL_IDENTITY – The email identity used when sending messages.
    ///
    /// * CONFIGURATION_SET – The configuration set used when sending messages (if one was used).
    ///
    /// * ISP – The recipient ISP (e.g. Gmail, Yahoo, etc.).
    public enum MetricDimensionName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case configurationSet
        case emailIdentity
        case isp
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricDimensionName] {
            return [
                .configurationSet,
                .emailIdentity,
                .isp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .configurationSet: return "CONFIGURATION_SET"
            case .emailIdentity: return "EMAIL_IDENTITY"
            case .isp: return "ISP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricDimensionName(rawValue: rawValue) ?? MetricDimensionName.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes {
    public enum MetricNamespace: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case vdm
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricNamespace] {
            return [
                .vdm,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .vdm: return "VDM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricNamespace(rawValue: rawValue) ?? MetricNamespace.sdkUnknown(rawValue)
        }
    }
}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource you attempted to access doesn't exist.
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESv2ClientTypes.OverallVolume: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainIspPlacements = "DomainIspPlacements"
        case readRatePercent = "ReadRatePercent"
        case volumeStatistics = "VolumeStatistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainIspPlacements = domainIspPlacements {
            var domainIspPlacementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainIspPlacements)
            for domainispplacement0 in domainIspPlacements {
                try domainIspPlacementsContainer.encode(domainispplacement0)
            }
        }
        if let readRatePercent = self.readRatePercent {
            try encodeContainer.encode(readRatePercent, forKey: .readRatePercent)
        }
        if let volumeStatistics = self.volumeStatistics {
            try encodeContainer.encode(volumeStatistics, forKey: .volumeStatistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeStatisticsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.VolumeStatistics.self, forKey: .volumeStatistics)
        volumeStatistics = volumeStatisticsDecoded
        let readRatePercentDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .readRatePercent)
        readRatePercent = readRatePercentDecoded
        let domainIspPlacementsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.DomainIspPlacement?].self, forKey: .domainIspPlacements)
        var domainIspPlacementsDecoded0:[SESv2ClientTypes.DomainIspPlacement]? = nil
        if let domainIspPlacementsContainer = domainIspPlacementsContainer {
            domainIspPlacementsDecoded0 = [SESv2ClientTypes.DomainIspPlacement]()
            for structure0 in domainIspPlacementsContainer {
                if let structure0 = structure0 {
                    domainIspPlacementsDecoded0?.append(structure0)
                }
            }
        }
        domainIspPlacements = domainIspPlacementsDecoded0
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about email that was sent from the selected domain.
    public struct OverallVolume: Swift.Equatable {
        /// An object that contains inbox and junk mail placement metrics for individual email providers.
        public var domainIspPlacements: [SESv2ClientTypes.DomainIspPlacement]?
        /// The percentage of emails that were sent from the domain that were read by their recipients.
        public var readRatePercent: Swift.Double?
        /// An object that contains information about the numbers of messages that arrived in recipients' inboxes and junk mail folders.
        public var volumeStatistics: SESv2ClientTypes.VolumeStatistics?

        public init (
            domainIspPlacements: [SESv2ClientTypes.DomainIspPlacement]? = nil,
            readRatePercent: Swift.Double? = nil,
            volumeStatistics: SESv2ClientTypes.VolumeStatistics? = nil
        )
        {
            self.domainIspPlacements = domainIspPlacements
            self.readRatePercent = readRatePercent
            self.volumeStatistics = volumeStatistics
        }
    }

}

extension SESv2ClientTypes.PinpointDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationArn = "ApplicationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationArn = self.applicationArn {
            try encodeContainer.encode(applicationArn, forKey: .applicationArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationArn)
        applicationArn = applicationArnDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that defines an Amazon Pinpoint project destination for email events. You can send email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging dashboards that are built in to Amazon Pinpoint. For more information, see [Transactional Messaging Charts](https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html) in the Amazon Pinpoint User Guide.
    public struct PinpointDestination: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon Pinpoint project to send email events to.
        public var applicationArn: Swift.String?

        public init (
            applicationArn: Swift.String? = nil
        )
        {
            self.applicationArn = applicationArn
        }
    }

}

extension SESv2ClientTypes.PlacementStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimPercentage = "DkimPercentage"
        case inboxPercentage = "InboxPercentage"
        case missingPercentage = "MissingPercentage"
        case spamPercentage = "SpamPercentage"
        case spfPercentage = "SpfPercentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dkimPercentage = self.dkimPercentage {
            try encodeContainer.encode(dkimPercentage, forKey: .dkimPercentage)
        }
        if let inboxPercentage = self.inboxPercentage {
            try encodeContainer.encode(inboxPercentage, forKey: .inboxPercentage)
        }
        if let missingPercentage = self.missingPercentage {
            try encodeContainer.encode(missingPercentage, forKey: .missingPercentage)
        }
        if let spamPercentage = self.spamPercentage {
            try encodeContainer.encode(spamPercentage, forKey: .spamPercentage)
        }
        if let spfPercentage = self.spfPercentage {
            try encodeContainer.encode(spfPercentage, forKey: .spfPercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inboxPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .inboxPercentage)
        inboxPercentage = inboxPercentageDecoded
        let spamPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .spamPercentage)
        spamPercentage = spamPercentageDecoded
        let missingPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .missingPercentage)
        missingPercentage = missingPercentageDecoded
        let spfPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .spfPercentage)
        spfPercentage = spfPercentageDecoded
        let dkimPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .dkimPercentage)
        dkimPercentage = dkimPercentageDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains inbox placement data for an email provider.
    public struct PlacementStatistics: Swift.Equatable {
        /// The percentage of emails that were authenticated by using DomainKeys Identified Mail (DKIM) during the predictive inbox placement test.
        public var dkimPercentage: Swift.Double?
        /// The percentage of emails that arrived in recipients' inboxes during the predictive inbox placement test.
        public var inboxPercentage: Swift.Double?
        /// The percentage of emails that didn't arrive in recipients' inboxes at all during the predictive inbox placement test.
        public var missingPercentage: Swift.Double?
        /// The percentage of emails that arrived in recipients' spam or junk mail folders during the predictive inbox placement test.
        public var spamPercentage: Swift.Double?
        /// The percentage of emails that were authenticated by using Sender Policy Framework (SPF) during the predictive inbox placement test.
        public var spfPercentage: Swift.Double?

        public init (
            dkimPercentage: Swift.Double? = nil,
            inboxPercentage: Swift.Double? = nil,
            missingPercentage: Swift.Double? = nil,
            spamPercentage: Swift.Double? = nil,
            spfPercentage: Swift.Double? = nil
        )
        {
            self.dkimPercentage = dkimPercentage
            self.inboxPercentage = inboxPercentage
            self.missingPercentage = missingPercentage
            self.spamPercentage = spamPercentage
            self.spfPercentage = spfPercentage
        }
    }

}

extension PutAccountDedicatedIpWarmupAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoWarmupEnabled = "AutoWarmupEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if autoWarmupEnabled != false {
            try encodeContainer.encode(autoWarmupEnabled, forKey: .autoWarmupEnabled)
        }
    }
}

extension PutAccountDedicatedIpWarmupAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/account/dedicated-ips/warmup"
    }
}

/// A request to enable or disable the automatic IP address warm-up feature.
public struct PutAccountDedicatedIpWarmupAttributesInput: Swift.Equatable {
    /// Enables or disables the automatic warm-up feature for dedicated IP addresses that are associated with your Amazon SES account in the current Amazon Web Services Region. Set to true to enable the automatic warm-up feature, or set to false to disable it.
    public var autoWarmupEnabled: Swift.Bool

    public init (
        autoWarmupEnabled: Swift.Bool = false
    )
    {
        self.autoWarmupEnabled = autoWarmupEnabled
    }
}

struct PutAccountDedicatedIpWarmupAttributesInputBody: Swift.Equatable {
    let autoWarmupEnabled: Swift.Bool
}

extension PutAccountDedicatedIpWarmupAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoWarmupEnabled = "AutoWarmupEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoWarmupEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoWarmupEnabled) ?? false
        autoWarmupEnabled = autoWarmupEnabledDecoded
    }
}

extension PutAccountDedicatedIpWarmupAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAccountDedicatedIpWarmupAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutAccountDedicatedIpWarmupAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAccountDedicatedIpWarmupAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutAccountDedicatedIpWarmupAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutAccountDetailsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAccountDetailsInput(contactLanguage: \(Swift.String(describing: contactLanguage)), mailType: \(Swift.String(describing: mailType)), productionAccessEnabled: \(Swift.String(describing: productionAccessEnabled)), additionalContactEmailAddresses: \"CONTENT_REDACTED\", useCaseDescription: \"CONTENT_REDACTED\", websiteURL: \"CONTENT_REDACTED\")"}
}

extension PutAccountDetailsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalContactEmailAddresses = "AdditionalContactEmailAddresses"
        case contactLanguage = "ContactLanguage"
        case mailType = "MailType"
        case productionAccessEnabled = "ProductionAccessEnabled"
        case useCaseDescription = "UseCaseDescription"
        case websiteURL = "WebsiteURL"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalContactEmailAddresses = additionalContactEmailAddresses {
            var additionalContactEmailAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalContactEmailAddresses)
            for additionalcontactemailaddress0 in additionalContactEmailAddresses {
                try additionalContactEmailAddressesContainer.encode(additionalcontactemailaddress0)
            }
        }
        if let contactLanguage = self.contactLanguage {
            try encodeContainer.encode(contactLanguage.rawValue, forKey: .contactLanguage)
        }
        if let mailType = self.mailType {
            try encodeContainer.encode(mailType.rawValue, forKey: .mailType)
        }
        if let productionAccessEnabled = self.productionAccessEnabled {
            try encodeContainer.encode(productionAccessEnabled, forKey: .productionAccessEnabled)
        }
        if let useCaseDescription = self.useCaseDescription {
            try encodeContainer.encode(useCaseDescription, forKey: .useCaseDescription)
        }
        if let websiteURL = self.websiteURL {
            try encodeContainer.encode(websiteURL, forKey: .websiteURL)
        }
    }
}

extension PutAccountDetailsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/account/details"
    }
}

/// A request to submit new account details.
public struct PutAccountDetailsInput: Swift.Equatable {
    /// Additional email addresses that you would like to be notified regarding Amazon SES matters.
    public var additionalContactEmailAddresses: [Swift.String]?
    /// The language you would prefer to be contacted with.
    public var contactLanguage: SESv2ClientTypes.ContactLanguage?
    /// The type of email your account will send.
    /// This member is required.
    public var mailType: SESv2ClientTypes.MailType?
    /// Indicates whether or not your account should have production access in the current Amazon Web Services Region. If the value is false, then your account is in the sandbox. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1. If the value is true, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.
    public var productionAccessEnabled: Swift.Bool?
    /// A description of the types of email that you plan to send.
    /// This member is required.
    public var useCaseDescription: Swift.String?
    /// The URL of your website. This information helps us better understand the type of content that you plan to send.
    /// This member is required.
    public var websiteURL: Swift.String?

    public init (
        additionalContactEmailAddresses: [Swift.String]? = nil,
        contactLanguage: SESv2ClientTypes.ContactLanguage? = nil,
        mailType: SESv2ClientTypes.MailType? = nil,
        productionAccessEnabled: Swift.Bool? = nil,
        useCaseDescription: Swift.String? = nil,
        websiteURL: Swift.String? = nil
    )
    {
        self.additionalContactEmailAddresses = additionalContactEmailAddresses
        self.contactLanguage = contactLanguage
        self.mailType = mailType
        self.productionAccessEnabled = productionAccessEnabled
        self.useCaseDescription = useCaseDescription
        self.websiteURL = websiteURL
    }
}

struct PutAccountDetailsInputBody: Swift.Equatable {
    let mailType: SESv2ClientTypes.MailType?
    let websiteURL: Swift.String?
    let contactLanguage: SESv2ClientTypes.ContactLanguage?
    let useCaseDescription: Swift.String?
    let additionalContactEmailAddresses: [Swift.String]?
    let productionAccessEnabled: Swift.Bool?
}

extension PutAccountDetailsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalContactEmailAddresses = "AdditionalContactEmailAddresses"
        case contactLanguage = "ContactLanguage"
        case mailType = "MailType"
        case productionAccessEnabled = "ProductionAccessEnabled"
        case useCaseDescription = "UseCaseDescription"
        case websiteURL = "WebsiteURL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailTypeDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.MailType.self, forKey: .mailType)
        mailType = mailTypeDecoded
        let websiteURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .websiteURL)
        websiteURL = websiteURLDecoded
        let contactLanguageDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ContactLanguage.self, forKey: .contactLanguage)
        contactLanguage = contactLanguageDecoded
        let useCaseDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .useCaseDescription)
        useCaseDescription = useCaseDescriptionDecoded
        let additionalContactEmailAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalContactEmailAddresses)
        var additionalContactEmailAddressesDecoded0:[Swift.String]? = nil
        if let additionalContactEmailAddressesContainer = additionalContactEmailAddressesContainer {
            additionalContactEmailAddressesDecoded0 = [Swift.String]()
            for string0 in additionalContactEmailAddressesContainer {
                if let string0 = string0 {
                    additionalContactEmailAddressesDecoded0?.append(string0)
                }
            }
        }
        additionalContactEmailAddresses = additionalContactEmailAddressesDecoded0
        let productionAccessEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .productionAccessEnabled)
        productionAccessEnabled = productionAccessEnabledDecoded
    }
}

extension PutAccountDetailsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAccountDetailsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutAccountDetailsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAccountDetailsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutAccountDetailsOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutAccountSendingAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if sendingEnabled != false {
            try encodeContainer.encode(sendingEnabled, forKey: .sendingEnabled)
        }
    }
}

extension PutAccountSendingAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/account/sending"
    }
}

/// A request to change the ability of your account to send email.
public struct PutAccountSendingAttributesInput: Swift.Equatable {
    /// Enables or disables your account's ability to send email. Set to true to enable email sending, or set to false to disable email sending. If Amazon Web Services paused your account's ability to send email, you can't use this operation to resume your account's ability to send email.
    public var sendingEnabled: Swift.Bool

    public init (
        sendingEnabled: Swift.Bool = false
    )
    {
        self.sendingEnabled = sendingEnabled
    }
}

struct PutAccountSendingAttributesInputBody: Swift.Equatable {
    let sendingEnabled: Swift.Bool
}

extension PutAccountSendingAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendingEnabled) ?? false
        sendingEnabled = sendingEnabledDecoded
    }
}

extension PutAccountSendingAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAccountSendingAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutAccountSendingAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAccountSendingAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutAccountSendingAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutAccountSuppressionAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedReasons = "SuppressedReasons"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let suppressedReasons = suppressedReasons {
            var suppressedReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suppressedReasons)
            for suppressionlistreason0 in suppressedReasons {
                try suppressedReasonsContainer.encode(suppressionlistreason0.rawValue)
            }
        }
    }
}

extension PutAccountSuppressionAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/account/suppression"
    }
}

/// A request to change your account's suppression preferences.
public struct PutAccountSuppressionAttributesInput: Swift.Equatable {
    /// A list that contains the reasons that email addresses will be automatically added to the suppression list for your account. This list can contain any or all of the following:
    ///
    /// * COMPLAINT – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a complaint.
    ///
    /// * BOUNCE – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a hard bounce.
    public var suppressedReasons: [SESv2ClientTypes.SuppressionListReason]?

    public init (
        suppressedReasons: [SESv2ClientTypes.SuppressionListReason]? = nil
    )
    {
        self.suppressedReasons = suppressedReasons
    }
}

struct PutAccountSuppressionAttributesInputBody: Swift.Equatable {
    let suppressedReasons: [SESv2ClientTypes.SuppressionListReason]?
}

extension PutAccountSuppressionAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedReasons = "SuppressedReasons"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedReasonsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.SuppressionListReason?].self, forKey: .suppressedReasons)
        var suppressedReasonsDecoded0:[SESv2ClientTypes.SuppressionListReason]? = nil
        if let suppressedReasonsContainer = suppressedReasonsContainer {
            suppressedReasonsDecoded0 = [SESv2ClientTypes.SuppressionListReason]()
            for enum0 in suppressedReasonsContainer {
                if let enum0 = enum0 {
                    suppressedReasonsDecoded0?.append(enum0)
                }
            }
        }
        suppressedReasons = suppressedReasonsDecoded0
    }
}

extension PutAccountSuppressionAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAccountSuppressionAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutAccountSuppressionAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAccountSuppressionAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutAccountSuppressionAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutAccountVdmAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vdmAttributes = "VdmAttributes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let vdmAttributes = self.vdmAttributes {
            try encodeContainer.encode(vdmAttributes, forKey: .vdmAttributes)
        }
    }
}

extension PutAccountVdmAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/account/vdm"
    }
}

/// A request to submit new account VDM attributes.
public struct PutAccountVdmAttributesInput: Swift.Equatable {
    /// The VDM attributes that you wish to apply to your Amazon SES account.
    /// This member is required.
    public var vdmAttributes: SESv2ClientTypes.VdmAttributes?

    public init (
        vdmAttributes: SESv2ClientTypes.VdmAttributes? = nil
    )
    {
        self.vdmAttributes = vdmAttributes
    }
}

struct PutAccountVdmAttributesInputBody: Swift.Equatable {
    let vdmAttributes: SESv2ClientTypes.VdmAttributes?
}

extension PutAccountVdmAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vdmAttributes = "VdmAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vdmAttributesDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.VdmAttributes.self, forKey: .vdmAttributes)
        vdmAttributes = vdmAttributesDecoded
    }
}

extension PutAccountVdmAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAccountVdmAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutAccountVdmAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAccountVdmAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutAccountVdmAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutConfigurationSetDeliveryOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingPoolName = "SendingPoolName"
        case tlsPolicy = "TlsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sendingPoolName = self.sendingPoolName {
            try encodeContainer.encode(sendingPoolName, forKey: .sendingPoolName)
        }
        if let tlsPolicy = self.tlsPolicy {
            try encodeContainer.encode(tlsPolicy.rawValue, forKey: .tlsPolicy)
        }
    }
}

extension PutConfigurationSetDeliveryOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/delivery-options"
    }
}

/// A request to associate a configuration set with a dedicated IP pool.
public struct PutConfigurationSetDeliveryOptionsInput: Swift.Equatable {
    /// The name of the configuration set to associate with a dedicated IP pool.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The name of the dedicated IP pool to associate with the configuration set.
    public var sendingPoolName: Swift.String?
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
    public var tlsPolicy: SESv2ClientTypes.TlsPolicy?

    public init (
        configurationSetName: Swift.String? = nil,
        sendingPoolName: Swift.String? = nil,
        tlsPolicy: SESv2ClientTypes.TlsPolicy? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.sendingPoolName = sendingPoolName
        self.tlsPolicy = tlsPolicy
    }
}

struct PutConfigurationSetDeliveryOptionsInputBody: Swift.Equatable {
    let tlsPolicy: SESv2ClientTypes.TlsPolicy?
    let sendingPoolName: Swift.String?
}

extension PutConfigurationSetDeliveryOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingPoolName = "SendingPoolName"
        case tlsPolicy = "TlsPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tlsPolicyDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.TlsPolicy.self, forKey: .tlsPolicy)
        tlsPolicy = tlsPolicyDecoded
        let sendingPoolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sendingPoolName)
        sendingPoolName = sendingPoolNameDecoded
    }
}

extension PutConfigurationSetDeliveryOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetDeliveryOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutConfigurationSetDeliveryOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetDeliveryOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetDeliveryOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutConfigurationSetReputationOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reputationMetricsEnabled = "ReputationMetricsEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if reputationMetricsEnabled != false {
            try encodeContainer.encode(reputationMetricsEnabled, forKey: .reputationMetricsEnabled)
        }
    }
}

extension PutConfigurationSetReputationOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/reputation-options"
    }
}

/// A request to enable or disable tracking of reputation metrics for a configuration set.
public struct PutConfigurationSetReputationOptionsInput: Swift.Equatable {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
    public var reputationMetricsEnabled: Swift.Bool

    public init (
        configurationSetName: Swift.String? = nil,
        reputationMetricsEnabled: Swift.Bool = false
    )
    {
        self.configurationSetName = configurationSetName
        self.reputationMetricsEnabled = reputationMetricsEnabled
    }
}

struct PutConfigurationSetReputationOptionsInputBody: Swift.Equatable {
    let reputationMetricsEnabled: Swift.Bool
}

extension PutConfigurationSetReputationOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reputationMetricsEnabled = "ReputationMetricsEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reputationMetricsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reputationMetricsEnabled) ?? false
        reputationMetricsEnabled = reputationMetricsEnabledDecoded
    }
}

extension PutConfigurationSetReputationOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetReputationOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutConfigurationSetReputationOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetReputationOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetReputationOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutConfigurationSetSendingOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if sendingEnabled != false {
            try encodeContainer.encode(sendingEnabled, forKey: .sendingEnabled)
        }
    }
}

extension PutConfigurationSetSendingOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/sending"
    }
}

/// A request to enable or disable the ability of Amazon SES to send emails that use a specific configuration set.
public struct PutConfigurationSetSendingOptionsInput: Swift.Equatable {
    /// The name of the configuration set to enable or disable email sending for.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
    public var sendingEnabled: Swift.Bool

    public init (
        configurationSetName: Swift.String? = nil,
        sendingEnabled: Swift.Bool = false
    )
    {
        self.configurationSetName = configurationSetName
        self.sendingEnabled = sendingEnabled
    }
}

struct PutConfigurationSetSendingOptionsInputBody: Swift.Equatable {
    let sendingEnabled: Swift.Bool
}

extension PutConfigurationSetSendingOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendingEnabled) ?? false
        sendingEnabled = sendingEnabledDecoded
    }
}

extension PutConfigurationSetSendingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetSendingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutConfigurationSetSendingOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetSendingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetSendingOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutConfigurationSetSuppressionOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedReasons = "SuppressedReasons"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let suppressedReasons = suppressedReasons {
            var suppressedReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suppressedReasons)
            for suppressionlistreason0 in suppressedReasons {
                try suppressedReasonsContainer.encode(suppressionlistreason0.rawValue)
            }
        }
    }
}

extension PutConfigurationSetSuppressionOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/suppression-options"
    }
}

/// A request to change the account suppression list preferences for a specific configuration set.
public struct PutConfigurationSetSuppressionOptionsInput: Swift.Equatable {
    /// The name of the configuration set to change the suppression list preferences for.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// A list that contains the reasons that email addresses are automatically added to the suppression list for your account. This list can contain any or all of the following:
    ///
    /// * COMPLAINT – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a complaint.
    ///
    /// * BOUNCE – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a hard bounce.
    public var suppressedReasons: [SESv2ClientTypes.SuppressionListReason]?

    public init (
        configurationSetName: Swift.String? = nil,
        suppressedReasons: [SESv2ClientTypes.SuppressionListReason]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.suppressedReasons = suppressedReasons
    }
}

struct PutConfigurationSetSuppressionOptionsInputBody: Swift.Equatable {
    let suppressedReasons: [SESv2ClientTypes.SuppressionListReason]?
}

extension PutConfigurationSetSuppressionOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedReasons = "SuppressedReasons"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedReasonsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.SuppressionListReason?].self, forKey: .suppressedReasons)
        var suppressedReasonsDecoded0:[SESv2ClientTypes.SuppressionListReason]? = nil
        if let suppressedReasonsContainer = suppressedReasonsContainer {
            suppressedReasonsDecoded0 = [SESv2ClientTypes.SuppressionListReason]()
            for enum0 in suppressedReasonsContainer {
                if let enum0 = enum0 {
                    suppressedReasonsDecoded0?.append(enum0)
                }
            }
        }
        suppressedReasons = suppressedReasonsDecoded0
    }
}

extension PutConfigurationSetSuppressionOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetSuppressionOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutConfigurationSetSuppressionOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetSuppressionOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetSuppressionOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutConfigurationSetTrackingOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRedirectDomain = "CustomRedirectDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customRedirectDomain = self.customRedirectDomain {
            try encodeContainer.encode(customRedirectDomain, forKey: .customRedirectDomain)
        }
    }
}

extension PutConfigurationSetTrackingOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/tracking-options"
    }
}

/// A request to add a custom domain for tracking open and click events to a configuration set.
public struct PutConfigurationSetTrackingOptionsInput: Swift.Equatable {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The domain to use to track open and click events.
    public var customRedirectDomain: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        customRedirectDomain: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.customRedirectDomain = customRedirectDomain
    }
}

struct PutConfigurationSetTrackingOptionsInputBody: Swift.Equatable {
    let customRedirectDomain: Swift.String?
}

extension PutConfigurationSetTrackingOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRedirectDomain = "CustomRedirectDomain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRedirectDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customRedirectDomain)
        customRedirectDomain = customRedirectDomainDecoded
    }
}

extension PutConfigurationSetTrackingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetTrackingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutConfigurationSetTrackingOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetTrackingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetTrackingOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutConfigurationSetVdmOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vdmOptions = "VdmOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let vdmOptions = self.vdmOptions {
            try encodeContainer.encode(vdmOptions, forKey: .vdmOptions)
        }
    }
}

extension PutConfigurationSetVdmOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/vdm-options"
    }
}

/// A request to add specific VDM settings to a configuration set.
public struct PutConfigurationSetVdmOptionsInput: Swift.Equatable {
    /// The name of the configuration set.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// The VDM options to apply to the configuration set.
    public var vdmOptions: SESv2ClientTypes.VdmOptions?

    public init (
        configurationSetName: Swift.String? = nil,
        vdmOptions: SESv2ClientTypes.VdmOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.vdmOptions = vdmOptions
    }
}

struct PutConfigurationSetVdmOptionsInputBody: Swift.Equatable {
    let vdmOptions: SESv2ClientTypes.VdmOptions?
}

extension PutConfigurationSetVdmOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vdmOptions = "VdmOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vdmOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.VdmOptions.self, forKey: .vdmOptions)
        vdmOptions = vdmOptionsDecoded
    }
}

extension PutConfigurationSetVdmOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetVdmOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutConfigurationSetVdmOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetVdmOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutConfigurationSetVdmOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutDedicatedIpInPoolInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationPoolName = "DestinationPoolName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationPoolName = self.destinationPoolName {
            try encodeContainer.encode(destinationPoolName, forKey: .destinationPoolName)
        }
    }
}

extension PutDedicatedIpInPoolInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let ip = ip else {
            return nil
        }
        return "/v2/email/dedicated-ips/\(ip.urlPercentEncoding())/pool"
    }
}

/// A request to move a dedicated IP address to a dedicated IP pool.
public struct PutDedicatedIpInPoolInput: Swift.Equatable {
    /// The name of the IP pool that you want to add the dedicated IP address to. You have to specify an IP pool that already exists.
    /// This member is required.
    public var destinationPoolName: Swift.String?
    /// The IP address that you want to move to the dedicated IP pool. The value you specify has to be a dedicated IP address that's associated with your Amazon Web Services account.
    /// This member is required.
    public var ip: Swift.String?

    public init (
        destinationPoolName: Swift.String? = nil,
        ip: Swift.String? = nil
    )
    {
        self.destinationPoolName = destinationPoolName
        self.ip = ip
    }
}

struct PutDedicatedIpInPoolInputBody: Swift.Equatable {
    let destinationPoolName: Swift.String?
}

extension PutDedicatedIpInPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationPoolName = "DestinationPoolName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationPoolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPoolName)
        destinationPoolName = destinationPoolNameDecoded
    }
}

extension PutDedicatedIpInPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDedicatedIpInPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutDedicatedIpInPoolOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDedicatedIpInPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutDedicatedIpInPoolOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutDedicatedIpWarmupAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case warmupPercentage = "WarmupPercentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let warmupPercentage = self.warmupPercentage {
            try encodeContainer.encode(warmupPercentage, forKey: .warmupPercentage)
        }
    }
}

extension PutDedicatedIpWarmupAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let ip = ip else {
            return nil
        }
        return "/v2/email/dedicated-ips/\(ip.urlPercentEncoding())/warmup"
    }
}

/// A request to change the warm-up attributes for a dedicated IP address. This operation is useful when you want to resume the warm-up process for an existing IP address.
public struct PutDedicatedIpWarmupAttributesInput: Swift.Equatable {
    /// The dedicated IP address that you want to update the warm-up attributes for.
    /// This member is required.
    public var ip: Swift.String?
    /// The warm-up percentage that you want to associate with the dedicated IP address.
    /// This member is required.
    public var warmupPercentage: Swift.Int?

    public init (
        ip: Swift.String? = nil,
        warmupPercentage: Swift.Int? = nil
    )
    {
        self.ip = ip
        self.warmupPercentage = warmupPercentage
    }
}

struct PutDedicatedIpWarmupAttributesInputBody: Swift.Equatable {
    let warmupPercentage: Swift.Int?
}

extension PutDedicatedIpWarmupAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case warmupPercentage = "WarmupPercentage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let warmupPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warmupPercentage)
        warmupPercentage = warmupPercentageDecoded
    }
}

extension PutDedicatedIpWarmupAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDedicatedIpWarmupAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutDedicatedIpWarmupAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDedicatedIpWarmupAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutDedicatedIpWarmupAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutDeliverabilityDashboardOptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardEnabled = "DashboardEnabled"
        case subscribedDomains = "SubscribedDomains"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if dashboardEnabled != false {
            try encodeContainer.encode(dashboardEnabled, forKey: .dashboardEnabled)
        }
        if let subscribedDomains = subscribedDomains {
            var subscribedDomainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subscribedDomains)
            for domaindeliverabilitytrackingoption0 in subscribedDomains {
                try subscribedDomainsContainer.encode(domaindeliverabilitytrackingoption0)
            }
        }
    }
}

extension PutDeliverabilityDashboardOptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/deliverability-dashboard"
    }
}

/// Enable or disable the Deliverability dashboard. When you enable the Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email using Amazon SES API v2. You also gain the ability to perform predictive inbox placement tests. When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon SES and other Amazon Web Services services. For more information about the features and cost of a Deliverability dashboard subscription, see [Amazon Pinpoint Pricing](http://aws.amazon.com/pinpoint/pricing/).
public struct PutDeliverabilityDashboardOptionInput: Swift.Equatable {
    /// Specifies whether to enable the Deliverability dashboard. To enable the dashboard, set this value to true.
    /// This member is required.
    public var dashboardEnabled: Swift.Bool
    /// An array of objects, one for each verified domain that you use to send email and enabled the Deliverability dashboard for.
    public var subscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]?

    public init (
        dashboardEnabled: Swift.Bool = false,
        subscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]? = nil
    )
    {
        self.dashboardEnabled = dashboardEnabled
        self.subscribedDomains = subscribedDomains
    }
}

struct PutDeliverabilityDashboardOptionInputBody: Swift.Equatable {
    let dashboardEnabled: Swift.Bool
    let subscribedDomains: [SESv2ClientTypes.DomainDeliverabilityTrackingOption]?
}

extension PutDeliverabilityDashboardOptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardEnabled = "DashboardEnabled"
        case subscribedDomains = "SubscribedDomains"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dashboardEnabled) ?? false
        dashboardEnabled = dashboardEnabledDecoded
        let subscribedDomainsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.DomainDeliverabilityTrackingOption?].self, forKey: .subscribedDomains)
        var subscribedDomainsDecoded0:[SESv2ClientTypes.DomainDeliverabilityTrackingOption]? = nil
        if let subscribedDomainsContainer = subscribedDomainsContainer {
            subscribedDomainsDecoded0 = [SESv2ClientTypes.DomainDeliverabilityTrackingOption]()
            for structure0 in subscribedDomainsContainer {
                if let structure0 = structure0 {
                    subscribedDomainsDecoded0?.append(structure0)
                }
            }
        }
        subscribedDomains = subscribedDomainsDecoded0
    }
}

extension PutDeliverabilityDashboardOptionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDeliverabilityDashboardOptionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutDeliverabilityDashboardOptionOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDeliverabilityDashboardOptionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// A response that indicates whether the Deliverability dashboard is enabled.
public struct PutDeliverabilityDashboardOptionOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutEmailIdentityConfigurationSetAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetName = self.configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
    }
}

extension PutEmailIdentityConfigurationSetAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/configuration-set"
    }
}

/// A request to associate a configuration set with an email identity.
public struct PutEmailIdentityConfigurationSetAttributesInput: Swift.Equatable {
    /// The configuration set to associate with an email identity.
    public var configurationSetName: Swift.String?
    /// The email address or domain to associate with a configuration set.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        emailIdentity: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.emailIdentity = emailIdentity
    }
}

struct PutEmailIdentityConfigurationSetAttributesInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
}

extension PutEmailIdentityConfigurationSetAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension PutEmailIdentityConfigurationSetAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEmailIdentityConfigurationSetAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutEmailIdentityConfigurationSetAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEmailIdentityConfigurationSetAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct PutEmailIdentityConfigurationSetAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutEmailIdentityDkimAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signingEnabled = "SigningEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if signingEnabled != false {
            try encodeContainer.encode(signingEnabled, forKey: .signingEnabled)
        }
    }
}

extension PutEmailIdentityDkimAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/dkim"
    }
}

/// A request to enable or disable DKIM signing of email that you send from an email identity.
public struct PutEmailIdentityDkimAttributesInput: Swift.Equatable {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// Sets the DKIM signing configuration for the identity. When you set this value true, then the messages that are sent from the identity are signed using DKIM. If you set this value to false, your messages are sent without DKIM signing.
    public var signingEnabled: Swift.Bool

    public init (
        emailIdentity: Swift.String? = nil,
        signingEnabled: Swift.Bool = false
    )
    {
        self.emailIdentity = emailIdentity
        self.signingEnabled = signingEnabled
    }
}

struct PutEmailIdentityDkimAttributesInputBody: Swift.Equatable {
    let signingEnabled: Swift.Bool
}

extension PutEmailIdentityDkimAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signingEnabled = "SigningEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .signingEnabled) ?? false
        signingEnabled = signingEnabledDecoded
    }
}

extension PutEmailIdentityDkimAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEmailIdentityDkimAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutEmailIdentityDkimAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEmailIdentityDkimAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutEmailIdentityDkimAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutEmailIdentityDkimSigningAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signingAttributes = "SigningAttributes"
        case signingAttributesOrigin = "SigningAttributesOrigin"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let signingAttributes = self.signingAttributes {
            try encodeContainer.encode(signingAttributes, forKey: .signingAttributes)
        }
        if let signingAttributesOrigin = self.signingAttributesOrigin {
            try encodeContainer.encode(signingAttributesOrigin.rawValue, forKey: .signingAttributesOrigin)
        }
    }
}

extension PutEmailIdentityDkimSigningAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        return "/v1/email/identities/\(emailIdentity.urlPercentEncoding())/dkim/signing"
    }
}

/// A request to change the DKIM attributes for an email identity.
public struct PutEmailIdentityDkimSigningAttributesInput: Swift.Equatable {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// An object that contains information about the private key and selector that you want to use to configure DKIM for the identity for Bring Your Own DKIM (BYODKIM) for the identity, or, configures the key length to be used for [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html).
    public var signingAttributes: SESv2ClientTypes.DkimSigningAttributes?
    /// The method to use to configure DKIM for the identity. There are the following possible values:
    ///
    /// * AWS_SES – Configure DKIM for the identity by using [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html).
    ///
    /// * EXTERNAL – Configure DKIM for the identity by using Bring Your Own DKIM (BYODKIM).
    /// This member is required.
    public var signingAttributesOrigin: SESv2ClientTypes.DkimSigningAttributesOrigin?

    public init (
        emailIdentity: Swift.String? = nil,
        signingAttributes: SESv2ClientTypes.DkimSigningAttributes? = nil,
        signingAttributesOrigin: SESv2ClientTypes.DkimSigningAttributesOrigin? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.signingAttributes = signingAttributes
        self.signingAttributesOrigin = signingAttributesOrigin
    }
}

struct PutEmailIdentityDkimSigningAttributesInputBody: Swift.Equatable {
    let signingAttributesOrigin: SESv2ClientTypes.DkimSigningAttributesOrigin?
    let signingAttributes: SESv2ClientTypes.DkimSigningAttributes?
}

extension PutEmailIdentityDkimSigningAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signingAttributes = "SigningAttributes"
        case signingAttributesOrigin = "SigningAttributesOrigin"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingAttributesOriginDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DkimSigningAttributesOrigin.self, forKey: .signingAttributesOrigin)
        signingAttributesOrigin = signingAttributesOriginDecoded
        let signingAttributesDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DkimSigningAttributes.self, forKey: .signingAttributes)
        signingAttributes = signingAttributesDecoded
    }
}

extension PutEmailIdentityDkimSigningAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEmailIdentityDkimSigningAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutEmailIdentityDkimSigningAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEmailIdentityDkimSigningAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutEmailIdentityDkimSigningAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dkimStatus = output.dkimStatus
            self.dkimTokens = output.dkimTokens
        } else {
            self.dkimStatus = nil
            self.dkimTokens = nil
        }
    }
}

/// If the action is successful, the service sends back an HTTP 200 response. The following data is returned in JSON format by the service.
public struct PutEmailIdentityDkimSigningAttributesOutputResponse: Swift.Equatable {
    /// The DKIM authentication status of the identity. Amazon SES determines the authentication status by searching for specific records in the DNS configuration for your domain. If you used [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html) to set up DKIM authentication, Amazon SES tries to find three unique CNAME records in the DNS configuration for your domain. If you provided a public key to perform DKIM authentication, Amazon SES tries to find a TXT record that uses the selector that you specified. The value of the TXT record must be a public key that's paired with the private key that you specified in the process of creating the identity. The status can be one of the following:
    ///
    /// * PENDING – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.
    ///
    /// * SUCCESS – The verification process completed successfully.
    ///
    /// * FAILED – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.
    ///
    /// * TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.
    ///
    /// * NOT_STARTED – The DKIM verification process hasn't been initiated for the domain.
    public var dkimStatus: SESv2ClientTypes.DkimStatus?
    /// If you used [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html) to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete. If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector that's associated with your public key. Regardless of the DKIM authentication method you use, Amazon SES searches for the appropriate records in the DNS configuration of the domain for up to 72 hours.
    public var dkimTokens: [Swift.String]?

    public init (
        dkimStatus: SESv2ClientTypes.DkimStatus? = nil,
        dkimTokens: [Swift.String]? = nil
    )
    {
        self.dkimStatus = dkimStatus
        self.dkimTokens = dkimTokens
    }
}

struct PutEmailIdentityDkimSigningAttributesOutputResponseBody: Swift.Equatable {
    let dkimStatus: SESv2ClientTypes.DkimStatus?
    let dkimTokens: [Swift.String]?
}

extension PutEmailIdentityDkimSigningAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimStatus = "DkimStatus"
        case dkimTokens = "DkimTokens"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dkimStatusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DkimStatus.self, forKey: .dkimStatus)
        dkimStatus = dkimStatusDecoded
        let dkimTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dkimTokens)
        var dkimTokensDecoded0:[Swift.String]? = nil
        if let dkimTokensContainer = dkimTokensContainer {
            dkimTokensDecoded0 = [Swift.String]()
            for string0 in dkimTokensContainer {
                if let string0 = string0 {
                    dkimTokensDecoded0?.append(string0)
                }
            }
        }
        dkimTokens = dkimTokensDecoded0
    }
}

extension PutEmailIdentityFeedbackAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailForwardingEnabled = "EmailForwardingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if emailForwardingEnabled != false {
            try encodeContainer.encode(emailForwardingEnabled, forKey: .emailForwardingEnabled)
        }
    }
}

extension PutEmailIdentityFeedbackAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/feedback"
    }
}

/// A request to set the attributes that control how bounce and complaint events are processed.
public struct PutEmailIdentityFeedbackAttributesInput: Swift.Equatable {
    /// Sets the feedback forwarding configuration for the identity. If the value is true, you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the Return-Path header of the original email. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).
    public var emailForwardingEnabled: Swift.Bool
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?

    public init (
        emailForwardingEnabled: Swift.Bool = false,
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailForwardingEnabled = emailForwardingEnabled
        self.emailIdentity = emailIdentity
    }
}

struct PutEmailIdentityFeedbackAttributesInputBody: Swift.Equatable {
    let emailForwardingEnabled: Swift.Bool
}

extension PutEmailIdentityFeedbackAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailForwardingEnabled = "EmailForwardingEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailForwardingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .emailForwardingEnabled) ?? false
        emailForwardingEnabled = emailForwardingEnabledDecoded
    }
}

extension PutEmailIdentityFeedbackAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEmailIdentityFeedbackAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutEmailIdentityFeedbackAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEmailIdentityFeedbackAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutEmailIdentityFeedbackAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutEmailIdentityMailFromAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMxFailure = "BehaviorOnMxFailure"
        case mailFromDomain = "MailFromDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behaviorOnMxFailure = self.behaviorOnMxFailure {
            try encodeContainer.encode(behaviorOnMxFailure.rawValue, forKey: .behaviorOnMxFailure)
        }
        if let mailFromDomain = self.mailFromDomain {
            try encodeContainer.encode(mailFromDomain, forKey: .mailFromDomain)
        }
    }
}

extension PutEmailIdentityMailFromAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/mail-from"
    }
}

/// A request to configure the custom MAIL FROM domain for a verified identity.
public struct PutEmailIdentityMailFromAttributesInput: Swift.Equatable {
    /// The action to take if the required MX record isn't found when you send an email. When you set this value to UseDefaultValue, the mail is sent using amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage, the Amazon SES API v2 returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
    public var behaviorOnMxFailure: SESv2ClientTypes.BehaviorOnMxFailure?
    /// The verified email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must meet the following criteria:
    ///
    /// * It has to be a subdomain of the verified identity.
    ///
    /// * It can't be used to receive email.
    ///
    /// * It can't be used in a "From" address if the MAIL FROM domain is a destination for feedback forwarding emails.
    public var mailFromDomain: Swift.String?

    public init (
        behaviorOnMxFailure: SESv2ClientTypes.BehaviorOnMxFailure? = nil,
        emailIdentity: Swift.String? = nil,
        mailFromDomain: Swift.String? = nil
    )
    {
        self.behaviorOnMxFailure = behaviorOnMxFailure
        self.emailIdentity = emailIdentity
        self.mailFromDomain = mailFromDomain
    }
}

struct PutEmailIdentityMailFromAttributesInputBody: Swift.Equatable {
    let mailFromDomain: Swift.String?
    let behaviorOnMxFailure: SESv2ClientTypes.BehaviorOnMxFailure?
}

extension PutEmailIdentityMailFromAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMxFailure = "BehaviorOnMxFailure"
        case mailFromDomain = "MailFromDomain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailFromDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mailFromDomain)
        mailFromDomain = mailFromDomainDecoded
        let behaviorOnMxFailureDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.BehaviorOnMxFailure.self, forKey: .behaviorOnMxFailure)
        behaviorOnMxFailure = behaviorOnMxFailureDecoded
    }
}

extension PutEmailIdentityMailFromAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEmailIdentityMailFromAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutEmailIdentityMailFromAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEmailIdentityMailFromAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutEmailIdentityMailFromAttributesOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutSuppressedDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
        case reason = "Reason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailAddress = self.emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason.rawValue, forKey: .reason)
        }
    }
}

extension PutSuppressedDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/suppression/addresses"
    }
}

/// A request to add an email destination to the suppression list for your account.
public struct PutSuppressedDestinationInput: Swift.Equatable {
    /// The email address that should be added to the suppression list for your account.
    /// This member is required.
    public var emailAddress: Swift.String?
    /// The factors that should cause the email address to be added to the suppression list for your account.
    /// This member is required.
    public var reason: SESv2ClientTypes.SuppressionListReason?

    public init (
        emailAddress: Swift.String? = nil,
        reason: SESv2ClientTypes.SuppressionListReason? = nil
    )
    {
        self.emailAddress = emailAddress
        self.reason = reason
    }
}

struct PutSuppressedDestinationInputBody: Swift.Equatable {
    let emailAddress: Swift.String?
    let reason: SESv2ClientTypes.SuppressionListReason?
}

extension PutSuppressedDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
        case reason = "Reason"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SuppressionListReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension PutSuppressedDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutSuppressedDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutSuppressedDestinationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutSuppressedDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct PutSuppressedDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension SESv2ClientTypes {
    public enum QueryErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessDenied
        case internalFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryErrorCode] {
            return [
                .accessDenied,
                .internalFailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "ACCESS_DENIED"
            case .internalFailure: return "INTERNAL_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QueryErrorCode(rawValue: rawValue) ?? QueryErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.RawMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = self.data {
            try encodeContainer.encode(data.base64EncodedString(), forKey: .data)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .data)
        data = dataDecoded
    }
}

extension SESv2ClientTypes {
    /// Represents the raw content of an email message.
    public struct RawMessage: Swift.Equatable {
        /// The raw email message. The message has to meet the following criteria:
        ///
        /// * The message has to contain a header and a body, separated by one blank line.
        ///
        /// * All of the required header fields must be present in the message.
        ///
        /// * Each part of a multipart MIME message must be formatted properly.
        ///
        /// * Attachments must be in a file format that the Amazon SES supports.
        ///
        /// * The entire message must be Base64 encoded.
        ///
        /// * If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients' email clients render the message properly.
        ///
        /// * The length of any single line of text in the message can't exceed 1,000 characters. This restriction is defined in [RFC 5321](https://tools.ietf.org/html/rfc5321).
        /// This member is required.
        public var data: ClientRuntime.Data?

        public init (
            data: ClientRuntime.Data? = nil
        )
        {
            self.data = data
        }
    }

}

extension SESv2ClientTypes.Recommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case description = "Description"
        case impact = "Impact"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case resourceArn = "ResourceArn"
        case status = "Status"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTimestamp = self.createdTimestamp {
            try encodeContainer.encodeTimestamp(createdTimestamp, format: .epochSeconds, forKey: .createdTimestamp)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let impact = self.impact {
            try encodeContainer.encode(impact.rawValue, forKey: .impact)
        }
        if let lastUpdatedTimestamp = self.lastUpdatedTimestamp {
            try encodeContainer.encodeTimestamp(lastUpdatedTimestamp, format: .epochSeconds, forKey: .lastUpdatedTimestamp)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.RecommendationType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.RecommendationStatus.self, forKey: .status)
        status = statusDecoded
        let createdTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
        let impactDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.RecommendationImpact.self, forKey: .impact)
        impact = impactDecoded
    }
}

extension SESv2ClientTypes {
    /// A recommendation generated for your account.
    public struct Recommendation: Swift.Equatable {
        /// The first time this issue was encountered and the recommendation was generated.
        public var createdTimestamp: ClientRuntime.Date?
        /// The recommendation description / disambiguator - e.g. DKIM1 and DKIM2 are different recommendations about your DKIM setup.
        public var description: Swift.String?
        /// The recommendation impact, with values like HIGH or LOW.
        public var impact: SESv2ClientTypes.RecommendationImpact?
        /// The last time the recommendation was updated.
        public var lastUpdatedTimestamp: ClientRuntime.Date?
        /// The resource affected by the recommendation, with values like arn:aws:ses:us-east-1:123456789012:identity/example.com.
        public var resourceArn: Swift.String?
        /// The recommendation status, with values like OPEN or FIXED.
        public var status: SESv2ClientTypes.RecommendationStatus?
        /// The recommendation type, with values like DKIM, SPF or DMARC.
        public var type: SESv2ClientTypes.RecommendationType?

        public init (
            createdTimestamp: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            impact: SESv2ClientTypes.RecommendationImpact? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            resourceArn: Swift.String? = nil,
            status: SESv2ClientTypes.RecommendationStatus? = nil,
            type: SESv2ClientTypes.RecommendationType? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.description = description
            self.impact = impact
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.resourceArn = resourceArn
            self.status = status
            self.type = type
        }
    }

}

extension SESv2ClientTypes {
    public enum RecommendationImpact: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationImpact] {
            return [
                .high,
                .low,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecommendationImpact(rawValue: rawValue) ?? RecommendationImpact.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes {
    public enum RecommendationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fixed
        case `open`
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationStatus] {
            return [
                .fixed,
                .open,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fixed: return "FIXED"
            case .open: return "OPEN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecommendationStatus(rawValue: rawValue) ?? RecommendationStatus.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes {
    public enum RecommendationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dkim
        case dmarc
        case spf
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationType] {
            return [
                .dkim,
                .dmarc,
                .spf,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dkim: return "DKIM"
            case .dmarc: return "DMARC"
            case .spf: return "SPF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecommendationType(rawValue: rawValue) ?? RecommendationType.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.ReplacementEmailContent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replacementTemplate = "ReplacementTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let replacementTemplate = self.replacementTemplate {
            try encodeContainer.encode(replacementTemplate, forKey: .replacementTemplate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replacementTemplateDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ReplacementTemplate.self, forKey: .replacementTemplate)
        replacementTemplate = replacementTemplateDecoded
    }
}

extension SESv2ClientTypes {
    /// The ReplaceEmailContent object to be used for a specific BulkEmailEntry. The ReplacementTemplate can be specified within this object.
    public struct ReplacementEmailContent: Swift.Equatable {
        /// The ReplacementTemplate associated with ReplacementEmailContent.
        public var replacementTemplate: SESv2ClientTypes.ReplacementTemplate?

        public init (
            replacementTemplate: SESv2ClientTypes.ReplacementTemplate? = nil
        )
        {
            self.replacementTemplate = replacementTemplate
        }
    }

}

extension SESv2ClientTypes.ReplacementTemplate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replacementTemplateData = "ReplacementTemplateData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let replacementTemplateData = self.replacementTemplateData {
            try encodeContainer.encode(replacementTemplateData, forKey: .replacementTemplateData)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replacementTemplateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replacementTemplateData)
        replacementTemplateData = replacementTemplateDataDecoded
    }
}

extension SESv2ClientTypes {
    /// An object which contains ReplacementTemplateData to be used for a specific BulkEmailEntry.
    public struct ReplacementTemplate: Swift.Equatable {
        /// A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
        public var replacementTemplateData: Swift.String?

        public init (
            replacementTemplateData: Swift.String? = nil
        )
        {
            self.replacementTemplateData = replacementTemplateData
        }
    }

}

extension SESv2ClientTypes.ReputationOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastFreshStart = "LastFreshStart"
        case reputationMetricsEnabled = "ReputationMetricsEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastFreshStart = self.lastFreshStart {
            try encodeContainer.encodeTimestamp(lastFreshStart, format: .epochSeconds, forKey: .lastFreshStart)
        }
        if reputationMetricsEnabled != false {
            try encodeContainer.encode(reputationMetricsEnabled, forKey: .reputationMetricsEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reputationMetricsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reputationMetricsEnabled) ?? false
        reputationMetricsEnabled = reputationMetricsEnabledDecoded
        let lastFreshStartDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastFreshStart)
        lastFreshStart = lastFreshStartDecoded
    }
}

extension SESv2ClientTypes {
    /// Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current Amazon Web Services Region.
    public struct ReputationOptions: Swift.Equatable {
        /// The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.
        public var lastFreshStart: ClientRuntime.Date?
        /// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
        public var reputationMetricsEnabled: Swift.Bool

        public init (
            lastFreshStart: ClientRuntime.Date? = nil,
            reputationMetricsEnabled: Swift.Bool = false
        )
        {
            self.lastFreshStart = lastFreshStart
            self.reputationMetricsEnabled = reputationMetricsEnabled
        }
    }

}

extension SESv2ClientTypes.ReviewDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caseId = "CaseId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let caseId = self.caseId {
            try encodeContainer.encode(caseId, forKey: .caseId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ReviewStatus.self, forKey: .status)
        status = statusDecoded
        let caseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caseId)
        caseId = caseIdDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about your account details review.
    public struct ReviewDetails: Swift.Equatable {
        /// The associated support center case ID (if any).
        public var caseId: Swift.String?
        /// The status of the latest review of your account. The status can be one of the following:
        ///
        /// * PENDING – We have received your appeal and are in the process of reviewing it.
        ///
        /// * GRANTED – Your appeal has been reviewed and your production access has been granted.
        ///
        /// * DENIED – Your appeal has been reviewed and your production access has been denied.
        ///
        /// * FAILED – An internal error occurred and we didn't receive your appeal. You can submit your appeal again.
        public var status: SESv2ClientTypes.ReviewStatus?

        public init (
            caseId: Swift.String? = nil,
            status: SESv2ClientTypes.ReviewStatus? = nil
        )
        {
            self.caseId = caseId
            self.status = status
        }
    }

}

extension SESv2ClientTypes {
    public enum ReviewStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case denied
        case failed
        case granted
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ReviewStatus] {
            return [
                .denied,
                .failed,
                .granted,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .denied: return "DENIED"
            case .failed: return "FAILED"
            case .granted: return "GRANTED"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReviewStatus(rawValue: rawValue) ?? ReviewStatus.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes {
    public enum ScalingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case managed
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingMode] {
            return [
                .managed,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .managed: return "MANAGED"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalingMode(rawValue: rawValue) ?? ScalingMode.sdkUnknown(rawValue)
        }
    }
}

extension SendBulkEmailInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bulkEmailEntries = "BulkEmailEntries"
        case configurationSetName = "ConfigurationSetName"
        case defaultContent = "DefaultContent"
        case defaultEmailTags = "DefaultEmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case feedbackForwardingEmailAddressIdentityArn = "FeedbackForwardingEmailAddressIdentityArn"
        case fromEmailAddress = "FromEmailAddress"
        case fromEmailAddressIdentityArn = "FromEmailAddressIdentityArn"
        case replyToAddresses = "ReplyToAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bulkEmailEntries = bulkEmailEntries {
            var bulkEmailEntriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bulkEmailEntries)
            for bulkemailentry0 in bulkEmailEntries {
                try bulkEmailEntriesContainer.encode(bulkemailentry0)
            }
        }
        if let configurationSetName = self.configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let defaultContent = self.defaultContent {
            try encodeContainer.encode(defaultContent, forKey: .defaultContent)
        }
        if let defaultEmailTags = defaultEmailTags {
            var defaultEmailTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .defaultEmailTags)
            for messagetag0 in defaultEmailTags {
                try defaultEmailTagsContainer.encode(messagetag0)
            }
        }
        if let feedbackForwardingEmailAddress = self.feedbackForwardingEmailAddress {
            try encodeContainer.encode(feedbackForwardingEmailAddress, forKey: .feedbackForwardingEmailAddress)
        }
        if let feedbackForwardingEmailAddressIdentityArn = self.feedbackForwardingEmailAddressIdentityArn {
            try encodeContainer.encode(feedbackForwardingEmailAddressIdentityArn, forKey: .feedbackForwardingEmailAddressIdentityArn)
        }
        if let fromEmailAddress = self.fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let fromEmailAddressIdentityArn = self.fromEmailAddressIdentityArn {
            try encodeContainer.encode(fromEmailAddressIdentityArn, forKey: .fromEmailAddressIdentityArn)
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replyToAddresses)
            for emailaddress0 in replyToAddresses {
                try replyToAddressesContainer.encode(emailaddress0)
            }
        }
    }
}

extension SendBulkEmailInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/outbound-bulk-emails"
    }
}

/// Represents a request to send email messages to multiple destinations using Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct SendBulkEmailInput: Swift.Equatable {
    /// The list of bulk email entry objects.
    /// This member is required.
    public var bulkEmailEntries: [SESv2ClientTypes.BulkEmailEntry]?
    /// The name of the configuration set to use when sending the email.
    public var configurationSetName: Swift.String?
    /// An object that contains the body of the message. You can specify a template message.
    /// This member is required.
    public var defaultContent: SESv2ClientTypes.BulkEmailContent?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send using the SendEmail operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    public var defaultEmailTags: [SESv2ClientTypes.MessageTag]?
    /// The address that you want bounce and complaint notifications to be sent to.
    public var feedbackForwardingEmailAddress: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the FeedbackForwardingEmailAddress parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the FeedbackForwardingEmailAddressIdentityArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the FeedbackForwardingEmailAddress to be feedback@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
    public var feedbackForwardingEmailAddressIdentityArn: Swift.String?
    /// The email address to use as the "From" address for the email. The address that you specify has to be verified.
    public var fromEmailAddress: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the FromEmailAddress parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use sender@example.com, then you would specify the FromEmailAddressIdentityArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the FromEmailAddress to be sender@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
    public var fromEmailAddressIdentityArn: Swift.String?
    /// The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.
    public var replyToAddresses: [Swift.String]?

    public init (
        bulkEmailEntries: [SESv2ClientTypes.BulkEmailEntry]? = nil,
        configurationSetName: Swift.String? = nil,
        defaultContent: SESv2ClientTypes.BulkEmailContent? = nil,
        defaultEmailTags: [SESv2ClientTypes.MessageTag]? = nil,
        feedbackForwardingEmailAddress: Swift.String? = nil,
        feedbackForwardingEmailAddressIdentityArn: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        fromEmailAddressIdentityArn: Swift.String? = nil,
        replyToAddresses: [Swift.String]? = nil
    )
    {
        self.bulkEmailEntries = bulkEmailEntries
        self.configurationSetName = configurationSetName
        self.defaultContent = defaultContent
        self.defaultEmailTags = defaultEmailTags
        self.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress
        self.feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArn
        self.fromEmailAddress = fromEmailAddress
        self.fromEmailAddressIdentityArn = fromEmailAddressIdentityArn
        self.replyToAddresses = replyToAddresses
    }
}

struct SendBulkEmailInputBody: Swift.Equatable {
    let fromEmailAddress: Swift.String?
    let fromEmailAddressIdentityArn: Swift.String?
    let replyToAddresses: [Swift.String]?
    let feedbackForwardingEmailAddress: Swift.String?
    let feedbackForwardingEmailAddressIdentityArn: Swift.String?
    let defaultEmailTags: [SESv2ClientTypes.MessageTag]?
    let defaultContent: SESv2ClientTypes.BulkEmailContent?
    let bulkEmailEntries: [SESv2ClientTypes.BulkEmailEntry]?
    let configurationSetName: Swift.String?
}

extension SendBulkEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bulkEmailEntries = "BulkEmailEntries"
        case configurationSetName = "ConfigurationSetName"
        case defaultContent = "DefaultContent"
        case defaultEmailTags = "DefaultEmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case feedbackForwardingEmailAddressIdentityArn = "FeedbackForwardingEmailAddressIdentityArn"
        case fromEmailAddress = "FromEmailAddress"
        case fromEmailAddressIdentityArn = "FromEmailAddressIdentityArn"
        case replyToAddresses = "ReplyToAddresses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let fromEmailAddressIdentityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddressIdentityArn)
        fromEmailAddressIdentityArn = fromEmailAddressIdentityArnDecoded
        let replyToAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .replyToAddresses)
        var replyToAddressesDecoded0:[Swift.String]? = nil
        if let replyToAddressesContainer = replyToAddressesContainer {
            replyToAddressesDecoded0 = [Swift.String]()
            for string0 in replyToAddressesContainer {
                if let string0 = string0 {
                    replyToAddressesDecoded0?.append(string0)
                }
            }
        }
        replyToAddresses = replyToAddressesDecoded0
        let feedbackForwardingEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackForwardingEmailAddress)
        feedbackForwardingEmailAddress = feedbackForwardingEmailAddressDecoded
        let feedbackForwardingEmailAddressIdentityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackForwardingEmailAddressIdentityArn)
        feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArnDecoded
        let defaultEmailTagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.MessageTag?].self, forKey: .defaultEmailTags)
        var defaultEmailTagsDecoded0:[SESv2ClientTypes.MessageTag]? = nil
        if let defaultEmailTagsContainer = defaultEmailTagsContainer {
            defaultEmailTagsDecoded0 = [SESv2ClientTypes.MessageTag]()
            for structure0 in defaultEmailTagsContainer {
                if let structure0 = structure0 {
                    defaultEmailTagsDecoded0?.append(structure0)
                }
            }
        }
        defaultEmailTags = defaultEmailTagsDecoded0
        let defaultContentDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.BulkEmailContent.self, forKey: .defaultContent)
        defaultContent = defaultContentDecoded
        let bulkEmailEntriesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.BulkEmailEntry?].self, forKey: .bulkEmailEntries)
        var bulkEmailEntriesDecoded0:[SESv2ClientTypes.BulkEmailEntry]? = nil
        if let bulkEmailEntriesContainer = bulkEmailEntriesContainer {
            bulkEmailEntriesDecoded0 = [SESv2ClientTypes.BulkEmailEntry]()
            for structure0 in bulkEmailEntriesContainer {
                if let structure0 = structure0 {
                    bulkEmailEntriesDecoded0?.append(structure0)
                }
            }
        }
        bulkEmailEntries = bulkEmailEntriesDecoded0
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension SendBulkEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendBulkEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSuspendedException" : self = .accountSuspendedException(try AccountSuspendedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SendingPausedException" : self = .sendingPausedException(try SendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendBulkEmailOutputError: Swift.Error, Swift.Equatable {
    case accountSuspendedException(AccountSuspendedException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case notFoundException(NotFoundException)
    case sendingPausedException(SendingPausedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendBulkEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SendBulkEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bulkEmailEntryResults = output.bulkEmailEntryResults
        } else {
            self.bulkEmailEntryResults = nil
        }
    }
}

/// The following data is returned in JSON format by the service.
public struct SendBulkEmailOutputResponse: Swift.Equatable {
    /// One object per intended recipient. Check each response object and retry any messages with a failure status.
    /// This member is required.
    public var bulkEmailEntryResults: [SESv2ClientTypes.BulkEmailEntryResult]?

    public init (
        bulkEmailEntryResults: [SESv2ClientTypes.BulkEmailEntryResult]? = nil
    )
    {
        self.bulkEmailEntryResults = bulkEmailEntryResults
    }
}

struct SendBulkEmailOutputResponseBody: Swift.Equatable {
    let bulkEmailEntryResults: [SESv2ClientTypes.BulkEmailEntryResult]?
}

extension SendBulkEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bulkEmailEntryResults = "BulkEmailEntryResults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bulkEmailEntryResultsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.BulkEmailEntryResult?].self, forKey: .bulkEmailEntryResults)
        var bulkEmailEntryResultsDecoded0:[SESv2ClientTypes.BulkEmailEntryResult]? = nil
        if let bulkEmailEntryResultsContainer = bulkEmailEntryResultsContainer {
            bulkEmailEntryResultsDecoded0 = [SESv2ClientTypes.BulkEmailEntryResult]()
            for structure0 in bulkEmailEntryResultsContainer {
                if let structure0 = structure0 {
                    bulkEmailEntryResultsDecoded0?.append(structure0)
                }
            }
        }
        bulkEmailEntryResults = bulkEmailEntryResultsDecoded0
    }
}

extension SendCustomVerificationEmailInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case emailAddress = "EmailAddress"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetName = self.configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let emailAddress = self.emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
    }
}

extension SendCustomVerificationEmailInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/outbound-custom-verification-emails"
    }
}

/// Represents a request to send a custom verification email to a specified recipient.
public struct SendCustomVerificationEmailInput: Swift.Equatable {
    /// Name of a configuration set to use when sending the verification email.
    public var configurationSetName: Swift.String?
    /// The email address to verify.
    /// This member is required.
    public var emailAddress: Swift.String?
    /// The name of the custom verification email template to use when sending the verification email.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        emailAddress: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.emailAddress = emailAddress
        self.templateName = templateName
    }
}

struct SendCustomVerificationEmailInputBody: Swift.Equatable {
    let emailAddress: Swift.String?
    let templateName: Swift.String?
    let configurationSetName: Swift.String?
}

extension SendCustomVerificationEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case emailAddress = "EmailAddress"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension SendCustomVerificationEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendCustomVerificationEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SendingPausedException" : self = .sendingPausedException(try SendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendCustomVerificationEmailOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case notFoundException(NotFoundException)
    case sendingPausedException(SendingPausedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendCustomVerificationEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SendCustomVerificationEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

/// The following element is returned by the service.
public struct SendCustomVerificationEmailOutputResponse: Swift.Equatable {
    /// The unique message identifier returned from the SendCustomVerificationEmail operation.
    public var messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendCustomVerificationEmailOutputResponseBody: Swift.Equatable {
    let messageId: Swift.String?
}

extension SendCustomVerificationEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension SendEmailInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case content = "Content"
        case destination = "Destination"
        case emailTags = "EmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case feedbackForwardingEmailAddressIdentityArn = "FeedbackForwardingEmailAddressIdentityArn"
        case fromEmailAddress = "FromEmailAddress"
        case fromEmailAddressIdentityArn = "FromEmailAddressIdentityArn"
        case listManagementOptions = "ListManagementOptions"
        case replyToAddresses = "ReplyToAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetName = self.configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let content = self.content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let emailTags = emailTags {
            var emailTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .emailTags)
            for messagetag0 in emailTags {
                try emailTagsContainer.encode(messagetag0)
            }
        }
        if let feedbackForwardingEmailAddress = self.feedbackForwardingEmailAddress {
            try encodeContainer.encode(feedbackForwardingEmailAddress, forKey: .feedbackForwardingEmailAddress)
        }
        if let feedbackForwardingEmailAddressIdentityArn = self.feedbackForwardingEmailAddressIdentityArn {
            try encodeContainer.encode(feedbackForwardingEmailAddressIdentityArn, forKey: .feedbackForwardingEmailAddressIdentityArn)
        }
        if let fromEmailAddress = self.fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let fromEmailAddressIdentityArn = self.fromEmailAddressIdentityArn {
            try encodeContainer.encode(fromEmailAddressIdentityArn, forKey: .fromEmailAddressIdentityArn)
        }
        if let listManagementOptions = self.listManagementOptions {
            try encodeContainer.encode(listManagementOptions, forKey: .listManagementOptions)
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replyToAddresses)
            for emailaddress0 in replyToAddresses {
                try replyToAddressesContainer.encode(emailaddress0)
            }
        }
    }
}

extension SendEmailInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/outbound-emails"
    }
}

/// Represents a request to send a single formatted email using Amazon SES. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-formatted.html).
public struct SendEmailInput: Swift.Equatable {
    /// The name of the configuration set to use when sending the email.
    public var configurationSetName: Swift.String?
    /// An object that contains the body of the message. You can send either a Simple message Raw message or a template Message.
    /// This member is required.
    public var content: SESv2ClientTypes.EmailContent?
    /// An object that contains the recipients of the email message.
    public var destination: SESv2ClientTypes.Destination?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send using the SendEmail operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    public var emailTags: [SESv2ClientTypes.MessageTag]?
    /// The address that you want bounce and complaint notifications to be sent to.
    public var feedbackForwardingEmailAddress: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the FeedbackForwardingEmailAddress parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the FeedbackForwardingEmailAddressIdentityArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the FeedbackForwardingEmailAddress to be feedback@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html).
    public var feedbackForwardingEmailAddressIdentityArn: Swift.String?
    /// The email address to use as the "From" address for the email. The address that you specify has to be verified.
    public var fromEmailAddress: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the FromEmailAddress parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use sender@example.com, then you would specify the FromEmailAddressIdentityArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the FromEmailAddress to be sender@example.com. For more information about sending authorization, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html). For Raw emails, the FromEmailAddressIdentityArn value overrides the X-SES-SOURCE-ARN and X-SES-FROM-ARN headers specified in raw email message content.
    public var fromEmailAddressIdentityArn: Swift.String?
    /// An object used to specify a list or topic to which an email belongs, which will be used when a contact chooses to unsubscribe.
    public var listManagementOptions: SESv2ClientTypes.ListManagementOptions?
    /// The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.
    public var replyToAddresses: [Swift.String]?

    public init (
        configurationSetName: Swift.String? = nil,
        content: SESv2ClientTypes.EmailContent? = nil,
        destination: SESv2ClientTypes.Destination? = nil,
        emailTags: [SESv2ClientTypes.MessageTag]? = nil,
        feedbackForwardingEmailAddress: Swift.String? = nil,
        feedbackForwardingEmailAddressIdentityArn: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        fromEmailAddressIdentityArn: Swift.String? = nil,
        listManagementOptions: SESv2ClientTypes.ListManagementOptions? = nil,
        replyToAddresses: [Swift.String]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.content = content
        self.destination = destination
        self.emailTags = emailTags
        self.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress
        self.feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArn
        self.fromEmailAddress = fromEmailAddress
        self.fromEmailAddressIdentityArn = fromEmailAddressIdentityArn
        self.listManagementOptions = listManagementOptions
        self.replyToAddresses = replyToAddresses
    }
}

struct SendEmailInputBody: Swift.Equatable {
    let fromEmailAddress: Swift.String?
    let fromEmailAddressIdentityArn: Swift.String?
    let destination: SESv2ClientTypes.Destination?
    let replyToAddresses: [Swift.String]?
    let feedbackForwardingEmailAddress: Swift.String?
    let feedbackForwardingEmailAddressIdentityArn: Swift.String?
    let content: SESv2ClientTypes.EmailContent?
    let emailTags: [SESv2ClientTypes.MessageTag]?
    let configurationSetName: Swift.String?
    let listManagementOptions: SESv2ClientTypes.ListManagementOptions?
}

extension SendEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case content = "Content"
        case destination = "Destination"
        case emailTags = "EmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case feedbackForwardingEmailAddressIdentityArn = "FeedbackForwardingEmailAddressIdentityArn"
        case fromEmailAddress = "FromEmailAddress"
        case fromEmailAddressIdentityArn = "FromEmailAddressIdentityArn"
        case listManagementOptions = "ListManagementOptions"
        case replyToAddresses = "ReplyToAddresses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let fromEmailAddressIdentityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddressIdentityArn)
        fromEmailAddressIdentityArn = fromEmailAddressIdentityArnDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        let replyToAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .replyToAddresses)
        var replyToAddressesDecoded0:[Swift.String]? = nil
        if let replyToAddressesContainer = replyToAddressesContainer {
            replyToAddressesDecoded0 = [Swift.String]()
            for string0 in replyToAddressesContainer {
                if let string0 = string0 {
                    replyToAddressesDecoded0?.append(string0)
                }
            }
        }
        replyToAddresses = replyToAddressesDecoded0
        let feedbackForwardingEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackForwardingEmailAddress)
        feedbackForwardingEmailAddress = feedbackForwardingEmailAddressDecoded
        let feedbackForwardingEmailAddressIdentityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackForwardingEmailAddressIdentityArn)
        feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArnDecoded
        let contentDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.EmailContent.self, forKey: .content)
        content = contentDecoded
        let emailTagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.MessageTag?].self, forKey: .emailTags)
        var emailTagsDecoded0:[SESv2ClientTypes.MessageTag]? = nil
        if let emailTagsContainer = emailTagsContainer {
            emailTagsDecoded0 = [SESv2ClientTypes.MessageTag]()
            for structure0 in emailTagsContainer {
                if let structure0 = structure0 {
                    emailTagsDecoded0?.append(structure0)
                }
            }
        }
        emailTags = emailTagsDecoded0
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let listManagementOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.ListManagementOptions.self, forKey: .listManagementOptions)
        listManagementOptions = listManagementOptionsDecoded
    }
}

extension SendEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSuspendedException" : self = .accountSuspendedException(try AccountSuspendedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SendingPausedException" : self = .sendingPausedException(try SendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendEmailOutputError: Swift.Error, Swift.Equatable {
    case accountSuspendedException(AccountSuspendedException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case notFoundException(NotFoundException)
    case sendingPausedException(SendingPausedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SendEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

/// A unique message ID that you receive when an email is accepted for sending.
public struct SendEmailOutputResponse: Swift.Equatable {
    /// A unique identifier for the message that is generated when the message is accepted. It's possible for Amazon SES to accept a message without sending it. This can happen when the message that you're trying to send has an attachment contains a virus, or when you send a templated email that contains invalid personalization content, for example.
    public var messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendEmailOutputResponseBody: Swift.Equatable {
    let messageId: Swift.String?
}

extension SendEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension SESv2ClientTypes.SendQuota: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max24HourSend = "Max24HourSend"
        case maxSendRate = "MaxSendRate"
        case sentLast24Hours = "SentLast24Hours"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if max24HourSend != 0.0 {
            try encodeContainer.encode(max24HourSend, forKey: .max24HourSend)
        }
        if maxSendRate != 0.0 {
            try encodeContainer.encode(maxSendRate, forKey: .maxSendRate)
        }
        if sentLast24Hours != 0.0 {
            try encodeContainer.encode(sentLast24Hours, forKey: .sentLast24Hours)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let max24HourSendDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .max24HourSend) ?? 0.0
        max24HourSend = max24HourSendDecoded
        let maxSendRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxSendRate) ?? 0.0
        maxSendRate = maxSendRateDecoded
        let sentLast24HoursDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sentLast24Hours) ?? 0.0
        sentLast24Hours = sentLast24HoursDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about the per-day and per-second sending limits for your Amazon SES account in the current Amazon Web Services Region.
    public struct SendQuota: Swift.Equatable {
        /// The maximum number of emails that you can send in the current Amazon Web Services Region over a 24-hour period. A value of -1 signifies an unlimited quota. (This value is also referred to as your sending quota.)
        public var max24HourSend: Swift.Double
        /// The maximum number of emails that you can send per second in the current Amazon Web Services Region. This value is also called your maximum sending rate or your maximum TPS (transactions per second) rate.
        public var maxSendRate: Swift.Double
        /// The number of emails sent from your Amazon SES account in the current Amazon Web Services Region over the past 24 hours.
        public var sentLast24Hours: Swift.Double

        public init (
            max24HourSend: Swift.Double = 0.0,
            maxSendRate: Swift.Double = 0.0,
            sentLast24Hours: Swift.Double = 0.0
        )
        {
            self.max24HourSend = max24HourSend
            self.maxSendRate = maxSendRate
            self.sentLast24Hours = sentLast24Hours
        }
    }

}

extension SESv2ClientTypes.SendingOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if sendingEnabled != false {
            try encodeContainer.encode(sendingEnabled, forKey: .sendingEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendingEnabled) ?? false
        sendingEnabled = sendingEnabledDecoded
    }
}

extension SESv2ClientTypes {
    /// Used to enable or disable email sending for messages that use this configuration set in the current Amazon Web Services Region.
    public struct SendingOptions: Swift.Equatable {
        /// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
        public var sendingEnabled: Swift.Bool

        public init (
            sendingEnabled: Swift.Bool = false
        )
        {
            self.sendingEnabled = sendingEnabled
        }
    }

}

extension SendingPausedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SendingPausedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The message can't be sent because the account's ability to send email is currently paused.
public struct SendingPausedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SendingPausedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension SendingPausedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESv2ClientTypes.SnsDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let topicArn = self.topicArn {
            try encodeContainer.encode(topicArn, forKey: .topicArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
    public struct SnsDestination: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to publish email events to. For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html).
        /// This member is required.
        public var topicArn: Swift.String?

        public init (
            topicArn: Swift.String? = nil
        )
        {
            self.topicArn = topicArn
        }
    }

}

extension SESv2ClientTypes {
    public enum SubscriptionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case optIn
        case optOut
        case sdkUnknown(Swift.String)

        public static var allCases: [SubscriptionStatus] {
            return [
                .optIn,
                .optOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optIn: return "OPT_IN"
            case .optOut: return "OPT_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SubscriptionStatus(rawValue: rawValue) ?? SubscriptionStatus.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.SuppressedDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case emailAddress = "EmailAddress"
        case lastUpdateTime = "LastUpdateTime"
        case reason = "Reason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = self.attributes {
            try encodeContainer.encode(attributes, forKey: .attributes)
        }
        if let emailAddress = self.emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encodeTimestamp(lastUpdateTime, format: .epochSeconds, forKey: .lastUpdateTime)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason.rawValue, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SuppressionListReason.self, forKey: .reason)
        reason = reasonDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let attributesDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SuppressedDestinationAttributes.self, forKey: .attributes)
        attributes = attributesDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about an email address that is on the suppression list for your account.
    public struct SuppressedDestination: Swift.Equatable {
        /// An optional value that can contain additional information about the reasons that the address was added to the suppression list for your account.
        public var attributes: SESv2ClientTypes.SuppressedDestinationAttributes?
        /// The email address that is on the suppression list for your account.
        /// This member is required.
        public var emailAddress: Swift.String?
        /// The date and time when the suppressed destination was last updated, shown in Unix time format.
        /// This member is required.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The reason that the address was added to the suppression list for your account.
        /// This member is required.
        public var reason: SESv2ClientTypes.SuppressionListReason?

        public init (
            attributes: SESv2ClientTypes.SuppressedDestinationAttributes? = nil,
            emailAddress: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            reason: SESv2ClientTypes.SuppressionListReason? = nil
        )
        {
            self.attributes = attributes
            self.emailAddress = emailAddress
            self.lastUpdateTime = lastUpdateTime
            self.reason = reason
        }
    }

}

extension SESv2ClientTypes.SuppressedDestinationAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case feedbackId = "FeedbackId"
        case messageId = "MessageId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let feedbackId = self.feedbackId {
            try encodeContainer.encode(feedbackId, forKey: .feedbackId)
        }
        if let messageId = self.messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let feedbackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackId)
        feedbackId = feedbackIdDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains additional attributes that are related an email address that is on the suppression list for your account.
    public struct SuppressedDestinationAttributes: Swift.Equatable {
        /// A unique identifier that's generated when an email address is added to the suppression list for your account.
        public var feedbackId: Swift.String?
        /// The unique identifier of the email message that caused the email address to be added to the suppression list for your account.
        public var messageId: Swift.String?

        public init (
            feedbackId: Swift.String? = nil,
            messageId: Swift.String? = nil
        )
        {
            self.feedbackId = feedbackId
            self.messageId = messageId
        }
    }

}

extension SESv2ClientTypes.SuppressedDestinationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
        case lastUpdateTime = "LastUpdateTime"
        case reason = "Reason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailAddress = self.emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encodeTimestamp(lastUpdateTime, format: .epochSeconds, forKey: .lastUpdateTime)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason.rawValue, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SuppressionListReason.self, forKey: .reason)
        reason = reasonDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension SESv2ClientTypes {
    /// A summary that describes the suppressed email address.
    public struct SuppressedDestinationSummary: Swift.Equatable {
        /// The email address that's on the suppression list for your account.
        /// This member is required.
        public var emailAddress: Swift.String?
        /// The date and time when the suppressed destination was last updated, shown in Unix time format.
        /// This member is required.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The reason that the address was added to the suppression list for your account.
        /// This member is required.
        public var reason: SESv2ClientTypes.SuppressionListReason?

        public init (
            emailAddress: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            reason: SESv2ClientTypes.SuppressionListReason? = nil
        )
        {
            self.emailAddress = emailAddress
            self.lastUpdateTime = lastUpdateTime
            self.reason = reason
        }
    }

}

extension SESv2ClientTypes.SuppressionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedReasons = "SuppressedReasons"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let suppressedReasons = suppressedReasons {
            var suppressedReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suppressedReasons)
            for suppressionlistreason0 in suppressedReasons {
                try suppressedReasonsContainer.encode(suppressionlistreason0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedReasonsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.SuppressionListReason?].self, forKey: .suppressedReasons)
        var suppressedReasonsDecoded0:[SESv2ClientTypes.SuppressionListReason]? = nil
        if let suppressedReasonsContainer = suppressedReasonsContainer {
            suppressedReasonsDecoded0 = [SESv2ClientTypes.SuppressionListReason]()
            for enum0 in suppressedReasonsContainer {
                if let enum0 = enum0 {
                    suppressedReasonsDecoded0?.append(enum0)
                }
            }
        }
        suppressedReasons = suppressedReasonsDecoded0
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about the email address suppression preferences for your account in the current Amazon Web Services Region.
    public struct SuppressionAttributes: Swift.Equatable {
        /// A list that contains the reasons that email addresses will be automatically added to the suppression list for your account. This list can contain any or all of the following:
        ///
        /// * COMPLAINT – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a complaint.
        ///
        /// * BOUNCE – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a hard bounce.
        public var suppressedReasons: [SESv2ClientTypes.SuppressionListReason]?

        public init (
            suppressedReasons: [SESv2ClientTypes.SuppressionListReason]? = nil
        )
        {
            self.suppressedReasons = suppressedReasons
        }
    }

}

extension SESv2ClientTypes.SuppressionListDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressionListImportAction = "SuppressionListImportAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let suppressionListImportAction = self.suppressionListImportAction {
            try encodeContainer.encode(suppressionListImportAction.rawValue, forKey: .suppressionListImportAction)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressionListImportActionDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SuppressionListImportAction.self, forKey: .suppressionListImportAction)
        suppressionListImportAction = suppressionListImportActionDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains details about the action of suppression list.
    public struct SuppressionListDestination: Swift.Equatable {
        /// The type of action to perform on the address. The following are possible values:
        ///
        /// * PUT: add the addresses to the suppression list. If the record already exists, it will override it with the new value.
        ///
        /// * DELETE: remove the addresses from the suppression list.
        /// This member is required.
        public var suppressionListImportAction: SESv2ClientTypes.SuppressionListImportAction?

        public init (
            suppressionListImportAction: SESv2ClientTypes.SuppressionListImportAction? = nil
        )
        {
            self.suppressionListImportAction = suppressionListImportAction
        }
    }

}

extension SESv2ClientTypes {
    /// The type of action to perform on the address. The following are possible values:
    ///
    /// * PUT: add the addresses to the suppression list.
    ///
    /// * DELETE: remove the address from the suppression list.
    public enum SuppressionListImportAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [SuppressionListImportAction] {
            return [
                .delete,
                .put,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SuppressionListImportAction(rawValue: rawValue) ?? SuppressionListImportAction.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes {
    /// The reason that the address was added to the suppression list for your account. The value can be one of the following:
    ///
    /// * COMPLAINT – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a complaint.
    ///
    /// * BOUNCE – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a hard bounce.
    public enum SuppressionListReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bounce
        case complaint
        case sdkUnknown(Swift.String)

        public static var allCases: [SuppressionListReason] {
            return [
                .bounce,
                .complaint,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "BOUNCE"
            case .complaint: return "COMPLAINT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SuppressionListReason(rawValue: rawValue) ?? SuppressionListReason.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.SuppressionOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedReasons = "SuppressedReasons"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let suppressedReasons = suppressedReasons {
            var suppressedReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suppressedReasons)
            for suppressionlistreason0 in suppressedReasons {
                try suppressedReasonsContainer.encode(suppressionlistreason0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedReasonsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.SuppressionListReason?].self, forKey: .suppressedReasons)
        var suppressedReasonsDecoded0:[SESv2ClientTypes.SuppressionListReason]? = nil
        if let suppressedReasonsContainer = suppressedReasonsContainer {
            suppressedReasonsDecoded0 = [SESv2ClientTypes.SuppressionListReason]()
            for enum0 in suppressedReasonsContainer {
                if let enum0 = enum0 {
                    suppressedReasonsDecoded0?.append(enum0)
                }
            }
        }
        suppressedReasons = suppressedReasonsDecoded0
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about the suppression list preferences for your account.
    public struct SuppressionOptions: Swift.Equatable {
        /// A list that contains the reasons that email addresses are automatically added to the suppression list for your account. This list can contain any or all of the following:
        ///
        /// * COMPLAINT – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a complaint.
        ///
        /// * BOUNCE – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a hard bounce.
        public var suppressedReasons: [SESv2ClientTypes.SuppressionListReason]?

        public init (
            suppressedReasons: [SESv2ClientTypes.SuppressionListReason]? = nil
        )
        {
            self.suppressedReasons = suppressedReasons
        }
    }

}

extension SESv2ClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that defines the tags that are associated with a resource. A tag is a label that you optionally define and associate with a resource. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria. A resource can have as many as 50 tags. Each tag consists of a required tag key and an associated tag value, both of which you define. A tag key is a general label that acts as a category for a more specific tag value. A tag value acts as a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag value can contain as many as 256 characters. The characters can be Unicode letters, digits, white space, or one of the following symbols: _ . : / = + -. The following additional restrictions apply to tags:
    ///
    /// * Tag keys and values are case sensitive.
    ///
    /// * For each associated resource, each tag key must be unique and it can have only one value.
    ///
    /// * The aws: prefix is reserved for use by Amazon Web Services; you can’t use it in any tag keys or values that you define. In addition, you can't edit or remove tag keys or values that use this prefix. Tags that use this prefix don’t count against the limit of 50 tags per resource.
    ///
    /// * You can associate tags with public or shared resources, but the tags are available only for your Amazon Web Services account, not any other accounts that share the resource. In addition, the tags are available only for resources that are located in the specified Amazon Web Services Region for your Amazon Web Services account.
    public struct Tag: Swift.Equatable {
        /// One part of a key-value pair that defines a tag. The maximum length of a tag key is 128 characters. The minimum length is 1 character.
        /// This member is required.
        public var key: Swift.String?
        /// The optional part of a key-value pair that defines a tag. The maximum length of a tag value is 256 characters. The minimum length is 0 characters. If you don't want a resource to have a specific tag value, don't specify a value for this parameter. If you don't specify a value, Amazon SES sets the value to an empty string.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/tags"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource that you want to add one or more tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of the tags that you want to add to the resource. A tag consists of a required tag key (Key) and an associated tag value (Value). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
    /// This member is required.
    public var tags: [SESv2ClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [SESv2ClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [SESv2ClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SESv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SESv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension SESv2ClientTypes.Template: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateArn = "TemplateArn"
        case templateData = "TemplateData"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let templateArn = self.templateArn {
            try encodeContainer.encode(templateArn, forKey: .templateArn)
        }
        if let templateData = self.templateData {
            try encodeContainer.encode(templateData, forKey: .templateData)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let templateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateData)
        templateData = templateDataDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that defines the email template to use for an email message, and the values to use for any message variables in that template. An email template is a type of message template that contains content that you want to define, save, and reuse in email messages that you send.
    public struct Template: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the template.
        public var templateArn: Swift.String?
        /// An object that defines the values to use for message variables in the template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the value to use for that variable.
        public var templateData: Swift.String?
        /// The name of the template. You will refer to this name when you send email using the SendTemplatedEmail or SendBulkTemplatedEmail operations.
        public var templateName: Swift.String?

        public init (
            templateArn: Swift.String? = nil,
            templateData: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.templateArn = templateArn
            self.templateData = templateData
            self.templateName = templateName
        }
    }

}

extension TestRenderEmailTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateData = "TemplateData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let templateData = self.templateData {
            try encodeContainer.encode(templateData, forKey: .templateData)
        }
    }
}

extension TestRenderEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v2/email/templates/\(templateName.urlPercentEncoding())/render"
    }
}

/// >Represents a request to create a preview of the MIME content of an email when provided with a template and a set of replacement data.
public struct TestRenderEmailTemplateInput: Swift.Equatable {
    /// A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
    /// This member is required.
    public var templateData: Swift.String?
    /// The name of the template.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        templateData: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateData = templateData
        self.templateName = templateName
    }
}

struct TestRenderEmailTemplateInputBody: Swift.Equatable {
    let templateData: Swift.String?
}

extension TestRenderEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateData = "TemplateData"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateData)
        templateData = templateDataDecoded
    }
}

extension TestRenderEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TestRenderEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TestRenderEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestRenderEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TestRenderEmailTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.renderedTemplate = output.renderedTemplate
        } else {
            self.renderedTemplate = nil
        }
    }
}

/// The following element is returned by the service.
public struct TestRenderEmailTemplateOutputResponse: Swift.Equatable {
    /// The complete MIME message rendered by applying the data in the TemplateData parameter to the template specified in the TemplateName parameter.
    /// This member is required.
    public var renderedTemplate: Swift.String?

    public init (
        renderedTemplate: Swift.String? = nil
    )
    {
        self.renderedTemplate = renderedTemplate
    }
}

struct TestRenderEmailTemplateOutputResponseBody: Swift.Equatable {
    let renderedTemplate: Swift.String?
}

extension TestRenderEmailTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case renderedTemplate = "RenderedTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let renderedTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .renderedTemplate)
        renderedTemplate = renderedTemplateDecoded
    }
}

extension SESv2ClientTypes {
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
    public enum TlsPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `optional`
        case require
        case sdkUnknown(Swift.String)

        public static var allCases: [TlsPolicy] {
            return [
                .optional,
                .require,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optional: return "OPTIONAL"
            case .require: return "REQUIRE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TlsPolicy(rawValue: rawValue) ?? TlsPolicy.sdkUnknown(rawValue)
        }
    }
}

extension TooManyRequestsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyRequestsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Too many requests have been made to the operation.
public struct TooManyRequestsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyRequestsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyRequestsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SESv2ClientTypes.Topic: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultSubscriptionStatus = "DefaultSubscriptionStatus"
        case description = "Description"
        case displayName = "DisplayName"
        case topicName = "TopicName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultSubscriptionStatus = self.defaultSubscriptionStatus {
            try encodeContainer.encode(defaultSubscriptionStatus.rawValue, forKey: .defaultSubscriptionStatus)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let topicName = self.topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultSubscriptionStatusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SubscriptionStatus.self, forKey: .defaultSubscriptionStatus)
        defaultSubscriptionStatus = defaultSubscriptionStatusDecoded
    }
}

extension SESv2ClientTypes {
    /// An interest group, theme, or label within a list. Lists can have multiple topics.
    public struct Topic: Swift.Equatable {
        /// The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.
        /// This member is required.
        public var defaultSubscriptionStatus: SESv2ClientTypes.SubscriptionStatus?
        /// A description of what the topic is about, which the contact will see.
        public var description: Swift.String?
        /// The name of the topic the contact will see.
        /// This member is required.
        public var displayName: Swift.String?
        /// The name of the topic.
        /// This member is required.
        public var topicName: Swift.String?

        public init (
            defaultSubscriptionStatus: SESv2ClientTypes.SubscriptionStatus? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.defaultSubscriptionStatus = defaultSubscriptionStatus
            self.description = description
            self.displayName = displayName
            self.topicName = topicName
        }
    }

}

extension SESv2ClientTypes.TopicFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicName = "TopicName"
        case useDefaultIfPreferenceUnavailable = "UseDefaultIfPreferenceUnavailable"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let topicName = self.topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
        if useDefaultIfPreferenceUnavailable != false {
            try encodeContainer.encode(useDefaultIfPreferenceUnavailable, forKey: .useDefaultIfPreferenceUnavailable)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
        let useDefaultIfPreferenceUnavailableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useDefaultIfPreferenceUnavailable) ?? false
        useDefaultIfPreferenceUnavailable = useDefaultIfPreferenceUnavailableDecoded
    }
}

extension SESv2ClientTypes {
    /// Used for filtering by a specific topic preference.
    public struct TopicFilter: Swift.Equatable {
        /// The name of a topic on which you wish to apply the filter.
        public var topicName: Swift.String?
        /// Notes that the default subscription status should be applied to a contact because the contact has not noted their preference for subscribing to a topic.
        public var useDefaultIfPreferenceUnavailable: Swift.Bool

        public init (
            topicName: Swift.String? = nil,
            useDefaultIfPreferenceUnavailable: Swift.Bool = false
        )
        {
            self.topicName = topicName
            self.useDefaultIfPreferenceUnavailable = useDefaultIfPreferenceUnavailable
        }
    }

}

extension SESv2ClientTypes.TopicPreference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subscriptionStatus = "SubscriptionStatus"
        case topicName = "TopicName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let subscriptionStatus = self.subscriptionStatus {
            try encodeContainer.encode(subscriptionStatus.rawValue, forKey: .subscriptionStatus)
        }
        if let topicName = self.topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
        let subscriptionStatusDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.SubscriptionStatus.self, forKey: .subscriptionStatus)
        subscriptionStatus = subscriptionStatusDecoded
    }
}

extension SESv2ClientTypes {
    /// The contact's preference for being opted-in to or opted-out of a topic.
    public struct TopicPreference: Swift.Equatable {
        /// The contact's subscription status to a topic which is either OPT_IN or OPT_OUT.
        /// This member is required.
        public var subscriptionStatus: SESv2ClientTypes.SubscriptionStatus?
        /// The name of the topic.
        /// This member is required.
        public var topicName: Swift.String?

        public init (
            subscriptionStatus: SESv2ClientTypes.SubscriptionStatus? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.subscriptionStatus = subscriptionStatus
            self.topicName = topicName
        }
    }

}

extension SESv2ClientTypes.TrackingOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRedirectDomain = "CustomRedirectDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customRedirectDomain = self.customRedirectDomain {
            try encodeContainer.encode(customRedirectDomain, forKey: .customRedirectDomain)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRedirectDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customRedirectDomain)
        customRedirectDomain = customRedirectDomainDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that defines the tracking options for a configuration set. When you use the Amazon SES API v2 to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them. These images and links include references to a domain operated by Amazon Web Services. You can optionally configure the Amazon SES to use a domain that you operate for these images and links.
    public struct TrackingOptions: Swift.Equatable {
        /// The domain to use for tracking open and click events.
        /// This member is required.
        public var customRedirectDomain: Swift.String?

        public init (
            customRedirectDomain: Swift.String? = nil
        )
        {
            self.customRedirectDomain = customRedirectDomain
        }
    }

}

extension UntagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let resourceArn = resourceArn else {
                let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let resourceArnQueryItem = ClientRuntime.URLQueryItem(name: "ResourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
            items.append(resourceArnQueryItem)
            guard let tagKeys = tagKeys else {
                let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "TagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            return items
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v2/email/tags"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource that you want to remove one or more tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags (tag keys) that you want to remove from the resource. When you specify a tag key, the action removes both that key and its associated tag value. To remove more than one tag from the resource, append the TagKeys parameter and argument for each additional tag to remove, separated by an ampersand. For example: /v2/email/tags?ResourceArn=ResourceArn&TagKeys=Key1&TagKeys=Key2
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateConfigurationSetEventDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestination = "EventDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventDestination = self.eventDestination {
            try encodeContainer.encode(eventDestination, forKey: .eventDestination)
        }
    }
}

extension UpdateConfigurationSetEventDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configurationSetName = configurationSetName else {
            return nil
        }
        guard let eventDestinationName = eventDestinationName else {
            return nil
        }
        return "/v2/email/configuration-sets/\(configurationSetName.urlPercentEncoding())/event-destinations/\(eventDestinationName.urlPercentEncoding())"
    }
}

/// A request to change the settings for an event destination for a configuration set.
public struct UpdateConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set that contains the event destination to modify.
    /// This member is required.
    public var configurationSetName: Swift.String?
    /// An object that defines the event destination.
    /// This member is required.
    public var eventDestination: SESv2ClientTypes.EventDestinationDefinition?
    /// The name of the event destination.
    /// This member is required.
    public var eventDestinationName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestination: SESv2ClientTypes.EventDestinationDefinition? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
        self.eventDestinationName = eventDestinationName
    }
}

struct UpdateConfigurationSetEventDestinationInputBody: Swift.Equatable {
    let eventDestination: SESv2ClientTypes.EventDestinationDefinition?
}

extension UpdateConfigurationSetEventDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestination = "EventDestination"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventDestinationDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.EventDestinationDefinition.self, forKey: .eventDestination)
        eventDestination = eventDestinationDecoded
    }
}

extension UpdateConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct UpdateConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateContactInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesData = "AttributesData"
        case topicPreferences = "TopicPreferences"
        case unsubscribeAll = "UnsubscribeAll"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesData = self.attributesData {
            try encodeContainer.encode(attributesData, forKey: .attributesData)
        }
        if let topicPreferences = topicPreferences {
            var topicPreferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topicPreferences)
            for topicpreference0 in topicPreferences {
                try topicPreferencesContainer.encode(topicpreference0)
            }
        }
        if unsubscribeAll != false {
            try encodeContainer.encode(unsubscribeAll, forKey: .unsubscribeAll)
        }
    }
}

extension UpdateContactInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let contactListName = contactListName else {
            return nil
        }
        guard let emailAddress = emailAddress else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())/contacts/\(emailAddress.urlPercentEncoding())"
    }
}

public struct UpdateContactInput: Swift.Equatable {
    /// The attribute data attached to a contact.
    public var attributesData: Swift.String?
    /// The name of the contact list.
    /// This member is required.
    public var contactListName: Swift.String?
    /// The contact's email addres.
    /// This member is required.
    public var emailAddress: Swift.String?
    /// The contact's preference for being opted-in to or opted-out of a topic.
    public var topicPreferences: [SESv2ClientTypes.TopicPreference]?
    /// A boolean value status noting if the contact is unsubscribed from all contact list topics.
    public var unsubscribeAll: Swift.Bool

    public init (
        attributesData: Swift.String? = nil,
        contactListName: Swift.String? = nil,
        emailAddress: Swift.String? = nil,
        topicPreferences: [SESv2ClientTypes.TopicPreference]? = nil,
        unsubscribeAll: Swift.Bool = false
    )
    {
        self.attributesData = attributesData
        self.contactListName = contactListName
        self.emailAddress = emailAddress
        self.topicPreferences = topicPreferences
        self.unsubscribeAll = unsubscribeAll
    }
}

struct UpdateContactInputBody: Swift.Equatable {
    let topicPreferences: [SESv2ClientTypes.TopicPreference]?
    let unsubscribeAll: Swift.Bool
    let attributesData: Swift.String?
}

extension UpdateContactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesData = "AttributesData"
        case topicPreferences = "TopicPreferences"
        case unsubscribeAll = "UnsubscribeAll"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicPreferencesContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.TopicPreference?].self, forKey: .topicPreferences)
        var topicPreferencesDecoded0:[SESv2ClientTypes.TopicPreference]? = nil
        if let topicPreferencesContainer = topicPreferencesContainer {
            topicPreferencesDecoded0 = [SESv2ClientTypes.TopicPreference]()
            for structure0 in topicPreferencesContainer {
                if let structure0 = structure0 {
                    topicPreferencesDecoded0?.append(structure0)
                }
            }
        }
        topicPreferences = topicPreferencesDecoded0
        let unsubscribeAllDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unsubscribeAll) ?? false
        unsubscribeAll = unsubscribeAllDecoded
        let attributesDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributesData)
        attributesData = attributesDataDecoded
    }
}

extension UpdateContactListInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case topics = "Topics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let topics = topics {
            var topicsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topics)
            for topic0 in topics {
                try topicsContainer.encode(topic0)
            }
        }
    }
}

extension UpdateContactListInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let contactListName = contactListName else {
            return nil
        }
        return "/v2/email/contact-lists/\(contactListName.urlPercentEncoding())"
    }
}

public struct UpdateContactListInput: Swift.Equatable {
    /// The name of the contact list.
    /// This member is required.
    public var contactListName: Swift.String?
    /// A description of what the contact list is about.
    public var description: Swift.String?
    /// An interest group, theme, or label within a list. A contact list can have multiple topics.
    public var topics: [SESv2ClientTypes.Topic]?

    public init (
        contactListName: Swift.String? = nil,
        description: Swift.String? = nil,
        topics: [SESv2ClientTypes.Topic]? = nil
    )
    {
        self.contactListName = contactListName
        self.description = description
        self.topics = topics
    }
}

struct UpdateContactListInputBody: Swift.Equatable {
    let topics: [SESv2ClientTypes.Topic]?
    let description: Swift.String?
}

extension UpdateContactListInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case topics = "Topics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicsContainer = try containerValues.decodeIfPresent([SESv2ClientTypes.Topic?].self, forKey: .topics)
        var topicsDecoded0:[SESv2ClientTypes.Topic]? = nil
        if let topicsContainer = topicsContainer {
            topicsDecoded0 = [SESv2ClientTypes.Topic]()
            for structure0 in topicsContainer {
                if let structure0 = structure0 {
                    topicsDecoded0?.append(structure0)
                }
            }
        }
        topics = topicsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateContactListOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContactListOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateContactListOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContactListOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateContactListOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateContactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateContactOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateContactOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateCustomVerificationEmailTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateSubject = "TemplateSubject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureRedirectionURL = self.failureRedirectionURL {
            try encodeContainer.encode(failureRedirectionURL, forKey: .failureRedirectionURL)
        }
        if let fromEmailAddress = self.fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let successRedirectionURL = self.successRedirectionURL {
            try encodeContainer.encode(successRedirectionURL, forKey: .successRedirectionURL)
        }
        if let templateContent = self.templateContent {
            try encodeContainer.encode(templateContent, forKey: .templateContent)
        }
        if let templateSubject = self.templateSubject {
            try encodeContainer.encode(templateSubject, forKey: .templateSubject)
        }
    }
}

extension UpdateCustomVerificationEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v2/email/custom-verification-email-templates/\(templateName.urlPercentEncoding())"
    }
}

/// Represents a request to update an existing custom verification email template.
public struct UpdateCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    /// This member is required.
    public var failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    /// This member is required.
    public var fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    /// This member is required.
    public var successRedirectionURL: Swift.String?
    /// The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see [Custom verification email frequently asked questions](https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom-faq) in the Amazon SES Developer Guide.
    /// This member is required.
    public var templateContent: Swift.String?
    /// The name of the custom verification email template that you want to update.
    /// This member is required.
    public var templateName: Swift.String?
    /// The subject line of the custom verification email.
    /// This member is required.
    public var templateSubject: Swift.String?

    public init (
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

struct UpdateCustomVerificationEmailTemplateInputBody: Swift.Equatable {
    let fromEmailAddress: Swift.String?
    let templateSubject: Swift.String?
    let templateContent: Swift.String?
    let successRedirectionURL: Swift.String?
    let failureRedirectionURL: Swift.String?
}

extension UpdateCustomVerificationEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateSubject = "TemplateSubject"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateContent)
        templateContent = templateContentDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

extension UpdateCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct UpdateCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateEmailIdentityPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policy = self.policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
    }
}

extension UpdateEmailIdentityPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let emailIdentity = emailIdentity else {
            return nil
        }
        guard let policyName = policyName else {
            return nil
        }
        return "/v2/email/identities/\(emailIdentity.urlPercentEncoding())/policies/\(policyName.urlPercentEncoding())"
    }
}

/// Represents a request to update a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html).
public struct UpdateEmailIdentityPolicyInput: Swift.Equatable {
    /// The email identity.
    /// This member is required.
    public var emailIdentity: Swift.String?
    /// The text of the policy in JSON format. The policy cannot exceed 4 KB. For information about the syntax of sending authorization policies, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html).
    /// This member is required.
    public var policy: Swift.String?
    /// The name of the policy. The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil,
        policy: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.policy = policy
        self.policyName = policyName
    }
}

struct UpdateEmailIdentityPolicyInputBody: Swift.Equatable {
    let policy: Swift.String?
}

extension UpdateEmailIdentityPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension UpdateEmailIdentityPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEmailIdentityPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateEmailIdentityPolicyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEmailIdentityPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request fails.
public struct UpdateEmailIdentityPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateEmailTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateContent = "TemplateContent"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let templateContent = self.templateContent {
            try encodeContainer.encode(templateContent, forKey: .templateContent)
        }
    }
}

extension UpdateEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v2/email/templates/\(templateName.urlPercentEncoding())"
    }
}

/// Represents a request to update an email template. For more information, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html).
public struct UpdateEmailTemplateInput: Swift.Equatable {
    /// The content of the email template, composed of a subject line, an HTML part, and a text-only part.
    /// This member is required.
    public var templateContent: SESv2ClientTypes.EmailTemplateContent?
    /// The name of the template.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        templateContent: SESv2ClientTypes.EmailTemplateContent? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateContent = templateContent
        self.templateName = templateName
    }
}

struct UpdateEmailTemplateInputBody: Swift.Equatable {
    let templateContent: SESv2ClientTypes.EmailTemplateContent?
}

extension UpdateEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateContent = "TemplateContent"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateContentDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.EmailTemplateContent.self, forKey: .templateContent)
        templateContent = templateContentDecoded
    }
}

extension UpdateEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct UpdateEmailTemplateOutputResponse: Swift.Equatable {

    public init () { }
}

extension SESv2ClientTypes.VdmAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardAttributes = "DashboardAttributes"
        case guardianAttributes = "GuardianAttributes"
        case vdmEnabled = "VdmEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dashboardAttributes = self.dashboardAttributes {
            try encodeContainer.encode(dashboardAttributes, forKey: .dashboardAttributes)
        }
        if let guardianAttributes = self.guardianAttributes {
            try encodeContainer.encode(guardianAttributes, forKey: .guardianAttributes)
        }
        if let vdmEnabled = self.vdmEnabled {
            try encodeContainer.encode(vdmEnabled.rawValue, forKey: .vdmEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vdmEnabledDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.FeatureStatus.self, forKey: .vdmEnabled)
        vdmEnabled = vdmEnabledDecoded
        let dashboardAttributesDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DashboardAttributes.self, forKey: .dashboardAttributes)
        dashboardAttributes = dashboardAttributesDecoded
        let guardianAttributesDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.GuardianAttributes.self, forKey: .guardianAttributes)
        guardianAttributes = guardianAttributesDecoded
    }
}

extension SESv2ClientTypes {
    /// The VDM attributes that apply to your Amazon SES account.
    public struct VdmAttributes: Swift.Equatable {
        /// Specifies additional settings for your VDM configuration as applicable to the Dashboard.
        public var dashboardAttributes: SESv2ClientTypes.DashboardAttributes?
        /// Specifies additional settings for your VDM configuration as applicable to the Guardian.
        public var guardianAttributes: SESv2ClientTypes.GuardianAttributes?
        /// Specifies the status of your VDM configuration. Can be one of the following:
        ///
        /// * ENABLED – Amazon SES enables VDM for your account.
        ///
        /// * DISABLED – Amazon SES disables VDM for your account.
        /// This member is required.
        public var vdmEnabled: SESv2ClientTypes.FeatureStatus?

        public init (
            dashboardAttributes: SESv2ClientTypes.DashboardAttributes? = nil,
            guardianAttributes: SESv2ClientTypes.GuardianAttributes? = nil,
            vdmEnabled: SESv2ClientTypes.FeatureStatus? = nil
        )
        {
            self.dashboardAttributes = dashboardAttributes
            self.guardianAttributes = guardianAttributes
            self.vdmEnabled = vdmEnabled
        }
    }

}

extension SESv2ClientTypes.VdmOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardOptions = "DashboardOptions"
        case guardianOptions = "GuardianOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dashboardOptions = self.dashboardOptions {
            try encodeContainer.encode(dashboardOptions, forKey: .dashboardOptions)
        }
        if let guardianOptions = self.guardianOptions {
            try encodeContainer.encode(guardianOptions, forKey: .guardianOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.DashboardOptions.self, forKey: .dashboardOptions)
        dashboardOptions = dashboardOptionsDecoded
        let guardianOptionsDecoded = try containerValues.decodeIfPresent(SESv2ClientTypes.GuardianOptions.self, forKey: .guardianOptions)
        guardianOptions = guardianOptionsDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that defines the VDM settings that apply to emails that you send using the configuration set.
    public struct VdmOptions: Swift.Equatable {
        /// Specifies additional settings for your VDM configuration as applicable to the Dashboard.
        public var dashboardOptions: SESv2ClientTypes.DashboardOptions?
        /// Specifies additional settings for your VDM configuration as applicable to the Guardian.
        public var guardianOptions: SESv2ClientTypes.GuardianOptions?

        public init (
            dashboardOptions: SESv2ClientTypes.DashboardOptions? = nil,
            guardianOptions: SESv2ClientTypes.GuardianOptions? = nil
        )
        {
            self.dashboardOptions = dashboardOptions
            self.guardianOptions = guardianOptions
        }
    }

}

extension SESv2ClientTypes {
    public enum VerificationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case notStarted
        case pending
        case success
        case temporaryFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [VerificationStatus] {
            return [
                .failed,
                .notStarted,
                .pending,
                .success,
                .temporaryFailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .notStarted: return "NOT_STARTED"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case .temporaryFailure: return "TEMPORARY_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VerificationStatus(rawValue: rawValue) ?? VerificationStatus.sdkUnknown(rawValue)
        }
    }
}

extension SESv2ClientTypes.VolumeStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inboxRawCount = "InboxRawCount"
        case projectedInbox = "ProjectedInbox"
        case projectedSpam = "ProjectedSpam"
        case spamRawCount = "SpamRawCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inboxRawCount = self.inboxRawCount {
            try encodeContainer.encode(inboxRawCount, forKey: .inboxRawCount)
        }
        if let projectedInbox = self.projectedInbox {
            try encodeContainer.encode(projectedInbox, forKey: .projectedInbox)
        }
        if let projectedSpam = self.projectedSpam {
            try encodeContainer.encode(projectedSpam, forKey: .projectedSpam)
        }
        if let spamRawCount = self.spamRawCount {
            try encodeContainer.encode(spamRawCount, forKey: .spamRawCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inboxRawCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inboxRawCount)
        inboxRawCount = inboxRawCountDecoded
        let spamRawCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spamRawCount)
        spamRawCount = spamRawCountDecoded
        let projectedInboxDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .projectedInbox)
        projectedInbox = projectedInboxDecoded
        let projectedSpamDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .projectedSpam)
        projectedSpam = projectedSpamDecoded
    }
}

extension SESv2ClientTypes {
    /// An object that contains information about the amount of email that was delivered to recipients.
    public struct VolumeStatistics: Swift.Equatable {
        /// The total number of emails that arrived in recipients' inboxes.
        public var inboxRawCount: Swift.Int?
        /// An estimate of the percentage of emails sent from the current domain that will arrive in recipients' inboxes.
        public var projectedInbox: Swift.Int?
        /// An estimate of the percentage of emails sent from the current domain that will arrive in recipients' spam or junk mail folders.
        public var projectedSpam: Swift.Int?
        /// The total number of emails that arrived in recipients' spam or junk mail folders.
        public var spamRawCount: Swift.Int?

        public init (
            inboxRawCount: Swift.Int? = nil,
            projectedInbox: Swift.Int? = nil,
            projectedSpam: Swift.Int? = nil,
            spamRawCount: Swift.Int? = nil
        )
        {
            self.inboxRawCount = inboxRawCount
            self.projectedInbox = projectedInbox
            self.projectedSpam = projectedSpam
            self.spamRawCount = spamRawCount
        }
    }

}

extension SESv2ClientTypes {
    /// The warmup status of a dedicated IP.
    public enum WarmupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case done
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [WarmupStatus] {
            return [
                .done,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .done: return "DONE"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WarmupStatus(rawValue: rawValue) ?? WarmupStatus.sdkUnknown(rawValue)
        }
    }
}
