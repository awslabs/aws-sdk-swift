//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyEventStreams.DefaultMessageDecoder
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyEventStreamsAPI.MessageType
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct SmithyEventStreams.DefaultMessageDecoderStream
import struct SmithyEventStreamsAPI.Message
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter
import typealias SmithyEventStreamsAPI.UnmarshalClosure

public struct AddTagsToStreamOutput {

    public init() { }
}

public struct CreateStreamOutput {

    public init() { }
}

public struct DecreaseStreamRetentionPeriodOutput {

    public init() { }
}

public struct DeleteResourcePolicyOutput {

    public init() { }
}

public struct DeleteStreamOutput {

    public init() { }
}

public struct DeregisterStreamConsumerOutput {

    public init() { }
}

public struct IncreaseStreamRetentionPeriodOutput {

    public init() { }
}

public struct MergeShardsOutput {

    public init() { }
}

public struct PutResourcePolicyOutput {

    public init() { }
}

public struct RemoveTagsFromStreamOutput {

    public init() { }
}

public struct SplitShardOutput {

    public init() { }
}

public struct StartStreamEncryptionOutput {

    public init() { }
}

public struct StopStreamEncryptionOutput {

    public init() { }
}

public struct UpdateStreamModeOutput {

    public init() { }
}

/// Specifies that you do not have the permissions required to perform this operation.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A specified parameter exceeds its restrictions, is not supported, or can't be used. For more information, see the returned message.
public struct InvalidArgumentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidArgumentException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested resource exceeds the maximum number allowed, or the number of concurrent stream requests exceeds the maximum number allowed.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource is not available for this operation. For successful operation, the resource must be in the ACTIVE state.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested resource could not be found. The stream might not be specified correctly.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input for AddTagsToStream.
public struct AddTagsToStreamInput {
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream.
    public var streamName: Swift.String?
    /// A set of up to 10 key-value pairs to use to create the tags.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.streamARN = streamARN
        self.streamName = streamName
        self.tags = tags
    }
}

extension KinesisClientTypes {
    /// The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.
    public struct HashKeyRange {
        /// The ending hash key of the hash key range.
        /// This member is required.
        public var endingHashKey: Swift.String?
        /// The starting hash key of the hash key range.
        /// This member is required.
        public var startingHashKey: Swift.String?

        public init(
            endingHashKey: Swift.String? = nil,
            startingHashKey: Swift.String? = nil
        )
        {
            self.endingHashKey = endingHashKey
            self.startingHashKey = startingHashKey
        }
    }

}

extension KinesisClientTypes {
    /// Output parameter of the GetRecords API. The existing child shard of the current shard.
    public struct ChildShard {
        /// The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.
        /// This member is required.
        public var hashKeyRange: KinesisClientTypes.HashKeyRange?
        /// The current shard that is the parent of the existing child shard.
        /// This member is required.
        public var parentShards: [Swift.String]?
        /// The shard ID of the existing child shard of the current shard.
        /// This member is required.
        public var shardId: Swift.String?

        public init(
            hashKeyRange: KinesisClientTypes.HashKeyRange? = nil,
            parentShards: [Swift.String]? = nil,
            shardId: Swift.String? = nil
        )
        {
            self.hashKeyRange = hashKeyRange
            self.parentShards = parentShards
            self.shardId = shardId
        }
    }

}

extension KinesisClientTypes {

    public enum ConsumerStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ConsumerStatus] {
            return [
                .active,
                .creating,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisClientTypes {
    /// An object that represents the details of the consumer you registered. This type of object is returned by [RegisterStreamConsumer].
    public struct Consumer {
        /// When you register a consumer, Kinesis Data Streams generates an ARN for it. You need this ARN to be able to call [SubscribeToShard]. If you delete a consumer and then create a new one with the same name, it won't have the same ARN. That's because consumer ARNs contain the creation timestamp. This is important to keep in mind if you have IAM policies that reference consumer ARNs.
        /// This member is required.
        public var consumerARN: Swift.String?
        ///
        /// This member is required.
        public var consumerCreationTimestamp: Foundation.Date?
        /// The name of the consumer is something you choose when you register the consumer.
        /// This member is required.
        public var consumerName: Swift.String?
        /// A consumer can't read data while in the CREATING or DELETING states.
        /// This member is required.
        public var consumerStatus: KinesisClientTypes.ConsumerStatus?

        public init(
            consumerARN: Swift.String? = nil,
            consumerCreationTimestamp: Foundation.Date? = nil,
            consumerName: Swift.String? = nil,
            consumerStatus: KinesisClientTypes.ConsumerStatus? = nil
        )
        {
            self.consumerARN = consumerARN
            self.consumerCreationTimestamp = consumerCreationTimestamp
            self.consumerName = consumerName
            self.consumerStatus = consumerStatus
        }
    }

}

extension KinesisClientTypes {
    /// An object that represents the details of a registered consumer. This type of object is returned by [DescribeStreamConsumer].
    public struct ConsumerDescription {
        /// When you register a consumer, Kinesis Data Streams generates an ARN for it. You need this ARN to be able to call [SubscribeToShard]. If you delete a consumer and then create a new one with the same name, it won't have the same ARN. That's because consumer ARNs contain the creation timestamp. This is important to keep in mind if you have IAM policies that reference consumer ARNs.
        /// This member is required.
        public var consumerARN: Swift.String?
        ///
        /// This member is required.
        public var consumerCreationTimestamp: Foundation.Date?
        /// The name of the consumer is something you choose when you register the consumer.
        /// This member is required.
        public var consumerName: Swift.String?
        /// A consumer can't read data while in the CREATING or DELETING states.
        /// This member is required.
        public var consumerStatus: KinesisClientTypes.ConsumerStatus?
        /// The ARN of the stream with which you registered the consumer.
        /// This member is required.
        public var streamARN: Swift.String?

        public init(
            consumerARN: Swift.String? = nil,
            consumerCreationTimestamp: Foundation.Date? = nil,
            consumerName: Swift.String? = nil,
            consumerStatus: KinesisClientTypes.ConsumerStatus? = nil,
            streamARN: Swift.String? = nil
        )
        {
            self.consumerARN = consumerARN
            self.consumerCreationTimestamp = consumerCreationTimestamp
            self.consumerName = consumerName
            self.consumerStatus = consumerStatus
            self.streamARN = streamARN
        }
    }

}

extension KinesisClientTypes {

    public enum StreamMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case onDemand
        case provisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamMode] {
            return [
                .onDemand,
                .provisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .onDemand: return "ON_DEMAND"
            case .provisioned: return "PROVISIONED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisClientTypes {
    /// Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand capacity mode and a provisioned capacity mode for your data streams.
    public struct StreamModeDetails {
        /// Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand capacity mode and a provisioned capacity mode for your data streams.
        /// This member is required.
        public var streamMode: KinesisClientTypes.StreamMode?

        public init(
            streamMode: KinesisClientTypes.StreamMode? = nil
        )
        {
            self.streamMode = streamMode
        }
    }

}

/// Represents the input for CreateStream.
public struct CreateStreamInput {
    /// The number of shards that the stream will use. The throughput of the stream is a function of the number of shards; more shards are required for greater provisioned throughput.
    public var shardCount: Swift.Int?
    /// Indicates the capacity mode of the data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand capacity mode and a provisioned capacity mode for your data streams.
    public var streamModeDetails: KinesisClientTypes.StreamModeDetails?
    /// A name to identify the stream. The stream name is scoped to the Amazon Web Services account used by the application that creates the stream. It is also scoped by Amazon Web Services Region. That is, two streams in two different Amazon Web Services accounts can have the same name. Two streams in the same Amazon Web Services account but in two different Regions can also have the same name.
    /// This member is required.
    public var streamName: Swift.String?

    public init(
        shardCount: Swift.Int? = nil,
        streamModeDetails: KinesisClientTypes.StreamModeDetails? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.shardCount = shardCount
        self.streamModeDetails = streamModeDetails
        self.streamName = streamName
    }
}

/// Represents the input for [DecreaseStreamRetentionPeriod].
public struct DecreaseStreamRetentionPeriodInput {
    /// The new retention period of the stream, in hours. Must be less than the current retention period.
    /// This member is required.
    public var retentionPeriodHours: Swift.Int?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream to modify.
    public var streamName: Swift.String?

    public init(
        retentionPeriodHours: Swift.Int? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.retentionPeriodHours = retentionPeriodHours
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

public struct DeleteResourcePolicyInput {
    /// The Amazon Resource Name (ARN) of the data stream or consumer.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

/// Represents the input for [DeleteStream].
public struct DeleteStreamInput {
    /// If this parameter is unset (null) or if you set it to false, and the stream has registered consumers, the call to DeleteStream fails with a ResourceInUseException.
    public var enforceConsumerDeletion: Swift.Bool?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream to delete.
    public var streamName: Swift.String?

    public init(
        enforceConsumerDeletion: Swift.Bool? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.enforceConsumerDeletion = enforceConsumerDeletion
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

public struct DeregisterStreamConsumerInput {
    /// The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.
    public var consumerARN: Swift.String?
    /// The name that you gave to the consumer.
    public var consumerName: Swift.String?
    /// The ARN of the Kinesis data stream that the consumer is registered with. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams).
    public var streamARN: Swift.String?

    public init(
        consumerARN: Swift.String? = nil,
        consumerName: Swift.String? = nil,
        streamARN: Swift.String? = nil
    )
    {
        self.consumerARN = consumerARN
        self.consumerName = consumerName
        self.streamARN = streamARN
    }
}

public struct DescribeLimitsInput {

    public init() { }
}

public struct DescribeLimitsOutput {
    /// Indicates the number of data streams with the on-demand capacity mode.
    /// This member is required.
    public var onDemandStreamCount: Swift.Int?
    /// The maximum number of data streams with the on-demand capacity mode.
    /// This member is required.
    public var onDemandStreamCountLimit: Swift.Int?
    /// The number of open shards.
    /// This member is required.
    public var openShardCount: Swift.Int?
    /// The maximum number of shards.
    /// This member is required.
    public var shardLimit: Swift.Int?

    public init(
        onDemandStreamCount: Swift.Int? = nil,
        onDemandStreamCountLimit: Swift.Int? = nil,
        openShardCount: Swift.Int? = nil,
        shardLimit: Swift.Int? = nil
    )
    {
        self.onDemandStreamCount = onDemandStreamCount
        self.onDemandStreamCountLimit = onDemandStreamCountLimit
        self.openShardCount = openShardCount
        self.shardLimit = shardLimit
    }
}

/// Represents the input for DescribeStream.
public struct DescribeStreamInput {
    /// The shard ID of the shard to start with. Specify this parameter to indicate that you want to describe the stream starting with the shard whose ID immediately follows ExclusiveStartShardId. If you don't specify this parameter, the default behavior for DescribeStream is to describe the stream starting with the first shard in the stream.
    public var exclusiveStartShardId: Swift.String?
    /// The maximum number of shards to return in a single call. The default value is 100. If you specify a value greater than 100, at most 100 results are returned.
    public var limit: Swift.Int?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream to describe.
    public var streamName: Swift.String?

    public init(
        exclusiveStartShardId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.exclusiveStartShardId = exclusiveStartShardId
        self.limit = limit
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

extension KinesisClientTypes {

    public enum EncryptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case kms
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionType] {
            return [
                .kms,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .kms: return "KMS"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisClientTypes {

    public enum MetricsName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case incomingBytes
        case incomingRecords
        case iteratorAgeMilliseconds
        case outgoingBytes
        case outgoingRecords
        case readProvisionedThroughputExceeded
        case writeProvisionedThroughputExceeded
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricsName] {
            return [
                .all,
                .incomingBytes,
                .incomingRecords,
                .iteratorAgeMilliseconds,
                .outgoingBytes,
                .outgoingRecords,
                .readProvisionedThroughputExceeded,
                .writeProvisionedThroughputExceeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .incomingBytes: return "IncomingBytes"
            case .incomingRecords: return "IncomingRecords"
            case .iteratorAgeMilliseconds: return "IteratorAgeMilliseconds"
            case .outgoingBytes: return "OutgoingBytes"
            case .outgoingRecords: return "OutgoingRecords"
            case .readProvisionedThroughputExceeded: return "ReadProvisionedThroughputExceeded"
            case .writeProvisionedThroughputExceeded: return "WriteProvisionedThroughputExceeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisClientTypes {
    /// Represents enhanced metrics types.
    public struct EnhancedMetrics {
        /// List of shard-level metrics. The following are the valid shard-level metrics. The value "ALL" enhances every metric.
        ///
        /// * IncomingBytes
        ///
        /// * IncomingRecords
        ///
        /// * OutgoingBytes
        ///
        /// * OutgoingRecords
        ///
        /// * WriteProvisionedThroughputExceeded
        ///
        /// * ReadProvisionedThroughputExceeded
        ///
        /// * IteratorAgeMilliseconds
        ///
        /// * ALL
        ///
        ///
        /// For more information, see [Monitoring the Amazon Kinesis Data Streams Service with Amazon CloudWatch](https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html) in the Amazon Kinesis Data Streams Developer Guide.
        public var shardLevelMetrics: [KinesisClientTypes.MetricsName]?

        public init(
            shardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil
        )
        {
            self.shardLevelMetrics = shardLevelMetrics
        }
    }

}

extension KinesisClientTypes {
    /// The range of possible sequence numbers for the shard.
    public struct SequenceNumberRange {
        /// The ending sequence number for the range. Shards that are in the OPEN state have an ending sequence number of null.
        public var endingSequenceNumber: Swift.String?
        /// The starting sequence number for the range.
        /// This member is required.
        public var startingSequenceNumber: Swift.String?

        public init(
            endingSequenceNumber: Swift.String? = nil,
            startingSequenceNumber: Swift.String? = nil
        )
        {
            self.endingSequenceNumber = endingSequenceNumber
            self.startingSequenceNumber = startingSequenceNumber
        }
    }

}

extension KinesisClientTypes {
    /// A uniquely identified group of data records in a Kinesis data stream.
    public struct Shard {
        /// The shard ID of the shard adjacent to the shard's parent.
        public var adjacentParentShardId: Swift.String?
        /// The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.
        /// This member is required.
        public var hashKeyRange: KinesisClientTypes.HashKeyRange?
        /// The shard ID of the shard's parent.
        public var parentShardId: Swift.String?
        /// The range of possible sequence numbers for the shard.
        /// This member is required.
        public var sequenceNumberRange: KinesisClientTypes.SequenceNumberRange?
        /// The unique identifier of the shard within the stream.
        /// This member is required.
        public var shardId: Swift.String?

        public init(
            adjacentParentShardId: Swift.String? = nil,
            hashKeyRange: KinesisClientTypes.HashKeyRange? = nil,
            parentShardId: Swift.String? = nil,
            sequenceNumberRange: KinesisClientTypes.SequenceNumberRange? = nil,
            shardId: Swift.String? = nil
        )
        {
            self.adjacentParentShardId = adjacentParentShardId
            self.hashKeyRange = hashKeyRange
            self.parentShardId = parentShardId
            self.sequenceNumberRange = sequenceNumberRange
            self.shardId = shardId
        }
    }

}

extension KinesisClientTypes {

    public enum StreamStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisClientTypes {
    /// Represents the output for [DescribeStream].
    public struct StreamDescription {
        /// The server-side encryption type used on the stream. This parameter can be one of the following values:
        ///
        /// * NONE: Do not encrypt the records in the stream.
        ///
        /// * KMS: Use server-side encryption on the records in the stream using a customer-managed Amazon Web Services KMS key.
        public var encryptionType: KinesisClientTypes.EncryptionType?
        /// Represents the current enhanced monitoring settings of the stream.
        /// This member is required.
        public var enhancedMonitoring: [KinesisClientTypes.EnhancedMetrics]?
        /// If set to true, more shards in the stream are available to describe.
        /// This member is required.
        public var hasMoreShards: Swift.Bool?
        /// The GUID for the customer-managed Amazon Web Services KMS key to use for encryption. This value can be a globally unique identifier, a fully specified ARN to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
        ///
        /// * Key ARN example: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012
        ///
        /// * Alias ARN example: arn:aws:kms:us-east-1:123456789012:alias/MyAliasName
        ///
        /// * Globally unique key ID example: 12345678-1234-1234-1234-123456789012
        ///
        /// * Alias name example: alias/MyAliasName
        ///
        /// * Master key owned by Kinesis Data Streams: alias/aws/kinesis
        public var keyId: Swift.String?
        /// The current retention period, in hours. Minimum value of 24. Maximum value of 168.
        /// This member is required.
        public var retentionPeriodHours: Swift.Int?
        /// The shards that comprise the stream.
        /// This member is required.
        public var shards: [KinesisClientTypes.Shard]?
        /// The Amazon Resource Name (ARN) for the stream being described.
        /// This member is required.
        public var streamARN: Swift.String?
        /// The approximate time that the stream was created.
        /// This member is required.
        public var streamCreationTimestamp: Foundation.Date?
        /// Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand capacity mode and a provisioned capacity mode for your data streams.
        public var streamModeDetails: KinesisClientTypes.StreamModeDetails?
        /// The name of the stream being described.
        /// This member is required.
        public var streamName: Swift.String?
        /// The current status of the stream being described. The stream status is one of the following states:
        ///
        /// * CREATING - The stream is being created. Kinesis Data Streams immediately returns and sets StreamStatus to CREATING.
        ///
        /// * DELETING - The stream is being deleted. The specified stream is in the DELETING state until Kinesis Data Streams completes the deletion.
        ///
        /// * ACTIVE - The stream exists and is ready for read and write operations or deletion. You should perform read and write operations only on an ACTIVE stream.
        ///
        /// * UPDATING - Shards in the stream are being merged or split. Read and write operations continue to work while the stream is in the UPDATING state.
        /// This member is required.
        public var streamStatus: KinesisClientTypes.StreamStatus?

        public init(
            encryptionType: KinesisClientTypes.EncryptionType? = nil,
            enhancedMonitoring: [KinesisClientTypes.EnhancedMetrics]? = nil,
            hasMoreShards: Swift.Bool? = nil,
            keyId: Swift.String? = nil,
            retentionPeriodHours: Swift.Int? = nil,
            shards: [KinesisClientTypes.Shard]? = nil,
            streamARN: Swift.String? = nil,
            streamCreationTimestamp: Foundation.Date? = nil,
            streamModeDetails: KinesisClientTypes.StreamModeDetails? = nil,
            streamName: Swift.String? = nil,
            streamStatus: KinesisClientTypes.StreamStatus? = nil
        )
        {
            self.encryptionType = encryptionType
            self.enhancedMonitoring = enhancedMonitoring
            self.hasMoreShards = hasMoreShards
            self.keyId = keyId
            self.retentionPeriodHours = retentionPeriodHours
            self.shards = shards
            self.streamARN = streamARN
            self.streamCreationTimestamp = streamCreationTimestamp
            self.streamModeDetails = streamModeDetails
            self.streamName = streamName
            self.streamStatus = streamStatus
        }
    }

}

/// Represents the output for DescribeStream.
public struct DescribeStreamOutput {
    /// The current status of the stream, the stream Amazon Resource Name (ARN), an array of shard objects that comprise the stream, and whether there are more shards available.
    /// This member is required.
    public var streamDescription: KinesisClientTypes.StreamDescription?

    public init(
        streamDescription: KinesisClientTypes.StreamDescription? = nil
    )
    {
        self.streamDescription = streamDescription
    }
}

public struct DescribeStreamConsumerInput {
    /// The ARN returned by Kinesis Data Streams when you registered the consumer.
    public var consumerARN: Swift.String?
    /// The name that you gave to the consumer.
    public var consumerName: Swift.String?
    /// The ARN of the Kinesis data stream that the consumer is registered with. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams).
    public var streamARN: Swift.String?

    public init(
        consumerARN: Swift.String? = nil,
        consumerName: Swift.String? = nil,
        streamARN: Swift.String? = nil
    )
    {
        self.consumerARN = consumerARN
        self.consumerName = consumerName
        self.streamARN = streamARN
    }
}

public struct DescribeStreamConsumerOutput {
    /// An object that represents the details of the consumer.
    /// This member is required.
    public var consumerDescription: KinesisClientTypes.ConsumerDescription?

    public init(
        consumerDescription: KinesisClientTypes.ConsumerDescription? = nil
    )
    {
        self.consumerDescription = consumerDescription
    }
}

public struct DescribeStreamSummaryInput {
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream to describe.
    public var streamName: Swift.String?

    public init(
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

extension KinesisClientTypes {
    /// Represents the output for [DescribeStreamSummary]
    public struct StreamDescriptionSummary {
        /// The number of enhanced fan-out consumers registered with the stream.
        public var consumerCount: Swift.Int?
        /// The encryption type used. This value is one of the following:
        ///
        /// * KMS
        ///
        /// * NONE
        public var encryptionType: KinesisClientTypes.EncryptionType?
        /// Represents the current enhanced monitoring settings of the stream.
        /// This member is required.
        public var enhancedMonitoring: [KinesisClientTypes.EnhancedMetrics]?
        /// The GUID for the customer-managed Amazon Web Services KMS key to use for encryption. This value can be a globally unique identifier, a fully specified ARN to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
        ///
        /// * Key ARN example: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012
        ///
        /// * Alias ARN example:  arn:aws:kms:us-east-1:123456789012:alias/MyAliasName
        ///
        /// * Globally unique key ID example: 12345678-1234-1234-1234-123456789012
        ///
        /// * Alias name example: alias/MyAliasName
        ///
        /// * Master key owned by Kinesis Data Streams: alias/aws/kinesis
        public var keyId: Swift.String?
        /// The number of open shards in the stream.
        /// This member is required.
        public var openShardCount: Swift.Int?
        /// The current retention period, in hours.
        /// This member is required.
        public var retentionPeriodHours: Swift.Int?
        /// The Amazon Resource Name (ARN) for the stream being described.
        /// This member is required.
        public var streamARN: Swift.String?
        /// The approximate time that the stream was created.
        /// This member is required.
        public var streamCreationTimestamp: Foundation.Date?
        /// Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand ycapacity mode and a provisioned capacity mode for your data streams.
        public var streamModeDetails: KinesisClientTypes.StreamModeDetails?
        /// The name of the stream being described.
        /// This member is required.
        public var streamName: Swift.String?
        /// The current status of the stream being described. The stream status is one of the following states:
        ///
        /// * CREATING - The stream is being created. Kinesis Data Streams immediately returns and sets StreamStatus to CREATING.
        ///
        /// * DELETING - The stream is being deleted. The specified stream is in the DELETING state until Kinesis Data Streams completes the deletion.
        ///
        /// * ACTIVE - The stream exists and is ready for read and write operations or deletion. You should perform read and write operations only on an ACTIVE stream.
        ///
        /// * UPDATING - Shards in the stream are being merged or split. Read and write operations continue to work while the stream is in the UPDATING state.
        /// This member is required.
        public var streamStatus: KinesisClientTypes.StreamStatus?

        public init(
            consumerCount: Swift.Int? = nil,
            encryptionType: KinesisClientTypes.EncryptionType? = nil,
            enhancedMonitoring: [KinesisClientTypes.EnhancedMetrics]? = nil,
            keyId: Swift.String? = nil,
            openShardCount: Swift.Int? = nil,
            retentionPeriodHours: Swift.Int? = nil,
            streamARN: Swift.String? = nil,
            streamCreationTimestamp: Foundation.Date? = nil,
            streamModeDetails: KinesisClientTypes.StreamModeDetails? = nil,
            streamName: Swift.String? = nil,
            streamStatus: KinesisClientTypes.StreamStatus? = nil
        )
        {
            self.consumerCount = consumerCount
            self.encryptionType = encryptionType
            self.enhancedMonitoring = enhancedMonitoring
            self.keyId = keyId
            self.openShardCount = openShardCount
            self.retentionPeriodHours = retentionPeriodHours
            self.streamARN = streamARN
            self.streamCreationTimestamp = streamCreationTimestamp
            self.streamModeDetails = streamModeDetails
            self.streamName = streamName
            self.streamStatus = streamStatus
        }
    }

}

public struct DescribeStreamSummaryOutput {
    /// A [StreamDescriptionSummary] containing information about the stream.
    /// This member is required.
    public var streamDescriptionSummary: KinesisClientTypes.StreamDescriptionSummary?

    public init(
        streamDescriptionSummary: KinesisClientTypes.StreamDescriptionSummary? = nil
    )
    {
        self.streamDescriptionSummary = streamDescriptionSummary
    }
}

/// Represents the input for [DisableEnhancedMonitoring].
public struct DisableEnhancedMonitoringInput {
    /// List of shard-level metrics to disable. The following are the valid shard-level metrics. The value "ALL" disables every metric.
    ///
    /// * IncomingBytes
    ///
    /// * IncomingRecords
    ///
    /// * OutgoingBytes
    ///
    /// * OutgoingRecords
    ///
    /// * WriteProvisionedThroughputExceeded
    ///
    /// * ReadProvisionedThroughputExceeded
    ///
    /// * IteratorAgeMilliseconds
    ///
    /// * ALL
    ///
    ///
    /// For more information, see [Monitoring the Amazon Kinesis Data Streams Service with Amazon CloudWatch](https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html) in the Amazon Kinesis Data Streams Developer Guide.
    /// This member is required.
    public var shardLevelMetrics: [KinesisClientTypes.MetricsName]?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the Kinesis data stream for which to disable enhanced monitoring.
    public var streamName: Swift.String?

    public init(
        shardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.shardLevelMetrics = shardLevelMetrics
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

/// Represents the output for [EnableEnhancedMonitoring] and [DisableEnhancedMonitoring].
public struct DisableEnhancedMonitoringOutput {
    /// Represents the current state of the metrics that are in the enhanced state before the operation.
    public var currentShardLevelMetrics: [KinesisClientTypes.MetricsName]?
    /// Represents the list of all the metrics that would be in the enhanced state after the operation.
    public var desiredShardLevelMetrics: [KinesisClientTypes.MetricsName]?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the Kinesis data stream.
    public var streamName: Swift.String?

    public init(
        currentShardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil,
        desiredShardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.currentShardLevelMetrics = currentShardLevelMetrics
        self.desiredShardLevelMetrics = desiredShardLevelMetrics
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

/// Represents the input for [EnableEnhancedMonitoring].
public struct EnableEnhancedMonitoringInput {
    /// List of shard-level metrics to enable. The following are the valid shard-level metrics. The value "ALL" enables every metric.
    ///
    /// * IncomingBytes
    ///
    /// * IncomingRecords
    ///
    /// * OutgoingBytes
    ///
    /// * OutgoingRecords
    ///
    /// * WriteProvisionedThroughputExceeded
    ///
    /// * ReadProvisionedThroughputExceeded
    ///
    /// * IteratorAgeMilliseconds
    ///
    /// * ALL
    ///
    ///
    /// For more information, see [Monitoring the Amazon Kinesis Data Streams Service with Amazon CloudWatch](https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html) in the Amazon Kinesis Data Streams Developer Guide.
    /// This member is required.
    public var shardLevelMetrics: [KinesisClientTypes.MetricsName]?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream for which to enable enhanced monitoring.
    public var streamName: Swift.String?

    public init(
        shardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.shardLevelMetrics = shardLevelMetrics
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

/// Represents the output for [EnableEnhancedMonitoring] and [DisableEnhancedMonitoring].
public struct EnableEnhancedMonitoringOutput {
    /// Represents the current state of the metrics that are in the enhanced state before the operation.
    public var currentShardLevelMetrics: [KinesisClientTypes.MetricsName]?
    /// Represents the list of all the metrics that would be in the enhanced state after the operation.
    public var desiredShardLevelMetrics: [KinesisClientTypes.MetricsName]?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the Kinesis data stream.
    public var streamName: Swift.String?

    public init(
        currentShardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil,
        desiredShardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.currentShardLevelMetrics = currentShardLevelMetrics
        self.desiredShardLevelMetrics = desiredShardLevelMetrics
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

/// The provided iterator exceeds the maximum age allowed.
public struct ExpiredIteratorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ExpiredIteratorException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The pagination token passed to the operation is expired.
public struct ExpiredNextTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ExpiredNextTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The ciphertext references a key that doesn't exist or that you don't have access to.
public struct KMSAccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSAccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the specified customer master key (CMK) isn't enabled.
public struct KMSDisabledException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSDisabledException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the state of the specified resource isn't valid for this request. For more information, see [How Key State Affects Use of a Customer Master Key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the Amazon Web Services Key Management Service Developer Guide.
public struct KMSInvalidStateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSInvalidStateException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the specified entity or resource can't be found.
public struct KMSNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The Amazon Web Services access key ID needs a subscription for the service.
public struct KMSOptInRequired: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSOptInRequired" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling. For more information about throttling, see [Limits](https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second) in the Amazon Web Services Key Management Service Developer Guide.
public struct KMSThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request rate for the stream is too high, or the requested data is too large for the available throughput. Reduce the frequency or size of your requests. For more information, see [Streams Limits](https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html) in the Amazon Kinesis Data Streams Developer Guide, and [Error Retries and Exponential Backoff in Amazon Web Services](https://docs.aws.amazon.com/general/latest/gr/api-retries.html) in the Amazon Web Services General Reference.
public struct ProvisionedThroughputExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ProvisionedThroughputExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input for [GetRecords].
public struct GetRecordsInput {
    /// The maximum number of records to return. Specify a value of up to 10,000. If you specify a value that is greater than 10,000, [GetRecords] throws InvalidArgumentException. The default value is 10,000.
    public var limit: Swift.Int?
    /// The position in the shard from which you want to start sequentially reading data records. A shard iterator specifies this position using the sequence number of a data record in the shard.
    /// This member is required.
    public var shardIterator: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        shardIterator: Swift.String? = nil,
        streamARN: Swift.String? = nil
    )
    {
        self.limit = limit
        self.shardIterator = shardIterator
        self.streamARN = streamARN
    }
}

extension KinesisClientTypes {
    /// The unit of data of the Kinesis data stream, which is composed of a sequence number, a partition key, and a data blob.
    public struct Record {
        /// The approximate time that the record was inserted into the stream.
        public var approximateArrivalTimestamp: Foundation.Date?
        /// The data blob. The data in the blob is both opaque and immutable to Kinesis Data Streams, which does not inspect, interpret, or change the data in the blob in any way. When the data blob (the payload before base64-encoding) is added to the partition key size, the total size must not exceed the maximum record size (1 MiB).
        /// This member is required.
        public var data: Foundation.Data?
        /// The encryption type used on the record. This parameter can be one of the following values:
        ///
        /// * NONE: Do not encrypt the records in the stream.
        ///
        /// * KMS: Use server-side encryption on the records in the stream using a customer-managed Amazon Web Services KMS key.
        public var encryptionType: KinesisClientTypes.EncryptionType?
        /// Identifies which shard in the stream the data record is assigned to.
        /// This member is required.
        public var partitionKey: Swift.String?
        /// The unique identifier of the record within its shard.
        /// This member is required.
        public var sequenceNumber: Swift.String?

        public init(
            approximateArrivalTimestamp: Foundation.Date? = nil,
            data: Foundation.Data? = nil,
            encryptionType: KinesisClientTypes.EncryptionType? = nil,
            partitionKey: Swift.String? = nil,
            sequenceNumber: Swift.String? = nil
        )
        {
            self.approximateArrivalTimestamp = approximateArrivalTimestamp
            self.data = data
            self.encryptionType = encryptionType
            self.partitionKey = partitionKey
            self.sequenceNumber = sequenceNumber
        }
    }

}

/// Represents the output for [GetRecords].
public struct GetRecordsOutput {
    /// The list of the current shard's child shards, returned in the GetRecords API's response only when the end of the current shard is reached.
    public var childShards: [KinesisClientTypes.ChildShard]?
    /// The number of milliseconds the [GetRecords] response is from the tip of the stream, indicating how far behind current time the consumer is. A value of zero indicates that record processing is caught up, and there are no new records to process at this moment.
    public var millisBehindLatest: Swift.Int?
    /// The next position in the shard from which to start sequentially reading data records. If set to null, the shard has been closed and the requested iterator does not return any more data.
    public var nextShardIterator: Swift.String?
    /// The data records retrieved from the shard.
    /// This member is required.
    public var records: [KinesisClientTypes.Record]?

    public init(
        childShards: [KinesisClientTypes.ChildShard]? = nil,
        millisBehindLatest: Swift.Int? = nil,
        nextShardIterator: Swift.String? = nil,
        records: [KinesisClientTypes.Record]? = nil
    )
    {
        self.childShards = childShards
        self.millisBehindLatest = millisBehindLatest
        self.nextShardIterator = nextShardIterator
        self.records = records
    }
}

public struct GetResourcePolicyInput {
    /// The Amazon Resource Name (ARN) of the data stream or consumer.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

public struct GetResourcePolicyOutput {
    /// Details of the resource policy. This is formatted as a JSON string.
    /// This member is required.
    public var policy: Swift.String?

    public init(
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

extension KinesisClientTypes {

    public enum ShardIteratorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case afterSequenceNumber
        case atSequenceNumber
        case atTimestamp
        case latest
        case trimHorizon
        case sdkUnknown(Swift.String)

        public static var allCases: [ShardIteratorType] {
            return [
                .afterSequenceNumber,
                .atSequenceNumber,
                .atTimestamp,
                .latest,
                .trimHorizon
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .afterSequenceNumber: return "AFTER_SEQUENCE_NUMBER"
            case .atSequenceNumber: return "AT_SEQUENCE_NUMBER"
            case .atTimestamp: return "AT_TIMESTAMP"
            case .latest: return "LATEST"
            case .trimHorizon: return "TRIM_HORIZON"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Represents the input for GetShardIterator.
public struct GetShardIteratorInput {
    /// The shard ID of the Kinesis Data Streams shard to get the iterator for.
    /// This member is required.
    public var shardId: Swift.String?
    /// Determines how the shard iterator is used to start reading data records from the shard. The following are the valid Amazon Kinesis shard iterator types:
    ///
    /// * AT_SEQUENCE_NUMBER - Start reading from the position denoted by a specific sequence number, provided in the value StartingSequenceNumber.
    ///
    /// * AFTER_SEQUENCE_NUMBER - Start reading right after the position denoted by a specific sequence number, provided in the value StartingSequenceNumber.
    ///
    /// * AT_TIMESTAMP - Start reading from the position denoted by a specific time stamp, provided in the value Timestamp.
    ///
    /// * TRIM_HORIZON - Start reading at the last untrimmed record in the shard in the system, which is the oldest data record in the shard.
    ///
    /// * LATEST - Start reading just after the most recent record in the shard, so that you always read the most recent data in the shard.
    /// This member is required.
    public var shardIteratorType: KinesisClientTypes.ShardIteratorType?
    /// The sequence number of the data record in the shard from which to start reading. Used with shard iterator type AT_SEQUENCE_NUMBER and AFTER_SEQUENCE_NUMBER.
    public var startingSequenceNumber: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the Amazon Kinesis data stream.
    public var streamName: Swift.String?
    /// The time stamp of the data record from which to start reading. Used with shard iterator type AT_TIMESTAMP. A time stamp is the Unix epoch date with precision in milliseconds. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480. If a record with this exact time stamp does not exist, the iterator returned is for the next (later) record. If the time stamp is older than the current trim horizon, the iterator returned is for the oldest untrimmed data record (TRIM_HORIZON).
    public var timestamp: Foundation.Date?

    public init(
        shardId: Swift.String? = nil,
        shardIteratorType: KinesisClientTypes.ShardIteratorType? = nil,
        startingSequenceNumber: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil,
        timestamp: Foundation.Date? = nil
    )
    {
        self.shardId = shardId
        self.shardIteratorType = shardIteratorType
        self.startingSequenceNumber = startingSequenceNumber
        self.streamARN = streamARN
        self.streamName = streamName
        self.timestamp = timestamp
    }
}

/// Represents the output for GetShardIterator.
public struct GetShardIteratorOutput {
    /// The position in the shard from which to start reading data records sequentially. A shard iterator specifies this position using the sequence number of a data record in a shard.
    public var shardIterator: Swift.String?

    public init(
        shardIterator: Swift.String? = nil
    )
    {
        self.shardIterator = shardIterator
    }
}

/// Represents the input for [IncreaseStreamRetentionPeriod].
public struct IncreaseStreamRetentionPeriodInput {
    /// The new retention period of the stream, in hours. Must be more than the current retention period.
    /// This member is required.
    public var retentionPeriodHours: Swift.Int?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream to modify.
    public var streamName: Swift.String?

    public init(
        retentionPeriodHours: Swift.Int? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.retentionPeriodHours = retentionPeriodHours
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

/// The processing of the request failed because of an unknown error, exception, or failure.
public struct InternalFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalFailureException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension KinesisClientTypes {

    public enum ShardFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case afterShardId
        case atLatest
        case atTimestamp
        case atTrimHorizon
        case fromTimestamp
        case fromTrimHorizon
        case sdkUnknown(Swift.String)

        public static var allCases: [ShardFilterType] {
            return [
                .afterShardId,
                .atLatest,
                .atTimestamp,
                .atTrimHorizon,
                .fromTimestamp,
                .fromTrimHorizon
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .afterShardId: return "AFTER_SHARD_ID"
            case .atLatest: return "AT_LATEST"
            case .atTimestamp: return "AT_TIMESTAMP"
            case .atTrimHorizon: return "AT_TRIM_HORIZON"
            case .fromTimestamp: return "FROM_TIMESTAMP"
            case .fromTrimHorizon: return "FROM_TRIM_HORIZON"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisClientTypes {
    /// The request parameter used to filter out the response of the ListShards API.
    public struct ShardFilter {
        /// The exclusive start shardID speified in the ShardFilter parameter. This property can only be used if the AFTER_SHARD_ID shard type is specified.
        public var shardId: Swift.String?
        /// The timestamps specified in the ShardFilter parameter. A timestamp is a Unix epoch date with precision in milliseconds. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480. This property can only be used if FROM_TIMESTAMP or AT_TIMESTAMP shard types are specified.
        public var timestamp: Foundation.Date?
        /// The shard type specified in the ShardFilter parameter. This is a required property of the ShardFilter parameter. You can specify the following valid values:
        ///
        /// * AFTER_SHARD_ID - the response includes all the shards, starting with the shard whose ID immediately follows the ShardId that you provided.
        ///
        /// * AT_TRIM_HORIZON - the response includes all the shards that were open at TRIM_HORIZON.
        ///
        /// * FROM_TRIM_HORIZON - (default), the response includes all the shards within the retention period of the data stream (trim to tip).
        ///
        /// * AT_LATEST - the response includes only the currently open shards of the data stream.
        ///
        /// * AT_TIMESTAMP - the response includes all shards whose start timestamp is less than or equal to the given timestamp and end timestamp is greater than or equal to the given timestamp or still open.
        ///
        /// * FROM_TIMESTAMP - the response incldues all closed shards whose end timestamp is greater than or equal to the given timestamp and also all open shards. Corrected to TRIM_HORIZON of the data stream if FROM_TIMESTAMP is less than the TRIM_HORIZON value.
        /// This member is required.
        public var type: KinesisClientTypes.ShardFilterType?

        public init(
            shardId: Swift.String? = nil,
            timestamp: Foundation.Date? = nil,
            type: KinesisClientTypes.ShardFilterType? = nil
        )
        {
            self.shardId = shardId
            self.timestamp = timestamp
            self.type = type
        }
    }

}

public struct ListShardsInput {
    /// Specify this parameter to indicate that you want to list the shards starting with the shard whose ID immediately follows ExclusiveStartShardId. If you don't specify this parameter, the default behavior is for ListShards to list the shards starting with the first one in the stream. You cannot specify this parameter if you specify NextToken.
    public var exclusiveStartShardId: Swift.String?
    /// The maximum number of shards to return in a single call to ListShards. The maximum number of shards to return in a single call. The default value is 1000. If you specify a value greater than 1000, at most 1000 results are returned. When the number of shards to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListShards to list the next set of shards.
    public var maxResults: Swift.Int?
    /// When the number of shards in the data stream is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of shards in the data stream, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListShards to list the next set of shards. Don't specify StreamName or StreamCreationTimestamp if you specify NextToken because the latter unambiguously identifies the stream. You can optionally specify a value for the MaxResults parameter when you specify NextToken. If you specify a MaxResults value that is less than the number of shards that the operation returns if you don't specify MaxResults, the response will contain a new NextToken value. You can use the new NextToken value in a subsequent call to the ListShards operation. Tokens expire after 300 seconds. When you obtain a value for NextToken in the response to a call to ListShards, you have 300 seconds to use that value. If you specify an expired token in a call to ListShards, you get ExpiredNextTokenException.
    public var nextToken: Swift.String?
    /// Enables you to filter out the response of the ListShards API. You can only specify one filter at a time. If you use the ShardFilter parameter when invoking the ListShards API, the Type is the required property and must be specified. If you specify the AT_TRIM_HORIZON, FROM_TRIM_HORIZON, or AT_LATEST types, you do not need to specify either the ShardId or the Timestamp optional properties. If you specify the AFTER_SHARD_ID type, you must also provide the value for the optional ShardId property. The ShardId property is identical in fuctionality to the ExclusiveStartShardId parameter of the ListShards API. When ShardId property is specified, the response includes the shards starting with the shard whose ID immediately follows the ShardId that you provided. If you specify the AT_TIMESTAMP or FROM_TIMESTAMP_ID type, you must also provide the value for the optional Timestamp property. If you specify the AT_TIMESTAMP type, then all shards that were open at the provided timestamp are returned. If you specify the FROM_TIMESTAMP type, then all shards starting from the provided timestamp to TIP are returned.
    public var shardFilter: KinesisClientTypes.ShardFilter?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// Specify this input parameter to distinguish data streams that have the same name. For example, if you create a data stream and then delete it, and you later create another data stream with the same name, you can use this input parameter to specify which of the two streams you want to list the shards for. You cannot specify this parameter if you specify the NextToken parameter.
    public var streamCreationTimestamp: Foundation.Date?
    /// The name of the data stream whose shards you want to list. You cannot specify this parameter if you specify the NextToken parameter.
    public var streamName: Swift.String?

    public init(
        exclusiveStartShardId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        shardFilter: KinesisClientTypes.ShardFilter? = nil,
        streamARN: Swift.String? = nil,
        streamCreationTimestamp: Foundation.Date? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.exclusiveStartShardId = exclusiveStartShardId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.shardFilter = shardFilter
        self.streamARN = streamARN
        self.streamCreationTimestamp = streamCreationTimestamp
        self.streamName = streamName
    }
}

public struct ListShardsOutput {
    /// When the number of shards in the data stream is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of shards in the data stream, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListShards to list the next set of shards. For more information about the use of this pagination token when calling the ListShards operation, see [ListShardsInput$NextToken]. Tokens expire after 300 seconds. When you obtain a value for NextToken in the response to a call to ListShards, you have 300 seconds to use that value. If you specify an expired token in a call to ListShards, you get ExpiredNextTokenException.
    public var nextToken: Swift.String?
    /// An array of JSON objects. Each object represents one shard and specifies the IDs of the shard, the shard's parent, and the shard that's adjacent to the shard's parent. Each object also contains the starting and ending hash keys and the starting and ending sequence numbers for the shard.
    public var shards: [KinesisClientTypes.Shard]?

    public init(
        nextToken: Swift.String? = nil,
        shards: [KinesisClientTypes.Shard]? = nil
    )
    {
        self.nextToken = nextToken
        self.shards = shards
    }
}

public struct ListStreamConsumersInput {
    /// The maximum number of consumers that you want a single call of ListStreamConsumers to return. The default value is 100. If you specify a value greater than 100, at most 100 results are returned.
    public var maxResults: Swift.Int?
    /// When the number of consumers that are registered with the data stream is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of consumers that are registered with the data stream, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListStreamConsumers to list the next set of registered consumers. Don't specify StreamName or StreamCreationTimestamp if you specify NextToken because the latter unambiguously identifies the stream. You can optionally specify a value for the MaxResults parameter when you specify NextToken. If you specify a MaxResults value that is less than the number of consumers that the operation returns if you don't specify MaxResults, the response will contain a new NextToken value. You can use the new NextToken value in a subsequent call to the ListStreamConsumers operation to list the next set of consumers. Tokens expire after 300 seconds. When you obtain a value for NextToken in the response to a call to ListStreamConsumers, you have 300 seconds to use that value. If you specify an expired token in a call to ListStreamConsumers, you get ExpiredNextTokenException.
    public var nextToken: Swift.String?
    /// The ARN of the Kinesis data stream for which you want to list the registered consumers. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams).
    /// This member is required.
    public var streamARN: Swift.String?
    /// Specify this input parameter to distinguish data streams that have the same name. For example, if you create a data stream and then delete it, and you later create another data stream with the same name, you can use this input parameter to specify which of the two streams you want to list the consumers for. You can't specify this parameter if you specify the NextToken parameter.
    public var streamCreationTimestamp: Foundation.Date?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamCreationTimestamp: Foundation.Date? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.streamARN = streamARN
        self.streamCreationTimestamp = streamCreationTimestamp
    }
}

public struct ListStreamConsumersOutput {
    /// An array of JSON objects. Each object represents one registered consumer.
    public var consumers: [KinesisClientTypes.Consumer]?
    /// When the number of consumers that are registered with the data stream is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of registered consumers, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListStreamConsumers to list the next set of registered consumers. For more information about the use of this pagination token when calling the ListStreamConsumers operation, see [ListStreamConsumersInput$NextToken]. Tokens expire after 300 seconds. When you obtain a value for NextToken in the response to a call to ListStreamConsumers, you have 300 seconds to use that value. If you specify an expired token in a call to ListStreamConsumers, you get ExpiredNextTokenException.
    public var nextToken: Swift.String?

    public init(
        consumers: [KinesisClientTypes.Consumer]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.consumers = consumers
        self.nextToken = nextToken
    }
}

/// Represents the input for ListStreams.
public struct ListStreamsInput {
    /// The name of the stream to start the list with.
    public var exclusiveStartStreamName: Swift.String?
    /// The maximum number of streams to list. The default value is 100. If you specify a value greater than 100, at most 100 results are returned.
    public var limit: Swift.Int?
    ///
    public var nextToken: Swift.String?

    public init(
        exclusiveStartStreamName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exclusiveStartStreamName = exclusiveStartStreamName
        self.limit = limit
        self.nextToken = nextToken
    }
}

extension KinesisClientTypes {
    /// The summary of a stream.
    public struct StreamSummary {
        /// The ARN of the stream.
        /// This member is required.
        public var streamARN: Swift.String?
        /// The timestamp at which the stream was created.
        public var streamCreationTimestamp: Foundation.Date?
        /// Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand capacity mode and a provisioned capacity mode for your data streams.
        public var streamModeDetails: KinesisClientTypes.StreamModeDetails?
        /// The name of a stream.
        /// This member is required.
        public var streamName: Swift.String?
        /// The status of the stream.
        /// This member is required.
        public var streamStatus: KinesisClientTypes.StreamStatus?

        public init(
            streamARN: Swift.String? = nil,
            streamCreationTimestamp: Foundation.Date? = nil,
            streamModeDetails: KinesisClientTypes.StreamModeDetails? = nil,
            streamName: Swift.String? = nil,
            streamStatus: KinesisClientTypes.StreamStatus? = nil
        )
        {
            self.streamARN = streamARN
            self.streamCreationTimestamp = streamCreationTimestamp
            self.streamModeDetails = streamModeDetails
            self.streamName = streamName
            self.streamStatus = streamStatus
        }
    }

}

/// Represents the output for ListStreams.
public struct ListStreamsOutput {
    /// If set to true, there are more streams available to list.
    /// This member is required.
    public var hasMoreStreams: Swift.Bool?
    ///
    public var nextToken: Swift.String?
    /// The names of the streams that are associated with the Amazon Web Services account making the ListStreams request.
    /// This member is required.
    public var streamNames: [Swift.String]?
    ///
    public var streamSummaries: [KinesisClientTypes.StreamSummary]?

    public init(
        hasMoreStreams: Swift.Bool? = nil,
        nextToken: Swift.String? = nil,
        streamNames: [Swift.String]? = nil,
        streamSummaries: [KinesisClientTypes.StreamSummary]? = nil
    )
    {
        self.hasMoreStreams = hasMoreStreams
        self.nextToken = nextToken
        self.streamNames = streamNames
        self.streamSummaries = streamSummaries
    }
}

/// Represents the input for ListTagsForStream.
public struct ListTagsForStreamInput {
    /// The key to use as the starting point for the list of tags. If this parameter is set, ListTagsForStream gets all tags that occur after ExclusiveStartTagKey.
    public var exclusiveStartTagKey: Swift.String?
    /// The number of tags to return. If this number is less than the total number of tags associated with the stream, HasMoreTags is set to true. To list additional tags, set ExclusiveStartTagKey to the last key in the response.
    public var limit: Swift.Int?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream.
    public var streamName: Swift.String?

    public init(
        exclusiveStartTagKey: Swift.String? = nil,
        limit: Swift.Int? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.exclusiveStartTagKey = exclusiveStartTagKey
        self.limit = limit
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

extension KinesisClientTypes {
    /// Metadata assigned to the stream, consisting of a key-value pair.
    public struct Tag {
        /// A unique identifier for the tag. Maximum length: 128 characters. Valid characters: Unicode letters, digits, white space, _ . / = + - % @
        /// This member is required.
        public var key: Swift.String?
        /// An optional string, typically used to describe or define the tag. Maximum length: 256 characters. Valid characters: Unicode letters, digits, white space, _ . / = + - % @
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

/// Represents the output for ListTagsForStream.
public struct ListTagsForStreamOutput {
    /// If set to true, more tags are available. To request additional tags, set ExclusiveStartTagKey to the key of the last tag returned.
    /// This member is required.
    public var hasMoreTags: Swift.Bool?
    /// A list of tags associated with StreamName, starting with the first tag after ExclusiveStartTagKey and up to the specified Limit.
    /// This member is required.
    public var tags: [KinesisClientTypes.Tag]?

    public init(
        hasMoreTags: Swift.Bool? = nil,
        tags: [KinesisClientTypes.Tag]? = nil
    )
    {
        self.hasMoreTags = hasMoreTags
        self.tags = tags
    }
}

/// Specifies that you tried to invoke this API for a data stream with the on-demand capacity mode. This API is only supported for data streams with the provisioned capacity mode.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input for MergeShards.
public struct MergeShardsInput {
    /// The shard ID of the adjacent shard for the merge.
    /// This member is required.
    public var adjacentShardToMerge: Swift.String?
    /// The shard ID of the shard to combine with the adjacent shard for the merge.
    /// This member is required.
    public var shardToMerge: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream for the merge.
    public var streamName: Swift.String?

    public init(
        adjacentShardToMerge: Swift.String? = nil,
        shardToMerge: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.adjacentShardToMerge = adjacentShardToMerge
        self.shardToMerge = shardToMerge
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

/// Represents the input for PutRecord.
public struct PutRecordInput {
    /// The data blob to put into the record, which is base64-encoded when the blob is serialized. When the data blob (the payload before base64-encoding) is added to the partition key size, the total size must not exceed the maximum record size (1 MiB).
    /// This member is required.
    public var data: Foundation.Data?
    /// The hash value used to explicitly determine the shard the data record is assigned to by overriding the partition key hash.
    public var explicitHashKey: Swift.String?
    /// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
    /// This member is required.
    public var partitionKey: Swift.String?
    /// Guarantees strictly increasing sequence numbers, for puts from the same client and to the same partition key. Usage: set the SequenceNumberForOrdering of record n to the sequence number of record n-1 (as returned in the result when putting record n-1). If this parameter is not set, records are coarsely ordered based on arrival time.
    public var sequenceNumberForOrdering: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream to put the data record into.
    public var streamName: Swift.String?

    public init(
        data: Foundation.Data? = nil,
        explicitHashKey: Swift.String? = nil,
        partitionKey: Swift.String? = nil,
        sequenceNumberForOrdering: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.data = data
        self.explicitHashKey = explicitHashKey
        self.partitionKey = partitionKey
        self.sequenceNumberForOrdering = sequenceNumberForOrdering
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

/// Represents the output for PutRecord.
public struct PutRecordOutput {
    /// The encryption type to use on the record. This parameter can be one of the following values:
    ///
    /// * NONE: Do not encrypt the records in the stream.
    ///
    /// * KMS: Use server-side encryption on the records in the stream using a customer-managed Amazon Web Services KMS key.
    public var encryptionType: KinesisClientTypes.EncryptionType?
    /// The sequence number identifier that was assigned to the put data record. The sequence number for the record is unique across all records in the stream. A sequence number is the identifier associated with every record put into the stream.
    /// This member is required.
    public var sequenceNumber: Swift.String?
    /// The shard ID of the shard where the data record was placed.
    /// This member is required.
    public var shardId: Swift.String?

    public init(
        encryptionType: KinesisClientTypes.EncryptionType? = nil,
        sequenceNumber: Swift.String? = nil,
        shardId: Swift.String? = nil
    )
    {
        self.encryptionType = encryptionType
        self.sequenceNumber = sequenceNumber
        self.shardId = shardId
    }
}

extension KinesisClientTypes {
    /// Represents the output for PutRecords.
    public struct PutRecordsRequestEntry {
        /// The data blob to put into the record, which is base64-encoded when the blob is serialized. When the data blob (the payload before base64-encoding) is added to the partition key size, the total size must not exceed the maximum record size (1 MiB).
        /// This member is required.
        public var data: Foundation.Data?
        /// The hash value used to determine explicitly the shard that the data record is assigned to by overriding the partition key hash.
        public var explicitHashKey: Swift.String?
        /// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
        /// This member is required.
        public var partitionKey: Swift.String?

        public init(
            data: Foundation.Data? = nil,
            explicitHashKey: Swift.String? = nil,
            partitionKey: Swift.String? = nil
        )
        {
            self.data = data
            self.explicitHashKey = explicitHashKey
            self.partitionKey = partitionKey
        }
    }

}

/// A PutRecords request.
public struct PutRecordsInput {
    /// The records associated with the request.
    /// This member is required.
    public var records: [KinesisClientTypes.PutRecordsRequestEntry]?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The stream name associated with the request.
    public var streamName: Swift.String?

    public init(
        records: [KinesisClientTypes.PutRecordsRequestEntry]? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.records = records
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

extension KinesisClientTypes {
    /// Represents the result of an individual record from a PutRecords request. A record that is successfully added to a stream includes SequenceNumber and ShardId in the result. A record that fails to be added to the stream includes ErrorCode and ErrorMessage in the result.
    public struct PutRecordsResultEntry {
        /// The error code for an individual record result. ErrorCodes can be either ProvisionedThroughputExceededException or InternalFailure.
        public var errorCode: Swift.String?
        /// The error message for an individual record result. An ErrorCode value of ProvisionedThroughputExceededException has an error message that includes the account ID, stream name, and shard ID. An ErrorCode value of InternalFailure has the error message "Internal Service Failure".
        public var errorMessage: Swift.String?
        /// The sequence number for an individual record result.
        public var sequenceNumber: Swift.String?
        /// The shard ID for an individual record result.
        public var shardId: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            sequenceNumber: Swift.String? = nil,
            shardId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.sequenceNumber = sequenceNumber
            self.shardId = shardId
        }
    }

}

/// PutRecords results.
public struct PutRecordsOutput {
    /// The encryption type used on the records. This parameter can be one of the following values:
    ///
    /// * NONE: Do not encrypt the records.
    ///
    /// * KMS: Use server-side encryption on the records using a customer-managed Amazon Web Services KMS key.
    public var encryptionType: KinesisClientTypes.EncryptionType?
    /// The number of unsuccessfully processed records in a PutRecords request.
    public var failedRecordCount: Swift.Int?
    /// An array of successfully and unsuccessfully processed record results. A record that is successfully added to a stream includes SequenceNumber and ShardId in the result. A record that fails to be added to a stream includes ErrorCode and ErrorMessage in the result.
    /// This member is required.
    public var records: [KinesisClientTypes.PutRecordsResultEntry]?

    public init(
        encryptionType: KinesisClientTypes.EncryptionType? = nil,
        failedRecordCount: Swift.Int? = nil,
        records: [KinesisClientTypes.PutRecordsResultEntry]? = nil
    )
    {
        self.encryptionType = encryptionType
        self.failedRecordCount = failedRecordCount
        self.records = records
    }
}

public struct PutResourcePolicyInput {
    /// Details of the resource policy. It must include the identity of the principal and the actions allowed on this resource. This is formatted as a JSON string.
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the data stream or consumer.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        policy: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceARN = resourceARN
    }
}

public struct RegisterStreamConsumerInput {
    /// For a given Kinesis data stream, each consumer must have a unique name. However, consumer names don't have to be unique across data streams.
    /// This member is required.
    public var consumerName: Swift.String?
    /// The ARN of the Kinesis data stream that you want to register the consumer with. For more info, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams).
    /// This member is required.
    public var streamARN: Swift.String?

    public init(
        consumerName: Swift.String? = nil,
        streamARN: Swift.String? = nil
    )
    {
        self.consumerName = consumerName
        self.streamARN = streamARN
    }
}

public struct RegisterStreamConsumerOutput {
    /// An object that represents the details of the consumer you registered. When you register a consumer, it gets an ARN that is generated by Kinesis Data Streams.
    /// This member is required.
    public var consumer: KinesisClientTypes.Consumer?

    public init(
        consumer: KinesisClientTypes.Consumer? = nil
    )
    {
        self.consumer = consumer
    }
}

/// Represents the input for RemoveTagsFromStream.
public struct RemoveTagsFromStreamInput {
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream.
    public var streamName: Swift.String?
    /// A list of tag keys. Each corresponding tag is removed from the stream.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.streamARN = streamARN
        self.streamName = streamName
        self.tagKeys = tagKeys
    }
}

/// Represents the input for SplitShard.
public struct SplitShardInput {
    /// A hash key value for the starting hash key of one of the child shards created by the split. The hash key range for a given shard constitutes a set of ordered contiguous positive integers. The value for NewStartingHashKey must be in the range of hash keys being mapped into the shard. The NewStartingHashKey hash key value and all higher hash key values in hash key range are distributed to one of the child shards. All the lower hash key values in the range are distributed to the other child shard.
    /// This member is required.
    public var newStartingHashKey: Swift.String?
    /// The shard ID of the shard to split.
    /// This member is required.
    public var shardToSplit: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream for the shard split.
    public var streamName: Swift.String?

    public init(
        newStartingHashKey: Swift.String? = nil,
        shardToSplit: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.newStartingHashKey = newStartingHashKey
        self.shardToSplit = shardToSplit
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

public struct StartStreamEncryptionInput {
    /// The encryption type to use. The only valid value is KMS.
    /// This member is required.
    public var encryptionType: KinesisClientTypes.EncryptionType?
    /// The GUID for the customer-managed Amazon Web Services KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
    ///
    /// * Key ARN example: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012
    ///
    /// * Alias ARN example: arn:aws:kms:us-east-1:123456789012:alias/MyAliasName
    ///
    /// * Globally unique key ID example: 12345678-1234-1234-1234-123456789012
    ///
    /// * Alias name example: alias/MyAliasName
    ///
    /// * Master key owned by Kinesis Data Streams: alias/aws/kinesis
    /// This member is required.
    public var keyId: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream for which to start encrypting records.
    public var streamName: Swift.String?

    public init(
        encryptionType: KinesisClientTypes.EncryptionType? = nil,
        keyId: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.encryptionType = encryptionType
        self.keyId = keyId
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

public struct StopStreamEncryptionInput {
    /// The encryption type. The only valid value is KMS.
    /// This member is required.
    public var encryptionType: KinesisClientTypes.EncryptionType?
    /// The GUID for the customer-managed Amazon Web Services KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
    ///
    /// * Key ARN example: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012
    ///
    /// * Alias ARN example: arn:aws:kms:us-east-1:123456789012:alias/MyAliasName
    ///
    /// * Globally unique key ID example: 12345678-1234-1234-1234-123456789012
    ///
    /// * Alias name example: alias/MyAliasName
    ///
    /// * Master key owned by Kinesis Data Streams: alias/aws/kinesis
    /// This member is required.
    public var keyId: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream on which to stop encrypting records.
    public var streamName: Swift.String?

    public init(
        encryptionType: KinesisClientTypes.EncryptionType? = nil,
        keyId: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.encryptionType = encryptionType
        self.keyId = keyId
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

extension KinesisClientTypes {
    /// The starting position in the data stream from which to start streaming.
    public struct StartingPosition {
        /// The sequence number of the data record in the shard from which to start streaming. To specify a sequence number, set StartingPosition to AT_SEQUENCE_NUMBER or AFTER_SEQUENCE_NUMBER.
        public var sequenceNumber: Swift.String?
        /// The time stamp of the data record from which to start reading. To specify a time stamp, set StartingPosition to Type AT_TIMESTAMP. A time stamp is the Unix epoch date with precision in milliseconds. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480. If a record with this exact time stamp does not exist, records will be streamed from the next (later) record. If the time stamp is older than the current trim horizon, records will be streamed from the oldest untrimmed data record (TRIM_HORIZON).
        public var timestamp: Foundation.Date?
        /// You can set the starting position to one of the following values: AT_SEQUENCE_NUMBER: Start streaming from the position denoted by the sequence number specified in the SequenceNumber field. AFTER_SEQUENCE_NUMBER: Start streaming right after the position denoted by the sequence number specified in the SequenceNumber field. AT_TIMESTAMP: Start streaming from the position denoted by the time stamp specified in the Timestamp field. TRIM_HORIZON: Start streaming at the last untrimmed record in the shard, which is the oldest data record in the shard. LATEST: Start streaming just after the most recent record in the shard, so that you always read the most recent data in the shard.
        /// This member is required.
        public var type: KinesisClientTypes.ShardIteratorType?

        public init(
            sequenceNumber: Swift.String? = nil,
            timestamp: Foundation.Date? = nil,
            type: KinesisClientTypes.ShardIteratorType? = nil
        )
        {
            self.sequenceNumber = sequenceNumber
            self.timestamp = timestamp
            self.type = type
        }
    }

}

public struct SubscribeToShardInput {
    /// For this parameter, use the value you obtained when you called [RegisterStreamConsumer].
    /// This member is required.
    public var consumerARN: Swift.String?
    /// The ID of the shard you want to subscribe to. To see a list of all the shards for a given stream, use [ListShards].
    /// This member is required.
    public var shardId: Swift.String?
    /// The starting position in the data stream from which to start streaming.
    /// This member is required.
    public var startingPosition: KinesisClientTypes.StartingPosition?

    public init(
        consumerARN: Swift.String? = nil,
        shardId: Swift.String? = nil,
        startingPosition: KinesisClientTypes.StartingPosition? = nil
    )
    {
        self.consumerARN = consumerARN
        self.shardId = shardId
        self.startingPosition = startingPosition
    }
}

extension KinesisClientTypes {
    /// After you call [SubscribeToShard], Kinesis Data Streams sends events of this type over an HTTP/2 connection to your consumer.
    public struct SubscribeToShardEvent {
        /// The list of the child shards of the current shard, returned only at the end of the current shard.
        public var childShards: [KinesisClientTypes.ChildShard]?
        /// Use this as SequenceNumber in the next call to [SubscribeToShard], with StartingPosition set to AT_SEQUENCE_NUMBER or AFTER_SEQUENCE_NUMBER. Use ContinuationSequenceNumber for checkpointing because it captures your shard progress even when no data is written to the shard.
        /// This member is required.
        public var continuationSequenceNumber: Swift.String?
        /// The number of milliseconds the read records are from the tip of the stream, indicating how far behind current time the consumer is. A value of zero indicates that record processing is caught up, and there are no new records to process at this moment.
        /// This member is required.
        public var millisBehindLatest: Swift.Int?
        ///
        /// This member is required.
        public var records: [KinesisClientTypes.Record]?

        public init(
            childShards: [KinesisClientTypes.ChildShard]? = nil,
            continuationSequenceNumber: Swift.String? = nil,
            millisBehindLatest: Swift.Int? = nil,
            records: [KinesisClientTypes.Record]? = nil
        )
        {
            self.childShards = childShards
            self.continuationSequenceNumber = continuationSequenceNumber
            self.millisBehindLatest = millisBehindLatest
            self.records = records
        }
    }

}

extension KinesisClientTypes {
    /// This is a tagged union for all of the types of events an enhanced fan-out consumer can receive over HTTP/2 after a call to [SubscribeToShard].
    public enum SubscribeToShardEventStream {
        /// After you call [SubscribeToShard], Kinesis Data Streams sends events of this type to your consumer. For an example of how to handle these events, see [Enhanced Fan-Out Using the Kinesis Data Streams API].
        case subscribetoshardevent(KinesisClientTypes.SubscribeToShardEvent)
        case sdkUnknown(Swift.String)
    }

}

public struct SubscribeToShardOutput {
    /// The event stream that your consumer can use to read records from the shard.
    /// This member is required.
    public var eventStream: AsyncThrowingStream<KinesisClientTypes.SubscribeToShardEventStream, Swift.Error>?

    public init(
        eventStream: AsyncThrowingStream<KinesisClientTypes.SubscribeToShardEventStream, Swift.Error>? = nil
    )
    {
        self.eventStream = eventStream
    }
}

extension KinesisClientTypes {

    public enum ScalingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case uniformScaling
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingType] {
            return [
                .uniformScaling
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .uniformScaling: return "UNIFORM_SCALING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct UpdateShardCountInput {
    /// The scaling type. Uniform scaling creates shards of equal size.
    /// This member is required.
    public var scalingType: KinesisClientTypes.ScalingType?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream.
    public var streamName: Swift.String?
    /// The new number of shards. This value has the following default limits. By default, you cannot do the following:
    ///
    /// * Set this value to more than double your current shard count for a stream.
    ///
    /// * Set this value below half your current shard count for a stream.
    ///
    /// * Set this value to more than 10000 shards in a stream (the default limit for shard count per stream is 10000 per account per region), unless you request a limit increase.
    ///
    /// * Scale a stream with more than 10000 shards down unless you set this value to less than 10000 shards.
    /// This member is required.
    public var targetShardCount: Swift.Int?

    public init(
        scalingType: KinesisClientTypes.ScalingType? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil,
        targetShardCount: Swift.Int? = nil
    )
    {
        self.scalingType = scalingType
        self.streamARN = streamARN
        self.streamName = streamName
        self.targetShardCount = targetShardCount
    }
}

public struct UpdateShardCountOutput {
    /// The current number of shards.
    public var currentShardCount: Swift.Int?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream.
    public var streamName: Swift.String?
    /// The updated number of shards.
    public var targetShardCount: Swift.Int?

    public init(
        currentShardCount: Swift.Int? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil,
        targetShardCount: Swift.Int? = nil
    )
    {
        self.currentShardCount = currentShardCount
        self.streamARN = streamARN
        self.streamName = streamName
        self.targetShardCount = targetShardCount
    }
}

public struct UpdateStreamModeInput {
    /// Specifies the ARN of the data stream whose capacity mode you want to update.
    /// This member is required.
    public var streamARN: Swift.String?
    /// Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand capacity mode and a provisioned capacity mode for your data streams.
    /// This member is required.
    public var streamModeDetails: KinesisClientTypes.StreamModeDetails?

    public init(
        streamARN: Swift.String? = nil,
        streamModeDetails: KinesisClientTypes.StreamModeDetails? = nil
    )
    {
        self.streamARN = streamARN
        self.streamModeDetails = streamModeDetails
    }
}

extension AddTagsToStreamInput {

    static func urlPathProvider(_ value: AddTagsToStreamInput) -> Swift.String? {
        return "/"
    }
}

extension CreateStreamInput {

    static func urlPathProvider(_ value: CreateStreamInput) -> Swift.String? {
        return "/"
    }
}

extension DecreaseStreamRetentionPeriodInput {

    static func urlPathProvider(_ value: DecreaseStreamRetentionPeriodInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteResourcePolicyInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteStreamInput {

    static func urlPathProvider(_ value: DeleteStreamInput) -> Swift.String? {
        return "/"
    }
}

extension DeregisterStreamConsumerInput {

    static func urlPathProvider(_ value: DeregisterStreamConsumerInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLimitsInput {

    static func urlPathProvider(_ value: DescribeLimitsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeStreamInput {

    static func urlPathProvider(_ value: DescribeStreamInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeStreamConsumerInput {

    static func urlPathProvider(_ value: DescribeStreamConsumerInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeStreamSummaryInput {

    static func urlPathProvider(_ value: DescribeStreamSummaryInput) -> Swift.String? {
        return "/"
    }
}

extension DisableEnhancedMonitoringInput {

    static func urlPathProvider(_ value: DisableEnhancedMonitoringInput) -> Swift.String? {
        return "/"
    }
}

extension EnableEnhancedMonitoringInput {

    static func urlPathProvider(_ value: EnableEnhancedMonitoringInput) -> Swift.String? {
        return "/"
    }
}

extension GetRecordsInput {

    static func urlPathProvider(_ value: GetRecordsInput) -> Swift.String? {
        return "/"
    }
}

extension GetResourcePolicyInput {

    static func urlPathProvider(_ value: GetResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension GetShardIteratorInput {

    static func urlPathProvider(_ value: GetShardIteratorInput) -> Swift.String? {
        return "/"
    }
}

extension IncreaseStreamRetentionPeriodInput {

    static func urlPathProvider(_ value: IncreaseStreamRetentionPeriodInput) -> Swift.String? {
        return "/"
    }
}

extension ListShardsInput {

    static func urlPathProvider(_ value: ListShardsInput) -> Swift.String? {
        return "/"
    }
}

extension ListStreamConsumersInput {

    static func urlPathProvider(_ value: ListStreamConsumersInput) -> Swift.String? {
        return "/"
    }
}

extension ListStreamsInput {

    static func urlPathProvider(_ value: ListStreamsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForStreamInput {

    static func urlPathProvider(_ value: ListTagsForStreamInput) -> Swift.String? {
        return "/"
    }
}

extension MergeShardsInput {

    static func urlPathProvider(_ value: MergeShardsInput) -> Swift.String? {
        return "/"
    }
}

extension PutRecordInput {

    static func urlPathProvider(_ value: PutRecordInput) -> Swift.String? {
        return "/"
    }
}

extension PutRecordsInput {

    static func urlPathProvider(_ value: PutRecordsInput) -> Swift.String? {
        return "/"
    }
}

extension PutResourcePolicyInput {

    static func urlPathProvider(_ value: PutResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension RegisterStreamConsumerInput {

    static func urlPathProvider(_ value: RegisterStreamConsumerInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveTagsFromStreamInput {

    static func urlPathProvider(_ value: RemoveTagsFromStreamInput) -> Swift.String? {
        return "/"
    }
}

extension SplitShardInput {

    static func urlPathProvider(_ value: SplitShardInput) -> Swift.String? {
        return "/"
    }
}

extension StartStreamEncryptionInput {

    static func urlPathProvider(_ value: StartStreamEncryptionInput) -> Swift.String? {
        return "/"
    }
}

extension StopStreamEncryptionInput {

    static func urlPathProvider(_ value: StopStreamEncryptionInput) -> Swift.String? {
        return "/"
    }
}

extension SubscribeToShardInput {

    static func urlPathProvider(_ value: SubscribeToShardInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateShardCountInput {

    static func urlPathProvider(_ value: UpdateShardCountInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateStreamModeInput {

    static func urlPathProvider(_ value: UpdateStreamModeInput) -> Swift.String? {
        return "/"
    }
}

extension AddTagsToStreamInput {

    static func write(value: AddTagsToStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateStreamInput {

    static func write(value: CreateStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ShardCount"].write(value.shardCount)
        try writer["StreamModeDetails"].write(value.streamModeDetails, with: KinesisClientTypes.StreamModeDetails.write(value:to:))
        try writer["StreamName"].write(value.streamName)
    }
}

extension DecreaseStreamRetentionPeriodInput {

    static func write(value: DecreaseStreamRetentionPeriodInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RetentionPeriodHours"].write(value.retentionPeriodHours)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension DeleteResourcePolicyInput {

    static func write(value: DeleteResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
    }
}

extension DeleteStreamInput {

    static func write(value: DeleteStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnforceConsumerDeletion"].write(value.enforceConsumerDeletion)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension DeregisterStreamConsumerInput {

    static func write(value: DeregisterStreamConsumerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConsumerARN"].write(value.consumerARN)
        try writer["ConsumerName"].write(value.consumerName)
        try writer["StreamARN"].write(value.streamARN)
    }
}

extension DescribeLimitsInput {

    static func write(value: DescribeLimitsInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DescribeStreamInput {

    static func write(value: DescribeStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExclusiveStartShardId"].write(value.exclusiveStartShardId)
        try writer["Limit"].write(value.limit)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension DescribeStreamConsumerInput {

    static func write(value: DescribeStreamConsumerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConsumerARN"].write(value.consumerARN)
        try writer["ConsumerName"].write(value.consumerName)
        try writer["StreamARN"].write(value.streamARN)
    }
}

extension DescribeStreamSummaryInput {

    static func write(value: DescribeStreamSummaryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension DisableEnhancedMonitoringInput {

    static func write(value: DisableEnhancedMonitoringInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ShardLevelMetrics"].writeList(value.shardLevelMetrics, memberWritingClosure: SmithyReadWrite.WritingClosureBox<KinesisClientTypes.MetricsName>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension EnableEnhancedMonitoringInput {

    static func write(value: EnableEnhancedMonitoringInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ShardLevelMetrics"].writeList(value.shardLevelMetrics, memberWritingClosure: SmithyReadWrite.WritingClosureBox<KinesisClientTypes.MetricsName>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension GetRecordsInput {

    static func write(value: GetRecordsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["ShardIterator"].write(value.shardIterator)
        try writer["StreamARN"].write(value.streamARN)
    }
}

extension GetResourcePolicyInput {

    static func write(value: GetResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
    }
}

extension GetShardIteratorInput {

    static func write(value: GetShardIteratorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ShardId"].write(value.shardId)
        try writer["ShardIteratorType"].write(value.shardIteratorType)
        try writer["StartingSequenceNumber"].write(value.startingSequenceNumber)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
        try writer["Timestamp"].writeTimestamp(value.timestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension IncreaseStreamRetentionPeriodInput {

    static func write(value: IncreaseStreamRetentionPeriodInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RetentionPeriodHours"].write(value.retentionPeriodHours)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension ListShardsInput {

    static func write(value: ListShardsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExclusiveStartShardId"].write(value.exclusiveStartShardId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ShardFilter"].write(value.shardFilter, with: KinesisClientTypes.ShardFilter.write(value:to:))
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamCreationTimestamp"].writeTimestamp(value.streamCreationTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["StreamName"].write(value.streamName)
    }
}

extension ListStreamConsumersInput {

    static func write(value: ListStreamConsumersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamCreationTimestamp"].writeTimestamp(value.streamCreationTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ListStreamsInput {

    static func write(value: ListStreamsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExclusiveStartStreamName"].write(value.exclusiveStartStreamName)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForStreamInput {

    static func write(value: ListTagsForStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExclusiveStartTagKey"].write(value.exclusiveStartTagKey)
        try writer["Limit"].write(value.limit)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension MergeShardsInput {

    static func write(value: MergeShardsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdjacentShardToMerge"].write(value.adjacentShardToMerge)
        try writer["ShardToMerge"].write(value.shardToMerge)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension PutRecordInput {

    static func write(value: PutRecordInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Data"].write(value.data)
        try writer["ExplicitHashKey"].write(value.explicitHashKey)
        try writer["PartitionKey"].write(value.partitionKey)
        try writer["SequenceNumberForOrdering"].write(value.sequenceNumberForOrdering)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension PutRecordsInput {

    static func write(value: PutRecordsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Records"].writeList(value.records, memberWritingClosure: KinesisClientTypes.PutRecordsRequestEntry.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension PutResourcePolicyInput {

    static func write(value: PutResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
        try writer["ResourceARN"].write(value.resourceARN)
    }
}

extension RegisterStreamConsumerInput {

    static func write(value: RegisterStreamConsumerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConsumerName"].write(value.consumerName)
        try writer["StreamARN"].write(value.streamARN)
    }
}

extension RemoveTagsFromStreamInput {

    static func write(value: RemoveTagsFromStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SplitShardInput {

    static func write(value: SplitShardInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NewStartingHashKey"].write(value.newStartingHashKey)
        try writer["ShardToSplit"].write(value.shardToSplit)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension StartStreamEncryptionInput {

    static func write(value: StartStreamEncryptionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EncryptionType"].write(value.encryptionType)
        try writer["KeyId"].write(value.keyId)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension StopStreamEncryptionInput {

    static func write(value: StopStreamEncryptionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EncryptionType"].write(value.encryptionType)
        try writer["KeyId"].write(value.keyId)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension SubscribeToShardInput {

    static func write(value: SubscribeToShardInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConsumerARN"].write(value.consumerARN)
        try writer["ShardId"].write(value.shardId)
        try writer["StartingPosition"].write(value.startingPosition, with: KinesisClientTypes.StartingPosition.write(value:to:))
    }
}

extension UpdateShardCountInput {

    static func write(value: UpdateShardCountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ScalingType"].write(value.scalingType)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
        try writer["TargetShardCount"].write(value.targetShardCount)
    }
}

extension UpdateStreamModeInput {

    static func write(value: UpdateStreamModeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamModeDetails"].write(value.streamModeDetails, with: KinesisClientTypes.StreamModeDetails.write(value:to:))
    }
}

extension AddTagsToStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddTagsToStreamOutput {
        return AddTagsToStreamOutput()
    }
}

extension CreateStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateStreamOutput {
        return CreateStreamOutput()
    }
}

extension DecreaseStreamRetentionPeriodOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DecreaseStreamRetentionPeriodOutput {
        return DecreaseStreamRetentionPeriodOutput()
    }
}

extension DeleteResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcePolicyOutput {
        return DeleteResourcePolicyOutput()
    }
}

extension DeleteStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteStreamOutput {
        return DeleteStreamOutput()
    }
}

extension DeregisterStreamConsumerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterStreamConsumerOutput {
        return DeregisterStreamConsumerOutput()
    }
}

extension DescribeLimitsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLimitsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeLimitsOutput()
        value.onDemandStreamCount = try reader["OnDemandStreamCount"].readIfPresent() ?? 0
        value.onDemandStreamCountLimit = try reader["OnDemandStreamCountLimit"].readIfPresent() ?? 0
        value.openShardCount = try reader["OpenShardCount"].readIfPresent() ?? 0
        value.shardLimit = try reader["ShardLimit"].readIfPresent() ?? 0
        return value
    }
}

extension DescribeStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeStreamOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeStreamOutput()
        value.streamDescription = try reader["StreamDescription"].readIfPresent(with: KinesisClientTypes.StreamDescription.read(from:))
        return value
    }
}

extension DescribeStreamConsumerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeStreamConsumerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeStreamConsumerOutput()
        value.consumerDescription = try reader["ConsumerDescription"].readIfPresent(with: KinesisClientTypes.ConsumerDescription.read(from:))
        return value
    }
}

extension DescribeStreamSummaryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeStreamSummaryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeStreamSummaryOutput()
        value.streamDescriptionSummary = try reader["StreamDescriptionSummary"].readIfPresent(with: KinesisClientTypes.StreamDescriptionSummary.read(from:))
        return value
    }
}

extension DisableEnhancedMonitoringOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableEnhancedMonitoringOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisableEnhancedMonitoringOutput()
        value.currentShardLevelMetrics = try reader["CurrentShardLevelMetrics"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KinesisClientTypes.MetricsName>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.desiredShardLevelMetrics = try reader["DesiredShardLevelMetrics"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KinesisClientTypes.MetricsName>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.streamARN = try reader["StreamARN"].readIfPresent()
        value.streamName = try reader["StreamName"].readIfPresent()
        return value
    }
}

extension EnableEnhancedMonitoringOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableEnhancedMonitoringOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = EnableEnhancedMonitoringOutput()
        value.currentShardLevelMetrics = try reader["CurrentShardLevelMetrics"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KinesisClientTypes.MetricsName>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.desiredShardLevelMetrics = try reader["DesiredShardLevelMetrics"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KinesisClientTypes.MetricsName>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.streamARN = try reader["StreamARN"].readIfPresent()
        value.streamName = try reader["StreamName"].readIfPresent()
        return value
    }
}

extension GetRecordsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRecordsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRecordsOutput()
        value.childShards = try reader["ChildShards"].readListIfPresent(memberReadingClosure: KinesisClientTypes.ChildShard.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.millisBehindLatest = try reader["MillisBehindLatest"].readIfPresent()
        value.nextShardIterator = try reader["NextShardIterator"].readIfPresent()
        value.records = try reader["Records"].readListIfPresent(memberReadingClosure: KinesisClientTypes.Record.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension GetResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourcePolicyOutput()
        value.policy = try reader["Policy"].readIfPresent() ?? ""
        return value
    }
}

extension GetShardIteratorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetShardIteratorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetShardIteratorOutput()
        value.shardIterator = try reader["ShardIterator"].readIfPresent()
        return value
    }
}

extension IncreaseStreamRetentionPeriodOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> IncreaseStreamRetentionPeriodOutput {
        return IncreaseStreamRetentionPeriodOutput()
    }
}

extension ListShardsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListShardsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListShardsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.shards = try reader["Shards"].readListIfPresent(memberReadingClosure: KinesisClientTypes.Shard.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListStreamConsumersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListStreamConsumersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListStreamConsumersOutput()
        value.consumers = try reader["Consumers"].readListIfPresent(memberReadingClosure: KinesisClientTypes.Consumer.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListStreamsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListStreamsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListStreamsOutput()
        value.hasMoreStreams = try reader["HasMoreStreams"].readIfPresent() ?? false
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.streamNames = try reader["StreamNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.streamSummaries = try reader["StreamSummaries"].readListIfPresent(memberReadingClosure: KinesisClientTypes.StreamSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForStreamOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForStreamOutput()
        value.hasMoreTags = try reader["HasMoreTags"].readIfPresent() ?? false
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: KinesisClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension MergeShardsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> MergeShardsOutput {
        return MergeShardsOutput()
    }
}

extension PutRecordOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutRecordOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutRecordOutput()
        value.encryptionType = try reader["EncryptionType"].readIfPresent()
        value.sequenceNumber = try reader["SequenceNumber"].readIfPresent() ?? ""
        value.shardId = try reader["ShardId"].readIfPresent() ?? ""
        return value
    }
}

extension PutRecordsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutRecordsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutRecordsOutput()
        value.encryptionType = try reader["EncryptionType"].readIfPresent()
        value.failedRecordCount = try reader["FailedRecordCount"].readIfPresent()
        value.records = try reader["Records"].readListIfPresent(memberReadingClosure: KinesisClientTypes.PutRecordsResultEntry.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension PutResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutResourcePolicyOutput {
        return PutResourcePolicyOutput()
    }
}

extension RegisterStreamConsumerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterStreamConsumerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RegisterStreamConsumerOutput()
        value.consumer = try reader["Consumer"].readIfPresent(with: KinesisClientTypes.Consumer.read(from:))
        return value
    }
}

extension RemoveTagsFromStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveTagsFromStreamOutput {
        return RemoveTagsFromStreamOutput()
    }
}

extension SplitShardOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SplitShardOutput {
        return SplitShardOutput()
    }
}

extension StartStreamEncryptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartStreamEncryptionOutput {
        return StartStreamEncryptionOutput()
    }
}

extension StopStreamEncryptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopStreamEncryptionOutput {
        return StopStreamEncryptionOutput()
    }
}

extension SubscribeToShardOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SubscribeToShardOutput {
        var value = SubscribeToShardOutput()
        if case let .stream(stream) = httpResponse.body {
            let messageDecoder = SmithyEventStreams.DefaultMessageDecoder()
            let decoderStream = SmithyEventStreams.DefaultMessageDecoderStream<KinesisClientTypes.SubscribeToShardEventStream>(stream: stream, messageDecoder: messageDecoder, unmarshalClosure: KinesisClientTypes.SubscribeToShardEventStream.unmarshal)
            value.eventStream = decoderStream.toAsyncStream()
        }
        return value
    }
}

extension UpdateShardCountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateShardCountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateShardCountOutput()
        value.currentShardCount = try reader["CurrentShardCount"].readIfPresent()
        value.streamARN = try reader["StreamARN"].readIfPresent()
        value.streamName = try reader["StreamName"].readIfPresent()
        value.targetShardCount = try reader["TargetShardCount"].readIfPresent()
        return value
    }
}

extension UpdateStreamModeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateStreamModeOutput {
        return UpdateStreamModeOutput()
    }
}

enum AddTagsToStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DecreaseStreamRetentionPeriodOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterStreamConsumerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLimitsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeStreamConsumerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeStreamSummaryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableEnhancedMonitoringOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableEnhancedMonitoringOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRecordsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ExpiredIteratorException": return try ExpiredIteratorException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "KMSAccessDeniedException": return try KMSAccessDeniedException.makeError(baseError: baseError)
            case "KMSDisabledException": return try KMSDisabledException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "KMSNotFoundException": return try KMSNotFoundException.makeError(baseError: baseError)
            case "KMSOptInRequired": return try KMSOptInRequired.makeError(baseError: baseError)
            case "KMSThrottlingException": return try KMSThrottlingException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetShardIteratorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum IncreaseStreamRetentionPeriodOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListShardsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ExpiredNextTokenException": return try ExpiredNextTokenException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListStreamConsumersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ExpiredNextTokenException": return try ExpiredNextTokenException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListStreamsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ExpiredNextTokenException": return try ExpiredNextTokenException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum MergeShardsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutRecordOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "KMSAccessDeniedException": return try KMSAccessDeniedException.makeError(baseError: baseError)
            case "KMSDisabledException": return try KMSDisabledException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "KMSNotFoundException": return try KMSNotFoundException.makeError(baseError: baseError)
            case "KMSOptInRequired": return try KMSOptInRequired.makeError(baseError: baseError)
            case "KMSThrottlingException": return try KMSThrottlingException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutRecordsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "KMSAccessDeniedException": return try KMSAccessDeniedException.makeError(baseError: baseError)
            case "KMSDisabledException": return try KMSDisabledException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "KMSNotFoundException": return try KMSNotFoundException.makeError(baseError: baseError)
            case "KMSOptInRequired": return try KMSOptInRequired.makeError(baseError: baseError)
            case "KMSThrottlingException": return try KMSThrottlingException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterStreamConsumerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveTagsFromStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SplitShardOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartStreamEncryptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "KMSAccessDeniedException": return try KMSAccessDeniedException.makeError(baseError: baseError)
            case "KMSDisabledException": return try KMSDisabledException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "KMSNotFoundException": return try KMSNotFoundException.makeError(baseError: baseError)
            case "KMSOptInRequired": return try KMSOptInRequired.makeError(baseError: baseError)
            case "KMSThrottlingException": return try KMSThrottlingException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopStreamEncryptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SubscribeToShardOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateShardCountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateStreamModeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidArgumentException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidArgumentException {
        let reader = baseError.errorBodyReader
        var value = InvalidArgumentException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceInUseException {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KMSAccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KMSAccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = KMSAccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KMSDisabledException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KMSDisabledException {
        let reader = baseError.errorBodyReader
        var value = KMSDisabledException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KMSNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KMSNotFoundException {
        let reader = baseError.errorBodyReader
        var value = KMSNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ExpiredIteratorException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ExpiredIteratorException {
        let reader = baseError.errorBodyReader
        var value = ExpiredIteratorException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KMSOptInRequired {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KMSOptInRequired {
        let reader = baseError.errorBodyReader
        var value = KMSOptInRequired()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KMSThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KMSThrottlingException {
        let reader = baseError.errorBodyReader
        var value = KMSThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ProvisionedThroughputExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ProvisionedThroughputExceededException {
        let reader = baseError.errorBodyReader
        var value = ProvisionedThroughputExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KMSInvalidStateException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KMSInvalidStateException {
        let reader = baseError.errorBodyReader
        var value = KMSInvalidStateException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ExpiredNextTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ExpiredNextTokenException {
        let reader = baseError.errorBodyReader
        var value = ExpiredNextTokenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KinesisClientTypes.SubscribeToShardEventStream {
    static var unmarshal: SmithyEventStreamsAPI.UnmarshalClosure<KinesisClientTypes.SubscribeToShardEventStream> {
        { message in
            switch try message.type() {
            case .event(let params):
                switch params.eventType {
                case "SubscribeToShardEvent":
                    let value = try SmithyJSON.Reader.readFrom(message.payload, with: KinesisClientTypes.SubscribeToShardEvent.read(from:))
                    return .subscribetoshardevent(value)
                default:
                    return .sdkUnknown("error processing event stream, unrecognized event: \(params.eventType)")
                }
            case .exception(let params):
                let makeError: (SmithyEventStreamsAPI.Message, SmithyEventStreamsAPI.MessageType.ExceptionParams) throws -> Swift.Error = { message, params in
                    switch params.exceptionType {
                    case "ResourceNotFoundException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: ResourceNotFoundException.read(from:))
                        return value
                    case "ResourceInUseException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: ResourceInUseException.read(from:))
                        return value
                    case "KMSDisabledException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: KMSDisabledException.read(from:))
                        return value
                    case "KMSInvalidStateException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: KMSInvalidStateException.read(from:))
                        return value
                    case "KMSAccessDeniedException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: KMSAccessDeniedException.read(from:))
                        return value
                    case "KMSNotFoundException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: KMSNotFoundException.read(from:))
                        return value
                    case "KMSOptInRequired":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: KMSOptInRequired.read(from:))
                        return value
                    case "KMSThrottlingException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: KMSThrottlingException.read(from:))
                        return value
                    case "InternalFailureException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: InternalFailureException.read(from:))
                        return value
                    default:
                        let httpResponse = SmithyHTTPAPI.HTTPResponse(body: .data(message.payload), statusCode: .ok)
                        return AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':exceptionType': \(params.exceptionType); contentType: \(params.contentType ?? "nil")", requestID: nil, typeName: nil)
                    }
                }
                let error = try makeError(message, params)
                throw error
            case .error(let params):
                let httpResponse = SmithyHTTPAPI.HTTPResponse(body: .data(message.payload), statusCode: .ok)
                throw AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':errorType': \(params.errorCode); message: \(params.message ?? "nil")", requestID: nil, typeName: nil)
            case .unknown(messageType: let messageType):
                throw Smithy.ClientError.unknownError("unrecognized event stream message ':message-type': \(messageType)")
            }
        }
    }
}

extension KinesisClientTypes.StreamDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.StreamDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.StreamDescription()
        value.streamName = try reader["StreamName"].readIfPresent() ?? ""
        value.streamARN = try reader["StreamARN"].readIfPresent() ?? ""
        value.streamStatus = try reader["StreamStatus"].readIfPresent() ?? .sdkUnknown("")
        value.streamModeDetails = try reader["StreamModeDetails"].readIfPresent(with: KinesisClientTypes.StreamModeDetails.read(from:))
        value.shards = try reader["Shards"].readListIfPresent(memberReadingClosure: KinesisClientTypes.Shard.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.hasMoreShards = try reader["HasMoreShards"].readIfPresent() ?? false
        value.retentionPeriodHours = try reader["RetentionPeriodHours"].readIfPresent() ?? 0
        value.streamCreationTimestamp = try reader["StreamCreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.enhancedMonitoring = try reader["EnhancedMonitoring"].readListIfPresent(memberReadingClosure: KinesisClientTypes.EnhancedMetrics.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.encryptionType = try reader["EncryptionType"].readIfPresent()
        value.keyId = try reader["KeyId"].readIfPresent()
        return value
    }
}

extension KinesisClientTypes.EnhancedMetrics {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.EnhancedMetrics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.EnhancedMetrics()
        value.shardLevelMetrics = try reader["ShardLevelMetrics"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KinesisClientTypes.MetricsName>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KinesisClientTypes.Shard {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.Shard {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.Shard()
        value.shardId = try reader["ShardId"].readIfPresent() ?? ""
        value.parentShardId = try reader["ParentShardId"].readIfPresent()
        value.adjacentParentShardId = try reader["AdjacentParentShardId"].readIfPresent()
        value.hashKeyRange = try reader["HashKeyRange"].readIfPresent(with: KinesisClientTypes.HashKeyRange.read(from:))
        value.sequenceNumberRange = try reader["SequenceNumberRange"].readIfPresent(with: KinesisClientTypes.SequenceNumberRange.read(from:))
        return value
    }
}

extension KinesisClientTypes.SequenceNumberRange {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.SequenceNumberRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.SequenceNumberRange()
        value.startingSequenceNumber = try reader["StartingSequenceNumber"].readIfPresent() ?? ""
        value.endingSequenceNumber = try reader["EndingSequenceNumber"].readIfPresent()
        return value
    }
}

extension KinesisClientTypes.HashKeyRange {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.HashKeyRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.HashKeyRange()
        value.startingHashKey = try reader["StartingHashKey"].readIfPresent() ?? ""
        value.endingHashKey = try reader["EndingHashKey"].readIfPresent() ?? ""
        return value
    }
}

extension KinesisClientTypes.StreamModeDetails {

    static func write(value: KinesisClientTypes.StreamModeDetails?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StreamMode"].write(value.streamMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.StreamModeDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.StreamModeDetails()
        value.streamMode = try reader["StreamMode"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension KinesisClientTypes.ConsumerDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.ConsumerDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.ConsumerDescription()
        value.consumerName = try reader["ConsumerName"].readIfPresent() ?? ""
        value.consumerARN = try reader["ConsumerARN"].readIfPresent() ?? ""
        value.consumerStatus = try reader["ConsumerStatus"].readIfPresent() ?? .sdkUnknown("")
        value.consumerCreationTimestamp = try reader["ConsumerCreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.streamARN = try reader["StreamARN"].readIfPresent() ?? ""
        return value
    }
}

extension KinesisClientTypes.StreamDescriptionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.StreamDescriptionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.StreamDescriptionSummary()
        value.streamName = try reader["StreamName"].readIfPresent() ?? ""
        value.streamARN = try reader["StreamARN"].readIfPresent() ?? ""
        value.streamStatus = try reader["StreamStatus"].readIfPresent() ?? .sdkUnknown("")
        value.streamModeDetails = try reader["StreamModeDetails"].readIfPresent(with: KinesisClientTypes.StreamModeDetails.read(from:))
        value.retentionPeriodHours = try reader["RetentionPeriodHours"].readIfPresent() ?? 0
        value.streamCreationTimestamp = try reader["StreamCreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.enhancedMonitoring = try reader["EnhancedMonitoring"].readListIfPresent(memberReadingClosure: KinesisClientTypes.EnhancedMetrics.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.encryptionType = try reader["EncryptionType"].readIfPresent()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.openShardCount = try reader["OpenShardCount"].readIfPresent() ?? 0
        value.consumerCount = try reader["ConsumerCount"].readIfPresent()
        return value
    }
}

extension KinesisClientTypes.Record {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.Record {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.Record()
        value.sequenceNumber = try reader["SequenceNumber"].readIfPresent() ?? ""
        value.approximateArrivalTimestamp = try reader["ApproximateArrivalTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.data = try reader["Data"].readIfPresent() ?? Foundation.Data("".utf8)
        value.partitionKey = try reader["PartitionKey"].readIfPresent() ?? ""
        value.encryptionType = try reader["EncryptionType"].readIfPresent()
        return value
    }
}

extension KinesisClientTypes.ChildShard {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.ChildShard {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.ChildShard()
        value.shardId = try reader["ShardId"].readIfPresent() ?? ""
        value.parentShards = try reader["ParentShards"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.hashKeyRange = try reader["HashKeyRange"].readIfPresent(with: KinesisClientTypes.HashKeyRange.read(from:))
        return value
    }
}

extension KinesisClientTypes.Consumer {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.Consumer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.Consumer()
        value.consumerName = try reader["ConsumerName"].readIfPresent() ?? ""
        value.consumerARN = try reader["ConsumerARN"].readIfPresent() ?? ""
        value.consumerStatus = try reader["ConsumerStatus"].readIfPresent() ?? .sdkUnknown("")
        value.consumerCreationTimestamp = try reader["ConsumerCreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension KinesisClientTypes.StreamSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.StreamSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.StreamSummary()
        value.streamName = try reader["StreamName"].readIfPresent() ?? ""
        value.streamARN = try reader["StreamARN"].readIfPresent() ?? ""
        value.streamStatus = try reader["StreamStatus"].readIfPresent() ?? .sdkUnknown("")
        value.streamModeDetails = try reader["StreamModeDetails"].readIfPresent(with: KinesisClientTypes.StreamModeDetails.read(from:))
        value.streamCreationTimestamp = try reader["StreamCreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension KinesisClientTypes.Tag {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension KinesisClientTypes.PutRecordsResultEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.PutRecordsResultEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.PutRecordsResultEntry()
        value.sequenceNumber = try reader["SequenceNumber"].readIfPresent()
        value.shardId = try reader["ShardId"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension InternalFailureException {

    static func read(from reader: SmithyJSON.Reader) throws -> InternalFailureException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = InternalFailureException()
        value.properties.message = try reader["message"].readIfPresent()
        return value
    }
}

extension KMSThrottlingException {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSThrottlingException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        return value
    }
}

extension KMSOptInRequired {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSOptInRequired {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSOptInRequired()
        value.properties.message = try reader["message"].readIfPresent()
        return value
    }
}

extension KMSNotFoundException {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSNotFoundException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        return value
    }
}

extension KMSAccessDeniedException {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSAccessDeniedException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSAccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        return value
    }
}

extension KMSInvalidStateException {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSInvalidStateException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSInvalidStateException()
        value.properties.message = try reader["message"].readIfPresent()
        return value
    }
}

extension KMSDisabledException {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSDisabledException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSDisabledException()
        value.properties.message = try reader["message"].readIfPresent()
        return value
    }
}

extension ResourceInUseException {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceInUseException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        return value
    }
}

extension ResourceNotFoundException {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceNotFoundException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        return value
    }
}

extension KinesisClientTypes.SubscribeToShardEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisClientTypes.SubscribeToShardEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisClientTypes.SubscribeToShardEvent()
        value.records = try reader["Records"].readListIfPresent(memberReadingClosure: KinesisClientTypes.Record.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.continuationSequenceNumber = try reader["ContinuationSequenceNumber"].readIfPresent() ?? ""
        value.millisBehindLatest = try reader["MillisBehindLatest"].readIfPresent() ?? 0
        value.childShards = try reader["ChildShards"].readListIfPresent(memberReadingClosure: KinesisClientTypes.ChildShard.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KinesisClientTypes.ShardFilter {

    static func write(value: KinesisClientTypes.ShardFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ShardId"].write(value.shardId)
        try writer["Timestamp"].writeTimestamp(value.timestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Type"].write(value.type)
    }
}

extension KinesisClientTypes.PutRecordsRequestEntry {

    static func write(value: KinesisClientTypes.PutRecordsRequestEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Data"].write(value.data)
        try writer["ExplicitHashKey"].write(value.explicitHashKey)
        try writer["PartitionKey"].write(value.partitionKey)
    }
}

extension KinesisClientTypes.StartingPosition {

    static func write(value: KinesisClientTypes.StartingPosition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SequenceNumber"].write(value.sequenceNumber)
        try writer["Timestamp"].writeTimestamp(value.timestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Type"].write(value.type)
    }
}

public enum KinesisClientTypes {}
