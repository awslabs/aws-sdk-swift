// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Specifies that you do not have the permissions required to perform this operation.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AddTagsToStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamARN = "StreamARN"
        case streamName = "StreamName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension AddTagsToStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for AddTagsToStream.
public struct AddTagsToStreamInput: Swift.Equatable {
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream.
    public var streamName: Swift.String?
    /// A set of up to 10 key-value pairs to use to create the tags.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init(
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.streamARN = streamARN
        self.streamName = streamName
        self.tags = tags
    }
}

struct AddTagsToStreamInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let streamARN: Swift.String?
}

extension AddTagsToStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamARN = "StreamARN"
        case streamName = "StreamName"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension AddTagsToStreamOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct AddTagsToStreamOutput: Swift.Equatable {

    public init() { }
}

enum AddTagsToStreamOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension KinesisClientTypes.ChildShard: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hashKeyRange = "HashKeyRange"
        case parentShards = "ParentShards"
        case shardId = "ShardId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hashKeyRange = self.hashKeyRange {
            try encodeContainer.encode(hashKeyRange, forKey: .hashKeyRange)
        }
        if let parentShards = parentShards {
            var parentShardsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parentShards)
            for shardid0 in parentShards {
                try parentShardsContainer.encode(shardid0)
            }
        }
        if let shardId = self.shardId {
            try encodeContainer.encode(shardId, forKey: .shardId)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardId)
        shardId = shardIdDecoded
        let parentShardsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .parentShards)
        var parentShardsDecoded0:[Swift.String]? = nil
        if let parentShardsContainer = parentShardsContainer {
            parentShardsDecoded0 = [Swift.String]()
            for string0 in parentShardsContainer {
                if let string0 = string0 {
                    parentShardsDecoded0?.append(string0)
                }
            }
        }
        parentShards = parentShardsDecoded0
        let hashKeyRangeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.HashKeyRange.self, forKey: .hashKeyRange)
        hashKeyRange = hashKeyRangeDecoded
    }
}

extension KinesisClientTypes {
    /// Output parameter of the GetRecords API. The existing child shard of the current shard.
    public struct ChildShard: Swift.Equatable {
        /// The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.
        /// This member is required.
        public var hashKeyRange: KinesisClientTypes.HashKeyRange?
        /// The current shard that is the parent of the existing child shard.
        /// This member is required.
        public var parentShards: [Swift.String]?
        /// The shard ID of the existing child shard of the current shard.
        /// This member is required.
        public var shardId: Swift.String?

        public init(
            hashKeyRange: KinesisClientTypes.HashKeyRange? = nil,
            parentShards: [Swift.String]? = nil,
            shardId: Swift.String? = nil
        )
        {
            self.hashKeyRange = hashKeyRange
            self.parentShards = parentShards
            self.shardId = shardId
        }
    }

}

extension KinesisClientTypes.Consumer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerARN = "ConsumerARN"
        case consumerCreationTimestamp = "ConsumerCreationTimestamp"
        case consumerName = "ConsumerName"
        case consumerStatus = "ConsumerStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consumerARN = self.consumerARN {
            try encodeContainer.encode(consumerARN, forKey: .consumerARN)
        }
        if let consumerCreationTimestamp = self.consumerCreationTimestamp {
            try encodeContainer.encodeTimestamp(consumerCreationTimestamp, format: .epochSeconds, forKey: .consumerCreationTimestamp)
        }
        if let consumerName = self.consumerName {
            try encodeContainer.encode(consumerName, forKey: .consumerName)
        }
        if let consumerStatus = self.consumerStatus {
            try encodeContainer.encode(consumerStatus.rawValue, forKey: .consumerStatus)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerName)
        consumerName = consumerNameDecoded
        let consumerARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerARN)
        consumerARN = consumerARNDecoded
        let consumerStatusDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.ConsumerStatus.self, forKey: .consumerStatus)
        consumerStatus = consumerStatusDecoded
        let consumerCreationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .consumerCreationTimestamp)
        consumerCreationTimestamp = consumerCreationTimestampDecoded
    }
}

extension KinesisClientTypes {
    /// An object that represents the details of the consumer you registered. This type of object is returned by [RegisterStreamConsumer].
    public struct Consumer: Swift.Equatable {
        /// When you register a consumer, Kinesis Data Streams generates an ARN for it. You need this ARN to be able to call [SubscribeToShard]. If you delete a consumer and then create a new one with the same name, it won't have the same ARN. That's because consumer ARNs contain the creation timestamp. This is important to keep in mind if you have IAM policies that reference consumer ARNs.
        /// This member is required.
        public var consumerARN: Swift.String?
        ///
        /// This member is required.
        public var consumerCreationTimestamp: ClientRuntime.Date?
        /// The name of the consumer is something you choose when you register the consumer.
        /// This member is required.
        public var consumerName: Swift.String?
        /// A consumer can't read data while in the CREATING or DELETING states.
        /// This member is required.
        public var consumerStatus: KinesisClientTypes.ConsumerStatus?

        public init(
            consumerARN: Swift.String? = nil,
            consumerCreationTimestamp: ClientRuntime.Date? = nil,
            consumerName: Swift.String? = nil,
            consumerStatus: KinesisClientTypes.ConsumerStatus? = nil
        )
        {
            self.consumerARN = consumerARN
            self.consumerCreationTimestamp = consumerCreationTimestamp
            self.consumerName = consumerName
            self.consumerStatus = consumerStatus
        }
    }

}

extension KinesisClientTypes.ConsumerDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerARN = "ConsumerARN"
        case consumerCreationTimestamp = "ConsumerCreationTimestamp"
        case consumerName = "ConsumerName"
        case consumerStatus = "ConsumerStatus"
        case streamARN = "StreamARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consumerARN = self.consumerARN {
            try encodeContainer.encode(consumerARN, forKey: .consumerARN)
        }
        if let consumerCreationTimestamp = self.consumerCreationTimestamp {
            try encodeContainer.encodeTimestamp(consumerCreationTimestamp, format: .epochSeconds, forKey: .consumerCreationTimestamp)
        }
        if let consumerName = self.consumerName {
            try encodeContainer.encode(consumerName, forKey: .consumerName)
        }
        if let consumerStatus = self.consumerStatus {
            try encodeContainer.encode(consumerStatus.rawValue, forKey: .consumerStatus)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerName)
        consumerName = consumerNameDecoded
        let consumerARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerARN)
        consumerARN = consumerARNDecoded
        let consumerStatusDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.ConsumerStatus.self, forKey: .consumerStatus)
        consumerStatus = consumerStatusDecoded
        let consumerCreationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .consumerCreationTimestamp)
        consumerCreationTimestamp = consumerCreationTimestampDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension KinesisClientTypes {
    /// An object that represents the details of a registered consumer. This type of object is returned by [DescribeStreamConsumer].
    public struct ConsumerDescription: Swift.Equatable {
        /// When you register a consumer, Kinesis Data Streams generates an ARN for it. You need this ARN to be able to call [SubscribeToShard]. If you delete a consumer and then create a new one with the same name, it won't have the same ARN. That's because consumer ARNs contain the creation timestamp. This is important to keep in mind if you have IAM policies that reference consumer ARNs.
        /// This member is required.
        public var consumerARN: Swift.String?
        ///
        /// This member is required.
        public var consumerCreationTimestamp: ClientRuntime.Date?
        /// The name of the consumer is something you choose when you register the consumer.
        /// This member is required.
        public var consumerName: Swift.String?
        /// A consumer can't read data while in the CREATING or DELETING states.
        /// This member is required.
        public var consumerStatus: KinesisClientTypes.ConsumerStatus?
        /// The ARN of the stream with which you registered the consumer.
        /// This member is required.
        public var streamARN: Swift.String?

        public init(
            consumerARN: Swift.String? = nil,
            consumerCreationTimestamp: ClientRuntime.Date? = nil,
            consumerName: Swift.String? = nil,
            consumerStatus: KinesisClientTypes.ConsumerStatus? = nil,
            streamARN: Swift.String? = nil
        )
        {
            self.consumerARN = consumerARN
            self.consumerCreationTimestamp = consumerCreationTimestamp
            self.consumerName = consumerName
            self.consumerStatus = consumerStatus
            self.streamARN = streamARN
        }
    }

}

extension KinesisClientTypes {
    public enum ConsumerStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ConsumerStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConsumerStatus(rawValue: rawValue) ?? ConsumerStatus.sdkUnknown(rawValue)
        }
    }
}

extension CreateStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shardCount = "ShardCount"
        case streamModeDetails = "StreamModeDetails"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let shardCount = self.shardCount {
            try encodeContainer.encode(shardCount, forKey: .shardCount)
        }
        if let streamModeDetails = self.streamModeDetails {
            try encodeContainer.encode(streamModeDetails, forKey: .streamModeDetails)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension CreateStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for CreateStream.
public struct CreateStreamInput: Swift.Equatable {
    /// The number of shards that the stream will use. The throughput of the stream is a function of the number of shards; more shards are required for greater provisioned throughput.
    public var shardCount: Swift.Int?
    /// Indicates the capacity mode of the data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand capacity mode and a provisioned capacity mode for your data streams.
    public var streamModeDetails: KinesisClientTypes.StreamModeDetails?
    /// A name to identify the stream. The stream name is scoped to the Amazon Web Services account used by the application that creates the stream. It is also scoped by Amazon Web Services Region. That is, two streams in two different Amazon Web Services accounts can have the same name. Two streams in the same Amazon Web Services account but in two different Regions can also have the same name.
    /// This member is required.
    public var streamName: Swift.String?

    public init(
        shardCount: Swift.Int? = nil,
        streamModeDetails: KinesisClientTypes.StreamModeDetails? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.shardCount = shardCount
        self.streamModeDetails = streamModeDetails
        self.streamName = streamName
    }
}

struct CreateStreamInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let shardCount: Swift.Int?
    let streamModeDetails: KinesisClientTypes.StreamModeDetails?
}

extension CreateStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shardCount = "ShardCount"
        case streamModeDetails = "StreamModeDetails"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let shardCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shardCount)
        shardCount = shardCountDecoded
        let streamModeDetailsDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StreamModeDetails.self, forKey: .streamModeDetails)
        streamModeDetails = streamModeDetailsDecoded
    }
}

extension CreateStreamOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct CreateStreamOutput: Swift.Equatable {

    public init() { }
}

enum CreateStreamOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DecreaseStreamRetentionPeriodInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retentionPeriodHours = "RetentionPeriodHours"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let retentionPeriodHours = self.retentionPeriodHours {
            try encodeContainer.encode(retentionPeriodHours, forKey: .retentionPeriodHours)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension DecreaseStreamRetentionPeriodInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for [DecreaseStreamRetentionPeriod].
public struct DecreaseStreamRetentionPeriodInput: Swift.Equatable {
    /// The new retention period of the stream, in hours. Must be less than the current retention period.
    /// This member is required.
    public var retentionPeriodHours: Swift.Int?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream to modify.
    public var streamName: Swift.String?

    public init(
        retentionPeriodHours: Swift.Int? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.retentionPeriodHours = retentionPeriodHours
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct DecreaseStreamRetentionPeriodInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let retentionPeriodHours: Swift.Int?
    let streamARN: Swift.String?
}

extension DecreaseStreamRetentionPeriodInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retentionPeriodHours = "RetentionPeriodHours"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let retentionPeriodHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionPeriodHours)
        retentionPeriodHours = retentionPeriodHoursDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension DecreaseStreamRetentionPeriodOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DecreaseStreamRetentionPeriodOutput: Swift.Equatable {

    public init() { }
}

enum DecreaseStreamRetentionPeriodOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
    }
}

extension DeleteResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteResourcePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the data stream or consumer.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

struct DeleteResourcePolicyInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
}

extension DeleteResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
    }
}

extension DeleteResourcePolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteResourcePolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteResourcePolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enforceConsumerDeletion = "EnforceConsumerDeletion"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enforceConsumerDeletion = self.enforceConsumerDeletion {
            try encodeContainer.encode(enforceConsumerDeletion, forKey: .enforceConsumerDeletion)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension DeleteStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for [DeleteStream].
public struct DeleteStreamInput: Swift.Equatable {
    /// If this parameter is unset (null) or if you set it to false, and the stream has registered consumers, the call to DeleteStream fails with a ResourceInUseException.
    public var enforceConsumerDeletion: Swift.Bool?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream to delete.
    public var streamName: Swift.String?

    public init(
        enforceConsumerDeletion: Swift.Bool? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.enforceConsumerDeletion = enforceConsumerDeletion
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct DeleteStreamInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let enforceConsumerDeletion: Swift.Bool?
    let streamARN: Swift.String?
}

extension DeleteStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enforceConsumerDeletion = "EnforceConsumerDeletion"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let enforceConsumerDeletionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enforceConsumerDeletion)
        enforceConsumerDeletion = enforceConsumerDeletionDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension DeleteStreamOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteStreamOutput: Swift.Equatable {

    public init() { }
}

enum DeleteStreamOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeregisterStreamConsumerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerARN = "ConsumerARN"
        case consumerName = "ConsumerName"
        case streamARN = "StreamARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consumerARN = self.consumerARN {
            try encodeContainer.encode(consumerARN, forKey: .consumerARN)
        }
        if let consumerName = self.consumerName {
            try encodeContainer.encode(consumerName, forKey: .consumerName)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
    }
}

extension DeregisterStreamConsumerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeregisterStreamConsumerInput: Swift.Equatable {
    /// The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.
    public var consumerARN: Swift.String?
    /// The name that you gave to the consumer.
    public var consumerName: Swift.String?
    /// The ARN of the Kinesis data stream that the consumer is registered with. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams).
    public var streamARN: Swift.String?

    public init(
        consumerARN: Swift.String? = nil,
        consumerName: Swift.String? = nil,
        streamARN: Swift.String? = nil
    )
    {
        self.consumerARN = consumerARN
        self.consumerName = consumerName
        self.streamARN = streamARN
    }
}

struct DeregisterStreamConsumerInputBody: Swift.Equatable {
    let streamARN: Swift.String?
    let consumerName: Swift.String?
    let consumerARN: Swift.String?
}

extension DeregisterStreamConsumerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerARN = "ConsumerARN"
        case consumerName = "ConsumerName"
        case streamARN = "StreamARN"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let consumerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerName)
        consumerName = consumerNameDecoded
        let consumerARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerARN)
        consumerARN = consumerARNDecoded
    }
}

extension DeregisterStreamConsumerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeregisterStreamConsumerOutput: Swift.Equatable {

    public init() { }
}

enum DeregisterStreamConsumerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLimitsInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension DescribeLimitsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLimitsInput: Swift.Equatable {

    public init() { }
}

struct DescribeLimitsInputBody: Swift.Equatable {
}

extension DescribeLimitsInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

extension DescribeLimitsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLimitsOutputBody = try responseDecoder.decode(responseBody: data)
            self.onDemandStreamCount = output.onDemandStreamCount
            self.onDemandStreamCountLimit = output.onDemandStreamCountLimit
            self.openShardCount = output.openShardCount
            self.shardLimit = output.shardLimit
        } else {
            self.onDemandStreamCount = nil
            self.onDemandStreamCountLimit = nil
            self.openShardCount = nil
            self.shardLimit = nil
        }
    }
}

public struct DescribeLimitsOutput: Swift.Equatable {
    /// Indicates the number of data streams with the on-demand capacity mode.
    /// This member is required.
    public var onDemandStreamCount: Swift.Int?
    /// The maximum number of data streams with the on-demand capacity mode.
    /// This member is required.
    public var onDemandStreamCountLimit: Swift.Int?
    /// The number of open shards.
    /// This member is required.
    public var openShardCount: Swift.Int?
    /// The maximum number of shards.
    /// This member is required.
    public var shardLimit: Swift.Int?

    public init(
        onDemandStreamCount: Swift.Int? = nil,
        onDemandStreamCountLimit: Swift.Int? = nil,
        openShardCount: Swift.Int? = nil,
        shardLimit: Swift.Int? = nil
    )
    {
        self.onDemandStreamCount = onDemandStreamCount
        self.onDemandStreamCountLimit = onDemandStreamCountLimit
        self.openShardCount = openShardCount
        self.shardLimit = shardLimit
    }
}

struct DescribeLimitsOutputBody: Swift.Equatable {
    let shardLimit: Swift.Int?
    let openShardCount: Swift.Int?
    let onDemandStreamCount: Swift.Int?
    let onDemandStreamCountLimit: Swift.Int?
}

extension DescribeLimitsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case onDemandStreamCount = "OnDemandStreamCount"
        case onDemandStreamCountLimit = "OnDemandStreamCountLimit"
        case openShardCount = "OpenShardCount"
        case shardLimit = "ShardLimit"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shardLimit)
        shardLimit = shardLimitDecoded
        let openShardCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .openShardCount)
        openShardCount = openShardCountDecoded
        let onDemandStreamCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .onDemandStreamCount)
        onDemandStreamCount = onDemandStreamCountDecoded
        let onDemandStreamCountLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .onDemandStreamCountLimit)
        onDemandStreamCountLimit = onDemandStreamCountLimitDecoded
    }
}

enum DescribeLimitsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeStreamConsumerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerARN = "ConsumerARN"
        case consumerName = "ConsumerName"
        case streamARN = "StreamARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consumerARN = self.consumerARN {
            try encodeContainer.encode(consumerARN, forKey: .consumerARN)
        }
        if let consumerName = self.consumerName {
            try encodeContainer.encode(consumerName, forKey: .consumerName)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
    }
}

extension DescribeStreamConsumerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStreamConsumerInput: Swift.Equatable {
    /// The ARN returned by Kinesis Data Streams when you registered the consumer.
    public var consumerARN: Swift.String?
    /// The name that you gave to the consumer.
    public var consumerName: Swift.String?
    /// The ARN of the Kinesis data stream that the consumer is registered with. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams).
    public var streamARN: Swift.String?

    public init(
        consumerARN: Swift.String? = nil,
        consumerName: Swift.String? = nil,
        streamARN: Swift.String? = nil
    )
    {
        self.consumerARN = consumerARN
        self.consumerName = consumerName
        self.streamARN = streamARN
    }
}

struct DescribeStreamConsumerInputBody: Swift.Equatable {
    let streamARN: Swift.String?
    let consumerName: Swift.String?
    let consumerARN: Swift.String?
}

extension DescribeStreamConsumerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerARN = "ConsumerARN"
        case consumerName = "ConsumerName"
        case streamARN = "StreamARN"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let consumerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerName)
        consumerName = consumerNameDecoded
        let consumerARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerARN)
        consumerARN = consumerARNDecoded
    }
}

extension DescribeStreamConsumerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeStreamConsumerOutputBody = try responseDecoder.decode(responseBody: data)
            self.consumerDescription = output.consumerDescription
        } else {
            self.consumerDescription = nil
        }
    }
}

public struct DescribeStreamConsumerOutput: Swift.Equatable {
    /// An object that represents the details of the consumer.
    /// This member is required.
    public var consumerDescription: KinesisClientTypes.ConsumerDescription?

    public init(
        consumerDescription: KinesisClientTypes.ConsumerDescription? = nil
    )
    {
        self.consumerDescription = consumerDescription
    }
}

struct DescribeStreamConsumerOutputBody: Swift.Equatable {
    let consumerDescription: KinesisClientTypes.ConsumerDescription?
}

extension DescribeStreamConsumerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerDescription = "ConsumerDescription"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumerDescriptionDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.ConsumerDescription.self, forKey: .consumerDescription)
        consumerDescription = consumerDescriptionDecoded
    }
}

enum DescribeStreamConsumerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartShardId = "ExclusiveStartShardId"
        case limit = "Limit"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exclusiveStartShardId = self.exclusiveStartShardId {
            try encodeContainer.encode(exclusiveStartShardId, forKey: .exclusiveStartShardId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension DescribeStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for DescribeStream.
public struct DescribeStreamInput: Swift.Equatable {
    /// The shard ID of the shard to start with. Specify this parameter to indicate that you want to describe the stream starting with the shard whose ID immediately follows ExclusiveStartShardId. If you don't specify this parameter, the default behavior for DescribeStream is to describe the stream starting with the first shard in the stream.
    public var exclusiveStartShardId: Swift.String?
    /// The maximum number of shards to return in a single call. The default value is 100. If you specify a value greater than 100, at most 100 results are returned.
    public var limit: Swift.Int?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream to describe.
    public var streamName: Swift.String?

    public init(
        exclusiveStartShardId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.exclusiveStartShardId = exclusiveStartShardId
        self.limit = limit
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct DescribeStreamInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let limit: Swift.Int?
    let exclusiveStartShardId: Swift.String?
    let streamARN: Swift.String?
}

extension DescribeStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartShardId = "ExclusiveStartShardId"
        case limit = "Limit"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let exclusiveStartShardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exclusiveStartShardId)
        exclusiveStartShardId = exclusiveStartShardIdDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension DescribeStreamOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeStreamOutputBody = try responseDecoder.decode(responseBody: data)
            self.streamDescription = output.streamDescription
        } else {
            self.streamDescription = nil
        }
    }
}

/// Represents the output for DescribeStream.
public struct DescribeStreamOutput: Swift.Equatable {
    /// The current status of the stream, the stream Amazon Resource Name (ARN), an array of shard objects that comprise the stream, and whether there are more shards available.
    /// This member is required.
    public var streamDescription: KinesisClientTypes.StreamDescription?

    public init(
        streamDescription: KinesisClientTypes.StreamDescription? = nil
    )
    {
        self.streamDescription = streamDescription
    }
}

struct DescribeStreamOutputBody: Swift.Equatable {
    let streamDescription: KinesisClientTypes.StreamDescription?
}

extension DescribeStreamOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamDescription = "StreamDescription"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamDescriptionDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StreamDescription.self, forKey: .streamDescription)
        streamDescription = streamDescriptionDecoded
    }
}

enum DescribeStreamOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeStreamSummaryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension DescribeStreamSummaryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStreamSummaryInput: Swift.Equatable {
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream to describe.
    public var streamName: Swift.String?

    public init(
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct DescribeStreamSummaryInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let streamARN: Swift.String?
}

extension DescribeStreamSummaryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension DescribeStreamSummaryOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeStreamSummaryOutputBody = try responseDecoder.decode(responseBody: data)
            self.streamDescriptionSummary = output.streamDescriptionSummary
        } else {
            self.streamDescriptionSummary = nil
        }
    }
}

public struct DescribeStreamSummaryOutput: Swift.Equatable {
    /// A [StreamDescriptionSummary] containing information about the stream.
    /// This member is required.
    public var streamDescriptionSummary: KinesisClientTypes.StreamDescriptionSummary?

    public init(
        streamDescriptionSummary: KinesisClientTypes.StreamDescriptionSummary? = nil
    )
    {
        self.streamDescriptionSummary = streamDescriptionSummary
    }
}

struct DescribeStreamSummaryOutputBody: Swift.Equatable {
    let streamDescriptionSummary: KinesisClientTypes.StreamDescriptionSummary?
}

extension DescribeStreamSummaryOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamDescriptionSummary = "StreamDescriptionSummary"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamDescriptionSummaryDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StreamDescriptionSummary.self, forKey: .streamDescriptionSummary)
        streamDescriptionSummary = streamDescriptionSummaryDecoded
    }
}

enum DescribeStreamSummaryOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DisableEnhancedMonitoringInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shardLevelMetrics = "ShardLevelMetrics"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let shardLevelMetrics = shardLevelMetrics {
            var shardLevelMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .shardLevelMetrics)
            for metricsname0 in shardLevelMetrics {
                try shardLevelMetricsContainer.encode(metricsname0.rawValue)
            }
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension DisableEnhancedMonitoringInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for [DisableEnhancedMonitoring].
public struct DisableEnhancedMonitoringInput: Swift.Equatable {
    /// List of shard-level metrics to disable. The following are the valid shard-level metrics. The value "ALL" disables every metric.
    ///
    /// * IncomingBytes
    ///
    /// * IncomingRecords
    ///
    /// * OutgoingBytes
    ///
    /// * OutgoingRecords
    ///
    /// * WriteProvisionedThroughputExceeded
    ///
    /// * ReadProvisionedThroughputExceeded
    ///
    /// * IteratorAgeMilliseconds
    ///
    /// * ALL
    ///
    ///
    /// For more information, see [Monitoring the Amazon Kinesis Data Streams Service with Amazon CloudWatch](https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html) in the Amazon Kinesis Data Streams Developer Guide.
    /// This member is required.
    public var shardLevelMetrics: [KinesisClientTypes.MetricsName]?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the Kinesis data stream for which to disable enhanced monitoring.
    public var streamName: Swift.String?

    public init(
        shardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.shardLevelMetrics = shardLevelMetrics
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct DisableEnhancedMonitoringInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let shardLevelMetrics: [KinesisClientTypes.MetricsName]?
    let streamARN: Swift.String?
}

extension DisableEnhancedMonitoringInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shardLevelMetrics = "ShardLevelMetrics"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let shardLevelMetricsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.MetricsName?].self, forKey: .shardLevelMetrics)
        var shardLevelMetricsDecoded0:[KinesisClientTypes.MetricsName]? = nil
        if let shardLevelMetricsContainer = shardLevelMetricsContainer {
            shardLevelMetricsDecoded0 = [KinesisClientTypes.MetricsName]()
            for enum0 in shardLevelMetricsContainer {
                if let enum0 = enum0 {
                    shardLevelMetricsDecoded0?.append(enum0)
                }
            }
        }
        shardLevelMetrics = shardLevelMetricsDecoded0
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension DisableEnhancedMonitoringOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DisableEnhancedMonitoringOutputBody = try responseDecoder.decode(responseBody: data)
            self.currentShardLevelMetrics = output.currentShardLevelMetrics
            self.desiredShardLevelMetrics = output.desiredShardLevelMetrics
            self.streamARN = output.streamARN
            self.streamName = output.streamName
        } else {
            self.currentShardLevelMetrics = nil
            self.desiredShardLevelMetrics = nil
            self.streamARN = nil
            self.streamName = nil
        }
    }
}

/// Represents the output for [EnableEnhancedMonitoring] and [DisableEnhancedMonitoring].
public struct DisableEnhancedMonitoringOutput: Swift.Equatable {
    /// Represents the current state of the metrics that are in the enhanced state before the operation.
    public var currentShardLevelMetrics: [KinesisClientTypes.MetricsName]?
    /// Represents the list of all the metrics that would be in the enhanced state after the operation.
    public var desiredShardLevelMetrics: [KinesisClientTypes.MetricsName]?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the Kinesis data stream.
    public var streamName: Swift.String?

    public init(
        currentShardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil,
        desiredShardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.currentShardLevelMetrics = currentShardLevelMetrics
        self.desiredShardLevelMetrics = desiredShardLevelMetrics
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct DisableEnhancedMonitoringOutputBody: Swift.Equatable {
    let streamName: Swift.String?
    let currentShardLevelMetrics: [KinesisClientTypes.MetricsName]?
    let desiredShardLevelMetrics: [KinesisClientTypes.MetricsName]?
    let streamARN: Swift.String?
}

extension DisableEnhancedMonitoringOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentShardLevelMetrics = "CurrentShardLevelMetrics"
        case desiredShardLevelMetrics = "DesiredShardLevelMetrics"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let currentShardLevelMetricsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.MetricsName?].self, forKey: .currentShardLevelMetrics)
        var currentShardLevelMetricsDecoded0:[KinesisClientTypes.MetricsName]? = nil
        if let currentShardLevelMetricsContainer = currentShardLevelMetricsContainer {
            currentShardLevelMetricsDecoded0 = [KinesisClientTypes.MetricsName]()
            for enum0 in currentShardLevelMetricsContainer {
                if let enum0 = enum0 {
                    currentShardLevelMetricsDecoded0?.append(enum0)
                }
            }
        }
        currentShardLevelMetrics = currentShardLevelMetricsDecoded0
        let desiredShardLevelMetricsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.MetricsName?].self, forKey: .desiredShardLevelMetrics)
        var desiredShardLevelMetricsDecoded0:[KinesisClientTypes.MetricsName]? = nil
        if let desiredShardLevelMetricsContainer = desiredShardLevelMetricsContainer {
            desiredShardLevelMetricsDecoded0 = [KinesisClientTypes.MetricsName]()
            for enum0 in desiredShardLevelMetricsContainer {
                if let enum0 = enum0 {
                    desiredShardLevelMetricsDecoded0?.append(enum0)
                }
            }
        }
        desiredShardLevelMetrics = desiredShardLevelMetricsDecoded0
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

enum DisableEnhancedMonitoringOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension EnableEnhancedMonitoringInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shardLevelMetrics = "ShardLevelMetrics"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let shardLevelMetrics = shardLevelMetrics {
            var shardLevelMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .shardLevelMetrics)
            for metricsname0 in shardLevelMetrics {
                try shardLevelMetricsContainer.encode(metricsname0.rawValue)
            }
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension EnableEnhancedMonitoringInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for [EnableEnhancedMonitoring].
public struct EnableEnhancedMonitoringInput: Swift.Equatable {
    /// List of shard-level metrics to enable. The following are the valid shard-level metrics. The value "ALL" enables every metric.
    ///
    /// * IncomingBytes
    ///
    /// * IncomingRecords
    ///
    /// * OutgoingBytes
    ///
    /// * OutgoingRecords
    ///
    /// * WriteProvisionedThroughputExceeded
    ///
    /// * ReadProvisionedThroughputExceeded
    ///
    /// * IteratorAgeMilliseconds
    ///
    /// * ALL
    ///
    ///
    /// For more information, see [Monitoring the Amazon Kinesis Data Streams Service with Amazon CloudWatch](https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html) in the Amazon Kinesis Data Streams Developer Guide.
    /// This member is required.
    public var shardLevelMetrics: [KinesisClientTypes.MetricsName]?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream for which to enable enhanced monitoring.
    public var streamName: Swift.String?

    public init(
        shardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.shardLevelMetrics = shardLevelMetrics
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct EnableEnhancedMonitoringInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let shardLevelMetrics: [KinesisClientTypes.MetricsName]?
    let streamARN: Swift.String?
}

extension EnableEnhancedMonitoringInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shardLevelMetrics = "ShardLevelMetrics"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let shardLevelMetricsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.MetricsName?].self, forKey: .shardLevelMetrics)
        var shardLevelMetricsDecoded0:[KinesisClientTypes.MetricsName]? = nil
        if let shardLevelMetricsContainer = shardLevelMetricsContainer {
            shardLevelMetricsDecoded0 = [KinesisClientTypes.MetricsName]()
            for enum0 in shardLevelMetricsContainer {
                if let enum0 = enum0 {
                    shardLevelMetricsDecoded0?.append(enum0)
                }
            }
        }
        shardLevelMetrics = shardLevelMetricsDecoded0
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension EnableEnhancedMonitoringOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: EnableEnhancedMonitoringOutputBody = try responseDecoder.decode(responseBody: data)
            self.currentShardLevelMetrics = output.currentShardLevelMetrics
            self.desiredShardLevelMetrics = output.desiredShardLevelMetrics
            self.streamARN = output.streamARN
            self.streamName = output.streamName
        } else {
            self.currentShardLevelMetrics = nil
            self.desiredShardLevelMetrics = nil
            self.streamARN = nil
            self.streamName = nil
        }
    }
}

/// Represents the output for [EnableEnhancedMonitoring] and [DisableEnhancedMonitoring].
public struct EnableEnhancedMonitoringOutput: Swift.Equatable {
    /// Represents the current state of the metrics that are in the enhanced state before the operation.
    public var currentShardLevelMetrics: [KinesisClientTypes.MetricsName]?
    /// Represents the list of all the metrics that would be in the enhanced state after the operation.
    public var desiredShardLevelMetrics: [KinesisClientTypes.MetricsName]?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the Kinesis data stream.
    public var streamName: Swift.String?

    public init(
        currentShardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil,
        desiredShardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.currentShardLevelMetrics = currentShardLevelMetrics
        self.desiredShardLevelMetrics = desiredShardLevelMetrics
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct EnableEnhancedMonitoringOutputBody: Swift.Equatable {
    let streamName: Swift.String?
    let currentShardLevelMetrics: [KinesisClientTypes.MetricsName]?
    let desiredShardLevelMetrics: [KinesisClientTypes.MetricsName]?
    let streamARN: Swift.String?
}

extension EnableEnhancedMonitoringOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentShardLevelMetrics = "CurrentShardLevelMetrics"
        case desiredShardLevelMetrics = "DesiredShardLevelMetrics"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let currentShardLevelMetricsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.MetricsName?].self, forKey: .currentShardLevelMetrics)
        var currentShardLevelMetricsDecoded0:[KinesisClientTypes.MetricsName]? = nil
        if let currentShardLevelMetricsContainer = currentShardLevelMetricsContainer {
            currentShardLevelMetricsDecoded0 = [KinesisClientTypes.MetricsName]()
            for enum0 in currentShardLevelMetricsContainer {
                if let enum0 = enum0 {
                    currentShardLevelMetricsDecoded0?.append(enum0)
                }
            }
        }
        currentShardLevelMetrics = currentShardLevelMetricsDecoded0
        let desiredShardLevelMetricsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.MetricsName?].self, forKey: .desiredShardLevelMetrics)
        var desiredShardLevelMetricsDecoded0:[KinesisClientTypes.MetricsName]? = nil
        if let desiredShardLevelMetricsContainer = desiredShardLevelMetricsContainer {
            desiredShardLevelMetricsDecoded0 = [KinesisClientTypes.MetricsName]()
            for enum0 in desiredShardLevelMetricsContainer {
                if let enum0 = enum0 {
                    desiredShardLevelMetricsDecoded0?.append(enum0)
                }
            }
        }
        desiredShardLevelMetrics = desiredShardLevelMetricsDecoded0
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

enum EnableEnhancedMonitoringOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension KinesisClientTypes {
    public enum EncryptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case kms
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionType] {
            return [
                .kms,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .kms: return "KMS"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EncryptionType(rawValue: rawValue) ?? EncryptionType.sdkUnknown(rawValue)
        }
    }
}

extension KinesisClientTypes.EnhancedMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shardLevelMetrics = "ShardLevelMetrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let shardLevelMetrics = shardLevelMetrics {
            var shardLevelMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .shardLevelMetrics)
            for metricsname0 in shardLevelMetrics {
                try shardLevelMetricsContainer.encode(metricsname0.rawValue)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardLevelMetricsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.MetricsName?].self, forKey: .shardLevelMetrics)
        var shardLevelMetricsDecoded0:[KinesisClientTypes.MetricsName]? = nil
        if let shardLevelMetricsContainer = shardLevelMetricsContainer {
            shardLevelMetricsDecoded0 = [KinesisClientTypes.MetricsName]()
            for enum0 in shardLevelMetricsContainer {
                if let enum0 = enum0 {
                    shardLevelMetricsDecoded0?.append(enum0)
                }
            }
        }
        shardLevelMetrics = shardLevelMetricsDecoded0
    }
}

extension KinesisClientTypes {
    /// Represents enhanced metrics types.
    public struct EnhancedMetrics: Swift.Equatable {
        /// List of shard-level metrics. The following are the valid shard-level metrics. The value "ALL" enhances every metric.
        ///
        /// * IncomingBytes
        ///
        /// * IncomingRecords
        ///
        /// * OutgoingBytes
        ///
        /// * OutgoingRecords
        ///
        /// * WriteProvisionedThroughputExceeded
        ///
        /// * ReadProvisionedThroughputExceeded
        ///
        /// * IteratorAgeMilliseconds
        ///
        /// * ALL
        ///
        ///
        /// For more information, see [Monitoring the Amazon Kinesis Data Streams Service with Amazon CloudWatch](https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html) in the Amazon Kinesis Data Streams Developer Guide.
        public var shardLevelMetrics: [KinesisClientTypes.MetricsName]?

        public init(
            shardLevelMetrics: [KinesisClientTypes.MetricsName]? = nil
        )
        {
            self.shardLevelMetrics = shardLevelMetrics
        }
    }

}

extension ExpiredIteratorException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ExpiredIteratorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The provided iterator exceeds the maximum age allowed.
public struct ExpiredIteratorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ExpiredIteratorException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ExpiredIteratorExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ExpiredIteratorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ExpiredNextTokenException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ExpiredNextTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The pagination token passed to the operation is expired.
public struct ExpiredNextTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ExpiredNextTokenException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ExpiredNextTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ExpiredNextTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GetRecordsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case shardIterator = "ShardIterator"
        case streamARN = "StreamARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let shardIterator = self.shardIterator {
            try encodeContainer.encode(shardIterator, forKey: .shardIterator)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
    }
}

extension GetRecordsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for [GetRecords].
public struct GetRecordsInput: Swift.Equatable {
    /// The maximum number of records to return. Specify a value of up to 10,000. If you specify a value that is greater than 10,000, [GetRecords] throws InvalidArgumentException. The default value is 10,000.
    public var limit: Swift.Int?
    /// The position in the shard from which you want to start sequentially reading data records. A shard iterator specifies this position using the sequence number of a data record in the shard.
    /// This member is required.
    public var shardIterator: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        shardIterator: Swift.String? = nil,
        streamARN: Swift.String? = nil
    )
    {
        self.limit = limit
        self.shardIterator = shardIterator
        self.streamARN = streamARN
    }
}

struct GetRecordsInputBody: Swift.Equatable {
    let shardIterator: Swift.String?
    let limit: Swift.Int?
    let streamARN: Swift.String?
}

extension GetRecordsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case shardIterator = "ShardIterator"
        case streamARN = "StreamARN"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardIteratorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardIterator)
        shardIterator = shardIteratorDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension GetRecordsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetRecordsOutputBody = try responseDecoder.decode(responseBody: data)
            self.childShards = output.childShards
            self.millisBehindLatest = output.millisBehindLatest
            self.nextShardIterator = output.nextShardIterator
            self.records = output.records
        } else {
            self.childShards = nil
            self.millisBehindLatest = nil
            self.nextShardIterator = nil
            self.records = nil
        }
    }
}

/// Represents the output for [GetRecords].
public struct GetRecordsOutput: Swift.Equatable {
    /// The list of the current shard's child shards, returned in the GetRecords API's response only when the end of the current shard is reached.
    public var childShards: [KinesisClientTypes.ChildShard]?
    /// The number of milliseconds the [GetRecords] response is from the tip of the stream, indicating how far behind current time the consumer is. A value of zero indicates that record processing is caught up, and there are no new records to process at this moment.
    public var millisBehindLatest: Swift.Int?
    /// The next position in the shard from which to start sequentially reading data records. If set to null, the shard has been closed and the requested iterator does not return any more data.
    public var nextShardIterator: Swift.String?
    /// The data records retrieved from the shard.
    /// This member is required.
    public var records: [KinesisClientTypes.Record]?

    public init(
        childShards: [KinesisClientTypes.ChildShard]? = nil,
        millisBehindLatest: Swift.Int? = nil,
        nextShardIterator: Swift.String? = nil,
        records: [KinesisClientTypes.Record]? = nil
    )
    {
        self.childShards = childShards
        self.millisBehindLatest = millisBehindLatest
        self.nextShardIterator = nextShardIterator
        self.records = records
    }
}

struct GetRecordsOutputBody: Swift.Equatable {
    let records: [KinesisClientTypes.Record]?
    let nextShardIterator: Swift.String?
    let millisBehindLatest: Swift.Int?
    let childShards: [KinesisClientTypes.ChildShard]?
}

extension GetRecordsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childShards = "ChildShards"
        case millisBehindLatest = "MillisBehindLatest"
        case nextShardIterator = "NextShardIterator"
        case records = "Records"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.Record?].self, forKey: .records)
        var recordsDecoded0:[KinesisClientTypes.Record]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [KinesisClientTypes.Record]()
            for structure0 in recordsContainer {
                if let structure0 = structure0 {
                    recordsDecoded0?.append(structure0)
                }
            }
        }
        records = recordsDecoded0
        let nextShardIteratorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextShardIterator)
        nextShardIterator = nextShardIteratorDecoded
        let millisBehindLatestDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .millisBehindLatest)
        millisBehindLatest = millisBehindLatestDecoded
        let childShardsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.ChildShard?].self, forKey: .childShards)
        var childShardsDecoded0:[KinesisClientTypes.ChildShard]? = nil
        if let childShardsContainer = childShardsContainer {
            childShardsDecoded0 = [KinesisClientTypes.ChildShard]()
            for structure0 in childShardsContainer {
                if let structure0 = structure0 {
                    childShardsDecoded0?.append(structure0)
                }
            }
        }
        childShards = childShardsDecoded0
    }
}

enum GetRecordsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ExpiredIteratorException": return try await ExpiredIteratorException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSAccessDeniedException": return try await KMSAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSDisabledException": return try await KMSDisabledException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSInvalidStateException": return try await KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSNotFoundException": return try await KMSNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSOptInRequired": return try await KMSOptInRequired(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSThrottlingException": return try await KMSThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ProvisionedThroughputExceededException": return try await ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
    }
}

extension GetResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetResourcePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the data stream or consumer.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

struct GetResourcePolicyInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
}

extension GetResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
    }
}

extension GetResourcePolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetResourcePolicyOutputBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct GetResourcePolicyOutput: Swift.Equatable {
    /// Details of the resource policy. This is formatted as a JSON string.
    /// This member is required.
    public var policy: Swift.String?

    public init(
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

struct GetResourcePolicyOutputBody: Swift.Equatable {
    let policy: Swift.String?
}

extension GetResourcePolicyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

enum GetResourcePolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetShardIteratorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shardId = "ShardId"
        case shardIteratorType = "ShardIteratorType"
        case startingSequenceNumber = "StartingSequenceNumber"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let shardId = self.shardId {
            try encodeContainer.encode(shardId, forKey: .shardId)
        }
        if let shardIteratorType = self.shardIteratorType {
            try encodeContainer.encode(shardIteratorType.rawValue, forKey: .shardIteratorType)
        }
        if let startingSequenceNumber = self.startingSequenceNumber {
            try encodeContainer.encode(startingSequenceNumber, forKey: .startingSequenceNumber)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encodeTimestamp(timestamp, format: .epochSeconds, forKey: .timestamp)
        }
    }
}

extension GetShardIteratorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for GetShardIterator.
public struct GetShardIteratorInput: Swift.Equatable {
    /// The shard ID of the Kinesis Data Streams shard to get the iterator for.
    /// This member is required.
    public var shardId: Swift.String?
    /// Determines how the shard iterator is used to start reading data records from the shard. The following are the valid Amazon Kinesis shard iterator types:
    ///
    /// * AT_SEQUENCE_NUMBER - Start reading from the position denoted by a specific sequence number, provided in the value StartingSequenceNumber.
    ///
    /// * AFTER_SEQUENCE_NUMBER - Start reading right after the position denoted by a specific sequence number, provided in the value StartingSequenceNumber.
    ///
    /// * AT_TIMESTAMP - Start reading from the position denoted by a specific time stamp, provided in the value Timestamp.
    ///
    /// * TRIM_HORIZON - Start reading at the last untrimmed record in the shard in the system, which is the oldest data record in the shard.
    ///
    /// * LATEST - Start reading just after the most recent record in the shard, so that you always read the most recent data in the shard.
    /// This member is required.
    public var shardIteratorType: KinesisClientTypes.ShardIteratorType?
    /// The sequence number of the data record in the shard from which to start reading. Used with shard iterator type AT_SEQUENCE_NUMBER and AFTER_SEQUENCE_NUMBER.
    public var startingSequenceNumber: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the Amazon Kinesis data stream.
    public var streamName: Swift.String?
    /// The time stamp of the data record from which to start reading. Used with shard iterator type AT_TIMESTAMP. A time stamp is the Unix epoch date with precision in milliseconds. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480. If a record with this exact time stamp does not exist, the iterator returned is for the next (later) record. If the time stamp is older than the current trim horizon, the iterator returned is for the oldest untrimmed data record (TRIM_HORIZON).
    public var timestamp: ClientRuntime.Date?

    public init(
        shardId: Swift.String? = nil,
        shardIteratorType: KinesisClientTypes.ShardIteratorType? = nil,
        startingSequenceNumber: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil,
        timestamp: ClientRuntime.Date? = nil
    )
    {
        self.shardId = shardId
        self.shardIteratorType = shardIteratorType
        self.startingSequenceNumber = startingSequenceNumber
        self.streamARN = streamARN
        self.streamName = streamName
        self.timestamp = timestamp
    }
}

struct GetShardIteratorInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let shardId: Swift.String?
    let shardIteratorType: KinesisClientTypes.ShardIteratorType?
    let startingSequenceNumber: Swift.String?
    let timestamp: ClientRuntime.Date?
    let streamARN: Swift.String?
}

extension GetShardIteratorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shardId = "ShardId"
        case shardIteratorType = "ShardIteratorType"
        case startingSequenceNumber = "StartingSequenceNumber"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
        case timestamp = "Timestamp"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let shardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardId)
        shardId = shardIdDecoded
        let shardIteratorTypeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.ShardIteratorType.self, forKey: .shardIteratorType)
        shardIteratorType = shardIteratorTypeDecoded
        let startingSequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startingSequenceNumber)
        startingSequenceNumber = startingSequenceNumberDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timestamp)
        timestamp = timestampDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension GetShardIteratorOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetShardIteratorOutputBody = try responseDecoder.decode(responseBody: data)
            self.shardIterator = output.shardIterator
        } else {
            self.shardIterator = nil
        }
    }
}

/// Represents the output for GetShardIterator.
public struct GetShardIteratorOutput: Swift.Equatable {
    /// The position in the shard from which to start reading data records sequentially. A shard iterator specifies this position using the sequence number of a data record in a shard.
    public var shardIterator: Swift.String?

    public init(
        shardIterator: Swift.String? = nil
    )
    {
        self.shardIterator = shardIterator
    }
}

struct GetShardIteratorOutputBody: Swift.Equatable {
    let shardIterator: Swift.String?
}

extension GetShardIteratorOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shardIterator = "ShardIterator"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardIteratorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardIterator)
        shardIterator = shardIteratorDecoded
    }
}

enum GetShardIteratorOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ProvisionedThroughputExceededException": return try await ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension KinesisClientTypes.HashKeyRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endingHashKey = "EndingHashKey"
        case startingHashKey = "StartingHashKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endingHashKey = self.endingHashKey {
            try encodeContainer.encode(endingHashKey, forKey: .endingHashKey)
        }
        if let startingHashKey = self.startingHashKey {
            try encodeContainer.encode(startingHashKey, forKey: .startingHashKey)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startingHashKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startingHashKey)
        startingHashKey = startingHashKeyDecoded
        let endingHashKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endingHashKey)
        endingHashKey = endingHashKeyDecoded
    }
}

extension KinesisClientTypes {
    /// The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.
    public struct HashKeyRange: Swift.Equatable {
        /// The ending hash key of the hash key range.
        /// This member is required.
        public var endingHashKey: Swift.String?
        /// The starting hash key of the hash key range.
        /// This member is required.
        public var startingHashKey: Swift.String?

        public init(
            endingHashKey: Swift.String? = nil,
            startingHashKey: Swift.String? = nil
        )
        {
            self.endingHashKey = endingHashKey
            self.startingHashKey = startingHashKey
        }
    }

}

extension IncreaseStreamRetentionPeriodInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retentionPeriodHours = "RetentionPeriodHours"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let retentionPeriodHours = self.retentionPeriodHours {
            try encodeContainer.encode(retentionPeriodHours, forKey: .retentionPeriodHours)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension IncreaseStreamRetentionPeriodInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for [IncreaseStreamRetentionPeriod].
public struct IncreaseStreamRetentionPeriodInput: Swift.Equatable {
    /// The new retention period of the stream, in hours. Must be more than the current retention period.
    /// This member is required.
    public var retentionPeriodHours: Swift.Int?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream to modify.
    public var streamName: Swift.String?

    public init(
        retentionPeriodHours: Swift.Int? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.retentionPeriodHours = retentionPeriodHours
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct IncreaseStreamRetentionPeriodInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let retentionPeriodHours: Swift.Int?
    let streamARN: Swift.String?
}

extension IncreaseStreamRetentionPeriodInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retentionPeriodHours = "RetentionPeriodHours"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let retentionPeriodHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionPeriodHours)
        retentionPeriodHours = retentionPeriodHoursDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension IncreaseStreamRetentionPeriodOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct IncreaseStreamRetentionPeriodOutput: Swift.Equatable {

    public init() { }
}

enum IncreaseStreamRetentionPeriodOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension InternalFailureException: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.properties.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        properties.message = messageDecoded
    }
}

/// The processing of the request failed because of an unknown error, exception, or failure.
public struct InternalFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalFailureException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidArgumentException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: InvalidArgumentExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A specified parameter exceeds its restrictions, is not supported, or can't be used. For more information, see the returned message.
public struct InvalidArgumentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidArgumentException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidArgumentExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidArgumentExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSAccessDeniedException: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.properties.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        properties.message = messageDecoded
    }
}

extension KMSAccessDeniedException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: KMSAccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The ciphertext references a key that doesn't exist or that you don't have access to.
public struct KMSAccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSAccessDeniedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct KMSAccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension KMSAccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSDisabledException: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.properties.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        properties.message = messageDecoded
    }
}

extension KMSDisabledException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: KMSDisabledExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request was rejected because the specified customer master key (CMK) isn't enabled.
public struct KMSDisabledException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSDisabledException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct KMSDisabledExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension KMSDisabledExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSInvalidStateException: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.properties.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        properties.message = messageDecoded
    }
}

extension KMSInvalidStateException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: KMSInvalidStateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request was rejected because the state of the specified resource isn't valid for this request. For more information, see [How Key State Affects Use of a Customer Master Key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the Amazon Web Services Key Management Service Developer Guide.
public struct KMSInvalidStateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSInvalidStateException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct KMSInvalidStateExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension KMSInvalidStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSNotFoundException: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.properties.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        properties.message = messageDecoded
    }
}

extension KMSNotFoundException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: KMSNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request was rejected because the specified entity or resource can't be found.
public struct KMSNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct KMSNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension KMSNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSOptInRequired: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.properties.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        properties.message = messageDecoded
    }
}

extension KMSOptInRequired {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: KMSOptInRequiredBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The Amazon Web Services access key ID needs a subscription for the service.
public struct KMSOptInRequired: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSOptInRequired" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct KMSOptInRequiredBody: Swift.Equatable {
    let message: Swift.String?
}

extension KMSOptInRequiredBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSThrottlingException: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.properties.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        properties.message = messageDecoded
    }
}

extension KMSThrottlingException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: KMSThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request was denied due to request throttling. For more information about throttling, see [Limits](https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second) in the Amazon Web Services Key Management Service Developer Guide.
public struct KMSThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSThrottlingException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct KMSThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension KMSThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The requested resource exceeds the maximum number allowed, or the number of concurrent stream requests exceeds the maximum number allowed.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListShardsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartShardId = "ExclusiveStartShardId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case shardFilter = "ShardFilter"
        case streamARN = "StreamARN"
        case streamCreationTimestamp = "StreamCreationTimestamp"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exclusiveStartShardId = self.exclusiveStartShardId {
            try encodeContainer.encode(exclusiveStartShardId, forKey: .exclusiveStartShardId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let shardFilter = self.shardFilter {
            try encodeContainer.encode(shardFilter, forKey: .shardFilter)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamCreationTimestamp = self.streamCreationTimestamp {
            try encodeContainer.encodeTimestamp(streamCreationTimestamp, format: .epochSeconds, forKey: .streamCreationTimestamp)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension ListShardsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListShardsInput: Swift.Equatable {
    /// Specify this parameter to indicate that you want to list the shards starting with the shard whose ID immediately follows ExclusiveStartShardId. If you don't specify this parameter, the default behavior is for ListShards to list the shards starting with the first one in the stream. You cannot specify this parameter if you specify NextToken.
    public var exclusiveStartShardId: Swift.String?
    /// The maximum number of shards to return in a single call to ListShards. The maximum number of shards to return in a single call. The default value is 1000. If you specify a value greater than 1000, at most 1000 results are returned. When the number of shards to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListShards to list the next set of shards.
    public var maxResults: Swift.Int?
    /// When the number of shards in the data stream is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of shards in the data stream, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListShards to list the next set of shards. Don't specify StreamName or StreamCreationTimestamp if you specify NextToken because the latter unambiguously identifies the stream. You can optionally specify a value for the MaxResults parameter when you specify NextToken. If you specify a MaxResults value that is less than the number of shards that the operation returns if you don't specify MaxResults, the response will contain a new NextToken value. You can use the new NextToken value in a subsequent call to the ListShards operation. Tokens expire after 300 seconds. When you obtain a value for NextToken in the response to a call to ListShards, you have 300 seconds to use that value. If you specify an expired token in a call to ListShards, you get ExpiredNextTokenException.
    public var nextToken: Swift.String?
    /// Enables you to filter out the response of the ListShards API. You can only specify one filter at a time. If you use the ShardFilter parameter when invoking the ListShards API, the Type is the required property and must be specified. If you specify the AT_TRIM_HORIZON, FROM_TRIM_HORIZON, or AT_LATEST types, you do not need to specify either the ShardId or the Timestamp optional properties. If you specify the AFTER_SHARD_ID type, you must also provide the value for the optional ShardId property. The ShardId property is identical in fuctionality to the ExclusiveStartShardId parameter of the ListShards API. When ShardId property is specified, the response includes the shards starting with the shard whose ID immediately follows the ShardId that you provided. If you specify the AT_TIMESTAMP or FROM_TIMESTAMP_ID type, you must also provide the value for the optional Timestamp property. If you specify the AT_TIMESTAMP type, then all shards that were open at the provided timestamp are returned. If you specify the FROM_TIMESTAMP type, then all shards starting from the provided timestamp to TIP are returned.
    public var shardFilter: KinesisClientTypes.ShardFilter?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// Specify this input parameter to distinguish data streams that have the same name. For example, if you create a data stream and then delete it, and you later create another data stream with the same name, you can use this input parameter to specify which of the two streams you want to list the shards for. You cannot specify this parameter if you specify the NextToken parameter.
    public var streamCreationTimestamp: ClientRuntime.Date?
    /// The name of the data stream whose shards you want to list. You cannot specify this parameter if you specify the NextToken parameter.
    public var streamName: Swift.String?

    public init(
        exclusiveStartShardId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        shardFilter: KinesisClientTypes.ShardFilter? = nil,
        streamARN: Swift.String? = nil,
        streamCreationTimestamp: ClientRuntime.Date? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.exclusiveStartShardId = exclusiveStartShardId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.shardFilter = shardFilter
        self.streamARN = streamARN
        self.streamCreationTimestamp = streamCreationTimestamp
        self.streamName = streamName
    }
}

struct ListShardsInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let nextToken: Swift.String?
    let exclusiveStartShardId: Swift.String?
    let maxResults: Swift.Int?
    let streamCreationTimestamp: ClientRuntime.Date?
    let shardFilter: KinesisClientTypes.ShardFilter?
    let streamARN: Swift.String?
}

extension ListShardsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartShardId = "ExclusiveStartShardId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case shardFilter = "ShardFilter"
        case streamARN = "StreamARN"
        case streamCreationTimestamp = "StreamCreationTimestamp"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let exclusiveStartShardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exclusiveStartShardId)
        exclusiveStartShardId = exclusiveStartShardIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let streamCreationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .streamCreationTimestamp)
        streamCreationTimestamp = streamCreationTimestampDecoded
        let shardFilterDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.ShardFilter.self, forKey: .shardFilter)
        shardFilter = shardFilterDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension ListShardsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListShardsOutputBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.shards = output.shards
        } else {
            self.nextToken = nil
            self.shards = nil
        }
    }
}

public struct ListShardsOutput: Swift.Equatable {
    /// When the number of shards in the data stream is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of shards in the data stream, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListShards to list the next set of shards. For more information about the use of this pagination token when calling the ListShards operation, see [ListShardsInput$NextToken]. Tokens expire after 300 seconds. When you obtain a value for NextToken in the response to a call to ListShards, you have 300 seconds to use that value. If you specify an expired token in a call to ListShards, you get ExpiredNextTokenException.
    public var nextToken: Swift.String?
    /// An array of JSON objects. Each object represents one shard and specifies the IDs of the shard, the shard's parent, and the shard that's adjacent to the shard's parent. Each object also contains the starting and ending hash keys and the starting and ending sequence numbers for the shard.
    public var shards: [KinesisClientTypes.Shard]?

    public init(
        nextToken: Swift.String? = nil,
        shards: [KinesisClientTypes.Shard]? = nil
    )
    {
        self.nextToken = nextToken
        self.shards = shards
    }
}

struct ListShardsOutputBody: Swift.Equatable {
    let shards: [KinesisClientTypes.Shard]?
    let nextToken: Swift.String?
}

extension ListShardsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case shards = "Shards"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.Shard?].self, forKey: .shards)
        var shardsDecoded0:[KinesisClientTypes.Shard]? = nil
        if let shardsContainer = shardsContainer {
            shardsDecoded0 = [KinesisClientTypes.Shard]()
            for structure0 in shardsContainer {
                if let structure0 = structure0 {
                    shardsDecoded0?.append(structure0)
                }
            }
        }
        shards = shardsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum ListShardsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ExpiredNextTokenException": return try await ExpiredNextTokenException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListStreamConsumersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case streamARN = "StreamARN"
        case streamCreationTimestamp = "StreamCreationTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamCreationTimestamp = self.streamCreationTimestamp {
            try encodeContainer.encodeTimestamp(streamCreationTimestamp, format: .epochSeconds, forKey: .streamCreationTimestamp)
        }
    }
}

extension ListStreamConsumersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListStreamConsumersInput: Swift.Equatable {
    /// The maximum number of consumers that you want a single call of ListStreamConsumers to return. The default value is 100. If you specify a value greater than 100, at most 100 results are returned.
    public var maxResults: Swift.Int?
    /// When the number of consumers that are registered with the data stream is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of consumers that are registered with the data stream, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListStreamConsumers to list the next set of registered consumers. Don't specify StreamName or StreamCreationTimestamp if you specify NextToken because the latter unambiguously identifies the stream. You can optionally specify a value for the MaxResults parameter when you specify NextToken. If you specify a MaxResults value that is less than the number of consumers that the operation returns if you don't specify MaxResults, the response will contain a new NextToken value. You can use the new NextToken value in a subsequent call to the ListStreamConsumers operation to list the next set of consumers. Tokens expire after 300 seconds. When you obtain a value for NextToken in the response to a call to ListStreamConsumers, you have 300 seconds to use that value. If you specify an expired token in a call to ListStreamConsumers, you get ExpiredNextTokenException.
    public var nextToken: Swift.String?
    /// The ARN of the Kinesis data stream for which you want to list the registered consumers. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams).
    /// This member is required.
    public var streamARN: Swift.String?
    /// Specify this input parameter to distinguish data streams that have the same name. For example, if you create a data stream and then delete it, and you later create another data stream with the same name, you can use this input parameter to specify which of the two streams you want to list the consumers for. You can't specify this parameter if you specify the NextToken parameter.
    public var streamCreationTimestamp: ClientRuntime.Date?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamCreationTimestamp: ClientRuntime.Date? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.streamARN = streamARN
        self.streamCreationTimestamp = streamCreationTimestamp
    }
}

struct ListStreamConsumersInputBody: Swift.Equatable {
    let streamARN: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let streamCreationTimestamp: ClientRuntime.Date?
}

extension ListStreamConsumersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case streamARN = "StreamARN"
        case streamCreationTimestamp = "StreamCreationTimestamp"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let streamCreationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .streamCreationTimestamp)
        streamCreationTimestamp = streamCreationTimestampDecoded
    }
}

extension ListStreamConsumersOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListStreamConsumersOutputBody = try responseDecoder.decode(responseBody: data)
            self.consumers = output.consumers
            self.nextToken = output.nextToken
        } else {
            self.consumers = nil
            self.nextToken = nil
        }
    }
}

public struct ListStreamConsumersOutput: Swift.Equatable {
    /// An array of JSON objects. Each object represents one registered consumer.
    public var consumers: [KinesisClientTypes.Consumer]?
    /// When the number of consumers that are registered with the data stream is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of registered consumers, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListStreamConsumers to list the next set of registered consumers. For more information about the use of this pagination token when calling the ListStreamConsumers operation, see [ListStreamConsumersInput$NextToken]. Tokens expire after 300 seconds. When you obtain a value for NextToken in the response to a call to ListStreamConsumers, you have 300 seconds to use that value. If you specify an expired token in a call to ListStreamConsumers, you get ExpiredNextTokenException.
    public var nextToken: Swift.String?

    public init(
        consumers: [KinesisClientTypes.Consumer]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.consumers = consumers
        self.nextToken = nextToken
    }
}

struct ListStreamConsumersOutputBody: Swift.Equatable {
    let consumers: [KinesisClientTypes.Consumer]?
    let nextToken: Swift.String?
}

extension ListStreamConsumersOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumers = "Consumers"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumersContainer = try containerValues.decodeIfPresent([KinesisClientTypes.Consumer?].self, forKey: .consumers)
        var consumersDecoded0:[KinesisClientTypes.Consumer]? = nil
        if let consumersContainer = consumersContainer {
            consumersDecoded0 = [KinesisClientTypes.Consumer]()
            for structure0 in consumersContainer {
                if let structure0 = structure0 {
                    consumersDecoded0?.append(structure0)
                }
            }
        }
        consumers = consumersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum ListStreamConsumersOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ExpiredNextTokenException": return try await ExpiredNextTokenException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListStreamsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartStreamName = "ExclusiveStartStreamName"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exclusiveStartStreamName = self.exclusiveStartStreamName {
            try encodeContainer.encode(exclusiveStartStreamName, forKey: .exclusiveStartStreamName)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListStreamsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for ListStreams.
public struct ListStreamsInput: Swift.Equatable {
    /// The name of the stream to start the list with.
    public var exclusiveStartStreamName: Swift.String?
    /// The maximum number of streams to list. The default value is 100. If you specify a value greater than 100, at most 100 results are returned.
    public var limit: Swift.Int?
    ///
    public var nextToken: Swift.String?

    public init(
        exclusiveStartStreamName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exclusiveStartStreamName = exclusiveStartStreamName
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct ListStreamsInputBody: Swift.Equatable {
    let limit: Swift.Int?
    let exclusiveStartStreamName: Swift.String?
    let nextToken: Swift.String?
}

extension ListStreamsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartStreamName = "ExclusiveStartStreamName"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let exclusiveStartStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exclusiveStartStreamName)
        exclusiveStartStreamName = exclusiveStartStreamNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStreamsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListStreamsOutputBody = try responseDecoder.decode(responseBody: data)
            self.hasMoreStreams = output.hasMoreStreams
            self.nextToken = output.nextToken
            self.streamNames = output.streamNames
            self.streamSummaries = output.streamSummaries
        } else {
            self.hasMoreStreams = nil
            self.nextToken = nil
            self.streamNames = nil
            self.streamSummaries = nil
        }
    }
}

/// Represents the output for ListStreams.
public struct ListStreamsOutput: Swift.Equatable {
    /// If set to true, there are more streams available to list.
    /// This member is required.
    public var hasMoreStreams: Swift.Bool?
    ///
    public var nextToken: Swift.String?
    /// The names of the streams that are associated with the Amazon Web Services account making the ListStreams request.
    /// This member is required.
    public var streamNames: [Swift.String]?
    ///
    public var streamSummaries: [KinesisClientTypes.StreamSummary]?

    public init(
        hasMoreStreams: Swift.Bool? = nil,
        nextToken: Swift.String? = nil,
        streamNames: [Swift.String]? = nil,
        streamSummaries: [KinesisClientTypes.StreamSummary]? = nil
    )
    {
        self.hasMoreStreams = hasMoreStreams
        self.nextToken = nextToken
        self.streamNames = streamNames
        self.streamSummaries = streamSummaries
    }
}

struct ListStreamsOutputBody: Swift.Equatable {
    let streamNames: [Swift.String]?
    let hasMoreStreams: Swift.Bool?
    let nextToken: Swift.String?
    let streamSummaries: [KinesisClientTypes.StreamSummary]?
}

extension ListStreamsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hasMoreStreams = "HasMoreStreams"
        case nextToken = "NextToken"
        case streamNames = "StreamNames"
        case streamSummaries = "StreamSummaries"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .streamNames)
        var streamNamesDecoded0:[Swift.String]? = nil
        if let streamNamesContainer = streamNamesContainer {
            streamNamesDecoded0 = [Swift.String]()
            for string0 in streamNamesContainer {
                if let string0 = string0 {
                    streamNamesDecoded0?.append(string0)
                }
            }
        }
        streamNames = streamNamesDecoded0
        let hasMoreStreamsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasMoreStreams)
        hasMoreStreams = hasMoreStreamsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let streamSummariesContainer = try containerValues.decodeIfPresent([KinesisClientTypes.StreamSummary?].self, forKey: .streamSummaries)
        var streamSummariesDecoded0:[KinesisClientTypes.StreamSummary]? = nil
        if let streamSummariesContainer = streamSummariesContainer {
            streamSummariesDecoded0 = [KinesisClientTypes.StreamSummary]()
            for structure0 in streamSummariesContainer {
                if let structure0 = structure0 {
                    streamSummariesDecoded0?.append(structure0)
                }
            }
        }
        streamSummaries = streamSummariesDecoded0
    }
}

enum ListStreamsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ExpiredNextTokenException": return try await ExpiredNextTokenException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListTagsForStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartTagKey = "ExclusiveStartTagKey"
        case limit = "Limit"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exclusiveStartTagKey = self.exclusiveStartTagKey {
            try encodeContainer.encode(exclusiveStartTagKey, forKey: .exclusiveStartTagKey)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension ListTagsForStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for ListTagsForStream.
public struct ListTagsForStreamInput: Swift.Equatable {
    /// The key to use as the starting point for the list of tags. If this parameter is set, ListTagsForStream gets all tags that occur after ExclusiveStartTagKey.
    public var exclusiveStartTagKey: Swift.String?
    /// The number of tags to return. If this number is less than the total number of tags associated with the stream, HasMoreTags is set to true. To list additional tags, set ExclusiveStartTagKey to the last key in the response.
    public var limit: Swift.Int?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream.
    public var streamName: Swift.String?

    public init(
        exclusiveStartTagKey: Swift.String? = nil,
        limit: Swift.Int? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.exclusiveStartTagKey = exclusiveStartTagKey
        self.limit = limit
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct ListTagsForStreamInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let exclusiveStartTagKey: Swift.String?
    let limit: Swift.Int?
    let streamARN: Swift.String?
}

extension ListTagsForStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveStartTagKey = "ExclusiveStartTagKey"
        case limit = "Limit"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let exclusiveStartTagKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exclusiveStartTagKey)
        exclusiveStartTagKey = exclusiveStartTagKeyDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension ListTagsForStreamOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListTagsForStreamOutputBody = try responseDecoder.decode(responseBody: data)
            self.hasMoreTags = output.hasMoreTags
            self.tags = output.tags
        } else {
            self.hasMoreTags = nil
            self.tags = nil
        }
    }
}

/// Represents the output for ListTagsForStream.
public struct ListTagsForStreamOutput: Swift.Equatable {
    /// If set to true, more tags are available. To request additional tags, set ExclusiveStartTagKey to the key of the last tag returned.
    /// This member is required.
    public var hasMoreTags: Swift.Bool?
    /// A list of tags associated with StreamName, starting with the first tag after ExclusiveStartTagKey and up to the specified Limit.
    /// This member is required.
    public var tags: [KinesisClientTypes.Tag]?

    public init(
        hasMoreTags: Swift.Bool? = nil,
        tags: [KinesisClientTypes.Tag]? = nil
    )
    {
        self.hasMoreTags = hasMoreTags
        self.tags = tags
    }
}

struct ListTagsForStreamOutputBody: Swift.Equatable {
    let tags: [KinesisClientTypes.Tag]?
    let hasMoreTags: Swift.Bool?
}

extension ListTagsForStreamOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hasMoreTags = "HasMoreTags"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KinesisClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KinesisClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let hasMoreTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasMoreTags)
        hasMoreTags = hasMoreTagsDecoded
    }
}

enum ListTagsForStreamOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension MergeShardsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjacentShardToMerge = "AdjacentShardToMerge"
        case shardToMerge = "ShardToMerge"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adjacentShardToMerge = self.adjacentShardToMerge {
            try encodeContainer.encode(adjacentShardToMerge, forKey: .adjacentShardToMerge)
        }
        if let shardToMerge = self.shardToMerge {
            try encodeContainer.encode(shardToMerge, forKey: .shardToMerge)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension MergeShardsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for MergeShards.
public struct MergeShardsInput: Swift.Equatable {
    /// The shard ID of the adjacent shard for the merge.
    /// This member is required.
    public var adjacentShardToMerge: Swift.String?
    /// The shard ID of the shard to combine with the adjacent shard for the merge.
    /// This member is required.
    public var shardToMerge: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream for the merge.
    public var streamName: Swift.String?

    public init(
        adjacentShardToMerge: Swift.String? = nil,
        shardToMerge: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.adjacentShardToMerge = adjacentShardToMerge
        self.shardToMerge = shardToMerge
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct MergeShardsInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let shardToMerge: Swift.String?
    let adjacentShardToMerge: Swift.String?
    let streamARN: Swift.String?
}

extension MergeShardsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjacentShardToMerge = "AdjacentShardToMerge"
        case shardToMerge = "ShardToMerge"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let shardToMergeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardToMerge)
        shardToMerge = shardToMergeDecoded
        let adjacentShardToMergeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adjacentShardToMerge)
        adjacentShardToMerge = adjacentShardToMergeDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension MergeShardsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct MergeShardsOutput: Swift.Equatable {

    public init() { }
}

enum MergeShardsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension KinesisClientTypes {
    public enum MetricsName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case incomingBytes
        case incomingRecords
        case iteratorAgeMilliseconds
        case outgoingBytes
        case outgoingRecords
        case readProvisionedThroughputExceeded
        case writeProvisionedThroughputExceeded
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricsName] {
            return [
                .all,
                .incomingBytes,
                .incomingRecords,
                .iteratorAgeMilliseconds,
                .outgoingBytes,
                .outgoingRecords,
                .readProvisionedThroughputExceeded,
                .writeProvisionedThroughputExceeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .incomingBytes: return "IncomingBytes"
            case .incomingRecords: return "IncomingRecords"
            case .iteratorAgeMilliseconds: return "IteratorAgeMilliseconds"
            case .outgoingBytes: return "OutgoingBytes"
            case .outgoingRecords: return "OutgoingRecords"
            case .readProvisionedThroughputExceeded: return "ReadProvisionedThroughputExceeded"
            case .writeProvisionedThroughputExceeded: return "WriteProvisionedThroughputExceeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricsName(rawValue: rawValue) ?? MetricsName.sdkUnknown(rawValue)
        }
    }
}

extension ProvisionedThroughputExceededException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ProvisionedThroughputExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request rate for the stream is too high, or the requested data is too large for the available throughput. Reduce the frequency or size of your requests. For more information, see [Streams Limits](https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html) in the Amazon Kinesis Data Streams Developer Guide, and [Error Retries and Exponential Backoff in Amazon Web Services](https://docs.aws.amazon.com/general/latest/gr/api-retries.html) in the Amazon Web Services General Reference.
public struct ProvisionedThroughputExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ProvisionedThroughputExceededException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ProvisionedThroughputExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ProvisionedThroughputExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PutRecordInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
        case explicitHashKey = "ExplicitHashKey"
        case partitionKey = "PartitionKey"
        case sequenceNumberForOrdering = "SequenceNumberForOrdering"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = self.data {
            try encodeContainer.encode(data.base64EncodedString(), forKey: .data)
        }
        if let explicitHashKey = self.explicitHashKey {
            try encodeContainer.encode(explicitHashKey, forKey: .explicitHashKey)
        }
        if let partitionKey = self.partitionKey {
            try encodeContainer.encode(partitionKey, forKey: .partitionKey)
        }
        if let sequenceNumberForOrdering = self.sequenceNumberForOrdering {
            try encodeContainer.encode(sequenceNumberForOrdering, forKey: .sequenceNumberForOrdering)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension PutRecordInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for PutRecord.
public struct PutRecordInput: Swift.Equatable {
    /// The data blob to put into the record, which is base64-encoded when the blob is serialized. When the data blob (the payload before base64-encoding) is added to the partition key size, the total size must not exceed the maximum record size (1 MiB).
    /// This member is required.
    public var data: ClientRuntime.Data?
    /// The hash value used to explicitly determine the shard the data record is assigned to by overriding the partition key hash.
    public var explicitHashKey: Swift.String?
    /// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
    /// This member is required.
    public var partitionKey: Swift.String?
    /// Guarantees strictly increasing sequence numbers, for puts from the same client and to the same partition key. Usage: set the SequenceNumberForOrdering of record n to the sequence number of record n-1 (as returned in the result when putting record n-1). If this parameter is not set, records are coarsely ordered based on arrival time.
    public var sequenceNumberForOrdering: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream to put the data record into.
    public var streamName: Swift.String?

    public init(
        data: ClientRuntime.Data? = nil,
        explicitHashKey: Swift.String? = nil,
        partitionKey: Swift.String? = nil,
        sequenceNumberForOrdering: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.data = data
        self.explicitHashKey = explicitHashKey
        self.partitionKey = partitionKey
        self.sequenceNumberForOrdering = sequenceNumberForOrdering
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct PutRecordInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let data: ClientRuntime.Data?
    let partitionKey: Swift.String?
    let explicitHashKey: Swift.String?
    let sequenceNumberForOrdering: Swift.String?
    let streamARN: Swift.String?
}

extension PutRecordInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
        case explicitHashKey = "ExplicitHashKey"
        case partitionKey = "PartitionKey"
        case sequenceNumberForOrdering = "SequenceNumberForOrdering"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let dataDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .data)
        data = dataDecoded
        let partitionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partitionKey)
        partitionKey = partitionKeyDecoded
        let explicitHashKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .explicitHashKey)
        explicitHashKey = explicitHashKeyDecoded
        let sequenceNumberForOrderingDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sequenceNumberForOrdering)
        sequenceNumberForOrdering = sequenceNumberForOrderingDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension PutRecordOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PutRecordOutputBody = try responseDecoder.decode(responseBody: data)
            self.encryptionType = output.encryptionType
            self.sequenceNumber = output.sequenceNumber
            self.shardId = output.shardId
        } else {
            self.encryptionType = nil
            self.sequenceNumber = nil
            self.shardId = nil
        }
    }
}

/// Represents the output for PutRecord.
public struct PutRecordOutput: Swift.Equatable {
    /// The encryption type to use on the record. This parameter can be one of the following values:
    ///
    /// * NONE: Do not encrypt the records in the stream.
    ///
    /// * KMS: Use server-side encryption on the records in the stream using a customer-managed Amazon Web Services KMS key.
    public var encryptionType: KinesisClientTypes.EncryptionType?
    /// The sequence number identifier that was assigned to the put data record. The sequence number for the record is unique across all records in the stream. A sequence number is the identifier associated with every record put into the stream.
    /// This member is required.
    public var sequenceNumber: Swift.String?
    /// The shard ID of the shard where the data record was placed.
    /// This member is required.
    public var shardId: Swift.String?

    public init(
        encryptionType: KinesisClientTypes.EncryptionType? = nil,
        sequenceNumber: Swift.String? = nil,
        shardId: Swift.String? = nil
    )
    {
        self.encryptionType = encryptionType
        self.sequenceNumber = sequenceNumber
        self.shardId = shardId
    }
}

struct PutRecordOutputBody: Swift.Equatable {
    let shardId: Swift.String?
    let sequenceNumber: Swift.String?
    let encryptionType: KinesisClientTypes.EncryptionType?
}

extension PutRecordOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionType = "EncryptionType"
        case sequenceNumber = "SequenceNumber"
        case shardId = "ShardId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardId)
        shardId = shardIdDecoded
        let sequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sequenceNumber)
        sequenceNumber = sequenceNumberDecoded
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.EncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
    }
}

enum PutRecordOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSAccessDeniedException": return try await KMSAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSDisabledException": return try await KMSDisabledException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSInvalidStateException": return try await KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSNotFoundException": return try await KMSNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSOptInRequired": return try await KMSOptInRequired(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSThrottlingException": return try await KMSThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ProvisionedThroughputExceededException": return try await ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PutRecordsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case records = "Records"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let records = records {
            var recordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .records)
            for putrecordsrequestentry0 in records {
                try recordsContainer.encode(putrecordsrequestentry0)
            }
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension PutRecordsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// A PutRecords request.
public struct PutRecordsInput: Swift.Equatable {
    /// The records associated with the request.
    /// This member is required.
    public var records: [KinesisClientTypes.PutRecordsRequestEntry]?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The stream name associated with the request.
    public var streamName: Swift.String?

    public init(
        records: [KinesisClientTypes.PutRecordsRequestEntry]? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.records = records
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct PutRecordsInputBody: Swift.Equatable {
    let records: [KinesisClientTypes.PutRecordsRequestEntry]?
    let streamName: Swift.String?
    let streamARN: Swift.String?
}

extension PutRecordsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case records = "Records"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.PutRecordsRequestEntry?].self, forKey: .records)
        var recordsDecoded0:[KinesisClientTypes.PutRecordsRequestEntry]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [KinesisClientTypes.PutRecordsRequestEntry]()
            for structure0 in recordsContainer {
                if let structure0 = structure0 {
                    recordsDecoded0?.append(structure0)
                }
            }
        }
        records = recordsDecoded0
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension PutRecordsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PutRecordsOutputBody = try responseDecoder.decode(responseBody: data)
            self.encryptionType = output.encryptionType
            self.failedRecordCount = output.failedRecordCount
            self.records = output.records
        } else {
            self.encryptionType = nil
            self.failedRecordCount = nil
            self.records = nil
        }
    }
}

/// PutRecords results.
public struct PutRecordsOutput: Swift.Equatable {
    /// The encryption type used on the records. This parameter can be one of the following values:
    ///
    /// * NONE: Do not encrypt the records.
    ///
    /// * KMS: Use server-side encryption on the records using a customer-managed Amazon Web Services KMS key.
    public var encryptionType: KinesisClientTypes.EncryptionType?
    /// The number of unsuccessfully processed records in a PutRecords request.
    public var failedRecordCount: Swift.Int?
    /// An array of successfully and unsuccessfully processed record results. A record that is successfully added to a stream includes SequenceNumber and ShardId in the result. A record that fails to be added to a stream includes ErrorCode and ErrorMessage in the result.
    /// This member is required.
    public var records: [KinesisClientTypes.PutRecordsResultEntry]?

    public init(
        encryptionType: KinesisClientTypes.EncryptionType? = nil,
        failedRecordCount: Swift.Int? = nil,
        records: [KinesisClientTypes.PutRecordsResultEntry]? = nil
    )
    {
        self.encryptionType = encryptionType
        self.failedRecordCount = failedRecordCount
        self.records = records
    }
}

struct PutRecordsOutputBody: Swift.Equatable {
    let failedRecordCount: Swift.Int?
    let records: [KinesisClientTypes.PutRecordsResultEntry]?
    let encryptionType: KinesisClientTypes.EncryptionType?
}

extension PutRecordsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionType = "EncryptionType"
        case failedRecordCount = "FailedRecordCount"
        case records = "Records"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedRecordCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedRecordCount)
        failedRecordCount = failedRecordCountDecoded
        let recordsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.PutRecordsResultEntry?].self, forKey: .records)
        var recordsDecoded0:[KinesisClientTypes.PutRecordsResultEntry]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [KinesisClientTypes.PutRecordsResultEntry]()
            for structure0 in recordsContainer {
                if let structure0 = structure0 {
                    recordsDecoded0?.append(structure0)
                }
            }
        }
        records = recordsDecoded0
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.EncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
    }
}

enum PutRecordsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSAccessDeniedException": return try await KMSAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSDisabledException": return try await KMSDisabledException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSInvalidStateException": return try await KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSNotFoundException": return try await KMSNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSOptInRequired": return try await KMSOptInRequired(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSThrottlingException": return try await KMSThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ProvisionedThroughputExceededException": return try await ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension KinesisClientTypes.PutRecordsRequestEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
        case explicitHashKey = "ExplicitHashKey"
        case partitionKey = "PartitionKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = self.data {
            try encodeContainer.encode(data.base64EncodedString(), forKey: .data)
        }
        if let explicitHashKey = self.explicitHashKey {
            try encodeContainer.encode(explicitHashKey, forKey: .explicitHashKey)
        }
        if let partitionKey = self.partitionKey {
            try encodeContainer.encode(partitionKey, forKey: .partitionKey)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .data)
        data = dataDecoded
        let explicitHashKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .explicitHashKey)
        explicitHashKey = explicitHashKeyDecoded
        let partitionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partitionKey)
        partitionKey = partitionKeyDecoded
    }
}

extension KinesisClientTypes {
    /// Represents the output for PutRecords.
    public struct PutRecordsRequestEntry: Swift.Equatable {
        /// The data blob to put into the record, which is base64-encoded when the blob is serialized. When the data blob (the payload before base64-encoding) is added to the partition key size, the total size must not exceed the maximum record size (1 MiB).
        /// This member is required.
        public var data: ClientRuntime.Data?
        /// The hash value used to determine explicitly the shard that the data record is assigned to by overriding the partition key hash.
        public var explicitHashKey: Swift.String?
        /// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
        /// This member is required.
        public var partitionKey: Swift.String?

        public init(
            data: ClientRuntime.Data? = nil,
            explicitHashKey: Swift.String? = nil,
            partitionKey: Swift.String? = nil
        )
        {
            self.data = data
            self.explicitHashKey = explicitHashKey
            self.partitionKey = partitionKey
        }
    }

}

extension KinesisClientTypes.PutRecordsResultEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case sequenceNumber = "SequenceNumber"
        case shardId = "ShardId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let sequenceNumber = self.sequenceNumber {
            try encodeContainer.encode(sequenceNumber, forKey: .sequenceNumber)
        }
        if let shardId = self.shardId {
            try encodeContainer.encode(shardId, forKey: .shardId)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sequenceNumber)
        sequenceNumber = sequenceNumberDecoded
        let shardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardId)
        shardId = shardIdDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension KinesisClientTypes {
    /// Represents the result of an individual record from a PutRecords request. A record that is successfully added to a stream includes SequenceNumber and ShardId in the result. A record that fails to be added to the stream includes ErrorCode and ErrorMessage in the result.
    public struct PutRecordsResultEntry: Swift.Equatable {
        /// The error code for an individual record result. ErrorCodes can be either ProvisionedThroughputExceededException or InternalFailure.
        public var errorCode: Swift.String?
        /// The error message for an individual record result. An ErrorCode value of ProvisionedThroughputExceededException has an error message that includes the account ID, stream name, and shard ID. An ErrorCode value of InternalFailure has the error message "Internal Service Failure".
        public var errorMessage: Swift.String?
        /// The sequence number for an individual record result.
        public var sequenceNumber: Swift.String?
        /// The shard ID for an individual record result.
        public var shardId: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            sequenceNumber: Swift.String? = nil,
            shardId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.sequenceNumber = sequenceNumber
            self.shardId = shardId
        }
    }

}

extension PutResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceARN = "ResourceARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policy = self.policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
    }
}

extension PutResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutResourcePolicyInput: Swift.Equatable {
    /// Details of the resource policy. It must include the identity of the principal and the actions allowed on this resource. This is formatted as a JSON string.
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the data stream or consumer.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        policy: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceARN = resourceARN
    }
}

struct PutResourcePolicyInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let policy: Swift.String?
}

extension PutResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceARN = "ResourceARN"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension PutResourcePolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutResourcePolicyOutput: Swift.Equatable {

    public init() { }
}

enum PutResourcePolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension KinesisClientTypes.Record: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approximateArrivalTimestamp = "ApproximateArrivalTimestamp"
        case data = "Data"
        case encryptionType = "EncryptionType"
        case partitionKey = "PartitionKey"
        case sequenceNumber = "SequenceNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approximateArrivalTimestamp = self.approximateArrivalTimestamp {
            try encodeContainer.encodeTimestamp(approximateArrivalTimestamp, format: .epochSeconds, forKey: .approximateArrivalTimestamp)
        }
        if let data = self.data {
            try encodeContainer.encode(data.base64EncodedString(), forKey: .data)
        }
        if let encryptionType = self.encryptionType {
            try encodeContainer.encode(encryptionType.rawValue, forKey: .encryptionType)
        }
        if let partitionKey = self.partitionKey {
            try encodeContainer.encode(partitionKey, forKey: .partitionKey)
        }
        if let sequenceNumber = self.sequenceNumber {
            try encodeContainer.encode(sequenceNumber, forKey: .sequenceNumber)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sequenceNumber)
        sequenceNumber = sequenceNumberDecoded
        let approximateArrivalTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .approximateArrivalTimestamp)
        approximateArrivalTimestamp = approximateArrivalTimestampDecoded
        let dataDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .data)
        data = dataDecoded
        let partitionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partitionKey)
        partitionKey = partitionKeyDecoded
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.EncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
    }
}

extension KinesisClientTypes {
    /// The unit of data of the Kinesis data stream, which is composed of a sequence number, a partition key, and a data blob.
    public struct Record: Swift.Equatable {
        /// The approximate time that the record was inserted into the stream.
        public var approximateArrivalTimestamp: ClientRuntime.Date?
        /// The data blob. The data in the blob is both opaque and immutable to Kinesis Data Streams, which does not inspect, interpret, or change the data in the blob in any way. When the data blob (the payload before base64-encoding) is added to the partition key size, the total size must not exceed the maximum record size (1 MiB).
        /// This member is required.
        public var data: ClientRuntime.Data?
        /// The encryption type used on the record. This parameter can be one of the following values:
        ///
        /// * NONE: Do not encrypt the records in the stream.
        ///
        /// * KMS: Use server-side encryption on the records in the stream using a customer-managed Amazon Web Services KMS key.
        public var encryptionType: KinesisClientTypes.EncryptionType?
        /// Identifies which shard in the stream the data record is assigned to.
        /// This member is required.
        public var partitionKey: Swift.String?
        /// The unique identifier of the record within its shard.
        /// This member is required.
        public var sequenceNumber: Swift.String?

        public init(
            approximateArrivalTimestamp: ClientRuntime.Date? = nil,
            data: ClientRuntime.Data? = nil,
            encryptionType: KinesisClientTypes.EncryptionType? = nil,
            partitionKey: Swift.String? = nil,
            sequenceNumber: Swift.String? = nil
        )
        {
            self.approximateArrivalTimestamp = approximateArrivalTimestamp
            self.data = data
            self.encryptionType = encryptionType
            self.partitionKey = partitionKey
            self.sequenceNumber = sequenceNumber
        }
    }

}

extension RegisterStreamConsumerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerName = "ConsumerName"
        case streamARN = "StreamARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consumerName = self.consumerName {
            try encodeContainer.encode(consumerName, forKey: .consumerName)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
    }
}

extension RegisterStreamConsumerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RegisterStreamConsumerInput: Swift.Equatable {
    /// For a given Kinesis data stream, each consumer must have a unique name. However, consumer names don't have to be unique across data streams.
    /// This member is required.
    public var consumerName: Swift.String?
    /// The ARN of the Kinesis data stream that you want to register the consumer with. For more info, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams).
    /// This member is required.
    public var streamARN: Swift.String?

    public init(
        consumerName: Swift.String? = nil,
        streamARN: Swift.String? = nil
    )
    {
        self.consumerName = consumerName
        self.streamARN = streamARN
    }
}

struct RegisterStreamConsumerInputBody: Swift.Equatable {
    let streamARN: Swift.String?
    let consumerName: Swift.String?
}

extension RegisterStreamConsumerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerName = "ConsumerName"
        case streamARN = "StreamARN"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let consumerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerName)
        consumerName = consumerNameDecoded
    }
}

extension RegisterStreamConsumerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: RegisterStreamConsumerOutputBody = try responseDecoder.decode(responseBody: data)
            self.consumer = output.consumer
        } else {
            self.consumer = nil
        }
    }
}

public struct RegisterStreamConsumerOutput: Swift.Equatable {
    /// An object that represents the details of the consumer you registered. When you register a consumer, it gets an ARN that is generated by Kinesis Data Streams.
    /// This member is required.
    public var consumer: KinesisClientTypes.Consumer?

    public init(
        consumer: KinesisClientTypes.Consumer? = nil
    )
    {
        self.consumer = consumer
    }
}

struct RegisterStreamConsumerOutputBody: Swift.Equatable {
    let consumer: KinesisClientTypes.Consumer?
}

extension RegisterStreamConsumerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumer = "Consumer"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumerDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.Consumer.self, forKey: .consumer)
        consumer = consumerDecoded
    }
}

enum RegisterStreamConsumerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension RemoveTagsFromStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamARN = "StreamARN"
        case streamName = "StreamName"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension RemoveTagsFromStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for RemoveTagsFromStream.
public struct RemoveTagsFromStreamInput: Swift.Equatable {
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream.
    public var streamName: Swift.String?
    /// A list of tag keys. Each corresponding tag is removed from the stream.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.streamARN = streamARN
        self.streamName = streamName
        self.tagKeys = tagKeys
    }
}

struct RemoveTagsFromStreamInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let tagKeys: [Swift.String]?
    let streamARN: Swift.String?
}

extension RemoveTagsFromStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamARN = "StreamARN"
        case streamName = "StreamName"
        case tagKeys = "TagKeys"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension RemoveTagsFromStreamOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct RemoveTagsFromStreamOutput: Swift.Equatable {

    public init() { }
}

enum RemoveTagsFromStreamOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ResourceInUseException: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.properties.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        properties.message = messageDecoded
    }
}

extension ResourceInUseException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The resource is not available for this operation. For successful operation, the resource must be in the ACTIVE state.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUseException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ResourceInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.properties.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        properties.message = messageDecoded
    }
}

extension ResourceNotFoundException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The requested resource could not be found. The stream might not be specified correctly.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KinesisClientTypes {
    public enum ScalingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case uniformScaling
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingType] {
            return [
                .uniformScaling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .uniformScaling: return "UNIFORM_SCALING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalingType(rawValue: rawValue) ?? ScalingType.sdkUnknown(rawValue)
        }
    }
}

extension KinesisClientTypes.SequenceNumberRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endingSequenceNumber = "EndingSequenceNumber"
        case startingSequenceNumber = "StartingSequenceNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endingSequenceNumber = self.endingSequenceNumber {
            try encodeContainer.encode(endingSequenceNumber, forKey: .endingSequenceNumber)
        }
        if let startingSequenceNumber = self.startingSequenceNumber {
            try encodeContainer.encode(startingSequenceNumber, forKey: .startingSequenceNumber)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startingSequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startingSequenceNumber)
        startingSequenceNumber = startingSequenceNumberDecoded
        let endingSequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endingSequenceNumber)
        endingSequenceNumber = endingSequenceNumberDecoded
    }
}

extension KinesisClientTypes {
    /// The range of possible sequence numbers for the shard.
    public struct SequenceNumberRange: Swift.Equatable {
        /// The ending sequence number for the range. Shards that are in the OPEN state have an ending sequence number of null.
        public var endingSequenceNumber: Swift.String?
        /// The starting sequence number for the range.
        /// This member is required.
        public var startingSequenceNumber: Swift.String?

        public init(
            endingSequenceNumber: Swift.String? = nil,
            startingSequenceNumber: Swift.String? = nil
        )
        {
            self.endingSequenceNumber = endingSequenceNumber
            self.startingSequenceNumber = startingSequenceNumber
        }
    }

}

extension KinesisClientTypes.Shard: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjacentParentShardId = "AdjacentParentShardId"
        case hashKeyRange = "HashKeyRange"
        case parentShardId = "ParentShardId"
        case sequenceNumberRange = "SequenceNumberRange"
        case shardId = "ShardId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adjacentParentShardId = self.adjacentParentShardId {
            try encodeContainer.encode(adjacentParentShardId, forKey: .adjacentParentShardId)
        }
        if let hashKeyRange = self.hashKeyRange {
            try encodeContainer.encode(hashKeyRange, forKey: .hashKeyRange)
        }
        if let parentShardId = self.parentShardId {
            try encodeContainer.encode(parentShardId, forKey: .parentShardId)
        }
        if let sequenceNumberRange = self.sequenceNumberRange {
            try encodeContainer.encode(sequenceNumberRange, forKey: .sequenceNumberRange)
        }
        if let shardId = self.shardId {
            try encodeContainer.encode(shardId, forKey: .shardId)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardId)
        shardId = shardIdDecoded
        let parentShardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentShardId)
        parentShardId = parentShardIdDecoded
        let adjacentParentShardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adjacentParentShardId)
        adjacentParentShardId = adjacentParentShardIdDecoded
        let hashKeyRangeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.HashKeyRange.self, forKey: .hashKeyRange)
        hashKeyRange = hashKeyRangeDecoded
        let sequenceNumberRangeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.SequenceNumberRange.self, forKey: .sequenceNumberRange)
        sequenceNumberRange = sequenceNumberRangeDecoded
    }
}

extension KinesisClientTypes {
    /// A uniquely identified group of data records in a Kinesis data stream.
    public struct Shard: Swift.Equatable {
        /// The shard ID of the shard adjacent to the shard's parent.
        public var adjacentParentShardId: Swift.String?
        /// The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.
        /// This member is required.
        public var hashKeyRange: KinesisClientTypes.HashKeyRange?
        /// The shard ID of the shard's parent.
        public var parentShardId: Swift.String?
        /// The range of possible sequence numbers for the shard.
        /// This member is required.
        public var sequenceNumberRange: KinesisClientTypes.SequenceNumberRange?
        /// The unique identifier of the shard within the stream.
        /// This member is required.
        public var shardId: Swift.String?

        public init(
            adjacentParentShardId: Swift.String? = nil,
            hashKeyRange: KinesisClientTypes.HashKeyRange? = nil,
            parentShardId: Swift.String? = nil,
            sequenceNumberRange: KinesisClientTypes.SequenceNumberRange? = nil,
            shardId: Swift.String? = nil
        )
        {
            self.adjacentParentShardId = adjacentParentShardId
            self.hashKeyRange = hashKeyRange
            self.parentShardId = parentShardId
            self.sequenceNumberRange = sequenceNumberRange
            self.shardId = shardId
        }
    }

}

extension KinesisClientTypes.ShardFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shardId = "ShardId"
        case timestamp = "Timestamp"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let shardId = self.shardId {
            try encodeContainer.encode(shardId, forKey: .shardId)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encodeTimestamp(timestamp, format: .epochSeconds, forKey: .timestamp)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.ShardFilterType.self, forKey: .type)
        type = typeDecoded
        let shardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardId)
        shardId = shardIdDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}

extension KinesisClientTypes {
    /// The request parameter used to filter out the response of the ListShards API.
    public struct ShardFilter: Swift.Equatable {
        /// The exclusive start shardID speified in the ShardFilter parameter. This property can only be used if the AFTER_SHARD_ID shard type is specified.
        public var shardId: Swift.String?
        /// The timestamps specified in the ShardFilter parameter. A timestamp is a Unix epoch date with precision in milliseconds. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480. This property can only be used if FROM_TIMESTAMP or AT_TIMESTAMP shard types are specified.
        public var timestamp: ClientRuntime.Date?
        /// The shard type specified in the ShardFilter parameter. This is a required property of the ShardFilter parameter. You can specify the following valid values:
        ///
        /// * AFTER_SHARD_ID - the response includes all the shards, starting with the shard whose ID immediately follows the ShardId that you provided.
        ///
        /// * AT_TRIM_HORIZON - the response includes all the shards that were open at TRIM_HORIZON.
        ///
        /// * FROM_TRIM_HORIZON - (default), the response includes all the shards within the retention period of the data stream (trim to tip).
        ///
        /// * AT_LATEST - the response includes only the currently open shards of the data stream.
        ///
        /// * AT_TIMESTAMP - the response includes all shards whose start timestamp is less than or equal to the given timestamp and end timestamp is greater than or equal to the given timestamp or still open.
        ///
        /// * FROM_TIMESTAMP - the response incldues all closed shards whose end timestamp is greater than or equal to the given timestamp and also all open shards. Corrected to TRIM_HORIZON of the data stream if FROM_TIMESTAMP is less than the TRIM_HORIZON value.
        /// This member is required.
        public var type: KinesisClientTypes.ShardFilterType?

        public init(
            shardId: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil,
            type: KinesisClientTypes.ShardFilterType? = nil
        )
        {
            self.shardId = shardId
            self.timestamp = timestamp
            self.type = type
        }
    }

}

extension KinesisClientTypes {
    public enum ShardFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case afterShardId
        case atLatest
        case atTimestamp
        case atTrimHorizon
        case fromTimestamp
        case fromTrimHorizon
        case sdkUnknown(Swift.String)

        public static var allCases: [ShardFilterType] {
            return [
                .afterShardId,
                .atLatest,
                .atTimestamp,
                .atTrimHorizon,
                .fromTimestamp,
                .fromTrimHorizon,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .afterShardId: return "AFTER_SHARD_ID"
            case .atLatest: return "AT_LATEST"
            case .atTimestamp: return "AT_TIMESTAMP"
            case .atTrimHorizon: return "AT_TRIM_HORIZON"
            case .fromTimestamp: return "FROM_TIMESTAMP"
            case .fromTrimHorizon: return "FROM_TRIM_HORIZON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ShardFilterType(rawValue: rawValue) ?? ShardFilterType.sdkUnknown(rawValue)
        }
    }
}

extension KinesisClientTypes {
    public enum ShardIteratorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case afterSequenceNumber
        case atSequenceNumber
        case atTimestamp
        case latest
        case trimHorizon
        case sdkUnknown(Swift.String)

        public static var allCases: [ShardIteratorType] {
            return [
                .afterSequenceNumber,
                .atSequenceNumber,
                .atTimestamp,
                .latest,
                .trimHorizon,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .afterSequenceNumber: return "AFTER_SEQUENCE_NUMBER"
            case .atSequenceNumber: return "AT_SEQUENCE_NUMBER"
            case .atTimestamp: return "AT_TIMESTAMP"
            case .latest: return "LATEST"
            case .trimHorizon: return "TRIM_HORIZON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ShardIteratorType(rawValue: rawValue) ?? ShardIteratorType.sdkUnknown(rawValue)
        }
    }
}

extension SplitShardInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case newStartingHashKey = "NewStartingHashKey"
        case shardToSplit = "ShardToSplit"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let newStartingHashKey = self.newStartingHashKey {
            try encodeContainer.encode(newStartingHashKey, forKey: .newStartingHashKey)
        }
        if let shardToSplit = self.shardToSplit {
            try encodeContainer.encode(shardToSplit, forKey: .shardToSplit)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension SplitShardInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for SplitShard.
public struct SplitShardInput: Swift.Equatable {
    /// A hash key value for the starting hash key of one of the child shards created by the split. The hash key range for a given shard constitutes a set of ordered contiguous positive integers. The value for NewStartingHashKey must be in the range of hash keys being mapped into the shard. The NewStartingHashKey hash key value and all higher hash key values in hash key range are distributed to one of the child shards. All the lower hash key values in the range are distributed to the other child shard.
    /// This member is required.
    public var newStartingHashKey: Swift.String?
    /// The shard ID of the shard to split.
    /// This member is required.
    public var shardToSplit: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream for the shard split.
    public var streamName: Swift.String?

    public init(
        newStartingHashKey: Swift.String? = nil,
        shardToSplit: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.newStartingHashKey = newStartingHashKey
        self.shardToSplit = shardToSplit
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct SplitShardInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let shardToSplit: Swift.String?
    let newStartingHashKey: Swift.String?
    let streamARN: Swift.String?
}

extension SplitShardInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case newStartingHashKey = "NewStartingHashKey"
        case shardToSplit = "ShardToSplit"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let shardToSplitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardToSplit)
        shardToSplit = shardToSplitDecoded
        let newStartingHashKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newStartingHashKey)
        newStartingHashKey = newStartingHashKeyDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension SplitShardOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct SplitShardOutput: Swift.Equatable {

    public init() { }
}

enum SplitShardOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension StartStreamEncryptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionType = "EncryptionType"
        case keyId = "KeyId"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionType = self.encryptionType {
            try encodeContainer.encode(encryptionType.rawValue, forKey: .encryptionType)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension StartStreamEncryptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartStreamEncryptionInput: Swift.Equatable {
    /// The encryption type to use. The only valid value is KMS.
    /// This member is required.
    public var encryptionType: KinesisClientTypes.EncryptionType?
    /// The GUID for the customer-managed Amazon Web Services KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
    ///
    /// * Key ARN example: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012
    ///
    /// * Alias ARN example: arn:aws:kms:us-east-1:123456789012:alias/MyAliasName
    ///
    /// * Globally unique key ID example: 12345678-1234-1234-1234-123456789012
    ///
    /// * Alias name example: alias/MyAliasName
    ///
    /// * Master key owned by Kinesis Data Streams: alias/aws/kinesis
    /// This member is required.
    public var keyId: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream for which to start encrypting records.
    public var streamName: Swift.String?

    public init(
        encryptionType: KinesisClientTypes.EncryptionType? = nil,
        keyId: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.encryptionType = encryptionType
        self.keyId = keyId
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct StartStreamEncryptionInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let encryptionType: KinesisClientTypes.EncryptionType?
    let keyId: Swift.String?
    let streamARN: Swift.String?
}

extension StartStreamEncryptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionType = "EncryptionType"
        case keyId = "KeyId"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.EncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension StartStreamEncryptionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct StartStreamEncryptionOutput: Swift.Equatable {

    public init() { }
}

enum StartStreamEncryptionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSAccessDeniedException": return try await KMSAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSDisabledException": return try await KMSDisabledException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSInvalidStateException": return try await KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSNotFoundException": return try await KMSNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSOptInRequired": return try await KMSOptInRequired(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "KMSThrottlingException": return try await KMSThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension KinesisClientTypes.StartingPosition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sequenceNumber = "SequenceNumber"
        case timestamp = "Timestamp"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sequenceNumber = self.sequenceNumber {
            try encodeContainer.encode(sequenceNumber, forKey: .sequenceNumber)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encodeTimestamp(timestamp, format: .epochSeconds, forKey: .timestamp)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.ShardIteratorType.self, forKey: .type)
        type = typeDecoded
        let sequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sequenceNumber)
        sequenceNumber = sequenceNumberDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}

extension KinesisClientTypes {
    /// The starting position in the data stream from which to start streaming.
    public struct StartingPosition: Swift.Equatable {
        /// The sequence number of the data record in the shard from which to start streaming. To specify a sequence number, set StartingPosition to AT_SEQUENCE_NUMBER or AFTER_SEQUENCE_NUMBER.
        public var sequenceNumber: Swift.String?
        /// The time stamp of the data record from which to start reading. To specify a time stamp, set StartingPosition to Type AT_TIMESTAMP. A time stamp is the Unix epoch date with precision in milliseconds. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480. If a record with this exact time stamp does not exist, records will be streamed from the next (later) record. If the time stamp is older than the current trim horizon, records will be streamed from the oldest untrimmed data record (TRIM_HORIZON).
        public var timestamp: ClientRuntime.Date?
        /// You can set the starting position to one of the following values: AT_SEQUENCE_NUMBER: Start streaming from the position denoted by the sequence number specified in the SequenceNumber field. AFTER_SEQUENCE_NUMBER: Start streaming right after the position denoted by the sequence number specified in the SequenceNumber field. AT_TIMESTAMP: Start streaming from the position denoted by the time stamp specified in the Timestamp field. TRIM_HORIZON: Start streaming at the last untrimmed record in the shard, which is the oldest data record in the shard. LATEST: Start streaming just after the most recent record in the shard, so that you always read the most recent data in the shard.
        /// This member is required.
        public var type: KinesisClientTypes.ShardIteratorType?

        public init(
            sequenceNumber: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil,
            type: KinesisClientTypes.ShardIteratorType? = nil
        )
        {
            self.sequenceNumber = sequenceNumber
            self.timestamp = timestamp
            self.type = type
        }
    }

}

extension StopStreamEncryptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionType = "EncryptionType"
        case keyId = "KeyId"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionType = self.encryptionType {
            try encodeContainer.encode(encryptionType.rawValue, forKey: .encryptionType)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}

extension StopStreamEncryptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopStreamEncryptionInput: Swift.Equatable {
    /// The encryption type. The only valid value is KMS.
    /// This member is required.
    public var encryptionType: KinesisClientTypes.EncryptionType?
    /// The GUID for the customer-managed Amazon Web Services KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
    ///
    /// * Key ARN example: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012
    ///
    /// * Alias ARN example: arn:aws:kms:us-east-1:123456789012:alias/MyAliasName
    ///
    /// * Globally unique key ID example: 12345678-1234-1234-1234-123456789012
    ///
    /// * Alias name example: alias/MyAliasName
    ///
    /// * Master key owned by Kinesis Data Streams: alias/aws/kinesis
    /// This member is required.
    public var keyId: Swift.String?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream on which to stop encrypting records.
    public var streamName: Swift.String?

    public init(
        encryptionType: KinesisClientTypes.EncryptionType? = nil,
        keyId: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.encryptionType = encryptionType
        self.keyId = keyId
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

struct StopStreamEncryptionInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let encryptionType: KinesisClientTypes.EncryptionType?
    let keyId: Swift.String?
    let streamARN: Swift.String?
}

extension StopStreamEncryptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionType = "EncryptionType"
        case keyId = "KeyId"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.EncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension StopStreamEncryptionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct StopStreamEncryptionOutput: Swift.Equatable {

    public init() { }
}

enum StopStreamEncryptionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension KinesisClientTypes.StreamDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionType = "EncryptionType"
        case enhancedMonitoring = "EnhancedMonitoring"
        case hasMoreShards = "HasMoreShards"
        case keyId = "KeyId"
        case retentionPeriodHours = "RetentionPeriodHours"
        case shards = "Shards"
        case streamARN = "StreamARN"
        case streamCreationTimestamp = "StreamCreationTimestamp"
        case streamModeDetails = "StreamModeDetails"
        case streamName = "StreamName"
        case streamStatus = "StreamStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionType = self.encryptionType {
            try encodeContainer.encode(encryptionType.rawValue, forKey: .encryptionType)
        }
        if let enhancedMonitoring = enhancedMonitoring {
            var enhancedMonitoringContainer = encodeContainer.nestedUnkeyedContainer(forKey: .enhancedMonitoring)
            for enhancedmetrics0 in enhancedMonitoring {
                try enhancedMonitoringContainer.encode(enhancedmetrics0)
            }
        }
        if let hasMoreShards = self.hasMoreShards {
            try encodeContainer.encode(hasMoreShards, forKey: .hasMoreShards)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let retentionPeriodHours = self.retentionPeriodHours {
            try encodeContainer.encode(retentionPeriodHours, forKey: .retentionPeriodHours)
        }
        if let shards = shards {
            var shardsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .shards)
            for shard0 in shards {
                try shardsContainer.encode(shard0)
            }
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamCreationTimestamp = self.streamCreationTimestamp {
            try encodeContainer.encodeTimestamp(streamCreationTimestamp, format: .epochSeconds, forKey: .streamCreationTimestamp)
        }
        if let streamModeDetails = self.streamModeDetails {
            try encodeContainer.encode(streamModeDetails, forKey: .streamModeDetails)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
        if let streamStatus = self.streamStatus {
            try encodeContainer.encode(streamStatus.rawValue, forKey: .streamStatus)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let streamStatusDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StreamStatus.self, forKey: .streamStatus)
        streamStatus = streamStatusDecoded
        let streamModeDetailsDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StreamModeDetails.self, forKey: .streamModeDetails)
        streamModeDetails = streamModeDetailsDecoded
        let shardsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.Shard?].self, forKey: .shards)
        var shardsDecoded0:[KinesisClientTypes.Shard]? = nil
        if let shardsContainer = shardsContainer {
            shardsDecoded0 = [KinesisClientTypes.Shard]()
            for structure0 in shardsContainer {
                if let structure0 = structure0 {
                    shardsDecoded0?.append(structure0)
                }
            }
        }
        shards = shardsDecoded0
        let hasMoreShardsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasMoreShards)
        hasMoreShards = hasMoreShardsDecoded
        let retentionPeriodHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionPeriodHours)
        retentionPeriodHours = retentionPeriodHoursDecoded
        let streamCreationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .streamCreationTimestamp)
        streamCreationTimestamp = streamCreationTimestampDecoded
        let enhancedMonitoringContainer = try containerValues.decodeIfPresent([KinesisClientTypes.EnhancedMetrics?].self, forKey: .enhancedMonitoring)
        var enhancedMonitoringDecoded0:[KinesisClientTypes.EnhancedMetrics]? = nil
        if let enhancedMonitoringContainer = enhancedMonitoringContainer {
            enhancedMonitoringDecoded0 = [KinesisClientTypes.EnhancedMetrics]()
            for structure0 in enhancedMonitoringContainer {
                if let structure0 = structure0 {
                    enhancedMonitoringDecoded0?.append(structure0)
                }
            }
        }
        enhancedMonitoring = enhancedMonitoringDecoded0
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.EncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension KinesisClientTypes {
    /// Represents the output for [DescribeStream].
    public struct StreamDescription: Swift.Equatable {
        /// The server-side encryption type used on the stream. This parameter can be one of the following values:
        ///
        /// * NONE: Do not encrypt the records in the stream.
        ///
        /// * KMS: Use server-side encryption on the records in the stream using a customer-managed Amazon Web Services KMS key.
        public var encryptionType: KinesisClientTypes.EncryptionType?
        /// Represents the current enhanced monitoring settings of the stream.
        /// This member is required.
        public var enhancedMonitoring: [KinesisClientTypes.EnhancedMetrics]?
        /// If set to true, more shards in the stream are available to describe.
        /// This member is required.
        public var hasMoreShards: Swift.Bool?
        /// The GUID for the customer-managed Amazon Web Services KMS key to use for encryption. This value can be a globally unique identifier, a fully specified ARN to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
        ///
        /// * Key ARN example: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012
        ///
        /// * Alias ARN example: arn:aws:kms:us-east-1:123456789012:alias/MyAliasName
        ///
        /// * Globally unique key ID example: 12345678-1234-1234-1234-123456789012
        ///
        /// * Alias name example: alias/MyAliasName
        ///
        /// * Master key owned by Kinesis Data Streams: alias/aws/kinesis
        public var keyId: Swift.String?
        /// The current retention period, in hours. Minimum value of 24. Maximum value of 168.
        /// This member is required.
        public var retentionPeriodHours: Swift.Int?
        /// The shards that comprise the stream.
        /// This member is required.
        public var shards: [KinesisClientTypes.Shard]?
        /// The Amazon Resource Name (ARN) for the stream being described.
        /// This member is required.
        public var streamARN: Swift.String?
        /// The approximate time that the stream was created.
        /// This member is required.
        public var streamCreationTimestamp: ClientRuntime.Date?
        /// Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand capacity mode and a provisioned capacity mode for your data streams.
        public var streamModeDetails: KinesisClientTypes.StreamModeDetails?
        /// The name of the stream being described.
        /// This member is required.
        public var streamName: Swift.String?
        /// The current status of the stream being described. The stream status is one of the following states:
        ///
        /// * CREATING - The stream is being created. Kinesis Data Streams immediately returns and sets StreamStatus to CREATING.
        ///
        /// * DELETING - The stream is being deleted. The specified stream is in the DELETING state until Kinesis Data Streams completes the deletion.
        ///
        /// * ACTIVE - The stream exists and is ready for read and write operations or deletion. You should perform read and write operations only on an ACTIVE stream.
        ///
        /// * UPDATING - Shards in the stream are being merged or split. Read and write operations continue to work while the stream is in the UPDATING state.
        /// This member is required.
        public var streamStatus: KinesisClientTypes.StreamStatus?

        public init(
            encryptionType: KinesisClientTypes.EncryptionType? = nil,
            enhancedMonitoring: [KinesisClientTypes.EnhancedMetrics]? = nil,
            hasMoreShards: Swift.Bool? = nil,
            keyId: Swift.String? = nil,
            retentionPeriodHours: Swift.Int? = nil,
            shards: [KinesisClientTypes.Shard]? = nil,
            streamARN: Swift.String? = nil,
            streamCreationTimestamp: ClientRuntime.Date? = nil,
            streamModeDetails: KinesisClientTypes.StreamModeDetails? = nil,
            streamName: Swift.String? = nil,
            streamStatus: KinesisClientTypes.StreamStatus? = nil
        )
        {
            self.encryptionType = encryptionType
            self.enhancedMonitoring = enhancedMonitoring
            self.hasMoreShards = hasMoreShards
            self.keyId = keyId
            self.retentionPeriodHours = retentionPeriodHours
            self.shards = shards
            self.streamARN = streamARN
            self.streamCreationTimestamp = streamCreationTimestamp
            self.streamModeDetails = streamModeDetails
            self.streamName = streamName
            self.streamStatus = streamStatus
        }
    }

}

extension KinesisClientTypes.StreamDescriptionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerCount = "ConsumerCount"
        case encryptionType = "EncryptionType"
        case enhancedMonitoring = "EnhancedMonitoring"
        case keyId = "KeyId"
        case openShardCount = "OpenShardCount"
        case retentionPeriodHours = "RetentionPeriodHours"
        case streamARN = "StreamARN"
        case streamCreationTimestamp = "StreamCreationTimestamp"
        case streamModeDetails = "StreamModeDetails"
        case streamName = "StreamName"
        case streamStatus = "StreamStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consumerCount = self.consumerCount {
            try encodeContainer.encode(consumerCount, forKey: .consumerCount)
        }
        if let encryptionType = self.encryptionType {
            try encodeContainer.encode(encryptionType.rawValue, forKey: .encryptionType)
        }
        if let enhancedMonitoring = enhancedMonitoring {
            var enhancedMonitoringContainer = encodeContainer.nestedUnkeyedContainer(forKey: .enhancedMonitoring)
            for enhancedmetrics0 in enhancedMonitoring {
                try enhancedMonitoringContainer.encode(enhancedmetrics0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let openShardCount = self.openShardCount {
            try encodeContainer.encode(openShardCount, forKey: .openShardCount)
        }
        if let retentionPeriodHours = self.retentionPeriodHours {
            try encodeContainer.encode(retentionPeriodHours, forKey: .retentionPeriodHours)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamCreationTimestamp = self.streamCreationTimestamp {
            try encodeContainer.encodeTimestamp(streamCreationTimestamp, format: .epochSeconds, forKey: .streamCreationTimestamp)
        }
        if let streamModeDetails = self.streamModeDetails {
            try encodeContainer.encode(streamModeDetails, forKey: .streamModeDetails)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
        if let streamStatus = self.streamStatus {
            try encodeContainer.encode(streamStatus.rawValue, forKey: .streamStatus)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let streamStatusDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StreamStatus.self, forKey: .streamStatus)
        streamStatus = streamStatusDecoded
        let streamModeDetailsDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StreamModeDetails.self, forKey: .streamModeDetails)
        streamModeDetails = streamModeDetailsDecoded
        let retentionPeriodHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionPeriodHours)
        retentionPeriodHours = retentionPeriodHoursDecoded
        let streamCreationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .streamCreationTimestamp)
        streamCreationTimestamp = streamCreationTimestampDecoded
        let enhancedMonitoringContainer = try containerValues.decodeIfPresent([KinesisClientTypes.EnhancedMetrics?].self, forKey: .enhancedMonitoring)
        var enhancedMonitoringDecoded0:[KinesisClientTypes.EnhancedMetrics]? = nil
        if let enhancedMonitoringContainer = enhancedMonitoringContainer {
            enhancedMonitoringDecoded0 = [KinesisClientTypes.EnhancedMetrics]()
            for structure0 in enhancedMonitoringContainer {
                if let structure0 = structure0 {
                    enhancedMonitoringDecoded0?.append(structure0)
                }
            }
        }
        enhancedMonitoring = enhancedMonitoringDecoded0
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.EncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let openShardCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .openShardCount)
        openShardCount = openShardCountDecoded
        let consumerCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .consumerCount)
        consumerCount = consumerCountDecoded
    }
}

extension KinesisClientTypes {
    /// Represents the output for [DescribeStreamSummary]
    public struct StreamDescriptionSummary: Swift.Equatable {
        /// The number of enhanced fan-out consumers registered with the stream.
        public var consumerCount: Swift.Int?
        /// The encryption type used. This value is one of the following:
        ///
        /// * KMS
        ///
        /// * NONE
        public var encryptionType: KinesisClientTypes.EncryptionType?
        /// Represents the current enhanced monitoring settings of the stream.
        /// This member is required.
        public var enhancedMonitoring: [KinesisClientTypes.EnhancedMetrics]?
        /// The GUID for the customer-managed Amazon Web Services KMS key to use for encryption. This value can be a globally unique identifier, a fully specified ARN to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
        ///
        /// * Key ARN example: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012
        ///
        /// * Alias ARN example:  arn:aws:kms:us-east-1:123456789012:alias/MyAliasName
        ///
        /// * Globally unique key ID example: 12345678-1234-1234-1234-123456789012
        ///
        /// * Alias name example: alias/MyAliasName
        ///
        /// * Master key owned by Kinesis Data Streams: alias/aws/kinesis
        public var keyId: Swift.String?
        /// The number of open shards in the stream.
        /// This member is required.
        public var openShardCount: Swift.Int?
        /// The current retention period, in hours.
        /// This member is required.
        public var retentionPeriodHours: Swift.Int?
        /// The Amazon Resource Name (ARN) for the stream being described.
        /// This member is required.
        public var streamARN: Swift.String?
        /// The approximate time that the stream was created.
        /// This member is required.
        public var streamCreationTimestamp: ClientRuntime.Date?
        /// Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand ycapacity mode and a provisioned capacity mode for your data streams.
        public var streamModeDetails: KinesisClientTypes.StreamModeDetails?
        /// The name of the stream being described.
        /// This member is required.
        public var streamName: Swift.String?
        /// The current status of the stream being described. The stream status is one of the following states:
        ///
        /// * CREATING - The stream is being created. Kinesis Data Streams immediately returns and sets StreamStatus to CREATING.
        ///
        /// * DELETING - The stream is being deleted. The specified stream is in the DELETING state until Kinesis Data Streams completes the deletion.
        ///
        /// * ACTIVE - The stream exists and is ready for read and write operations or deletion. You should perform read and write operations only on an ACTIVE stream.
        ///
        /// * UPDATING - Shards in the stream are being merged or split. Read and write operations continue to work while the stream is in the UPDATING state.
        /// This member is required.
        public var streamStatus: KinesisClientTypes.StreamStatus?

        public init(
            consumerCount: Swift.Int? = nil,
            encryptionType: KinesisClientTypes.EncryptionType? = nil,
            enhancedMonitoring: [KinesisClientTypes.EnhancedMetrics]? = nil,
            keyId: Swift.String? = nil,
            openShardCount: Swift.Int? = nil,
            retentionPeriodHours: Swift.Int? = nil,
            streamARN: Swift.String? = nil,
            streamCreationTimestamp: ClientRuntime.Date? = nil,
            streamModeDetails: KinesisClientTypes.StreamModeDetails? = nil,
            streamName: Swift.String? = nil,
            streamStatus: KinesisClientTypes.StreamStatus? = nil
        )
        {
            self.consumerCount = consumerCount
            self.encryptionType = encryptionType
            self.enhancedMonitoring = enhancedMonitoring
            self.keyId = keyId
            self.openShardCount = openShardCount
            self.retentionPeriodHours = retentionPeriodHours
            self.streamARN = streamARN
            self.streamCreationTimestamp = streamCreationTimestamp
            self.streamModeDetails = streamModeDetails
            self.streamName = streamName
            self.streamStatus = streamStatus
        }
    }

}

extension KinesisClientTypes {
    public enum StreamMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case onDemand
        case provisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamMode] {
            return [
                .onDemand,
                .provisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .onDemand: return "ON_DEMAND"
            case .provisioned: return "PROVISIONED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StreamMode(rawValue: rawValue) ?? StreamMode.sdkUnknown(rawValue)
        }
    }
}

extension KinesisClientTypes.StreamModeDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamMode = "StreamMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamMode = self.streamMode {
            try encodeContainer.encode(streamMode.rawValue, forKey: .streamMode)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamModeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StreamMode.self, forKey: .streamMode)
        streamMode = streamModeDecoded
    }
}

extension KinesisClientTypes {
    /// Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand capacity mode and a provisioned capacity mode for your data streams.
    public struct StreamModeDetails: Swift.Equatable {
        /// Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand capacity mode and a provisioned capacity mode for your data streams.
        /// This member is required.
        public var streamMode: KinesisClientTypes.StreamMode?

        public init(
            streamMode: KinesisClientTypes.StreamMode? = nil
        )
        {
            self.streamMode = streamMode
        }
    }

}

extension KinesisClientTypes {
    public enum StreamStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StreamStatus(rawValue: rawValue) ?? StreamStatus.sdkUnknown(rawValue)
        }
    }
}

extension KinesisClientTypes.StreamSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamARN = "StreamARN"
        case streamCreationTimestamp = "StreamCreationTimestamp"
        case streamModeDetails = "StreamModeDetails"
        case streamName = "StreamName"
        case streamStatus = "StreamStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamCreationTimestamp = self.streamCreationTimestamp {
            try encodeContainer.encodeTimestamp(streamCreationTimestamp, format: .epochSeconds, forKey: .streamCreationTimestamp)
        }
        if let streamModeDetails = self.streamModeDetails {
            try encodeContainer.encode(streamModeDetails, forKey: .streamModeDetails)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
        if let streamStatus = self.streamStatus {
            try encodeContainer.encode(streamStatus.rawValue, forKey: .streamStatus)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let streamStatusDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StreamStatus.self, forKey: .streamStatus)
        streamStatus = streamStatusDecoded
        let streamModeDetailsDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StreamModeDetails.self, forKey: .streamModeDetails)
        streamModeDetails = streamModeDetailsDecoded
        let streamCreationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .streamCreationTimestamp)
        streamCreationTimestamp = streamCreationTimestampDecoded
    }
}

extension KinesisClientTypes {
    /// The summary of a stream.
    public struct StreamSummary: Swift.Equatable {
        /// The ARN of the stream.
        /// This member is required.
        public var streamARN: Swift.String?
        /// The timestamp at which the stream was created.
        public var streamCreationTimestamp: ClientRuntime.Date?
        /// Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand capacity mode and a provisioned capacity mode for your data streams.
        public var streamModeDetails: KinesisClientTypes.StreamModeDetails?
        /// The name of a stream.
        /// This member is required.
        public var streamName: Swift.String?
        /// The status of the stream.
        /// This member is required.
        public var streamStatus: KinesisClientTypes.StreamStatus?

        public init(
            streamARN: Swift.String? = nil,
            streamCreationTimestamp: ClientRuntime.Date? = nil,
            streamModeDetails: KinesisClientTypes.StreamModeDetails? = nil,
            streamName: Swift.String? = nil,
            streamStatus: KinesisClientTypes.StreamStatus? = nil
        )
        {
            self.streamARN = streamARN
            self.streamCreationTimestamp = streamCreationTimestamp
            self.streamModeDetails = streamModeDetails
            self.streamName = streamName
            self.streamStatus = streamStatus
        }
    }

}

extension KinesisClientTypes.SubscribeToShardEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childShards = "ChildShards"
        case continuationSequenceNumber = "ContinuationSequenceNumber"
        case millisBehindLatest = "MillisBehindLatest"
        case records = "Records"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childShards = childShards {
            var childShardsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .childShards)
            for childshard0 in childShards {
                try childShardsContainer.encode(childshard0)
            }
        }
        if let continuationSequenceNumber = self.continuationSequenceNumber {
            try encodeContainer.encode(continuationSequenceNumber, forKey: .continuationSequenceNumber)
        }
        if let millisBehindLatest = self.millisBehindLatest {
            try encodeContainer.encode(millisBehindLatest, forKey: .millisBehindLatest)
        }
        if let records = records {
            var recordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .records)
            for record0 in records {
                try recordsContainer.encode(record0)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.Record?].self, forKey: .records)
        var recordsDecoded0:[KinesisClientTypes.Record]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [KinesisClientTypes.Record]()
            for structure0 in recordsContainer {
                if let structure0 = structure0 {
                    recordsDecoded0?.append(structure0)
                }
            }
        }
        records = recordsDecoded0
        let continuationSequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationSequenceNumber)
        continuationSequenceNumber = continuationSequenceNumberDecoded
        let millisBehindLatestDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .millisBehindLatest)
        millisBehindLatest = millisBehindLatestDecoded
        let childShardsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.ChildShard?].self, forKey: .childShards)
        var childShardsDecoded0:[KinesisClientTypes.ChildShard]? = nil
        if let childShardsContainer = childShardsContainer {
            childShardsDecoded0 = [KinesisClientTypes.ChildShard]()
            for structure0 in childShardsContainer {
                if let structure0 = structure0 {
                    childShardsDecoded0?.append(structure0)
                }
            }
        }
        childShards = childShardsDecoded0
    }
}

extension KinesisClientTypes {
    /// After you call [SubscribeToShard], Kinesis Data Streams sends events of this type over an HTTP/2 connection to your consumer.
    public struct SubscribeToShardEvent: Swift.Equatable {
        /// The list of the child shards of the current shard, returned only at the end of the current shard.
        public var childShards: [KinesisClientTypes.ChildShard]?
        /// Use this as SequenceNumber in the next call to [SubscribeToShard], with StartingPosition set to AT_SEQUENCE_NUMBER or AFTER_SEQUENCE_NUMBER. Use ContinuationSequenceNumber for checkpointing because it captures your shard progress even when no data is written to the shard.
        /// This member is required.
        public var continuationSequenceNumber: Swift.String?
        /// The number of milliseconds the read records are from the tip of the stream, indicating how far behind current time the consumer is. A value of zero indicates that record processing is caught up, and there are no new records to process at this moment.
        /// This member is required.
        public var millisBehindLatest: Swift.Int?
        ///
        /// This member is required.
        public var records: [KinesisClientTypes.Record]?

        public init(
            childShards: [KinesisClientTypes.ChildShard]? = nil,
            continuationSequenceNumber: Swift.String? = nil,
            millisBehindLatest: Swift.Int? = nil,
            records: [KinesisClientTypes.Record]? = nil
        )
        {
            self.childShards = childShards
            self.continuationSequenceNumber = continuationSequenceNumber
            self.millisBehindLatest = millisBehindLatest
            self.records = records
        }
    }

}

extension KinesisClientTypes.SubscribeToShardEventStream: ClientRuntime.MessageUnmarshallable {
    public init(message: ClientRuntime.EventStream.Message, decoder: ClientRuntime.ResponseDecoder) throws {
        switch try message.type() {
        case .event(let params):
            switch params.eventType {
            case "SubscribeToShardEvent":
                self = .subscribetoshardevent(try decoder.decode(responseBody: message.payload))
            default:
                self = .sdkUnknown("error processing event stream, unrecognized event: \(params.eventType)")
            }
        case .exception(let params):
            let makeError: (ClientRuntime.EventStream.Message, ClientRuntime.EventStream.MessageType.ExceptionParams) throws -> Swift.Error = { message, params in
                switch params.exceptionType {
                case "ResourceNotFoundException":
                    return try decoder.decode(responseBody: message.payload) as ResourceNotFoundException
                case "ResourceInUseException":
                    return try decoder.decode(responseBody: message.payload) as ResourceInUseException
                case "KMSDisabledException":
                    return try decoder.decode(responseBody: message.payload) as KMSDisabledException
                case "KMSInvalidStateException":
                    return try decoder.decode(responseBody: message.payload) as KMSInvalidStateException
                case "KMSAccessDeniedException":
                    return try decoder.decode(responseBody: message.payload) as KMSAccessDeniedException
                case "KMSNotFoundException":
                    return try decoder.decode(responseBody: message.payload) as KMSNotFoundException
                case "KMSOptInRequired":
                    return try decoder.decode(responseBody: message.payload) as KMSOptInRequired
                case "KMSThrottlingException":
                    return try decoder.decode(responseBody: message.payload) as KMSThrottlingException
                case "InternalFailureException":
                    return try decoder.decode(responseBody: message.payload) as InternalFailureException
                default:
                    let httpResponse = HttpResponse(body: .data(message.payload), statusCode: .ok)
                    return AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':exceptionType': \(params.exceptionType); contentType: \(params.contentType ?? "nil")", requestID: nil, typeName: nil)
                }
            }
            let error = try makeError(message, params)
            throw error
        case .error(let params):
            let httpResponse = HttpResponse(body: .data(message.payload), statusCode: .ok)
            throw AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':errorType': \(params.errorCode); message: \(params.message ?? "nil")", requestID: nil, typeName: nil)
        case .unknown(messageType: let messageType):
            throw ClientRuntime.ClientError.unknownError("unrecognized event stream message ':message-type': \(messageType)")
        }
    }
}

extension KinesisClientTypes {
    /// This is a tagged union for all of the types of events an enhanced fan-out consumer can receive over HTTP/2 after a call to [SubscribeToShard].
    public enum SubscribeToShardEventStream: Swift.Equatable {
        /// After you call [SubscribeToShard], Kinesis Data Streams sends events of this type to your consumer. For an example of how to handle these events, see [Enhanced Fan-Out Using the Kinesis Data Streams API].
        case subscribetoshardevent(KinesisClientTypes.SubscribeToShardEvent)
        case sdkUnknown(Swift.String)
    }

}

extension SubscribeToShardInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerARN = "ConsumerARN"
        case shardId = "ShardId"
        case startingPosition = "StartingPosition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consumerARN = self.consumerARN {
            try encodeContainer.encode(consumerARN, forKey: .consumerARN)
        }
        if let shardId = self.shardId {
            try encodeContainer.encode(shardId, forKey: .shardId)
        }
        if let startingPosition = self.startingPosition {
            try encodeContainer.encode(startingPosition, forKey: .startingPosition)
        }
    }
}

extension SubscribeToShardInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SubscribeToShardInput: Swift.Equatable {
    /// For this parameter, use the value you obtained when you called [RegisterStreamConsumer].
    /// This member is required.
    public var consumerARN: Swift.String?
    /// The ID of the shard you want to subscribe to. To see a list of all the shards for a given stream, use [ListShards].
    /// This member is required.
    public var shardId: Swift.String?
    /// The starting position in the data stream from which to start streaming.
    /// This member is required.
    public var startingPosition: KinesisClientTypes.StartingPosition?

    public init(
        consumerARN: Swift.String? = nil,
        shardId: Swift.String? = nil,
        startingPosition: KinesisClientTypes.StartingPosition? = nil
    )
    {
        self.consumerARN = consumerARN
        self.shardId = shardId
        self.startingPosition = startingPosition
    }
}

struct SubscribeToShardInputBody: Swift.Equatable {
    let consumerARN: Swift.String?
    let shardId: Swift.String?
    let startingPosition: KinesisClientTypes.StartingPosition?
}

extension SubscribeToShardInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerARN = "ConsumerARN"
        case shardId = "ShardId"
        case startingPosition = "StartingPosition"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumerARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerARN)
        consumerARN = consumerARNDecoded
        let shardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardId)
        shardId = shardIdDecoded
        let startingPositionDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StartingPosition.self, forKey: .startingPosition)
        startingPosition = startingPositionDecoded
    }
}

extension SubscribeToShardOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if case let .stream(stream) = httpResponse.body, let responseDecoder = decoder {
            let messageDecoder = AWSClientRuntime.AWSEventStream.AWSMessageDecoder()
            let decoderStream = ClientRuntime.EventStream.DefaultMessageDecoderStream<KinesisClientTypes.SubscribeToShardEventStream>(stream: stream, messageDecoder: messageDecoder, responseDecoder: responseDecoder)
            self.eventStream = decoderStream.toAsyncStream()
        } else {
            self.eventStream = nil
        }
    }
}

public struct SubscribeToShardOutput: Swift.Equatable {
    /// The event stream that your consumer can use to read records from the shard.
    /// This member is required.
    public var eventStream: AsyncThrowingStream<KinesisClientTypes.SubscribeToShardEventStream, Swift.Error>?

    public init(
        eventStream: AsyncThrowingStream<KinesisClientTypes.SubscribeToShardEventStream, Swift.Error>? = nil
    )
    {
        self.eventStream = eventStream
    }
}

enum SubscribeToShardOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension KinesisClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension KinesisClientTypes {
    /// Metadata assigned to the stream, consisting of a key-value pair.
    public struct Tag: Swift.Equatable {
        /// A unique identifier for the tag. Maximum length: 128 characters. Valid characters: Unicode letters, digits, white space, _ . / = + - % @
        /// This member is required.
        public var key: Swift.String?
        /// An optional string, typically used to describe or define the tag. Maximum length: 256 characters. Valid characters: Unicode letters, digits, white space, _ . / = + - % @
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension UpdateShardCountInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scalingType = "ScalingType"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
        case targetShardCount = "TargetShardCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scalingType = self.scalingType {
            try encodeContainer.encode(scalingType.rawValue, forKey: .scalingType)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
        if let targetShardCount = self.targetShardCount {
            try encodeContainer.encode(targetShardCount, forKey: .targetShardCount)
        }
    }
}

extension UpdateShardCountInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateShardCountInput: Swift.Equatable {
    /// The scaling type. Uniform scaling creates shards of equal size.
    /// This member is required.
    public var scalingType: KinesisClientTypes.ScalingType?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream.
    public var streamName: Swift.String?
    /// The new number of shards. This value has the following default limits. By default, you cannot do the following:
    ///
    /// * Set this value to more than double your current shard count for a stream.
    ///
    /// * Set this value below half your current shard count for a stream.
    ///
    /// * Set this value to more than 10000 shards in a stream (the default limit for shard count per stream is 10000 per account per region), unless you request a limit increase.
    ///
    /// * Scale a stream with more than 10000 shards down unless you set this value to less than 10000 shards.
    /// This member is required.
    public var targetShardCount: Swift.Int?

    public init(
        scalingType: KinesisClientTypes.ScalingType? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil,
        targetShardCount: Swift.Int? = nil
    )
    {
        self.scalingType = scalingType
        self.streamARN = streamARN
        self.streamName = streamName
        self.targetShardCount = targetShardCount
    }
}

struct UpdateShardCountInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let targetShardCount: Swift.Int?
    let scalingType: KinesisClientTypes.ScalingType?
    let streamARN: Swift.String?
}

extension UpdateShardCountInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scalingType = "ScalingType"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
        case targetShardCount = "TargetShardCount"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let targetShardCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetShardCount)
        targetShardCount = targetShardCountDecoded
        let scalingTypeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.ScalingType.self, forKey: .scalingType)
        scalingType = scalingTypeDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

extension UpdateShardCountOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: UpdateShardCountOutputBody = try responseDecoder.decode(responseBody: data)
            self.currentShardCount = output.currentShardCount
            self.streamARN = output.streamARN
            self.streamName = output.streamName
            self.targetShardCount = output.targetShardCount
        } else {
            self.currentShardCount = nil
            self.streamARN = nil
            self.streamName = nil
            self.targetShardCount = nil
        }
    }
}

public struct UpdateShardCountOutput: Swift.Equatable {
    /// The current number of shards.
    public var currentShardCount: Swift.Int?
    /// The ARN of the stream.
    public var streamARN: Swift.String?
    /// The name of the stream.
    public var streamName: Swift.String?
    /// The updated number of shards.
    public var targetShardCount: Swift.Int?

    public init(
        currentShardCount: Swift.Int? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil,
        targetShardCount: Swift.Int? = nil
    )
    {
        self.currentShardCount = currentShardCount
        self.streamARN = streamARN
        self.streamName = streamName
        self.targetShardCount = targetShardCount
    }
}

struct UpdateShardCountOutputBody: Swift.Equatable {
    let streamName: Swift.String?
    let currentShardCount: Swift.Int?
    let targetShardCount: Swift.Int?
    let streamARN: Swift.String?
}

extension UpdateShardCountOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentShardCount = "CurrentShardCount"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
        case targetShardCount = "TargetShardCount"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let currentShardCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .currentShardCount)
        currentShardCount = currentShardCountDecoded
        let targetShardCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetShardCount)
        targetShardCount = targetShardCountDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
    }
}

enum UpdateShardCountOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateStreamModeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamARN = "StreamARN"
        case streamModeDetails = "StreamModeDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamModeDetails = self.streamModeDetails {
            try encodeContainer.encode(streamModeDetails, forKey: .streamModeDetails)
        }
    }
}

extension UpdateStreamModeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateStreamModeInput: Swift.Equatable {
    /// Specifies the ARN of the data stream whose capacity mode you want to update.
    /// This member is required.
    public var streamARN: Swift.String?
    /// Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand capacity mode and a provisioned capacity mode for your data streams.
    /// This member is required.
    public var streamModeDetails: KinesisClientTypes.StreamModeDetails?

    public init(
        streamARN: Swift.String? = nil,
        streamModeDetails: KinesisClientTypes.StreamModeDetails? = nil
    )
    {
        self.streamARN = streamARN
        self.streamModeDetails = streamModeDetails
    }
}

struct UpdateStreamModeInputBody: Swift.Equatable {
    let streamARN: Swift.String?
    let streamModeDetails: KinesisClientTypes.StreamModeDetails?
}

extension UpdateStreamModeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamARN = "StreamARN"
        case streamModeDetails = "StreamModeDetails"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let streamModeDetailsDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StreamModeDetails.self, forKey: .streamModeDetails)
        streamModeDetails = streamModeDetailsDecoded
    }
}

extension UpdateStreamModeOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateStreamModeOutput: Swift.Equatable {

    public init() { }
}

enum UpdateStreamModeOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidArgumentException": return try await InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceInUseException": return try await ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ValidationException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Specifies that you tried to invoke this API for a data stream with the on-demand capacity mode. This API is only supported for data streams with the provisioned capacity mode.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
