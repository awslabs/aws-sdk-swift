// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    public enum AnalysisType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case codeQuality
        case security
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalysisType] {
            return [
                .codeQuality,
                .security,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .codeQuality: return "CodeQuality"
            case .security: return "Security"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AnalysisType(rawValue: rawValue) ?? AnalysisType.sdkUnknown(rawValue)
        }
    }
}

extension AssociateRepositoryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case kmsKeyDetails = "KMSKeyDetails"
        case repository = "Repository"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let kmsKeyDetails = self.kmsKeyDetails {
            try encodeContainer.encode(kmsKeyDetails, forKey: .kmsKeyDetails)
        }
        if let repository = self.repository {
            try encodeContainer.encode(repository, forKey: .repository)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension AssociateRepositoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/associations"
    }
}

public struct AssociateRepositoryInput: Swift.Equatable {
    /// Amazon CodeGuru Reviewer uses this value to prevent the accidental creation of duplicate repository associations if there are failures and retries.
    public var clientRequestToken: Swift.String?
    /// A KMSKeyDetails object that contains:
    ///
    /// * The encryption option for this repository association. It is either owned by Amazon Web Services Key Management Service (KMS) (AWS_OWNED_CMK) or customer managed (CUSTOMER_MANAGED_CMK).
    ///
    /// * The ID of the Amazon Web Services KMS key that is associated with this repository association.
    public var kmsKeyDetails: CodeGuruReviewerClientTypes.KMSKeyDetails?
    /// The repository to associate.
    /// This member is required.
    public var repository: CodeGuruReviewerClientTypes.Repository?
    /// An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:
    ///
    /// * A tag key (for example, CostCenter, Environment, Project, or Secret). Tag keys are case sensitive.
    ///
    /// * An optional field known as a tag value (for example, 111122223333, Production, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.
    public var tags: [Swift.String:Swift.String]?

    public init (
        clientRequestToken: Swift.String? = nil,
        kmsKeyDetails: CodeGuruReviewerClientTypes.KMSKeyDetails? = nil,
        repository: CodeGuruReviewerClientTypes.Repository? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.kmsKeyDetails = kmsKeyDetails
        self.repository = repository
        self.tags = tags
    }
}

struct AssociateRepositoryInputBody: Swift.Equatable {
    let repository: CodeGuruReviewerClientTypes.Repository?
    let clientRequestToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let kmsKeyDetails: CodeGuruReviewerClientTypes.KMSKeyDetails?
}

extension AssociateRepositoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case kmsKeyDetails = "KMSKeyDetails"
        case repository = "Repository"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.Repository.self, forKey: .repository)
        repository = repositoryDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let kmsKeyDetailsDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.KMSKeyDetails.self, forKey: .kmsKeyDetails)
        kmsKeyDetails = kmsKeyDetailsDecoded
    }
}

extension AssociateRepositoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateRepositoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AssociateRepositoryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateRepositoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AssociateRepositoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.repositoryAssociation = output.repositoryAssociation
            self.tags = output.tags
        } else {
            self.repositoryAssociation = nil
            self.tags = nil
        }
    }
}

public struct AssociateRepositoryOutputResponse: Swift.Equatable {
    /// Information about the repository association.
    public var repositoryAssociation: CodeGuruReviewerClientTypes.RepositoryAssociation?
    /// An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:
    ///
    /// * A tag key (for example, CostCenter, Environment, Project, or Secret). Tag keys are case sensitive.
    ///
    /// * An optional field known as a tag value (for example, 111122223333, Production, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.
    public var tags: [Swift.String:Swift.String]?

    public init (
        repositoryAssociation: CodeGuruReviewerClientTypes.RepositoryAssociation? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.repositoryAssociation = repositoryAssociation
        self.tags = tags
    }
}

struct AssociateRepositoryOutputResponseBody: Swift.Equatable {
    let repositoryAssociation: CodeGuruReviewerClientTypes.RepositoryAssociation?
    let tags: [Swift.String:Swift.String]?
}

extension AssociateRepositoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case repositoryAssociation = "RepositoryAssociation"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryAssociationDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RepositoryAssociation.self, forKey: .repositoryAssociation)
        repositoryAssociation = repositoryAssociationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CodeGuruReviewerClientTypes.BranchDiffSourceCodeType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationBranchName = "DestinationBranchName"
        case sourceBranchName = "SourceBranchName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationBranchName = self.destinationBranchName {
            try encodeContainer.encode(destinationBranchName, forKey: .destinationBranchName)
        }
        if let sourceBranchName = self.sourceBranchName {
            try encodeContainer.encode(sourceBranchName, forKey: .sourceBranchName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceBranchNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceBranchName)
        sourceBranchName = sourceBranchNameDecoded
        let destinationBranchNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationBranchName)
        destinationBranchName = destinationBranchNameDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// A type of [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType) that specifies a code diff between a source and destination branch in an associated repository.
    public struct BranchDiffSourceCodeType: Swift.Equatable {
        /// The destination branch for a diff in an associated repository.
        /// This member is required.
        public var destinationBranchName: Swift.String?
        /// The source branch for a diff in an associated repository.
        /// This member is required.
        public var sourceBranchName: Swift.String?

        public init (
            destinationBranchName: Swift.String? = nil,
            sourceBranchName: Swift.String? = nil
        )
        {
            self.destinationBranchName = destinationBranchName
            self.sourceBranchName = sourceBranchName
        }
    }

}

extension CodeGuruReviewerClientTypes.CodeArtifacts: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildArtifactsObjectKey = "BuildArtifactsObjectKey"
        case sourceCodeArtifactsObjectKey = "SourceCodeArtifactsObjectKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildArtifactsObjectKey = self.buildArtifactsObjectKey {
            try encodeContainer.encode(buildArtifactsObjectKey, forKey: .buildArtifactsObjectKey)
        }
        if let sourceCodeArtifactsObjectKey = self.sourceCodeArtifactsObjectKey {
            try encodeContainer.encode(sourceCodeArtifactsObjectKey, forKey: .sourceCodeArtifactsObjectKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceCodeArtifactsObjectKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceCodeArtifactsObjectKey)
        sourceCodeArtifactsObjectKey = sourceCodeArtifactsObjectKeyDecoded
        let buildArtifactsObjectKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildArtifactsObjectKey)
        buildArtifactsObjectKey = buildArtifactsObjectKeyDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Code artifacts are source code artifacts and build artifacts used in a repository analysis or a pull request review.
    ///
    /// * Source code artifacts are source code files in a Git repository that are compressed into a .zip file.
    ///
    /// * Build artifacts are .jar or .class files that are compressed in a .zip file.
    public struct CodeArtifacts: Swift.Equatable {
        /// The S3 object key for a build artifacts .zip file that contains .jar or .class files. This is required for a code review with security analysis. For more information, see [Create code reviews with GitHub Actions](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/working-with-cicd.html) in the Amazon CodeGuru Reviewer User Guide.
        public var buildArtifactsObjectKey: Swift.String?
        /// The S3 object key for a source code .zip file. This is required for all code reviews.
        /// This member is required.
        public var sourceCodeArtifactsObjectKey: Swift.String?

        public init (
            buildArtifactsObjectKey: Swift.String? = nil,
            sourceCodeArtifactsObjectKey: Swift.String? = nil
        )
        {
            self.buildArtifactsObjectKey = buildArtifactsObjectKey
            self.sourceCodeArtifactsObjectKey = sourceCodeArtifactsObjectKey
        }
    }

}

extension CodeGuruReviewerClientTypes.CodeCommitRepository: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about an Amazon Web Services CodeCommit repository. The CodeCommit repository must be in the same Amazon Web Services Region and Amazon Web Services account where its CodeGuru Reviewer code reviews are configured.
    public struct CodeCommitRepository: Swift.Equatable {
        /// The name of the Amazon Web Services CodeCommit repository. For more information, see [repositoryName](https://docs.aws.amazon.com/codecommit/latest/APIReference/API_GetRepository.html#CodeCommit-GetRepository-request-repositoryName) in the Amazon Web Services CodeCommit API Reference.
        /// This member is required.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension CodeGuruReviewerClientTypes.CodeReview: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisTypes = "AnalysisTypes"
        case associationArn = "AssociationArn"
        case codeReviewArn = "CodeReviewArn"
        case configFileState = "ConfigFileState"
        case createdTimeStamp = "CreatedTimeStamp"
        case lastUpdatedTimeStamp = "LastUpdatedTimeStamp"
        case metrics = "Metrics"
        case name = "Name"
        case owner = "Owner"
        case providerType = "ProviderType"
        case pullRequestId = "PullRequestId"
        case repositoryName = "RepositoryName"
        case sourceCodeType = "SourceCodeType"
        case state = "State"
        case stateReason = "StateReason"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analysisTypes = analysisTypes {
            var analysisTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .analysisTypes)
            for analysistype0 in analysisTypes {
                try analysisTypesContainer.encode(analysistype0.rawValue)
            }
        }
        if let associationArn = self.associationArn {
            try encodeContainer.encode(associationArn, forKey: .associationArn)
        }
        if let codeReviewArn = self.codeReviewArn {
            try encodeContainer.encode(codeReviewArn, forKey: .codeReviewArn)
        }
        if let configFileState = self.configFileState {
            try encodeContainer.encode(configFileState.rawValue, forKey: .configFileState)
        }
        if let createdTimeStamp = self.createdTimeStamp {
            try encodeContainer.encodeTimestamp(createdTimeStamp, format: .epochSeconds, forKey: .createdTimeStamp)
        }
        if let lastUpdatedTimeStamp = self.lastUpdatedTimeStamp {
            try encodeContainer.encodeTimestamp(lastUpdatedTimeStamp, format: .epochSeconds, forKey: .lastUpdatedTimeStamp)
        }
        if let metrics = self.metrics {
            try encodeContainer.encode(metrics, forKey: .metrics)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let providerType = self.providerType {
            try encodeContainer.encode(providerType.rawValue, forKey: .providerType)
        }
        if let pullRequestId = self.pullRequestId {
            try encodeContainer.encode(pullRequestId, forKey: .pullRequestId)
        }
        if let repositoryName = self.repositoryName {
            try encodeContainer.encode(repositoryName, forKey: .repositoryName)
        }
        if let sourceCodeType = self.sourceCodeType {
            try encodeContainer.encode(sourceCodeType, forKey: .sourceCodeType)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateReason = self.stateReason {
            try encodeContainer.encode(stateReason, forKey: .stateReason)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let codeReviewArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeReviewArn)
        codeReviewArn = codeReviewArnDecoded
        let repositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let providerTypeDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.ProviderType.self, forKey: .providerType)
        providerType = providerTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.JobState.self, forKey: .state)
        state = stateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let createdTimeStampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdTimeStamp)
        createdTimeStamp = createdTimeStampDecoded
        let lastUpdatedTimeStampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimeStamp)
        lastUpdatedTimeStamp = lastUpdatedTimeStampDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.ModelType.self, forKey: .type)
        type = typeDecoded
        let pullRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pullRequestId)
        pullRequestId = pullRequestIdDecoded
        let sourceCodeTypeDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.SourceCodeType.self, forKey: .sourceCodeType)
        sourceCodeType = sourceCodeTypeDecoded
        let associationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationArn)
        associationArn = associationArnDecoded
        let metricsDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.Metrics.self, forKey: .metrics)
        metrics = metricsDecoded
        let analysisTypesContainer = try containerValues.decodeIfPresent([CodeGuruReviewerClientTypes.AnalysisType?].self, forKey: .analysisTypes)
        var analysisTypesDecoded0:[CodeGuruReviewerClientTypes.AnalysisType]? = nil
        if let analysisTypesContainer = analysisTypesContainer {
            analysisTypesDecoded0 = [CodeGuruReviewerClientTypes.AnalysisType]()
            for enum0 in analysisTypesContainer {
                if let enum0 = enum0 {
                    analysisTypesDecoded0?.append(enum0)
                }
            }
        }
        analysisTypes = analysisTypesDecoded0
        let configFileStateDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.ConfigFileState.self, forKey: .configFileState)
        configFileState = configFileStateDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about a code review. A code review belongs to the associated repository that contains the reviewed code.
    public struct CodeReview: Swift.Equatable {
        /// The types of analysis performed during a repository analysis or a pull request review. You can specify either Security, CodeQuality, or both.
        public var analysisTypes: [CodeGuruReviewerClientTypes.AnalysisType]?
        /// The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html) that contains the reviewed source code. You can retrieve associated repository ARNs by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
        public var associationArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html) object.
        public var codeReviewArn: Swift.String?
        /// The state of the aws-codeguru-reviewer.yml configuration file that allows the configuration of the CodeGuru Reviewer analysis. The file either exists, doesn't exist, or exists with errors at the root directory of your repository.
        public var configFileState: CodeGuruReviewerClientTypes.ConfigFileState?
        /// The time, in milliseconds since the epoch, when the code review was created.
        public var createdTimeStamp: ClientRuntime.Date?
        /// The time, in milliseconds since the epoch, when the code review was last updated.
        public var lastUpdatedTimeStamp: ClientRuntime.Date?
        /// The statistics from the code review.
        public var metrics: CodeGuruReviewerClientTypes.Metrics?
        /// The name of the code review.
        public var name: Swift.String?
        /// The owner of the repository. For an Amazon Web Services CodeCommit repository, this is the Amazon Web Services account ID of the account that owns the repository. For a GitHub, GitHub Enterprise Server, or Bitbucket repository, this is the username for the account that owns the repository. For an S3 repository, it can be the username or Amazon Web Services account ID.
        public var owner: Swift.String?
        /// The type of repository that contains the reviewed code (for example, GitHub or Bitbucket).
        public var providerType: CodeGuruReviewerClientTypes.ProviderType?
        /// The pull request ID for the code review.
        public var pullRequestId: Swift.String?
        /// The name of the repository.
        public var repositoryName: Swift.String?
        /// The type of the source code for the code review.
        public var sourceCodeType: CodeGuruReviewerClientTypes.SourceCodeType?
        /// The valid code review states are:
        ///
        /// * Completed: The code review is complete.
        ///
        /// * Pending: The code review started and has not completed or failed.
        ///
        /// * Failed: The code review failed.
        ///
        /// * Deleting: The code review is being deleted.
        public var state: CodeGuruReviewerClientTypes.JobState?
        /// The reason for the state of the code review.
        public var stateReason: Swift.String?
        /// The type of code review.
        public var type: CodeGuruReviewerClientTypes.ModelType?

        public init (
            analysisTypes: [CodeGuruReviewerClientTypes.AnalysisType]? = nil,
            associationArn: Swift.String? = nil,
            codeReviewArn: Swift.String? = nil,
            configFileState: CodeGuruReviewerClientTypes.ConfigFileState? = nil,
            createdTimeStamp: ClientRuntime.Date? = nil,
            lastUpdatedTimeStamp: ClientRuntime.Date? = nil,
            metrics: CodeGuruReviewerClientTypes.Metrics? = nil,
            name: Swift.String? = nil,
            owner: Swift.String? = nil,
            providerType: CodeGuruReviewerClientTypes.ProviderType? = nil,
            pullRequestId: Swift.String? = nil,
            repositoryName: Swift.String? = nil,
            sourceCodeType: CodeGuruReviewerClientTypes.SourceCodeType? = nil,
            state: CodeGuruReviewerClientTypes.JobState? = nil,
            stateReason: Swift.String? = nil,
            type: CodeGuruReviewerClientTypes.ModelType? = nil
        )
        {
            self.analysisTypes = analysisTypes
            self.associationArn = associationArn
            self.codeReviewArn = codeReviewArn
            self.configFileState = configFileState
            self.createdTimeStamp = createdTimeStamp
            self.lastUpdatedTimeStamp = lastUpdatedTimeStamp
            self.metrics = metrics
            self.name = name
            self.owner = owner
            self.providerType = providerType
            self.pullRequestId = pullRequestId
            self.repositoryName = repositoryName
            self.sourceCodeType = sourceCodeType
            self.state = state
            self.stateReason = stateReason
            self.type = type
        }
    }

}

extension CodeGuruReviewerClientTypes.CodeReviewSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeReviewArn = "CodeReviewArn"
        case createdTimeStamp = "CreatedTimeStamp"
        case lastUpdatedTimeStamp = "LastUpdatedTimeStamp"
        case metricsSummary = "MetricsSummary"
        case name = "Name"
        case owner = "Owner"
        case providerType = "ProviderType"
        case pullRequestId = "PullRequestId"
        case repositoryName = "RepositoryName"
        case sourceCodeType = "SourceCodeType"
        case state = "State"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codeReviewArn = self.codeReviewArn {
            try encodeContainer.encode(codeReviewArn, forKey: .codeReviewArn)
        }
        if let createdTimeStamp = self.createdTimeStamp {
            try encodeContainer.encodeTimestamp(createdTimeStamp, format: .epochSeconds, forKey: .createdTimeStamp)
        }
        if let lastUpdatedTimeStamp = self.lastUpdatedTimeStamp {
            try encodeContainer.encodeTimestamp(lastUpdatedTimeStamp, format: .epochSeconds, forKey: .lastUpdatedTimeStamp)
        }
        if let metricsSummary = self.metricsSummary {
            try encodeContainer.encode(metricsSummary, forKey: .metricsSummary)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let providerType = self.providerType {
            try encodeContainer.encode(providerType.rawValue, forKey: .providerType)
        }
        if let pullRequestId = self.pullRequestId {
            try encodeContainer.encode(pullRequestId, forKey: .pullRequestId)
        }
        if let repositoryName = self.repositoryName {
            try encodeContainer.encode(repositoryName, forKey: .repositoryName)
        }
        if let sourceCodeType = self.sourceCodeType {
            try encodeContainer.encode(sourceCodeType, forKey: .sourceCodeType)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let codeReviewArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeReviewArn)
        codeReviewArn = codeReviewArnDecoded
        let repositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let providerTypeDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.ProviderType.self, forKey: .providerType)
        providerType = providerTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.JobState.self, forKey: .state)
        state = stateDecoded
        let createdTimeStampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdTimeStamp)
        createdTimeStamp = createdTimeStampDecoded
        let lastUpdatedTimeStampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimeStamp)
        lastUpdatedTimeStamp = lastUpdatedTimeStampDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.ModelType.self, forKey: .type)
        type = typeDecoded
        let pullRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pullRequestId)
        pullRequestId = pullRequestIdDecoded
        let metricsSummaryDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.MetricsSummary.self, forKey: .metricsSummary)
        metricsSummary = metricsSummaryDecoded
        let sourceCodeTypeDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.SourceCodeType.self, forKey: .sourceCodeType)
        sourceCodeType = sourceCodeTypeDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about the summary of the code review.
    public struct CodeReviewSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html) object.
        public var codeReviewArn: Swift.String?
        /// The time, in milliseconds since the epoch, when the code review was created.
        public var createdTimeStamp: ClientRuntime.Date?
        /// The time, in milliseconds since the epoch, when the code review was last updated.
        public var lastUpdatedTimeStamp: ClientRuntime.Date?
        /// The statistics from the code review.
        public var metricsSummary: CodeGuruReviewerClientTypes.MetricsSummary?
        /// The name of the code review.
        public var name: Swift.String?
        /// The owner of the repository. For an Amazon Web Services CodeCommit repository, this is the Amazon Web Services account ID of the account that owns the repository. For a GitHub, GitHub Enterprise Server, or Bitbucket repository, this is the username for the account that owns the repository. For an S3 repository, it can be the username or Amazon Web Services account ID.
        public var owner: Swift.String?
        /// The provider type of the repository association.
        public var providerType: CodeGuruReviewerClientTypes.ProviderType?
        /// The pull request ID for the code review.
        public var pullRequestId: Swift.String?
        /// The name of the repository.
        public var repositoryName: Swift.String?
        /// Specifies the source code that is analyzed in a code review.
        public var sourceCodeType: CodeGuruReviewerClientTypes.SourceCodeType?
        /// The state of the code review. The valid code review states are:
        ///
        /// * Completed: The code review is complete.
        ///
        /// * Pending: The code review started and has not completed or failed.
        ///
        /// * Failed: The code review failed.
        ///
        /// * Deleting: The code review is being deleted.
        public var state: CodeGuruReviewerClientTypes.JobState?
        /// The type of the code review.
        public var type: CodeGuruReviewerClientTypes.ModelType?

        public init (
            codeReviewArn: Swift.String? = nil,
            createdTimeStamp: ClientRuntime.Date? = nil,
            lastUpdatedTimeStamp: ClientRuntime.Date? = nil,
            metricsSummary: CodeGuruReviewerClientTypes.MetricsSummary? = nil,
            name: Swift.String? = nil,
            owner: Swift.String? = nil,
            providerType: CodeGuruReviewerClientTypes.ProviderType? = nil,
            pullRequestId: Swift.String? = nil,
            repositoryName: Swift.String? = nil,
            sourceCodeType: CodeGuruReviewerClientTypes.SourceCodeType? = nil,
            state: CodeGuruReviewerClientTypes.JobState? = nil,
            type: CodeGuruReviewerClientTypes.ModelType? = nil
        )
        {
            self.codeReviewArn = codeReviewArn
            self.createdTimeStamp = createdTimeStamp
            self.lastUpdatedTimeStamp = lastUpdatedTimeStamp
            self.metricsSummary = metricsSummary
            self.name = name
            self.owner = owner
            self.providerType = providerType
            self.pullRequestId = pullRequestId
            self.repositoryName = repositoryName
            self.sourceCodeType = sourceCodeType
            self.state = state
            self.type = type
        }
    }

}

extension CodeGuruReviewerClientTypes.CodeReviewType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisTypes = "AnalysisTypes"
        case repositoryAnalysis = "RepositoryAnalysis"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analysisTypes = analysisTypes {
            var analysisTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .analysisTypes)
            for analysistype0 in analysisTypes {
                try analysisTypesContainer.encode(analysistype0.rawValue)
            }
        }
        if let repositoryAnalysis = self.repositoryAnalysis {
            try encodeContainer.encode(repositoryAnalysis, forKey: .repositoryAnalysis)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryAnalysisDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RepositoryAnalysis.self, forKey: .repositoryAnalysis)
        repositoryAnalysis = repositoryAnalysisDecoded
        let analysisTypesContainer = try containerValues.decodeIfPresent([CodeGuruReviewerClientTypes.AnalysisType?].self, forKey: .analysisTypes)
        var analysisTypesDecoded0:[CodeGuruReviewerClientTypes.AnalysisType]? = nil
        if let analysisTypesContainer = analysisTypesContainer {
            analysisTypesDecoded0 = [CodeGuruReviewerClientTypes.AnalysisType]()
            for enum0 in analysisTypesContainer {
                if let enum0 = enum0 {
                    analysisTypesDecoded0?.append(enum0)
                }
            }
        }
        analysisTypes = analysisTypesDecoded0
    }
}

extension CodeGuruReviewerClientTypes {
    /// The type of a code review. There are two code review types:
    ///
    /// * PullRequest - A code review that is automatically triggered by a pull request on an associated repository.
    ///
    /// * RepositoryAnalysis - A code review that analyzes all code under a specified branch in an associated repository. The associated repository is specified using its ARN in [CreateCodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CreateCodeReview).
    public struct CodeReviewType: Swift.Equatable {
        /// They types of analysis performed during a repository analysis or a pull request review. You can specify either Security, CodeQuality, or both.
        public var analysisTypes: [CodeGuruReviewerClientTypes.AnalysisType]?
        /// A code review that analyzes all code under a specified branch in an associated repository. The associated repository is specified using its ARN in [CreateCodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CreateCodeReview).
        /// This member is required.
        public var repositoryAnalysis: CodeGuruReviewerClientTypes.RepositoryAnalysis?

        public init (
            analysisTypes: [CodeGuruReviewerClientTypes.AnalysisType]? = nil,
            repositoryAnalysis: CodeGuruReviewerClientTypes.RepositoryAnalysis? = nil
        )
        {
            self.analysisTypes = analysisTypes
            self.repositoryAnalysis = repositoryAnalysis
        }
    }

}

extension CodeGuruReviewerClientTypes.CommitDiffSourceCodeType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationCommit = "DestinationCommit"
        case mergeBaseCommit = "MergeBaseCommit"
        case sourceCommit = "SourceCommit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationCommit = self.destinationCommit {
            try encodeContainer.encode(destinationCommit, forKey: .destinationCommit)
        }
        if let mergeBaseCommit = self.mergeBaseCommit {
            try encodeContainer.encode(mergeBaseCommit, forKey: .mergeBaseCommit)
        }
        if let sourceCommit = self.sourceCommit {
            try encodeContainer.encode(sourceCommit, forKey: .sourceCommit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceCommitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceCommit)
        sourceCommit = sourceCommitDecoded
        let destinationCommitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationCommit)
        destinationCommit = destinationCommitDecoded
        let mergeBaseCommitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mergeBaseCommit)
        mergeBaseCommit = mergeBaseCommitDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// A type of [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType) that specifies the commit diff for a pull request on an associated repository. The SourceCommit and DestinationCommit fields are required to do a pull request code review.
    public struct CommitDiffSourceCodeType: Swift.Equatable {
        /// The SHA of the destination commit used to generate a commit diff. This field is required for a pull request code review.
        public var destinationCommit: Swift.String?
        /// The SHA of the merge base of a commit.
        public var mergeBaseCommit: Swift.String?
        /// The SHA of the source commit used to generate a commit diff. This field is required for a pull request code review.
        public var sourceCommit: Swift.String?

        public init (
            destinationCommit: Swift.String? = nil,
            mergeBaseCommit: Swift.String? = nil,
            sourceCommit: Swift.String? = nil
        )
        {
            self.destinationCommit = destinationCommit
            self.mergeBaseCommit = mergeBaseCommit
            self.sourceCommit = sourceCommit
        }
    }

}

extension CodeGuruReviewerClientTypes {
    public enum ConfigFileState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case absent
        case present
        case presentWithErrors
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigFileState] {
            return [
                .absent,
                .present,
                .presentWithErrors,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .absent: return "Absent"
            case .present: return "Present"
            case .presentWithErrors: return "PresentWithErrors"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfigFileState(rawValue: rawValue) ?? ConfigFileState.sdkUnknown(rawValue)
        }
    }
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CreateCodeReviewInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case repositoryAssociationArn = "RepositoryAssociationArn"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let repositoryAssociationArn = self.repositoryAssociationArn {
            try encodeContainer.encode(repositoryAssociationArn, forKey: .repositoryAssociationArn)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }
}

extension CreateCodeReviewInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/codereviews"
    }
}

public struct CreateCodeReviewInput: Swift.Equatable {
    /// Amazon CodeGuru Reviewer uses this value to prevent the accidental creation of duplicate code reviews if there are failures and retries.
    public var clientRequestToken: Swift.String?
    /// The name of the code review. The name of each code review in your Amazon Web Services account must be unique.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html) object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html). A code review can only be created on an associated repository. This is the ARN of the associated repository.
    /// This member is required.
    public var repositoryAssociationArn: Swift.String?
    /// The type of code review to create. This is specified using a [CodeReviewType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReviewType.html) object. You can create a code review only of type RepositoryAnalysis.
    /// This member is required.
    public var type: CodeGuruReviewerClientTypes.CodeReviewType?

    public init (
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        repositoryAssociationArn: Swift.String? = nil,
        type: CodeGuruReviewerClientTypes.CodeReviewType? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.repositoryAssociationArn = repositoryAssociationArn
        self.type = type
    }
}

struct CreateCodeReviewInputBody: Swift.Equatable {
    let name: Swift.String?
    let repositoryAssociationArn: Swift.String?
    let type: CodeGuruReviewerClientTypes.CodeReviewType?
    let clientRequestToken: Swift.String?
}

extension CreateCodeReviewInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case repositoryAssociationArn = "RepositoryAssociationArn"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let repositoryAssociationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repositoryAssociationArn)
        repositoryAssociationArn = repositoryAssociationArnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.CodeReviewType.self, forKey: .type)
        type = typeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension CreateCodeReviewOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCodeReviewOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateCodeReviewOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCodeReviewOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateCodeReviewOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.codeReview = output.codeReview
        } else {
            self.codeReview = nil
        }
    }
}

public struct CreateCodeReviewOutputResponse: Swift.Equatable {
    /// Information about a code review. A code review belongs to the associated repository that contains the reviewed code.
    public var codeReview: CodeGuruReviewerClientTypes.CodeReview?

    public init (
        codeReview: CodeGuruReviewerClientTypes.CodeReview? = nil
    )
    {
        self.codeReview = codeReview
    }
}

struct CreateCodeReviewOutputResponseBody: Swift.Equatable {
    let codeReview: CodeGuruReviewerClientTypes.CodeReview?
}

extension CreateCodeReviewOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeReview = "CodeReview"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeReviewDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.CodeReview.self, forKey: .codeReview)
        codeReview = codeReviewDecoded
    }
}

extension DescribeCodeReviewInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let codeReviewArn = codeReviewArn else {
            return nil
        }
        return "/codereviews/\(codeReviewArn.urlPercentEncoding())"
    }
}

public struct DescribeCodeReviewInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html) object.
    /// This member is required.
    public var codeReviewArn: Swift.String?

    public init (
        codeReviewArn: Swift.String? = nil
    )
    {
        self.codeReviewArn = codeReviewArn
    }
}

struct DescribeCodeReviewInputBody: Swift.Equatable {
}

extension DescribeCodeReviewInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeCodeReviewOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeCodeReviewOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeCodeReviewOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCodeReviewOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeCodeReviewOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.codeReview = output.codeReview
        } else {
            self.codeReview = nil
        }
    }
}

public struct DescribeCodeReviewOutputResponse: Swift.Equatable {
    /// Information about the code review.
    public var codeReview: CodeGuruReviewerClientTypes.CodeReview?

    public init (
        codeReview: CodeGuruReviewerClientTypes.CodeReview? = nil
    )
    {
        self.codeReview = codeReview
    }
}

struct DescribeCodeReviewOutputResponseBody: Swift.Equatable {
    let codeReview: CodeGuruReviewerClientTypes.CodeReview?
}

extension DescribeCodeReviewOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeReview = "CodeReview"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeReviewDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.CodeReview.self, forKey: .codeReview)
        codeReview = codeReviewDecoded
    }
}

extension DescribeRecommendationFeedbackInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let userId = userId {
                let userIdQueryItem = ClientRuntime.URLQueryItem(name: "UserId".urlPercentEncoding(), value: Swift.String(userId).urlPercentEncoding())
                items.append(userIdQueryItem)
            }
            guard let recommendationId = recommendationId else {
                let message = "Creating a URL Query Item failed. recommendationId is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let recommendationIdQueryItem = ClientRuntime.URLQueryItem(name: "RecommendationId".urlPercentEncoding(), value: Swift.String(recommendationId).urlPercentEncoding())
            items.append(recommendationIdQueryItem)
            return items
        }
    }
}

extension DescribeRecommendationFeedbackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let codeReviewArn = codeReviewArn else {
            return nil
        }
        return "/feedback/\(codeReviewArn.urlPercentEncoding())"
    }
}

public struct DescribeRecommendationFeedbackInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html) object.
    /// This member is required.
    public var codeReviewArn: Swift.String?
    /// The recommendation ID that can be used to track the provided recommendations and then to collect the feedback.
    /// This member is required.
    public var recommendationId: Swift.String?
    /// Optional parameter to describe the feedback for a given user. If this is not supplied, it defaults to the user making the request. The UserId is an IAM principal that can be specified as an Amazon Web Services account ID or an Amazon Resource Name (ARN). For more information, see [ Specifying a Principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying) in the Amazon Web Services Identity and Access Management User Guide.
    public var userId: Swift.String?

    public init (
        codeReviewArn: Swift.String? = nil,
        recommendationId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.codeReviewArn = codeReviewArn
        self.recommendationId = recommendationId
        self.userId = userId
    }
}

struct DescribeRecommendationFeedbackInputBody: Swift.Equatable {
}

extension DescribeRecommendationFeedbackInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeRecommendationFeedbackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRecommendationFeedbackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeRecommendationFeedbackOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRecommendationFeedbackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeRecommendationFeedbackOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.recommendationFeedback = output.recommendationFeedback
        } else {
            self.recommendationFeedback = nil
        }
    }
}

public struct DescribeRecommendationFeedbackOutputResponse: Swift.Equatable {
    /// The recommendation feedback given by the user.
    public var recommendationFeedback: CodeGuruReviewerClientTypes.RecommendationFeedback?

    public init (
        recommendationFeedback: CodeGuruReviewerClientTypes.RecommendationFeedback? = nil
    )
    {
        self.recommendationFeedback = recommendationFeedback
    }
}

struct DescribeRecommendationFeedbackOutputResponseBody: Swift.Equatable {
    let recommendationFeedback: CodeGuruReviewerClientTypes.RecommendationFeedback?
}

extension DescribeRecommendationFeedbackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recommendationFeedback = "RecommendationFeedback"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationFeedbackDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RecommendationFeedback.self, forKey: .recommendationFeedback)
        recommendationFeedback = recommendationFeedbackDecoded
    }
}

extension DescribeRepositoryAssociationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let associationArn = associationArn else {
            return nil
        }
        return "/associations/\(associationArn.urlPercentEncoding())"
    }
}

public struct DescribeRepositoryAssociationInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html) object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
    /// This member is required.
    public var associationArn: Swift.String?

    public init (
        associationArn: Swift.String? = nil
    )
    {
        self.associationArn = associationArn
    }
}

struct DescribeRepositoryAssociationInputBody: Swift.Equatable {
}

extension DescribeRepositoryAssociationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeRepositoryAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRepositoryAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeRepositoryAssociationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case notFoundException(NotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRepositoryAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeRepositoryAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.repositoryAssociation = output.repositoryAssociation
            self.tags = output.tags
        } else {
            self.repositoryAssociation = nil
            self.tags = nil
        }
    }
}

public struct DescribeRepositoryAssociationOutputResponse: Swift.Equatable {
    /// Information about the repository association.
    public var repositoryAssociation: CodeGuruReviewerClientTypes.RepositoryAssociation?
    /// An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:
    ///
    /// * A tag key (for example, CostCenter, Environment, Project, or Secret). Tag keys are case sensitive.
    ///
    /// * An optional field known as a tag value (for example, 111122223333, Production, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.
    public var tags: [Swift.String:Swift.String]?

    public init (
        repositoryAssociation: CodeGuruReviewerClientTypes.RepositoryAssociation? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.repositoryAssociation = repositoryAssociation
        self.tags = tags
    }
}

struct DescribeRepositoryAssociationOutputResponseBody: Swift.Equatable {
    let repositoryAssociation: CodeGuruReviewerClientTypes.RepositoryAssociation?
    let tags: [Swift.String:Swift.String]?
}

extension DescribeRepositoryAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case repositoryAssociation = "RepositoryAssociation"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryAssociationDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RepositoryAssociation.self, forKey: .repositoryAssociation)
        repositoryAssociation = repositoryAssociationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DisassociateRepositoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let associationArn = associationArn else {
            return nil
        }
        return "/associations/\(associationArn.urlPercentEncoding())"
    }
}

public struct DisassociateRepositoryInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html) object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
    /// This member is required.
    public var associationArn: Swift.String?

    public init (
        associationArn: Swift.String? = nil
    )
    {
        self.associationArn = associationArn
    }
}

struct DisassociateRepositoryInputBody: Swift.Equatable {
}

extension DisassociateRepositoryInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateRepositoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateRepositoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisassociateRepositoryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case notFoundException(NotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateRepositoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DisassociateRepositoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.repositoryAssociation = output.repositoryAssociation
            self.tags = output.tags
        } else {
            self.repositoryAssociation = nil
            self.tags = nil
        }
    }
}

public struct DisassociateRepositoryOutputResponse: Swift.Equatable {
    /// Information about the disassociated repository.
    public var repositoryAssociation: CodeGuruReviewerClientTypes.RepositoryAssociation?
    /// An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:
    ///
    /// * A tag key (for example, CostCenter, Environment, Project, or Secret). Tag keys are case sensitive.
    ///
    /// * An optional field known as a tag value (for example, 111122223333, Production, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.
    public var tags: [Swift.String:Swift.String]?

    public init (
        repositoryAssociation: CodeGuruReviewerClientTypes.RepositoryAssociation? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.repositoryAssociation = repositoryAssociation
        self.tags = tags
    }
}

struct DisassociateRepositoryOutputResponseBody: Swift.Equatable {
    let repositoryAssociation: CodeGuruReviewerClientTypes.RepositoryAssociation?
    let tags: [Swift.String:Swift.String]?
}

extension DisassociateRepositoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case repositoryAssociation = "RepositoryAssociation"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryAssociationDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RepositoryAssociation.self, forKey: .repositoryAssociation)
        repositoryAssociation = repositoryAssociationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CodeGuruReviewerClientTypes {
    public enum EncryptionOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aocmk
        case cmcmk
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionOption] {
            return [
                .aocmk,
                .cmcmk,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aocmk: return "AWS_OWNED_CMK"
            case .cmcmk: return "CUSTOMER_MANAGED_CMK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EncryptionOption(rawValue: rawValue) ?? EncryptionOption.sdkUnknown(rawValue)
        }
    }
}

extension CodeGuruReviewerClientTypes.EventInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about an event. The event might be a push, pull request, scheduled request, or another type of event.
    public struct EventInfo: Swift.Equatable {
        /// The name of the event. The possible names are pull_request, workflow_dispatch, schedule, and push
        public var name: Swift.String?
        /// The state of an event. The state might be open, closed, or another state.
        public var state: Swift.String?

        public init (
            name: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.name = name
            self.state = state
        }
    }

}

extension InternalServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The server encountered an internal error and is unable to complete the request.
public struct InternalServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    public enum JobState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case deleting
        case failed
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [JobState] {
            return [
                .completed,
                .deleting,
                .failed,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobState(rawValue: rawValue) ?? JobState.sdkUnknown(rawValue)
        }
    }
}

extension CodeGuruReviewerClientTypes.KMSKeyDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionOption = "EncryptionOption"
        case kmsKeyId = "KMSKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionOption = self.encryptionOption {
            try encodeContainer.encode(encryptionOption.rawValue, forKey: .encryptionOption)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let encryptionOptionDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.EncryptionOption.self, forKey: .encryptionOption)
        encryptionOption = encryptionOptionDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// An object that contains:
    ///
    /// * The encryption option for a repository association. It is either owned by Amazon Web Services Key Management Service (KMS) (AWS_OWNED_CMK) or customer managed (CUSTOMER_MANAGED_CMK).
    ///
    /// * The ID of the Amazon Web Services KMS key that is associated with a repository association.
    public struct KMSKeyDetails: Swift.Equatable {
        /// The encryption option for a repository association. It is either owned by Amazon Web Services Key Management Service (KMS) (AWS_OWNED_CMK) or customer managed (CUSTOMER_MANAGED_CMK).
        public var encryptionOption: CodeGuruReviewerClientTypes.EncryptionOption?
        /// The ID of the Amazon Web Services KMS key that is associated with a repository association.
        public var kmsKeyId: Swift.String?

        public init (
            encryptionOption: CodeGuruReviewerClientTypes.EncryptionOption? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.encryptionOption = encryptionOption
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension ListCodeReviewsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let states = states {
                states.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "States".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            if let repositoryNames = repositoryNames {
                repositoryNames.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "RepositoryNames".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            guard let type = type else {
                let message = "Creating a URL Query Item failed. type is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let typeQueryItem = ClientRuntime.URLQueryItem(name: "Type".urlPercentEncoding(), value: Swift.String(type.rawValue).urlPercentEncoding())
            items.append(typeQueryItem)
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let providerTypes = providerTypes {
                providerTypes.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "ProviderTypes".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListCodeReviewsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/codereviews"
    }
}

public struct ListCodeReviewsInput: Swift.Equatable {
    /// The maximum number of results that are returned per call. The default is 100.
    public var maxResults: Swift.Int?
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged.
    public var nextToken: Swift.String?
    /// List of provider types for filtering that needs to be applied before displaying the result. For example, providerTypes=[GitHub] lists code reviews from GitHub.
    public var providerTypes: [CodeGuruReviewerClientTypes.ProviderType]?
    /// List of repository names for filtering that needs to be applied before displaying the result.
    public var repositoryNames: [Swift.String]?
    /// List of states for filtering that needs to be applied before displaying the result. For example, states=[Pending] lists code reviews in the Pending state. The valid code review states are:
    ///
    /// * Completed: The code review is complete.
    ///
    /// * Pending: The code review started and has not completed or failed.
    ///
    /// * Failed: The code review failed.
    ///
    /// * Deleting: The code review is being deleted.
    public var states: [CodeGuruReviewerClientTypes.JobState]?
    /// The type of code reviews to list in the response.
    /// This member is required.
    public var type: CodeGuruReviewerClientTypes.ModelType?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        providerTypes: [CodeGuruReviewerClientTypes.ProviderType]? = nil,
        repositoryNames: [Swift.String]? = nil,
        states: [CodeGuruReviewerClientTypes.JobState]? = nil,
        type: CodeGuruReviewerClientTypes.ModelType? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.providerTypes = providerTypes
        self.repositoryNames = repositoryNames
        self.states = states
        self.type = type
    }
}

struct ListCodeReviewsInputBody: Swift.Equatable {
}

extension ListCodeReviewsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListCodeReviewsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCodeReviewsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListCodeReviewsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCodeReviewsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListCodeReviewsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.codeReviewSummaries = output.codeReviewSummaries
            self.nextToken = output.nextToken
        } else {
            self.codeReviewSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListCodeReviewsOutputResponse: Swift.Equatable {
    /// A list of code reviews that meet the criteria of the request.
    public var codeReviewSummaries: [CodeGuruReviewerClientTypes.CodeReviewSummary]?
    /// Pagination token.
    public var nextToken: Swift.String?

    public init (
        codeReviewSummaries: [CodeGuruReviewerClientTypes.CodeReviewSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.codeReviewSummaries = codeReviewSummaries
        self.nextToken = nextToken
    }
}

struct ListCodeReviewsOutputResponseBody: Swift.Equatable {
    let codeReviewSummaries: [CodeGuruReviewerClientTypes.CodeReviewSummary]?
    let nextToken: Swift.String?
}

extension ListCodeReviewsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeReviewSummaries = "CodeReviewSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeReviewSummariesContainer = try containerValues.decodeIfPresent([CodeGuruReviewerClientTypes.CodeReviewSummary?].self, forKey: .codeReviewSummaries)
        var codeReviewSummariesDecoded0:[CodeGuruReviewerClientTypes.CodeReviewSummary]? = nil
        if let codeReviewSummariesContainer = codeReviewSummariesContainer {
            codeReviewSummariesDecoded0 = [CodeGuruReviewerClientTypes.CodeReviewSummary]()
            for structure0 in codeReviewSummariesContainer {
                if let structure0 = structure0 {
                    codeReviewSummariesDecoded0?.append(structure0)
                }
            }
        }
        codeReviewSummaries = codeReviewSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListRecommendationFeedbackInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let recommendationIds = recommendationIds {
                recommendationIds.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "RecommendationIds".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let userIds = userIds {
                userIds.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "UserIds".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            return items
        }
    }
}

extension ListRecommendationFeedbackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let codeReviewArn = codeReviewArn else {
            return nil
        }
        return "/feedback/\(codeReviewArn.urlPercentEncoding())/RecommendationFeedback"
    }
}

public struct ListRecommendationFeedbackInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html) object.
    /// This member is required.
    public var codeReviewArn: Swift.String?
    /// The maximum number of results that are returned per call. The default is 100.
    public var maxResults: Swift.Int?
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged.
    public var nextToken: Swift.String?
    /// Used to query the recommendation feedback for a given recommendation.
    public var recommendationIds: [Swift.String]?
    /// An Amazon Web Services user's account ID or Amazon Resource Name (ARN). Use this ID to query the recommendation feedback for a code review from that user. The UserId is an IAM principal that can be specified as an Amazon Web Services account ID or an Amazon Resource Name (ARN). For more information, see [ Specifying a Principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying) in the Amazon Web Services Identity and Access Management User Guide.
    public var userIds: [Swift.String]?

    public init (
        codeReviewArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        recommendationIds: [Swift.String]? = nil,
        userIds: [Swift.String]? = nil
    )
    {
        self.codeReviewArn = codeReviewArn
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.recommendationIds = recommendationIds
        self.userIds = userIds
    }
}

struct ListRecommendationFeedbackInputBody: Swift.Equatable {
}

extension ListRecommendationFeedbackInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListRecommendationFeedbackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRecommendationFeedbackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRecommendationFeedbackOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRecommendationFeedbackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRecommendationFeedbackOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.recommendationFeedbackSummaries = output.recommendationFeedbackSummaries
        } else {
            self.nextToken = nil
            self.recommendationFeedbackSummaries = nil
        }
    }
}

public struct ListRecommendationFeedbackOutputResponse: Swift.Equatable {
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged.
    public var nextToken: Swift.String?
    /// Recommendation feedback summaries corresponding to the code review ARN.
    public var recommendationFeedbackSummaries: [CodeGuruReviewerClientTypes.RecommendationFeedbackSummary]?

    public init (
        nextToken: Swift.String? = nil,
        recommendationFeedbackSummaries: [CodeGuruReviewerClientTypes.RecommendationFeedbackSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendationFeedbackSummaries = recommendationFeedbackSummaries
    }
}

struct ListRecommendationFeedbackOutputResponseBody: Swift.Equatable {
    let recommendationFeedbackSummaries: [CodeGuruReviewerClientTypes.RecommendationFeedbackSummary]?
    let nextToken: Swift.String?
}

extension ListRecommendationFeedbackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case recommendationFeedbackSummaries = "RecommendationFeedbackSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationFeedbackSummariesContainer = try containerValues.decodeIfPresent([CodeGuruReviewerClientTypes.RecommendationFeedbackSummary?].self, forKey: .recommendationFeedbackSummaries)
        var recommendationFeedbackSummariesDecoded0:[CodeGuruReviewerClientTypes.RecommendationFeedbackSummary]? = nil
        if let recommendationFeedbackSummariesContainer = recommendationFeedbackSummariesContainer {
            recommendationFeedbackSummariesDecoded0 = [CodeGuruReviewerClientTypes.RecommendationFeedbackSummary]()
            for structure0 in recommendationFeedbackSummariesContainer {
                if let structure0 = structure0 {
                    recommendationFeedbackSummariesDecoded0?.append(structure0)
                }
            }
        }
        recommendationFeedbackSummaries = recommendationFeedbackSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListRecommendationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListRecommendationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let codeReviewArn = codeReviewArn else {
            return nil
        }
        return "/codereviews/\(codeReviewArn.urlPercentEncoding())/Recommendations"
    }
}

public struct ListRecommendationsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html) object.
    /// This member is required.
    public var codeReviewArn: Swift.String?
    /// The maximum number of results that are returned per call. The default is 100.
    public var maxResults: Swift.Int?
    /// Pagination token.
    public var nextToken: Swift.String?

    public init (
        codeReviewArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.codeReviewArn = codeReviewArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListRecommendationsInputBody: Swift.Equatable {
}

extension ListRecommendationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.recommendationSummaries = output.recommendationSummaries
        } else {
            self.nextToken = nil
            self.recommendationSummaries = nil
        }
    }
}

public struct ListRecommendationsOutputResponse: Swift.Equatable {
    /// Pagination token.
    public var nextToken: Swift.String?
    /// List of recommendations for the requested code review.
    public var recommendationSummaries: [CodeGuruReviewerClientTypes.RecommendationSummary]?

    public init (
        nextToken: Swift.String? = nil,
        recommendationSummaries: [CodeGuruReviewerClientTypes.RecommendationSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendationSummaries = recommendationSummaries
    }
}

struct ListRecommendationsOutputResponseBody: Swift.Equatable {
    let recommendationSummaries: [CodeGuruReviewerClientTypes.RecommendationSummary]?
    let nextToken: Swift.String?
}

extension ListRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case recommendationSummaries = "RecommendationSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationSummariesContainer = try containerValues.decodeIfPresent([CodeGuruReviewerClientTypes.RecommendationSummary?].self, forKey: .recommendationSummaries)
        var recommendationSummariesDecoded0:[CodeGuruReviewerClientTypes.RecommendationSummary]? = nil
        if let recommendationSummariesContainer = recommendationSummariesContainer {
            recommendationSummariesDecoded0 = [CodeGuruReviewerClientTypes.RecommendationSummary]()
            for structure0 in recommendationSummariesContainer {
                if let structure0 = structure0 {
                    recommendationSummariesDecoded0?.append(structure0)
                }
            }
        }
        recommendationSummaries = recommendationSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListRepositoryAssociationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let states = states {
                states.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "State".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            if let names = names {
                names.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "Name".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let providerTypes = providerTypes {
                providerTypes.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "ProviderType".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let owners = owners {
                owners.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "Owner".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            return items
        }
    }
}

extension ListRepositoryAssociationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/associations"
    }
}

public struct ListRepositoryAssociationsInput: Swift.Equatable {
    /// The maximum number of repository association results returned by ListRepositoryAssociations in paginated output. When this parameter is used, ListRepositoryAssociations only returns maxResults results in a single page with a nextToken response element. The remaining results of the initial request can be seen by sending another ListRepositoryAssociations request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, ListRepositoryAssociations returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// List of repository names to use as a filter.
    public var names: [Swift.String]?
    /// The nextToken value returned from a previous paginated ListRepositoryAssociations request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. Treat this token as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// List of owners to use as a filter. For Amazon Web Services CodeCommit, it is the name of the CodeCommit account that was used to associate the repository. For other repository source providers, such as Bitbucket and GitHub Enterprise Server, this is name of the account that was used to associate the repository.
    public var owners: [Swift.String]?
    /// List of provider types to use as a filter.
    public var providerTypes: [CodeGuruReviewerClientTypes.ProviderType]?
    /// List of repository association states to use as a filter. The valid repository association states are:
    ///
    /// * Associated: The repository association is complete.
    ///
    /// * Associating: CodeGuru Reviewer is:
    ///
    /// * Setting up pull request notifications. This is required for pull requests to trigger a CodeGuru Reviewer review. If your repository ProviderType is GitHub, GitHub Enterprise Server, or Bitbucket, CodeGuru Reviewer creates webhooks in your repository to trigger CodeGuru Reviewer reviews. If you delete these webhooks, reviews of code in your repository cannot be triggered.
    ///
    /// * Setting up source code access. This is required for CodeGuru Reviewer to securely clone code in your repository.
    ///
    ///
    ///
    ///
    /// * Failed: The repository failed to associate or disassociate.
    ///
    /// * Disassociating: CodeGuru Reviewer is removing the repository's pull request notifications and source code access.
    ///
    /// * Disassociated: CodeGuru Reviewer successfully disassociated the repository. You can create a new association with this repository if you want to review source code in it later. You can control access to code reviews created in anassociated repository with tags after it has been disassociated. For more information, see [Using tags to control access to associated repositories](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/auth-and-access-control-using-tags.html) in the Amazon CodeGuru Reviewer User Guide.
    public var states: [CodeGuruReviewerClientTypes.RepositoryAssociationState]?

    public init (
        maxResults: Swift.Int? = nil,
        names: [Swift.String]? = nil,
        nextToken: Swift.String? = nil,
        owners: [Swift.String]? = nil,
        providerTypes: [CodeGuruReviewerClientTypes.ProviderType]? = nil,
        states: [CodeGuruReviewerClientTypes.RepositoryAssociationState]? = nil
    )
    {
        self.maxResults = maxResults
        self.names = names
        self.nextToken = nextToken
        self.owners = owners
        self.providerTypes = providerTypes
        self.states = states
    }
}

struct ListRepositoryAssociationsInputBody: Swift.Equatable {
}

extension ListRepositoryAssociationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListRepositoryAssociationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRepositoryAssociationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRepositoryAssociationsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRepositoryAssociationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRepositoryAssociationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.repositoryAssociationSummaries = output.repositoryAssociationSummaries
        } else {
            self.nextToken = nil
            self.repositoryAssociationSummaries = nil
        }
    }
}

public struct ListRepositoryAssociationsOutputResponse: Swift.Equatable {
    /// The nextToken value to include in a future ListRecommendations request. When the results of a ListRecommendations request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// A list of repository associations that meet the criteria of the request.
    public var repositoryAssociationSummaries: [CodeGuruReviewerClientTypes.RepositoryAssociationSummary]?

    public init (
        nextToken: Swift.String? = nil,
        repositoryAssociationSummaries: [CodeGuruReviewerClientTypes.RepositoryAssociationSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.repositoryAssociationSummaries = repositoryAssociationSummaries
    }
}

struct ListRepositoryAssociationsOutputResponseBody: Swift.Equatable {
    let repositoryAssociationSummaries: [CodeGuruReviewerClientTypes.RepositoryAssociationSummary]?
    let nextToken: Swift.String?
}

extension ListRepositoryAssociationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case repositoryAssociationSummaries = "RepositoryAssociationSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryAssociationSummariesContainer = try containerValues.decodeIfPresent([CodeGuruReviewerClientTypes.RepositoryAssociationSummary?].self, forKey: .repositoryAssociationSummaries)
        var repositoryAssociationSummariesDecoded0:[CodeGuruReviewerClientTypes.RepositoryAssociationSummary]? = nil
        if let repositoryAssociationSummariesContainer = repositoryAssociationSummariesContainer {
            repositoryAssociationSummariesDecoded0 = [CodeGuruReviewerClientTypes.RepositoryAssociationSummary]()
            for structure0 in repositoryAssociationSummariesContainer {
                if let structure0 = structure0 {
                    repositoryAssociationSummariesDecoded0?.append(structure0)
                }
            }
        }
        repositoryAssociationSummaries = repositoryAssociationSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html) object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:
    ///
    /// * A tag key (for example, CostCenter, Environment, Project, or Secret). Tag keys are case sensitive.
    ///
    /// * An optional field known as a tag value (for example, 111122223333, Production, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.
    public var tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CodeGuruReviewerClientTypes.Metrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case findingsCount = "FindingsCount"
        case meteredLinesOfCodeCount = "MeteredLinesOfCodeCount"
        case suppressedLinesOfCodeCount = "SuppressedLinesOfCodeCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let findingsCount = self.findingsCount {
            try encodeContainer.encode(findingsCount, forKey: .findingsCount)
        }
        if let meteredLinesOfCodeCount = self.meteredLinesOfCodeCount {
            try encodeContainer.encode(meteredLinesOfCodeCount, forKey: .meteredLinesOfCodeCount)
        }
        if let suppressedLinesOfCodeCount = self.suppressedLinesOfCodeCount {
            try encodeContainer.encode(suppressedLinesOfCodeCount, forKey: .suppressedLinesOfCodeCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meteredLinesOfCodeCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .meteredLinesOfCodeCount)
        meteredLinesOfCodeCount = meteredLinesOfCodeCountDecoded
        let suppressedLinesOfCodeCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .suppressedLinesOfCodeCount)
        suppressedLinesOfCodeCount = suppressedLinesOfCodeCountDecoded
        let findingsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .findingsCount)
        findingsCount = findingsCountDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about the statistics from the code review.
    public struct Metrics: Swift.Equatable {
        /// Total number of recommendations found in the code review.
        public var findingsCount: Swift.Int?
        /// MeteredLinesOfCodeCount is the number of lines of code in the repository where the code review happened. This does not include non-code lines such as comments and blank lines.
        public var meteredLinesOfCodeCount: Swift.Int?
        /// SuppressedLinesOfCodeCount is the number of lines of code in the repository where the code review happened that CodeGuru Reviewer did not analyze. The lines suppressed in the analysis is based on the excludeFiles variable in the aws-codeguru-reviewer.yml file. This number does not include non-code lines such as comments and blank lines.
        public var suppressedLinesOfCodeCount: Swift.Int?

        public init (
            findingsCount: Swift.Int? = nil,
            meteredLinesOfCodeCount: Swift.Int? = nil,
            suppressedLinesOfCodeCount: Swift.Int? = nil
        )
        {
            self.findingsCount = findingsCount
            self.meteredLinesOfCodeCount = meteredLinesOfCodeCount
            self.suppressedLinesOfCodeCount = suppressedLinesOfCodeCount
        }
    }

}

extension CodeGuruReviewerClientTypes.MetricsSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case findingsCount = "FindingsCount"
        case meteredLinesOfCodeCount = "MeteredLinesOfCodeCount"
        case suppressedLinesOfCodeCount = "SuppressedLinesOfCodeCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let findingsCount = self.findingsCount {
            try encodeContainer.encode(findingsCount, forKey: .findingsCount)
        }
        if let meteredLinesOfCodeCount = self.meteredLinesOfCodeCount {
            try encodeContainer.encode(meteredLinesOfCodeCount, forKey: .meteredLinesOfCodeCount)
        }
        if let suppressedLinesOfCodeCount = self.suppressedLinesOfCodeCount {
            try encodeContainer.encode(suppressedLinesOfCodeCount, forKey: .suppressedLinesOfCodeCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meteredLinesOfCodeCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .meteredLinesOfCodeCount)
        meteredLinesOfCodeCount = meteredLinesOfCodeCountDecoded
        let suppressedLinesOfCodeCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .suppressedLinesOfCodeCount)
        suppressedLinesOfCodeCount = suppressedLinesOfCodeCountDecoded
        let findingsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .findingsCount)
        findingsCount = findingsCountDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about metrics summaries.
    public struct MetricsSummary: Swift.Equatable {
        /// Total number of recommendations found in the code review.
        public var findingsCount: Swift.Int?
        /// Lines of code metered in the code review. For the initial code review pull request and all subsequent revisions, this includes all lines of code in the files added to the pull request. In subsequent revisions, for files that already existed in the pull request, this includes only the changed lines of code. In both cases, this does not include non-code lines such as comments and import statements. For example, if you submit a pull request containing 5 files, each with 500 lines of code, and in a subsequent revision you added a new file with 200 lines of code, and also modified a total of 25 lines across the initial 5 files, MeteredLinesOfCodeCount includes the first 5 files (5 * 500 = 2,500 lines), the new file (200 lines) and the 25 changed lines of code for a total of 2,725 lines of code.
        public var meteredLinesOfCodeCount: Swift.Int?
        /// Lines of code suppressed in the code review based on the excludeFiles element in the aws-codeguru-reviewer.yml file. For full repository analyses, this number includes all lines of code in the files that are suppressed. For pull requests, this number only includes the changed lines of code that are suppressed. In both cases, this number does not include non-code lines such as comments and import statements. For example, if you initiate a full repository analysis on a repository containing 5 files, each file with 100 lines of code, and 2 files are listed as excluded in the aws-codeguru-reviewer.yml file, then SuppressedLinesOfCodeCount returns 200 (2 * 100) as the total number of lines of code suppressed. However, if you submit a pull request for the same repository, then SuppressedLinesOfCodeCount only includes the lines in the 2 files that changed. If only 1 of the 2 files changed in the pull request, then SuppressedLinesOfCodeCount returns 100 (1 * 100) as the total number of lines of code suppressed.
        public var suppressedLinesOfCodeCount: Swift.Int?

        public init (
            findingsCount: Swift.Int? = nil,
            meteredLinesOfCodeCount: Swift.Int? = nil,
            suppressedLinesOfCodeCount: Swift.Int? = nil
        )
        {
            self.findingsCount = findingsCount
            self.meteredLinesOfCodeCount = meteredLinesOfCodeCount
            self.suppressedLinesOfCodeCount = suppressedLinesOfCodeCount
        }
    }

}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource specified in the request was not found.
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    public enum ProviderType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bitbucket
        case codeCommit
        case gitHub
        case gitHubEnterpriseServer
        case s3Bucket
        case sdkUnknown(Swift.String)

        public static var allCases: [ProviderType] {
            return [
                .bitbucket,
                .codeCommit,
                .gitHub,
                .gitHubEnterpriseServer,
                .s3Bucket,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bitbucket: return "Bitbucket"
            case .codeCommit: return "CodeCommit"
            case .gitHub: return "GitHub"
            case .gitHubEnterpriseServer: return "GitHubEnterpriseServer"
            case .s3Bucket: return "S3Bucket"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProviderType(rawValue: rawValue) ?? ProviderType.sdkUnknown(rawValue)
        }
    }
}

extension PutRecommendationFeedbackInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeReviewArn = "CodeReviewArn"
        case reactions = "Reactions"
        case recommendationId = "RecommendationId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codeReviewArn = self.codeReviewArn {
            try encodeContainer.encode(codeReviewArn, forKey: .codeReviewArn)
        }
        if let reactions = reactions {
            var reactionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reactions)
            for reaction0 in reactions {
                try reactionsContainer.encode(reaction0.rawValue)
            }
        }
        if let recommendationId = self.recommendationId {
            try encodeContainer.encode(recommendationId, forKey: .recommendationId)
        }
    }
}

extension PutRecommendationFeedbackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/feedback"
    }
}

public struct PutRecommendationFeedbackInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html) object.
    /// This member is required.
    public var codeReviewArn: Swift.String?
    /// List for storing reactions. Reactions are utf-8 text code for emojis. If you send an empty list it clears all your feedback.
    /// This member is required.
    public var reactions: [CodeGuruReviewerClientTypes.Reaction]?
    /// The recommendation ID that can be used to track the provided recommendations and then to collect the feedback.
    /// This member is required.
    public var recommendationId: Swift.String?

    public init (
        codeReviewArn: Swift.String? = nil,
        reactions: [CodeGuruReviewerClientTypes.Reaction]? = nil,
        recommendationId: Swift.String? = nil
    )
    {
        self.codeReviewArn = codeReviewArn
        self.reactions = reactions
        self.recommendationId = recommendationId
    }
}

struct PutRecommendationFeedbackInputBody: Swift.Equatable {
    let codeReviewArn: Swift.String?
    let recommendationId: Swift.String?
    let reactions: [CodeGuruReviewerClientTypes.Reaction]?
}

extension PutRecommendationFeedbackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeReviewArn = "CodeReviewArn"
        case reactions = "Reactions"
        case recommendationId = "RecommendationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeReviewArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeReviewArn)
        codeReviewArn = codeReviewArnDecoded
        let recommendationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationId)
        recommendationId = recommendationIdDecoded
        let reactionsContainer = try containerValues.decodeIfPresent([CodeGuruReviewerClientTypes.Reaction?].self, forKey: .reactions)
        var reactionsDecoded0:[CodeGuruReviewerClientTypes.Reaction]? = nil
        if let reactionsContainer = reactionsContainer {
            reactionsDecoded0 = [CodeGuruReviewerClientTypes.Reaction]()
            for enum0 in reactionsContainer {
                if let enum0 = enum0 {
                    reactionsDecoded0?.append(enum0)
                }
            }
        }
        reactions = reactionsDecoded0
    }
}

extension PutRecommendationFeedbackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutRecommendationFeedbackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutRecommendationFeedbackOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutRecommendationFeedbackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutRecommendationFeedbackOutputResponse: Swift.Equatable {

    public init () { }
}

extension CodeGuruReviewerClientTypes {
    public enum Reaction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case thumbsDown
        case thumbsUp
        case sdkUnknown(Swift.String)

        public static var allCases: [Reaction] {
            return [
                .thumbsDown,
                .thumbsUp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .thumbsDown: return "ThumbsDown"
            case .thumbsUp: return "ThumbsUp"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Reaction(rawValue: rawValue) ?? Reaction.sdkUnknown(rawValue)
        }
    }
}

extension CodeGuruReviewerClientTypes {
    public enum RecommendationCategory: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsBestPractices
        case awsCloudformationIssues
        case codeInconsistencies
        case codeMaintenanceIssues
        case concurrencyIssues
        case duplicateCode
        case inputValidations
        case javaBestPractices
        case pythonBestPractices
        case resourceLeaks
        case securityIssues
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationCategory] {
            return [
                .awsBestPractices,
                .awsCloudformationIssues,
                .codeInconsistencies,
                .codeMaintenanceIssues,
                .concurrencyIssues,
                .duplicateCode,
                .inputValidations,
                .javaBestPractices,
                .pythonBestPractices,
                .resourceLeaks,
                .securityIssues,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsBestPractices: return "AWSBestPractices"
            case .awsCloudformationIssues: return "AWSCloudFormationIssues"
            case .codeInconsistencies: return "CodeInconsistencies"
            case .codeMaintenanceIssues: return "CodeMaintenanceIssues"
            case .concurrencyIssues: return "ConcurrencyIssues"
            case .duplicateCode: return "DuplicateCode"
            case .inputValidations: return "InputValidations"
            case .javaBestPractices: return "JavaBestPractices"
            case .pythonBestPractices: return "PythonBestPractices"
            case .resourceLeaks: return "ResourceLeaks"
            case .securityIssues: return "SecurityIssues"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecommendationCategory(rawValue: rawValue) ?? RecommendationCategory.sdkUnknown(rawValue)
        }
    }
}

extension CodeGuruReviewerClientTypes.RecommendationFeedback: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeReviewArn = "CodeReviewArn"
        case createdTimeStamp = "CreatedTimeStamp"
        case lastUpdatedTimeStamp = "LastUpdatedTimeStamp"
        case reactions = "Reactions"
        case recommendationId = "RecommendationId"
        case userId = "UserId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codeReviewArn = self.codeReviewArn {
            try encodeContainer.encode(codeReviewArn, forKey: .codeReviewArn)
        }
        if let createdTimeStamp = self.createdTimeStamp {
            try encodeContainer.encodeTimestamp(createdTimeStamp, format: .epochSeconds, forKey: .createdTimeStamp)
        }
        if let lastUpdatedTimeStamp = self.lastUpdatedTimeStamp {
            try encodeContainer.encodeTimestamp(lastUpdatedTimeStamp, format: .epochSeconds, forKey: .lastUpdatedTimeStamp)
        }
        if let reactions = reactions {
            var reactionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reactions)
            for reaction0 in reactions {
                try reactionsContainer.encode(reaction0.rawValue)
            }
        }
        if let recommendationId = self.recommendationId {
            try encodeContainer.encode(recommendationId, forKey: .recommendationId)
        }
        if let userId = self.userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeReviewArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeReviewArn)
        codeReviewArn = codeReviewArnDecoded
        let recommendationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationId)
        recommendationId = recommendationIdDecoded
        let reactionsContainer = try containerValues.decodeIfPresent([CodeGuruReviewerClientTypes.Reaction?].self, forKey: .reactions)
        var reactionsDecoded0:[CodeGuruReviewerClientTypes.Reaction]? = nil
        if let reactionsContainer = reactionsContainer {
            reactionsDecoded0 = [CodeGuruReviewerClientTypes.Reaction]()
            for enum0 in reactionsContainer {
                if let enum0 = enum0 {
                    reactionsDecoded0?.append(enum0)
                }
            }
        }
        reactions = reactionsDecoded0
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let createdTimeStampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdTimeStamp)
        createdTimeStamp = createdTimeStampDecoded
        let lastUpdatedTimeStampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimeStamp)
        lastUpdatedTimeStamp = lastUpdatedTimeStampDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about the recommendation feedback.
    public struct RecommendationFeedback: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html) object.
        public var codeReviewArn: Swift.String?
        /// The time at which the feedback was created.
        public var createdTimeStamp: ClientRuntime.Date?
        /// The time at which the feedback was last updated.
        public var lastUpdatedTimeStamp: ClientRuntime.Date?
        /// List for storing reactions. Reactions are utf-8 text code for emojis. You can send an empty list to clear off all your feedback.
        public var reactions: [CodeGuruReviewerClientTypes.Reaction]?
        /// The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.
        public var recommendationId: Swift.String?
        /// The ID of the user that made the API call. The UserId is an IAM principal that can be specified as an Amazon Web Services account ID or an Amazon Resource Name (ARN). For more information, see [ Specifying a Principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying) in the Amazon Web Services Identity and Access Management User Guide.
        public var userId: Swift.String?

        public init (
            codeReviewArn: Swift.String? = nil,
            createdTimeStamp: ClientRuntime.Date? = nil,
            lastUpdatedTimeStamp: ClientRuntime.Date? = nil,
            reactions: [CodeGuruReviewerClientTypes.Reaction]? = nil,
            recommendationId: Swift.String? = nil,
            userId: Swift.String? = nil
        )
        {
            self.codeReviewArn = codeReviewArn
            self.createdTimeStamp = createdTimeStamp
            self.lastUpdatedTimeStamp = lastUpdatedTimeStamp
            self.reactions = reactions
            self.recommendationId = recommendationId
            self.userId = userId
        }
    }

}

extension CodeGuruReviewerClientTypes.RecommendationFeedbackSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reactions = "Reactions"
        case recommendationId = "RecommendationId"
        case userId = "UserId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reactions = reactions {
            var reactionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reactions)
            for reaction0 in reactions {
                try reactionsContainer.encode(reaction0.rawValue)
            }
        }
        if let recommendationId = self.recommendationId {
            try encodeContainer.encode(recommendationId, forKey: .recommendationId)
        }
        if let userId = self.userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationId)
        recommendationId = recommendationIdDecoded
        let reactionsContainer = try containerValues.decodeIfPresent([CodeGuruReviewerClientTypes.Reaction?].self, forKey: .reactions)
        var reactionsDecoded0:[CodeGuruReviewerClientTypes.Reaction]? = nil
        if let reactionsContainer = reactionsContainer {
            reactionsDecoded0 = [CodeGuruReviewerClientTypes.Reaction]()
            for enum0 in reactionsContainer {
                if let enum0 = enum0 {
                    reactionsDecoded0?.append(enum0)
                }
            }
        }
        reactions = reactionsDecoded0
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about recommendation feedback summaries.
    public struct RecommendationFeedbackSummary: Swift.Equatable {
        /// List for storing reactions. Reactions are utf-8 text code for emojis.
        public var reactions: [CodeGuruReviewerClientTypes.Reaction]?
        /// The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.
        public var recommendationId: Swift.String?
        /// The ID of the user that gave the feedback. The UserId is an IAM principal that can be specified as an Amazon Web Services account ID or an Amazon Resource Name (ARN). For more information, see [ Specifying a Principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying) in the Amazon Web Services Identity and Access Management User Guide.
        public var userId: Swift.String?

        public init (
            reactions: [CodeGuruReviewerClientTypes.Reaction]? = nil,
            recommendationId: Swift.String? = nil,
            userId: Swift.String? = nil
        )
        {
            self.reactions = reactions
            self.recommendationId = recommendationId
            self.userId = userId
        }
    }

}

extension CodeGuruReviewerClientTypes.RecommendationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case endLine = "EndLine"
        case filePath = "FilePath"
        case recommendationCategory = "RecommendationCategory"
        case recommendationId = "RecommendationId"
        case ruleMetadata = "RuleMetadata"
        case severity = "Severity"
        case startLine = "StartLine"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let endLine = self.endLine {
            try encodeContainer.encode(endLine, forKey: .endLine)
        }
        if let filePath = self.filePath {
            try encodeContainer.encode(filePath, forKey: .filePath)
        }
        if let recommendationCategory = self.recommendationCategory {
            try encodeContainer.encode(recommendationCategory.rawValue, forKey: .recommendationCategory)
        }
        if let recommendationId = self.recommendationId {
            try encodeContainer.encode(recommendationId, forKey: .recommendationId)
        }
        if let ruleMetadata = self.ruleMetadata {
            try encodeContainer.encode(ruleMetadata, forKey: .ruleMetadata)
        }
        if let severity = self.severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let startLine = self.startLine {
            try encodeContainer.encode(startLine, forKey: .startLine)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filePath)
        filePath = filePathDecoded
        let recommendationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationId)
        recommendationId = recommendationIdDecoded
        let startLineDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startLine)
        startLine = startLineDecoded
        let endLineDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endLine)
        endLine = endLineDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let recommendationCategoryDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RecommendationCategory.self, forKey: .recommendationCategory)
        recommendationCategory = recommendationCategoryDecoded
        let ruleMetadataDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RuleMetadata.self, forKey: .ruleMetadata)
        ruleMetadata = ruleMetadataDecoded
        let severityDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.Severity.self, forKey: .severity)
        severity = severityDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about recommendations.
    public struct RecommendationSummary: Swift.Equatable {
        /// A description of the recommendation generated by CodeGuru Reviewer for the lines of code between the start line and the end line.
        public var description: Swift.String?
        /// Last line where the recommendation is applicable in the source commit or source branch. For a single line comment the start line and end line values are the same.
        public var endLine: Swift.Int?
        /// Name of the file on which a recommendation is provided.
        public var filePath: Swift.String?
        /// The type of a recommendation.
        public var recommendationCategory: CodeGuruReviewerClientTypes.RecommendationCategory?
        /// The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.
        public var recommendationId: Swift.String?
        /// Metadata about a rule. Rule metadata includes an ID, a name, a list of tags, and a short and long description. CodeGuru Reviewer uses rules to analyze code. A rule's recommendation is included in analysis results if code is detected that violates the rule.
        public var ruleMetadata: CodeGuruReviewerClientTypes.RuleMetadata?
        /// The severity of the issue in the code that generated this recommendation.
        public var severity: CodeGuruReviewerClientTypes.Severity?
        /// Start line from where the recommendation is applicable in the source commit or source branch.
        public var startLine: Swift.Int?

        public init (
            description: Swift.String? = nil,
            endLine: Swift.Int? = nil,
            filePath: Swift.String? = nil,
            recommendationCategory: CodeGuruReviewerClientTypes.RecommendationCategory? = nil,
            recommendationId: Swift.String? = nil,
            ruleMetadata: CodeGuruReviewerClientTypes.RuleMetadata? = nil,
            severity: CodeGuruReviewerClientTypes.Severity? = nil,
            startLine: Swift.Int? = nil
        )
        {
            self.description = description
            self.endLine = endLine
            self.filePath = filePath
            self.recommendationCategory = recommendationCategory
            self.recommendationId = recommendationId
            self.ruleMetadata = ruleMetadata
            self.severity = severity
            self.startLine = startLine
        }
    }

}

extension CodeGuruReviewerClientTypes.Repository: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bitbucket = "Bitbucket"
        case codeCommit = "CodeCommit"
        case gitHubEnterpriseServer = "GitHubEnterpriseServer"
        case s3Bucket = "S3Bucket"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bitbucket = self.bitbucket {
            try encodeContainer.encode(bitbucket, forKey: .bitbucket)
        }
        if let codeCommit = self.codeCommit {
            try encodeContainer.encode(codeCommit, forKey: .codeCommit)
        }
        if let gitHubEnterpriseServer = self.gitHubEnterpriseServer {
            try encodeContainer.encode(gitHubEnterpriseServer, forKey: .gitHubEnterpriseServer)
        }
        if let s3Bucket = self.s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeCommitDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.CodeCommitRepository.self, forKey: .codeCommit)
        codeCommit = codeCommitDecoded
        let bitbucketDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.ThirdPartySourceRepository.self, forKey: .bitbucket)
        bitbucket = bitbucketDecoded
        let gitHubEnterpriseServerDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.ThirdPartySourceRepository.self, forKey: .gitHubEnterpriseServer)
        gitHubEnterpriseServer = gitHubEnterpriseServerDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.S3Repository.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about an associated Amazon Web Services CodeCommit repository or an associated repository that is managed by Amazon Web Services CodeStar Connections (for example, Bitbucket). This Repository object is not used if your source code is in an associated GitHub repository.
    public struct Repository: Swift.Equatable {
        /// Information about a Bitbucket repository.
        public var bitbucket: CodeGuruReviewerClientTypes.ThirdPartySourceRepository?
        /// Information about an Amazon Web Services CodeCommit repository.
        public var codeCommit: CodeGuruReviewerClientTypes.CodeCommitRepository?
        /// Information about a GitHub Enterprise Server repository.
        public var gitHubEnterpriseServer: CodeGuruReviewerClientTypes.ThirdPartySourceRepository?
        /// Information about a repository in an S3 bucket.
        public var s3Bucket: CodeGuruReviewerClientTypes.S3Repository?

        public init (
            bitbucket: CodeGuruReviewerClientTypes.ThirdPartySourceRepository? = nil,
            codeCommit: CodeGuruReviewerClientTypes.CodeCommitRepository? = nil,
            gitHubEnterpriseServer: CodeGuruReviewerClientTypes.ThirdPartySourceRepository? = nil,
            s3Bucket: CodeGuruReviewerClientTypes.S3Repository? = nil
        )
        {
            self.bitbucket = bitbucket
            self.codeCommit = codeCommit
            self.gitHubEnterpriseServer = gitHubEnterpriseServer
            self.s3Bucket = s3Bucket
        }
    }

}

extension CodeGuruReviewerClientTypes.RepositoryAnalysis: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case repositoryHead = "RepositoryHead"
        case sourceCodeType = "SourceCodeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let repositoryHead = self.repositoryHead {
            try encodeContainer.encode(repositoryHead, forKey: .repositoryHead)
        }
        if let sourceCodeType = self.sourceCodeType {
            try encodeContainer.encode(sourceCodeType, forKey: .sourceCodeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryHeadDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RepositoryHeadSourceCodeType.self, forKey: .repositoryHead)
        repositoryHead = repositoryHeadDecoded
        let sourceCodeTypeDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.SourceCodeType.self, forKey: .sourceCodeType)
        sourceCodeType = sourceCodeTypeDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// A code review type that analyzes all code under a specified branch in an associated repository. The associated repository is specified using its ARN when you call [CreateCodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CreateCodeReview).
    public struct RepositoryAnalysis: Swift.Equatable {
        /// A [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType) that specifies the tip of a branch in an associated repository.
        public var repositoryHead: CodeGuruReviewerClientTypes.RepositoryHeadSourceCodeType?
        /// Specifies the source code that is analyzed in a code review.
        public var sourceCodeType: CodeGuruReviewerClientTypes.SourceCodeType?

        public init (
            repositoryHead: CodeGuruReviewerClientTypes.RepositoryHeadSourceCodeType? = nil,
            sourceCodeType: CodeGuruReviewerClientTypes.SourceCodeType? = nil
        )
        {
            self.repositoryHead = repositoryHead
            self.sourceCodeType = sourceCodeType
        }
    }

}

extension CodeGuruReviewerClientTypes.RepositoryAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationArn = "AssociationArn"
        case associationId = "AssociationId"
        case connectionArn = "ConnectionArn"
        case createdTimeStamp = "CreatedTimeStamp"
        case kmsKeyDetails = "KMSKeyDetails"
        case lastUpdatedTimeStamp = "LastUpdatedTimeStamp"
        case name = "Name"
        case owner = "Owner"
        case providerType = "ProviderType"
        case s3RepositoryDetails = "S3RepositoryDetails"
        case state = "State"
        case stateReason = "StateReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationArn = self.associationArn {
            try encodeContainer.encode(associationArn, forKey: .associationArn)
        }
        if let associationId = self.associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let connectionArn = self.connectionArn {
            try encodeContainer.encode(connectionArn, forKey: .connectionArn)
        }
        if let createdTimeStamp = self.createdTimeStamp {
            try encodeContainer.encodeTimestamp(createdTimeStamp, format: .epochSeconds, forKey: .createdTimeStamp)
        }
        if let kmsKeyDetails = self.kmsKeyDetails {
            try encodeContainer.encode(kmsKeyDetails, forKey: .kmsKeyDetails)
        }
        if let lastUpdatedTimeStamp = self.lastUpdatedTimeStamp {
            try encodeContainer.encodeTimestamp(lastUpdatedTimeStamp, format: .epochSeconds, forKey: .lastUpdatedTimeStamp)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let providerType = self.providerType {
            try encodeContainer.encode(providerType.rawValue, forKey: .providerType)
        }
        if let s3RepositoryDetails = self.s3RepositoryDetails {
            try encodeContainer.encode(s3RepositoryDetails, forKey: .s3RepositoryDetails)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateReason = self.stateReason {
            try encodeContainer.encode(stateReason, forKey: .stateReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let associationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationArn)
        associationArn = associationArnDecoded
        let connectionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionArn)
        connectionArn = connectionArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let providerTypeDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.ProviderType.self, forKey: .providerType)
        providerType = providerTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RepositoryAssociationState.self, forKey: .state)
        state = stateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let lastUpdatedTimeStampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimeStamp)
        lastUpdatedTimeStamp = lastUpdatedTimeStampDecoded
        let createdTimeStampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdTimeStamp)
        createdTimeStamp = createdTimeStampDecoded
        let kmsKeyDetailsDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.KMSKeyDetails.self, forKey: .kmsKeyDetails)
        kmsKeyDetails = kmsKeyDetailsDecoded
        let s3RepositoryDetailsDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.S3RepositoryDetails.self, forKey: .s3RepositoryDetails)
        s3RepositoryDetails = s3RepositoryDetailsDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about a repository association. The [DescribeRepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_DescribeRepositoryAssociation.html) operation returns a RepositoryAssociation object.
    public struct RepositoryAssociation: Swift.Equatable {
        /// The Amazon Resource Name (ARN) identifying the repository association.
        public var associationArn: Swift.String?
        /// The ID of the repository association.
        public var associationId: Swift.String?
        /// The Amazon Resource Name (ARN) of an Amazon Web Services CodeStar Connections connection. Its format is arn:aws:codestar-connections:region-id:aws-account_id:connection/connection-id. For more information, see [Connection](https://docs.aws.amazon.com/codestar-connections/latest/APIReference/API_Connection.html) in the Amazon Web Services CodeStar Connections API Reference.
        public var connectionArn: Swift.String?
        /// The time, in milliseconds since the epoch, when the repository association was created.
        public var createdTimeStamp: ClientRuntime.Date?
        /// A KMSKeyDetails object that contains:
        ///
        /// * The encryption option for this repository association. It is either owned by Amazon Web Services Key Management Service (KMS) (AWS_OWNED_CMK) or customer managed (CUSTOMER_MANAGED_CMK).
        ///
        /// * The ID of the Amazon Web Services KMS key that is associated with this repository association.
        public var kmsKeyDetails: CodeGuruReviewerClientTypes.KMSKeyDetails?
        /// The time, in milliseconds since the epoch, when the repository association was last updated.
        public var lastUpdatedTimeStamp: ClientRuntime.Date?
        /// The name of the repository.
        public var name: Swift.String?
        /// The owner of the repository. For an Amazon Web Services CodeCommit repository, this is the Amazon Web Services account ID of the account that owns the repository. For a GitHub, GitHub Enterprise Server, or Bitbucket repository, this is the username for the account that owns the repository. For an S3 repository, it can be the username or Amazon Web Services account ID.
        public var owner: Swift.String?
        /// The provider type of the repository association.
        public var providerType: CodeGuruReviewerClientTypes.ProviderType?
        /// Specifies the name of an S3 bucket and a CodeArtifacts object that contains the S3 object keys for a source code .zip file and for a build artifacts .zip file that contains .jar or .class files.
        public var s3RepositoryDetails: CodeGuruReviewerClientTypes.S3RepositoryDetails?
        /// The state of the repository association. The valid repository association states are:
        ///
        /// * Associated: The repository association is complete.
        ///
        /// * Associating: CodeGuru Reviewer is:
        ///
        /// * Setting up pull request notifications. This is required for pull requests to trigger a CodeGuru Reviewer review. If your repository ProviderType is GitHub, GitHub Enterprise Server, or Bitbucket, CodeGuru Reviewer creates webhooks in your repository to trigger CodeGuru Reviewer reviews. If you delete these webhooks, reviews of code in your repository cannot be triggered.
        ///
        /// * Setting up source code access. This is required for CodeGuru Reviewer to securely clone code in your repository.
        ///
        ///
        ///
        ///
        /// * Failed: The repository failed to associate or disassociate.
        ///
        /// * Disassociating: CodeGuru Reviewer is removing the repository's pull request notifications and source code access.
        ///
        /// * Disassociated: CodeGuru Reviewer successfully disassociated the repository. You can create a new association with this repository if you want to review source code in it later. You can control access to code reviews created in anassociated repository with tags after it has been disassociated. For more information, see [Using tags to control access to associated repositories](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/auth-and-access-control-using-tags.html) in the Amazon CodeGuru Reviewer User Guide.
        public var state: CodeGuruReviewerClientTypes.RepositoryAssociationState?
        /// A description of why the repository association is in the current state.
        public var stateReason: Swift.String?

        public init (
            associationArn: Swift.String? = nil,
            associationId: Swift.String? = nil,
            connectionArn: Swift.String? = nil,
            createdTimeStamp: ClientRuntime.Date? = nil,
            kmsKeyDetails: CodeGuruReviewerClientTypes.KMSKeyDetails? = nil,
            lastUpdatedTimeStamp: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            owner: Swift.String? = nil,
            providerType: CodeGuruReviewerClientTypes.ProviderType? = nil,
            s3RepositoryDetails: CodeGuruReviewerClientTypes.S3RepositoryDetails? = nil,
            state: CodeGuruReviewerClientTypes.RepositoryAssociationState? = nil,
            stateReason: Swift.String? = nil
        )
        {
            self.associationArn = associationArn
            self.associationId = associationId
            self.connectionArn = connectionArn
            self.createdTimeStamp = createdTimeStamp
            self.kmsKeyDetails = kmsKeyDetails
            self.lastUpdatedTimeStamp = lastUpdatedTimeStamp
            self.name = name
            self.owner = owner
            self.providerType = providerType
            self.s3RepositoryDetails = s3RepositoryDetails
            self.state = state
            self.stateReason = stateReason
        }
    }

}

extension CodeGuruReviewerClientTypes {
    public enum RepositoryAssociationState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case associated
        case associating
        case disassociated
        case disassociating
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [RepositoryAssociationState] {
            return [
                .associated,
                .associating,
                .disassociated,
                .disassociating,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .associated: return "Associated"
            case .associating: return "Associating"
            case .disassociated: return "Disassociated"
            case .disassociating: return "Disassociating"
            case .failed: return "Failed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RepositoryAssociationState(rawValue: rawValue) ?? RepositoryAssociationState.sdkUnknown(rawValue)
        }
    }
}

extension CodeGuruReviewerClientTypes.RepositoryAssociationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationArn = "AssociationArn"
        case associationId = "AssociationId"
        case connectionArn = "ConnectionArn"
        case lastUpdatedTimeStamp = "LastUpdatedTimeStamp"
        case name = "Name"
        case owner = "Owner"
        case providerType = "ProviderType"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationArn = self.associationArn {
            try encodeContainer.encode(associationArn, forKey: .associationArn)
        }
        if let associationId = self.associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let connectionArn = self.connectionArn {
            try encodeContainer.encode(connectionArn, forKey: .connectionArn)
        }
        if let lastUpdatedTimeStamp = self.lastUpdatedTimeStamp {
            try encodeContainer.encodeTimestamp(lastUpdatedTimeStamp, format: .epochSeconds, forKey: .lastUpdatedTimeStamp)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let providerType = self.providerType {
            try encodeContainer.encode(providerType.rawValue, forKey: .providerType)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationArn)
        associationArn = associationArnDecoded
        let connectionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionArn)
        connectionArn = connectionArnDecoded
        let lastUpdatedTimeStampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTimeStamp)
        lastUpdatedTimeStamp = lastUpdatedTimeStampDecoded
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let providerTypeDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.ProviderType.self, forKey: .providerType)
        providerType = providerTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RepositoryAssociationState.self, forKey: .state)
        state = stateDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Summary information about a repository association. The [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html) operation returns a list of RepositoryAssociationSummary objects.
    public struct RepositoryAssociationSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html) object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
        public var associationArn: Swift.String?
        /// The repository association ID.
        public var associationId: Swift.String?
        /// The Amazon Resource Name (ARN) of an Amazon Web Services CodeStar Connections connection. Its format is arn:aws:codestar-connections:region-id:aws-account_id:connection/connection-id. For more information, see [Connection](https://docs.aws.amazon.com/codestar-connections/latest/APIReference/API_Connection.html) in the Amazon Web Services CodeStar Connections API Reference.
        public var connectionArn: Swift.String?
        /// The time, in milliseconds since the epoch, since the repository association was last updated.
        public var lastUpdatedTimeStamp: ClientRuntime.Date?
        /// The name of the repository association.
        public var name: Swift.String?
        /// The owner of the repository. For an Amazon Web Services CodeCommit repository, this is the Amazon Web Services account ID of the account that owns the repository. For a GitHub, GitHub Enterprise Server, or Bitbucket repository, this is the username for the account that owns the repository. For an S3 repository, it can be the username or Amazon Web Services account ID.
        public var owner: Swift.String?
        /// The provider type of the repository association.
        public var providerType: CodeGuruReviewerClientTypes.ProviderType?
        /// The state of the repository association. The valid repository association states are:
        ///
        /// * Associated: The repository association is complete.
        ///
        /// * Associating: CodeGuru Reviewer is:
        ///
        /// * Setting up pull request notifications. This is required for pull requests to trigger a CodeGuru Reviewer review. If your repository ProviderType is GitHub, GitHub Enterprise Server, or Bitbucket, CodeGuru Reviewer creates webhooks in your repository to trigger CodeGuru Reviewer reviews. If you delete these webhooks, reviews of code in your repository cannot be triggered.
        ///
        /// * Setting up source code access. This is required for CodeGuru Reviewer to securely clone code in your repository.
        ///
        ///
        ///
        ///
        /// * Failed: The repository failed to associate or disassociate.
        ///
        /// * Disassociating: CodeGuru Reviewer is removing the repository's pull request notifications and source code access.
        ///
        /// * Disassociated: CodeGuru Reviewer successfully disassociated the repository. You can create a new association with this repository if you want to review source code in it later. You can control access to code reviews created in anassociated repository with tags after it has been disassociated. For more information, see [Using tags to control access to associated repositories](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/auth-and-access-control-using-tags.html) in the Amazon CodeGuru Reviewer User Guide.
        public var state: CodeGuruReviewerClientTypes.RepositoryAssociationState?

        public init (
            associationArn: Swift.String? = nil,
            associationId: Swift.String? = nil,
            connectionArn: Swift.String? = nil,
            lastUpdatedTimeStamp: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            owner: Swift.String? = nil,
            providerType: CodeGuruReviewerClientTypes.ProviderType? = nil,
            state: CodeGuruReviewerClientTypes.RepositoryAssociationState? = nil
        )
        {
            self.associationArn = associationArn
            self.associationId = associationId
            self.connectionArn = connectionArn
            self.lastUpdatedTimeStamp = lastUpdatedTimeStamp
            self.name = name
            self.owner = owner
            self.providerType = providerType
            self.state = state
        }
    }

}

extension CodeGuruReviewerClientTypes.RepositoryHeadSourceCodeType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchName = "BranchName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branchName = self.branchName {
            try encodeContainer.encode(branchName, forKey: .branchName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let branchNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branchName)
        branchName = branchNameDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// A [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType) that specifies the tip of a branch in an associated repository.
    public struct RepositoryHeadSourceCodeType: Swift.Equatable {
        /// The name of the branch in an associated repository. The RepositoryHeadSourceCodeType specifies the tip of this branch.
        /// This member is required.
        public var branchName: Swift.String?

        public init (
            branchName: Swift.String? = nil
        )
        {
            self.branchName = branchName
        }
    }

}

extension CodeGuruReviewerClientTypes.RequestMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventInfo = "EventInfo"
        case requestId = "RequestId"
        case requester = "Requester"
        case vendorName = "VendorName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventInfo = self.eventInfo {
            try encodeContainer.encode(eventInfo, forKey: .eventInfo)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let requester = self.requester {
            try encodeContainer.encode(requester, forKey: .requester)
        }
        if let vendorName = self.vendorName {
            try encodeContainer.encode(vendorName.rawValue, forKey: .vendorName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let requesterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requester)
        requester = requesterDecoded
        let eventInfoDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.EventInfo.self, forKey: .eventInfo)
        eventInfo = eventInfoDecoded
        let vendorNameDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.VendorName.self, forKey: .vendorName)
        vendorName = vendorNameDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Metadata that is associated with a code review. This applies to both pull request and repository analysis code reviews.
    public struct RequestMetadata: Swift.Equatable {
        /// Information about the event associated with a code review.
        public var eventInfo: CodeGuruReviewerClientTypes.EventInfo?
        /// The ID of the request. This is required for a pull request code review.
        public var requestId: Swift.String?
        /// An identifier, such as a name or account ID, that is associated with the requester. The Requester is used to capture the author/actor name of the event request.
        public var requester: Swift.String?
        /// The name of the repository vendor used to upload code to an S3 bucket for a CI/CD code review. For example, if code and artifacts are uploaded to an S3 bucket for a CI/CD code review by GitHub scripts from a GitHub repository, then the repository association's ProviderType is S3Bucket and the CI/CD repository vendor name is GitHub. For more information, see the definition for ProviderType in [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html).
        public var vendorName: CodeGuruReviewerClientTypes.VendorName?

        public init (
            eventInfo: CodeGuruReviewerClientTypes.EventInfo? = nil,
            requestId: Swift.String? = nil,
            requester: Swift.String? = nil,
            vendorName: CodeGuruReviewerClientTypes.VendorName? = nil
        )
        {
            self.eventInfo = eventInfo
            self.requestId = requestId
            self.requester = requester
            self.vendorName = vendorName
        }
    }

}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource specified in the request was not found.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeGuruReviewerClientTypes.RuleMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case longDescription = "LongDescription"
        case ruleId = "RuleId"
        case ruleName = "RuleName"
        case ruleTags = "RuleTags"
        case shortDescription = "ShortDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let longDescription = self.longDescription {
            try encodeContainer.encode(longDescription, forKey: .longDescription)
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
        if let ruleName = self.ruleName {
            try encodeContainer.encode(ruleName, forKey: .ruleName)
        }
        if let ruleTags = ruleTags {
            var ruleTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ruleTags)
            for ruletag0 in ruleTags {
                try ruleTagsContainer.encode(ruletag0)
            }
        }
        if let shortDescription = self.shortDescription {
            try encodeContainer.encode(shortDescription, forKey: .shortDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
        let shortDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shortDescription)
        shortDescription = shortDescriptionDecoded
        let longDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .longDescription)
        longDescription = longDescriptionDecoded
        let ruleTagsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ruleTags)
        var ruleTagsDecoded0:[Swift.String]? = nil
        if let ruleTagsContainer = ruleTagsContainer {
            ruleTagsDecoded0 = [Swift.String]()
            for string0 in ruleTagsContainer {
                if let string0 = string0 {
                    ruleTagsDecoded0?.append(string0)
                }
            }
        }
        ruleTags = ruleTagsDecoded0
    }
}

extension CodeGuruReviewerClientTypes {
    /// Metadata about a rule. Rule metadata includes an ID, a name, a list of tags, and a short and long description. CodeGuru Reviewer uses rules to analyze code. A rule's recommendation is included in analysis results if code is detected that violates the rule.
    public struct RuleMetadata: Swift.Equatable {
        /// A long description of the rule.
        public var longDescription: Swift.String?
        /// The ID of the rule.
        public var ruleId: Swift.String?
        /// The name of the rule.
        public var ruleName: Swift.String?
        /// Tags that are associated with the rule.
        public var ruleTags: [Swift.String]?
        /// A short description of the rule.
        public var shortDescription: Swift.String?

        public init (
            longDescription: Swift.String? = nil,
            ruleId: Swift.String? = nil,
            ruleName: Swift.String? = nil,
            ruleTags: [Swift.String]? = nil,
            shortDescription: Swift.String? = nil
        )
        {
            self.longDescription = longDescription
            self.ruleId = ruleId
            self.ruleName = ruleName
            self.ruleTags = ruleTags
            self.shortDescription = shortDescription
        }
    }

}

extension CodeGuruReviewerClientTypes.S3BucketRepository: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details = "Details"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.S3RepositoryDetails.self, forKey: .details)
        details = detailsDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about an associated repository in an S3 bucket. The associated repository contains a source code .zip file and a build artifacts .zip file that contains .jar or .class files.
    public struct S3BucketRepository: Swift.Equatable {
        /// An S3RepositoryDetails object that specifies the name of an S3 bucket and a CodeArtifacts object. The CodeArtifacts object includes the S3 object keys for a source code .zip file and for a build artifacts .zip file.
        public var details: CodeGuruReviewerClientTypes.S3RepositoryDetails?
        /// The name of the repository when the ProviderType is S3Bucket.
        /// This member is required.
        public var name: Swift.String?

        public init (
            details: CodeGuruReviewerClientTypes.S3RepositoryDetails? = nil,
            name: Swift.String? = nil
        )
        {
            self.details = details
            self.name = name
        }
    }

}

extension CodeGuruReviewerClientTypes.S3Repository: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about a repository in an S3 bucket.
    public struct S3Repository: Swift.Equatable {
        /// The name of the S3 bucket used for associating a new S3 repository. It must begin with codeguru-reviewer-.
        /// This member is required.
        public var bucketName: Swift.String?
        /// The name of the repository in the S3 bucket.
        /// This member is required.
        public var name: Swift.String?

        public init (
            bucketName: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.bucketName = bucketName
            self.name = name
        }
    }

}

extension CodeGuruReviewerClientTypes.S3RepositoryDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case codeArtifacts = "CodeArtifacts"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let codeArtifacts = self.codeArtifacts {
            try encodeContainer.encode(codeArtifacts, forKey: .codeArtifacts)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let codeArtifactsDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.CodeArtifacts.self, forKey: .codeArtifacts)
        codeArtifacts = codeArtifactsDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Specifies the name of an S3 bucket and a CodeArtifacts object that contains the S3 object keys for a source code .zip file and for a build artifacts .zip file that contains .jar or .class files.
    public struct S3RepositoryDetails: Swift.Equatable {
        /// The name of the S3 bucket used for associating a new S3 repository. It must begin with codeguru-reviewer-.
        public var bucketName: Swift.String?
        /// A CodeArtifacts object. The CodeArtifacts object includes the S3 object key for a source code .zip file and for a build artifacts .zip file that contains .jar or .class files.
        public var codeArtifacts: CodeGuruReviewerClientTypes.CodeArtifacts?

        public init (
            bucketName: Swift.String? = nil,
            codeArtifacts: CodeGuruReviewerClientTypes.CodeArtifacts? = nil
        )
        {
            self.bucketName = bucketName
            self.codeArtifacts = codeArtifacts
        }
    }

}

extension CodeGuruReviewerClientTypes {
    public enum Severity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case critical
        case high
        case info
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [Severity] {
            return [
                .critical,
                .high,
                .info,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .critical: return "Critical"
            case .high: return "High"
            case .info: return "Info"
            case .low: return "Low"
            case .medium: return "Medium"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Severity(rawValue: rawValue) ?? Severity.sdkUnknown(rawValue)
        }
    }
}

extension CodeGuruReviewerClientTypes.SourceCodeType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchDiff = "BranchDiff"
        case commitDiff = "CommitDiff"
        case repositoryHead = "RepositoryHead"
        case requestMetadata = "RequestMetadata"
        case s3BucketRepository = "S3BucketRepository"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branchDiff = self.branchDiff {
            try encodeContainer.encode(branchDiff, forKey: .branchDiff)
        }
        if let commitDiff = self.commitDiff {
            try encodeContainer.encode(commitDiff, forKey: .commitDiff)
        }
        if let repositoryHead = self.repositoryHead {
            try encodeContainer.encode(repositoryHead, forKey: .repositoryHead)
        }
        if let requestMetadata = self.requestMetadata {
            try encodeContainer.encode(requestMetadata, forKey: .requestMetadata)
        }
        if let s3BucketRepository = self.s3BucketRepository {
            try encodeContainer.encode(s3BucketRepository, forKey: .s3BucketRepository)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commitDiffDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.CommitDiffSourceCodeType.self, forKey: .commitDiff)
        commitDiff = commitDiffDecoded
        let repositoryHeadDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RepositoryHeadSourceCodeType.self, forKey: .repositoryHead)
        repositoryHead = repositoryHeadDecoded
        let branchDiffDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.BranchDiffSourceCodeType.self, forKey: .branchDiff)
        branchDiff = branchDiffDecoded
        let s3BucketRepositoryDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.S3BucketRepository.self, forKey: .s3BucketRepository)
        s3BucketRepository = s3BucketRepositoryDecoded
        let requestMetadataDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RequestMetadata.self, forKey: .requestMetadata)
        requestMetadata = requestMetadataDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Specifies the source code that is analyzed in a code review.
    public struct SourceCodeType: Swift.Equatable {
        /// A type of [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType) that specifies a source branch name and a destination branch name in an associated repository.
        public var branchDiff: CodeGuruReviewerClientTypes.BranchDiffSourceCodeType?
        /// A [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType) that specifies a commit diff created by a pull request on an associated repository.
        public var commitDiff: CodeGuruReviewerClientTypes.CommitDiffSourceCodeType?
        /// A [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType) that specifies the tip of a branch in an associated repository.
        public var repositoryHead: CodeGuruReviewerClientTypes.RepositoryHeadSourceCodeType?
        /// Metadata that is associated with a code review. This applies to any type of code review supported by CodeGuru Reviewer. The RequestMetadaa field captures any event metadata. For example, it might capture metadata associated with an event trigger, such as a push or a pull request.
        public var requestMetadata: CodeGuruReviewerClientTypes.RequestMetadata?
        /// Information about an associated repository in an S3 bucket that includes its name and an S3RepositoryDetails object. The S3RepositoryDetails object includes the name of an S3 bucket, an S3 key for a source code .zip file, and an S3 key for a build artifacts .zip file. S3BucketRepository is required in [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType) for S3BucketRepository based code reviews.
        public var s3BucketRepository: CodeGuruReviewerClientTypes.S3BucketRepository?

        public init (
            branchDiff: CodeGuruReviewerClientTypes.BranchDiffSourceCodeType? = nil,
            commitDiff: CodeGuruReviewerClientTypes.CommitDiffSourceCodeType? = nil,
            repositoryHead: CodeGuruReviewerClientTypes.RepositoryHeadSourceCodeType? = nil,
            requestMetadata: CodeGuruReviewerClientTypes.RequestMetadata? = nil,
            s3BucketRepository: CodeGuruReviewerClientTypes.S3BucketRepository? = nil
        )
        {
            self.branchDiff = branchDiff
            self.commitDiff = commitDiff
            self.repositoryHead = repositoryHead
            self.requestMetadata = requestMetadata
            self.s3BucketRepository = s3BucketRepository
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html) object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:
    ///
    /// * A tag key (for example, CostCenter, Environment, Project, or Secret). Tag keys are case sensitive.
    ///
    /// * An optional field known as a tag value (for example, 111122223333, Production, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension CodeGuruReviewerClientTypes.ThirdPartySourceRepository: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionArn = "ConnectionArn"
        case name = "Name"
        case owner = "Owner"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionArn = self.connectionArn {
            try encodeContainer.encode(connectionArn, forKey: .connectionArn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let connectionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionArn)
        connectionArn = connectionArnDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    /// Information about a third-party source repository connected to CodeGuru Reviewer.
    public struct ThirdPartySourceRepository: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of an Amazon Web Services CodeStar Connections connection. Its format is arn:aws:codestar-connections:region-id:aws-account_id:connection/connection-id. For more information, see [Connection](https://docs.aws.amazon.com/codestar-connections/latest/APIReference/API_Connection.html) in the Amazon Web Services CodeStar Connections API Reference.
        /// This member is required.
        public var connectionArn: Swift.String?
        /// The name of the third party source repository.
        /// This member is required.
        public var name: Swift.String?
        /// The owner of the repository. For a GitHub, GitHub Enterprise, or Bitbucket repository, this is the username for the account that owns the repository. For an S3 repository, this can be the username or Amazon Web Services account ID
        /// This member is required.
        public var owner: Swift.String?

        public init (
            connectionArn: Swift.String? = nil,
            name: Swift.String? = nil,
            owner: Swift.String? = nil
        )
        {
            self.connectionArn = connectionArn
            self.name = name
            self.owner = owner
        }
    }

}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    public enum ModelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pullRequest
        case repositoryAnalysis
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelType] {
            return [
                .pullRequest,
                .repositoryAnalysis,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pullRequest: return "PullRequest"
            case .repositoryAnalysis: return "RepositoryAnalysis"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelType(rawValue: rawValue) ?? ModelType.sdkUnknown(rawValue)
        }
    }
}

extension UntagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let tagKeys = tagKeys else {
                let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            return items
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html) object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of the keys for each tag you want to remove from an associated repository.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The input fails to satisfy the specified constraints.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeGuruReviewerClientTypes {
    public enum VendorName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case github
        case gitlab
        case nativeS3
        case sdkUnknown(Swift.String)

        public static var allCases: [VendorName] {
            return [
                .github,
                .gitlab,
                .nativeS3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .github: return "GitHub"
            case .gitlab: return "GitLab"
            case .nativeS3: return "NativeS3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VendorName(rawValue: rawValue) ?? VendorName.sdkUnknown(rawValue)
        }
    }
}
