//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

public struct DeleteAudienceGenerationJobOutput {

    public init() { }
}

public struct DeleteAudienceModelOutput {

    public init() { }
}

public struct DeleteConfiguredAudienceModelOutput {

    public init() { }
}

public struct DeleteConfiguredAudienceModelPolicyOutput {

    public init() { }
}

public struct DeleteTrainingDatasetOutput {

    public init() { }
}

public struct StartAudienceExportJobOutput {

    public init() { }
}

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CleanRoomsMLClientTypes {
    /// Provides information about an Amazon S3 bucket and path.
    public struct S3ConfigMap {
        /// The Amazon S3 location URI.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            s3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
        }
    }

}

extension CleanRoomsMLClientTypes {
    /// Defines the Amazon S3 bucket where the configured audience is stored.
    public struct AudienceDestination {
        /// The Amazon S3 bucket and path for the configured audience.
        /// This member is required.
        public var s3Destination: CleanRoomsMLClientTypes.S3ConfigMap?

        public init(
            s3Destination: CleanRoomsMLClientTypes.S3ConfigMap? = nil
        )
        {
            self.s3Destination = s3Destination
        }
    }

}

/// The request parameters for this request are incorrect.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListAudienceExportJobsInput {
    /// The Amazon Resource Name (ARN) of the audience generation job that you are interested in.
    public var audienceGenerationJobArn: Swift.String?
    /// The maximum size of the results that is returned per call.
    public var maxResults: Swift.Int?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init(
        audienceGenerationJobArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.audienceGenerationJobArn = audienceGenerationJobArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension CleanRoomsMLClientTypes {

    public enum AudienceSizeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case absolute
        case percentage
        case sdkUnknown(Swift.String)

        public static var allCases: [AudienceSizeType] {
            return [
                .absolute,
                .percentage
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .absolute: return "ABSOLUTE"
            case .percentage: return "PERCENTAGE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CleanRoomsMLClientTypes {
    /// The size of the generated audience. Must match one of the sizes in the configured audience model.
    public struct AudienceSize {
        /// Whether the audience size is defined in absolute terms or as a percentage. You can use the ABSOLUTE[AudienceSize] to configure out audience sizes using the count of identifiers in the output. You can use the Percentage[AudienceSize] to configure sizes in the range 1-100 percent.
        /// This member is required.
        public var type: CleanRoomsMLClientTypes.AudienceSizeType?
        /// Specify an audience size value.
        /// This member is required.
        public var value: Swift.Int?

        public init(
            type: CleanRoomsMLClientTypes.AudienceSizeType? = nil,
            value: Swift.Int? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension CleanRoomsMLClientTypes {

    public enum AudienceExportJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case createInProgress
        case createPending
        case sdkUnknown(Swift.String)

        public static var allCases: [AudienceExportJobStatus] {
            return [
                .active,
                .createFailed,
                .createInProgress,
                .createPending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .createPending: return "CREATE_PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CleanRoomsMLClientTypes {
    /// Details about the status of a resource.
    public struct StatusDetails {
        /// The error message that was returned. The message is intended for human consumption and can change at any time. Use the statusCode for programmatic error handling.
        public var message: Swift.String?
        /// The status code that was returned. The status code is intended for programmatic error handling. Clean Rooms ML will not change the status code for existing error conditions.
        public var statusCode: Swift.String?

        public init(
            message: Swift.String? = nil,
            statusCode: Swift.String? = nil
        )
        {
            self.message = message
            self.statusCode = statusCode
        }
    }

}

extension CleanRoomsMLClientTypes {
    /// Provides information about the audience export job.
    public struct AudienceExportJobSummary {
        /// The Amazon Resource Name (ARN) of the audience generation job that was exported.
        /// This member is required.
        public var audienceGenerationJobArn: Swift.String?
        /// The size of the generated audience. Must match one of the sizes in the configured audience model.
        /// This member is required.
        public var audienceSize: CleanRoomsMLClientTypes.AudienceSize?
        /// The time at which the audience export job was created.
        /// This member is required.
        public var createTime: Foundation.Date?
        /// The description of the audience export job.
        public var description: Swift.String?
        /// The name of the audience export job.
        /// This member is required.
        public var name: Swift.String?
        /// The Amazon S3 bucket where the audience export is stored.
        public var outputLocation: Swift.String?
        /// The status of the audience export job.
        /// This member is required.
        public var status: CleanRoomsMLClientTypes.AudienceExportJobStatus?
        /// Details about the status of a resource.
        public var statusDetails: CleanRoomsMLClientTypes.StatusDetails?
        /// The most recent time at which the audience export job was updated.
        /// This member is required.
        public var updateTime: Foundation.Date?

        public init(
            audienceGenerationJobArn: Swift.String? = nil,
            audienceSize: CleanRoomsMLClientTypes.AudienceSize? = nil,
            createTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            outputLocation: Swift.String? = nil,
            status: CleanRoomsMLClientTypes.AudienceExportJobStatus? = nil,
            statusDetails: CleanRoomsMLClientTypes.StatusDetails? = nil,
            updateTime: Foundation.Date? = nil
        )
        {
            self.audienceGenerationJobArn = audienceGenerationJobArn
            self.audienceSize = audienceSize
            self.createTime = createTime
            self.description = description
            self.name = name
            self.outputLocation = outputLocation
            self.status = status
            self.statusDetails = statusDetails
            self.updateTime = updateTime
        }
    }

}

public struct ListAudienceExportJobsOutput {
    /// The audience export jobs that match the request.
    /// This member is required.
    public var audienceExportJobs: [CleanRoomsMLClientTypes.AudienceExportJobSummary]?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init(
        audienceExportJobs: [CleanRoomsMLClientTypes.AudienceExportJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.audienceExportJobs = audienceExportJobs
        self.nextToken = nextToken
    }
}

/// You can't complete this action because another resource depends on this resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource you are requesting does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You have exceeded your service quota.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct StartAudienceExportJobInput {
    /// The Amazon Resource Name (ARN) of the audience generation job that you want to export.
    /// This member is required.
    public var audienceGenerationJobArn: Swift.String?
    /// The size of the generated audience. Must match one of the sizes in the configured audience model.
    /// This member is required.
    public var audienceSize: CleanRoomsMLClientTypes.AudienceSize?
    /// The description of the audience export job.
    public var description: Swift.String?
    /// The name of the audience export job.
    /// This member is required.
    public var name: Swift.String?

    public init(
        audienceGenerationJobArn: Swift.String? = nil,
        audienceSize: CleanRoomsMLClientTypes.AudienceSize? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.audienceGenerationJobArn = audienceGenerationJobArn
        self.audienceSize = audienceSize
        self.description = description
        self.name = name
    }
}

public struct DeleteAudienceGenerationJobInput {
    /// The Amazon Resource Name (ARN) of the audience generation job that you want to delete.
    /// This member is required.
    public var audienceGenerationJobArn: Swift.String?

    public init(
        audienceGenerationJobArn: Swift.String? = nil
    )
    {
        self.audienceGenerationJobArn = audienceGenerationJobArn
    }
}

public struct GetAudienceGenerationJobInput {
    /// The Amazon Resource Name (ARN) of the audience generation job that you are interested in.
    /// This member is required.
    public var audienceGenerationJobArn: Swift.String?

    public init(
        audienceGenerationJobArn: Swift.String? = nil
    )
    {
        self.audienceGenerationJobArn = audienceGenerationJobArn
    }
}

extension CleanRoomsMLClientTypes {
    /// The relevance score of a generated audience.
    public struct RelevanceMetric {
        /// The size of the generated audience. Must match one of the sizes in the configured audience model.
        /// This member is required.
        public var audienceSize: CleanRoomsMLClientTypes.AudienceSize?
        /// The relevance score of the generated audience.
        public var score: Swift.Double?

        public init(
            audienceSize: CleanRoomsMLClientTypes.AudienceSize? = nil,
            score: Swift.Double? = nil
        )
        {
            self.audienceSize = audienceSize
            self.score = score
        }
    }

}

extension CleanRoomsMLClientTypes {
    /// Metrics that describe the quality of the generated audience.
    public struct AudienceQualityMetrics {
        /// The recall score of the generated audience. Recall is the percentage of the most similar users (by default, the most similar 20%) from a sample of the training data that are included in the seed audience by the audience generation job. Values range from 0-1, larger values indicate a better audience. A recall value approximately equal to the maximum bin size indicates that the audience model is equivalent to random selection.
        public var recallMetric: Swift.Double?
        /// The relevance scores of the generated audience.
        /// This member is required.
        public var relevanceMetrics: [CleanRoomsMLClientTypes.RelevanceMetric]?

        public init(
            recallMetric: Swift.Double? = nil,
            relevanceMetrics: [CleanRoomsMLClientTypes.RelevanceMetric]? = nil
        )
        {
            self.recallMetric = recallMetric
            self.relevanceMetrics = relevanceMetrics
        }
    }

}

extension CleanRoomsMLClientTypes {
    /// Defines the Amazon S3 bucket where the seed audience for the generating audience is stored.
    public struct AudienceGenerationJobDataSource {
        /// Defines the Amazon S3 bucket where the seed audience for the generating audience is stored. A valid data source is a JSON line file in the following format: {"user_id": "111111"}
        ///     {"user_id": "222222"}
        ///
        ///
        ///     ...
        /// This member is required.
        public var dataSource: CleanRoomsMLClientTypes.S3ConfigMap?
        /// The ARN of the IAM role that can read the Amazon S3 bucket where the training data is stored.
        /// This member is required.
        public var roleArn: Swift.String?

        public init(
            dataSource: CleanRoomsMLClientTypes.S3ConfigMap? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.dataSource = dataSource
            self.roleArn = roleArn
        }
    }

}

extension CleanRoomsMLClientTypes {

    public enum AudienceGenerationJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case createInProgress
        case createPending
        case deleteFailed
        case deleteInProgress
        case deletePending
        case sdkUnknown(Swift.String)

        public static var allCases: [AudienceGenerationJobStatus] {
            return [
                .active,
                .createFailed,
                .createInProgress,
                .createPending,
                .deleteFailed,
                .deleteInProgress,
                .deletePending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .createPending: return "CREATE_PENDING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deletePending: return "DELETE_PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetAudienceGenerationJobOutput {
    /// The Amazon Resource Name (ARN) of the audience generation job.
    /// This member is required.
    public var audienceGenerationJobArn: Swift.String?
    /// The identifier of the collaboration that this audience generation job is associated with.
    public var collaborationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the configured audience model used for this audience generation job.
    /// This member is required.
    public var configuredAudienceModelArn: Swift.String?
    /// The time at which the audience generation job was created.
    /// This member is required.
    public var createTime: Foundation.Date?
    /// The description of the audience generation job.
    public var description: Swift.String?
    /// Configure whether the seed users are included in the output audience. By default, Clean Rooms ML removes seed users from the output audience. If you specify TRUE, the seed users will appear first in the output. Clean Rooms ML does not explicitly reveal whether a user was in the seed, but the recipient of the audience will know that the first minimumSeedSize count of users are from the seed.
    public var includeSeedInOutput: Swift.Bool?
    /// The relevance scores for different audience sizes and the recall score of the generated audience.
    public var metrics: CleanRoomsMLClientTypes.AudienceQualityMetrics?
    /// The name of the audience generation job.
    /// This member is required.
    public var name: Swift.String?
    /// The seed audience that was used for this audience generation job. This field will be null if the account calling the API is the account that started this audience generation job.
    public var seedAudience: CleanRoomsMLClientTypes.AudienceGenerationJobDataSource?
    /// The AWS account that started this audience generation job.
    public var startedBy: Swift.String?
    /// The status of the audience generation job.
    /// This member is required.
    public var status: CleanRoomsMLClientTypes.AudienceGenerationJobStatus?
    /// Details about the status of the audience generation job.
    public var statusDetails: CleanRoomsMLClientTypes.StatusDetails?
    /// The tags that are associated to this audience generation job.
    public var tags: [Swift.String: Swift.String]?
    /// The most recent time at which the audience generation job was updated.
    /// This member is required.
    public var updateTime: Foundation.Date?

    public init(
        audienceGenerationJobArn: Swift.String? = nil,
        collaborationId: Swift.String? = nil,
        configuredAudienceModelArn: Swift.String? = nil,
        createTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        includeSeedInOutput: Swift.Bool? = nil,
        metrics: CleanRoomsMLClientTypes.AudienceQualityMetrics? = nil,
        name: Swift.String? = nil,
        seedAudience: CleanRoomsMLClientTypes.AudienceGenerationJobDataSource? = nil,
        startedBy: Swift.String? = nil,
        status: CleanRoomsMLClientTypes.AudienceGenerationJobStatus? = nil,
        statusDetails: CleanRoomsMLClientTypes.StatusDetails? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        updateTime: Foundation.Date? = nil
    )
    {
        self.audienceGenerationJobArn = audienceGenerationJobArn
        self.collaborationId = collaborationId
        self.configuredAudienceModelArn = configuredAudienceModelArn
        self.createTime = createTime
        self.description = description
        self.includeSeedInOutput = includeSeedInOutput
        self.metrics = metrics
        self.name = name
        self.seedAudience = seedAudience
        self.startedBy = startedBy
        self.status = status
        self.statusDetails = statusDetails
        self.tags = tags
        self.updateTime = updateTime
    }
}

public struct ListAudienceGenerationJobsInput {
    /// The identifier of the collaboration that contains the audience generation jobs that you are interested in.
    public var collaborationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the configured audience model that was used for the audience generation jobs that you are interested in.
    public var configuredAudienceModelArn: Swift.String?
    /// The maximum size of the results that is returned per call.
    public var maxResults: Swift.Int?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init(
        collaborationId: Swift.String? = nil,
        configuredAudienceModelArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.collaborationId = collaborationId
        self.configuredAudienceModelArn = configuredAudienceModelArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension CleanRoomsMLClientTypes {
    /// Provides information about the configured audience generation job.
    public struct AudienceGenerationJobSummary {
        /// The Amazon Resource Name (ARN) of the audience generation job.
        /// This member is required.
        public var audienceGenerationJobArn: Swift.String?
        /// The identifier of the collaboration that contains this audience generation job.
        public var collaborationId: Swift.String?
        /// The Amazon Resource Name (ARN) of the configured audience model that was used for this audience generation job.
        /// This member is required.
        public var configuredAudienceModelArn: Swift.String?
        /// The time at which the audience generation job was created.
        /// This member is required.
        public var createTime: Foundation.Date?
        /// The description of the audience generation job.
        public var description: Swift.String?
        /// The name of the audience generation job.
        /// This member is required.
        public var name: Swift.String?
        /// The AWS Account that submitted the job.
        public var startedBy: Swift.String?
        /// The status of the audience generation job.
        /// This member is required.
        public var status: CleanRoomsMLClientTypes.AudienceGenerationJobStatus?
        /// The most recent time at which the audience generation job was updated.
        /// This member is required.
        public var updateTime: Foundation.Date?

        public init(
            audienceGenerationJobArn: Swift.String? = nil,
            collaborationId: Swift.String? = nil,
            configuredAudienceModelArn: Swift.String? = nil,
            createTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            startedBy: Swift.String? = nil,
            status: CleanRoomsMLClientTypes.AudienceGenerationJobStatus? = nil,
            updateTime: Foundation.Date? = nil
        )
        {
            self.audienceGenerationJobArn = audienceGenerationJobArn
            self.collaborationId = collaborationId
            self.configuredAudienceModelArn = configuredAudienceModelArn
            self.createTime = createTime
            self.description = description
            self.name = name
            self.startedBy = startedBy
            self.status = status
            self.updateTime = updateTime
        }
    }

}

public struct ListAudienceGenerationJobsOutput {
    /// The audience generation jobs that match the request.
    /// This member is required.
    public var audienceGenerationJobs: [CleanRoomsMLClientTypes.AudienceGenerationJobSummary]?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init(
        audienceGenerationJobs: [CleanRoomsMLClientTypes.AudienceGenerationJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.audienceGenerationJobs = audienceGenerationJobs
        self.nextToken = nextToken
    }
}

public struct StartAudienceGenerationJobInput {
    /// The identifier of the collaboration that contains the audience generation job.
    public var collaborationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the configured audience model that is used for this audience generation job.
    /// This member is required.
    public var configuredAudienceModelArn: Swift.String?
    /// The description of the audience generation job.
    public var description: Swift.String?
    /// Whether the seed audience is included in the audience generation output.
    public var includeSeedInOutput: Swift.Bool?
    /// The name of the audience generation job.
    /// This member is required.
    public var name: Swift.String?
    /// The seed audience that is used to generate the audience.
    /// This member is required.
    public var seedAudience: CleanRoomsMLClientTypes.AudienceGenerationJobDataSource?
    /// The optional metadata that you apply to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50.
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8.
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8.
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.
    public var tags: [Swift.String: Swift.String]?

    public init(
        collaborationId: Swift.String? = nil,
        configuredAudienceModelArn: Swift.String? = nil,
        description: Swift.String? = nil,
        includeSeedInOutput: Swift.Bool? = nil,
        name: Swift.String? = nil,
        seedAudience: CleanRoomsMLClientTypes.AudienceGenerationJobDataSource? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.collaborationId = collaborationId
        self.configuredAudienceModelArn = configuredAudienceModelArn
        self.description = description
        self.includeSeedInOutput = includeSeedInOutput
        self.name = name
        self.seedAudience = seedAudience
        self.tags = tags
    }
}

public struct StartAudienceGenerationJobOutput {
    /// The Amazon Resource Name (ARN) of the audience generation job.
    /// This member is required.
    public var audienceGenerationJobArn: Swift.String?

    public init(
        audienceGenerationJobArn: Swift.String? = nil
    )
    {
        self.audienceGenerationJobArn = audienceGenerationJobArn
    }
}

public struct CreateAudienceModelInput {
    /// The description of the audience model.
    public var description: Swift.String?
    /// The Amazon Resource Name (ARN) of the KMS key. This key is used to encrypt and decrypt customer-owned data in the trained ML model and the associated data.
    public var kmsKeyArn: Swift.String?
    /// The name of the audience model resource.
    /// This member is required.
    public var name: Swift.String?
    /// The optional metadata that you apply to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50.
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8.
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8.
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.
    public var tags: [Swift.String: Swift.String]?
    /// The end date and time of the training window.
    public var trainingDataEndTime: Foundation.Date?
    /// The start date and time of the training window.
    public var trainingDataStartTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the training dataset for this audience model.
    /// This member is required.
    public var trainingDatasetArn: Swift.String?

    public init(
        description: Swift.String? = nil,
        kmsKeyArn: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        trainingDataEndTime: Foundation.Date? = nil,
        trainingDataStartTime: Foundation.Date? = nil,
        trainingDatasetArn: Swift.String? = nil
    )
    {
        self.description = description
        self.kmsKeyArn = kmsKeyArn
        self.name = name
        self.tags = tags
        self.trainingDataEndTime = trainingDataEndTime
        self.trainingDataStartTime = trainingDataStartTime
        self.trainingDatasetArn = trainingDatasetArn
    }
}

public struct CreateAudienceModelOutput {
    /// The Amazon Resource Name (ARN) of the audience model.
    /// This member is required.
    public var audienceModelArn: Swift.String?

    public init(
        audienceModelArn: Swift.String? = nil
    )
    {
        self.audienceModelArn = audienceModelArn
    }
}

public struct DeleteAudienceModelInput {
    /// The Amazon Resource Name (ARN) of the audience model that you want to delete.
    /// This member is required.
    public var audienceModelArn: Swift.String?

    public init(
        audienceModelArn: Swift.String? = nil
    )
    {
        self.audienceModelArn = audienceModelArn
    }
}

public struct GetAudienceModelInput {
    /// The Amazon Resource Name (ARN) of the audience model that you are interested in.
    /// This member is required.
    public var audienceModelArn: Swift.String?

    public init(
        audienceModelArn: Swift.String? = nil
    )
    {
        self.audienceModelArn = audienceModelArn
    }
}

extension CleanRoomsMLClientTypes {

    public enum AudienceModelStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case createInProgress
        case createPending
        case deleteFailed
        case deleteInProgress
        case deletePending
        case sdkUnknown(Swift.String)

        public static var allCases: [AudienceModelStatus] {
            return [
                .active,
                .createFailed,
                .createInProgress,
                .createPending,
                .deleteFailed,
                .deleteInProgress,
                .deletePending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .createPending: return "CREATE_PENDING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deletePending: return "DELETE_PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetAudienceModelOutput {
    /// The Amazon Resource Name (ARN) of the audience model.
    /// This member is required.
    public var audienceModelArn: Swift.String?
    /// The time at which the audience model was created.
    /// This member is required.
    public var createTime: Foundation.Date?
    /// The description of the audience model.
    public var description: Swift.String?
    /// The KMS key ARN used for the audience model.
    public var kmsKeyArn: Swift.String?
    /// The name of the audience model.
    /// This member is required.
    public var name: Swift.String?
    /// The status of the audience model.
    /// This member is required.
    public var status: CleanRoomsMLClientTypes.AudienceModelStatus?
    /// Details about the status of the audience model.
    public var statusDetails: CleanRoomsMLClientTypes.StatusDetails?
    /// The tags that are assigned to the audience model.
    public var tags: [Swift.String: Swift.String]?
    /// The end date specified for the training window.
    public var trainingDataEndTime: Foundation.Date?
    /// The start date specified for the training window.
    public var trainingDataStartTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the training dataset that was used for this audience model.
    /// This member is required.
    public var trainingDatasetArn: Swift.String?
    /// The most recent time at which the audience model was updated.
    /// This member is required.
    public var updateTime: Foundation.Date?

    public init(
        audienceModelArn: Swift.String? = nil,
        createTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        kmsKeyArn: Swift.String? = nil,
        name: Swift.String? = nil,
        status: CleanRoomsMLClientTypes.AudienceModelStatus? = nil,
        statusDetails: CleanRoomsMLClientTypes.StatusDetails? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        trainingDataEndTime: Foundation.Date? = nil,
        trainingDataStartTime: Foundation.Date? = nil,
        trainingDatasetArn: Swift.String? = nil,
        updateTime: Foundation.Date? = nil
    )
    {
        self.audienceModelArn = audienceModelArn
        self.createTime = createTime
        self.description = description
        self.kmsKeyArn = kmsKeyArn
        self.name = name
        self.status = status
        self.statusDetails = statusDetails
        self.tags = tags
        self.trainingDataEndTime = trainingDataEndTime
        self.trainingDataStartTime = trainingDataStartTime
        self.trainingDatasetArn = trainingDatasetArn
        self.updateTime = updateTime
    }
}

public struct ListAudienceModelsInput {
    /// The maximum size of the results that is returned per call.
    public var maxResults: Swift.Int?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension CleanRoomsMLClientTypes {
    /// Information about the audience model.
    public struct AudienceModelSummary {
        /// The Amazon Resource Name (ARN) of the audience model.
        /// This member is required.
        public var audienceModelArn: Swift.String?
        /// The time at which the audience model was created.
        /// This member is required.
        public var createTime: Foundation.Date?
        /// The description of the audience model.
        public var description: Swift.String?
        /// The name of the audience model.
        /// This member is required.
        public var name: Swift.String?
        /// The status of the audience model.
        /// This member is required.
        public var status: CleanRoomsMLClientTypes.AudienceModelStatus?
        /// The Amazon Resource Name (ARN) of the training dataset that was used for the audience model.
        /// This member is required.
        public var trainingDatasetArn: Swift.String?
        /// The most recent time at which the audience model was updated.
        /// This member is required.
        public var updateTime: Foundation.Date?

        public init(
            audienceModelArn: Swift.String? = nil,
            createTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            status: CleanRoomsMLClientTypes.AudienceModelStatus? = nil,
            trainingDatasetArn: Swift.String? = nil,
            updateTime: Foundation.Date? = nil
        )
        {
            self.audienceModelArn = audienceModelArn
            self.createTime = createTime
            self.description = description
            self.name = name
            self.status = status
            self.trainingDatasetArn = trainingDatasetArn
            self.updateTime = updateTime
        }
    }

}

public struct ListAudienceModelsOutput {
    /// The audience models that match the request.
    /// This member is required.
    public var audienceModels: [CleanRoomsMLClientTypes.AudienceModelSummary]?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init(
        audienceModels: [CleanRoomsMLClientTypes.AudienceModelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.audienceModels = audienceModels
        self.nextToken = nextToken
    }
}

extension CleanRoomsMLClientTypes {
    /// Configure the list of audience output sizes that can be created. A request to [StartAudienceGenerationJob] that uses this configured audience model must have an audienceSize selected from this list. You can use the ABSOLUTE[AudienceSize] to configure out audience sizes using the count of identifiers in the output. You can use the Percentage[AudienceSize] to configure sizes in the range 1-100 percent.
    public struct AudienceSizeConfig {
        /// An array of the different audience output sizes.
        /// This member is required.
        public var audienceSizeBins: [Swift.Int]?
        /// Whether the audience output sizes are defined as an absolute number or a percentage.
        /// This member is required.
        public var audienceSizeType: CleanRoomsMLClientTypes.AudienceSizeType?

        public init(
            audienceSizeBins: [Swift.Int]? = nil,
            audienceSizeType: CleanRoomsMLClientTypes.AudienceSizeType? = nil
        )
        {
            self.audienceSizeBins = audienceSizeBins
            self.audienceSizeType = audienceSizeType
        }
    }

}

extension CleanRoomsMLClientTypes {

    public enum TagOnCreatePolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fromParentResource
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [TagOnCreatePolicy] {
            return [
                .fromParentResource,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fromParentResource: return "FROM_PARENT_RESOURCE"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CleanRoomsMLClientTypes {
    /// Configuration information necessary for the configure audience model output.
    public struct ConfiguredAudienceModelOutputConfig {
        /// Defines the Amazon S3 bucket where the configured audience is stored.
        /// This member is required.
        public var destination: CleanRoomsMLClientTypes.AudienceDestination?
        /// The ARN of the IAM role that can write the Amazon S3 bucket.
        /// This member is required.
        public var roleArn: Swift.String?

        public init(
            destination: CleanRoomsMLClientTypes.AudienceDestination? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.destination = destination
            self.roleArn = roleArn
        }
    }

}

extension CleanRoomsMLClientTypes {

    public enum SharedAudienceMetrics: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [SharedAudienceMetrics] {
            return [
                .all,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateConfiguredAudienceModelInput {
    /// The Amazon Resource Name (ARN) of the audience model to use for the configured audience model.
    /// This member is required.
    public var audienceModelArn: Swift.String?
    /// Configure the list of output sizes of audiences that can be created using this configured audience model. A request to [StartAudienceGenerationJob] that uses this configured audience model must have an audienceSize selected from this list. You can use the ABSOLUTE[AudienceSize] to configure out audience sizes using the count of identifiers in the output. You can use the Percentage[AudienceSize] to configure sizes in the range 1-100 percent.
    public var audienceSizeConfig: CleanRoomsMLClientTypes.AudienceSizeConfig?
    /// Configure how the service tags audience generation jobs created using this configured audience model. If you specify NONE, the tags from the [StartAudienceGenerationJob] request determine the tags of the audience generation job. If you specify FROM_PARENT_RESOURCE, the audience generation job inherits the tags from the configured audience model, by default. Tags in the [StartAudienceGenerationJob] will override the default. When the client is in a different account than the configured audience model, the tags from the client are never applied to a resource in the caller's account.
    public var childResourceTagOnCreatePolicy: CleanRoomsMLClientTypes.TagOnCreatePolicy?
    /// The description of the configured audience model.
    public var description: Swift.String?
    /// The minimum number of users from the seed audience that must match with users in the training data of the audience model. The default value is 500.
    public var minMatchingSeedSize: Swift.Int?
    /// The name of the configured audience model.
    /// This member is required.
    public var name: Swift.String?
    /// Configure the Amazon S3 location and IAM Role for audiences created using this configured audience model. Each audience will have a unique location. The IAM Role must have s3:PutObject permission on the destination Amazon S3 location. If the destination is protected with Amazon S3 KMS-SSE, then the Role must also have the required KMS permissions.
    /// This member is required.
    public var outputConfig: CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig?
    /// Whether audience metrics are shared.
    /// This member is required.
    public var sharedAudienceMetrics: [CleanRoomsMLClientTypes.SharedAudienceMetrics]?
    /// The optional metadata that you apply to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50.
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8.
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8.
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.
    public var tags: [Swift.String: Swift.String]?

    public init(
        audienceModelArn: Swift.String? = nil,
        audienceSizeConfig: CleanRoomsMLClientTypes.AudienceSizeConfig? = nil,
        childResourceTagOnCreatePolicy: CleanRoomsMLClientTypes.TagOnCreatePolicy? = nil,
        description: Swift.String? = nil,
        minMatchingSeedSize: Swift.Int? = nil,
        name: Swift.String? = nil,
        outputConfig: CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig? = nil,
        sharedAudienceMetrics: [CleanRoomsMLClientTypes.SharedAudienceMetrics]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.audienceModelArn = audienceModelArn
        self.audienceSizeConfig = audienceSizeConfig
        self.childResourceTagOnCreatePolicy = childResourceTagOnCreatePolicy
        self.description = description
        self.minMatchingSeedSize = minMatchingSeedSize
        self.name = name
        self.outputConfig = outputConfig
        self.sharedAudienceMetrics = sharedAudienceMetrics
        self.tags = tags
    }
}

public struct CreateConfiguredAudienceModelOutput {
    /// The Amazon Resource Name (ARN) of the configured audience model.
    /// This member is required.
    public var configuredAudienceModelArn: Swift.String?

    public init(
        configuredAudienceModelArn: Swift.String? = nil
    )
    {
        self.configuredAudienceModelArn = configuredAudienceModelArn
    }
}

public struct DeleteConfiguredAudienceModelInput {
    /// The Amazon Resource Name (ARN) of the configured audience model that you want to delete.
    /// This member is required.
    public var configuredAudienceModelArn: Swift.String?

    public init(
        configuredAudienceModelArn: Swift.String? = nil
    )
    {
        self.configuredAudienceModelArn = configuredAudienceModelArn
    }
}

public struct GetConfiguredAudienceModelInput {
    /// The Amazon Resource Name (ARN) of the configured audience model that you are interested in.
    /// This member is required.
    public var configuredAudienceModelArn: Swift.String?

    public init(
        configuredAudienceModelArn: Swift.String? = nil
    )
    {
        self.configuredAudienceModelArn = configuredAudienceModelArn
    }
}

extension CleanRoomsMLClientTypes {

    public enum ConfiguredAudienceModelStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfiguredAudienceModelStatus] {
            return [
                .active
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetConfiguredAudienceModelOutput {
    /// The Amazon Resource Name (ARN) of the audience model used for this configured audience model.
    /// This member is required.
    public var audienceModelArn: Swift.String?
    /// The list of output sizes of audiences that can be created using this configured audience model. A request to [StartAudienceGenerationJob] that uses this configured audience model must have an audienceSize selected from this list. You can use the ABSOLUTE[AudienceSize] to configure out audience sizes using the count of identifiers in the output. You can use the Percentage[AudienceSize] to configure sizes in the range 1-100 percent.
    public var audienceSizeConfig: CleanRoomsMLClientTypes.AudienceSizeConfig?
    /// Provides the childResourceTagOnCreatePolicy that was used for this configured audience model.
    public var childResourceTagOnCreatePolicy: CleanRoomsMLClientTypes.TagOnCreatePolicy?
    /// The Amazon Resource Name (ARN) of the configured audience model.
    /// This member is required.
    public var configuredAudienceModelArn: Swift.String?
    /// The time at which the configured audience model was created.
    /// This member is required.
    public var createTime: Foundation.Date?
    /// The description of the configured audience model.
    public var description: Swift.String?
    /// The minimum number of users from the seed audience that must match with users in the training data of the audience model.
    public var minMatchingSeedSize: Swift.Int?
    /// The name of the configured audience model.
    /// This member is required.
    public var name: Swift.String?
    /// The output configuration of the configured audience model
    /// This member is required.
    public var outputConfig: CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig?
    /// Whether audience metrics are shared.
    /// This member is required.
    public var sharedAudienceMetrics: [CleanRoomsMLClientTypes.SharedAudienceMetrics]?
    /// The status of the configured audience model.
    /// This member is required.
    public var status: CleanRoomsMLClientTypes.ConfiguredAudienceModelStatus?
    /// The tags that are associated to this configured audience model.
    public var tags: [Swift.String: Swift.String]?
    /// The most recent time at which the configured audience model was updated.
    /// This member is required.
    public var updateTime: Foundation.Date?

    public init(
        audienceModelArn: Swift.String? = nil,
        audienceSizeConfig: CleanRoomsMLClientTypes.AudienceSizeConfig? = nil,
        childResourceTagOnCreatePolicy: CleanRoomsMLClientTypes.TagOnCreatePolicy? = nil,
        configuredAudienceModelArn: Swift.String? = nil,
        createTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        minMatchingSeedSize: Swift.Int? = nil,
        name: Swift.String? = nil,
        outputConfig: CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig? = nil,
        sharedAudienceMetrics: [CleanRoomsMLClientTypes.SharedAudienceMetrics]? = nil,
        status: CleanRoomsMLClientTypes.ConfiguredAudienceModelStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        updateTime: Foundation.Date? = nil
    )
    {
        self.audienceModelArn = audienceModelArn
        self.audienceSizeConfig = audienceSizeConfig
        self.childResourceTagOnCreatePolicy = childResourceTagOnCreatePolicy
        self.configuredAudienceModelArn = configuredAudienceModelArn
        self.createTime = createTime
        self.description = description
        self.minMatchingSeedSize = minMatchingSeedSize
        self.name = name
        self.outputConfig = outputConfig
        self.sharedAudienceMetrics = sharedAudienceMetrics
        self.status = status
        self.tags = tags
        self.updateTime = updateTime
    }
}

public struct ListConfiguredAudienceModelsInput {
    /// The maximum size of the results that is returned per call.
    public var maxResults: Swift.Int?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension CleanRoomsMLClientTypes {
    /// Information about the configured audience model.
    public struct ConfiguredAudienceModelSummary {
        /// The Amazon Resource Name (ARN) of the audience model that was used to create the configured audience model.
        /// This member is required.
        public var audienceModelArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the configured audience model that you are interested in.
        /// This member is required.
        public var configuredAudienceModelArn: Swift.String?
        /// The time at which the configured audience model was created.
        /// This member is required.
        public var createTime: Foundation.Date?
        /// The description of the configured audience model.
        public var description: Swift.String?
        /// The name of the configured audience model.
        /// This member is required.
        public var name: Swift.String?
        /// The output configuration of the configured audience model.
        /// This member is required.
        public var outputConfig: CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig?
        /// The status of the configured audience model.
        /// This member is required.
        public var status: CleanRoomsMLClientTypes.ConfiguredAudienceModelStatus?
        /// The most recent time at which the configured audience model was updated.
        /// This member is required.
        public var updateTime: Foundation.Date?

        public init(
            audienceModelArn: Swift.String? = nil,
            configuredAudienceModelArn: Swift.String? = nil,
            createTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            outputConfig: CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig? = nil,
            status: CleanRoomsMLClientTypes.ConfiguredAudienceModelStatus? = nil,
            updateTime: Foundation.Date? = nil
        )
        {
            self.audienceModelArn = audienceModelArn
            self.configuredAudienceModelArn = configuredAudienceModelArn
            self.createTime = createTime
            self.description = description
            self.name = name
            self.outputConfig = outputConfig
            self.status = status
            self.updateTime = updateTime
        }
    }

}

public struct ListConfiguredAudienceModelsOutput {
    /// The configured audience models.
    /// This member is required.
    public var configuredAudienceModels: [CleanRoomsMLClientTypes.ConfiguredAudienceModelSummary]?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init(
        configuredAudienceModels: [CleanRoomsMLClientTypes.ConfiguredAudienceModelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configuredAudienceModels = configuredAudienceModels
        self.nextToken = nextToken
    }
}

public struct UpdateConfiguredAudienceModelInput {
    /// The Amazon Resource Name (ARN) of the new audience model that you want to use.
    public var audienceModelArn: Swift.String?
    /// The new audience size configuration.
    public var audienceSizeConfig: CleanRoomsMLClientTypes.AudienceSizeConfig?
    /// The Amazon Resource Name (ARN) of the configured audience model that you want to update.
    /// This member is required.
    public var configuredAudienceModelArn: Swift.String?
    /// The new description of the configured audience model.
    public var description: Swift.String?
    /// The minimum number of users from the seed audience that must match with users in the training data of the audience model.
    public var minMatchingSeedSize: Swift.Int?
    /// The new output configuration.
    public var outputConfig: CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig?
    /// The new value for whether to share audience metrics.
    public var sharedAudienceMetrics: [CleanRoomsMLClientTypes.SharedAudienceMetrics]?

    public init(
        audienceModelArn: Swift.String? = nil,
        audienceSizeConfig: CleanRoomsMLClientTypes.AudienceSizeConfig? = nil,
        configuredAudienceModelArn: Swift.String? = nil,
        description: Swift.String? = nil,
        minMatchingSeedSize: Swift.Int? = nil,
        outputConfig: CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig? = nil,
        sharedAudienceMetrics: [CleanRoomsMLClientTypes.SharedAudienceMetrics]? = nil
    )
    {
        self.audienceModelArn = audienceModelArn
        self.audienceSizeConfig = audienceSizeConfig
        self.configuredAudienceModelArn = configuredAudienceModelArn
        self.description = description
        self.minMatchingSeedSize = minMatchingSeedSize
        self.outputConfig = outputConfig
        self.sharedAudienceMetrics = sharedAudienceMetrics
    }
}

public struct UpdateConfiguredAudienceModelOutput {
    /// The Amazon Resource Name (ARN) of the configured audience model that was updated.
    /// This member is required.
    public var configuredAudienceModelArn: Swift.String?

    public init(
        configuredAudienceModelArn: Swift.String? = nil
    )
    {
        self.configuredAudienceModelArn = configuredAudienceModelArn
    }
}

public struct DeleteConfiguredAudienceModelPolicyInput {
    /// The Amazon Resource Name (ARN) of the configured audience model policy that you want to delete.
    /// This member is required.
    public var configuredAudienceModelArn: Swift.String?

    public init(
        configuredAudienceModelArn: Swift.String? = nil
    )
    {
        self.configuredAudienceModelArn = configuredAudienceModelArn
    }
}

public struct GetConfiguredAudienceModelPolicyInput {
    /// The Amazon Resource Name (ARN) of the configured audience model that you are interested in.
    /// This member is required.
    public var configuredAudienceModelArn: Swift.String?

    public init(
        configuredAudienceModelArn: Swift.String? = nil
    )
    {
        self.configuredAudienceModelArn = configuredAudienceModelArn
    }
}

public struct GetConfiguredAudienceModelPolicyOutput {
    /// The Amazon Resource Name (ARN) of the configured audience model.
    /// This member is required.
    public var configuredAudienceModelArn: Swift.String?
    /// The configured audience model policy. This is a JSON IAM resource policy.
    /// This member is required.
    public var configuredAudienceModelPolicy: Swift.String?
    /// A cryptographic hash of the contents of the policy used to prevent unexpected concurrent modification of the policy.
    /// This member is required.
    public var policyHash: Swift.String?

    public init(
        configuredAudienceModelArn: Swift.String? = nil,
        configuredAudienceModelPolicy: Swift.String? = nil,
        policyHash: Swift.String? = nil
    )
    {
        self.configuredAudienceModelArn = configuredAudienceModelArn
        self.configuredAudienceModelPolicy = configuredAudienceModelPolicy
        self.policyHash = policyHash
    }
}

extension CleanRoomsMLClientTypes {

    public enum PolicyExistenceCondition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case policyMustExist
        case policyMustNotExist
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyExistenceCondition] {
            return [
                .policyMustExist,
                .policyMustNotExist
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .policyMustExist: return "POLICY_MUST_EXIST"
            case .policyMustNotExist: return "POLICY_MUST_NOT_EXIST"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct PutConfiguredAudienceModelPolicyInput {
    /// The Amazon Resource Name (ARN) of the configured audience model that the resource policy will govern.
    /// This member is required.
    public var configuredAudienceModelArn: Swift.String?
    /// The IAM resource policy.
    /// This member is required.
    public var configuredAudienceModelPolicy: Swift.String?
    /// Use this to prevent unexpected concurrent modification of the policy.
    public var policyExistenceCondition: CleanRoomsMLClientTypes.PolicyExistenceCondition?
    /// A cryptographic hash of the contents of the policy used to prevent unexpected concurrent modification of the policy.
    public var previousPolicyHash: Swift.String?

    public init(
        configuredAudienceModelArn: Swift.String? = nil,
        configuredAudienceModelPolicy: Swift.String? = nil,
        policyExistenceCondition: CleanRoomsMLClientTypes.PolicyExistenceCondition? = nil,
        previousPolicyHash: Swift.String? = nil
    )
    {
        self.configuredAudienceModelArn = configuredAudienceModelArn
        self.configuredAudienceModelPolicy = configuredAudienceModelPolicy
        self.policyExistenceCondition = policyExistenceCondition
        self.previousPolicyHash = previousPolicyHash
    }
}

public struct PutConfiguredAudienceModelPolicyOutput {
    /// The IAM resource policy.
    /// This member is required.
    public var configuredAudienceModelPolicy: Swift.String?
    /// A cryptographic hash of the contents of the policy used to prevent unexpected concurrent modification of the policy.
    /// This member is required.
    public var policyHash: Swift.String?

    public init(
        configuredAudienceModelPolicy: Swift.String? = nil,
        policyHash: Swift.String? = nil
    )
    {
        self.configuredAudienceModelPolicy = configuredAudienceModelPolicy
        self.policyHash = policyHash
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) of the resource that you are interested in.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// The tags that are associated with the resource.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource that you want to assign tags.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The optional metadata that you apply to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50.
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8.
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8.
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

extension CleanRoomsMLClientTypes {
    /// Defines the Glue data source that contains the training data.
    public struct GlueDataSource {
        /// The Glue catalog that contains the training data.
        public var catalogId: Swift.String?
        /// The Glue database that contains the training data.
        /// This member is required.
        public var databaseName: Swift.String?
        /// The Glue table that contains the training data.
        /// This member is required.
        public var tableName: Swift.String?

        public init(
            catalogId: Swift.String? = nil,
            databaseName: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.catalogId = catalogId
            self.databaseName = databaseName
            self.tableName = tableName
        }
    }

}

extension CleanRoomsMLClientTypes {
    /// Defines information about the Glue data source that contains the training data.
    public struct DataSource {
        /// A GlueDataSource object that defines the catalog ID, database name, and table name for the training data.
        /// This member is required.
        public var glueDataSource: CleanRoomsMLClientTypes.GlueDataSource?

        public init(
            glueDataSource: CleanRoomsMLClientTypes.GlueDataSource? = nil
        )
        {
            self.glueDataSource = glueDataSource
        }
    }

}

extension CleanRoomsMLClientTypes {

    public enum ColumnType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case categoricalFeature
        case itemId
        case numericalFeature
        case timestamp
        case userId
        case sdkUnknown(Swift.String)

        public static var allCases: [ColumnType] {
            return [
                .categoricalFeature,
                .itemId,
                .numericalFeature,
                .timestamp,
                .userId
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .categoricalFeature: return "CATEGORICAL_FEATURE"
            case .itemId: return "ITEM_ID"
            case .numericalFeature: return "NUMERICAL_FEATURE"
            case .timestamp: return "TIMESTAMP"
            case .userId: return "USER_ID"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CleanRoomsMLClientTypes {
    /// Metadata for a column.
    public struct ColumnSchema {
        /// The name of a column.
        /// This member is required.
        public var columnName: Swift.String?
        /// The data type of column.
        /// This member is required.
        public var columnTypes: [CleanRoomsMLClientTypes.ColumnType]?

        public init(
            columnName: Swift.String? = nil,
            columnTypes: [CleanRoomsMLClientTypes.ColumnType]? = nil
        )
        {
            self.columnName = columnName
            self.columnTypes = columnTypes
        }
    }

}

extension CleanRoomsMLClientTypes {
    /// Defines the Glue data source and schema mapping information.
    public struct DatasetInputConfig {
        /// A DataSource object that specifies the Glue data source for the training data.
        /// This member is required.
        public var dataSource: CleanRoomsMLClientTypes.DataSource?
        /// The schema information for the training data.
        /// This member is required.
        public var schema: [CleanRoomsMLClientTypes.ColumnSchema]?

        public init(
            dataSource: CleanRoomsMLClientTypes.DataSource? = nil,
            schema: [CleanRoomsMLClientTypes.ColumnSchema]? = nil
        )
        {
            self.dataSource = dataSource
            self.schema = schema
        }
    }

}

extension CleanRoomsMLClientTypes {

    public enum DatasetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interactions
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetType] {
            return [
                .interactions
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interactions: return "INTERACTIONS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CleanRoomsMLClientTypes {
    /// Defines where the training dataset is located, what type of data it contains, and how to access the data.
    public struct Dataset {
        /// A DatasetInputConfig object that defines the data source and schema mapping.
        /// This member is required.
        public var inputConfig: CleanRoomsMLClientTypes.DatasetInputConfig?
        /// What type of information is found in the dataset.
        /// This member is required.
        public var type: CleanRoomsMLClientTypes.DatasetType?

        public init(
            inputConfig: CleanRoomsMLClientTypes.DatasetInputConfig? = nil,
            type: CleanRoomsMLClientTypes.DatasetType? = nil
        )
        {
            self.inputConfig = inputConfig
            self.type = type
        }
    }

}

public struct CreateTrainingDatasetInput {
    /// The description of the training dataset.
    public var description: Swift.String?
    /// The name of the training dataset. This name must be unique in your account and region.
    /// This member is required.
    public var name: Swift.String?
    /// The ARN of the IAM role that Clean Rooms ML can assume to read the data referred to in the dataSource field of each dataset. Passing a role across AWS accounts is not allowed. If you pass a role that isn't in your account, you get an AccessDeniedException error.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The optional metadata that you apply to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50.
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8.
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8.
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.
    public var tags: [Swift.String: Swift.String]?
    /// An array of information that lists the Dataset objects, which specifies the dataset type and details on its location and schema. You must provide a role that has read access to these tables.
    /// This member is required.
    public var trainingData: [CleanRoomsMLClientTypes.Dataset]?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        trainingData: [CleanRoomsMLClientTypes.Dataset]? = nil
    )
    {
        self.description = description
        self.name = name
        self.roleArn = roleArn
        self.tags = tags
        self.trainingData = trainingData
    }
}

public struct CreateTrainingDatasetOutput {
    /// The Amazon Resource Name (ARN) of the training dataset resource.
    /// This member is required.
    public var trainingDatasetArn: Swift.String?

    public init(
        trainingDatasetArn: Swift.String? = nil
    )
    {
        self.trainingDatasetArn = trainingDatasetArn
    }
}

public struct DeleteTrainingDatasetInput {
    /// The Amazon Resource Name (ARN) of the training dataset that you want to delete.
    /// This member is required.
    public var trainingDatasetArn: Swift.String?

    public init(
        trainingDatasetArn: Swift.String? = nil
    )
    {
        self.trainingDatasetArn = trainingDatasetArn
    }
}

public struct GetTrainingDatasetInput {
    /// The Amazon Resource Name (ARN) of the training dataset that you are interested in.
    /// This member is required.
    public var trainingDatasetArn: Swift.String?

    public init(
        trainingDatasetArn: Swift.String? = nil
    )
    {
        self.trainingDatasetArn = trainingDatasetArn
    }
}

extension CleanRoomsMLClientTypes {

    public enum TrainingDatasetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case sdkUnknown(Swift.String)

        public static var allCases: [TrainingDatasetStatus] {
            return [
                .active
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetTrainingDatasetOutput {
    /// The time at which the training dataset was created.
    /// This member is required.
    public var createTime: Foundation.Date?
    /// The description of the training dataset.
    public var description: Swift.String?
    /// The name of the training dataset.
    /// This member is required.
    public var name: Swift.String?
    /// The IAM role used to read the training data.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The status of the training dataset.
    /// This member is required.
    public var status: CleanRoomsMLClientTypes.TrainingDatasetStatus?
    /// The tags that are assigned to this training dataset.
    public var tags: [Swift.String: Swift.String]?
    /// Metadata about the requested training data.
    /// This member is required.
    public var trainingData: [CleanRoomsMLClientTypes.Dataset]?
    /// The Amazon Resource Name (ARN) of the training dataset.
    /// This member is required.
    public var trainingDatasetArn: Swift.String?
    /// The most recent time at which the training dataset was updated.
    /// This member is required.
    public var updateTime: Foundation.Date?

    public init(
        createTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        status: CleanRoomsMLClientTypes.TrainingDatasetStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        trainingData: [CleanRoomsMLClientTypes.Dataset]? = nil,
        trainingDatasetArn: Swift.String? = nil,
        updateTime: Foundation.Date? = nil
    )
    {
        self.createTime = createTime
        self.description = description
        self.name = name
        self.roleArn = roleArn
        self.status = status
        self.tags = tags
        self.trainingData = trainingData
        self.trainingDatasetArn = trainingDatasetArn
        self.updateTime = updateTime
    }
}

public struct ListTrainingDatasetsInput {
    /// The maximum size of the results that is returned per call.
    public var maxResults: Swift.Int?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension CleanRoomsMLClientTypes {
    /// Provides information about the training dataset.
    public struct TrainingDatasetSummary {
        /// The time at which the training dataset was created.
        /// This member is required.
        public var createTime: Foundation.Date?
        /// The description of the training dataset.
        public var description: Swift.String?
        /// The name of the training dataset.
        /// This member is required.
        public var name: Swift.String?
        /// The status of the training dataset.
        /// This member is required.
        public var status: CleanRoomsMLClientTypes.TrainingDatasetStatus?
        /// The Amazon Resource Name (ARN) of the training dataset.
        /// This member is required.
        public var trainingDatasetArn: Swift.String?
        /// The most recent time at which the training dataset was updated.
        /// This member is required.
        public var updateTime: Foundation.Date?

        public init(
            createTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            status: CleanRoomsMLClientTypes.TrainingDatasetStatus? = nil,
            trainingDatasetArn: Swift.String? = nil,
            updateTime: Foundation.Date? = nil
        )
        {
            self.createTime = createTime
            self.description = description
            self.name = name
            self.status = status
            self.trainingDatasetArn = trainingDatasetArn
            self.updateTime = updateTime
        }
    }

}

public struct ListTrainingDatasetsOutput {
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?
    /// The training datasets that match the request.
    /// This member is required.
    public var trainingDatasets: [CleanRoomsMLClientTypes.TrainingDatasetSummary]?

    public init(
        nextToken: Swift.String? = nil,
        trainingDatasets: [CleanRoomsMLClientTypes.TrainingDatasetSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.trainingDatasets = trainingDatasets
    }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource that you want to remove tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The key values of tags that you want to remove.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

extension CreateAudienceModelInput {

    static func urlPathProvider(_ value: CreateAudienceModelInput) -> Swift.String? {
        return "/audience-model"
    }
}

extension CreateConfiguredAudienceModelInput {

    static func urlPathProvider(_ value: CreateConfiguredAudienceModelInput) -> Swift.String? {
        return "/configured-audience-model"
    }
}

extension CreateTrainingDatasetInput {

    static func urlPathProvider(_ value: CreateTrainingDatasetInput) -> Swift.String? {
        return "/training-dataset"
    }
}

extension DeleteAudienceGenerationJobInput {

    static func urlPathProvider(_ value: DeleteAudienceGenerationJobInput) -> Swift.String? {
        guard let audienceGenerationJobArn = value.audienceGenerationJobArn else {
            return nil
        }
        return "/audience-generation-job/\(audienceGenerationJobArn.urlPercentEncoding())"
    }
}

extension DeleteAudienceModelInput {

    static func urlPathProvider(_ value: DeleteAudienceModelInput) -> Swift.String? {
        guard let audienceModelArn = value.audienceModelArn else {
            return nil
        }
        return "/audience-model/\(audienceModelArn.urlPercentEncoding())"
    }
}

extension DeleteConfiguredAudienceModelInput {

    static func urlPathProvider(_ value: DeleteConfiguredAudienceModelInput) -> Swift.String? {
        guard let configuredAudienceModelArn = value.configuredAudienceModelArn else {
            return nil
        }
        return "/configured-audience-model/\(configuredAudienceModelArn.urlPercentEncoding())"
    }
}

extension DeleteConfiguredAudienceModelPolicyInput {

    static func urlPathProvider(_ value: DeleteConfiguredAudienceModelPolicyInput) -> Swift.String? {
        guard let configuredAudienceModelArn = value.configuredAudienceModelArn else {
            return nil
        }
        return "/configured-audience-model/\(configuredAudienceModelArn.urlPercentEncoding())/policy"
    }
}

extension DeleteTrainingDatasetInput {

    static func urlPathProvider(_ value: DeleteTrainingDatasetInput) -> Swift.String? {
        guard let trainingDatasetArn = value.trainingDatasetArn else {
            return nil
        }
        return "/training-dataset/\(trainingDatasetArn.urlPercentEncoding())"
    }
}

extension GetAudienceGenerationJobInput {

    static func urlPathProvider(_ value: GetAudienceGenerationJobInput) -> Swift.String? {
        guard let audienceGenerationJobArn = value.audienceGenerationJobArn else {
            return nil
        }
        return "/audience-generation-job/\(audienceGenerationJobArn.urlPercentEncoding())"
    }
}

extension GetAudienceModelInput {

    static func urlPathProvider(_ value: GetAudienceModelInput) -> Swift.String? {
        guard let audienceModelArn = value.audienceModelArn else {
            return nil
        }
        return "/audience-model/\(audienceModelArn.urlPercentEncoding())"
    }
}

extension GetConfiguredAudienceModelInput {

    static func urlPathProvider(_ value: GetConfiguredAudienceModelInput) -> Swift.String? {
        guard let configuredAudienceModelArn = value.configuredAudienceModelArn else {
            return nil
        }
        return "/configured-audience-model/\(configuredAudienceModelArn.urlPercentEncoding())"
    }
}

extension GetConfiguredAudienceModelPolicyInput {

    static func urlPathProvider(_ value: GetConfiguredAudienceModelPolicyInput) -> Swift.String? {
        guard let configuredAudienceModelArn = value.configuredAudienceModelArn else {
            return nil
        }
        return "/configured-audience-model/\(configuredAudienceModelArn.urlPercentEncoding())/policy"
    }
}

extension GetTrainingDatasetInput {

    static func urlPathProvider(_ value: GetTrainingDatasetInput) -> Swift.String? {
        guard let trainingDatasetArn = value.trainingDatasetArn else {
            return nil
        }
        return "/training-dataset/\(trainingDatasetArn.urlPercentEncoding())"
    }
}

extension ListAudienceExportJobsInput {

    static func urlPathProvider(_ value: ListAudienceExportJobsInput) -> Swift.String? {
        return "/audience-export-job"
    }
}

extension ListAudienceExportJobsInput {

    static func queryItemProvider(_ value: ListAudienceExportJobsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let audienceGenerationJobArn = value.audienceGenerationJobArn {
            let audienceGenerationJobArnQueryItem = Smithy.URIQueryItem(name: "audienceGenerationJobArn".urlPercentEncoding(), value: Swift.String(audienceGenerationJobArn).urlPercentEncoding())
            items.append(audienceGenerationJobArnQueryItem)
        }
        return items
    }
}

extension ListAudienceGenerationJobsInput {

    static func urlPathProvider(_ value: ListAudienceGenerationJobsInput) -> Swift.String? {
        return "/audience-generation-job"
    }
}

extension ListAudienceGenerationJobsInput {

    static func queryItemProvider(_ value: ListAudienceGenerationJobsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let configuredAudienceModelArn = value.configuredAudienceModelArn {
            let configuredAudienceModelArnQueryItem = Smithy.URIQueryItem(name: "configuredAudienceModelArn".urlPercentEncoding(), value: Swift.String(configuredAudienceModelArn).urlPercentEncoding())
            items.append(configuredAudienceModelArnQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let collaborationId = value.collaborationId {
            let collaborationIdQueryItem = Smithy.URIQueryItem(name: "collaborationId".urlPercentEncoding(), value: Swift.String(collaborationId).urlPercentEncoding())
            items.append(collaborationIdQueryItem)
        }
        return items
    }
}

extension ListAudienceModelsInput {

    static func urlPathProvider(_ value: ListAudienceModelsInput) -> Swift.String? {
        return "/audience-model"
    }
}

extension ListAudienceModelsInput {

    static func queryItemProvider(_ value: ListAudienceModelsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListConfiguredAudienceModelsInput {

    static func urlPathProvider(_ value: ListConfiguredAudienceModelsInput) -> Swift.String? {
        return "/configured-audience-model"
    }
}

extension ListConfiguredAudienceModelsInput {

    static func queryItemProvider(_ value: ListConfiguredAudienceModelsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension ListTrainingDatasetsInput {

    static func urlPathProvider(_ value: ListTrainingDatasetsInput) -> Swift.String? {
        return "/training-dataset"
    }
}

extension ListTrainingDatasetsInput {

    static func queryItemProvider(_ value: ListTrainingDatasetsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension PutConfiguredAudienceModelPolicyInput {

    static func urlPathProvider(_ value: PutConfiguredAudienceModelPolicyInput) -> Swift.String? {
        guard let configuredAudienceModelArn = value.configuredAudienceModelArn else {
            return nil
        }
        return "/configured-audience-model/\(configuredAudienceModelArn.urlPercentEncoding())/policy"
    }
}

extension StartAudienceExportJobInput {

    static func urlPathProvider(_ value: StartAudienceExportJobInput) -> Swift.String? {
        return "/audience-export-job"
    }
}

extension StartAudienceGenerationJobInput {

    static func urlPathProvider(_ value: StartAudienceGenerationJobInput) -> Swift.String? {
        return "/audience-generation-job"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateConfiguredAudienceModelInput {

    static func urlPathProvider(_ value: UpdateConfiguredAudienceModelInput) -> Swift.String? {
        guard let configuredAudienceModelArn = value.configuredAudienceModelArn else {
            return nil
        }
        return "/configured-audience-model/\(configuredAudienceModelArn.urlPercentEncoding())"
    }
}

extension CreateAudienceModelInput {

    static func write(value: CreateAudienceModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["kmsKeyArn"].write(value.kmsKeyArn)
        try writer["name"].write(value.name)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["trainingDataEndTime"].writeTimestamp(value.trainingDataEndTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["trainingDataStartTime"].writeTimestamp(value.trainingDataStartTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["trainingDatasetArn"].write(value.trainingDatasetArn)
    }
}

extension CreateConfiguredAudienceModelInput {

    static func write(value: CreateConfiguredAudienceModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audienceModelArn"].write(value.audienceModelArn)
        try writer["audienceSizeConfig"].write(value.audienceSizeConfig, with: CleanRoomsMLClientTypes.AudienceSizeConfig.write(value:to:))
        try writer["childResourceTagOnCreatePolicy"].write(value.childResourceTagOnCreatePolicy)
        try writer["description"].write(value.description)
        try writer["minMatchingSeedSize"].write(value.minMatchingSeedSize)
        try writer["name"].write(value.name)
        try writer["outputConfig"].write(value.outputConfig, with: CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig.write(value:to:))
        try writer["sharedAudienceMetrics"].writeList(value.sharedAudienceMetrics, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CleanRoomsMLClientTypes.SharedAudienceMetrics>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateTrainingDatasetInput {

    static func write(value: CreateTrainingDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["roleArn"].write(value.roleArn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["trainingData"].writeList(value.trainingData, memberWritingClosure: CleanRoomsMLClientTypes.Dataset.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutConfiguredAudienceModelPolicyInput {

    static func write(value: PutConfiguredAudienceModelPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["configuredAudienceModelPolicy"].write(value.configuredAudienceModelPolicy)
        try writer["policyExistenceCondition"].write(value.policyExistenceCondition)
        try writer["previousPolicyHash"].write(value.previousPolicyHash)
    }
}

extension StartAudienceExportJobInput {

    static func write(value: StartAudienceExportJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audienceGenerationJobArn"].write(value.audienceGenerationJobArn)
        try writer["audienceSize"].write(value.audienceSize, with: CleanRoomsMLClientTypes.AudienceSize.write(value:to:))
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
    }
}

extension StartAudienceGenerationJobInput {

    static func write(value: StartAudienceGenerationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["collaborationId"].write(value.collaborationId)
        try writer["configuredAudienceModelArn"].write(value.configuredAudienceModelArn)
        try writer["description"].write(value.description)
        try writer["includeSeedInOutput"].write(value.includeSeedInOutput)
        try writer["name"].write(value.name)
        try writer["seedAudience"].write(value.seedAudience, with: CleanRoomsMLClientTypes.AudienceGenerationJobDataSource.write(value:to:))
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateConfiguredAudienceModelInput {

    static func write(value: UpdateConfiguredAudienceModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audienceModelArn"].write(value.audienceModelArn)
        try writer["audienceSizeConfig"].write(value.audienceSizeConfig, with: CleanRoomsMLClientTypes.AudienceSizeConfig.write(value:to:))
        try writer["description"].write(value.description)
        try writer["minMatchingSeedSize"].write(value.minMatchingSeedSize)
        try writer["outputConfig"].write(value.outputConfig, with: CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig.write(value:to:))
        try writer["sharedAudienceMetrics"].writeList(value.sharedAudienceMetrics, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CleanRoomsMLClientTypes.SharedAudienceMetrics>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateAudienceModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAudienceModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAudienceModelOutput()
        value.audienceModelArn = try reader["audienceModelArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateConfiguredAudienceModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateConfiguredAudienceModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateConfiguredAudienceModelOutput()
        value.configuredAudienceModelArn = try reader["configuredAudienceModelArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateTrainingDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTrainingDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTrainingDatasetOutput()
        value.trainingDatasetArn = try reader["trainingDatasetArn"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteAudienceGenerationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAudienceGenerationJobOutput {
        return DeleteAudienceGenerationJobOutput()
    }
}

extension DeleteAudienceModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAudienceModelOutput {
        return DeleteAudienceModelOutput()
    }
}

extension DeleteConfiguredAudienceModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteConfiguredAudienceModelOutput {
        return DeleteConfiguredAudienceModelOutput()
    }
}

extension DeleteConfiguredAudienceModelPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteConfiguredAudienceModelPolicyOutput {
        return DeleteConfiguredAudienceModelPolicyOutput()
    }
}

extension DeleteTrainingDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTrainingDatasetOutput {
        return DeleteTrainingDatasetOutput()
    }
}

extension GetAudienceGenerationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAudienceGenerationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAudienceGenerationJobOutput()
        value.audienceGenerationJobArn = try reader["audienceGenerationJobArn"].readIfPresent() ?? ""
        value.collaborationId = try reader["collaborationId"].readIfPresent()
        value.configuredAudienceModelArn = try reader["configuredAudienceModelArn"].readIfPresent() ?? ""
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["description"].readIfPresent()
        value.includeSeedInOutput = try reader["includeSeedInOutput"].readIfPresent()
        value.metrics = try reader["metrics"].readIfPresent(with: CleanRoomsMLClientTypes.AudienceQualityMetrics.read(from:))
        value.name = try reader["name"].readIfPresent() ?? ""
        value.seedAudience = try reader["seedAudience"].readIfPresent(with: CleanRoomsMLClientTypes.AudienceGenerationJobDataSource.read(from:))
        value.startedBy = try reader["startedBy"].readIfPresent()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.statusDetails = try reader["statusDetails"].readIfPresent(with: CleanRoomsMLClientTypes.StatusDetails.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.updateTime = try reader["updateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension GetAudienceModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAudienceModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAudienceModelOutput()
        value.audienceModelArn = try reader["audienceModelArn"].readIfPresent() ?? ""
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["description"].readIfPresent()
        value.kmsKeyArn = try reader["kmsKeyArn"].readIfPresent()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.statusDetails = try reader["statusDetails"].readIfPresent(with: CleanRoomsMLClientTypes.StatusDetails.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.trainingDataEndTime = try reader["trainingDataEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.trainingDataStartTime = try reader["trainingDataStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.trainingDatasetArn = try reader["trainingDatasetArn"].readIfPresent() ?? ""
        value.updateTime = try reader["updateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension GetConfiguredAudienceModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConfiguredAudienceModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetConfiguredAudienceModelOutput()
        value.audienceModelArn = try reader["audienceModelArn"].readIfPresent() ?? ""
        value.audienceSizeConfig = try reader["audienceSizeConfig"].readIfPresent(with: CleanRoomsMLClientTypes.AudienceSizeConfig.read(from:))
        value.childResourceTagOnCreatePolicy = try reader["childResourceTagOnCreatePolicy"].readIfPresent()
        value.configuredAudienceModelArn = try reader["configuredAudienceModelArn"].readIfPresent() ?? ""
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["description"].readIfPresent()
        value.minMatchingSeedSize = try reader["minMatchingSeedSize"].readIfPresent()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.outputConfig = try reader["outputConfig"].readIfPresent(with: CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig.read(from:))
        value.sharedAudienceMetrics = try reader["sharedAudienceMetrics"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CleanRoomsMLClientTypes.SharedAudienceMetrics>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.updateTime = try reader["updateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension GetConfiguredAudienceModelPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConfiguredAudienceModelPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetConfiguredAudienceModelPolicyOutput()
        value.configuredAudienceModelArn = try reader["configuredAudienceModelArn"].readIfPresent() ?? ""
        value.configuredAudienceModelPolicy = try reader["configuredAudienceModelPolicy"].readIfPresent() ?? ""
        value.policyHash = try reader["policyHash"].readIfPresent() ?? ""
        return value
    }
}

extension GetTrainingDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTrainingDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTrainingDatasetOutput()
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["description"].readIfPresent()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.trainingData = try reader["trainingData"].readListIfPresent(memberReadingClosure: CleanRoomsMLClientTypes.Dataset.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.trainingDatasetArn = try reader["trainingDatasetArn"].readIfPresent() ?? ""
        value.updateTime = try reader["updateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension ListAudienceExportJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAudienceExportJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAudienceExportJobsOutput()
        value.audienceExportJobs = try reader["audienceExportJobs"].readListIfPresent(memberReadingClosure: CleanRoomsMLClientTypes.AudienceExportJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAudienceGenerationJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAudienceGenerationJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAudienceGenerationJobsOutput()
        value.audienceGenerationJobs = try reader["audienceGenerationJobs"].readListIfPresent(memberReadingClosure: CleanRoomsMLClientTypes.AudienceGenerationJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAudienceModelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAudienceModelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAudienceModelsOutput()
        value.audienceModels = try reader["audienceModels"].readListIfPresent(memberReadingClosure: CleanRoomsMLClientTypes.AudienceModelSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListConfiguredAudienceModelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListConfiguredAudienceModelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListConfiguredAudienceModelsOutput()
        value.configuredAudienceModels = try reader["configuredAudienceModels"].readListIfPresent(memberReadingClosure: CleanRoomsMLClientTypes.ConfiguredAudienceModelSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension ListTrainingDatasetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTrainingDatasetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTrainingDatasetsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.trainingDatasets = try reader["trainingDatasets"].readListIfPresent(memberReadingClosure: CleanRoomsMLClientTypes.TrainingDatasetSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension PutConfiguredAudienceModelPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutConfiguredAudienceModelPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutConfiguredAudienceModelPolicyOutput()
        value.configuredAudienceModelPolicy = try reader["configuredAudienceModelPolicy"].readIfPresent() ?? ""
        value.policyHash = try reader["policyHash"].readIfPresent() ?? ""
        return value
    }
}

extension StartAudienceExportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartAudienceExportJobOutput {
        return StartAudienceExportJobOutput()
    }
}

extension StartAudienceGenerationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartAudienceGenerationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartAudienceGenerationJobOutput()
        value.audienceGenerationJobArn = try reader["audienceGenerationJobArn"].readIfPresent() ?? ""
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateConfiguredAudienceModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateConfiguredAudienceModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateConfiguredAudienceModelOutput()
        value.configuredAudienceModelArn = try reader["configuredAudienceModelArn"].readIfPresent() ?? ""
        return value
    }
}

enum CreateAudienceModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateConfiguredAudienceModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTrainingDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAudienceGenerationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAudienceModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteConfiguredAudienceModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteConfiguredAudienceModelPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTrainingDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAudienceGenerationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAudienceModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConfiguredAudienceModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConfiguredAudienceModelPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTrainingDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAudienceExportJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAudienceGenerationJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAudienceModelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListConfiguredAudienceModelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTrainingDatasetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutConfiguredAudienceModelPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartAudienceExportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartAudienceGenerationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateConfiguredAudienceModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CleanRoomsMLClientTypes.StatusDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.StatusDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.StatusDetails()
        value.statusCode = try reader["statusCode"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension CleanRoomsMLClientTypes.AudienceGenerationJobDataSource {

    static func write(value: CleanRoomsMLClientTypes.AudienceGenerationJobDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dataSource"].write(value.dataSource, with: CleanRoomsMLClientTypes.S3ConfigMap.write(value:to:))
        try writer["roleArn"].write(value.roleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.AudienceGenerationJobDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.AudienceGenerationJobDataSource()
        value.dataSource = try reader["dataSource"].readIfPresent(with: CleanRoomsMLClientTypes.S3ConfigMap.read(from:))
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        return value
    }
}

extension CleanRoomsMLClientTypes.S3ConfigMap {

    static func write(value: CleanRoomsMLClientTypes.S3ConfigMap?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["s3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.S3ConfigMap {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.S3ConfigMap()
        value.s3Uri = try reader["s3Uri"].readIfPresent() ?? ""
        return value
    }
}

extension CleanRoomsMLClientTypes.AudienceQualityMetrics {

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.AudienceQualityMetrics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.AudienceQualityMetrics()
        value.relevanceMetrics = try reader["relevanceMetrics"].readListIfPresent(memberReadingClosure: CleanRoomsMLClientTypes.RelevanceMetric.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.recallMetric = try reader["recallMetric"].readIfPresent()
        return value
    }
}

extension CleanRoomsMLClientTypes.RelevanceMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.RelevanceMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.RelevanceMetric()
        value.audienceSize = try reader["audienceSize"].readIfPresent(with: CleanRoomsMLClientTypes.AudienceSize.read(from:))
        value.score = try reader["score"].readIfPresent()
        return value
    }
}

extension CleanRoomsMLClientTypes.AudienceSize {

    static func write(value: CleanRoomsMLClientTypes.AudienceSize?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["type"].write(value.type)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.AudienceSize {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.AudienceSize()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig {

    static func write(value: CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destination"].write(value.destination, with: CleanRoomsMLClientTypes.AudienceDestination.write(value:to:))
        try writer["roleArn"].write(value.roleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig()
        value.destination = try reader["destination"].readIfPresent(with: CleanRoomsMLClientTypes.AudienceDestination.read(from:))
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        return value
    }
}

extension CleanRoomsMLClientTypes.AudienceDestination {

    static func write(value: CleanRoomsMLClientTypes.AudienceDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["s3Destination"].write(value.s3Destination, with: CleanRoomsMLClientTypes.S3ConfigMap.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.AudienceDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.AudienceDestination()
        value.s3Destination = try reader["s3Destination"].readIfPresent(with: CleanRoomsMLClientTypes.S3ConfigMap.read(from:))
        return value
    }
}

extension CleanRoomsMLClientTypes.AudienceSizeConfig {

    static func write(value: CleanRoomsMLClientTypes.AudienceSizeConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audienceSizeBins"].writeList(value.audienceSizeBins, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["audienceSizeType"].write(value.audienceSizeType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.AudienceSizeConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.AudienceSizeConfig()
        value.audienceSizeType = try reader["audienceSizeType"].readIfPresent() ?? .sdkUnknown("")
        value.audienceSizeBins = try reader["audienceSizeBins"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension CleanRoomsMLClientTypes.Dataset {

    static func write(value: CleanRoomsMLClientTypes.Dataset?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputConfig"].write(value.inputConfig, with: CleanRoomsMLClientTypes.DatasetInputConfig.write(value:to:))
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.Dataset {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.Dataset()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.inputConfig = try reader["inputConfig"].readIfPresent(with: CleanRoomsMLClientTypes.DatasetInputConfig.read(from:))
        return value
    }
}

extension CleanRoomsMLClientTypes.DatasetInputConfig {

    static func write(value: CleanRoomsMLClientTypes.DatasetInputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dataSource"].write(value.dataSource, with: CleanRoomsMLClientTypes.DataSource.write(value:to:))
        try writer["schema"].writeList(value.schema, memberWritingClosure: CleanRoomsMLClientTypes.ColumnSchema.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.DatasetInputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.DatasetInputConfig()
        value.schema = try reader["schema"].readListIfPresent(memberReadingClosure: CleanRoomsMLClientTypes.ColumnSchema.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.dataSource = try reader["dataSource"].readIfPresent(with: CleanRoomsMLClientTypes.DataSource.read(from:))
        return value
    }
}

extension CleanRoomsMLClientTypes.DataSource {

    static func write(value: CleanRoomsMLClientTypes.DataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["glueDataSource"].write(value.glueDataSource, with: CleanRoomsMLClientTypes.GlueDataSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.DataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.DataSource()
        value.glueDataSource = try reader["glueDataSource"].readIfPresent(with: CleanRoomsMLClientTypes.GlueDataSource.read(from:))
        return value
    }
}

extension CleanRoomsMLClientTypes.GlueDataSource {

    static func write(value: CleanRoomsMLClientTypes.GlueDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["catalogId"].write(value.catalogId)
        try writer["databaseName"].write(value.databaseName)
        try writer["tableName"].write(value.tableName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.GlueDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.GlueDataSource()
        value.tableName = try reader["tableName"].readIfPresent() ?? ""
        value.databaseName = try reader["databaseName"].readIfPresent() ?? ""
        value.catalogId = try reader["catalogId"].readIfPresent()
        return value
    }
}

extension CleanRoomsMLClientTypes.ColumnSchema {

    static func write(value: CleanRoomsMLClientTypes.ColumnSchema?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["columnName"].write(value.columnName)
        try writer["columnTypes"].writeList(value.columnTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CleanRoomsMLClientTypes.ColumnType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.ColumnSchema {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.ColumnSchema()
        value.columnName = try reader["columnName"].readIfPresent() ?? ""
        value.columnTypes = try reader["columnTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CleanRoomsMLClientTypes.ColumnType>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension CleanRoomsMLClientTypes.AudienceExportJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.AudienceExportJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.AudienceExportJobSummary()
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.updateTime = try reader["updateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.name = try reader["name"].readIfPresent() ?? ""
        value.audienceGenerationJobArn = try reader["audienceGenerationJobArn"].readIfPresent() ?? ""
        value.audienceSize = try reader["audienceSize"].readIfPresent(with: CleanRoomsMLClientTypes.AudienceSize.read(from:))
        value.description = try reader["description"].readIfPresent()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.statusDetails = try reader["statusDetails"].readIfPresent(with: CleanRoomsMLClientTypes.StatusDetails.read(from:))
        value.outputLocation = try reader["outputLocation"].readIfPresent()
        return value
    }
}

extension CleanRoomsMLClientTypes.AudienceGenerationJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.AudienceGenerationJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.AudienceGenerationJobSummary()
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.updateTime = try reader["updateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.audienceGenerationJobArn = try reader["audienceGenerationJobArn"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.configuredAudienceModelArn = try reader["configuredAudienceModelArn"].readIfPresent() ?? ""
        value.collaborationId = try reader["collaborationId"].readIfPresent()
        value.startedBy = try reader["startedBy"].readIfPresent()
        return value
    }
}

extension CleanRoomsMLClientTypes.AudienceModelSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.AudienceModelSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.AudienceModelSummary()
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.updateTime = try reader["updateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.audienceModelArn = try reader["audienceModelArn"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.trainingDatasetArn = try reader["trainingDatasetArn"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.description = try reader["description"].readIfPresent()
        return value
    }
}

extension CleanRoomsMLClientTypes.ConfiguredAudienceModelSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.ConfiguredAudienceModelSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.ConfiguredAudienceModelSummary()
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.updateTime = try reader["updateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.name = try reader["name"].readIfPresent() ?? ""
        value.audienceModelArn = try reader["audienceModelArn"].readIfPresent() ?? ""
        value.outputConfig = try reader["outputConfig"].readIfPresent(with: CleanRoomsMLClientTypes.ConfiguredAudienceModelOutputConfig.read(from:))
        value.description = try reader["description"].readIfPresent()
        value.configuredAudienceModelArn = try reader["configuredAudienceModelArn"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension CleanRoomsMLClientTypes.TrainingDatasetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> CleanRoomsMLClientTypes.TrainingDatasetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CleanRoomsMLClientTypes.TrainingDatasetSummary()
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.updateTime = try reader["updateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.trainingDatasetArn = try reader["trainingDatasetArn"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.description = try reader["description"].readIfPresent()
        return value
    }
}

public enum CleanRoomsMLClientTypes {}
