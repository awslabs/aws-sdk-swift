//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
import struct SmithyHTTPAPI.Header
import struct SmithyHTTPAPI.Headers
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceOutput {

    public init() { }
}

/// You don't have permissions to perform the requested operation. The user or role that is making the request must have at least one IAM permissions policy attached that grants the required permissions. For more information, see Access Management in the IAM User Guide.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension MediaPackageV2ClientTypes {

    public enum AdMarkerDash: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case binary
        case xml
        case sdkUnknown(Swift.String)

        public static var allCases: [AdMarkerDash] {
            return [
                .binary,
                .xml
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .binary: return "BINARY"
            case .xml: return "XML"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {

    public enum AdMarkerHls: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case daterange
        case sdkUnknown(Swift.String)

        public static var allCases: [AdMarkerHls] {
            return [
                .daterange
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .daterange: return "DATERANGE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {
    /// The configuration of the channel group.
    public struct ChannelGroupListConfiguration {
        /// The Amazon Resource Name (ARN) associated with the resource.
        /// This member is required.
        public var arn: Swift.String?
        /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
        /// This member is required.
        public var channelGroupName: Swift.String?
        /// The date and time the channel group was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// Any descriptive information that you want to add to the channel group for future identification purposes.
        public var description: Swift.String?
        /// The date and time the channel group was modified.
        /// This member is required.
        public var modifiedAt: Foundation.Date?

        public init(
            arn: Swift.String? = nil,
            channelGroupName: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil
        )
        {
            self.arn = arn
            self.channelGroupName = channelGroupName
            self.createdAt = createdAt
            self.description = description
            self.modifiedAt = modifiedAt
        }
    }

}

extension MediaPackageV2ClientTypes {

    public enum ConflictExceptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case conflictingOperation
        case idempotentParameterMismatch
        case resourceAlreadyExists
        case resourceInUse
        case sdkUnknown(Swift.String)

        public static var allCases: [ConflictExceptionType] {
            return [
                .conflictingOperation,
                .idempotentParameterMismatch,
                .resourceAlreadyExists,
                .resourceInUse
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .conflictingOperation: return "CONFLICTING_OPERATION"
            case .idempotentParameterMismatch: return "IDEMPOTENT_PARAMETER_MISMATCH"
            case .resourceAlreadyExists: return "RESOURCE_ALREADY_EXISTS"
            case .resourceInUse: return "RESOURCE_IN_USE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Updating or deleting this resource can cause an inconsistent state.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The type of ConflictException.
        public internal(set) var conflictExceptionType: MediaPackageV2ClientTypes.ConflictExceptionType? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        conflictExceptionType: MediaPackageV2ClientTypes.ConflictExceptionType? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.conflictExceptionType = conflictExceptionType
        self.properties.message = message
    }
}

/// Indicates that an error from the service occurred while trying to process a request.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request throughput limit was exceeded.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension MediaPackageV2ClientTypes {

    public enum ValidationExceptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cencIvIncompatible
        case containerTypeImmutable
        case directModeWithTimingSource
        case drmSignalingMismatchSegmentEncryptionStatus
        case drmSystemsEncryptionMethodIncompatible
        case encryptionContractShared
        case encryptionContractUnencrypted
        case encryptionContractWithoutAudioRenditionIncompatible
        case encryptionMethodContainerTypeMismatch
        case endTimeEarlierThanStartTime
        case invalidManifestFilter
        case invalidPaginationMaxResults
        case invalidPaginationToken
        case invalidPolicy
        case invalidRoleArn
        case invalidTimeDelaySeconds
        case manifestDrmSystemsIncompatible
        case manifestNameCollision
        case memberDoesNotMatchPattern
        case memberInvalid
        case memberInvalidEnumValue
        case memberMaxLength
        case memberMaxValue
        case memberMinLength
        case memberMinValue
        case memberMissing
        case noneModeWithTimingSource
        case numManifestsHigh
        case numManifestsLow
        case onlyCmafInputTypeAllowForceEndpointErrorConfiguration
        case periodTriggersNoneSpecifiedWithAdditionalValues
        case roleArnInvalidFormat
        case roleArnLengthOutOfRange
        case roleArnNotAssumable
        case sourceDisruptionsEnabledIncorrectly
        case timingSourceMissing
        case tsContainerTypeWithDashManifest
        case updatePeriodSmallerThanSegmentDuration
        case urlInvalid
        case urlLinkLocalAddress
        case urlLocalAddress
        case urlLoopbackAddress
        case urlMulticastAddress
        case urlPort
        case urlScheme
        case urlUnknownHost
        case urlUserInfo
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionType] {
            return [
                .cencIvIncompatible,
                .containerTypeImmutable,
                .directModeWithTimingSource,
                .drmSignalingMismatchSegmentEncryptionStatus,
                .drmSystemsEncryptionMethodIncompatible,
                .encryptionContractShared,
                .encryptionContractUnencrypted,
                .encryptionContractWithoutAudioRenditionIncompatible,
                .encryptionMethodContainerTypeMismatch,
                .endTimeEarlierThanStartTime,
                .invalidManifestFilter,
                .invalidPaginationMaxResults,
                .invalidPaginationToken,
                .invalidPolicy,
                .invalidRoleArn,
                .invalidTimeDelaySeconds,
                .manifestDrmSystemsIncompatible,
                .manifestNameCollision,
                .memberDoesNotMatchPattern,
                .memberInvalid,
                .memberInvalidEnumValue,
                .memberMaxLength,
                .memberMaxValue,
                .memberMinLength,
                .memberMinValue,
                .memberMissing,
                .noneModeWithTimingSource,
                .numManifestsHigh,
                .numManifestsLow,
                .onlyCmafInputTypeAllowForceEndpointErrorConfiguration,
                .periodTriggersNoneSpecifiedWithAdditionalValues,
                .roleArnInvalidFormat,
                .roleArnLengthOutOfRange,
                .roleArnNotAssumable,
                .sourceDisruptionsEnabledIncorrectly,
                .timingSourceMissing,
                .tsContainerTypeWithDashManifest,
                .updatePeriodSmallerThanSegmentDuration,
                .urlInvalid,
                .urlLinkLocalAddress,
                .urlLocalAddress,
                .urlLoopbackAddress,
                .urlMulticastAddress,
                .urlPort,
                .urlScheme,
                .urlUnknownHost,
                .urlUserInfo
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cencIvIncompatible: return "CENC_IV_INCOMPATIBLE"
            case .containerTypeImmutable: return "CONTAINER_TYPE_IMMUTABLE"
            case .directModeWithTimingSource: return "DIRECT_MODE_WITH_TIMING_SOURCE"
            case .drmSignalingMismatchSegmentEncryptionStatus: return "DRM_SIGNALING_MISMATCH_SEGMENT_ENCRYPTION_STATUS"
            case .drmSystemsEncryptionMethodIncompatible: return "DRM_SYSTEMS_ENCRYPTION_METHOD_INCOMPATIBLE"
            case .encryptionContractShared: return "ENCRYPTION_CONTRACT_SHARED"
            case .encryptionContractUnencrypted: return "ENCRYPTION_CONTRACT_UNENCRYPTED"
            case .encryptionContractWithoutAudioRenditionIncompatible: return "ENCRYPTION_CONTRACT_WITHOUT_AUDIO_RENDITION_INCOMPATIBLE"
            case .encryptionMethodContainerTypeMismatch: return "ENCRYPTION_METHOD_CONTAINER_TYPE_MISMATCH"
            case .endTimeEarlierThanStartTime: return "END_TIME_EARLIER_THAN_START_TIME"
            case .invalidManifestFilter: return "INVALID_MANIFEST_FILTER"
            case .invalidPaginationMaxResults: return "INVALID_PAGINATION_MAX_RESULTS"
            case .invalidPaginationToken: return "INVALID_PAGINATION_TOKEN"
            case .invalidPolicy: return "INVALID_POLICY"
            case .invalidRoleArn: return "INVALID_ROLE_ARN"
            case .invalidTimeDelaySeconds: return "INVALID_TIME_DELAY_SECONDS"
            case .manifestDrmSystemsIncompatible: return "MANIFEST_DRM_SYSTEMS_INCOMPATIBLE"
            case .manifestNameCollision: return "MANIFEST_NAME_COLLISION"
            case .memberDoesNotMatchPattern: return "MEMBER_DOES_NOT_MATCH_PATTERN"
            case .memberInvalid: return "MEMBER_INVALID"
            case .memberInvalidEnumValue: return "MEMBER_INVALID_ENUM_VALUE"
            case .memberMaxLength: return "MEMBER_MAX_LENGTH"
            case .memberMaxValue: return "MEMBER_MAX_VALUE"
            case .memberMinLength: return "MEMBER_MIN_LENGTH"
            case .memberMinValue: return "MEMBER_MIN_VALUE"
            case .memberMissing: return "MEMBER_MISSING"
            case .noneModeWithTimingSource: return "NONE_MODE_WITH_TIMING_SOURCE"
            case .numManifestsHigh: return "NUM_MANIFESTS_HIGH"
            case .numManifestsLow: return "NUM_MANIFESTS_LOW"
            case .onlyCmafInputTypeAllowForceEndpointErrorConfiguration: return "ONLY_CMAF_INPUT_TYPE_ALLOW_FORCE_ENDPOINT_ERROR_CONFIGURATION"
            case .periodTriggersNoneSpecifiedWithAdditionalValues: return "PERIOD_TRIGGERS_NONE_SPECIFIED_WITH_ADDITIONAL_VALUES"
            case .roleArnInvalidFormat: return "ROLE_ARN_INVALID_FORMAT"
            case .roleArnLengthOutOfRange: return "ROLE_ARN_LENGTH_OUT_OF_RANGE"
            case .roleArnNotAssumable: return "ROLE_ARN_NOT_ASSUMABLE"
            case .sourceDisruptionsEnabledIncorrectly: return "SOURCE_DISRUPTIONS_ENABLED_INCORRECTLY"
            case .timingSourceMissing: return "TIMING_SOURCE_MISSING"
            case .tsContainerTypeWithDashManifest: return "TS_CONTAINER_TYPE_WITH_DASH_MANIFEST"
            case .updatePeriodSmallerThanSegmentDuration: return "UPDATE_PERIOD_SMALLER_THAN_SEGMENT_DURATION"
            case .urlInvalid: return "URL_INVALID"
            case .urlLinkLocalAddress: return "URL_LINK_LOCAL_ADDRESS"
            case .urlLocalAddress: return "URL_LOCAL_ADDRESS"
            case .urlLoopbackAddress: return "URL_LOOPBACK_ADDRESS"
            case .urlMulticastAddress: return "URL_MULTICAST_ADDRESS"
            case .urlPort: return "URL_PORT"
            case .urlScheme: return "URL_SCHEME"
            case .urlUnknownHost: return "URL_UNKNOWN_HOST"
            case .urlUserInfo: return "URL_USER_INFO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The input failed to meet the constraints specified by the AWS service.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The type of ValidationException.
        public internal(set) var validationExceptionType: MediaPackageV2ClientTypes.ValidationExceptionType? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        validationExceptionType: MediaPackageV2ClientTypes.ValidationExceptionType? = nil
    )
    {
        self.properties.message = message
        self.properties.validationExceptionType = validationExceptionType
    }
}

public struct DeleteChannelPolicyInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
    }
}

public struct DeleteChannelPolicyOutput {

    public init() { }
}

extension MediaPackageV2ClientTypes {

    public enum ResourceTypeNotFound: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case channel
        case channelGroup
        case originEndpoint
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceTypeNotFound] {
            return [
                .channel,
                .channelGroup,
                .originEndpoint
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .channel: return "CHANNEL"
            case .channelGroup: return "CHANNEL_GROUP"
            case .originEndpoint: return "ORIGIN_ENDPOINT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The specified resource doesn't exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The specified resource type wasn't found.
        public internal(set) var resourceTypeNotFound: MediaPackageV2ClientTypes.ResourceTypeNotFound? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceTypeNotFound: MediaPackageV2ClientTypes.ResourceTypeNotFound? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceTypeNotFound = resourceTypeNotFound
    }
}

public struct GetChannelPolicyInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
    }
}

public struct GetChannelPolicyOutput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The policy assigned to the channel.
    /// This member is required.
    public var policy: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        policy: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.policy = policy
    }
}

public struct PutChannelPolicyInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The policy to attach to the specified channel.
    /// This member is required.
    public var policy: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        policy: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.policy = policy
    }
}

public struct PutChannelPolicyOutput {

    public init() { }
}

/// The request would cause a service quota to be exceeded.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension MediaPackageV2ClientTypes {

    public enum InputType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cmaf
        case hls
        case sdkUnknown(Swift.String)

        public static var allCases: [InputType] {
            return [
                .cmaf,
                .hls
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cmaf: return "CMAF"
            case .hls: return "HLS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateChannelInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. You can't change the name after you create the channel.
    /// This member is required.
    public var channelName: Swift.String?
    /// A unique, case-sensitive token that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// Enter any descriptive text that helps you to identify the channel.
    public var description: Swift.String?
    /// The input type will be an immutable field which will be used to define whether the channel will allow CMAF ingest or HLS ingest. If unprovided, it will default to HLS to preserve current behavior. The allowed values are:
    ///
    /// * HLS - The HLS streaming specification (which defines M3U8 manifests and TS segments).
    ///
    /// * CMAF - The DASH-IF CMAF Ingest specification (which defines CMAF segments with optional DASH manifests).
    public var inputType: MediaPackageV2ClientTypes.InputType?
    /// A comma-separated list of tag key:value pairs that you define. For example: "Key1": "Value1",
    ///     "Key2": "Value2"
    public var tags: [Swift.String: Swift.String]?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        inputType: MediaPackageV2ClientTypes.InputType? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.clientToken = clientToken
        self.description = description
        self.inputType = inputType
        self.tags = tags
    }
}

extension MediaPackageV2ClientTypes {
    /// The ingest domain URL where the source stream should be sent.
    public struct IngestEndpoint {
        /// The system-generated unique identifier for the IngestEndpoint.
        public var id: Swift.String?
        /// The ingest domain URL where the source stream should be sent.
        public var url: Swift.String?

        public init(
            id: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.id = id
            self.url = url
        }
    }

}

public struct CreateChannelOutput {
    /// The Amazon Resource Name (ARN) associated with the resource.
    /// This member is required.
    public var arn: Swift.String?
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The date and time the channel was created.
    /// This member is required.
    public var createdAt: Foundation.Date?
    /// The description for your channel.
    public var description: Swift.String?
    /// The current Entity Tag (ETag) associated with this resource. The entity tag can be used to safely make concurrent updates to the resource.
    public var eTag: Swift.String?
    /// The list of ingest endpoints.
    public var ingestEndpoints: [MediaPackageV2ClientTypes.IngestEndpoint]?
    /// The input type will be an immutable field which will be used to define whether the channel will allow CMAF ingest or HLS ingest. If unprovided, it will default to HLS to preserve current behavior. The allowed values are:
    ///
    /// * HLS - The HLS streaming specification (which defines M3U8 manifests and TS segments).
    ///
    /// * CMAF - The DASH-IF CMAF Ingest specification (which defines CMAF segments with optional DASH manifests).
    public var inputType: MediaPackageV2ClientTypes.InputType?
    /// The date and time the channel was modified.
    /// This member is required.
    public var modifiedAt: Foundation.Date?
    /// The comma-separated list of tag key:value pairs assigned to the channel.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        eTag: Swift.String? = nil,
        ingestEndpoints: [MediaPackageV2ClientTypes.IngestEndpoint]? = nil,
        inputType: MediaPackageV2ClientTypes.InputType? = nil,
        modifiedAt: Foundation.Date? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.createdAt = createdAt
        self.description = description
        self.eTag = eTag
        self.ingestEndpoints = ingestEndpoints
        self.inputType = inputType
        self.modifiedAt = modifiedAt
        self.tags = tags
    }
}

public struct DeleteChannelInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
    }
}

public struct DeleteChannelOutput {

    public init() { }
}

public struct GetChannelInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
    }
}

public struct GetChannelOutput {
    /// The Amazon Resource Name (ARN) associated with the resource.
    /// This member is required.
    public var arn: Swift.String?
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The date and time the channel was created.
    /// This member is required.
    public var createdAt: Foundation.Date?
    /// The description for your channel.
    public var description: Swift.String?
    /// The current Entity Tag (ETag) associated with this resource. The entity tag can be used to safely make concurrent updates to the resource.
    public var eTag: Swift.String?
    /// The list of ingest endpoints.
    public var ingestEndpoints: [MediaPackageV2ClientTypes.IngestEndpoint]?
    /// The input type will be an immutable field which will be used to define whether the channel will allow CMAF ingest or HLS ingest. If unprovided, it will default to HLS to preserve current behavior. The allowed values are:
    ///
    /// * HLS - The HLS streaming specification (which defines M3U8 manifests and TS segments).
    ///
    /// * CMAF - The DASH-IF CMAF Ingest specification (which defines CMAF segments with optional DASH manifests).
    public var inputType: MediaPackageV2ClientTypes.InputType?
    /// The date and time the channel was modified.
    /// This member is required.
    public var modifiedAt: Foundation.Date?
    /// The comma-separated list of tag key:value pairs assigned to the channel.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        eTag: Swift.String? = nil,
        ingestEndpoints: [MediaPackageV2ClientTypes.IngestEndpoint]? = nil,
        inputType: MediaPackageV2ClientTypes.InputType? = nil,
        modifiedAt: Foundation.Date? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.createdAt = createdAt
        self.description = description
        self.eTag = eTag
        self.ingestEndpoints = ingestEndpoints
        self.inputType = inputType
        self.modifiedAt = modifiedAt
        self.tags = tags
    }
}

public struct ListChannelsInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The maximum number of results to return in the response.
    public var maxResults: Swift.Int?
    /// The pagination token from the GET list request. Use the token to fetch the next page of results.
    public var nextToken: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension MediaPackageV2ClientTypes {
    /// The configuration of the channel.
    public struct ChannelListConfiguration {
        /// The Amazon Resource Name (ARN) associated with the resource.
        /// This member is required.
        public var arn: Swift.String?
        /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
        /// This member is required.
        public var channelGroupName: Swift.String?
        /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
        /// This member is required.
        public var channelName: Swift.String?
        /// The date and time the channel was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// Any descriptive information that you want to add to the channel for future identification purposes.
        public var description: Swift.String?
        /// The input type will be an immutable field which will be used to define whether the channel will allow CMAF ingest or HLS ingest. If unprovided, it will default to HLS to preserve current behavior. The allowed values are:
        ///
        /// * HLS - The HLS streaming specification (which defines M3U8 manifests and TS segments).
        ///
        /// * CMAF - The DASH-IF CMAF Ingest specification (which defines CMAF segments with optional DASH manifests).
        public var inputType: MediaPackageV2ClientTypes.InputType?
        /// The date and time the channel was modified.
        /// This member is required.
        public var modifiedAt: Foundation.Date?

        public init(
            arn: Swift.String? = nil,
            channelGroupName: Swift.String? = nil,
            channelName: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            inputType: MediaPackageV2ClientTypes.InputType? = nil,
            modifiedAt: Foundation.Date? = nil
        )
        {
            self.arn = arn
            self.channelGroupName = channelGroupName
            self.channelName = channelName
            self.createdAt = createdAt
            self.description = description
            self.inputType = inputType
            self.modifiedAt = modifiedAt
        }
    }

}

public struct ListChannelsOutput {
    /// The objects being returned.
    public var items: [MediaPackageV2ClientTypes.ChannelListConfiguration]?
    /// The pagination token from the GET list request.
    public var nextToken: Swift.String?

    public init(
        items: [MediaPackageV2ClientTypes.ChannelListConfiguration]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

extension MediaPackageV2ClientTypes {

    public enum ContainerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cmaf
        case ts
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerType] {
            return [
                .cmaf,
                .ts
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cmaf: return "CMAF"
            case .ts: return "TS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {

    public enum DashDrmSignaling: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case individual
        case referenced
        case sdkUnknown(Swift.String)

        public static var allCases: [DashDrmSignaling] {
            return [
                .individual,
                .referenced
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .individual: return "INDIVIDUAL"
            case .referenced: return "REFERENCED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {
    /// Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.
    public struct FilterConfiguration {
        /// Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.
        public var end: Foundation.Date?
        /// Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.
        public var manifestFilter: Swift.String?
        /// Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.
        public var start: Foundation.Date?
        /// Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.
        public var timeDelaySeconds: Swift.Int?

        public init(
            end: Foundation.Date? = nil,
            manifestFilter: Swift.String? = nil,
            start: Foundation.Date? = nil,
            timeDelaySeconds: Swift.Int? = nil
        )
        {
            self.end = end
            self.manifestFilter = manifestFilter
            self.start = start
            self.timeDelaySeconds = timeDelaySeconds
        }
    }

}

extension MediaPackageV2ClientTypes {

    public enum DashPeriodTrigger: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case avails
        case drmKeyRotation
        case `none`
        case sourceChanges
        case sourceDisruptions
        case sdkUnknown(Swift.String)

        public static var allCases: [DashPeriodTrigger] {
            return [
                .avails,
                .drmKeyRotation,
                .none,
                .sourceChanges,
                .sourceDisruptions
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .avails: return "AVAILS"
            case .drmKeyRotation: return "DRM_KEY_ROTATION"
            case .none: return "NONE"
            case .sourceChanges: return "SOURCE_CHANGES"
            case .sourceDisruptions: return "SOURCE_DISRUPTIONS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {
    /// The SCTE configuration.
    public struct ScteDash {
        /// Choose how ad markers are included in the packaged content. If you include ad markers in the content stream in your upstream encoders, then you need to inform MediaPackage what to do with the ad markers in the output. Value description:
        ///
        /// * Binary - The SCTE-35 marker is expressed as a hex-string (Base64 string) rather than full XML.
        ///
        /// * XML - The SCTE marker is expressed fully in XML.
        public var adMarkerDash: MediaPackageV2ClientTypes.AdMarkerDash?

        public init(
            adMarkerDash: MediaPackageV2ClientTypes.AdMarkerDash? = nil
        )
        {
            self.adMarkerDash = adMarkerDash
        }
    }

}

extension MediaPackageV2ClientTypes {

    public enum DashSegmentTemplateFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case numberWithTimeline
        case sdkUnknown(Swift.String)

        public static var allCases: [DashSegmentTemplateFormat] {
            return [
                .numberWithTimeline
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .numberWithTimeline: return "NUMBER_WITH_TIMELINE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {

    public enum DashUtcTimingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case httpHead
        case httpIso
        case httpXsdate
        case utcDirect
        case sdkUnknown(Swift.String)

        public static var allCases: [DashUtcTimingMode] {
            return [
                .httpHead,
                .httpIso,
                .httpXsdate,
                .utcDirect
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .httpHead: return "HTTP_HEAD"
            case .httpIso: return "HTTP_ISO"
            case .httpXsdate: return "HTTP_XSDATE"
            case .utcDirect: return "UTC_DIRECT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {
    /// Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).
    public struct DashUtcTiming {
        /// The UTC timing mode.
        public var timingMode: MediaPackageV2ClientTypes.DashUtcTimingMode?
        /// The the method that the player uses to synchronize to coordinated universal time (UTC) wall clock time.
        public var timingSource: Swift.String?

        public init(
            timingMode: MediaPackageV2ClientTypes.DashUtcTimingMode? = nil,
            timingSource: Swift.String? = nil
        )
        {
            self.timingMode = timingMode
            self.timingSource = timingSource
        }
    }

}

extension MediaPackageV2ClientTypes {
    /// Create a DASH manifest configuration.
    public struct CreateDashManifestConfiguration {
        /// Determines how the DASH manifest signals the DRM content.
        public var drmSignaling: MediaPackageV2ClientTypes.DashDrmSignaling?
        /// Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.
        public var filterConfiguration: MediaPackageV2ClientTypes.FilterConfiguration?
        /// A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint.
        /// This member is required.
        public var manifestName: Swift.String?
        /// The total duration (in seconds) of the manifest's content.
        public var manifestWindowSeconds: Swift.Int?
        /// Minimum amount of content (in seconds) that a player must keep available in the buffer.
        public var minBufferTimeSeconds: Swift.Int?
        /// Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest.
        public var minUpdatePeriodSeconds: Swift.Int?
        /// A list of triggers that controls when AWS Elemental MediaPackage separates the MPEG-DASH manifest into multiple periods. Type ADS to indicate that AWS Elemental MediaPackage must create periods in the output manifest that correspond to SCTE-35 ad markers in the input source. Leave this value empty to indicate that the manifest is contained all in one period. For more information about periods in the DASH manifest, see [Multi-period DASH in AWS Elemental MediaPackage](https://docs.aws.amazon.com/mediapackage/latest/userguide/multi-period.html).
        public var periodTriggers: [MediaPackageV2ClientTypes.DashPeriodTrigger]?
        /// The SCTE configuration.
        public var scteDash: MediaPackageV2ClientTypes.ScteDash?
        /// Determines the type of variable used in the media URL of the SegmentTemplate tag in the manifest. Also specifies if segment timeline information is included in SegmentTimeline or SegmentTemplate. Value description:
        ///
        /// * NUMBER_WITH_TIMELINE - The $Number$ variable is used in the media URL. The value of this variable is the sequential number of the segment. A full SegmentTimeline object is presented in each SegmentTemplate.
        public var segmentTemplateFormat: MediaPackageV2ClientTypes.DashSegmentTemplateFormat?
        /// The amount of time (in seconds) that the player should be from the end of the manifest.
        public var suggestedPresentationDelaySeconds: Swift.Int?
        /// Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).
        public var utcTiming: MediaPackageV2ClientTypes.DashUtcTiming?

        public init(
            drmSignaling: MediaPackageV2ClientTypes.DashDrmSignaling? = nil,
            filterConfiguration: MediaPackageV2ClientTypes.FilterConfiguration? = nil,
            manifestName: Swift.String? = nil,
            manifestWindowSeconds: Swift.Int? = nil,
            minBufferTimeSeconds: Swift.Int? = nil,
            minUpdatePeriodSeconds: Swift.Int? = nil,
            periodTriggers: [MediaPackageV2ClientTypes.DashPeriodTrigger]? = nil,
            scteDash: MediaPackageV2ClientTypes.ScteDash? = nil,
            segmentTemplateFormat: MediaPackageV2ClientTypes.DashSegmentTemplateFormat? = nil,
            suggestedPresentationDelaySeconds: Swift.Int? = nil,
            utcTiming: MediaPackageV2ClientTypes.DashUtcTiming? = nil
        )
        {
            self.drmSignaling = drmSignaling
            self.filterConfiguration = filterConfiguration
            self.manifestName = manifestName
            self.manifestWindowSeconds = manifestWindowSeconds
            self.minBufferTimeSeconds = minBufferTimeSeconds
            self.minUpdatePeriodSeconds = minUpdatePeriodSeconds
            self.periodTriggers = periodTriggers
            self.scteDash = scteDash
            self.segmentTemplateFormat = segmentTemplateFormat
            self.suggestedPresentationDelaySeconds = suggestedPresentationDelaySeconds
            self.utcTiming = utcTiming
        }
    }

}

extension MediaPackageV2ClientTypes {

    public enum EndpointErrorCondition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case incompleteManifest
        case missingDrmKey
        case slateInput
        case staleManifest
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointErrorCondition] {
            return [
                .incompleteManifest,
                .missingDrmKey,
                .slateInput,
                .staleManifest
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .incompleteManifest: return "INCOMPLETE_MANIFEST"
            case .missingDrmKey: return "MISSING_DRM_KEY"
            case .slateInput: return "SLATE_INPUT"
            case .staleManifest: return "STALE_MANIFEST"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {
    /// The failover settings for the endpoint.
    public struct ForceEndpointErrorConfiguration {
        /// The failover conditions for the endpoint. The options are:
        ///
        /// * STALE_MANIFEST - The manifest stalled and there are no new segments or parts.
        ///
        /// * INCOMPLETE_MANIFEST - There is a gap in the manifest.
        ///
        /// * MISSING_DRM_KEY - Key rotation is enabled but we're unable to fetch the key for the current key period.
        ///
        /// * SLATE_INPUT - The segments which contain slate content are considered to be missing content.
        public var endpointErrorConditions: [MediaPackageV2ClientTypes.EndpointErrorCondition]?

        public init(
            endpointErrorConditions: [MediaPackageV2ClientTypes.EndpointErrorCondition]? = nil
        )
        {
            self.endpointErrorConditions = endpointErrorConditions
        }
    }

}

extension MediaPackageV2ClientTypes {
    /// The SCTE configuration.
    public struct ScteHls {
        /// Ad markers indicate when ads should be inserted during playback. If you include ad markers in the content stream in your upstream encoders, then you need to inform MediaPackage what to do with the ad markers in the output. Choose what you want MediaPackage to do with the ad markers. Value description:
        ///
        /// * DATERANGE - Insert EXT-X-DATERANGE tags to signal ad and program transition events in TS and CMAF manifests. If you use DATERANGE, you must set a programDateTimeIntervalSeconds value of 1 or higher. To learn more about DATERANGE, see [SCTE-35 Ad Marker EXT-X-DATERANGE](http://docs.aws.amazon.com/mediapackage/latest/ug/scte-35-ad-marker-ext-x-daterange.html).
        public var adMarkerHls: MediaPackageV2ClientTypes.AdMarkerHls?

        public init(
            adMarkerHls: MediaPackageV2ClientTypes.AdMarkerHls? = nil
        )
        {
            self.adMarkerHls = adMarkerHls
        }
    }

}

extension MediaPackageV2ClientTypes {
    /// Create an HTTP live streaming (HLS) manifest configuration.
    public struct CreateHlsManifestConfiguration {
        /// A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index, with an added suffix to distinguish it from the manifest name. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.
        public var childManifestName: Swift.String?
        /// Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.
        public var filterConfiguration: MediaPackageV2ClientTypes.FilterConfiguration?
        /// A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.
        /// This member is required.
        public var manifestName: Swift.String?
        /// The total duration (in seconds) of the manifest's content.
        public var manifestWindowSeconds: Swift.Int?
        /// Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. ID3Timed metadata messages generate every 5 seconds whenever the content is ingested. Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.
        public var programDateTimeIntervalSeconds: Swift.Int?
        /// The SCTE configuration.
        public var scteHls: MediaPackageV2ClientTypes.ScteHls?

        public init(
            childManifestName: Swift.String? = nil,
            filterConfiguration: MediaPackageV2ClientTypes.FilterConfiguration? = nil,
            manifestName: Swift.String? = nil,
            manifestWindowSeconds: Swift.Int? = nil,
            programDateTimeIntervalSeconds: Swift.Int? = nil,
            scteHls: MediaPackageV2ClientTypes.ScteHls? = nil
        )
        {
            self.childManifestName = childManifestName
            self.filterConfiguration = filterConfiguration
            self.manifestName = manifestName
            self.manifestWindowSeconds = manifestWindowSeconds
            self.programDateTimeIntervalSeconds = programDateTimeIntervalSeconds
            self.scteHls = scteHls
        }
    }

}

extension MediaPackageV2ClientTypes {
    /// Create a low-latency HTTP live streaming (HLS) manifest configuration.
    public struct CreateLowLatencyHlsManifestConfiguration {
        /// A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index, with an added suffix to distinguish it from the manifest name. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.
        public var childManifestName: Swift.String?
        /// Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.
        public var filterConfiguration: MediaPackageV2ClientTypes.FilterConfiguration?
        /// A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.
        /// This member is required.
        public var manifestName: Swift.String?
        /// The total duration (in seconds) of the manifest's content.
        public var manifestWindowSeconds: Swift.Int?
        /// Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. ID3Timed metadata messages generate every 5 seconds whenever the content is ingested. Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.
        public var programDateTimeIntervalSeconds: Swift.Int?
        /// The SCTE configuration.
        public var scteHls: MediaPackageV2ClientTypes.ScteHls?

        public init(
            childManifestName: Swift.String? = nil,
            filterConfiguration: MediaPackageV2ClientTypes.FilterConfiguration? = nil,
            manifestName: Swift.String? = nil,
            manifestWindowSeconds: Swift.Int? = nil,
            programDateTimeIntervalSeconds: Swift.Int? = nil,
            scteHls: MediaPackageV2ClientTypes.ScteHls? = nil
        )
        {
            self.childManifestName = childManifestName
            self.filterConfiguration = filterConfiguration
            self.manifestName = manifestName
            self.manifestWindowSeconds = manifestWindowSeconds
            self.programDateTimeIntervalSeconds = programDateTimeIntervalSeconds
            self.scteHls = scteHls
        }
    }

}

extension MediaPackageV2ClientTypes {

    public enum CmafEncryptionMethod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cbcs
        case cenc
        case sdkUnknown(Swift.String)

        public static var allCases: [CmafEncryptionMethod] {
            return [
                .cbcs,
                .cenc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cbcs: return "CBCS"
            case .cenc: return "CENC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {

    public enum TsEncryptionMethod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aes128
        case sampleAes
        case sdkUnknown(Swift.String)

        public static var allCases: [TsEncryptionMethod] {
            return [
                .aes128,
                .sampleAes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aes128: return "AES_128"
            case .sampleAes: return "SAMPLE_AES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {
    /// The encryption type.
    public struct EncryptionMethod {
        /// The encryption method to use.
        public var cmafEncryptionMethod: MediaPackageV2ClientTypes.CmafEncryptionMethod?
        /// The encryption method to use.
        public var tsEncryptionMethod: MediaPackageV2ClientTypes.TsEncryptionMethod?

        public init(
            cmafEncryptionMethod: MediaPackageV2ClientTypes.CmafEncryptionMethod? = nil,
            tsEncryptionMethod: MediaPackageV2ClientTypes.TsEncryptionMethod? = nil
        )
        {
            self.cmafEncryptionMethod = cmafEncryptionMethod
            self.tsEncryptionMethod = tsEncryptionMethod
        }
    }

}

extension MediaPackageV2ClientTypes {

    public enum DrmSystem: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case clearKeyAes128
        case fairplay
        case playready
        case widevine
        case sdkUnknown(Swift.String)

        public static var allCases: [DrmSystem] {
            return [
                .clearKeyAes128,
                .fairplay,
                .playready,
                .widevine
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clearKeyAes128: return "CLEAR_KEY_AES_128"
            case .fairplay: return "FAIRPLAY"
            case .playready: return "PLAYREADY"
            case .widevine: return "WIDEVINE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {

    public enum PresetSpeke20Audio: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case presetAudio1
        case presetAudio2
        case presetAudio3
        case shared
        case unencrypted
        case sdkUnknown(Swift.String)

        public static var allCases: [PresetSpeke20Audio] {
            return [
                .presetAudio1,
                .presetAudio2,
                .presetAudio3,
                .shared,
                .unencrypted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .presetAudio1: return "PRESET_AUDIO_1"
            case .presetAudio2: return "PRESET_AUDIO_2"
            case .presetAudio3: return "PRESET_AUDIO_3"
            case .shared: return "SHARED"
            case .unencrypted: return "UNENCRYPTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {

    public enum PresetSpeke20Video: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case presetVideo1
        case presetVideo2
        case presetVideo3
        case presetVideo4
        case presetVideo5
        case presetVideo6
        case presetVideo7
        case presetVideo8
        case shared
        case unencrypted
        case sdkUnknown(Swift.String)

        public static var allCases: [PresetSpeke20Video] {
            return [
                .presetVideo1,
                .presetVideo2,
                .presetVideo3,
                .presetVideo4,
                .presetVideo5,
                .presetVideo6,
                .presetVideo7,
                .presetVideo8,
                .shared,
                .unencrypted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .presetVideo1: return "PRESET_VIDEO_1"
            case .presetVideo2: return "PRESET_VIDEO_2"
            case .presetVideo3: return "PRESET_VIDEO_3"
            case .presetVideo4: return "PRESET_VIDEO_4"
            case .presetVideo5: return "PRESET_VIDEO_5"
            case .presetVideo6: return "PRESET_VIDEO_6"
            case .presetVideo7: return "PRESET_VIDEO_7"
            case .presetVideo8: return "PRESET_VIDEO_8"
            case .shared: return "SHARED"
            case .unencrypted: return "UNENCRYPTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {
    /// Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.
    public struct EncryptionContractConfiguration {
        /// A collection of audio encryption presets. Value description:
        ///
        /// * PRESET-AUDIO-1 - Use one content key to encrypt all of the audio tracks in your stream.
        ///
        /// * PRESET-AUDIO-2 - Use one content key to encrypt all of the stereo audio tracks and one content key to encrypt all of the multichannel audio tracks.
        ///
        /// * PRESET-AUDIO-3 - Use one content key to encrypt all of the stereo audio tracks, one content key to encrypt all of the multichannel audio tracks with 3 to 6 channels, and one content key to encrypt all of the multichannel audio tracks with more than 6 channels.
        ///
        /// * SHARED - Use the same content key for all of the audio and video tracks in your stream.
        ///
        /// * UNENCRYPTED - Don't encrypt any of the audio tracks in your stream.
        /// This member is required.
        public var presetSpeke20Audio: MediaPackageV2ClientTypes.PresetSpeke20Audio?
        /// A collection of video encryption presets. Value description:
        ///
        /// * PRESET-VIDEO-1 - Use one content key to encrypt all of the video tracks in your stream.
        ///
        /// * PRESET-VIDEO-2 - Use one content key to encrypt all of the SD video tracks and one content key for all HD and higher resolutions video tracks.
        ///
        /// * PRESET-VIDEO-3 - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks and one content key for all UHD video tracks.
        ///
        /// * PRESET-VIDEO-4 - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
        ///
        /// * PRESET-VIDEO-5 - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
        ///
        /// * PRESET-VIDEO-6 - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks.
        ///
        /// * PRESET-VIDEO-7 - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks.
        ///
        /// * PRESET-VIDEO-8 - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
        ///
        /// * SHARED - Use the same content key for all of the video and audio tracks in your stream.
        ///
        /// * UNENCRYPTED - Don't encrypt any of the video tracks in your stream.
        /// This member is required.
        public var presetSpeke20Video: MediaPackageV2ClientTypes.PresetSpeke20Video?

        public init(
            presetSpeke20Audio: MediaPackageV2ClientTypes.PresetSpeke20Audio? = nil,
            presetSpeke20Video: MediaPackageV2ClientTypes.PresetSpeke20Video? = nil
        )
        {
            self.presetSpeke20Audio = presetSpeke20Audio
            self.presetSpeke20Video = presetSpeke20Video
        }
    }

}

extension MediaPackageV2ClientTypes {
    /// The parameters for the SPEKE key provider.
    public struct SpekeKeyProvider {
        /// The DRM solution provider you're using to protect your content during distribution.
        /// This member is required.
        public var drmSystems: [MediaPackageV2ClientTypes.DrmSystem]?
        /// Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.
        /// This member is required.
        public var encryptionContractConfiguration: MediaPackageV2ClientTypes.EncryptionContractConfiguration?
        /// The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID. The following example shows a resource ID: MovieNight20171126093045
        /// This member is required.
        public var resourceId: Swift.String?
        /// The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider. Valid format: arn:aws:iam::{accountID}:role/{name}. The following example shows a role ARN: arn:aws:iam::444455556666:role/SpekeAccess
        /// This member is required.
        public var roleArn: Swift.String?
        /// The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://. The following example shows a URL: https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection
        /// This member is required.
        public var url: Swift.String?

        public init(
            drmSystems: [MediaPackageV2ClientTypes.DrmSystem]? = nil,
            encryptionContractConfiguration: MediaPackageV2ClientTypes.EncryptionContractConfiguration? = nil,
            resourceId: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.drmSystems = drmSystems
            self.encryptionContractConfiguration = encryptionContractConfiguration
            self.resourceId = resourceId
            self.roleArn = roleArn
            self.url = url
        }
    }

}

extension MediaPackageV2ClientTypes {
    /// The parameters for encrypting content.
    public struct Encryption {
        /// A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).
        public var constantInitializationVector: Swift.String?
        /// The encryption method to use.
        /// This member is required.
        public var encryptionMethod: MediaPackageV2ClientTypes.EncryptionMethod?
        /// The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated. The following example setting causes the service to rotate keys every thirty minutes: 1800
        public var keyRotationIntervalSeconds: Swift.Int?
        /// The parameters for the SPEKE key provider.
        /// This member is required.
        public var spekeKeyProvider: MediaPackageV2ClientTypes.SpekeKeyProvider?

        public init(
            constantInitializationVector: Swift.String? = nil,
            encryptionMethod: MediaPackageV2ClientTypes.EncryptionMethod? = nil,
            keyRotationIntervalSeconds: Swift.Int? = nil,
            spekeKeyProvider: MediaPackageV2ClientTypes.SpekeKeyProvider? = nil
        )
        {
            self.constantInitializationVector = constantInitializationVector
            self.encryptionMethod = encryptionMethod
            self.keyRotationIntervalSeconds = keyRotationIntervalSeconds
            self.spekeKeyProvider = spekeKeyProvider
        }
    }

}

extension MediaPackageV2ClientTypes {

    public enum ScteFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `break`
        case distributorAdvertisement
        case distributorOverlayPlacementOpportunity
        case distributorPlacementOpportunity
        case program
        case providerAdvertisement
        case providerOverlayPlacementOpportunity
        case providerPlacementOpportunity
        case spliceInsert
        case sdkUnknown(Swift.String)

        public static var allCases: [ScteFilter] {
            return [
                .break,
                .distributorAdvertisement,
                .distributorOverlayPlacementOpportunity,
                .distributorPlacementOpportunity,
                .program,
                .providerAdvertisement,
                .providerOverlayPlacementOpportunity,
                .providerPlacementOpportunity,
                .spliceInsert
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .break: return "BREAK"
            case .distributorAdvertisement: return "DISTRIBUTOR_ADVERTISEMENT"
            case .distributorOverlayPlacementOpportunity: return "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY"
            case .distributorPlacementOpportunity: return "DISTRIBUTOR_PLACEMENT_OPPORTUNITY"
            case .program: return "PROGRAM"
            case .providerAdvertisement: return "PROVIDER_ADVERTISEMENT"
            case .providerOverlayPlacementOpportunity: return "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY"
            case .providerPlacementOpportunity: return "PROVIDER_PLACEMENT_OPPORTUNITY"
            case .spliceInsert: return "SPLICE_INSERT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageV2ClientTypes {
    /// The SCTE configuration.
    public struct Scte {
        /// The SCTE-35 message types that you want to be treated as ad markers in the output.
        public var scteFilter: [MediaPackageV2ClientTypes.ScteFilter]?

        public init(
            scteFilter: [MediaPackageV2ClientTypes.ScteFilter]? = nil
        )
        {
            self.scteFilter = scteFilter
        }
    }

}

extension MediaPackageV2ClientTypes {
    /// The segment configuration, including the segment name, duration, and other configuration values.
    public struct Segment {
        /// The parameters for encrypting content.
        public var encryption: MediaPackageV2ClientTypes.Encryption?
        /// When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind.
        public var includeIframeOnlyStreams: Swift.Bool?
        /// The SCTE configuration options in the segment settings.
        public var scte: MediaPackageV2ClientTypes.Scte?
        /// The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration.
        public var segmentDurationSeconds: Swift.Int?
        /// The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name.
        public var segmentName: Swift.String?
        /// By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output.
        public var tsIncludeDvbSubtitles: Swift.Bool?
        /// When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.
        public var tsUseAudioRenditionGroup: Swift.Bool?

        public init(
            encryption: MediaPackageV2ClientTypes.Encryption? = nil,
            includeIframeOnlyStreams: Swift.Bool? = nil,
            scte: MediaPackageV2ClientTypes.Scte? = nil,
            segmentDurationSeconds: Swift.Int? = nil,
            segmentName: Swift.String? = nil,
            tsIncludeDvbSubtitles: Swift.Bool? = nil,
            tsUseAudioRenditionGroup: Swift.Bool? = nil
        )
        {
            self.encryption = encryption
            self.includeIframeOnlyStreams = includeIframeOnlyStreams
            self.scte = scte
            self.segmentDurationSeconds = segmentDurationSeconds
            self.segmentName = segmentName
            self.tsIncludeDvbSubtitles = tsIncludeDvbSubtitles
            self.tsUseAudioRenditionGroup = tsUseAudioRenditionGroup
        }
    }

}

public struct CreateOriginEndpointInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// A unique, case-sensitive token that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// The type of container to attach to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file. You can't change the container type after you create the endpoint.
    /// This member is required.
    public var containerType: MediaPackageV2ClientTypes.ContainerType?
    /// A DASH manifest configuration.
    public var dashManifests: [MediaPackageV2ClientTypes.CreateDashManifestConfiguration]?
    /// Enter any descriptive text that helps you to identify the origin endpoint.
    public var description: Swift.String?
    /// The failover settings for the endpoint.
    public var forceEndpointErrorConfiguration: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration?
    /// An HTTP live streaming (HLS) manifest configuration.
    public var hlsManifests: [MediaPackageV2ClientTypes.CreateHlsManifestConfiguration]?
    /// A low-latency HLS manifest configuration.
    public var lowLatencyHlsManifests: [MediaPackageV2ClientTypes.CreateLowLatencyHlsManifestConfiguration]?
    /// The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and must be unique for your account in the AWS Region and channel. You can't use spaces in the name. You can't change the name after you create the endpoint.
    /// This member is required.
    public var originEndpointName: Swift.String?
    /// The segment configuration, including the segment name, duration, and other configuration values.
    public var segment: MediaPackageV2ClientTypes.Segment?
    /// The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).
    public var startoverWindowSeconds: Swift.Int?
    /// A comma-separated list of tag key:value pairs that you define. For example: "Key1": "Value1",
    ///     "Key2": "Value2"
    public var tags: [Swift.String: Swift.String]?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        containerType: MediaPackageV2ClientTypes.ContainerType? = nil,
        dashManifests: [MediaPackageV2ClientTypes.CreateDashManifestConfiguration]? = nil,
        description: Swift.String? = nil,
        forceEndpointErrorConfiguration: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration? = nil,
        hlsManifests: [MediaPackageV2ClientTypes.CreateHlsManifestConfiguration]? = nil,
        lowLatencyHlsManifests: [MediaPackageV2ClientTypes.CreateLowLatencyHlsManifestConfiguration]? = nil,
        originEndpointName: Swift.String? = nil,
        segment: MediaPackageV2ClientTypes.Segment? = nil,
        startoverWindowSeconds: Swift.Int? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.clientToken = clientToken
        self.containerType = containerType
        self.dashManifests = dashManifests
        self.description = description
        self.forceEndpointErrorConfiguration = forceEndpointErrorConfiguration
        self.hlsManifests = hlsManifests
        self.lowLatencyHlsManifests = lowLatencyHlsManifests
        self.originEndpointName = originEndpointName
        self.segment = segment
        self.startoverWindowSeconds = startoverWindowSeconds
        self.tags = tags
    }
}

extension MediaPackageV2ClientTypes {
    /// Retrieve the DASH manifest configuration.
    public struct GetDashManifestConfiguration {
        /// Determines how the DASH manifest signals the DRM content.
        public var drmSignaling: MediaPackageV2ClientTypes.DashDrmSignaling?
        /// Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.
        public var filterConfiguration: MediaPackageV2ClientTypes.FilterConfiguration?
        /// A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index.
        /// This member is required.
        public var manifestName: Swift.String?
        /// The total duration (in seconds) of the manifest's content.
        public var manifestWindowSeconds: Swift.Int?
        /// Minimum amount of content (in seconds) that a player must keep available in the buffer.
        public var minBufferTimeSeconds: Swift.Int?
        /// Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest.
        public var minUpdatePeriodSeconds: Swift.Int?
        /// A list of triggers that controls when AWS Elemental MediaPackage separates the MPEG-DASH manifest into multiple periods. Leave this value empty to indicate that the manifest is contained all in one period. For more information about periods in the DASH manifest, see [Multi-period DASH in AWS Elemental MediaPackage](https://docs.aws.amazon.com/mediapackage/latest/userguide/multi-period.html).
        public var periodTriggers: [MediaPackageV2ClientTypes.DashPeriodTrigger]?
        /// The SCTE configuration.
        public var scteDash: MediaPackageV2ClientTypes.ScteDash?
        /// Determines the type of variable used in the media URL of the SegmentTemplate tag in the manifest. Also specifies if segment timeline information is included in SegmentTimeline or SegmentTemplate. Value description:
        ///
        /// * NUMBER_WITH_TIMELINE - The $Number$ variable is used in the media URL. The value of this variable is the sequential number of the segment. A full SegmentTimeline object is presented in each SegmentTemplate.
        public var segmentTemplateFormat: MediaPackageV2ClientTypes.DashSegmentTemplateFormat?
        /// The amount of time (in seconds) that the player should be from the end of the manifest.
        public var suggestedPresentationDelaySeconds: Swift.Int?
        /// The egress domain URL for stream delivery from MediaPackage.
        /// This member is required.
        public var url: Swift.String?
        /// Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).
        public var utcTiming: MediaPackageV2ClientTypes.DashUtcTiming?

        public init(
            drmSignaling: MediaPackageV2ClientTypes.DashDrmSignaling? = nil,
            filterConfiguration: MediaPackageV2ClientTypes.FilterConfiguration? = nil,
            manifestName: Swift.String? = nil,
            manifestWindowSeconds: Swift.Int? = nil,
            minBufferTimeSeconds: Swift.Int? = nil,
            minUpdatePeriodSeconds: Swift.Int? = nil,
            periodTriggers: [MediaPackageV2ClientTypes.DashPeriodTrigger]? = nil,
            scteDash: MediaPackageV2ClientTypes.ScteDash? = nil,
            segmentTemplateFormat: MediaPackageV2ClientTypes.DashSegmentTemplateFormat? = nil,
            suggestedPresentationDelaySeconds: Swift.Int? = nil,
            url: Swift.String? = nil,
            utcTiming: MediaPackageV2ClientTypes.DashUtcTiming? = nil
        )
        {
            self.drmSignaling = drmSignaling
            self.filterConfiguration = filterConfiguration
            self.manifestName = manifestName
            self.manifestWindowSeconds = manifestWindowSeconds
            self.minBufferTimeSeconds = minBufferTimeSeconds
            self.minUpdatePeriodSeconds = minUpdatePeriodSeconds
            self.periodTriggers = periodTriggers
            self.scteDash = scteDash
            self.segmentTemplateFormat = segmentTemplateFormat
            self.suggestedPresentationDelaySeconds = suggestedPresentationDelaySeconds
            self.url = url
            self.utcTiming = utcTiming
        }
    }

}

extension MediaPackageV2ClientTypes {
    /// Retrieve the HTTP live streaming (HLS) manifest configuration.
    public struct GetHlsManifestConfiguration {
        /// A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.
        public var childManifestName: Swift.String?
        /// Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.
        public var filterConfiguration: MediaPackageV2ClientTypes.FilterConfiguration?
        /// A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.
        /// This member is required.
        public var manifestName: Swift.String?
        /// The total duration (in seconds) of the manifest's content.
        public var manifestWindowSeconds: Swift.Int?
        /// Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. ID3Timed metadata messages generate every 5 seconds whenever the content is ingested. Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.
        public var programDateTimeIntervalSeconds: Swift.Int?
        /// The SCTE configuration.
        public var scteHls: MediaPackageV2ClientTypes.ScteHls?
        /// The egress domain URL for stream delivery from MediaPackage.
        /// This member is required.
        public var url: Swift.String?

        public init(
            childManifestName: Swift.String? = nil,
            filterConfiguration: MediaPackageV2ClientTypes.FilterConfiguration? = nil,
            manifestName: Swift.String? = nil,
            manifestWindowSeconds: Swift.Int? = nil,
            programDateTimeIntervalSeconds: Swift.Int? = nil,
            scteHls: MediaPackageV2ClientTypes.ScteHls? = nil,
            url: Swift.String? = nil
        )
        {
            self.childManifestName = childManifestName
            self.filterConfiguration = filterConfiguration
            self.manifestName = manifestName
            self.manifestWindowSeconds = manifestWindowSeconds
            self.programDateTimeIntervalSeconds = programDateTimeIntervalSeconds
            self.scteHls = scteHls
            self.url = url
        }
    }

}

extension MediaPackageV2ClientTypes {
    /// Retrieve the low-latency HTTP live streaming (HLS) manifest configuration.
    public struct GetLowLatencyHlsManifestConfiguration {
        /// A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.
        public var childManifestName: Swift.String?
        /// Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.
        public var filterConfiguration: MediaPackageV2ClientTypes.FilterConfiguration?
        /// A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.
        /// This member is required.
        public var manifestName: Swift.String?
        /// The total duration (in seconds) of the manifest's content.
        public var manifestWindowSeconds: Swift.Int?
        /// Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. ID3Timed metadata messages generate every 5 seconds whenever the content is ingested. Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.
        public var programDateTimeIntervalSeconds: Swift.Int?
        /// The SCTE configuration.
        public var scteHls: MediaPackageV2ClientTypes.ScteHls?
        /// The egress domain URL for stream delivery from MediaPackage.
        /// This member is required.
        public var url: Swift.String?

        public init(
            childManifestName: Swift.String? = nil,
            filterConfiguration: MediaPackageV2ClientTypes.FilterConfiguration? = nil,
            manifestName: Swift.String? = nil,
            manifestWindowSeconds: Swift.Int? = nil,
            programDateTimeIntervalSeconds: Swift.Int? = nil,
            scteHls: MediaPackageV2ClientTypes.ScteHls? = nil,
            url: Swift.String? = nil
        )
        {
            self.childManifestName = childManifestName
            self.filterConfiguration = filterConfiguration
            self.manifestName = manifestName
            self.manifestWindowSeconds = manifestWindowSeconds
            self.programDateTimeIntervalSeconds = programDateTimeIntervalSeconds
            self.scteHls = scteHls
            self.url = url
        }
    }

}

public struct CreateOriginEndpointOutput {
    /// The Amazon Resource Name (ARN) associated with the resource.
    /// This member is required.
    public var arn: Swift.String?
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The type of container attached to this origin endpoint.
    /// This member is required.
    public var containerType: MediaPackageV2ClientTypes.ContainerType?
    /// The date and time the origin endpoint was created.
    /// This member is required.
    public var createdAt: Foundation.Date?
    /// A DASH manifest configuration.
    public var dashManifests: [MediaPackageV2ClientTypes.GetDashManifestConfiguration]?
    /// The description for your origin endpoint.
    public var description: Swift.String?
    /// The current Entity Tag (ETag) associated with this resource. The entity tag can be used to safely make concurrent updates to the resource.
    public var eTag: Swift.String?
    /// The failover settings for the endpoint.
    public var forceEndpointErrorConfiguration: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration?
    /// An HTTP live streaming (HLS) manifest configuration.
    public var hlsManifests: [MediaPackageV2ClientTypes.GetHlsManifestConfiguration]?
    /// A low-latency HLS manifest configuration.
    public var lowLatencyHlsManifests: [MediaPackageV2ClientTypes.GetLowLatencyHlsManifestConfiguration]?
    /// The date and time the origin endpoint was modified.
    /// This member is required.
    public var modifiedAt: Foundation.Date?
    /// The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.
    /// This member is required.
    public var originEndpointName: Swift.String?
    /// The segment configuration, including the segment name, duration, and other configuration values.
    /// This member is required.
    public var segment: MediaPackageV2ClientTypes.Segment?
    /// The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window.
    public var startoverWindowSeconds: Swift.Int?
    /// The comma-separated list of tag key:value pairs assigned to the origin endpoint.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        containerType: MediaPackageV2ClientTypes.ContainerType? = nil,
        createdAt: Foundation.Date? = nil,
        dashManifests: [MediaPackageV2ClientTypes.GetDashManifestConfiguration]? = nil,
        description: Swift.String? = nil,
        eTag: Swift.String? = nil,
        forceEndpointErrorConfiguration: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration? = nil,
        hlsManifests: [MediaPackageV2ClientTypes.GetHlsManifestConfiguration]? = nil,
        lowLatencyHlsManifests: [MediaPackageV2ClientTypes.GetLowLatencyHlsManifestConfiguration]? = nil,
        modifiedAt: Foundation.Date? = nil,
        originEndpointName: Swift.String? = nil,
        segment: MediaPackageV2ClientTypes.Segment? = nil,
        startoverWindowSeconds: Swift.Int? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.containerType = containerType
        self.createdAt = createdAt
        self.dashManifests = dashManifests
        self.description = description
        self.eTag = eTag
        self.forceEndpointErrorConfiguration = forceEndpointErrorConfiguration
        self.hlsManifests = hlsManifests
        self.lowLatencyHlsManifests = lowLatencyHlsManifests
        self.modifiedAt = modifiedAt
        self.originEndpointName = originEndpointName
        self.segment = segment
        self.startoverWindowSeconds = startoverWindowSeconds
        self.tags = tags
    }
}

public struct DeleteOriginEndpointInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.
    /// This member is required.
    public var originEndpointName: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        originEndpointName: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.originEndpointName = originEndpointName
    }
}

public struct DeleteOriginEndpointOutput {

    public init() { }
}

public struct GetOriginEndpointInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.
    /// This member is required.
    public var originEndpointName: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        originEndpointName: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.originEndpointName = originEndpointName
    }
}

public struct GetOriginEndpointOutput {
    /// The Amazon Resource Name (ARN) associated with the resource.
    /// This member is required.
    public var arn: Swift.String?
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The type of container attached to this origin endpoint.
    /// This member is required.
    public var containerType: MediaPackageV2ClientTypes.ContainerType?
    /// The date and time the origin endpoint was created.
    /// This member is required.
    public var createdAt: Foundation.Date?
    /// A DASH manifest configuration.
    public var dashManifests: [MediaPackageV2ClientTypes.GetDashManifestConfiguration]?
    /// The description for your origin endpoint.
    public var description: Swift.String?
    /// The current Entity Tag (ETag) associated with this resource. The entity tag can be used to safely make concurrent updates to the resource.
    public var eTag: Swift.String?
    /// The failover settings for the endpoint.
    public var forceEndpointErrorConfiguration: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration?
    /// An HTTP live streaming (HLS) manifest configuration.
    public var hlsManifests: [MediaPackageV2ClientTypes.GetHlsManifestConfiguration]?
    /// A low-latency HLS manifest configuration.
    public var lowLatencyHlsManifests: [MediaPackageV2ClientTypes.GetLowLatencyHlsManifestConfiguration]?
    /// The date and time the origin endpoint was modified.
    /// This member is required.
    public var modifiedAt: Foundation.Date?
    /// The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.
    /// This member is required.
    public var originEndpointName: Swift.String?
    /// The segment configuration, including the segment name, duration, and other configuration values.
    /// This member is required.
    public var segment: MediaPackageV2ClientTypes.Segment?
    /// The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window.
    public var startoverWindowSeconds: Swift.Int?
    /// The comma-separated list of tag key:value pairs assigned to the origin endpoint.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        containerType: MediaPackageV2ClientTypes.ContainerType? = nil,
        createdAt: Foundation.Date? = nil,
        dashManifests: [MediaPackageV2ClientTypes.GetDashManifestConfiguration]? = nil,
        description: Swift.String? = nil,
        eTag: Swift.String? = nil,
        forceEndpointErrorConfiguration: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration? = nil,
        hlsManifests: [MediaPackageV2ClientTypes.GetHlsManifestConfiguration]? = nil,
        lowLatencyHlsManifests: [MediaPackageV2ClientTypes.GetLowLatencyHlsManifestConfiguration]? = nil,
        modifiedAt: Foundation.Date? = nil,
        originEndpointName: Swift.String? = nil,
        segment: MediaPackageV2ClientTypes.Segment? = nil,
        startoverWindowSeconds: Swift.Int? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.containerType = containerType
        self.createdAt = createdAt
        self.dashManifests = dashManifests
        self.description = description
        self.eTag = eTag
        self.forceEndpointErrorConfiguration = forceEndpointErrorConfiguration
        self.hlsManifests = hlsManifests
        self.lowLatencyHlsManifests = lowLatencyHlsManifests
        self.modifiedAt = modifiedAt
        self.originEndpointName = originEndpointName
        self.segment = segment
        self.startoverWindowSeconds = startoverWindowSeconds
        self.tags = tags
    }
}

public struct ListOriginEndpointsInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The maximum number of results to return in the response.
    public var maxResults: Swift.Int?
    /// The pagination token from the GET list request. Use the token to fetch the next page of results.
    public var nextToken: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension MediaPackageV2ClientTypes {
    /// List the DASH manifest configuration.
    public struct ListDashManifestConfiguration {
        /// A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index.
        /// This member is required.
        public var manifestName: Swift.String?
        /// The egress domain URL for stream delivery from MediaPackage.
        public var url: Swift.String?

        public init(
            manifestName: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.manifestName = manifestName
            self.url = url
        }
    }

}

extension MediaPackageV2ClientTypes {
    /// List the HTTP live streaming (HLS) manifest configuration.
    public struct ListHlsManifestConfiguration {
        /// A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.
        public var childManifestName: Swift.String?
        /// A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.
        /// This member is required.
        public var manifestName: Swift.String?
        /// The egress domain URL for stream delivery from MediaPackage.
        public var url: Swift.String?

        public init(
            childManifestName: Swift.String? = nil,
            manifestName: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.childManifestName = childManifestName
            self.manifestName = manifestName
            self.url = url
        }
    }

}

extension MediaPackageV2ClientTypes {
    /// List the low-latency HTTP live streaming (HLS) manifest configuration.
    public struct ListLowLatencyHlsManifestConfiguration {
        /// A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.
        public var childManifestName: Swift.String?
        /// A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.
        /// This member is required.
        public var manifestName: Swift.String?
        /// The egress domain URL for stream delivery from MediaPackage.
        public var url: Swift.String?

        public init(
            childManifestName: Swift.String? = nil,
            manifestName: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.childManifestName = childManifestName
            self.manifestName = manifestName
            self.url = url
        }
    }

}

extension MediaPackageV2ClientTypes {
    /// The configuration of the origin endpoint.
    public struct OriginEndpointListConfiguration {
        /// The Amazon Resource Name (ARN) associated with the resource.
        /// This member is required.
        public var arn: Swift.String?
        /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
        /// This member is required.
        public var channelGroupName: Swift.String?
        /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
        /// This member is required.
        public var channelName: Swift.String?
        /// The type of container attached to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file.
        /// This member is required.
        public var containerType: MediaPackageV2ClientTypes.ContainerType?
        /// The date and time the origin endpoint was created.
        public var createdAt: Foundation.Date?
        /// A DASH manifest configuration.
        public var dashManifests: [MediaPackageV2ClientTypes.ListDashManifestConfiguration]?
        /// Any descriptive information that you want to add to the origin endpoint for future identification purposes.
        public var description: Swift.String?
        /// The failover settings for the endpoint.
        public var forceEndpointErrorConfiguration: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration?
        /// An HTTP live streaming (HLS) manifest configuration.
        public var hlsManifests: [MediaPackageV2ClientTypes.ListHlsManifestConfiguration]?
        /// A low-latency HLS manifest configuration.
        public var lowLatencyHlsManifests: [MediaPackageV2ClientTypes.ListLowLatencyHlsManifestConfiguration]?
        /// The date and time the origin endpoint was modified.
        public var modifiedAt: Foundation.Date?
        /// The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.
        /// This member is required.
        public var originEndpointName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            channelGroupName: Swift.String? = nil,
            channelName: Swift.String? = nil,
            containerType: MediaPackageV2ClientTypes.ContainerType? = nil,
            createdAt: Foundation.Date? = nil,
            dashManifests: [MediaPackageV2ClientTypes.ListDashManifestConfiguration]? = nil,
            description: Swift.String? = nil,
            forceEndpointErrorConfiguration: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration? = nil,
            hlsManifests: [MediaPackageV2ClientTypes.ListHlsManifestConfiguration]? = nil,
            lowLatencyHlsManifests: [MediaPackageV2ClientTypes.ListLowLatencyHlsManifestConfiguration]? = nil,
            modifiedAt: Foundation.Date? = nil,
            originEndpointName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.channelGroupName = channelGroupName
            self.channelName = channelName
            self.containerType = containerType
            self.createdAt = createdAt
            self.dashManifests = dashManifests
            self.description = description
            self.forceEndpointErrorConfiguration = forceEndpointErrorConfiguration
            self.hlsManifests = hlsManifests
            self.lowLatencyHlsManifests = lowLatencyHlsManifests
            self.modifiedAt = modifiedAt
            self.originEndpointName = originEndpointName
        }
    }

}

public struct ListOriginEndpointsOutput {
    /// The objects being returned.
    public var items: [MediaPackageV2ClientTypes.OriginEndpointListConfiguration]?
    /// The pagination token from the GET list request. Use the token to fetch the next page of results.
    public var nextToken: Swift.String?

    public init(
        items: [MediaPackageV2ClientTypes.OriginEndpointListConfiguration]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct DeleteOriginEndpointPolicyInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.
    /// This member is required.
    public var originEndpointName: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        originEndpointName: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.originEndpointName = originEndpointName
    }
}

public struct DeleteOriginEndpointPolicyOutput {

    public init() { }
}

public struct GetOriginEndpointPolicyInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.
    /// This member is required.
    public var originEndpointName: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        originEndpointName: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.originEndpointName = originEndpointName
    }
}

public struct GetOriginEndpointPolicyOutput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.
    /// This member is required.
    public var originEndpointName: Swift.String?
    /// The policy assigned to the origin endpoint.
    /// This member is required.
    public var policy: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        originEndpointName: Swift.String? = nil,
        policy: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.originEndpointName = originEndpointName
        self.policy = policy
    }
}

public struct PutOriginEndpointPolicyInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.
    /// This member is required.
    public var originEndpointName: Swift.String?
    /// The policy to attach to the specified origin endpoint.
    /// This member is required.
    public var policy: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        originEndpointName: Swift.String? = nil,
        policy: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.originEndpointName = originEndpointName
        self.policy = policy
    }
}

public struct PutOriginEndpointPolicyOutput {

    public init() { }
}

public struct UpdateOriginEndpointInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The type of container attached to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file.
    /// This member is required.
    public var containerType: MediaPackageV2ClientTypes.ContainerType?
    /// A DASH manifest configuration.
    public var dashManifests: [MediaPackageV2ClientTypes.CreateDashManifestConfiguration]?
    /// Any descriptive information that you want to add to the origin endpoint for future identification purposes.
    public var description: Swift.String?
    /// The expected current Entity Tag (ETag) for the resource. If the specified ETag does not match the resource's current entity tag, the update request will be rejected.
    public var eTag: Swift.String?
    /// The failover settings for the endpoint.
    public var forceEndpointErrorConfiguration: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration?
    /// An HTTP live streaming (HLS) manifest configuration.
    public var hlsManifests: [MediaPackageV2ClientTypes.CreateHlsManifestConfiguration]?
    /// A low-latency HLS manifest configuration.
    public var lowLatencyHlsManifests: [MediaPackageV2ClientTypes.CreateLowLatencyHlsManifestConfiguration]?
    /// The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.
    /// This member is required.
    public var originEndpointName: Swift.String?
    /// The segment configuration, including the segment name, duration, and other configuration values.
    public var segment: MediaPackageV2ClientTypes.Segment?
    /// The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).
    public var startoverWindowSeconds: Swift.Int?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        containerType: MediaPackageV2ClientTypes.ContainerType? = nil,
        dashManifests: [MediaPackageV2ClientTypes.CreateDashManifestConfiguration]? = nil,
        description: Swift.String? = nil,
        eTag: Swift.String? = nil,
        forceEndpointErrorConfiguration: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration? = nil,
        hlsManifests: [MediaPackageV2ClientTypes.CreateHlsManifestConfiguration]? = nil,
        lowLatencyHlsManifests: [MediaPackageV2ClientTypes.CreateLowLatencyHlsManifestConfiguration]? = nil,
        originEndpointName: Swift.String? = nil,
        segment: MediaPackageV2ClientTypes.Segment? = nil,
        startoverWindowSeconds: Swift.Int? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.containerType = containerType
        self.dashManifests = dashManifests
        self.description = description
        self.eTag = eTag
        self.forceEndpointErrorConfiguration = forceEndpointErrorConfiguration
        self.hlsManifests = hlsManifests
        self.lowLatencyHlsManifests = lowLatencyHlsManifests
        self.originEndpointName = originEndpointName
        self.segment = segment
        self.startoverWindowSeconds = startoverWindowSeconds
    }
}

public struct UpdateOriginEndpointOutput {
    /// The ARN associated with the resource.
    /// This member is required.
    public var arn: Swift.String?
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The type of container attached to this origin endpoint.
    /// This member is required.
    public var containerType: MediaPackageV2ClientTypes.ContainerType?
    /// The date and time the origin endpoint was created.
    /// This member is required.
    public var createdAt: Foundation.Date?
    /// A DASH manifest configuration.
    public var dashManifests: [MediaPackageV2ClientTypes.GetDashManifestConfiguration]?
    /// The description of the origin endpoint.
    public var description: Swift.String?
    /// The current Entity Tag (ETag) associated with this resource. The entity tag can be used to safely make concurrent updates to the resource.
    public var eTag: Swift.String?
    /// The failover settings for the endpoint.
    public var forceEndpointErrorConfiguration: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration?
    /// An HTTP live streaming (HLS) manifest configuration.
    public var hlsManifests: [MediaPackageV2ClientTypes.GetHlsManifestConfiguration]?
    /// A low-latency HLS manifest configuration.
    public var lowLatencyHlsManifests: [MediaPackageV2ClientTypes.GetLowLatencyHlsManifestConfiguration]?
    /// The date and time the origin endpoint was modified.
    /// This member is required.
    public var modifiedAt: Foundation.Date?
    /// The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.
    /// This member is required.
    public var originEndpointName: Swift.String?
    /// The segment configuration, including the segment name, duration, and other configuration values.
    /// This member is required.
    public var segment: MediaPackageV2ClientTypes.Segment?
    /// The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window.
    public var startoverWindowSeconds: Swift.Int?
    /// The comma-separated list of tag key:value pairs assigned to the origin endpoint.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        containerType: MediaPackageV2ClientTypes.ContainerType? = nil,
        createdAt: Foundation.Date? = nil,
        dashManifests: [MediaPackageV2ClientTypes.GetDashManifestConfiguration]? = nil,
        description: Swift.String? = nil,
        eTag: Swift.String? = nil,
        forceEndpointErrorConfiguration: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration? = nil,
        hlsManifests: [MediaPackageV2ClientTypes.GetHlsManifestConfiguration]? = nil,
        lowLatencyHlsManifests: [MediaPackageV2ClientTypes.GetLowLatencyHlsManifestConfiguration]? = nil,
        modifiedAt: Foundation.Date? = nil,
        originEndpointName: Swift.String? = nil,
        segment: MediaPackageV2ClientTypes.Segment? = nil,
        startoverWindowSeconds: Swift.Int? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.containerType = containerType
        self.createdAt = createdAt
        self.dashManifests = dashManifests
        self.description = description
        self.eTag = eTag
        self.forceEndpointErrorConfiguration = forceEndpointErrorConfiguration
        self.hlsManifests = hlsManifests
        self.lowLatencyHlsManifests = lowLatencyHlsManifests
        self.modifiedAt = modifiedAt
        self.originEndpointName = originEndpointName
        self.segment = segment
        self.startoverWindowSeconds = startoverWindowSeconds
        self.tags = tags
    }
}

public struct UpdateChannelInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// Any descriptive information that you want to add to the channel for future identification purposes.
    public var description: Swift.String?
    /// The expected current Entity Tag (ETag) for the resource. If the specified ETag does not match the resource's current entity tag, the update request will be rejected.
    public var eTag: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        description: Swift.String? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.description = description
        self.eTag = eTag
    }
}

public struct UpdateChannelOutput {
    /// The Amazon Resource Name (ARN) associated with the resource.
    /// This member is required.
    public var arn: Swift.String?
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
    /// This member is required.
    public var channelName: Swift.String?
    /// The date and time the channel was created.
    /// This member is required.
    public var createdAt: Foundation.Date?
    /// The description for your channel.
    public var description: Swift.String?
    /// The current Entity Tag (ETag) associated with this resource. The entity tag can be used to safely make concurrent updates to the resource.
    public var eTag: Swift.String?
    /// The list of ingest endpoints.
    public var ingestEndpoints: [MediaPackageV2ClientTypes.IngestEndpoint]?
    /// The input type will be an immutable field which will be used to define whether the channel will allow CMAF ingest or HLS ingest. If unprovided, it will default to HLS to preserve current behavior. The allowed values are:
    ///
    /// * HLS - The HLS streaming specification (which defines M3U8 manifests and TS segments).
    ///
    /// * CMAF - The DASH-IF CMAF Ingest specification (which defines CMAF segments with optional DASH manifests).
    public var inputType: MediaPackageV2ClientTypes.InputType?
    /// The date and time the channel was modified.
    /// This member is required.
    public var modifiedAt: Foundation.Date?
    /// The comma-separated list of tag key:value pairs assigned to the channel.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        channelGroupName: Swift.String? = nil,
        channelName: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        eTag: Swift.String? = nil,
        ingestEndpoints: [MediaPackageV2ClientTypes.IngestEndpoint]? = nil,
        inputType: MediaPackageV2ClientTypes.InputType? = nil,
        modifiedAt: Foundation.Date? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.channelGroupName = channelGroupName
        self.channelName = channelName
        self.createdAt = createdAt
        self.description = description
        self.eTag = eTag
        self.ingestEndpoints = ingestEndpoints
        self.inputType = inputType
        self.modifiedAt = modifiedAt
        self.tags = tags
    }
}

public struct CreateChannelGroupInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region. You can't use spaces in the name. You can't change the name after you create the channel group.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// A unique, case-sensitive token that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// Enter any descriptive text that helps you to identify the channel group.
    public var description: Swift.String?
    /// A comma-separated list of tag key:value pairs that you define. For example: "Key1": "Value1",
    ///     "Key2": "Value2"
    public var tags: [Swift.String: Swift.String]?

    public init(
        channelGroupName: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.clientToken = clientToken
        self.description = description
        self.tags = tags
    }
}

public struct CreateChannelGroupOutput {
    /// The Amazon Resource Name (ARN) associated with the resource.
    /// This member is required.
    public var arn: Swift.String?
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The date and time the channel group was created.
    /// This member is required.
    public var createdAt: Foundation.Date?
    /// The description for your channel group.
    public var description: Swift.String?
    /// The current Entity Tag (ETag) associated with this resource. The entity tag can be used to safely make concurrent updates to the resource.
    public var eTag: Swift.String?
    /// The output domain where the source stream should be sent. Integrate the egress domain with a downstream CDN (such as Amazon CloudFront) or playback device.
    /// This member is required.
    public var egressDomain: Swift.String?
    /// The date and time the channel group was modified.
    /// This member is required.
    public var modifiedAt: Foundation.Date?
    /// The comma-separated list of tag key:value pairs assigned to the channel group.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        channelGroupName: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        eTag: Swift.String? = nil,
        egressDomain: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.channelGroupName = channelGroupName
        self.createdAt = createdAt
        self.description = description
        self.eTag = eTag
        self.egressDomain = egressDomain
        self.modifiedAt = modifiedAt
        self.tags = tags
    }
}

public struct DeleteChannelGroupInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
    }
}

public struct DeleteChannelGroupOutput {

    public init() { }
}

public struct GetChannelGroupInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
    }
}

public struct GetChannelGroupOutput {
    /// The Amazon Resource Name (ARN) associated with the resource.
    /// This member is required.
    public var arn: Swift.String?
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The date and time the channel group was created.
    /// This member is required.
    public var createdAt: Foundation.Date?
    /// The description for your channel group.
    public var description: Swift.String?
    /// The current Entity Tag (ETag) associated with this resource. The entity tag can be used to safely make concurrent updates to the resource.
    public var eTag: Swift.String?
    /// The output domain where the source stream should be sent. Integrate the domain with a downstream CDN (such as Amazon CloudFront) or playback device.
    /// This member is required.
    public var egressDomain: Swift.String?
    /// The date and time the channel group was modified.
    /// This member is required.
    public var modifiedAt: Foundation.Date?
    /// The comma-separated list of tag key:value pairs assigned to the channel group.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        channelGroupName: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        eTag: Swift.String? = nil,
        egressDomain: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.channelGroupName = channelGroupName
        self.createdAt = createdAt
        self.description = description
        self.eTag = eTag
        self.egressDomain = egressDomain
        self.modifiedAt = modifiedAt
        self.tags = tags
    }
}

public struct ListChannelGroupsInput {
    /// The maximum number of results to return in the response.
    public var maxResults: Swift.Int?
    /// The pagination token from the GET list request. Use the token to fetch the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListChannelGroupsOutput {
    /// The objects being returned.
    public var items: [MediaPackageV2ClientTypes.ChannelGroupListConfiguration]?
    /// The pagination token from the GET list request. Use the token to fetch the next page of results.
    public var nextToken: Swift.String?

    public init(
        items: [MediaPackageV2ClientTypes.ChannelGroupListConfiguration]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct UpdateChannelGroupInput {
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// Any descriptive information that you want to add to the channel group for future identification purposes.
    public var description: Swift.String?
    /// The expected current Entity Tag (ETag) for the resource. If the specified ETag does not match the resource's current entity tag, the update request will be rejected.
    public var eTag: Swift.String?

    public init(
        channelGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.channelGroupName = channelGroupName
        self.description = description
        self.eTag = eTag
    }
}

public struct UpdateChannelGroupOutput {
    /// The Amazon Resource Name (ARN) associated with the resource.
    /// This member is required.
    public var arn: Swift.String?
    /// The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
    /// This member is required.
    public var channelGroupName: Swift.String?
    /// The date and time the channel group was created.
    /// This member is required.
    public var createdAt: Foundation.Date?
    /// The description for your channel group.
    public var description: Swift.String?
    /// The current Entity Tag (ETag) associated with this resource. The entity tag can be used to safely make concurrent updates to the resource.
    public var eTag: Swift.String?
    /// The output domain where the source stream is sent. Integrate the domain with a downstream CDN (such as Amazon CloudFront) or playback device.
    /// This member is required.
    public var egressDomain: Swift.String?
    /// The date and time the channel group was modified.
    /// This member is required.
    public var modifiedAt: Foundation.Date?
    /// The comma-separated list of tag key:value pairs assigned to the channel group.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        channelGroupName: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        eTag: Swift.String? = nil,
        egressDomain: Swift.String? = nil,
        modifiedAt: Foundation.Date? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.channelGroupName = channelGroupName
        self.createdAt = createdAt
        self.description = description
        self.eTag = eTag
        self.egressDomain = egressDomain
        self.modifiedAt = modifiedAt
        self.tags = tags
    }
}

public struct ListTagsForResourceInput {
    /// The ARN of the CloudWatch resource that you want to view tags for.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct TagResourceInput {
    /// The ARN of the MediaPackage resource that you're adding tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct UntagResourceInput {
    /// The ARN of the MediaPackage resource that you're removing tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

extension CreateChannelInput {

    static func urlPathProvider(_ value: CreateChannelInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel"
    }
}

extension CreateChannelInput {

    static func headerProvider(_ value: CreateChannelInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let clientToken = value.clientToken {
            items.add(SmithyHTTPAPI.Header(name: "x-amzn-client-token", value: Swift.String(clientToken)))
        }
        return items
    }
}

extension CreateChannelGroupInput {

    static func urlPathProvider(_ value: CreateChannelGroupInput) -> Swift.String? {
        return "/channelGroup"
    }
}

extension CreateChannelGroupInput {

    static func headerProvider(_ value: CreateChannelGroupInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let clientToken = value.clientToken {
            items.add(SmithyHTTPAPI.Header(name: "x-amzn-client-token", value: Swift.String(clientToken)))
        }
        return items
    }
}

extension CreateOriginEndpointInput {

    static func urlPathProvider(_ value: CreateOriginEndpointInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())/originEndpoint"
    }
}

extension CreateOriginEndpointInput {

    static func headerProvider(_ value: CreateOriginEndpointInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let clientToken = value.clientToken {
            items.add(SmithyHTTPAPI.Header(name: "x-amzn-client-token", value: Swift.String(clientToken)))
        }
        return items
    }
}

extension DeleteChannelInput {

    static func urlPathProvider(_ value: DeleteChannelInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())"
    }
}

extension DeleteChannelGroupInput {

    static func urlPathProvider(_ value: DeleteChannelGroupInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())"
    }
}

extension DeleteChannelPolicyInput {

    static func urlPathProvider(_ value: DeleteChannelPolicyInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())/policy"
    }
}

extension DeleteOriginEndpointInput {

    static func urlPathProvider(_ value: DeleteOriginEndpointInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        guard let originEndpointName = value.originEndpointName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())/originEndpoint/\(originEndpointName.urlPercentEncoding())"
    }
}

extension DeleteOriginEndpointPolicyInput {

    static func urlPathProvider(_ value: DeleteOriginEndpointPolicyInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        guard let originEndpointName = value.originEndpointName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())/originEndpoint/\(originEndpointName.urlPercentEncoding())/policy"
    }
}

extension GetChannelInput {

    static func urlPathProvider(_ value: GetChannelInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())"
    }
}

extension GetChannelGroupInput {

    static func urlPathProvider(_ value: GetChannelGroupInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())"
    }
}

extension GetChannelPolicyInput {

    static func urlPathProvider(_ value: GetChannelPolicyInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())/policy"
    }
}

extension GetOriginEndpointInput {

    static func urlPathProvider(_ value: GetOriginEndpointInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        guard let originEndpointName = value.originEndpointName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())/originEndpoint/\(originEndpointName.urlPercentEncoding())"
    }
}

extension GetOriginEndpointPolicyInput {

    static func urlPathProvider(_ value: GetOriginEndpointPolicyInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        guard let originEndpointName = value.originEndpointName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())/originEndpoint/\(originEndpointName.urlPercentEncoding())/policy"
    }
}

extension ListChannelGroupsInput {

    static func urlPathProvider(_ value: ListChannelGroupsInput) -> Swift.String? {
        return "/channelGroup"
    }
}

extension ListChannelGroupsInput {

    static func queryItemProvider(_ value: ListChannelGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListChannelsInput {

    static func urlPathProvider(_ value: ListChannelsInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel"
    }
}

extension ListChannelsInput {

    static func queryItemProvider(_ value: ListChannelsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListOriginEndpointsInput {

    static func urlPathProvider(_ value: ListOriginEndpointsInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())/originEndpoint"
    }
}

extension ListOriginEndpointsInput {

    static func queryItemProvider(_ value: ListOriginEndpointsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension PutChannelPolicyInput {

    static func urlPathProvider(_ value: PutChannelPolicyInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())/policy"
    }
}

extension PutOriginEndpointPolicyInput {

    static func urlPathProvider(_ value: PutOriginEndpointPolicyInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        guard let originEndpointName = value.originEndpointName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())/originEndpoint/\(originEndpointName.urlPercentEncoding())/policy"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateChannelInput {

    static func urlPathProvider(_ value: UpdateChannelInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())"
    }
}

extension UpdateChannelInput {

    static func headerProvider(_ value: UpdateChannelInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let eTag = value.eTag {
            items.add(SmithyHTTPAPI.Header(name: "x-amzn-update-if-match", value: Swift.String(eTag)))
        }
        return items
    }
}

extension UpdateChannelGroupInput {

    static func urlPathProvider(_ value: UpdateChannelGroupInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())"
    }
}

extension UpdateChannelGroupInput {

    static func headerProvider(_ value: UpdateChannelGroupInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let eTag = value.eTag {
            items.add(SmithyHTTPAPI.Header(name: "x-amzn-update-if-match", value: Swift.String(eTag)))
        }
        return items
    }
}

extension UpdateOriginEndpointInput {

    static func urlPathProvider(_ value: UpdateOriginEndpointInput) -> Swift.String? {
        guard let channelGroupName = value.channelGroupName else {
            return nil
        }
        guard let channelName = value.channelName else {
            return nil
        }
        guard let originEndpointName = value.originEndpointName else {
            return nil
        }
        return "/channelGroup/\(channelGroupName.urlPercentEncoding())/channel/\(channelName.urlPercentEncoding())/originEndpoint/\(originEndpointName.urlPercentEncoding())"
    }
}

extension UpdateOriginEndpointInput {

    static func headerProvider(_ value: UpdateOriginEndpointInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let eTag = value.eTag {
            items.add(SmithyHTTPAPI.Header(name: "x-amzn-update-if-match", value: Swift.String(eTag)))
        }
        return items
    }
}

extension CreateChannelInput {

    static func write(value: CreateChannelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChannelName"].write(value.channelName)
        try writer["Description"].write(value.description)
        try writer["InputType"].write(value.inputType)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateChannelGroupInput {

    static func write(value: CreateChannelGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChannelGroupName"].write(value.channelGroupName)
        try writer["Description"].write(value.description)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateOriginEndpointInput {

    static func write(value: CreateOriginEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerType"].write(value.containerType)
        try writer["DashManifests"].writeList(value.dashManifests, memberWritingClosure: MediaPackageV2ClientTypes.CreateDashManifestConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Description"].write(value.description)
        try writer["ForceEndpointErrorConfiguration"].write(value.forceEndpointErrorConfiguration, with: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration.write(value:to:))
        try writer["HlsManifests"].writeList(value.hlsManifests, memberWritingClosure: MediaPackageV2ClientTypes.CreateHlsManifestConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LowLatencyHlsManifests"].writeList(value.lowLatencyHlsManifests, memberWritingClosure: MediaPackageV2ClientTypes.CreateLowLatencyHlsManifestConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OriginEndpointName"].write(value.originEndpointName)
        try writer["Segment"].write(value.segment, with: MediaPackageV2ClientTypes.Segment.write(value:to:))
        try writer["StartoverWindowSeconds"].write(value.startoverWindowSeconds)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension PutChannelPolicyInput {

    static func write(value: PutChannelPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
    }
}

extension PutOriginEndpointPolicyInput {

    static func write(value: PutOriginEndpointPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateChannelInput {

    static func write(value: UpdateChannelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
    }
}

extension UpdateChannelGroupInput {

    static func write(value: UpdateChannelGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
    }
}

extension UpdateOriginEndpointInput {

    static func write(value: UpdateOriginEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerType"].write(value.containerType)
        try writer["DashManifests"].writeList(value.dashManifests, memberWritingClosure: MediaPackageV2ClientTypes.CreateDashManifestConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Description"].write(value.description)
        try writer["ForceEndpointErrorConfiguration"].write(value.forceEndpointErrorConfiguration, with: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration.write(value:to:))
        try writer["HlsManifests"].writeList(value.hlsManifests, memberWritingClosure: MediaPackageV2ClientTypes.CreateHlsManifestConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LowLatencyHlsManifests"].writeList(value.lowLatencyHlsManifests, memberWritingClosure: MediaPackageV2ClientTypes.CreateLowLatencyHlsManifestConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Segment"].write(value.segment, with: MediaPackageV2ClientTypes.Segment.write(value:to:))
        try writer["StartoverWindowSeconds"].write(value.startoverWindowSeconds)
    }
}

extension CreateChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateChannelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateChannelOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.channelName = try reader["ChannelName"].readIfPresent() ?? ""
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["Description"].readIfPresent()
        value.eTag = try reader["ETag"].readIfPresent()
        value.ingestEndpoints = try reader["IngestEndpoints"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.IngestEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputType = try reader["InputType"].readIfPresent()
        value.modifiedAt = try reader["ModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateChannelGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateChannelGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateChannelGroupOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["Description"].readIfPresent()
        value.eTag = try reader["ETag"].readIfPresent()
        value.egressDomain = try reader["EgressDomain"].readIfPresent() ?? ""
        value.modifiedAt = try reader["ModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateOriginEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateOriginEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateOriginEndpointOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.channelName = try reader["ChannelName"].readIfPresent() ?? ""
        value.containerType = try reader["ContainerType"].readIfPresent() ?? .sdkUnknown("")
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.dashManifests = try reader["DashManifests"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.GetDashManifestConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.description = try reader["Description"].readIfPresent()
        value.eTag = try reader["ETag"].readIfPresent()
        value.forceEndpointErrorConfiguration = try reader["ForceEndpointErrorConfiguration"].readIfPresent(with: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration.read(from:))
        value.hlsManifests = try reader["HlsManifests"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.GetHlsManifestConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lowLatencyHlsManifests = try reader["LowLatencyHlsManifests"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.GetLowLatencyHlsManifestConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.modifiedAt = try reader["ModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.originEndpointName = try reader["OriginEndpointName"].readIfPresent() ?? ""
        value.segment = try reader["Segment"].readIfPresent(with: MediaPackageV2ClientTypes.Segment.read(from:))
        value.startoverWindowSeconds = try reader["StartoverWindowSeconds"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DeleteChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteChannelOutput {
        return DeleteChannelOutput()
    }
}

extension DeleteChannelGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteChannelGroupOutput {
        return DeleteChannelGroupOutput()
    }
}

extension DeleteChannelPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteChannelPolicyOutput {
        return DeleteChannelPolicyOutput()
    }
}

extension DeleteOriginEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteOriginEndpointOutput {
        return DeleteOriginEndpointOutput()
    }
}

extension DeleteOriginEndpointPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteOriginEndpointPolicyOutput {
        return DeleteOriginEndpointPolicyOutput()
    }
}

extension GetChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetChannelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetChannelOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.channelName = try reader["ChannelName"].readIfPresent() ?? ""
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["Description"].readIfPresent()
        value.eTag = try reader["ETag"].readIfPresent()
        value.ingestEndpoints = try reader["IngestEndpoints"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.IngestEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputType = try reader["InputType"].readIfPresent()
        value.modifiedAt = try reader["ModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetChannelGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetChannelGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetChannelGroupOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["Description"].readIfPresent()
        value.eTag = try reader["ETag"].readIfPresent()
        value.egressDomain = try reader["EgressDomain"].readIfPresent() ?? ""
        value.modifiedAt = try reader["ModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetChannelPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetChannelPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetChannelPolicyOutput()
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.channelName = try reader["ChannelName"].readIfPresent() ?? ""
        value.policy = try reader["Policy"].readIfPresent() ?? ""
        return value
    }
}

extension GetOriginEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetOriginEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetOriginEndpointOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.channelName = try reader["ChannelName"].readIfPresent() ?? ""
        value.containerType = try reader["ContainerType"].readIfPresent() ?? .sdkUnknown("")
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.dashManifests = try reader["DashManifests"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.GetDashManifestConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.description = try reader["Description"].readIfPresent()
        value.eTag = try reader["ETag"].readIfPresent()
        value.forceEndpointErrorConfiguration = try reader["ForceEndpointErrorConfiguration"].readIfPresent(with: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration.read(from:))
        value.hlsManifests = try reader["HlsManifests"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.GetHlsManifestConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lowLatencyHlsManifests = try reader["LowLatencyHlsManifests"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.GetLowLatencyHlsManifestConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.modifiedAt = try reader["ModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.originEndpointName = try reader["OriginEndpointName"].readIfPresent() ?? ""
        value.segment = try reader["Segment"].readIfPresent(with: MediaPackageV2ClientTypes.Segment.read(from:))
        value.startoverWindowSeconds = try reader["StartoverWindowSeconds"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetOriginEndpointPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetOriginEndpointPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetOriginEndpointPolicyOutput()
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.channelName = try reader["ChannelName"].readIfPresent() ?? ""
        value.originEndpointName = try reader["OriginEndpointName"].readIfPresent() ?? ""
        value.policy = try reader["Policy"].readIfPresent() ?? ""
        return value
    }
}

extension ListChannelGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListChannelGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListChannelGroupsOutput()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.ChannelGroupListConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListChannelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListChannelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListChannelsOutput()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.ChannelListConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListOriginEndpointsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListOriginEndpointsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListOriginEndpointsOutput()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.OriginEndpointListConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension PutChannelPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutChannelPolicyOutput {
        return PutChannelPolicyOutput()
    }
}

extension PutOriginEndpointPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutOriginEndpointPolicyOutput {
        return PutOriginEndpointPolicyOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateChannelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateChannelOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.channelName = try reader["ChannelName"].readIfPresent() ?? ""
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["Description"].readIfPresent()
        value.eTag = try reader["ETag"].readIfPresent()
        value.ingestEndpoints = try reader["IngestEndpoints"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.IngestEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputType = try reader["InputType"].readIfPresent()
        value.modifiedAt = try reader["ModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension UpdateChannelGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateChannelGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateChannelGroupOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["Description"].readIfPresent()
        value.eTag = try reader["ETag"].readIfPresent()
        value.egressDomain = try reader["EgressDomain"].readIfPresent() ?? ""
        value.modifiedAt = try reader["ModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension UpdateOriginEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateOriginEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateOriginEndpointOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.channelName = try reader["ChannelName"].readIfPresent() ?? ""
        value.containerType = try reader["ContainerType"].readIfPresent() ?? .sdkUnknown("")
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.dashManifests = try reader["DashManifests"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.GetDashManifestConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.description = try reader["Description"].readIfPresent()
        value.eTag = try reader["ETag"].readIfPresent()
        value.forceEndpointErrorConfiguration = try reader["ForceEndpointErrorConfiguration"].readIfPresent(with: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration.read(from:))
        value.hlsManifests = try reader["HlsManifests"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.GetHlsManifestConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lowLatencyHlsManifests = try reader["LowLatencyHlsManifests"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.GetLowLatencyHlsManifestConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.modifiedAt = try reader["ModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.originEndpointName = try reader["OriginEndpointName"].readIfPresent() ?? ""
        value.segment = try reader["Segment"].readIfPresent(with: MediaPackageV2ClientTypes.Segment.read(from:))
        value.startoverWindowSeconds = try reader["StartoverWindowSeconds"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

enum CreateChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateChannelGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateOriginEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteChannelGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteChannelPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteOriginEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteOriginEndpointPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetChannelGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetChannelPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetOriginEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetOriginEndpointPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListChannelGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListChannelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListOriginEndpointsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutChannelPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutOriginEndpointPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateChannelGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateOriginEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.conflictExceptionType = try reader["ConflictExceptionType"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.validationExceptionType = try reader["ValidationExceptionType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.resourceTypeNotFound = try reader["ResourceTypeNotFound"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MediaPackageV2ClientTypes.IngestEndpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.IngestEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.IngestEndpoint()
        value.id = try reader["Id"].readIfPresent()
        value.url = try reader["Url"].readIfPresent()
        return value
    }
}

extension MediaPackageV2ClientTypes.Segment {

    static func write(value: MediaPackageV2ClientTypes.Segment?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Encryption"].write(value.encryption, with: MediaPackageV2ClientTypes.Encryption.write(value:to:))
        try writer["IncludeIframeOnlyStreams"].write(value.includeIframeOnlyStreams)
        try writer["Scte"].write(value.scte, with: MediaPackageV2ClientTypes.Scte.write(value:to:))
        try writer["SegmentDurationSeconds"].write(value.segmentDurationSeconds)
        try writer["SegmentName"].write(value.segmentName)
        try writer["TsIncludeDvbSubtitles"].write(value.tsIncludeDvbSubtitles)
        try writer["TsUseAudioRenditionGroup"].write(value.tsUseAudioRenditionGroup)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.Segment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.Segment()
        value.segmentDurationSeconds = try reader["SegmentDurationSeconds"].readIfPresent()
        value.segmentName = try reader["SegmentName"].readIfPresent()
        value.tsUseAudioRenditionGroup = try reader["TsUseAudioRenditionGroup"].readIfPresent()
        value.includeIframeOnlyStreams = try reader["IncludeIframeOnlyStreams"].readIfPresent()
        value.tsIncludeDvbSubtitles = try reader["TsIncludeDvbSubtitles"].readIfPresent()
        value.scte = try reader["Scte"].readIfPresent(with: MediaPackageV2ClientTypes.Scte.read(from:))
        value.encryption = try reader["Encryption"].readIfPresent(with: MediaPackageV2ClientTypes.Encryption.read(from:))
        return value
    }
}

extension MediaPackageV2ClientTypes.Encryption {

    static func write(value: MediaPackageV2ClientTypes.Encryption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConstantInitializationVector"].write(value.constantInitializationVector)
        try writer["EncryptionMethod"].write(value.encryptionMethod, with: MediaPackageV2ClientTypes.EncryptionMethod.write(value:to:))
        try writer["KeyRotationIntervalSeconds"].write(value.keyRotationIntervalSeconds)
        try writer["SpekeKeyProvider"].write(value.spekeKeyProvider, with: MediaPackageV2ClientTypes.SpekeKeyProvider.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.Encryption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.Encryption()
        value.constantInitializationVector = try reader["ConstantInitializationVector"].readIfPresent()
        value.encryptionMethod = try reader["EncryptionMethod"].readIfPresent(with: MediaPackageV2ClientTypes.EncryptionMethod.read(from:))
        value.keyRotationIntervalSeconds = try reader["KeyRotationIntervalSeconds"].readIfPresent()
        value.spekeKeyProvider = try reader["SpekeKeyProvider"].readIfPresent(with: MediaPackageV2ClientTypes.SpekeKeyProvider.read(from:))
        return value
    }
}

extension MediaPackageV2ClientTypes.SpekeKeyProvider {

    static func write(value: MediaPackageV2ClientTypes.SpekeKeyProvider?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DrmSystems"].writeList(value.drmSystems, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MediaPackageV2ClientTypes.DrmSystem>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EncryptionContractConfiguration"].write(value.encryptionContractConfiguration, with: MediaPackageV2ClientTypes.EncryptionContractConfiguration.write(value:to:))
        try writer["ResourceId"].write(value.resourceId)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Url"].write(value.url)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.SpekeKeyProvider {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.SpekeKeyProvider()
        value.encryptionContractConfiguration = try reader["EncryptionContractConfiguration"].readIfPresent(with: MediaPackageV2ClientTypes.EncryptionContractConfiguration.read(from:))
        value.resourceId = try reader["ResourceId"].readIfPresent() ?? ""
        value.drmSystems = try reader["DrmSystems"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MediaPackageV2ClientTypes.DrmSystem>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        value.url = try reader["Url"].readIfPresent() ?? ""
        return value
    }
}

extension MediaPackageV2ClientTypes.EncryptionContractConfiguration {

    static func write(value: MediaPackageV2ClientTypes.EncryptionContractConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PresetSpeke20Audio"].write(value.presetSpeke20Audio)
        try writer["PresetSpeke20Video"].write(value.presetSpeke20Video)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.EncryptionContractConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.EncryptionContractConfiguration()
        value.presetSpeke20Audio = try reader["PresetSpeke20Audio"].readIfPresent() ?? .sdkUnknown("")
        value.presetSpeke20Video = try reader["PresetSpeke20Video"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension MediaPackageV2ClientTypes.EncryptionMethod {

    static func write(value: MediaPackageV2ClientTypes.EncryptionMethod?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CmafEncryptionMethod"].write(value.cmafEncryptionMethod)
        try writer["TsEncryptionMethod"].write(value.tsEncryptionMethod)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.EncryptionMethod {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.EncryptionMethod()
        value.tsEncryptionMethod = try reader["TsEncryptionMethod"].readIfPresent()
        value.cmafEncryptionMethod = try reader["CmafEncryptionMethod"].readIfPresent()
        return value
    }
}

extension MediaPackageV2ClientTypes.Scte {

    static func write(value: MediaPackageV2ClientTypes.Scte?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ScteFilter"].writeList(value.scteFilter, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MediaPackageV2ClientTypes.ScteFilter>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.Scte {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.Scte()
        value.scteFilter = try reader["ScteFilter"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MediaPackageV2ClientTypes.ScteFilter>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaPackageV2ClientTypes.GetHlsManifestConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.GetHlsManifestConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.GetHlsManifestConfiguration()
        value.manifestName = try reader["ManifestName"].readIfPresent() ?? ""
        value.url = try reader["Url"].readIfPresent() ?? ""
        value.childManifestName = try reader["ChildManifestName"].readIfPresent()
        value.manifestWindowSeconds = try reader["ManifestWindowSeconds"].readIfPresent()
        value.programDateTimeIntervalSeconds = try reader["ProgramDateTimeIntervalSeconds"].readIfPresent()
        value.scteHls = try reader["ScteHls"].readIfPresent(with: MediaPackageV2ClientTypes.ScteHls.read(from:))
        value.filterConfiguration = try reader["FilterConfiguration"].readIfPresent(with: MediaPackageV2ClientTypes.FilterConfiguration.read(from:))
        return value
    }
}

extension MediaPackageV2ClientTypes.FilterConfiguration {

    static func write(value: MediaPackageV2ClientTypes.FilterConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["End"].writeTimestamp(value.end, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ManifestFilter"].write(value.manifestFilter)
        try writer["Start"].writeTimestamp(value.start, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["TimeDelaySeconds"].write(value.timeDelaySeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.FilterConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.FilterConfiguration()
        value.manifestFilter = try reader["ManifestFilter"].readIfPresent()
        value.start = try reader["Start"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.end = try reader["End"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.timeDelaySeconds = try reader["TimeDelaySeconds"].readIfPresent()
        return value
    }
}

extension MediaPackageV2ClientTypes.ScteHls {

    static func write(value: MediaPackageV2ClientTypes.ScteHls?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdMarkerHls"].write(value.adMarkerHls)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.ScteHls {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.ScteHls()
        value.adMarkerHls = try reader["AdMarkerHls"].readIfPresent()
        return value
    }
}

extension MediaPackageV2ClientTypes.GetLowLatencyHlsManifestConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.GetLowLatencyHlsManifestConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.GetLowLatencyHlsManifestConfiguration()
        value.manifestName = try reader["ManifestName"].readIfPresent() ?? ""
        value.url = try reader["Url"].readIfPresent() ?? ""
        value.childManifestName = try reader["ChildManifestName"].readIfPresent()
        value.manifestWindowSeconds = try reader["ManifestWindowSeconds"].readIfPresent()
        value.programDateTimeIntervalSeconds = try reader["ProgramDateTimeIntervalSeconds"].readIfPresent()
        value.scteHls = try reader["ScteHls"].readIfPresent(with: MediaPackageV2ClientTypes.ScteHls.read(from:))
        value.filterConfiguration = try reader["FilterConfiguration"].readIfPresent(with: MediaPackageV2ClientTypes.FilterConfiguration.read(from:))
        return value
    }
}

extension MediaPackageV2ClientTypes.GetDashManifestConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.GetDashManifestConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.GetDashManifestConfiguration()
        value.manifestName = try reader["ManifestName"].readIfPresent() ?? ""
        value.url = try reader["Url"].readIfPresent() ?? ""
        value.manifestWindowSeconds = try reader["ManifestWindowSeconds"].readIfPresent()
        value.filterConfiguration = try reader["FilterConfiguration"].readIfPresent(with: MediaPackageV2ClientTypes.FilterConfiguration.read(from:))
        value.minUpdatePeriodSeconds = try reader["MinUpdatePeriodSeconds"].readIfPresent()
        value.minBufferTimeSeconds = try reader["MinBufferTimeSeconds"].readIfPresent()
        value.suggestedPresentationDelaySeconds = try reader["SuggestedPresentationDelaySeconds"].readIfPresent()
        value.segmentTemplateFormat = try reader["SegmentTemplateFormat"].readIfPresent()
        value.periodTriggers = try reader["PeriodTriggers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MediaPackageV2ClientTypes.DashPeriodTrigger>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.scteDash = try reader["ScteDash"].readIfPresent(with: MediaPackageV2ClientTypes.ScteDash.read(from:))
        value.drmSignaling = try reader["DrmSignaling"].readIfPresent()
        value.utcTiming = try reader["UtcTiming"].readIfPresent(with: MediaPackageV2ClientTypes.DashUtcTiming.read(from:))
        return value
    }
}

extension MediaPackageV2ClientTypes.DashUtcTiming {

    static func write(value: MediaPackageV2ClientTypes.DashUtcTiming?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TimingMode"].write(value.timingMode)
        try writer["TimingSource"].write(value.timingSource)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.DashUtcTiming {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.DashUtcTiming()
        value.timingMode = try reader["TimingMode"].readIfPresent()
        value.timingSource = try reader["TimingSource"].readIfPresent()
        return value
    }
}

extension MediaPackageV2ClientTypes.ScteDash {

    static func write(value: MediaPackageV2ClientTypes.ScteDash?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdMarkerDash"].write(value.adMarkerDash)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.ScteDash {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.ScteDash()
        value.adMarkerDash = try reader["AdMarkerDash"].readIfPresent()
        return value
    }
}

extension MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration {

    static func write(value: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndpointErrorConditions"].writeList(value.endpointErrorConditions, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MediaPackageV2ClientTypes.EndpointErrorCondition>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration()
        value.endpointErrorConditions = try reader["EndpointErrorConditions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MediaPackageV2ClientTypes.EndpointErrorCondition>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MediaPackageV2ClientTypes.ChannelGroupListConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.ChannelGroupListConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.ChannelGroupListConfiguration()
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modifiedAt = try reader["ModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["Description"].readIfPresent()
        return value
    }
}

extension MediaPackageV2ClientTypes.ChannelListConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.ChannelListConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.ChannelListConfiguration()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.channelName = try reader["ChannelName"].readIfPresent() ?? ""
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modifiedAt = try reader["ModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["Description"].readIfPresent()
        value.inputType = try reader["InputType"].readIfPresent()
        return value
    }
}

extension MediaPackageV2ClientTypes.OriginEndpointListConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.OriginEndpointListConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.OriginEndpointListConfiguration()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.channelGroupName = try reader["ChannelGroupName"].readIfPresent() ?? ""
        value.channelName = try reader["ChannelName"].readIfPresent() ?? ""
        value.originEndpointName = try reader["OriginEndpointName"].readIfPresent() ?? ""
        value.containerType = try reader["ContainerType"].readIfPresent() ?? .sdkUnknown("")
        value.description = try reader["Description"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modifiedAt = try reader["ModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.hlsManifests = try reader["HlsManifests"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.ListHlsManifestConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lowLatencyHlsManifests = try reader["LowLatencyHlsManifests"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.ListLowLatencyHlsManifestConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.dashManifests = try reader["DashManifests"].readListIfPresent(memberReadingClosure: MediaPackageV2ClientTypes.ListDashManifestConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.forceEndpointErrorConfiguration = try reader["ForceEndpointErrorConfiguration"].readIfPresent(with: MediaPackageV2ClientTypes.ForceEndpointErrorConfiguration.read(from:))
        return value
    }
}

extension MediaPackageV2ClientTypes.ListDashManifestConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.ListDashManifestConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.ListDashManifestConfiguration()
        value.manifestName = try reader["ManifestName"].readIfPresent() ?? ""
        value.url = try reader["Url"].readIfPresent()
        return value
    }
}

extension MediaPackageV2ClientTypes.ListLowLatencyHlsManifestConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.ListLowLatencyHlsManifestConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.ListLowLatencyHlsManifestConfiguration()
        value.manifestName = try reader["ManifestName"].readIfPresent() ?? ""
        value.childManifestName = try reader["ChildManifestName"].readIfPresent()
        value.url = try reader["Url"].readIfPresent()
        return value
    }
}

extension MediaPackageV2ClientTypes.ListHlsManifestConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageV2ClientTypes.ListHlsManifestConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageV2ClientTypes.ListHlsManifestConfiguration()
        value.manifestName = try reader["ManifestName"].readIfPresent() ?? ""
        value.childManifestName = try reader["ChildManifestName"].readIfPresent()
        value.url = try reader["Url"].readIfPresent()
        return value
    }
}

extension MediaPackageV2ClientTypes.CreateHlsManifestConfiguration {

    static func write(value: MediaPackageV2ClientTypes.CreateHlsManifestConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChildManifestName"].write(value.childManifestName)
        try writer["FilterConfiguration"].write(value.filterConfiguration, with: MediaPackageV2ClientTypes.FilterConfiguration.write(value:to:))
        try writer["ManifestName"].write(value.manifestName)
        try writer["ManifestWindowSeconds"].write(value.manifestWindowSeconds)
        try writer["ProgramDateTimeIntervalSeconds"].write(value.programDateTimeIntervalSeconds)
        try writer["ScteHls"].write(value.scteHls, with: MediaPackageV2ClientTypes.ScteHls.write(value:to:))
    }
}

extension MediaPackageV2ClientTypes.CreateLowLatencyHlsManifestConfiguration {

    static func write(value: MediaPackageV2ClientTypes.CreateLowLatencyHlsManifestConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChildManifestName"].write(value.childManifestName)
        try writer["FilterConfiguration"].write(value.filterConfiguration, with: MediaPackageV2ClientTypes.FilterConfiguration.write(value:to:))
        try writer["ManifestName"].write(value.manifestName)
        try writer["ManifestWindowSeconds"].write(value.manifestWindowSeconds)
        try writer["ProgramDateTimeIntervalSeconds"].write(value.programDateTimeIntervalSeconds)
        try writer["ScteHls"].write(value.scteHls, with: MediaPackageV2ClientTypes.ScteHls.write(value:to:))
    }
}

extension MediaPackageV2ClientTypes.CreateDashManifestConfiguration {

    static func write(value: MediaPackageV2ClientTypes.CreateDashManifestConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DrmSignaling"].write(value.drmSignaling)
        try writer["FilterConfiguration"].write(value.filterConfiguration, with: MediaPackageV2ClientTypes.FilterConfiguration.write(value:to:))
        try writer["ManifestName"].write(value.manifestName)
        try writer["ManifestWindowSeconds"].write(value.manifestWindowSeconds)
        try writer["MinBufferTimeSeconds"].write(value.minBufferTimeSeconds)
        try writer["MinUpdatePeriodSeconds"].write(value.minUpdatePeriodSeconds)
        try writer["PeriodTriggers"].writeList(value.periodTriggers, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MediaPackageV2ClientTypes.DashPeriodTrigger>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ScteDash"].write(value.scteDash, with: MediaPackageV2ClientTypes.ScteDash.write(value:to:))
        try writer["SegmentTemplateFormat"].write(value.segmentTemplateFormat)
        try writer["SuggestedPresentationDelaySeconds"].write(value.suggestedPresentationDelaySeconds)
        try writer["UtcTiming"].write(value.utcTiming, with: MediaPackageV2ClientTypes.DashUtcTiming.write(value:to:))
    }
}

public enum MediaPackageV2ClientTypes {}
