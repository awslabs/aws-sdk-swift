// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransferClientProtocol {

    static func serverOfflineWaiterConfig() throws -> WaiterConfiguration<DescribeServerInput, DescribeServerOutputResponse> {
        let acceptors: [WaiterConfiguration<DescribeServerInput, DescribeServerOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeServerInput, result: Result<DescribeServerOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Server.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "OFFLINE"
                guard case .success(let output) = result else { return false }
                let server = output.server
                let state = server?.state
                return JMESUtils.compare(state, ==, "OFFLINE")
            }),
            .init(state: .failure, matcher: { (input: DescribeServerInput, result: Result<DescribeServerOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Server.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "STOP_FAILED"
                guard case .success(let output) = result else { return false }
                let server = output.server
                let state = server?.state
                return JMESUtils.compare(state, ==, "STOP_FAILED")
            }),
        ]
        return try WaiterConfiguration<DescribeServerInput, DescribeServerOutputResponse>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ServerOffline event on the describeServer operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeServerInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilServerOffline(options: WaiterOptions, input: DescribeServerInput) async throws -> WaiterOutcome<DescribeServerOutputResponse> {
        let waiter = Waiter(config: try Self.serverOfflineWaiterConfig(), operation: self.describeServer(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func serverOnlineWaiterConfig() throws -> WaiterConfiguration<DescribeServerInput, DescribeServerOutputResponse> {
        let acceptors: [WaiterConfiguration<DescribeServerInput, DescribeServerOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeServerInput, result: Result<DescribeServerOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Server.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "ONLINE"
                guard case .success(let output) = result else { return false }
                let server = output.server
                let state = server?.state
                return JMESUtils.compare(state, ==, "ONLINE")
            }),
            .init(state: .failure, matcher: { (input: DescribeServerInput, result: Result<DescribeServerOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Server.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "START_FAILED"
                guard case .success(let output) = result else { return false }
                let server = output.server
                let state = server?.state
                return JMESUtils.compare(state, ==, "START_FAILED")
            }),
        ]
        return try WaiterConfiguration<DescribeServerInput, DescribeServerOutputResponse>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ServerOnline event on the describeServer operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeServerInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilServerOnline(options: WaiterOptions, input: DescribeServerInput) async throws -> WaiterOutcome<DescribeServerOutputResponse> {
        let waiter = Waiter(config: try Self.serverOnlineWaiterConfig(), operation: self.describeServer(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
