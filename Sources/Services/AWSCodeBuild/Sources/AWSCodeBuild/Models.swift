//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.listWritingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

/// An Amazon Web Services service limit was exceeded for the calling Amazon Web Services account.
public struct AccountLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccountLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodeBuildClientTypes {

    public enum ArtifactNamespace: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case buildId
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ArtifactNamespace] {
            return [
                .buildId,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .buildId: return "BUILD_ID"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum ArtifactPackaging: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case zip
        case sdkUnknown(Swift.String)

        public static var allCases: [ArtifactPackaging] {
            return [
                .none,
                .zip
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .zip: return "ZIP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum ArtifactsType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codepipeline
        case noArtifacts
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [ArtifactsType] {
            return [
                .codepipeline,
                .noArtifacts,
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codepipeline: return "CODEPIPELINE"
            case .noArtifacts: return "NO_ARTIFACTS"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum AuthType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case basicAuth
        case codeconnections
        case oauth
        case personalAccessToken
        case secretsManager
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthType] {
            return [
                .basicAuth,
                .codeconnections,
                .oauth,
                .personalAccessToken,
                .secretsManager
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .basicAuth: return "BASIC_AUTH"
            case .codeconnections: return "CODECONNECTIONS"
            case .oauth: return "OAUTH"
            case .personalAccessToken: return "PERSONAL_ACCESS_TOKEN"
            case .secretsManager: return "SECRETS_MANAGER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the auto-retry configuration for the build.
    public struct AutoRetryConfig: Swift.Sendable {
        /// The maximum number of additional automatic retries after a failed build. For example, if the auto-retry limit is set to 2, CodeBuild will call the RetryBuild API to automatically retry your build for up to 2 additional times.
        public var autoRetryLimit: Swift.Int?
        /// The number of times that the build has been retried. The initial build will have an auto-retry number of 0.
        public var autoRetryNumber: Swift.Int?
        /// The build ARN of the auto-retried build triggered by the current build. The next auto-retry will be null for builds that don't trigger an auto-retry.
        public var nextAutoRetry: Swift.String?
        /// The build ARN of the build that triggered the current auto-retry build. The previous auto-retry will be null for the initial build.
        public var previousAutoRetry: Swift.String?

        public init(
            autoRetryLimit: Swift.Int? = nil,
            autoRetryNumber: Swift.Int? = nil,
            nextAutoRetry: Swift.String? = nil,
            previousAutoRetry: Swift.String? = nil
        )
        {
            self.autoRetryLimit = autoRetryLimit
            self.autoRetryNumber = autoRetryNumber
            self.nextAutoRetry = nextAutoRetry
            self.previousAutoRetry = previousAutoRetry
        }
    }
}

/// The input value that was provided is not valid.
public struct InvalidInputException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidInputException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct BatchDeleteBuildsInput: Swift.Sendable {
    /// The IDs of the builds to delete.
    /// This member is required.
    public var ids: [Swift.String]?

    public init(
        ids: [Swift.String]? = nil
    )
    {
        self.ids = ids
    }
}

extension CodeBuildClientTypes {

    /// Information about a build that could not be successfully deleted.
    public struct BuildNotDeleted: Swift.Sendable {
        /// The ID of the build that could not be successfully deleted.
        public var id: Swift.String?
        /// Additional information about the build that could not be successfully deleted.
        public var statusCode: Swift.String?

        public init(
            id: Swift.String? = nil,
            statusCode: Swift.String? = nil
        )
        {
            self.id = id
            self.statusCode = statusCode
        }
    }
}

public struct BatchDeleteBuildsOutput: Swift.Sendable {
    /// The IDs of the builds that were successfully deleted.
    public var buildsDeleted: [Swift.String]?
    /// Information about any builds that could not be successfully deleted.
    public var buildsNotDeleted: [CodeBuildClientTypes.BuildNotDeleted]?

    public init(
        buildsDeleted: [Swift.String]? = nil,
        buildsNotDeleted: [CodeBuildClientTypes.BuildNotDeleted]? = nil
    )
    {
        self.buildsDeleted = buildsDeleted
        self.buildsNotDeleted = buildsNotDeleted
    }
}

public struct BatchGetBuildBatchesInput: Swift.Sendable {
    /// An array that contains the batch build identifiers to retrieve.
    /// This member is required.
    public var ids: [Swift.String]?

    public init(
        ids: [Swift.String]? = nil
    )
    {
        self.ids = ids
    }
}

extension CodeBuildClientTypes {

    /// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. To use this property, your CodeBuild service role must have the s3:PutBucketAcl permission. This permission allows CodeBuild to modify the access control list for the bucket. This property can be one of the following values: NONE The bucket owner does not have access to the objects. This is the default. READ_ONLY The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects. FULL The bucket owner has full access to the objects. Object ownership is determined by the following criteria:
    ///
    /// * If the bucket is configured with the Bucket owner preferred setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.
    ///
    /// * Otherwise, the uploading account retains ownership of the objects.
    ///
    ///
    /// For more information about Amazon S3 object ownership, see [Controlling ownership of uploaded objects using S3 Object Ownership](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon Simple Storage Service User Guide.
    public enum BucketOwnerAccess: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case full
        case `none`
        case readOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketOwnerAccess] {
            return [
                .full,
                .none,
                .readOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .full: return "FULL"
            case .none: return "NONE"
            case .readOnly: return "READ_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about build output artifacts.
    public struct BuildArtifacts: Swift.Sendable {
        /// An identifier for this artifact definition.
        public var artifactIdentifier: Swift.String?
        /// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. To use this property, your CodeBuild service role must have the s3:PutBucketAcl permission. This permission allows CodeBuild to modify the access control list for the bucket. This property can be one of the following values: NONE The bucket owner does not have access to the objects. This is the default. READ_ONLY The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects. FULL The bucket owner has full access to the objects. Object ownership is determined by the following criteria:
        ///
        /// * If the bucket is configured with the Bucket owner preferred setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.
        ///
        /// * Otherwise, the uploading account retains ownership of the objects.
        ///
        ///
        /// For more information about Amazon S3 object ownership, see [Controlling ownership of uploaded objects using S3 Object Ownership](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon Simple Storage Service User Guide.
        public var bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess?
        /// Information that tells you if encryption for build artifacts is disabled.
        public var encryptionDisabled: Swift.Bool?
        /// Information about the location of the build artifacts.
        public var location: Swift.String?
        /// The MD5 hash of the build artifact. You can use this hash along with a checksum tool to confirm file integrity and authenticity. This value is available only if the build project's packaging value is set to ZIP.
        public var md5sum: Swift.String?
        /// If this flag is set, a name specified in the buildspec file overrides the artifact name. The name specified in a buildspec file is calculated at build time and uses the Shell Command Language. For example, you can append a date and time to your artifact name so that it is always unique.
        public var overrideArtifactName: Swift.Bool?
        /// The SHA-256 hash of the build artifact. You can use this hash along with a checksum tool to confirm file integrity and authenticity. This value is available only if the build project's packaging value is set to ZIP.
        public var sha256sum: Swift.String?

        public init(
            artifactIdentifier: Swift.String? = nil,
            bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess? = nil,
            encryptionDisabled: Swift.Bool? = nil,
            location: Swift.String? = nil,
            md5sum: Swift.String? = nil,
            overrideArtifactName: Swift.Bool? = nil,
            sha256sum: Swift.String? = nil
        )
        {
            self.artifactIdentifier = artifactIdentifier
            self.bucketOwnerAccess = bucketOwnerAccess
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.md5sum = md5sum
            self.overrideArtifactName = overrideArtifactName
            self.sha256sum = sha256sum
        }
    }
}

extension CodeBuildClientTypes {

    public enum BatchReportModeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case reportAggregatedBatch
        case reportIndividualBuilds
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchReportModeType] {
            return [
                .reportAggregatedBatch,
                .reportIndividualBuilds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .reportAggregatedBatch: return "REPORT_AGGREGATED_BATCH"
            case .reportIndividualBuilds: return "REPORT_INDIVIDUAL_BUILDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Specifies restrictions for the batch build.
    public struct BatchRestrictions: Swift.Sendable {
        /// An array of strings that specify the compute types that are allowed for the batch build. See [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the CodeBuild User Guide for these values.
        public var computeTypesAllowed: [Swift.String]?
        /// Specifies the maximum number of builds allowed.
        public var maximumBuildsAllowed: Swift.Int?

        public init(
            computeTypesAllowed: [Swift.String]? = nil,
            maximumBuildsAllowed: Swift.Int? = nil
        )
        {
            self.computeTypesAllowed = computeTypesAllowed
            self.maximumBuildsAllowed = maximumBuildsAllowed
        }
    }
}

extension CodeBuildClientTypes {

    /// Contains configuration information about a batch build project.
    public struct ProjectBuildBatchConfig: Swift.Sendable {
        /// Specifies how build status reports are sent to the source provider for the batch build. This property is only used when the source provider for your project is Bitbucket, GitHub, or GitHub Enterprise, and your project is configured to report build statuses to the source provider. REPORT_AGGREGATED_BATCH (Default) Aggregate all of the build statuses into a single status report. REPORT_INDIVIDUAL_BUILDS Send a separate status report for each individual build.
        public var batchReportMode: CodeBuildClientTypes.BatchReportModeType?
        /// Specifies if the build artifacts for the batch build should be combined into a single artifact location.
        public var combineArtifacts: Swift.Bool?
        /// A BatchRestrictions object that specifies the restrictions for the batch build.
        public var restrictions: CodeBuildClientTypes.BatchRestrictions?
        /// Specifies the service role ARN for the batch build project.
        public var serviceRole: Swift.String?
        /// Specifies the maximum amount of time, in minutes, that the batch build must be completed in.
        public var timeoutInMins: Swift.Int?

        public init(
            batchReportMode: CodeBuildClientTypes.BatchReportModeType? = nil,
            combineArtifacts: Swift.Bool? = nil,
            restrictions: CodeBuildClientTypes.BatchRestrictions? = nil,
            serviceRole: Swift.String? = nil,
            timeoutInMins: Swift.Int? = nil
        )
        {
            self.batchReportMode = batchReportMode
            self.combineArtifacts = combineArtifacts
            self.restrictions = restrictions
            self.serviceRole = serviceRole
            self.timeoutInMins = timeoutInMins
        }
    }
}

extension CodeBuildClientTypes {

    public enum StatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case fault
        case inProgress
        case stopped
        case succeeded
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusType] {
            return [
                .failed,
                .fault,
                .inProgress,
                .stopped,
                .succeeded,
                .timedOut
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .fault: return "FAULT"
            case .inProgress: return "IN_PROGRESS"
            case .stopped: return "STOPPED"
            case .succeeded: return "SUCCEEDED"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Represents a resolved build artifact. A resolved artifact is an artifact that is built and deployed to the destination, such as Amazon S3.
    public struct ResolvedArtifact: Swift.Sendable {
        /// The identifier of the artifact.
        public var identifier: Swift.String?
        /// The location of the artifact.
        public var location: Swift.String?
        /// Specifies the type of artifact.
        public var type: CodeBuildClientTypes.ArtifactsType?

        public init(
            identifier: Swift.String? = nil,
            location: Swift.String? = nil,
            type: CodeBuildClientTypes.ArtifactsType? = nil
        )
        {
            self.identifier = identifier
            self.location = location
            self.type = type
        }
    }
}

extension CodeBuildClientTypes {

    /// Contains summary information about a batch build group.
    public struct BuildSummary: Swift.Sendable {
        /// The batch build ARN.
        public var arn: Swift.String?
        /// The status of the build group. FAILED The build group failed. FAULT The build group faulted. IN_PROGRESS The build group is still in progress. STOPPED The build group stopped. SUCCEEDED The build group succeeded. TIMED_OUT The build group timed out.
        public var buildStatus: CodeBuildClientTypes.StatusType?
        /// A ResolvedArtifact object that represents the primary build artifacts for the build group.
        public var primaryArtifact: CodeBuildClientTypes.ResolvedArtifact?
        /// When the build was started, expressed in Unix time format.
        public var requestedOn: Foundation.Date?
        /// An array of ResolvedArtifact objects that represents the secondary build artifacts for the build group.
        public var secondaryArtifacts: [CodeBuildClientTypes.ResolvedArtifact]?

        public init(
            arn: Swift.String? = nil,
            buildStatus: CodeBuildClientTypes.StatusType? = nil,
            primaryArtifact: CodeBuildClientTypes.ResolvedArtifact? = nil,
            requestedOn: Foundation.Date? = nil,
            secondaryArtifacts: [CodeBuildClientTypes.ResolvedArtifact]? = nil
        )
        {
            self.arn = arn
            self.buildStatus = buildStatus
            self.primaryArtifact = primaryArtifact
            self.requestedOn = requestedOn
            self.secondaryArtifacts = secondaryArtifacts
        }
    }
}

extension CodeBuildClientTypes {

    /// Contains information about a batch build build group. Build groups are used to combine builds that can run in parallel, while still being able to set dependencies on other build groups.
    public struct BuildGroup: Swift.Sendable {
        /// A BuildSummary object that contains a summary of the current build group.
        public var currentBuildSummary: CodeBuildClientTypes.BuildSummary?
        /// An array of strings that contain the identifiers of the build groups that this build group depends on.
        public var dependsOn: [Swift.String]?
        /// Contains the identifier of the build group.
        public var identifier: Swift.String?
        /// Specifies if failures in this build group can be ignored.
        public var ignoreFailure: Swift.Bool
        /// An array of BuildSummary objects that contain summaries of previous build groups.
        public var priorBuildSummaryList: [CodeBuildClientTypes.BuildSummary]?

        public init(
            currentBuildSummary: CodeBuildClientTypes.BuildSummary? = nil,
            dependsOn: [Swift.String]? = nil,
            identifier: Swift.String? = nil,
            ignoreFailure: Swift.Bool = false,
            priorBuildSummaryList: [CodeBuildClientTypes.BuildSummary]? = nil
        )
        {
            self.currentBuildSummary = currentBuildSummary
            self.dependsOn = dependsOn
            self.identifier = identifier
            self.ignoreFailure = ignoreFailure
            self.priorBuildSummaryList = priorBuildSummaryList
        }
    }
}

extension CodeBuildClientTypes {

    public enum CacheMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case localCustomCache
        case localDockerLayerCache
        case localSourceCache
        case sdkUnknown(Swift.String)

        public static var allCases: [CacheMode] {
            return [
                .localCustomCache,
                .localDockerLayerCache,
                .localSourceCache
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .localCustomCache: return "LOCAL_CUSTOM_CACHE"
            case .localDockerLayerCache: return "LOCAL_DOCKER_LAYER_CACHE"
            case .localSourceCache: return "LOCAL_SOURCE_CACHE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum CacheType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case local
        case noCache
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [CacheType] {
            return [
                .local,
                .noCache,
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .local: return "LOCAL"
            case .noCache: return "NO_CACHE"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the cache for the build project.
    public struct ProjectCache: Swift.Sendable {
        /// Information about the cache location:
        ///
        /// * NO_CACHE or LOCAL: This value is ignored.
        ///
        /// * S3: This is the S3 bucket name/prefix.
        public var location: Swift.String?
        /// An array of strings that specify the local cache modes. You can use one or more local cache modes at the same time. This is only used for LOCAL cache types. Possible values are: LOCAL_SOURCE_CACHE Caches Git metadata for primary and secondary sources. After the cache is created, subsequent builds pull only the change between commits. This mode is a good choice for projects with a clean working directory and a source that is a large Git repository. If you choose this option and your project does not use a Git repository (GitHub, GitHub Enterprise, or Bitbucket), the option is ignored. LOCAL_DOCKER_LAYER_CACHE Caches existing Docker layers. This mode is a good choice for projects that build or pull large Docker images. It can prevent the performance issues caused by pulling large Docker images down from the network.
        ///
        /// * You can use a Docker layer cache in the Linux environment only.
        ///
        /// * The privileged flag must be set so that your project has the required Docker permissions.
        ///
        /// * You should consider the security implications before you use a Docker layer cache.
        ///
        ///
        /// LOCAL_CUSTOM_CACHE Caches directories you specify in the buildspec file. This mode is a good choice if your build scenario is not suited to one of the other three local cache modes. If you use a custom cache:
        ///
        /// * Only directories can be specified for caching. You cannot specify individual files.
        ///
        /// * Symlinks are used to reference cached directories.
        ///
        /// * Cached directories are linked to your build before it downloads its project sources. Cached items are overridden if a source item has the same name. Directories are specified using cache paths in the buildspec file.
        public var modes: [CodeBuildClientTypes.CacheMode]?
        /// The type of cache used by the build project. Valid values include:
        ///
        /// * NO_CACHE: The build project does not use any cache.
        ///
        /// * S3: The build project reads and writes from and to S3.
        ///
        /// * LOCAL: The build project stores a cache locally on a build host that is only available to that build host.
        /// This member is required.
        public var type: CodeBuildClientTypes.CacheType?

        public init(
            location: Swift.String? = nil,
            modes: [CodeBuildClientTypes.CacheMode]? = nil,
            type: CodeBuildClientTypes.CacheType? = nil
        )
        {
            self.location = location
            self.modes = modes
            self.type = type
        }
    }
}

extension CodeBuildClientTypes {

    public enum ComputeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case buildGeneral12xlarge
        case buildGeneral1Large
        case buildGeneral1Medium
        case buildGeneral1Small
        case buildGeneral1Xlarge
        case buildLambda10gb
        case buildLambda1gb
        case buildLambda2gb
        case buildLambda4gb
        case buildLambda8gb
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputeType] {
            return [
                .buildGeneral12xlarge,
                .buildGeneral1Large,
                .buildGeneral1Medium,
                .buildGeneral1Small,
                .buildGeneral1Xlarge,
                .buildLambda10gb,
                .buildLambda1gb,
                .buildLambda2gb,
                .buildLambda4gb,
                .buildLambda8gb
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .buildGeneral12xlarge: return "BUILD_GENERAL1_2XLARGE"
            case .buildGeneral1Large: return "BUILD_GENERAL1_LARGE"
            case .buildGeneral1Medium: return "BUILD_GENERAL1_MEDIUM"
            case .buildGeneral1Small: return "BUILD_GENERAL1_SMALL"
            case .buildGeneral1Xlarge: return "BUILD_GENERAL1_XLARGE"
            case .buildLambda10gb: return "BUILD_LAMBDA_10GB"
            case .buildLambda1gb: return "BUILD_LAMBDA_1GB"
            case .buildLambda2gb: return "BUILD_LAMBDA_2GB"
            case .buildLambda4gb: return "BUILD_LAMBDA_4GB"
            case .buildLambda8gb: return "BUILD_LAMBDA_8GB"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum EnvironmentVariableType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case parameterStore
        case plaintext
        case secretsManager
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentVariableType] {
            return [
                .parameterStore,
                .plaintext,
                .secretsManager
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .parameterStore: return "PARAMETER_STORE"
            case .plaintext: return "PLAINTEXT"
            case .secretsManager: return "SECRETS_MANAGER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about an environment variable for a build project or a build.
    public struct EnvironmentVariable: Swift.Sendable {
        /// The name or key of the environment variable.
        /// This member is required.
        public var name: Swift.String?
        /// The type of environment variable. Valid values include:
        ///
        /// * PARAMETER_STORE: An environment variable stored in Systems Manager Parameter Store. For environment variables of this type, specify the name of the parameter as the value of the EnvironmentVariable. The parameter value will be substituted for the name at runtime. You can also define Parameter Store environment variables in the buildspec. To learn how to do so, see [env/parameter-store](https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.parameter-store) in the CodeBuild User Guide.
        ///
        /// * PLAINTEXT: An environment variable in plain text format. This is the default value.
        ///
        /// * SECRETS_MANAGER: An environment variable stored in Secrets Manager. For environment variables of this type, specify the name of the secret as the value of the EnvironmentVariable. The secret value will be substituted for the name at runtime. You can also define Secrets Manager environment variables in the buildspec. To learn how to do so, see [env/secrets-manager](https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.secrets-manager) in the CodeBuild User Guide.
        public var type: CodeBuildClientTypes.EnvironmentVariableType?
        /// The value of the environment variable. We strongly discourage the use of PLAINTEXT environment variables to store sensitive values, especially Amazon Web Services secret key IDs. PLAINTEXT environment variables can be displayed in plain text using the CodeBuild console and the CLI. For sensitive values, we recommend you use an environment variable of type PARAMETER_STORE or SECRETS_MANAGER.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            type: CodeBuildClientTypes.EnvironmentVariableType? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
            self.value = value
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the compute fleet of the build project. For more information, see [Working with reserved capacity in CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/fleets.html).
    public struct ProjectFleet: Swift.Sendable {
        /// Specifies the compute fleet ARN for the build project.
        public var fleetArn: Swift.String?

        public init(
            fleetArn: Swift.String? = nil
        )
        {
            self.fleetArn = fleetArn
        }
    }
}

extension CodeBuildClientTypes {

    public enum ImagePullCredentialsType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codebuild
        case serviceRole
        case sdkUnknown(Swift.String)

        public static var allCases: [ImagePullCredentialsType] {
            return [
                .codebuild,
                .serviceRole
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codebuild: return "CODEBUILD"
            case .serviceRole: return "SERVICE_ROLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum CredentialProviderType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case secretsManager
        case sdkUnknown(Swift.String)

        public static var allCases: [CredentialProviderType] {
            return [
                .secretsManager
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .secretsManager: return "SECRETS_MANAGER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about credentials that provide access to a private Docker registry. When this is set:
    ///
    /// * imagePullCredentialsType must be set to SERVICE_ROLE.
    ///
    /// * images cannot be curated or an Amazon ECR image.
    ///
    ///
    /// For more information, see [Private Registry with Secrets Manager Sample for CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/sample-private-registry.html).
    public struct RegistryCredential: Swift.Sendable {
        /// The Amazon Resource Name (ARN) or name of credentials created using Secrets Manager. The credential can use the name of the credentials only if they exist in your current Amazon Web Services Region.
        /// This member is required.
        public var credential: Swift.String?
        /// The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for Secrets Manager.
        /// This member is required.
        public var credentialProvider: CodeBuildClientTypes.CredentialProviderType?

        public init(
            credential: Swift.String? = nil,
            credentialProvider: CodeBuildClientTypes.CredentialProviderType? = nil
        )
        {
            self.credential = credential
            self.credentialProvider = credentialProvider
        }
    }
}

extension CodeBuildClientTypes {

    public enum EnvironmentType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case armContainer
        case armLambdaContainer
        case linuxContainer
        case linuxGpuContainer
        case linuxLambdaContainer
        case macArm
        case windowsContainer
        case windowsServer2019Container
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentType] {
            return [
                .armContainer,
                .armLambdaContainer,
                .linuxContainer,
                .linuxGpuContainer,
                .linuxLambdaContainer,
                .macArm,
                .windowsContainer,
                .windowsServer2019Container
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .armContainer: return "ARM_CONTAINER"
            case .armLambdaContainer: return "ARM_LAMBDA_CONTAINER"
            case .linuxContainer: return "LINUX_CONTAINER"
            case .linuxGpuContainer: return "LINUX_GPU_CONTAINER"
            case .linuxLambdaContainer: return "LINUX_LAMBDA_CONTAINER"
            case .macArm: return "MAC_ARM"
            case .windowsContainer: return "WINDOWS_CONTAINER"
            case .windowsServer2019Container: return "WINDOWS_SERVER_2019_CONTAINER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the build environment of the build project.
    public struct ProjectEnvironment: Swift.Sendable {
        /// The ARN of the Amazon S3 bucket, path prefix, and object key that contains the PEM-encoded certificate for the build project. For more information, see [certificate](https://docs.aws.amazon.com/codebuild/latest/userguide/create-project-cli.html#cli.environment.certificate) in the CodeBuild User Guide.
        public var certificate: Swift.String?
        /// Information about the compute resources the build project uses. Available values include:
        ///
        /// * BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds.
        ///
        /// * BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds.
        ///
        /// * BUILD_GENERAL1_LARGE: Use up to 16 GB memory and 8 vCPUs for builds, depending on your environment type.
        ///
        /// * BUILD_GENERAL1_XLARGE: Use up to 70 GB memory and 36 vCPUs for builds, depending on your environment type.
        ///
        /// * BUILD_GENERAL1_2XLARGE: Use up to 145 GB memory, 72 vCPUs, and 824 GB of SSD storage for builds. This compute type supports Docker images up to 100 GB uncompressed.
        ///
        /// * BUILD_LAMBDA_1GB: Use up to 1 GB memory for builds. Only available for environment type LINUX_LAMBDA_CONTAINER and ARM_LAMBDA_CONTAINER.
        ///
        /// * BUILD_LAMBDA_2GB: Use up to 2 GB memory for builds. Only available for environment type LINUX_LAMBDA_CONTAINER and ARM_LAMBDA_CONTAINER.
        ///
        /// * BUILD_LAMBDA_4GB: Use up to 4 GB memory for builds. Only available for environment type LINUX_LAMBDA_CONTAINER and ARM_LAMBDA_CONTAINER.
        ///
        /// * BUILD_LAMBDA_8GB: Use up to 8 GB memory for builds. Only available for environment type LINUX_LAMBDA_CONTAINER and ARM_LAMBDA_CONTAINER.
        ///
        /// * BUILD_LAMBDA_10GB: Use up to 10 GB memory for builds. Only available for environment type LINUX_LAMBDA_CONTAINER and ARM_LAMBDA_CONTAINER.
        ///
        ///
        /// If you use BUILD_GENERAL1_SMALL:
        ///
        /// * For environment type LINUX_CONTAINER, you can use up to 3 GB memory and 2 vCPUs for builds.
        ///
        /// * For environment type LINUX_GPU_CONTAINER, you can use up to 16 GB memory, 4 vCPUs, and 1 NVIDIA A10G Tensor Core GPU for builds.
        ///
        /// * For environment type ARM_CONTAINER, you can use up to 4 GB memory and 2 vCPUs on ARM-based processors for builds.
        ///
        ///
        /// If you use BUILD_GENERAL1_LARGE:
        ///
        /// * For environment type LINUX_CONTAINER, you can use up to 15 GB memory and 8 vCPUs for builds.
        ///
        /// * For environment type LINUX_GPU_CONTAINER, you can use up to 255 GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.
        ///
        /// * For environment type ARM_CONTAINER, you can use up to 16 GB memory and 8 vCPUs on ARM-based processors for builds.
        ///
        ///
        /// If you're using compute fleets during project creation, computeType will be ignored. For more information, see [Build Environment Compute Types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the CodeBuild User Guide.
        /// This member is required.
        public var computeType: CodeBuildClientTypes.ComputeType?
        /// A set of environment variables to make available to builds for this build project.
        public var environmentVariables: [CodeBuildClientTypes.EnvironmentVariable]?
        /// A ProjectFleet object to use for this build project.
        public var fleet: CodeBuildClientTypes.ProjectFleet?
        /// The image tag or image digest that identifies the Docker image to use for this build project. Use the following formats:
        ///
        /// * For an image tag: /:. For example, in the Docker repository that CodeBuild uses to manage its Docker images, this would be aws/codebuild/standard:4.0.
        ///
        /// * For an image digest: /@. For example, to specify an image with the digest "sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf," use /@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf.
        ///
        ///
        /// For more information, see [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) in the CodeBuild user guide.
        /// This member is required.
        public var image: Swift.String?
        /// The type of credentials CodeBuild uses to pull images in your build. There are two valid values:
        ///
        /// * CODEBUILD specifies that CodeBuild uses its own credentials. This requires that you modify your ECR repository policy to trust CodeBuild service principal.
        ///
        /// * SERVICE_ROLE specifies that CodeBuild uses your build project's service role.
        ///
        ///
        /// When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an CodeBuild curated image, you must use CODEBUILD credentials.
        public var imagePullCredentialsType: CodeBuildClientTypes.ImagePullCredentialsType?
        /// Enables running the Docker daemon inside a Docker container. Set to true only if the build project is used to build Docker images. Otherwise, a build that attempts to interact with the Docker daemon fails. The default setting is false. You can initialize the Docker daemon during the install phase of your build by adding one of the following sets of commands to the install phase of your buildspec file: If the operating system's base image is Ubuntu Linux: - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&- timeout 15 sh -c "until docker info; do echo .; sleep 1; done" If the operating system's base image is Alpine Linux and the previous command does not work, add the -t argument to timeout: - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&
        ///     - timeout -t 15 sh -c "until docker info; do echo .; sleep 1; done"
        public var privilegedMode: Swift.Bool?
        /// The credentials for access to a private registry.
        public var registryCredential: CodeBuildClientTypes.RegistryCredential?
        /// The type of build environment to use for related builds.
        ///
        /// * The environment type ARM_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), Asia Pacific (Mumbai), Asia Pacific (Tokyo), Asia Pacific (Sydney), and EU (Frankfurt).
        ///
        /// * The environment type LINUX_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Canada (Central), EU (Ireland), EU (London), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul), Asia Pacific (Singapore), Asia Pacific (Sydney), China (Beijing), and China (Ningxia).
        ///
        /// * The environment type LINUX_GPU_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Canada (Central), EU (Ireland), EU (London), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul), Asia Pacific (Singapore), Asia Pacific (Sydney) , China (Beijing), and China (Ningxia).
        ///
        ///
        ///
        ///
        /// * The environment types ARM_LAMBDA_CONTAINER and LINUX_LAMBDA_CONTAINER are available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Mumbai), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), EU (Frankfurt), EU (Ireland), and South America (São Paulo).
        ///
        ///
        ///
        ///
        /// * The environment types WINDOWS_CONTAINER and WINDOWS_SERVER_2019_CONTAINER are available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), and EU (Ireland).
        ///
        ///
        /// If you're using compute fleets during project creation, type will be ignored. For more information, see [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the CodeBuild user guide.
        /// This member is required.
        public var type: CodeBuildClientTypes.EnvironmentType?

        public init(
            certificate: Swift.String? = nil,
            computeType: CodeBuildClientTypes.ComputeType? = nil,
            environmentVariables: [CodeBuildClientTypes.EnvironmentVariable]? = nil,
            fleet: CodeBuildClientTypes.ProjectFleet? = nil,
            image: Swift.String? = nil,
            imagePullCredentialsType: CodeBuildClientTypes.ImagePullCredentialsType? = nil,
            privilegedMode: Swift.Bool? = nil,
            registryCredential: CodeBuildClientTypes.RegistryCredential? = nil,
            type: CodeBuildClientTypes.EnvironmentType? = nil
        )
        {
            self.certificate = certificate
            self.computeType = computeType
            self.environmentVariables = environmentVariables
            self.fleet = fleet
            self.image = image
            self.imagePullCredentialsType = imagePullCredentialsType
            self.privilegedMode = privilegedMode
            self.registryCredential = registryCredential
            self.type = type
        }
    }
}

extension CodeBuildClientTypes {

    public enum FileSystemType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case efs
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSystemType] {
            return [
                .efs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .efs: return "EFS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about a file system created by Amazon Elastic File System (EFS). For more information, see [What Is Amazon Elastic File System?](https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html)
    public struct ProjectFileSystemLocation: Swift.Sendable {
        /// The name used to access a file system created by Amazon EFS. CodeBuild creates an environment variable by appending the identifier in all capital letters to CODEBUILD_. For example, if you specify my_efs for identifier, a new environment variable is create named CODEBUILD_MY_EFS. The identifier is used to mount your file system.
        public var identifier: Swift.String?
        /// A string that specifies the location of the file system created by Amazon EFS. Its format is efs-dns-name:/directory-path. You can find the DNS name of file system when you view it in the Amazon EFS console. The directory path is a path to a directory in the file system that CodeBuild mounts. For example, if the DNS name of a file system is fs-abcd1234.efs.us-west-2.amazonaws.com, and its mount directory is my-efs-mount-directory, then the location is fs-abcd1234.efs.us-west-2.amazonaws.com:/my-efs-mount-directory. The directory path in the format efs-dns-name:/directory-path is optional. If you do not specify a directory path, the location is only the DNS name and CodeBuild mounts the entire file system.
        public var location: Swift.String?
        /// The mount options for a file system created by Amazon EFS. The default mount options used by CodeBuild are nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2. For more information, see [Recommended NFS Mount Options](https://docs.aws.amazon.com/efs/latest/ug/mounting-fs-nfs-mount-settings.html).
        public var mountOptions: Swift.String?
        /// The location in the container where you mount the file system.
        public var mountPoint: Swift.String?
        /// The type of the file system. The one supported type is EFS.
        public var type: CodeBuildClientTypes.FileSystemType?

        public init(
            identifier: Swift.String? = nil,
            location: Swift.String? = nil,
            mountOptions: Swift.String? = nil,
            mountPoint: Swift.String? = nil,
            type: CodeBuildClientTypes.FileSystemType? = nil
        )
        {
            self.identifier = identifier
            self.location = location
            self.mountOptions = mountOptions
            self.mountPoint = mountPoint
            self.type = type
        }
    }
}

extension CodeBuildClientTypes {

    public enum LogsConfigStatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [LogsConfigStatusType] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about CloudWatch Logs for a build project.
    public struct CloudWatchLogsConfig: Swift.Sendable {
        /// The group name of the logs in CloudWatch Logs. For more information, see [Working with Log Groups and Log Streams](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html).
        public var groupName: Swift.String?
        /// The current status of the logs in CloudWatch Logs for a build project. Valid values are:
        ///
        /// * ENABLED: CloudWatch Logs are enabled for this build project.
        ///
        /// * DISABLED: CloudWatch Logs are not enabled for this build project.
        /// This member is required.
        public var status: CodeBuildClientTypes.LogsConfigStatusType?
        /// The prefix of the stream name of the CloudWatch Logs. For more information, see [Working with Log Groups and Log Streams](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html).
        public var streamName: Swift.String?

        public init(
            groupName: Swift.String? = nil,
            status: CodeBuildClientTypes.LogsConfigStatusType? = nil,
            streamName: Swift.String? = nil
        )
        {
            self.groupName = groupName
            self.status = status
            self.streamName = streamName
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about S3 logs for a build project.
    public struct S3LogsConfig: Swift.Sendable {
        /// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. To use this property, your CodeBuild service role must have the s3:PutBucketAcl permission. This permission allows CodeBuild to modify the access control list for the bucket. This property can be one of the following values: NONE The bucket owner does not have access to the objects. This is the default. READ_ONLY The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects. FULL The bucket owner has full access to the objects. Object ownership is determined by the following criteria:
        ///
        /// * If the bucket is configured with the Bucket owner preferred setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.
        ///
        /// * Otherwise, the uploading account retains ownership of the objects.
        ///
        ///
        /// For more information about Amazon S3 object ownership, see [Controlling ownership of uploaded objects using S3 Object Ownership](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon Simple Storage Service User Guide.
        public var bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess?
        /// Set to true if you do not want your S3 build log output encrypted. By default S3 build logs are encrypted.
        public var encryptionDisabled: Swift.Bool?
        /// The ARN of an S3 bucket and the path prefix for S3 logs. If your Amazon S3 bucket name is my-bucket, and your path prefix is build-log, then acceptable formats are my-bucket/build-log or arn:aws:s3:::my-bucket/build-log.
        public var location: Swift.String?
        /// The current status of the S3 build logs. Valid values are:
        ///
        /// * ENABLED: S3 build logs are enabled for this build project.
        ///
        /// * DISABLED: S3 build logs are not enabled for this build project.
        /// This member is required.
        public var status: CodeBuildClientTypes.LogsConfigStatusType?

        public init(
            bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess? = nil,
            encryptionDisabled: Swift.Bool? = nil,
            location: Swift.String? = nil,
            status: CodeBuildClientTypes.LogsConfigStatusType? = nil
        )
        {
            self.bucketOwnerAccess = bucketOwnerAccess
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.status = status
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both.
    public struct LogsConfig: Swift.Sendable {
        /// Information about CloudWatch Logs for a build project. CloudWatch Logs are enabled by default.
        public var cloudWatchLogs: CodeBuildClientTypes.CloudWatchLogsConfig?
        /// Information about logs built to an S3 bucket for a build project. S3 logs are not enabled by default.
        public var s3Logs: CodeBuildClientTypes.S3LogsConfig?

        public init(
            cloudWatchLogs: CodeBuildClientTypes.CloudWatchLogsConfig? = nil,
            s3Logs: CodeBuildClientTypes.S3LogsConfig? = nil
        )
        {
            self.cloudWatchLogs = cloudWatchLogs
            self.s3Logs = s3Logs
        }
    }
}

extension CodeBuildClientTypes {

    /// Additional information about a build phase that has an error. You can use this information for troubleshooting.
    public struct PhaseContext: Swift.Sendable {
        /// An explanation of the build phase's context. This might include a command ID and an exit code.
        public var message: Swift.String?
        /// The status code for the context of the build phase.
        public var statusCode: Swift.String?

        public init(
            message: Swift.String? = nil,
            statusCode: Swift.String? = nil
        )
        {
            self.message = message
            self.statusCode = statusCode
        }
    }
}

extension CodeBuildClientTypes {

    public enum BuildBatchPhaseType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case combineArtifacts
        case downloadBatchspec
        case failed
        case inProgress
        case stopped
        case submitted
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [BuildBatchPhaseType] {
            return [
                .combineArtifacts,
                .downloadBatchspec,
                .failed,
                .inProgress,
                .stopped,
                .submitted,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .combineArtifacts: return "COMBINE_ARTIFACTS"
            case .downloadBatchspec: return "DOWNLOAD_BATCHSPEC"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .stopped: return "STOPPED"
            case .submitted: return "SUBMITTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Contains information about a stage for a batch build.
    public struct BuildBatchPhase: Swift.Sendable {
        /// Additional information about the batch build phase. Especially to help troubleshoot a failed batch build.
        public var contexts: [CodeBuildClientTypes.PhaseContext]?
        /// How long, in seconds, between the starting and ending times of the batch build's phase.
        public var durationInSeconds: Swift.Int?
        /// When the batch build phase ended, expressed in Unix time format.
        public var endTime: Foundation.Date?
        /// The current status of the batch build phase. Valid values include: FAILED The build phase failed. FAULT The build phase faulted. IN_PROGRESS The build phase is still in progress. STOPPED The build phase stopped. SUCCEEDED The build phase succeeded. TIMED_OUT The build phase timed out.
        public var phaseStatus: CodeBuildClientTypes.StatusType?
        /// The name of the batch build phase. Valid values include: COMBINE_ARTIFACTS Build output artifacts are being combined and uploaded to the output location. DOWNLOAD_BATCHSPEC The batch build specification is being downloaded. FAILED One or more of the builds failed. IN_PROGRESS The batch build is in progress. STOPPED The batch build was stopped. SUBMITTED The btach build has been submitted. SUCCEEDED The batch build succeeded.
        public var phaseType: CodeBuildClientTypes.BuildBatchPhaseType?
        /// When the batch build phase started, expressed in Unix time format.
        public var startTime: Foundation.Date?

        public init(
            contexts: [CodeBuildClientTypes.PhaseContext]? = nil,
            durationInSeconds: Swift.Int? = nil,
            endTime: Foundation.Date? = nil,
            phaseStatus: CodeBuildClientTypes.StatusType? = nil,
            phaseType: CodeBuildClientTypes.BuildBatchPhaseType? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.contexts = contexts
            self.durationInSeconds = durationInSeconds
            self.endTime = endTime
            self.phaseStatus = phaseStatus
            self.phaseType = phaseType
            self.startTime = startTime
        }
    }
}

extension CodeBuildClientTypes {

    public enum SourceAuthType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codeconnections
        case oauth
        case secretsManager
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceAuthType] {
            return [
                .codeconnections,
                .oauth,
                .secretsManager
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codeconnections: return "CODECONNECTIONS"
            case .oauth: return "OAUTH"
            case .secretsManager: return "SECRETS_MANAGER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the authorization settings for CodeBuild to access the source code to be built.
    public struct SourceAuth: Swift.Sendable {
        /// The resource value that applies to the specified authorization type.
        public var resource: Swift.String?
        /// The authorization type to use. Valid options are OAUTH, CODECONNECTIONS, or SECRETS_MANAGER.
        /// This member is required.
        public var type: CodeBuildClientTypes.SourceAuthType?

        public init(
            resource: Swift.String? = nil,
            type: CodeBuildClientTypes.SourceAuthType? = nil
        )
        {
            self.resource = resource
            self.type = type
        }
    }
}

extension CodeBuildClientTypes {

    /// Contains information that defines how the CodeBuild build project reports the build status to the source provider.
    public struct BuildStatusConfig: Swift.Sendable {
        /// Specifies the context of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider. Bitbucket This parameter is used for the name parameter in the Bitbucket commit status. For more information, see [build](https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Bworkspace%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/statuses/build) in the Bitbucket API documentation. GitHub/GitHub Enterprise Server This parameter is used for the context parameter in the GitHub commit status. For more information, see [Create a commit status](https://developer.github.com/v3/repos/statuses/#create-a-commit-status) in the GitHub developer guide.
        public var context: Swift.String?
        /// Specifies the target url of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider. Bitbucket This parameter is used for the url parameter in the Bitbucket commit status. For more information, see [build](https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Bworkspace%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/statuses/build) in the Bitbucket API documentation. GitHub/GitHub Enterprise Server This parameter is used for the target_url parameter in the GitHub commit status. For more information, see [Create a commit status](https://developer.github.com/v3/repos/statuses/#create-a-commit-status) in the GitHub developer guide.
        public var targetUrl: Swift.String?

        public init(
            context: Swift.String? = nil,
            targetUrl: Swift.String? = nil
        )
        {
            self.context = context
            self.targetUrl = targetUrl
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the Git submodules configuration for an CodeBuild build project.
    public struct GitSubmodulesConfig: Swift.Sendable {
        /// Set to true to fetch Git submodules for your CodeBuild build project.
        /// This member is required.
        public var fetchSubmodules: Swift.Bool?

        public init(
            fetchSubmodules: Swift.Bool? = nil
        )
        {
            self.fetchSubmodules = fetchSubmodules
        }
    }
}

extension CodeBuildClientTypes {

    public enum SourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bitbucket
        case codecommit
        case codepipeline
        case github
        case githubEnterprise
        case gitlab
        case gitlabSelfManaged
        case noSource
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceType] {
            return [
                .bitbucket,
                .codecommit,
                .codepipeline,
                .github,
                .githubEnterprise,
                .gitlab,
                .gitlabSelfManaged,
                .noSource,
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bitbucket: return "BITBUCKET"
            case .codecommit: return "CODECOMMIT"
            case .codepipeline: return "CODEPIPELINE"
            case .github: return "GITHUB"
            case .githubEnterprise: return "GITHUB_ENTERPRISE"
            case .gitlab: return "GITLAB"
            case .gitlabSelfManaged: return "GITLAB_SELF_MANAGED"
            case .noSource: return "NO_SOURCE"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the build input source code for the build project.
    public struct ProjectSource: Swift.Sendable {
        /// Information about the authorization settings for CodeBuild to access the source code to be built.
        public var auth: CodeBuildClientTypes.SourceAuth?
        /// Contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is GITHUB, GITHUB_ENTERPRISE, or BITBUCKET.
        public var buildStatusConfig: CodeBuildClientTypes.BuildStatusConfig?
        /// The buildspec file declaration to use for the builds in this build project. If this value is set, it can be either an inline buildspec definition, the path to an alternate buildspec file relative to the value of the built-in CODEBUILD_SRC_DIR environment variable, or the path to an S3 bucket. The bucket must be in the same Amazon Web Services Region as the build project. Specify the buildspec file using its ARN (for example, arn:aws:s3:::my-codebuild-sample2/buildspec.yml). If this value is not provided or is set to an empty string, the source code must contain a buildspec file in its root directory. For more information, see [Buildspec File Name and Storage Location](https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage).
        public var buildspec: Swift.String?
        /// Information about the Git clone depth for the build project.
        public var gitCloneDepth: Swift.Int?
        /// Information about the Git submodules configuration for the build project.
        public var gitSubmodulesConfig: CodeBuildClientTypes.GitSubmodulesConfig?
        /// Enable this flag to ignore SSL warnings while connecting to the project source code.
        public var insecureSsl: Swift.Bool?
        /// Information about the location of the source code to be built. Valid values include:
        ///
        /// * For source code settings that are specified in the source action of a pipeline in CodePipeline, location should not be specified. If it is specified, CodePipeline ignores it. This is because CodePipeline uses the settings in a pipeline's source action instead of this value.
        ///
        /// * For source code in an CodeCommit repository, the HTTPS clone URL to the repository that contains the source code and the buildspec file (for example, https://git-codecommit..amazonaws.com/v1/repos/).
        ///
        /// * For source code in an Amazon S3 input bucket, one of the following.
        ///
        /// * The path to the ZIP file that contains the source code (for example, //.zip).
        ///
        /// * The path to the folder that contains the source code (for example, ///).
        ///
        ///
        ///
        ///
        /// * For source code in a GitHub repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon Web Services account to your GitHub account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with GitHub, on the GitHub Authorize application page, for Organization access, choose Request access next to each repository you want to allow CodeBuild to have access to, and then choose Authorize application. (After you have connected to your GitHub account, you do not need to finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the source object, set the auth object's type value to OAUTH.
        ///
        /// * For source code in an GitLab or self-managed GitLab repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon Web Services account to your GitLab account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with GitLab, on the Connections Authorize application page, choose Authorize. Then on the CodeConnections Create GitLab connection page, choose Connect to GitLab. (After you have connected to your GitLab account, you do not need to finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to override the default connection and use this connection instead, set the auth object's type value to CODECONNECTIONS in the source object.
        ///
        /// * For source code in a Bitbucket repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon Web Services account to your Bitbucket account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with Bitbucket, on the Bitbucket Confirm access to your account page, choose Grant access. (After you have connected to your Bitbucket account, you do not need to finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the source object, set the auth object's type value to OAUTH.
        ///
        ///
        /// If you specify CODEPIPELINE for the Type property, don't specify this property. For all of the other types, you must specify Location.
        public var location: Swift.String?
        /// Set to true to report the status of a build's start and finish to your source provider. This option is valid only when your source provider is GitHub, GitHub Enterprise, GitLab, GitLab Self Managed, or Bitbucket. If this is set and you use a different source provider, an invalidInputException is thrown. To be able to report the build status to the source provider, the user associated with the source provider must have write access to the repo. If the user does not have write access, the build status cannot be updated. For more information, see [Source provider access](https://docs.aws.amazon.com/codebuild/latest/userguide/access-tokens.html) in the CodeBuild User Guide. The status of a build triggered by a webhook is always reported to your source provider. If your project's builds are triggered by a webhook, you must push a new commit to the repo for a change to this property to take effect.
        public var reportBuildStatus: Swift.Bool?
        /// An identifier for this project source. The identifier can only contain alphanumeric characters and underscores, and must be less than 128 characters in length.
        public var sourceIdentifier: Swift.String?
        /// The type of repository that contains the source code to be built. Valid values include:
        ///
        /// * BITBUCKET: The source code is in a Bitbucket repository.
        ///
        /// * CODECOMMIT: The source code is in an CodeCommit repository.
        ///
        /// * CODEPIPELINE: The source code settings are specified in the source action of a pipeline in CodePipeline.
        ///
        /// * GITHUB: The source code is in a GitHub repository.
        ///
        /// * GITHUB_ENTERPRISE: The source code is in a GitHub Enterprise Server repository.
        ///
        /// * GITLAB: The source code is in a GitLab repository.
        ///
        /// * GITLAB_SELF_MANAGED: The source code is in a self-managed GitLab repository.
        ///
        /// * NO_SOURCE: The project does not have input source code.
        ///
        /// * S3: The source code is in an Amazon S3 bucket.
        /// This member is required.
        public var type: CodeBuildClientTypes.SourceType?

        public init(
            auth: CodeBuildClientTypes.SourceAuth? = nil,
            buildStatusConfig: CodeBuildClientTypes.BuildStatusConfig? = nil,
            buildspec: Swift.String? = nil,
            gitCloneDepth: Swift.Int? = nil,
            gitSubmodulesConfig: CodeBuildClientTypes.GitSubmodulesConfig? = nil,
            insecureSsl: Swift.Bool? = nil,
            location: Swift.String? = nil,
            reportBuildStatus: Swift.Bool? = nil,
            sourceIdentifier: Swift.String? = nil,
            type: CodeBuildClientTypes.SourceType? = nil
        )
        {
            self.auth = auth
            self.buildStatusConfig = buildStatusConfig
            self.buildspec = buildspec
            self.gitCloneDepth = gitCloneDepth
            self.gitSubmodulesConfig = gitSubmodulesConfig
            self.insecureSsl = insecureSsl
            self.location = location
            self.reportBuildStatus = reportBuildStatus
            self.sourceIdentifier = sourceIdentifier
            self.type = type
        }
    }
}

extension CodeBuildClientTypes {

    /// A source identifier and its corresponding version.
    public struct ProjectSourceVersion: Swift.Sendable {
        /// An identifier for a source in the build project. The identifier can only contain alphanumeric characters and underscores, and must be less than 128 characters in length.
        /// This member is required.
        public var sourceIdentifier: Swift.String?
        /// The source version for the corresponding source identifier. If specified, must be one of:
        ///
        /// * For CodeCommit: the commit ID, branch, or Git tag to use.
        ///
        /// * For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example, pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
        ///
        /// * For GitLab: the commit ID, branch, or Git tag to use.
        ///
        /// * For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
        ///
        /// * For Amazon S3: the version ID of the object that represents the build input ZIP file to use.
        ///
        ///
        /// For more information, see [Source Version Sample with CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html) in the CodeBuild User Guide.
        /// This member is required.
        public var sourceVersion: Swift.String?

        public init(
            sourceIdentifier: Swift.String? = nil,
            sourceVersion: Swift.String? = nil
        )
        {
            self.sourceIdentifier = sourceIdentifier
            self.sourceVersion = sourceVersion
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the VPC configuration that CodeBuild accesses.
    public struct VpcConfig: Swift.Sendable {
        /// A list of one or more security groups IDs in your Amazon VPC.
        public var securityGroupIds: [Swift.String]?
        /// A list of one or more subnet IDs in your Amazon VPC.
        public var subnets: [Swift.String]?
        /// The ID of the Amazon VPC.
        public var vpcId: Swift.String?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
            self.vpcId = vpcId
        }
    }
}

extension CodeBuildClientTypes {

    /// Contains information about a batch build.
    public struct BuildBatch: Swift.Sendable {
        /// The ARN of the batch build.
        public var arn: Swift.String?
        /// A BuildArtifacts object the defines the build artifacts for this batch build.
        public var artifacts: CodeBuildClientTypes.BuildArtifacts?
        /// Contains configuration information about a batch build project.
        public var buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig?
        /// The number of the batch build. For each project, the buildBatchNumber of its first batch build is 1. The buildBatchNumber of each subsequent batch build is incremented by 1. If a batch build is deleted, the buildBatchNumber of other batch builds does not change.
        public var buildBatchNumber: Swift.Int?
        /// The status of the batch build.
        public var buildBatchStatus: CodeBuildClientTypes.StatusType?
        /// An array of BuildGroup objects that define the build groups for the batch build.
        public var buildGroups: [CodeBuildClientTypes.BuildGroup]?
        /// Specifies the maximum amount of time, in minutes, that the build in a batch must be completed in.
        public var buildTimeoutInMinutes: Swift.Int?
        /// Information about the cache for the build project.
        public var cache: CodeBuildClientTypes.ProjectCache?
        /// Indicates if the batch build is complete.
        public var complete: Swift.Bool
        /// The current phase of the batch build.
        public var currentPhase: Swift.String?
        /// Specifies if session debugging is enabled for this batch build. For more information, see [Viewing a running build in Session Manager](https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html). Batch session debugging is not supported for matrix batch builds.
        public var debugSessionEnabled: Swift.Bool?
        /// The Key Management Service customer master key (CMK) to be used for encrypting the batch build output artifacts. You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/).
        public var encryptionKey: Swift.String?
        /// The date and time that the batch build ended.
        public var endTime: Foundation.Date?
        /// Information about the build environment of the build project.
        public var environment: CodeBuildClientTypes.ProjectEnvironment?
        /// An array of ProjectFileSystemLocation objects for the batch build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System.
        public var fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]?
        /// The identifier of the batch build.
        public var id: Swift.String?
        /// The entity that started the batch build. Valid values include:
        ///
        /// * If CodePipeline started the build, the pipeline's name (for example, codepipeline/my-demo-pipeline).
        ///
        /// * If a user started the build, the user's name.
        ///
        /// * If the Jenkins plugin for CodeBuild started the build, the string CodeBuild-Jenkins-Plugin.
        public var initiator: Swift.String?
        /// Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both.
        public var logConfig: CodeBuildClientTypes.LogsConfig?
        /// An array of BuildBatchPhase objects the specify the phases of the batch build.
        public var phases: [CodeBuildClientTypes.BuildBatchPhase]?
        /// The name of the batch build project.
        public var projectName: Swift.String?
        /// Specifies the amount of time, in minutes, that the batch build is allowed to be queued before it times out.
        public var queuedTimeoutInMinutes: Swift.Int?
        /// The identifier of the resolved version of this batch build's source code.
        ///
        /// * For CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID.
        ///
        /// * For CodePipeline, the source revision provided by CodePipeline.
        ///
        /// * For Amazon S3, this does not apply.
        public var resolvedSourceVersion: Swift.String?
        /// An array of BuildArtifacts objects the define the build artifacts for this batch build.
        public var secondaryArtifacts: [CodeBuildClientTypes.BuildArtifacts]?
        /// An array of ProjectSourceVersion objects. Each ProjectSourceVersion must be one of:
        ///
        /// * For CodeCommit: the commit ID, branch, or Git tag to use.
        ///
        /// * For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example, pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
        ///
        /// * For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
        ///
        /// * For Amazon S3: the version ID of the object that represents the build input ZIP file to use.
        public var secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]?
        /// An array of ProjectSource objects that define the sources for the batch build.
        public var secondarySources: [CodeBuildClientTypes.ProjectSource]?
        /// The name of a service role used for builds in the batch.
        public var serviceRole: Swift.String?
        /// Information about the build input source code for the build project.
        public var source: CodeBuildClientTypes.ProjectSource?
        /// The identifier of the version of the source code to be built.
        public var sourceVersion: Swift.String?
        /// The date and time that the batch build started.
        public var startTime: Foundation.Date?
        /// Information about the VPC configuration that CodeBuild accesses.
        public var vpcConfig: CodeBuildClientTypes.VpcConfig?

        public init(
            arn: Swift.String? = nil,
            artifacts: CodeBuildClientTypes.BuildArtifacts? = nil,
            buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig? = nil,
            buildBatchNumber: Swift.Int? = nil,
            buildBatchStatus: CodeBuildClientTypes.StatusType? = nil,
            buildGroups: [CodeBuildClientTypes.BuildGroup]? = nil,
            buildTimeoutInMinutes: Swift.Int? = nil,
            cache: CodeBuildClientTypes.ProjectCache? = nil,
            complete: Swift.Bool = false,
            currentPhase: Swift.String? = nil,
            debugSessionEnabled: Swift.Bool? = nil,
            encryptionKey: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            environment: CodeBuildClientTypes.ProjectEnvironment? = nil,
            fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]? = nil,
            id: Swift.String? = nil,
            initiator: Swift.String? = nil,
            logConfig: CodeBuildClientTypes.LogsConfig? = nil,
            phases: [CodeBuildClientTypes.BuildBatchPhase]? = nil,
            projectName: Swift.String? = nil,
            queuedTimeoutInMinutes: Swift.Int? = nil,
            resolvedSourceVersion: Swift.String? = nil,
            secondaryArtifacts: [CodeBuildClientTypes.BuildArtifacts]? = nil,
            secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
            secondarySources: [CodeBuildClientTypes.ProjectSource]? = nil,
            serviceRole: Swift.String? = nil,
            source: CodeBuildClientTypes.ProjectSource? = nil,
            sourceVersion: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            vpcConfig: CodeBuildClientTypes.VpcConfig? = nil
        )
        {
            self.arn = arn
            self.artifacts = artifacts
            self.buildBatchConfig = buildBatchConfig
            self.buildBatchNumber = buildBatchNumber
            self.buildBatchStatus = buildBatchStatus
            self.buildGroups = buildGroups
            self.buildTimeoutInMinutes = buildTimeoutInMinutes
            self.cache = cache
            self.complete = complete
            self.currentPhase = currentPhase
            self.debugSessionEnabled = debugSessionEnabled
            self.encryptionKey = encryptionKey
            self.endTime = endTime
            self.environment = environment
            self.fileSystemLocations = fileSystemLocations
            self.id = id
            self.initiator = initiator
            self.logConfig = logConfig
            self.phases = phases
            self.projectName = projectName
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.resolvedSourceVersion = resolvedSourceVersion
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySourceVersions = secondarySourceVersions
            self.secondarySources = secondarySources
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.startTime = startTime
            self.vpcConfig = vpcConfig
        }
    }
}

public struct BatchGetBuildBatchesOutput: Swift.Sendable {
    /// An array of BuildBatch objects that represent the retrieved batch builds.
    public var buildBatches: [CodeBuildClientTypes.BuildBatch]?
    /// An array that contains the identifiers of any batch builds that are not found.
    public var buildBatchesNotFound: [Swift.String]?

    public init(
        buildBatches: [CodeBuildClientTypes.BuildBatch]? = nil,
        buildBatchesNotFound: [Swift.String]? = nil
    )
    {
        self.buildBatches = buildBatches
        self.buildBatchesNotFound = buildBatchesNotFound
    }
}

public struct BatchGetBuildsInput: Swift.Sendable {
    /// The IDs of the builds.
    /// This member is required.
    public var ids: [Swift.String]?

    public init(
        ids: [Swift.String]? = nil
    )
    {
        self.ids = ids
    }
}

extension CodeBuildClientTypes {

    /// Contains information about the debug session for a build. For more information, see [Viewing a running build in Session Manager](https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html).
    public struct DebugSession: Swift.Sendable {
        /// Specifies if session debugging is enabled for this build.
        public var sessionEnabled: Swift.Bool?
        /// Contains the identifier of the Session Manager session used for the build. To work with the paused build, you open this session to examine, control, and resume the build.
        public var sessionTarget: Swift.String?

        public init(
            sessionEnabled: Swift.Bool? = nil,
            sessionTarget: Swift.String? = nil
        )
        {
            self.sessionEnabled = sessionEnabled
            self.sessionTarget = sessionTarget
        }
    }
}

extension CodeBuildClientTypes {

    /// Contains information about an exported environment variable. Exported environment variables are used in conjunction with CodePipeline to export environment variables from the current build stage to subsequent stages in the pipeline. For more information, see [Working with variables](https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-variables.html) in the CodePipeline User Guide. During a build, the value of a variable is available starting with the install phase. It can be updated between the start of the install phase and the end of the post_build phase. After the post_build phase ends, the value of exported variables cannot change.
    public struct ExportedEnvironmentVariable: Swift.Sendable {
        /// The name of the exported environment variable.
        public var name: Swift.String?
        /// The value assigned to the exported environment variable.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about build logs in CloudWatch Logs.
    public struct LogsLocation: Swift.Sendable {
        /// Information about CloudWatch Logs for a build project.
        public var cloudWatchLogs: CodeBuildClientTypes.CloudWatchLogsConfig?
        /// The ARN of the CloudWatch Logs stream for a build execution. Its format is arn:${Partition}:logs:${Region}:${Account}:log-group:${LogGroupName}:log-stream:${LogStreamName}. The CloudWatch Logs stream is created during the PROVISIONING phase of a build and the ARN will not be valid until it is created. For more information, see [Resources Defined by CloudWatch Logs](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatchlogs.html#amazoncloudwatchlogs-resources-for-iam-policies).
        public var cloudWatchLogsArn: Swift.String?
        /// The URL to an individual build log in CloudWatch Logs. The log stream is created during the PROVISIONING phase of a build and the deeplink will not be valid until it is created.
        public var deepLink: Swift.String?
        /// The name of the CloudWatch Logs group for the build logs.
        public var groupName: Swift.String?
        /// The URL to a build log in an S3 bucket.
        public var s3DeepLink: Swift.String?
        /// Information about S3 logs for a build project.
        public var s3Logs: CodeBuildClientTypes.S3LogsConfig?
        /// The ARN of S3 logs for a build project. Its format is arn:${Partition}:s3:::${BucketName}/${ObjectName}. For more information, see [Resources Defined by Amazon S3](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazons3.html#amazons3-resources-for-iam-policies).
        public var s3LogsArn: Swift.String?
        /// The name of the CloudWatch Logs stream for the build logs.
        public var streamName: Swift.String?

        public init(
            cloudWatchLogs: CodeBuildClientTypes.CloudWatchLogsConfig? = nil,
            cloudWatchLogsArn: Swift.String? = nil,
            deepLink: Swift.String? = nil,
            groupName: Swift.String? = nil,
            s3DeepLink: Swift.String? = nil,
            s3Logs: CodeBuildClientTypes.S3LogsConfig? = nil,
            s3LogsArn: Swift.String? = nil,
            streamName: Swift.String? = nil
        )
        {
            self.cloudWatchLogs = cloudWatchLogs
            self.cloudWatchLogsArn = cloudWatchLogsArn
            self.deepLink = deepLink
            self.groupName = groupName
            self.s3DeepLink = s3DeepLink
            self.s3Logs = s3Logs
            self.s3LogsArn = s3LogsArn
            self.streamName = streamName
        }
    }
}

extension CodeBuildClientTypes {

    /// Describes a network interface.
    public struct NetworkInterface: Swift.Sendable {
        /// The ID of the network interface.
        public var networkInterfaceId: Swift.String?
        /// The ID of the subnet.
        public var subnetId: Swift.String?

        public init(
            networkInterfaceId: Swift.String? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.networkInterfaceId = networkInterfaceId
            self.subnetId = subnetId
        }
    }
}

extension CodeBuildClientTypes {

    public enum BuildPhaseType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case build
        case completed
        case downloadSource
        case finalizing
        case install
        case postBuild
        case preBuild
        case provisioning
        case queued
        case submitted
        case uploadArtifacts
        case sdkUnknown(Swift.String)

        public static var allCases: [BuildPhaseType] {
            return [
                .build,
                .completed,
                .downloadSource,
                .finalizing,
                .install,
                .postBuild,
                .preBuild,
                .provisioning,
                .queued,
                .submitted,
                .uploadArtifacts
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .build: return "BUILD"
            case .completed: return "COMPLETED"
            case .downloadSource: return "DOWNLOAD_SOURCE"
            case .finalizing: return "FINALIZING"
            case .install: return "INSTALL"
            case .postBuild: return "POST_BUILD"
            case .preBuild: return "PRE_BUILD"
            case .provisioning: return "PROVISIONING"
            case .queued: return "QUEUED"
            case .submitted: return "SUBMITTED"
            case .uploadArtifacts: return "UPLOAD_ARTIFACTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about a stage for a build.
    public struct BuildPhase: Swift.Sendable {
        /// Additional information about a build phase, especially to help troubleshoot a failed build.
        public var contexts: [CodeBuildClientTypes.PhaseContext]?
        /// How long, in seconds, between the starting and ending times of the build's phase.
        public var durationInSeconds: Swift.Int?
        /// When the build phase ended, expressed in Unix time format.
        public var endTime: Foundation.Date?
        /// The current status of the build phase. Valid values include: FAILED The build phase failed. FAULT The build phase faulted. IN_PROGRESS The build phase is still in progress. STOPPED The build phase stopped. SUCCEEDED The build phase succeeded. TIMED_OUT The build phase timed out.
        public var phaseStatus: CodeBuildClientTypes.StatusType?
        /// The name of the build phase. Valid values include: BUILD Core build activities typically occur in this build phase. COMPLETED The build has been completed. DOWNLOAD_SOURCE Source code is being downloaded in this build phase. FINALIZING The build process is completing in this build phase. INSTALL Installation activities typically occur in this build phase. POST_BUILD Post-build activities typically occur in this build phase. PRE_BUILD Pre-build activities typically occur in this build phase. PROVISIONING The build environment is being set up. QUEUED The build has been submitted and is queued behind other submitted builds. SUBMITTED The build has been submitted. UPLOAD_ARTIFACTS Build output artifacts are being uploaded to the output location.
        public var phaseType: CodeBuildClientTypes.BuildPhaseType?
        /// When the build phase started, expressed in Unix time format.
        public var startTime: Foundation.Date?

        public init(
            contexts: [CodeBuildClientTypes.PhaseContext]? = nil,
            durationInSeconds: Swift.Int? = nil,
            endTime: Foundation.Date? = nil,
            phaseStatus: CodeBuildClientTypes.StatusType? = nil,
            phaseType: CodeBuildClientTypes.BuildPhaseType? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.contexts = contexts
            self.durationInSeconds = durationInSeconds
            self.endTime = endTime
            self.phaseStatus = phaseStatus
            self.phaseType = phaseType
            self.startTime = startTime
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about a build.
    public struct Build: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the build.
        public var arn: Swift.String?
        /// Information about the output artifacts for the build.
        public var artifacts: CodeBuildClientTypes.BuildArtifacts?
        /// Information about the auto-retry configuration for the build.
        public var autoRetryConfig: CodeBuildClientTypes.AutoRetryConfig?
        /// The ARN of the batch build that this build is a member of, if applicable.
        public var buildBatchArn: Swift.String?
        /// Whether the build is complete. True if complete; otherwise, false.
        public var buildComplete: Swift.Bool
        /// The number of the build. For each project, the buildNumber of its first build is 1. The buildNumber of each subsequent build is incremented by 1. If a build is deleted, the buildNumber of other builds does not change.
        public var buildNumber: Swift.Int?
        /// The current status of the build. Valid values include:
        ///
        /// * FAILED: The build failed.
        ///
        /// * FAULT: The build faulted.
        ///
        /// * IN_PROGRESS: The build is still in progress.
        ///
        /// * STOPPED: The build stopped.
        ///
        /// * SUCCEEDED: The build succeeded.
        ///
        /// * TIMED_OUT: The build timed out.
        public var buildStatus: CodeBuildClientTypes.StatusType?
        /// Information about the cache for the build.
        public var cache: CodeBuildClientTypes.ProjectCache?
        /// The current build phase.
        public var currentPhase: Swift.String?
        /// Contains information about the debug session for this build.
        public var debugSession: CodeBuildClientTypes.DebugSession?
        /// The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts. You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/).
        public var encryptionKey: Swift.String?
        /// When the build process ended, expressed in Unix time format.
        public var endTime: Foundation.Date?
        /// Information about the build environment for this build.
        public var environment: CodeBuildClientTypes.ProjectEnvironment?
        /// A list of exported environment variables for this build. Exported environment variables are used in conjunction with CodePipeline to export environment variables from the current build stage to subsequent stages in the pipeline. For more information, see [Working with variables](https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-variables.html) in the CodePipeline User Guide.
        public var exportedEnvironmentVariables: [CodeBuildClientTypes.ExportedEnvironmentVariable]?
        /// An array of ProjectFileSystemLocation objects for a CodeBuild build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System.
        public var fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]?
        /// The unique ID for the build.
        public var id: Swift.String?
        /// The entity that started the build. Valid values include:
        ///
        /// * If CodePipeline started the build, the pipeline's name (for example, codepipeline/my-demo-pipeline).
        ///
        /// * If a user started the build, the user's name (for example, MyUserName).
        ///
        /// * If the Jenkins plugin for CodeBuild started the build, the string CodeBuild-Jenkins-Plugin.
        public var initiator: Swift.String?
        /// Information about the build's logs in CloudWatch Logs.
        public var logs: CodeBuildClientTypes.LogsLocation?
        /// Describes a network interface.
        public var networkInterface: CodeBuildClientTypes.NetworkInterface?
        /// Information about all previous build phases that are complete and information about any current build phase that is not yet complete.
        public var phases: [CodeBuildClientTypes.BuildPhase]?
        /// The name of the CodeBuild project.
        public var projectName: Swift.String?
        /// The number of minutes a build is allowed to be queued before it times out.
        public var queuedTimeoutInMinutes: Swift.Int?
        /// An array of the ARNs associated with this build's reports.
        public var reportArns: [Swift.String]?
        /// An identifier for the version of this build's source code.
        ///
        /// * For CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID.
        ///
        /// * For CodePipeline, the source revision provided by CodePipeline.
        ///
        /// * For Amazon S3, this does not apply.
        public var resolvedSourceVersion: Swift.String?
        /// An array of ProjectArtifacts objects.
        public var secondaryArtifacts: [CodeBuildClientTypes.BuildArtifacts]?
        /// An array of ProjectSourceVersion objects. Each ProjectSourceVersion must be one of:
        ///
        /// * For CodeCommit: the commit ID, branch, or Git tag to use.
        ///
        /// * For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example, pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
        ///
        /// * For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
        ///
        /// * For Amazon S3: the version ID of the object that represents the build input ZIP file to use.
        public var secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]?
        /// An array of ProjectSource objects.
        public var secondarySources: [CodeBuildClientTypes.ProjectSource]?
        /// The name of a service role used for this build.
        public var serviceRole: Swift.String?
        /// Information about the source code to be built.
        public var source: CodeBuildClientTypes.ProjectSource?
        /// Any version identifier for the version of the source code to be built. If sourceVersion is specified at the project level, then this sourceVersion (at the build level) takes precedence. For more information, see [Source Version Sample with CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html) in the CodeBuild User Guide.
        public var sourceVersion: Swift.String?
        /// When the build process started, expressed in Unix time format.
        public var startTime: Foundation.Date?
        /// How long, in minutes, from 5 to 2160 (36 hours), for CodeBuild to wait before timing out this build if it does not get marked as completed.
        public var timeoutInMinutes: Swift.Int?
        /// If your CodeBuild project accesses resources in an Amazon VPC, you provide this parameter that identifies the VPC ID and the list of security group IDs and subnet IDs. The security groups and subnets must belong to the same VPC. You must provide at least one security group and one subnet ID.
        public var vpcConfig: CodeBuildClientTypes.VpcConfig?

        public init(
            arn: Swift.String? = nil,
            artifacts: CodeBuildClientTypes.BuildArtifacts? = nil,
            autoRetryConfig: CodeBuildClientTypes.AutoRetryConfig? = nil,
            buildBatchArn: Swift.String? = nil,
            buildComplete: Swift.Bool = false,
            buildNumber: Swift.Int? = nil,
            buildStatus: CodeBuildClientTypes.StatusType? = nil,
            cache: CodeBuildClientTypes.ProjectCache? = nil,
            currentPhase: Swift.String? = nil,
            debugSession: CodeBuildClientTypes.DebugSession? = nil,
            encryptionKey: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            environment: CodeBuildClientTypes.ProjectEnvironment? = nil,
            exportedEnvironmentVariables: [CodeBuildClientTypes.ExportedEnvironmentVariable]? = nil,
            fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]? = nil,
            id: Swift.String? = nil,
            initiator: Swift.String? = nil,
            logs: CodeBuildClientTypes.LogsLocation? = nil,
            networkInterface: CodeBuildClientTypes.NetworkInterface? = nil,
            phases: [CodeBuildClientTypes.BuildPhase]? = nil,
            projectName: Swift.String? = nil,
            queuedTimeoutInMinutes: Swift.Int? = nil,
            reportArns: [Swift.String]? = nil,
            resolvedSourceVersion: Swift.String? = nil,
            secondaryArtifacts: [CodeBuildClientTypes.BuildArtifacts]? = nil,
            secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
            secondarySources: [CodeBuildClientTypes.ProjectSource]? = nil,
            serviceRole: Swift.String? = nil,
            source: CodeBuildClientTypes.ProjectSource? = nil,
            sourceVersion: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            timeoutInMinutes: Swift.Int? = nil,
            vpcConfig: CodeBuildClientTypes.VpcConfig? = nil
        )
        {
            self.arn = arn
            self.artifacts = artifacts
            self.autoRetryConfig = autoRetryConfig
            self.buildBatchArn = buildBatchArn
            self.buildComplete = buildComplete
            self.buildNumber = buildNumber
            self.buildStatus = buildStatus
            self.cache = cache
            self.currentPhase = currentPhase
            self.debugSession = debugSession
            self.encryptionKey = encryptionKey
            self.endTime = endTime
            self.environment = environment
            self.exportedEnvironmentVariables = exportedEnvironmentVariables
            self.fileSystemLocations = fileSystemLocations
            self.id = id
            self.initiator = initiator
            self.logs = logs
            self.networkInterface = networkInterface
            self.phases = phases
            self.projectName = projectName
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.reportArns = reportArns
            self.resolvedSourceVersion = resolvedSourceVersion
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySourceVersions = secondarySourceVersions
            self.secondarySources = secondarySources
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.startTime = startTime
            self.timeoutInMinutes = timeoutInMinutes
            self.vpcConfig = vpcConfig
        }
    }
}

public struct BatchGetBuildsOutput: Swift.Sendable {
    /// Information about the requested builds.
    public var builds: [CodeBuildClientTypes.Build]?
    /// The IDs of builds for which information could not be found.
    public var buildsNotFound: [Swift.String]?

    public init(
        builds: [CodeBuildClientTypes.Build]? = nil,
        buildsNotFound: [Swift.String]? = nil
    )
    {
        self.builds = builds
        self.buildsNotFound = buildsNotFound
    }
}

public struct BatchGetFleetsInput: Swift.Sendable {
    /// The names or ARNs of the compute fleets.
    /// This member is required.
    public var names: [Swift.String]?

    public init(
        names: [Swift.String]? = nil
    )
    {
        self.names = names
    }
}

extension CodeBuildClientTypes {

    public enum FleetOverflowBehavior: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case onDemand
        case queue
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetOverflowBehavior] {
            return [
                .onDemand,
                .queue
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .onDemand: return "ON_DEMAND"
            case .queue: return "QUEUE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum FleetProxyRuleBehavior: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allowAll
        case denyAll
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetProxyRuleBehavior] {
            return [
                .allowAll,
                .denyAll
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allowAll: return "ALLOW_ALL"
            case .denyAll: return "DENY_ALL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum FleetProxyRuleEffectType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allow
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetProxyRuleEffectType] {
            return [
                .allow,
                .deny
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allow: return "ALLOW"
            case .deny: return "DENY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum FleetProxyRuleType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case domain
        case ip
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetProxyRuleType] {
            return [
                .domain,
                .ip
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .domain: return "DOMAIN"
            case .ip: return "IP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the proxy rule for your reserved capacity instances.
    public struct FleetProxyRule: Swift.Sendable {
        /// The behavior of the proxy rule.
        /// This member is required.
        public var effect: CodeBuildClientTypes.FleetProxyRuleEffectType?
        /// The destination of the proxy rule.
        /// This member is required.
        public var entities: [Swift.String]?
        /// The type of proxy rule.
        /// This member is required.
        public var type: CodeBuildClientTypes.FleetProxyRuleType?

        public init(
            effect: CodeBuildClientTypes.FleetProxyRuleEffectType? = nil,
            entities: [Swift.String]? = nil,
            type: CodeBuildClientTypes.FleetProxyRuleType? = nil
        )
        {
            self.effect = effect
            self.entities = entities
            self.type = type
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the proxy configurations that apply network access control to your reserved capacity instances.
    public struct ProxyConfiguration: Swift.Sendable {
        /// The default behavior of outgoing traffic.
        public var defaultBehavior: CodeBuildClientTypes.FleetProxyRuleBehavior?
        /// An array of FleetProxyRule objects that represent the specified destination domains or IPs to allow or deny network access control to.
        public var orderedProxyRules: [CodeBuildClientTypes.FleetProxyRule]?

        public init(
            defaultBehavior: CodeBuildClientTypes.FleetProxyRuleBehavior? = nil,
            orderedProxyRules: [CodeBuildClientTypes.FleetProxyRule]? = nil
        )
        {
            self.defaultBehavior = defaultBehavior
            self.orderedProxyRules = orderedProxyRules
        }
    }
}

extension CodeBuildClientTypes {

    public enum FleetScalingType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case targetTrackingScaling
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetScalingType] {
            return [
                .targetTrackingScaling
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .targetTrackingScaling: return "TARGET_TRACKING_SCALING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum FleetScalingMetricType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fleetUtilizationRate
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetScalingMetricType] {
            return [
                .fleetUtilizationRate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fleetUtilizationRate: return "FLEET_UTILIZATION_RATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Defines when a new instance is auto-scaled into the compute fleet.
    public struct TargetTrackingScalingConfiguration: Swift.Sendable {
        /// The metric type to determine auto-scaling.
        public var metricType: CodeBuildClientTypes.FleetScalingMetricType?
        /// The value of metricType when to start scaling.
        public var targetValue: Swift.Double?

        public init(
            metricType: CodeBuildClientTypes.FleetScalingMetricType? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.metricType = metricType
            self.targetValue = targetValue
        }
    }
}

extension CodeBuildClientTypes {

    /// The scaling configuration output of a compute fleet.
    public struct ScalingConfigurationOutput: Swift.Sendable {
        /// The desired number of instances in the ﬂeet when auto-scaling.
        public var desiredCapacity: Swift.Int?
        /// The maximum number of instances in the ﬂeet when auto-scaling.
        public var maxCapacity: Swift.Int?
        /// The scaling type for a compute fleet.
        public var scalingType: CodeBuildClientTypes.FleetScalingType?
        /// A list of TargetTrackingScalingConfiguration objects.
        public var targetTrackingScalingConfigs: [CodeBuildClientTypes.TargetTrackingScalingConfiguration]?

        public init(
            desiredCapacity: Swift.Int? = nil,
            maxCapacity: Swift.Int? = nil,
            scalingType: CodeBuildClientTypes.FleetScalingType? = nil,
            targetTrackingScalingConfigs: [CodeBuildClientTypes.TargetTrackingScalingConfiguration]? = nil
        )
        {
            self.desiredCapacity = desiredCapacity
            self.maxCapacity = maxCapacity
            self.scalingType = scalingType
            self.targetTrackingScalingConfigs = targetTrackingScalingConfigs
        }
    }
}

extension CodeBuildClientTypes {

    public enum FleetContextCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case actionRequired
        case createFailed
        case insufficientCapacity
        case pendingDeletion
        case updateFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetContextCode] {
            return [
                .actionRequired,
                .createFailed,
                .insufficientCapacity,
                .pendingDeletion,
                .updateFailed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .actionRequired: return "ACTION_REQUIRED"
            case .createFailed: return "CREATE_FAILED"
            case .insufficientCapacity: return "INSUFFICIENT_CAPACITY"
            case .pendingDeletion: return "PENDING_DELETION"
            case .updateFailed: return "UPDATE_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum FleetStatusCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case deleting
        case pendingDeletion
        case rotating
        case updateRollbackFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetStatusCode] {
            return [
                .active,
                .createFailed,
                .creating,
                .deleting,
                .pendingDeletion,
                .rotating,
                .updateRollbackFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .pendingDeletion: return "PENDING_DELETION"
            case .rotating: return "ROTATING"
            case .updateRollbackFailed: return "UPDATE_ROLLBACK_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// The status of the compute fleet.
    public struct FleetStatus: Swift.Sendable {
        /// Additional information about a compute fleet. Valid values include:
        ///
        /// * CREATE_FAILED: The compute fleet has failed to create.
        ///
        /// * UPDATE_FAILED: The compute fleet has failed to update.
        public var context: CodeBuildClientTypes.FleetContextCode?
        /// A message associated with the status of a compute fleet.
        public var message: Swift.String?
        /// The status code of the compute fleet. Valid values include:
        ///
        /// * CREATING: The compute fleet is being created.
        ///
        /// * UPDATING: The compute fleet is being updated.
        ///
        /// * ROTATING: The compute fleet is being rotated.
        ///
        /// * PENDING_DELETION: The compute fleet is pending deletion.
        ///
        /// * DELETING: The compute fleet is being deleted.
        ///
        /// * CREATE_FAILED: The compute fleet has failed to create.
        ///
        /// * UPDATE_ROLLBACK_FAILED: The compute fleet has failed to update and could not rollback to previous state.
        ///
        /// * ACTIVE: The compute fleet has succeeded and is active.
        public var statusCode: CodeBuildClientTypes.FleetStatusCode?

        public init(
            context: CodeBuildClientTypes.FleetContextCode? = nil,
            message: Swift.String? = nil,
            statusCode: CodeBuildClientTypes.FleetStatusCode? = nil
        )
        {
            self.context = context
            self.message = message
            self.statusCode = statusCode
        }
    }
}

extension CodeBuildClientTypes {

    /// A tag, consisting of a key and a value. This tag is available for use by Amazon Web Services services that support tags in CodeBuild.
    public struct Tag: Swift.Sendable {
        /// The tag's key.
        public var key: Swift.String?
        /// The tag's value.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

extension CodeBuildClientTypes {

    /// A set of dedicated instances for your build environment.
    public struct Fleet: Swift.Sendable {
        /// The ARN of the compute fleet.
        public var arn: Swift.String?
        /// The initial number of machines allocated to the compute ﬂeet, which deﬁnes the number of builds that can run in parallel.
        public var baseCapacity: Swift.Int?
        /// Information about the compute resources the compute fleet uses. Available values include:
        ///
        /// * BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds.
        ///
        /// * BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds.
        ///
        /// * BUILD_GENERAL1_LARGE: Use up to 16 GB memory and 8 vCPUs for builds, depending on your environment type.
        ///
        /// * BUILD_GENERAL1_XLARGE: Use up to 70 GB memory and 36 vCPUs for builds, depending on your environment type.
        ///
        /// * BUILD_GENERAL1_2XLARGE: Use up to 145 GB memory, 72 vCPUs, and 824 GB of SSD storage for builds. This compute type supports Docker images up to 100 GB uncompressed.
        ///
        ///
        /// If you use BUILD_GENERAL1_SMALL:
        ///
        /// * For environment type LINUX_CONTAINER, you can use up to 3 GB memory and 2 vCPUs for builds.
        ///
        /// * For environment type LINUX_GPU_CONTAINER, you can use up to 16 GB memory, 4 vCPUs, and 1 NVIDIA A10G Tensor Core GPU for builds.
        ///
        /// * For environment type ARM_CONTAINER, you can use up to 4 GB memory and 2 vCPUs on ARM-based processors for builds.
        ///
        ///
        /// If you use BUILD_GENERAL1_LARGE:
        ///
        /// * For environment type LINUX_CONTAINER, you can use up to 15 GB memory and 8 vCPUs for builds.
        ///
        /// * For environment type LINUX_GPU_CONTAINER, you can use up to 255 GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.
        ///
        /// * For environment type ARM_CONTAINER, you can use up to 16 GB memory and 8 vCPUs on ARM-based processors for builds.
        ///
        ///
        /// For more information, see [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the CodeBuild User Guide.
        public var computeType: CodeBuildClientTypes.ComputeType?
        /// The time at which the compute fleet was created.
        public var created: Foundation.Date?
        /// The environment type of the compute fleet.
        ///
        /// * The environment type ARM_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), Asia Pacific (Mumbai), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), EU (Frankfurt), and South America (São Paulo).
        ///
        /// * The environment type LINUX_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), South America (São Paulo), and Asia Pacific (Mumbai).
        ///
        /// * The environment type LINUX_GPU_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), and Asia Pacific (Sydney).
        ///
        /// * The environment type MAC_ARM is available for Medium fleets only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Sydney), and EU (Frankfurt)
        ///
        /// * The environment type MAC_ARM is available for Large fleets only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), and Asia Pacific (Sydney).
        ///
        /// * The environment type WINDOWS_SERVER_2019_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Sydney), Asia Pacific (Tokyo), Asia Pacific (Mumbai) and EU (Ireland).
        ///
        /// * The environment type WINDOWS_SERVER_2022_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Sydney), Asia Pacific (Singapore), Asia Pacific (Tokyo), South America (São Paulo) and Asia Pacific (Mumbai).
        ///
        ///
        /// For more information, see [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the CodeBuild user guide.
        public var environmentType: CodeBuildClientTypes.EnvironmentType?
        /// The service role associated with the compute fleet. For more information, see [ Allow a user to add a permission policy for a fleet service role](https://docs.aws.amazon.com/codebuild/latest/userguide/auth-and-access-control-iam-identity-based-access-control.html#customer-managed-policies-example-permission-policy-fleet-service-role.html) in the CodeBuild User Guide.
        public var fleetServiceRole: Swift.String?
        /// The ID of the compute fleet.
        public var id: Swift.String?
        /// The Amazon Machine Image (AMI) of the compute fleet.
        public var imageId: Swift.String?
        /// The time at which the compute fleet was last modified.
        public var lastModified: Foundation.Date?
        /// The name of the compute fleet.
        public var name: Swift.String?
        /// The compute fleet overflow behavior.
        ///
        /// * For overflow behavior QUEUE, your overflow builds need to wait on the existing fleet instance to become available.
        ///
        /// * For overflow behavior ON_DEMAND, your overflow builds run on CodeBuild on-demand. If you choose to set your overflow behavior to on-demand while creating a VPC-connected fleet, make sure that you add the required VPC permissions to your project service role. For more information, see [Example policy statement to allow CodeBuild access to Amazon Web Services services required to create a VPC network interface](https://docs.aws.amazon.com/codebuild/latest/userguide/auth-and-access-control-iam-identity-based-access-control.html#customer-managed-policies-example-create-vpc-network-interface).
        public var overflowBehavior: CodeBuildClientTypes.FleetOverflowBehavior?
        /// The proxy configuration of the compute fleet.
        public var proxyConfiguration: CodeBuildClientTypes.ProxyConfiguration?
        /// The scaling configuration of the compute fleet.
        public var scalingConfiguration: CodeBuildClientTypes.ScalingConfigurationOutput?
        /// The status of the compute fleet.
        public var status: CodeBuildClientTypes.FleetStatus?
        /// A list of tag key and value pairs associated with this compute fleet. These tags are available for use by Amazon Web Services services that support CodeBuild build project tags.
        public var tags: [CodeBuildClientTypes.Tag]?
        /// Information about the VPC configuration that CodeBuild accesses.
        public var vpcConfig: CodeBuildClientTypes.VpcConfig?

        public init(
            arn: Swift.String? = nil,
            baseCapacity: Swift.Int? = nil,
            computeType: CodeBuildClientTypes.ComputeType? = nil,
            created: Foundation.Date? = nil,
            environmentType: CodeBuildClientTypes.EnvironmentType? = nil,
            fleetServiceRole: Swift.String? = nil,
            id: Swift.String? = nil,
            imageId: Swift.String? = nil,
            lastModified: Foundation.Date? = nil,
            name: Swift.String? = nil,
            overflowBehavior: CodeBuildClientTypes.FleetOverflowBehavior? = nil,
            proxyConfiguration: CodeBuildClientTypes.ProxyConfiguration? = nil,
            scalingConfiguration: CodeBuildClientTypes.ScalingConfigurationOutput? = nil,
            status: CodeBuildClientTypes.FleetStatus? = nil,
            tags: [CodeBuildClientTypes.Tag]? = nil,
            vpcConfig: CodeBuildClientTypes.VpcConfig? = nil
        )
        {
            self.arn = arn
            self.baseCapacity = baseCapacity
            self.computeType = computeType
            self.created = created
            self.environmentType = environmentType
            self.fleetServiceRole = fleetServiceRole
            self.id = id
            self.imageId = imageId
            self.lastModified = lastModified
            self.name = name
            self.overflowBehavior = overflowBehavior
            self.proxyConfiguration = proxyConfiguration
            self.scalingConfiguration = scalingConfiguration
            self.status = status
            self.tags = tags
            self.vpcConfig = vpcConfig
        }
    }
}

public struct BatchGetFleetsOutput: Swift.Sendable {
    /// Information about the requested compute fleets.
    public var fleets: [CodeBuildClientTypes.Fleet]?
    /// The names of compute fleets for which information could not be found.
    public var fleetsNotFound: [Swift.String]?

    public init(
        fleets: [CodeBuildClientTypes.Fleet]? = nil,
        fleetsNotFound: [Swift.String]? = nil
    )
    {
        self.fleets = fleets
        self.fleetsNotFound = fleetsNotFound
    }
}

public struct BatchGetProjectsInput: Swift.Sendable {
    /// The names or ARNs of the build projects. To get information about a project shared with your Amazon Web Services account, its ARN must be specified. You cannot specify a shared project using its name.
    /// This member is required.
    public var names: [Swift.String]?

    public init(
        names: [Swift.String]? = nil
    )
    {
        self.names = names
    }
}

extension CodeBuildClientTypes {

    /// Information about the build output artifacts for the build project.
    public struct ProjectArtifacts: Swift.Sendable {
        /// An identifier for this artifact definition.
        public var artifactIdentifier: Swift.String?
        /// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. To use this property, your CodeBuild service role must have the s3:PutBucketAcl permission. This permission allows CodeBuild to modify the access control list for the bucket. This property can be one of the following values: NONE The bucket owner does not have access to the objects. This is the default. READ_ONLY The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects. FULL The bucket owner has full access to the objects. Object ownership is determined by the following criteria:
        ///
        /// * If the bucket is configured with the Bucket owner preferred setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.
        ///
        /// * Otherwise, the uploading account retains ownership of the objects.
        ///
        ///
        /// For more information about Amazon S3 object ownership, see [Controlling ownership of uploaded objects using S3 Object Ownership](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon Simple Storage Service User Guide.
        public var bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess?
        /// Set to true if you do not want your output artifacts encrypted. This option is valid only if your artifacts type is Amazon S3. If this is set with another artifacts type, an invalidInputException is thrown.
        public var encryptionDisabled: Swift.Bool?
        /// Information about the build output artifact location:
        ///
        /// * If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output locations instead of CodeBuild.
        ///
        /// * If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.
        ///
        /// * If type is set to S3, this is the name of the output bucket.
        public var location: Swift.String?
        /// Along with path and namespaceType, the pattern that CodeBuild uses to name and store the output artifact:
        ///
        /// * If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output names instead of CodeBuild.
        ///
        /// * If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.
        ///
        /// * If type is set to S3, this is the name of the output artifact object. If you set the name to be a forward slash ("/"), the artifact is stored in the root of the output bucket.
        ///
        ///
        /// For example:
        ///
        /// * If path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to MyArtifact.zip, then the output artifact is stored in MyArtifacts//MyArtifact.zip.
        ///
        /// * If path is empty, namespaceType is set to NONE, and name is set to "/", the output artifact is stored in the root of the output bucket.
        ///
        /// * If path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to "/", the output artifact is stored in MyArtifacts/.
        public var name: Swift.String?
        /// Along with path and name, the pattern that CodeBuild uses to determine the name and location to store the output artifact:
        ///
        /// * If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output names instead of CodeBuild.
        ///
        /// * If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.
        ///
        /// * If type is set to S3, valid values include:
        ///
        /// * BUILD_ID: Include the build ID in the location of the build output artifact.
        ///
        /// * NONE: Do not include the build ID. This is the default if namespaceType is not specified.
        ///
        ///
        ///
        ///
        ///
        /// For example, if path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to MyArtifact.zip, the output artifact is stored in MyArtifacts//MyArtifact.zip.
        public var namespaceType: CodeBuildClientTypes.ArtifactNamespace?
        /// If this flag is set, a name specified in the buildspec file overrides the artifact name. The name specified in a buildspec file is calculated at build time and uses the Shell Command Language. For example, you can append a date and time to your artifact name so that it is always unique.
        public var overrideArtifactName: Swift.Bool?
        /// The type of build output artifact to create:
        ///
        /// * If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output artifacts instead of CodeBuild.
        ///
        /// * If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.
        ///
        /// * If type is set to S3, valid values include:
        ///
        /// * NONE: CodeBuild creates in the output bucket a folder that contains the build output. This is the default if packaging is not specified.
        ///
        /// * ZIP: CodeBuild creates in the output bucket a ZIP file that contains the build output.
        public var packaging: CodeBuildClientTypes.ArtifactPackaging?
        /// Along with namespaceType and name, the pattern that CodeBuild uses to name and store the output artifact:
        ///
        /// * If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output names instead of CodeBuild.
        ///
        /// * If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.
        ///
        /// * If type is set to S3, this is the path to the output artifact. If path is not specified, path is not used.
        ///
        ///
        /// For example, if path is set to MyArtifacts, namespaceType is set to NONE, and name is set to MyArtifact.zip, the output artifact is stored in the output bucket at MyArtifacts/MyArtifact.zip.
        public var path: Swift.String?
        /// The type of build output artifact. Valid values include:
        ///
        /// * CODEPIPELINE: The build project has build output generated through CodePipeline. The CODEPIPELINE type is not supported for secondaryArtifacts.
        ///
        /// * NO_ARTIFACTS: The build project does not produce any build output.
        ///
        /// * S3: The build project stores build output in Amazon S3.
        /// This member is required.
        public var type: CodeBuildClientTypes.ArtifactsType?

        public init(
            artifactIdentifier: Swift.String? = nil,
            bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess? = nil,
            encryptionDisabled: Swift.Bool? = nil,
            location: Swift.String? = nil,
            name: Swift.String? = nil,
            namespaceType: CodeBuildClientTypes.ArtifactNamespace? = nil,
            overrideArtifactName: Swift.Bool? = nil,
            packaging: CodeBuildClientTypes.ArtifactPackaging? = nil,
            path: Swift.String? = nil,
            type: CodeBuildClientTypes.ArtifactsType? = nil
        )
        {
            self.artifactIdentifier = artifactIdentifier
            self.bucketOwnerAccess = bucketOwnerAccess
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.name = name
            self.namespaceType = namespaceType
            self.overrideArtifactName = overrideArtifactName
            self.packaging = packaging
            self.path = path
            self.type = type
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the build badge for the build project.
    public struct ProjectBadge: Swift.Sendable {
        /// Set this to true to generate a publicly accessible URL for your project's build badge.
        public var badgeEnabled: Swift.Bool
        /// The publicly-accessible URL through which you can access the build badge for your project.
        public var badgeRequestUrl: Swift.String?

        public init(
            badgeEnabled: Swift.Bool = false,
            badgeRequestUrl: Swift.String? = nil
        )
        {
            self.badgeEnabled = badgeEnabled
            self.badgeRequestUrl = badgeRequestUrl
        }
    }
}

extension CodeBuildClientTypes {

    /// Specifies the visibility of the project's builds. Possible values are: PUBLIC_READ The project builds are visible to the public. PRIVATE The project builds are not visible to the public.
    public enum ProjectVisibilityType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `private`
        case publicRead
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectVisibilityType] {
            return [
                .private,
                .publicRead
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .private: return "PRIVATE"
            case .publicRead: return "PUBLIC_READ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum WebhookBuildType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case build
        case buildBatch
        case sdkUnknown(Swift.String)

        public static var allCases: [WebhookBuildType] {
            return [
                .build,
                .buildBatch
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .build: return "BUILD"
            case .buildBatch: return "BUILD_BATCH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum WebhookFilterType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case actorAccountId
        case baseRef
        case commitMessage
        case event
        case filePath
        case headRef
        case releaseName
        case repositoryName
        case tagName
        case workflowName
        case sdkUnknown(Swift.String)

        public static var allCases: [WebhookFilterType] {
            return [
                .actorAccountId,
                .baseRef,
                .commitMessage,
                .event,
                .filePath,
                .headRef,
                .releaseName,
                .repositoryName,
                .tagName,
                .workflowName
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .actorAccountId: return "ACTOR_ACCOUNT_ID"
            case .baseRef: return "BASE_REF"
            case .commitMessage: return "COMMIT_MESSAGE"
            case .event: return "EVENT"
            case .filePath: return "FILE_PATH"
            case .headRef: return "HEAD_REF"
            case .releaseName: return "RELEASE_NAME"
            case .repositoryName: return "REPOSITORY_NAME"
            case .tagName: return "TAG_NAME"
            case .workflowName: return "WORKFLOW_NAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// A filter used to determine which webhooks trigger a build.
    public struct WebhookFilter: Swift.Sendable {
        /// Used to indicate that the pattern determines which webhook events do not trigger a build. If true, then a webhook event that does not match the pattern triggers a build. If false, then a webhook event that matches the pattern triggers a build.
        public var excludeMatchedPattern: Swift.Bool?
        /// For a WebHookFilter that uses EVENT type, a comma-separated string that specifies one or more events. For example, the webhook filter PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED allows all push, pull request created, and pull request updated events to trigger a build. For a WebHookFilter that uses any of the other filter types, a regular expression pattern. For example, a WebHookFilter that uses HEAD_REF for its type and the pattern ^refs/heads/ triggers a build when the head reference is a branch with a reference name refs/heads/branch-name.
        /// This member is required.
        public var pattern: Swift.String?
        /// The type of webhook filter. There are nine webhook filter types: EVENT, ACTOR_ACCOUNT_ID, HEAD_REF, BASE_REF, FILE_PATH, COMMIT_MESSAGE, TAG_NAME, RELEASE_NAME, and WORKFLOW_NAME.
        ///
        /// * EVENT
        ///
        /// * A webhook event triggers a build when the provided pattern matches one of nine event types: PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED, PULL_REQUEST_CLOSED, PULL_REQUEST_REOPENED, PULL_REQUEST_MERGED, RELEASED, PRERELEASED, and WORKFLOW_JOB_QUEUED. The EVENT patterns are specified as a comma-separated string. For example, PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED filters all push, pull request created, and pull request updated events. Types PULL_REQUEST_REOPENED and WORKFLOW_JOB_QUEUED work with GitHub and GitHub Enterprise only. Types RELEASED and PRERELEASED work with GitHub only.
        ///
        ///
        ///
        ///
        /// * ACTOR_ACCOUNT_ID
        ///
        /// * A webhook event triggers a build when a GitHub, GitHub Enterprise, or Bitbucket account ID matches the regular expression pattern.
        ///
        ///
        ///
        ///
        /// * HEAD_REF
        ///
        /// * A webhook event triggers a build when the head reference matches the regular expression pattern. For example, refs/heads/branch-name and refs/tags/tag-name. Works with GitHub and GitHub Enterprise push, GitHub and GitHub Enterprise pull request, Bitbucket push, and Bitbucket pull request events.
        ///
        ///
        ///
        ///
        /// * BASE_REF
        ///
        /// * A webhook event triggers a build when the base reference matches the regular expression pattern. For example, refs/heads/branch-name. Works with pull request events only.
        ///
        ///
        ///
        ///
        /// * FILE_PATH
        ///
        /// * A webhook triggers a build when the path of a changed file matches the regular expression pattern. Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events.
        ///
        ///
        ///
        ///
        /// * COMMIT_MESSAGE
        ///
        /// * A webhook triggers a build when the head commit message matches the regular expression pattern. Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events.
        ///
        ///
        ///
        ///
        /// * TAG_NAME
        ///
        /// * A webhook triggers a build when the tag name of the release matches the regular expression pattern. Works with RELEASED and PRERELEASED events only.
        ///
        ///
        ///
        ///
        /// * RELEASE_NAME
        ///
        /// * A webhook triggers a build when the release name matches the regular expression pattern. Works with RELEASED and PRERELEASED events only.
        ///
        ///
        ///
        ///
        /// * REPOSITORY_NAME
        ///
        /// * A webhook triggers a build when the repository name matches the regular expression pattern. Works with GitHub global or organization webhooks only.
        ///
        ///
        ///
        ///
        /// * WORKFLOW_NAME
        ///
        /// * A webhook triggers a build when the workflow name matches the regular expression pattern. Works with WORKFLOW_JOB_QUEUED events only.
        /// This member is required.
        public var type: CodeBuildClientTypes.WebhookFilterType?

        public init(
            excludeMatchedPattern: Swift.Bool? = nil,
            pattern: Swift.String? = nil,
            type: CodeBuildClientTypes.WebhookFilterType? = nil
        )
        {
            self.excludeMatchedPattern = excludeMatchedPattern
            self.pattern = pattern
            self.type = type
        }
    }
}

extension CodeBuildClientTypes {

    public enum WebhookScopeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case githubGlobal
        case githubOrganization
        case gitlabGroup
        case sdkUnknown(Swift.String)

        public static var allCases: [WebhookScopeType] {
            return [
                .githubGlobal,
                .githubOrganization,
                .gitlabGroup
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .githubGlobal: return "GITHUB_GLOBAL"
            case .githubOrganization: return "GITHUB_ORGANIZATION"
            case .gitlabGroup: return "GITLAB_GROUP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Contains configuration information about the scope for a webhook.
    public struct ScopeConfiguration: Swift.Sendable {
        /// The domain of the GitHub Enterprise organization or the GitLab Self Managed group. Note that this parameter is only required if your project's source type is GITHUB_ENTERPRISE or GITLAB_SELF_MANAGED.
        public var domain: Swift.String?
        /// The name of either the group, enterprise, or organization that will send webhook events to CodeBuild, depending on the type of webhook.
        /// This member is required.
        public var name: Swift.String?
        /// The type of scope for a GitHub or GitLab webhook.
        /// This member is required.
        public var scope: CodeBuildClientTypes.WebhookScopeType?

        public init(
            domain: Swift.String? = nil,
            name: Swift.String? = nil,
            scope: CodeBuildClientTypes.WebhookScopeType? = nil
        )
        {
            self.domain = domain
            self.name = name
            self.scope = scope
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about a webhook that connects repository events to a build project in CodeBuild.
    public struct Webhook: Swift.Sendable {
        /// A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If branchFilter is empty, then all branches are built. It is recommended that you use filterGroups instead of branchFilter.
        public var branchFilter: Swift.String?
        /// Specifies the type of build this webhook will trigger.
        public var buildType: CodeBuildClientTypes.WebhookBuildType?
        /// An array of arrays of WebhookFilter objects used to determine which webhooks are triggered. At least one WebhookFilter in the array must specify EVENT as its type. For a build to be triggered, at least one filter group in the filterGroups array must pass. For a filter group to pass, each of its filters must pass.
        public var filterGroups: [[CodeBuildClientTypes.WebhookFilter]]?
        /// A timestamp that indicates the last time a repository's secret token was modified.
        public var lastModifiedSecret: Foundation.Date?
        /// If manualCreation is true, CodeBuild doesn't create a webhook in GitHub and instead returns payloadUrl and secret values for the webhook. The payloadUrl and secret values in the output can be used to manually create a webhook within GitHub. manualCreation is only available for GitHub webhooks.
        public var manualCreation: Swift.Bool?
        /// The CodeBuild endpoint where webhook events are sent.
        public var payloadUrl: Swift.String?
        /// The scope configuration for global or organization webhooks. Global or organization webhooks are only available for GitHub and Github Enterprise webhooks.
        public var scopeConfiguration: CodeBuildClientTypes.ScopeConfiguration?
        /// The secret token of the associated repository. A Bitbucket webhook does not support secret.
        public var secret: Swift.String?
        /// The URL to the webhook.
        public var url: Swift.String?

        public init(
            branchFilter: Swift.String? = nil,
            buildType: CodeBuildClientTypes.WebhookBuildType? = nil,
            filterGroups: [[CodeBuildClientTypes.WebhookFilter]]? = nil,
            lastModifiedSecret: Foundation.Date? = nil,
            manualCreation: Swift.Bool? = nil,
            payloadUrl: Swift.String? = nil,
            scopeConfiguration: CodeBuildClientTypes.ScopeConfiguration? = nil,
            secret: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.branchFilter = branchFilter
            self.buildType = buildType
            self.filterGroups = filterGroups
            self.lastModifiedSecret = lastModifiedSecret
            self.manualCreation = manualCreation
            self.payloadUrl = payloadUrl
            self.scopeConfiguration = scopeConfiguration
            self.secret = secret
            self.url = url
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about a build project.
    public struct Project: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the build project.
        public var arn: Swift.String?
        /// Information about the build output artifacts for the build project.
        public var artifacts: CodeBuildClientTypes.ProjectArtifacts?
        /// The maximum number of additional automatic retries after a failed build. For example, if the auto-retry limit is set to 2, CodeBuild will call the RetryBuild API to automatically retry your build for up to 2 additional times.
        public var autoRetryLimit: Swift.Int?
        /// Information about the build badge for the build project.
        public var badge: CodeBuildClientTypes.ProjectBadge?
        /// A [ProjectBuildBatchConfig] object that defines the batch build options for the project.
        public var buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig?
        /// Information about the cache for the build project.
        public var cache: CodeBuildClientTypes.ProjectCache?
        /// The maximum number of concurrent builds that are allowed for this project. New builds are only started if the current number of builds is less than or equal to this limit. If the current build count meets this limit, new builds are throttled and are not run.
        public var concurrentBuildLimit: Swift.Int?
        /// When the build project was created, expressed in Unix time format.
        public var created: Foundation.Date?
        /// A description that makes the build project easy to identify.
        public var description: Swift.String?
        /// The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts. You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/). If you don't specify a value, CodeBuild uses the managed CMK for Amazon Simple Storage Service (Amazon S3).
        public var encryptionKey: Swift.String?
        /// Information about the build environment for this build project.
        public var environment: CodeBuildClientTypes.ProjectEnvironment?
        /// An array of ProjectFileSystemLocation objects for a CodeBuild build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System.
        public var fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]?
        /// When the build project's settings were last modified, expressed in Unix time format.
        public var lastModified: Foundation.Date?
        /// Information about logs for the build project. A project can create logs in CloudWatch Logs, an S3 bucket, or both.
        public var logsConfig: CodeBuildClientTypes.LogsConfig?
        /// The name of the build project.
        public var name: Swift.String?
        /// Specifies the visibility of the project's builds. Possible values are: PUBLIC_READ The project builds are visible to the public. PRIVATE The project builds are not visible to the public.
        public var projectVisibility: CodeBuildClientTypes.ProjectVisibilityType?
        /// Contains the project identifier used with the public build APIs.
        public var publicProjectAlias: Swift.String?
        /// The number of minutes a build is allowed to be queued before it times out.
        public var queuedTimeoutInMinutes: Swift.Int?
        /// The ARN of the IAM role that enables CodeBuild to access the CloudWatch Logs and Amazon S3 artifacts for the project's builds.
        public var resourceAccessRole: Swift.String?
        /// An array of ProjectArtifacts objects.
        public var secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]?
        /// An array of ProjectSourceVersion objects. If secondarySourceVersions is specified at the build level, then they take over these secondarySourceVersions (at the project level).
        public var secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]?
        /// An array of ProjectSource objects.
        public var secondarySources: [CodeBuildClientTypes.ProjectSource]?
        /// The ARN of the IAM role that enables CodeBuild to interact with dependent Amazon Web Services services on behalf of the Amazon Web Services account.
        public var serviceRole: Swift.String?
        /// Information about the build input source code for this build project.
        public var source: CodeBuildClientTypes.ProjectSource?
        /// A version of the build input to be built for this project. If not specified, the latest version is used. If specified, it must be one of:
        ///
        /// * For CodeCommit: the commit ID, branch, or Git tag to use.
        ///
        /// * For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
        ///
        /// * For GitLab: the commit ID, branch, or Git tag to use.
        ///
        /// * For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
        ///
        /// * For Amazon S3: the version ID of the object that represents the build input ZIP file to use.
        ///
        ///
        /// If sourceVersion is specified at the build level, then that version takes precedence over this sourceVersion (at the project level). For more information, see [Source Version Sample with CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html) in the CodeBuild User Guide.
        public var sourceVersion: Swift.String?
        /// A list of tag key and value pairs associated with this build project. These tags are available for use by Amazon Web Services services that support CodeBuild build project tags.
        public var tags: [CodeBuildClientTypes.Tag]?
        /// How long, in minutes, from 5 to 2160 (36 hours), for CodeBuild to wait before timing out any related build that did not get marked as completed. The default is 60 minutes.
        public var timeoutInMinutes: Swift.Int?
        /// Information about the VPC configuration that CodeBuild accesses.
        public var vpcConfig: CodeBuildClientTypes.VpcConfig?
        /// Information about a webhook that connects repository events to a build project in CodeBuild.
        public var webhook: CodeBuildClientTypes.Webhook?

        public init(
            arn: Swift.String? = nil,
            artifacts: CodeBuildClientTypes.ProjectArtifacts? = nil,
            autoRetryLimit: Swift.Int? = nil,
            badge: CodeBuildClientTypes.ProjectBadge? = nil,
            buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig? = nil,
            cache: CodeBuildClientTypes.ProjectCache? = nil,
            concurrentBuildLimit: Swift.Int? = nil,
            created: Foundation.Date? = nil,
            description: Swift.String? = nil,
            encryptionKey: Swift.String? = nil,
            environment: CodeBuildClientTypes.ProjectEnvironment? = nil,
            fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]? = nil,
            lastModified: Foundation.Date? = nil,
            logsConfig: CodeBuildClientTypes.LogsConfig? = nil,
            name: Swift.String? = nil,
            projectVisibility: CodeBuildClientTypes.ProjectVisibilityType? = nil,
            publicProjectAlias: Swift.String? = nil,
            queuedTimeoutInMinutes: Swift.Int? = nil,
            resourceAccessRole: Swift.String? = nil,
            secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]? = nil,
            secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
            secondarySources: [CodeBuildClientTypes.ProjectSource]? = nil,
            serviceRole: Swift.String? = nil,
            source: CodeBuildClientTypes.ProjectSource? = nil,
            sourceVersion: Swift.String? = nil,
            tags: [CodeBuildClientTypes.Tag]? = nil,
            timeoutInMinutes: Swift.Int? = nil,
            vpcConfig: CodeBuildClientTypes.VpcConfig? = nil,
            webhook: CodeBuildClientTypes.Webhook? = nil
        )
        {
            self.arn = arn
            self.artifacts = artifacts
            self.autoRetryLimit = autoRetryLimit
            self.badge = badge
            self.buildBatchConfig = buildBatchConfig
            self.cache = cache
            self.concurrentBuildLimit = concurrentBuildLimit
            self.created = created
            self.description = description
            self.encryptionKey = encryptionKey
            self.environment = environment
            self.fileSystemLocations = fileSystemLocations
            self.lastModified = lastModified
            self.logsConfig = logsConfig
            self.name = name
            self.projectVisibility = projectVisibility
            self.publicProjectAlias = publicProjectAlias
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.resourceAccessRole = resourceAccessRole
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySourceVersions = secondarySourceVersions
            self.secondarySources = secondarySources
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.tags = tags
            self.timeoutInMinutes = timeoutInMinutes
            self.vpcConfig = vpcConfig
            self.webhook = webhook
        }
    }
}

public struct BatchGetProjectsOutput: Swift.Sendable {
    /// Information about the requested build projects.
    public var projects: [CodeBuildClientTypes.Project]?
    /// The names of build projects for which information could not be found.
    public var projectsNotFound: [Swift.String]?

    public init(
        projects: [CodeBuildClientTypes.Project]? = nil,
        projectsNotFound: [Swift.String]? = nil
    )
    {
        self.projects = projects
        self.projectsNotFound = projectsNotFound
    }
}

public struct BatchGetReportGroupsInput: Swift.Sendable {
    /// An array of report group ARNs that identify the report groups to return.
    /// This member is required.
    public var reportGroupArns: [Swift.String]?

    public init(
        reportGroupArns: [Swift.String]? = nil
    )
    {
        self.reportGroupArns = reportGroupArns
    }
}

extension CodeBuildClientTypes {

    public enum ReportExportConfigType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noExport
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportExportConfigType] {
            return [
                .noExport,
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noExport: return "NO_EXPORT"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum ReportPackagingType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case zip
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportPackagingType] {
            return [
                .none,
                .zip
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .zip: return "ZIP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the S3 bucket where the raw data of a report are exported.
    public struct S3ReportExportConfig: Swift.Sendable {
        /// The name of the S3 bucket where the raw data of a report are exported.
        public var bucket: Swift.String?
        /// The Amazon Web Services account identifier of the owner of the Amazon S3 bucket. This allows report data to be exported to an Amazon S3 bucket that is owned by an account other than the account running the build.
        public var bucketOwner: Swift.String?
        /// A boolean value that specifies if the results of a report are encrypted.
        public var encryptionDisabled: Swift.Bool?
        /// The encryption key for the report's encrypted raw data.
        public var encryptionKey: Swift.String?
        /// The type of build output artifact to create. Valid values include:
        ///
        /// * NONE: CodeBuild creates the raw data in the output bucket. This is the default if packaging is not specified.
        ///
        /// * ZIP: CodeBuild creates a ZIP file with the raw data in the output bucket.
        public var packaging: CodeBuildClientTypes.ReportPackagingType?
        /// The path to the exported report's raw data results.
        public var path: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            bucketOwner: Swift.String? = nil,
            encryptionDisabled: Swift.Bool? = nil,
            encryptionKey: Swift.String? = nil,
            packaging: CodeBuildClientTypes.ReportPackagingType? = nil,
            path: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.bucketOwner = bucketOwner
            self.encryptionDisabled = encryptionDisabled
            self.encryptionKey = encryptionKey
            self.packaging = packaging
            self.path = path
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the location where the run of a report is exported.
    public struct ReportExportConfig: Swift.Sendable {
        /// The export configuration type. Valid values are:
        ///
        /// * S3: The report results are exported to an S3 bucket.
        ///
        /// * NO_EXPORT: The report results are not exported.
        public var exportConfigType: CodeBuildClientTypes.ReportExportConfigType?
        /// A S3ReportExportConfig object that contains information about the S3 bucket where the run of a report is exported.
        public var s3Destination: CodeBuildClientTypes.S3ReportExportConfig?

        public init(
            exportConfigType: CodeBuildClientTypes.ReportExportConfigType? = nil,
            s3Destination: CodeBuildClientTypes.S3ReportExportConfig? = nil
        )
        {
            self.exportConfigType = exportConfigType
            self.s3Destination = s3Destination
        }
    }
}

extension CodeBuildClientTypes {

    public enum ReportGroupStatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportGroupStatusType] {
            return [
                .active,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum ReportType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codeCoverage
        case test
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportType] {
            return [
                .codeCoverage,
                .test
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codeCoverage: return "CODE_COVERAGE"
            case .test: return "TEST"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// A series of reports. Each report contains information about the results from running a series of test cases. You specify the test cases for a report group in the buildspec for a build project using one or more paths to the test case files.
    public struct ReportGroup: Swift.Sendable {
        /// The ARN of the ReportGroup.
        public var arn: Swift.String?
        /// The date and time this ReportGroup was created.
        public var created: Foundation.Date?
        /// Information about the destination where the raw data of this ReportGroup is exported.
        public var exportConfig: CodeBuildClientTypes.ReportExportConfig?
        /// The date and time this ReportGroup was last modified.
        public var lastModified: Foundation.Date?
        /// The name of the ReportGroup.
        public var name: Swift.String?
        /// The status of the report group. This property is read-only. This can be one of the following values: ACTIVE The report group is active. DELETING The report group is in the process of being deleted.
        public var status: CodeBuildClientTypes.ReportGroupStatusType?
        /// A list of tag key and value pairs associated with this report group. These tags are available for use by Amazon Web Services services that support CodeBuild report group tags.
        public var tags: [CodeBuildClientTypes.Tag]?
        /// The type of the ReportGroup. This can be one of the following values: CODE_COVERAGE The report group contains code coverage reports. TEST The report group contains test reports.
        public var type: CodeBuildClientTypes.ReportType?

        public init(
            arn: Swift.String? = nil,
            created: Foundation.Date? = nil,
            exportConfig: CodeBuildClientTypes.ReportExportConfig? = nil,
            lastModified: Foundation.Date? = nil,
            name: Swift.String? = nil,
            status: CodeBuildClientTypes.ReportGroupStatusType? = nil,
            tags: [CodeBuildClientTypes.Tag]? = nil,
            type: CodeBuildClientTypes.ReportType? = nil
        )
        {
            self.arn = arn
            self.created = created
            self.exportConfig = exportConfig
            self.lastModified = lastModified
            self.name = name
            self.status = status
            self.tags = tags
            self.type = type
        }
    }
}

public struct BatchGetReportGroupsOutput: Swift.Sendable {
    /// The array of report groups returned by BatchGetReportGroups.
    public var reportGroups: [CodeBuildClientTypes.ReportGroup]?
    /// An array of ARNs passed to BatchGetReportGroups that are not associated with a ReportGroup.
    public var reportGroupsNotFound: [Swift.String]?

    public init(
        reportGroups: [CodeBuildClientTypes.ReportGroup]? = nil,
        reportGroupsNotFound: [Swift.String]? = nil
    )
    {
        self.reportGroups = reportGroups
        self.reportGroupsNotFound = reportGroupsNotFound
    }
}

public struct BatchGetReportsInput: Swift.Sendable {
    /// An array of ARNs that identify the Report objects to return.
    /// This member is required.
    public var reportArns: [Swift.String]?

    public init(
        reportArns: [Swift.String]? = nil
    )
    {
        self.reportArns = reportArns
    }
}

extension CodeBuildClientTypes {

    /// Contains a summary of a code coverage report. Line coverage measures how many statements your tests cover. A statement is a single instruction, not including comments, conditionals, etc. Branch coverage determines if your tests cover every possible branch of a control structure, such as an if or case statement.
    public struct CodeCoverageReportSummary: Swift.Sendable {
        /// The percentage of branches that are covered by your tests.
        public var branchCoveragePercentage: Swift.Double?
        /// The number of conditional branches that are covered by your tests.
        public var branchesCovered: Swift.Int?
        /// The number of conditional branches that are not covered by your tests.
        public var branchesMissed: Swift.Int?
        /// The percentage of lines that are covered by your tests.
        public var lineCoveragePercentage: Swift.Double?
        /// The number of lines that are covered by your tests.
        public var linesCovered: Swift.Int?
        /// The number of lines that are not covered by your tests.
        public var linesMissed: Swift.Int?

        public init(
            branchCoveragePercentage: Swift.Double? = nil,
            branchesCovered: Swift.Int? = nil,
            branchesMissed: Swift.Int? = nil,
            lineCoveragePercentage: Swift.Double? = nil,
            linesCovered: Swift.Int? = nil,
            linesMissed: Swift.Int? = nil
        )
        {
            self.branchCoveragePercentage = branchCoveragePercentage
            self.branchesCovered = branchesCovered
            self.branchesMissed = branchesMissed
            self.lineCoveragePercentage = lineCoveragePercentage
            self.linesCovered = linesCovered
            self.linesMissed = linesMissed
        }
    }
}

extension CodeBuildClientTypes {

    public enum ReportStatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleting
        case failed
        case generating
        case incomplete
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportStatusType] {
            return [
                .deleting,
                .failed,
                .generating,
                .incomplete,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .generating: return "GENERATING"
            case .incomplete: return "INCOMPLETE"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about a test report.
    public struct TestReportSummary: Swift.Sendable {
        /// The number of nanoseconds it took to run all of the test cases in this report.
        /// This member is required.
        public var durationInNanoSeconds: Swift.Int?
        /// A map that contains the number of each type of status returned by the test results in this TestReportSummary.
        /// This member is required.
        public var statusCounts: [Swift.String: Swift.Int]?
        /// The number of test cases in this TestReportSummary. The total includes truncated test cases.
        /// This member is required.
        public var total: Swift.Int?

        public init(
            durationInNanoSeconds: Swift.Int? = nil,
            statusCounts: [Swift.String: Swift.Int]? = nil,
            total: Swift.Int? = nil
        )
        {
            self.durationInNanoSeconds = durationInNanoSeconds
            self.statusCounts = statusCounts
            self.total = total
        }
    }
}

extension CodeBuildClientTypes {

    /// Information about the results from running a series of test cases during the run of a build project. The test cases are specified in the buildspec for the build project using one or more paths to the test case files. You can specify any type of tests you want, such as unit tests, integration tests, and functional tests.
    public struct Report: Swift.Sendable {
        /// The ARN of the report run.
        public var arn: Swift.String?
        /// A CodeCoverageReportSummary object that contains a code coverage summary for this report.
        public var codeCoverageSummary: CodeBuildClientTypes.CodeCoverageReportSummary?
        /// The date and time this report run occurred.
        public var created: Foundation.Date?
        /// The ARN of the build run that generated this report.
        public var executionId: Swift.String?
        /// The date and time a report expires. A report expires 30 days after it is created. An expired report is not available to view in CodeBuild.
        public var expired: Foundation.Date?
        /// Information about where the raw data used to generate this report was exported.
        public var exportConfig: CodeBuildClientTypes.ReportExportConfig?
        /// The name of the report that was run.
        public var name: Swift.String?
        /// The ARN of the report group associated with this report.
        public var reportGroupArn: Swift.String?
        /// The status of this report.
        public var status: CodeBuildClientTypes.ReportStatusType?
        /// A TestReportSummary object that contains information about this test report.
        public var testSummary: CodeBuildClientTypes.TestReportSummary?
        /// A boolean that specifies if this report run is truncated. The list of test cases is truncated after the maximum number of test cases is reached.
        public var truncated: Swift.Bool?
        /// The type of the report that was run. CODE_COVERAGE A code coverage report. TEST A test report.
        public var type: CodeBuildClientTypes.ReportType?

        public init(
            arn: Swift.String? = nil,
            codeCoverageSummary: CodeBuildClientTypes.CodeCoverageReportSummary? = nil,
            created: Foundation.Date? = nil,
            executionId: Swift.String? = nil,
            expired: Foundation.Date? = nil,
            exportConfig: CodeBuildClientTypes.ReportExportConfig? = nil,
            name: Swift.String? = nil,
            reportGroupArn: Swift.String? = nil,
            status: CodeBuildClientTypes.ReportStatusType? = nil,
            testSummary: CodeBuildClientTypes.TestReportSummary? = nil,
            truncated: Swift.Bool? = nil,
            type: CodeBuildClientTypes.ReportType? = nil
        )
        {
            self.arn = arn
            self.codeCoverageSummary = codeCoverageSummary
            self.created = created
            self.executionId = executionId
            self.expired = expired
            self.exportConfig = exportConfig
            self.name = name
            self.reportGroupArn = reportGroupArn
            self.status = status
            self.testSummary = testSummary
            self.truncated = truncated
            self.type = type
        }
    }
}

public struct BatchGetReportsOutput: Swift.Sendable {
    /// The array of Report objects returned by BatchGetReports.
    public var reports: [CodeBuildClientTypes.Report]?
    /// An array of ARNs passed to BatchGetReportGroups that are not associated with a Report.
    public var reportsNotFound: [Swift.String]?

    public init(
        reports: [CodeBuildClientTypes.Report]? = nil,
        reportsNotFound: [Swift.String]? = nil
    )
    {
        self.reports = reports
        self.reportsNotFound = reportsNotFound
    }
}

extension CodeBuildClientTypes {

    /// Specifies filters when retrieving batch builds.
    public struct BuildBatchFilter: Swift.Sendable {
        /// The status of the batch builds to retrieve. Only batch builds that have this status will be retrieved.
        public var status: CodeBuildClientTypes.StatusType?

        public init(
            status: CodeBuildClientTypes.StatusType? = nil
        )
        {
            self.status = status
        }
    }
}

/// The specified Amazon Web Services resource cannot be created, because an Amazon Web Services resource with the same settings already exists.
public struct ResourceAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodeBuildClientTypes {

    /// The scaling configuration input of a compute fleet.
    public struct ScalingConfigurationInput: Swift.Sendable {
        /// The maximum number of instances in the ﬂeet when auto-scaling.
        public var maxCapacity: Swift.Int?
        /// The scaling type for a compute fleet.
        public var scalingType: CodeBuildClientTypes.FleetScalingType?
        /// A list of TargetTrackingScalingConfiguration objects.
        public var targetTrackingScalingConfigs: [CodeBuildClientTypes.TargetTrackingScalingConfiguration]?

        public init(
            maxCapacity: Swift.Int? = nil,
            scalingType: CodeBuildClientTypes.FleetScalingType? = nil,
            targetTrackingScalingConfigs: [CodeBuildClientTypes.TargetTrackingScalingConfiguration]? = nil
        )
        {
            self.maxCapacity = maxCapacity
            self.scalingType = scalingType
            self.targetTrackingScalingConfigs = targetTrackingScalingConfigs
        }
    }
}

public struct CreateFleetInput: Swift.Sendable {
    /// The initial number of machines allocated to the ﬂeet, which deﬁnes the number of builds that can run in parallel.
    /// This member is required.
    public var baseCapacity: Swift.Int?
    /// Information about the compute resources the compute fleet uses. Available values include:
    ///
    /// * BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds.
    ///
    /// * BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds.
    ///
    /// * BUILD_GENERAL1_LARGE: Use up to 16 GB memory and 8 vCPUs for builds, depending on your environment type.
    ///
    /// * BUILD_GENERAL1_XLARGE: Use up to 70 GB memory and 36 vCPUs for builds, depending on your environment type.
    ///
    /// * BUILD_GENERAL1_2XLARGE: Use up to 145 GB memory, 72 vCPUs, and 824 GB of SSD storage for builds. This compute type supports Docker images up to 100 GB uncompressed.
    ///
    ///
    /// If you use BUILD_GENERAL1_SMALL:
    ///
    /// * For environment type LINUX_CONTAINER, you can use up to 3 GB memory and 2 vCPUs for builds.
    ///
    /// * For environment type LINUX_GPU_CONTAINER, you can use up to 16 GB memory, 4 vCPUs, and 1 NVIDIA A10G Tensor Core GPU for builds.
    ///
    /// * For environment type ARM_CONTAINER, you can use up to 4 GB memory and 2 vCPUs on ARM-based processors for builds.
    ///
    ///
    /// If you use BUILD_GENERAL1_LARGE:
    ///
    /// * For environment type LINUX_CONTAINER, you can use up to 15 GB memory and 8 vCPUs for builds.
    ///
    /// * For environment type LINUX_GPU_CONTAINER, you can use up to 255 GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.
    ///
    /// * For environment type ARM_CONTAINER, you can use up to 16 GB memory and 8 vCPUs on ARM-based processors for builds.
    ///
    ///
    /// For more information, see [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the CodeBuild User Guide.
    /// This member is required.
    public var computeType: CodeBuildClientTypes.ComputeType?
    /// The environment type of the compute fleet.
    ///
    /// * The environment type ARM_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), Asia Pacific (Mumbai), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), EU (Frankfurt), and South America (São Paulo).
    ///
    /// * The environment type LINUX_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), South America (São Paulo), and Asia Pacific (Mumbai).
    ///
    /// * The environment type LINUX_GPU_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), and Asia Pacific (Sydney).
    ///
    /// * The environment type MAC_ARM is available for Medium fleets only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Sydney), and EU (Frankfurt)
    ///
    /// * The environment type MAC_ARM is available for Large fleets only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), and Asia Pacific (Sydney).
    ///
    /// * The environment type WINDOWS_SERVER_2019_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Sydney), Asia Pacific (Tokyo), Asia Pacific (Mumbai) and EU (Ireland).
    ///
    /// * The environment type WINDOWS_SERVER_2022_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Sydney), Asia Pacific (Singapore), Asia Pacific (Tokyo), South America (São Paulo) and Asia Pacific (Mumbai).
    ///
    ///
    /// For more information, see [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the CodeBuild user guide.
    /// This member is required.
    public var environmentType: CodeBuildClientTypes.EnvironmentType?
    /// The service role associated with the compute fleet. For more information, see [ Allow a user to add a permission policy for a fleet service role](https://docs.aws.amazon.com/codebuild/latest/userguide/auth-and-access-control-iam-identity-based-access-control.html#customer-managed-policies-example-permission-policy-fleet-service-role.html) in the CodeBuild User Guide.
    public var fleetServiceRole: Swift.String?
    /// The Amazon Machine Image (AMI) of the compute fleet.
    public var imageId: Swift.String?
    /// The name of the compute fleet.
    /// This member is required.
    public var name: Swift.String?
    /// The compute fleet overflow behavior.
    ///
    /// * For overflow behavior QUEUE, your overflow builds need to wait on the existing fleet instance to become available.
    ///
    /// * For overflow behavior ON_DEMAND, your overflow builds run on CodeBuild on-demand. If you choose to set your overflow behavior to on-demand while creating a VPC-connected fleet, make sure that you add the required VPC permissions to your project service role. For more information, see [Example policy statement to allow CodeBuild access to Amazon Web Services services required to create a VPC network interface](https://docs.aws.amazon.com/codebuild/latest/userguide/auth-and-access-control-iam-identity-based-access-control.html#customer-managed-policies-example-create-vpc-network-interface).
    public var overflowBehavior: CodeBuildClientTypes.FleetOverflowBehavior?
    /// The proxy configuration of the compute fleet.
    public var proxyConfiguration: CodeBuildClientTypes.ProxyConfiguration?
    /// The scaling configuration of the compute fleet.
    public var scalingConfiguration: CodeBuildClientTypes.ScalingConfigurationInput?
    /// A list of tag key and value pairs associated with this compute fleet. These tags are available for use by Amazon Web Services services that support CodeBuild build project tags.
    public var tags: [CodeBuildClientTypes.Tag]?
    /// Information about the VPC configuration that CodeBuild accesses.
    public var vpcConfig: CodeBuildClientTypes.VpcConfig?

    public init(
        baseCapacity: Swift.Int? = nil,
        computeType: CodeBuildClientTypes.ComputeType? = nil,
        environmentType: CodeBuildClientTypes.EnvironmentType? = nil,
        fleetServiceRole: Swift.String? = nil,
        imageId: Swift.String? = nil,
        name: Swift.String? = nil,
        overflowBehavior: CodeBuildClientTypes.FleetOverflowBehavior? = nil,
        proxyConfiguration: CodeBuildClientTypes.ProxyConfiguration? = nil,
        scalingConfiguration: CodeBuildClientTypes.ScalingConfigurationInput? = nil,
        tags: [CodeBuildClientTypes.Tag]? = nil,
        vpcConfig: CodeBuildClientTypes.VpcConfig? = nil
    )
    {
        self.baseCapacity = baseCapacity
        self.computeType = computeType
        self.environmentType = environmentType
        self.fleetServiceRole = fleetServiceRole
        self.imageId = imageId
        self.name = name
        self.overflowBehavior = overflowBehavior
        self.proxyConfiguration = proxyConfiguration
        self.scalingConfiguration = scalingConfiguration
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}

public struct CreateFleetOutput: Swift.Sendable {
    /// Information about the compute fleet
    public var fleet: CodeBuildClientTypes.Fleet?

    public init(
        fleet: CodeBuildClientTypes.Fleet? = nil
    )
    {
        self.fleet = fleet
    }
}

public struct CreateProjectInput: Swift.Sendable {
    /// Information about the build output artifacts for the build project.
    /// This member is required.
    public var artifacts: CodeBuildClientTypes.ProjectArtifacts?
    /// The maximum number of additional automatic retries after a failed build. For example, if the auto-retry limit is set to 2, CodeBuild will call the RetryBuild API to automatically retry your build for up to 2 additional times.
    public var autoRetryLimit: Swift.Int?
    /// Set this to true to generate a publicly accessible URL for your project's build badge.
    public var badgeEnabled: Swift.Bool?
    /// A [ProjectBuildBatchConfig] object that defines the batch build options for the project.
    public var buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig?
    /// Stores recently used information so that it can be quickly accessed at a later time.
    public var cache: CodeBuildClientTypes.ProjectCache?
    /// The maximum number of concurrent builds that are allowed for this project. New builds are only started if the current number of builds is less than or equal to this limit. If the current build count meets this limit, new builds are throttled and are not run.
    public var concurrentBuildLimit: Swift.Int?
    /// A description that makes the build project easy to identify.
    public var description: Swift.String?
    /// The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts. You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/).
    public var encryptionKey: Swift.String?
    /// Information about the build environment for the build project.
    /// This member is required.
    public var environment: CodeBuildClientTypes.ProjectEnvironment?
    /// An array of ProjectFileSystemLocation objects for a CodeBuild build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System.
    public var fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]?
    /// Information about logs for the build project. These can be logs in CloudWatch Logs, logs uploaded to a specified S3 bucket, or both.
    public var logsConfig: CodeBuildClientTypes.LogsConfig?
    /// The name of the build project.
    /// This member is required.
    public var name: Swift.String?
    /// The number of minutes a build is allowed to be queued before it times out.
    public var queuedTimeoutInMinutes: Swift.Int?
    /// An array of ProjectArtifacts objects.
    public var secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]?
    /// An array of ProjectSourceVersion objects. If secondarySourceVersions is specified at the build level, then they take precedence over these secondarySourceVersions (at the project level).
    public var secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]?
    /// An array of ProjectSource objects.
    public var secondarySources: [CodeBuildClientTypes.ProjectSource]?
    /// The ARN of the IAM role that enables CodeBuild to interact with dependent Amazon Web Services services on behalf of the Amazon Web Services account.
    /// This member is required.
    public var serviceRole: Swift.String?
    /// Information about the build input source code for the build project.
    /// This member is required.
    public var source: CodeBuildClientTypes.ProjectSource?
    /// A version of the build input to be built for this project. If not specified, the latest version is used. If specified, it must be one of:
    ///
    /// * For CodeCommit: the commit ID, branch, or Git tag to use.
    ///
    /// * For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
    ///
    /// * For GitLab: the commit ID, branch, or Git tag to use.
    ///
    /// * For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
    ///
    /// * For Amazon S3: the version ID of the object that represents the build input ZIP file to use.
    ///
    ///
    /// If sourceVersion is specified at the build level, then that version takes precedence over this sourceVersion (at the project level). For more information, see [Source Version Sample with CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html) in the CodeBuild User Guide.
    public var sourceVersion: Swift.String?
    /// A list of tag key and value pairs associated with this build project. These tags are available for use by Amazon Web Services services that support CodeBuild build project tags.
    public var tags: [CodeBuildClientTypes.Tag]?
    /// How long, in minutes, from 5 to 2160 (36 hours), for CodeBuild to wait before it times out any build that has not been marked as completed. The default is 60 minutes.
    public var timeoutInMinutes: Swift.Int?
    /// VpcConfig enables CodeBuild to access resources in an Amazon VPC. If you're using compute fleets during project creation, do not provide vpcConfig.
    public var vpcConfig: CodeBuildClientTypes.VpcConfig?

    public init(
        artifacts: CodeBuildClientTypes.ProjectArtifacts? = nil,
        autoRetryLimit: Swift.Int? = nil,
        badgeEnabled: Swift.Bool? = nil,
        buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig? = nil,
        cache: CodeBuildClientTypes.ProjectCache? = nil,
        concurrentBuildLimit: Swift.Int? = nil,
        description: Swift.String? = nil,
        encryptionKey: Swift.String? = nil,
        environment: CodeBuildClientTypes.ProjectEnvironment? = nil,
        fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]? = nil,
        logsConfig: CodeBuildClientTypes.LogsConfig? = nil,
        name: Swift.String? = nil,
        queuedTimeoutInMinutes: Swift.Int? = nil,
        secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]? = nil,
        secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
        secondarySources: [CodeBuildClientTypes.ProjectSource]? = nil,
        serviceRole: Swift.String? = nil,
        source: CodeBuildClientTypes.ProjectSource? = nil,
        sourceVersion: Swift.String? = nil,
        tags: [CodeBuildClientTypes.Tag]? = nil,
        timeoutInMinutes: Swift.Int? = nil,
        vpcConfig: CodeBuildClientTypes.VpcConfig? = nil
    )
    {
        self.artifacts = artifacts
        self.autoRetryLimit = autoRetryLimit
        self.badgeEnabled = badgeEnabled
        self.buildBatchConfig = buildBatchConfig
        self.cache = cache
        self.concurrentBuildLimit = concurrentBuildLimit
        self.description = description
        self.encryptionKey = encryptionKey
        self.environment = environment
        self.fileSystemLocations = fileSystemLocations
        self.logsConfig = logsConfig
        self.name = name
        self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
        self.secondaryArtifacts = secondaryArtifacts
        self.secondarySourceVersions = secondarySourceVersions
        self.secondarySources = secondarySources
        self.serviceRole = serviceRole
        self.source = source
        self.sourceVersion = sourceVersion
        self.tags = tags
        self.timeoutInMinutes = timeoutInMinutes
        self.vpcConfig = vpcConfig
    }
}

public struct CreateProjectOutput: Swift.Sendable {
    /// Information about the build project that was created.
    public var project: CodeBuildClientTypes.Project?

    public init(
        project: CodeBuildClientTypes.Project? = nil
    )
    {
        self.project = project
    }
}

public struct CreateReportGroupInput: Swift.Sendable {
    /// A ReportExportConfig object that contains information about where the report group test results are exported.
    /// This member is required.
    public var exportConfig: CodeBuildClientTypes.ReportExportConfig?
    /// The name of the report group.
    /// This member is required.
    public var name: Swift.String?
    /// A list of tag key and value pairs associated with this report group. These tags are available for use by Amazon Web Services services that support CodeBuild report group tags.
    public var tags: [CodeBuildClientTypes.Tag]?
    /// The type of report group.
    /// This member is required.
    public var type: CodeBuildClientTypes.ReportType?

    public init(
        exportConfig: CodeBuildClientTypes.ReportExportConfig? = nil,
        name: Swift.String? = nil,
        tags: [CodeBuildClientTypes.Tag]? = nil,
        type: CodeBuildClientTypes.ReportType? = nil
    )
    {
        self.exportConfig = exportConfig
        self.name = name
        self.tags = tags
        self.type = type
    }
}

public struct CreateReportGroupOutput: Swift.Sendable {
    /// Information about the report group that was created.
    public var reportGroup: CodeBuildClientTypes.ReportGroup?

    public init(
        reportGroup: CodeBuildClientTypes.ReportGroup? = nil
    )
    {
        self.reportGroup = reportGroup
    }
}

/// There was a problem with the underlying OAuth provider.
public struct OAuthProviderException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OAuthProviderException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified Amazon Web Services resource cannot be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateWebhookInput: Swift.Sendable {
    /// A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If branchFilter is empty, then all branches are built. It is recommended that you use filterGroups instead of branchFilter.
    public var branchFilter: Swift.String?
    /// Specifies the type of build this webhook will trigger.
    public var buildType: CodeBuildClientTypes.WebhookBuildType?
    /// An array of arrays of WebhookFilter objects used to determine which webhooks are triggered. At least one WebhookFilter in the array must specify EVENT as its type. For a build to be triggered, at least one filter group in the filterGroups array must pass. For a filter group to pass, each of its filters must pass.
    public var filterGroups: [[CodeBuildClientTypes.WebhookFilter]]?
    /// If manualCreation is true, CodeBuild doesn't create a webhook in GitHub and instead returns payloadUrl and secret values for the webhook. The payloadUrl and secret values in the output can be used to manually create a webhook within GitHub. manualCreation is only available for GitHub webhooks.
    public var manualCreation: Swift.Bool?
    /// The name of the CodeBuild project.
    /// This member is required.
    public var projectName: Swift.String?
    /// The scope configuration for global or organization webhooks. Global or organization webhooks are only available for GitHub and Github Enterprise webhooks.
    public var scopeConfiguration: CodeBuildClientTypes.ScopeConfiguration?

    public init(
        branchFilter: Swift.String? = nil,
        buildType: CodeBuildClientTypes.WebhookBuildType? = nil,
        filterGroups: [[CodeBuildClientTypes.WebhookFilter]]? = nil,
        manualCreation: Swift.Bool? = nil,
        projectName: Swift.String? = nil,
        scopeConfiguration: CodeBuildClientTypes.ScopeConfiguration? = nil
    )
    {
        self.branchFilter = branchFilter
        self.buildType = buildType
        self.filterGroups = filterGroups
        self.manualCreation = manualCreation
        self.projectName = projectName
        self.scopeConfiguration = scopeConfiguration
    }
}

public struct CreateWebhookOutput: Swift.Sendable {
    /// Information about a webhook that connects repository events to a build project in CodeBuild.
    public var webhook: CodeBuildClientTypes.Webhook?

    public init(
        webhook: CodeBuildClientTypes.Webhook? = nil
    )
    {
        self.webhook = webhook
    }
}

public struct DeleteBuildBatchInput: Swift.Sendable {
    /// The identifier of the batch build to delete.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeleteBuildBatchOutput: Swift.Sendable {
    /// An array of strings that contain the identifiers of the builds that were deleted.
    public var buildsDeleted: [Swift.String]?
    /// An array of BuildNotDeleted objects that specify the builds that could not be deleted.
    public var buildsNotDeleted: [CodeBuildClientTypes.BuildNotDeleted]?
    /// The status code.
    public var statusCode: Swift.String?

    public init(
        buildsDeleted: [Swift.String]? = nil,
        buildsNotDeleted: [CodeBuildClientTypes.BuildNotDeleted]? = nil,
        statusCode: Swift.String? = nil
    )
    {
        self.buildsDeleted = buildsDeleted
        self.buildsNotDeleted = buildsNotDeleted
        self.statusCode = statusCode
    }
}

public struct DeleteFleetInput: Swift.Sendable {
    /// The ARN of the compute fleet.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct DeleteFleetOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteProjectInput: Swift.Sendable {
    /// The name of the build project.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteProjectOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteReportInput: Swift.Sendable {
    /// The ARN of the report to delete.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct DeleteReportOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteReportGroupInput: Swift.Sendable {
    /// The ARN of the report group to delete.
    /// This member is required.
    public var arn: Swift.String?
    /// If true, deletes any reports that belong to a report group before deleting the report group. If false, you must delete any reports in the report group. Use [ListReportsForReportGroup](https://docs.aws.amazon.com/codebuild/latest/APIReference/API_ListReportsForReportGroup.html) to get the reports in a report group. Use [DeleteReport](https://docs.aws.amazon.com/codebuild/latest/APIReference/API_DeleteReport.html) to delete the reports. If you call DeleteReportGroup for a report group that contains one or more reports, an exception is thrown.
    public var deleteReports: Swift.Bool?

    public init(
        arn: Swift.String? = nil,
        deleteReports: Swift.Bool? = false
    )
    {
        self.arn = arn
        self.deleteReports = deleteReports
    }
}

public struct DeleteReportGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteResourcePolicyInput: Swift.Sendable {
    /// The ARN of the resource that is associated with the resource policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct DeleteResourcePolicyOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteSourceCredentialsInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the token.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct DeleteSourceCredentialsOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the token.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct DeleteWebhookInput: Swift.Sendable {
    /// The name of the CodeBuild project.
    /// This member is required.
    public var projectName: Swift.String?

    public init(
        projectName: Swift.String? = nil
    )
    {
        self.projectName = projectName
    }
}

public struct DeleteWebhookOutput: Swift.Sendable {

    public init() { }
}

extension CodeBuildClientTypes {

    public enum ReportCodeCoverageSortByType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case filePath
        case lineCoveragePercentage
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportCodeCoverageSortByType] {
            return [
                .filePath,
                .lineCoveragePercentage
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .filePath: return "FILE_PATH"
            case .lineCoveragePercentage: return "LINE_COVERAGE_PERCENTAGE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    public enum SortOrderType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrderType] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeCodeCoveragesInput: Swift.Sendable {
    /// The maximum line coverage percentage to report.
    public var maxLineCoveragePercentage: Swift.Double?
    /// The maximum number of results to return.
    public var maxResults: Swift.Int?
    /// The minimum line coverage percentage to report.
    public var minLineCoveragePercentage: Swift.Double?
    /// The nextToken value returned from a previous call to DescribeCodeCoverages. This specifies the next item to return. To return the beginning of the list, exclude this parameter.
    public var nextToken: Swift.String?
    /// The ARN of the report for which test cases are returned.
    /// This member is required.
    public var reportArn: Swift.String?
    /// Specifies how the results are sorted. Possible values are: FILE_PATH The results are sorted by file path. LINE_COVERAGE_PERCENTAGE The results are sorted by the percentage of lines that are covered.
    public var sortBy: CodeBuildClientTypes.ReportCodeCoverageSortByType?
    /// Specifies if the results are sorted in ascending or descending order.
    public var sortOrder: CodeBuildClientTypes.SortOrderType?

    public init(
        maxLineCoveragePercentage: Swift.Double? = nil,
        maxResults: Swift.Int? = nil,
        minLineCoveragePercentage: Swift.Double? = nil,
        nextToken: Swift.String? = nil,
        reportArn: Swift.String? = nil,
        sortBy: CodeBuildClientTypes.ReportCodeCoverageSortByType? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.maxLineCoveragePercentage = maxLineCoveragePercentage
        self.maxResults = maxResults
        self.minLineCoveragePercentage = minLineCoveragePercentage
        self.nextToken = nextToken
        self.reportArn = reportArn
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension CodeBuildClientTypes {

    /// Contains code coverage report information. Line coverage measures how many statements your tests cover. A statement is a single instruction, not including comments, conditionals, etc. Branch coverage determines if your tests cover every possible branch of a control structure, such as an if or case statement.
    public struct CodeCoverage: Swift.Sendable {
        /// The percentage of branches that are covered by your tests.
        public var branchCoveragePercentage: Swift.Double?
        /// The number of conditional branches that are covered by your tests.
        public var branchesCovered: Swift.Int?
        /// The number of conditional branches that are not covered by your tests.
        public var branchesMissed: Swift.Int?
        /// The date and time that the tests were run.
        public var expired: Foundation.Date?
        /// The path of the test report file.
        public var filePath: Swift.String?
        /// The identifier of the code coverage report.
        public var id: Swift.String?
        /// The percentage of lines that are covered by your tests.
        public var lineCoveragePercentage: Swift.Double?
        /// The number of lines that are covered by your tests.
        public var linesCovered: Swift.Int?
        /// The number of lines that are not covered by your tests.
        public var linesMissed: Swift.Int?
        /// The ARN of the report.
        public var reportARN: Swift.String?

        public init(
            branchCoveragePercentage: Swift.Double? = nil,
            branchesCovered: Swift.Int? = nil,
            branchesMissed: Swift.Int? = nil,
            expired: Foundation.Date? = nil,
            filePath: Swift.String? = nil,
            id: Swift.String? = nil,
            lineCoveragePercentage: Swift.Double? = nil,
            linesCovered: Swift.Int? = nil,
            linesMissed: Swift.Int? = nil,
            reportARN: Swift.String? = nil
        )
        {
            self.branchCoveragePercentage = branchCoveragePercentage
            self.branchesCovered = branchesCovered
            self.branchesMissed = branchesMissed
            self.expired = expired
            self.filePath = filePath
            self.id = id
            self.lineCoveragePercentage = lineCoveragePercentage
            self.linesCovered = linesCovered
            self.linesMissed = linesMissed
            self.reportARN = reportARN
        }
    }
}

public struct DescribeCodeCoveragesOutput: Swift.Sendable {
    /// An array of CodeCoverage objects that contain the results.
    public var codeCoverages: [CodeBuildClientTypes.CodeCoverage]?
    /// If there are more items to return, this contains a token that is passed to a subsequent call to DescribeCodeCoverages to retrieve the next set of items.
    public var nextToken: Swift.String?

    public init(
        codeCoverages: [CodeBuildClientTypes.CodeCoverage]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.codeCoverages = codeCoverages
        self.nextToken = nextToken
    }
}

extension CodeBuildClientTypes {

    /// A filter used to return specific types of test cases. In order to pass the filter, the report must meet all of the filter properties.
    public struct TestCaseFilter: Swift.Sendable {
        /// A keyword that is used to filter on the name or the prefix of the test cases. Only test cases where the keyword is a substring of the name or the prefix will be returned.
        public var keyword: Swift.String?
        /// The status used to filter test cases. A TestCaseFilter can have one status. Valid values are:
        ///
        /// * SUCCEEDED
        ///
        /// * FAILED
        ///
        /// * ERROR
        ///
        /// * SKIPPED
        ///
        /// * UNKNOWN
        public var status: Swift.String?

        public init(
            keyword: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.keyword = keyword
            self.status = status
        }
    }
}

public struct DescribeTestCasesInput: Swift.Sendable {
    /// A TestCaseFilter object used to filter the returned reports.
    public var filter: CodeBuildClientTypes.TestCaseFilter?
    /// The maximum number of paginated test cases returned per response. Use nextToken to iterate pages in the list of returned TestCase objects. The default value is 100.
    public var maxResults: Swift.Int?
    /// During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The ARN of the report for which test cases are returned.
    /// This member is required.
    public var reportArn: Swift.String?

    public init(
        filter: CodeBuildClientTypes.TestCaseFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        reportArn: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reportArn = reportArn
    }
}

extension CodeBuildClientTypes {

    /// Information about a test case created using a framework such as NUnit or Cucumber. A test case might be a unit test or a configuration test.
    public struct TestCase: Swift.Sendable {
        /// The number of nanoseconds it took to run this test case.
        public var durationInNanoSeconds: Swift.Int?
        /// The date and time a test case expires. A test case expires 30 days after it is created. An expired test case is not available to view in CodeBuild.
        public var expired: Foundation.Date?
        /// A message associated with a test case. For example, an error message or stack trace.
        public var message: Swift.String?
        /// The name of the test case.
        public var name: Swift.String?
        /// A string that is applied to a series of related test cases. CodeBuild generates the prefix. The prefix depends on the framework used to generate the tests.
        public var `prefix`: Swift.String?
        /// The ARN of the report to which the test case belongs.
        public var reportArn: Swift.String?
        /// The status returned by the test case after it was run. Valid statuses are SUCCEEDED, FAILED, ERROR, SKIPPED, and UNKNOWN.
        public var status: Swift.String?
        /// The path to the raw data file that contains the test result.
        public var testRawDataPath: Swift.String?

        public init(
            durationInNanoSeconds: Swift.Int? = nil,
            expired: Foundation.Date? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            reportArn: Swift.String? = nil,
            status: Swift.String? = nil,
            testRawDataPath: Swift.String? = nil
        )
        {
            self.durationInNanoSeconds = durationInNanoSeconds
            self.expired = expired
            self.message = message
            self.name = name
            self.`prefix` = `prefix`
            self.reportArn = reportArn
            self.status = status
            self.testRawDataPath = testRawDataPath
        }
    }
}

public struct DescribeTestCasesOutput: Swift.Sendable {
    /// During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The returned list of test cases.
    public var testCases: [CodeBuildClientTypes.TestCase]?

    public init(
        nextToken: Swift.String? = nil,
        testCases: [CodeBuildClientTypes.TestCase]? = nil
    )
    {
        self.nextToken = nextToken
        self.testCases = testCases
    }
}

extension CodeBuildClientTypes {

    public enum ReportGroupTrendFieldType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case branchesCovered
        case branchesMissed
        case branchCoverage
        case duration
        case linesCovered
        case linesMissed
        case lineCoverage
        case passRate
        case total
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportGroupTrendFieldType] {
            return [
                .branchesCovered,
                .branchesMissed,
                .branchCoverage,
                .duration,
                .linesCovered,
                .linesMissed,
                .lineCoverage,
                .passRate,
                .total
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .branchesCovered: return "BRANCHES_COVERED"
            case .branchesMissed: return "BRANCHES_MISSED"
            case .branchCoverage: return "BRANCH_COVERAGE"
            case .duration: return "DURATION"
            case .linesCovered: return "LINES_COVERED"
            case .linesMissed: return "LINES_MISSED"
            case .lineCoverage: return "LINE_COVERAGE"
            case .passRate: return "PASS_RATE"
            case .total: return "TOTAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetReportGroupTrendInput: Swift.Sendable {
    /// The number of reports to analyze. This operation always retrieves the most recent reports. If this parameter is omitted, the most recent 100 reports are analyzed.
    public var numOfReports: Swift.Int?
    /// The ARN of the report group that contains the reports to analyze.
    /// This member is required.
    public var reportGroupArn: Swift.String?
    /// The test report value to accumulate. This must be one of the following values: Test reports: DURATION Accumulate the test run times for the specified reports. PASS_RATE Accumulate the percentage of tests that passed for the specified test reports. TOTAL Accumulate the total number of tests for the specified test reports. Code coverage reports: BRANCH_COVERAGE Accumulate the branch coverage percentages for the specified test reports. BRANCHES_COVERED Accumulate the branches covered values for the specified test reports. BRANCHES_MISSED Accumulate the branches missed values for the specified test reports. LINE_COVERAGE Accumulate the line coverage percentages for the specified test reports. LINES_COVERED Accumulate the lines covered values for the specified test reports. LINES_MISSED Accumulate the lines not covered values for the specified test reports.
    /// This member is required.
    public var trendField: CodeBuildClientTypes.ReportGroupTrendFieldType?

    public init(
        numOfReports: Swift.Int? = nil,
        reportGroupArn: Swift.String? = nil,
        trendField: CodeBuildClientTypes.ReportGroupTrendFieldType? = nil
    )
    {
        self.numOfReports = numOfReports
        self.reportGroupArn = reportGroupArn
        self.trendField = trendField
    }
}

extension CodeBuildClientTypes {

    /// Contains the unmodified data for the report. For more information, see .
    public struct ReportWithRawData: Swift.Sendable {
        /// The value of the requested data field from the report.
        public var data: Swift.String?
        /// The ARN of the report.
        public var reportArn: Swift.String?

        public init(
            data: Swift.String? = nil,
            reportArn: Swift.String? = nil
        )
        {
            self.data = data
            self.reportArn = reportArn
        }
    }
}

extension CodeBuildClientTypes {

    /// Contains trend statistics for a set of reports. The actual values depend on the type of trend being collected. For more information, see .
    public struct ReportGroupTrendStats: Swift.Sendable {
        /// Contains the average of all values analyzed.
        public var average: Swift.String?
        /// Contains the maximum value analyzed.
        public var max: Swift.String?
        /// Contains the minimum value analyzed.
        public var min: Swift.String?

        public init(
            average: Swift.String? = nil,
            max: Swift.String? = nil,
            min: Swift.String? = nil
        )
        {
            self.average = average
            self.max = max
            self.min = min
        }
    }
}

public struct GetReportGroupTrendOutput: Swift.Sendable {
    /// An array that contains the raw data for each report.
    public var rawData: [CodeBuildClientTypes.ReportWithRawData]?
    /// Contains the accumulated trend data.
    public var stats: CodeBuildClientTypes.ReportGroupTrendStats?

    public init(
        rawData: [CodeBuildClientTypes.ReportWithRawData]? = nil,
        stats: CodeBuildClientTypes.ReportGroupTrendStats? = nil
    )
    {
        self.rawData = rawData
        self.stats = stats
    }
}

public struct GetResourcePolicyInput: Swift.Sendable {
    /// The ARN of the resource that is associated with the resource policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct GetResourcePolicyOutput: Swift.Sendable {
    /// The resource policy for the resource identified by the input ARN parameter.
    public var policy: Swift.String?

    public init(
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

extension CodeBuildClientTypes {

    public enum ServerType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bitbucket
        case github
        case githubEnterprise
        case gitlab
        case gitlabSelfManaged
        case sdkUnknown(Swift.String)

        public static var allCases: [ServerType] {
            return [
                .bitbucket,
                .github,
                .githubEnterprise,
                .gitlab,
                .gitlabSelfManaged
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bitbucket: return "BITBUCKET"
            case .github: return "GITHUB"
            case .githubEnterprise: return "GITHUB_ENTERPRISE"
            case .gitlab: return "GITLAB"
            case .gitlabSelfManaged: return "GITLAB_SELF_MANAGED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ImportSourceCredentialsInput: Swift.Sendable {
    /// The type of authentication used to connect to a GitHub, GitHub Enterprise, GitLab, GitLab Self Managed, or Bitbucket repository. An OAUTH connection is not supported by the API and must be created using the CodeBuild console.
    /// This member is required.
    public var authType: CodeBuildClientTypes.AuthType?
    /// The source provider used for this project.
    /// This member is required.
    public var serverType: CodeBuildClientTypes.ServerType?
    /// Set to false to prevent overwriting the repository source credentials. Set to true to overwrite the repository source credentials. The default value is true.
    public var shouldOverwrite: Swift.Bool?
    /// For GitHub or GitHub Enterprise, this is the personal access token. For Bitbucket, this is either the access token or the app password. For the authType CODECONNECTIONS, this is the connectionArn. For the authType SECRETS_MANAGER, this is the secretArn.
    /// This member is required.
    public var token: Swift.String?
    /// The Bitbucket username when the authType is BASIC_AUTH. This parameter is not valid for other types of source providers or connections.
    public var username: Swift.String?

    public init(
        authType: CodeBuildClientTypes.AuthType? = nil,
        serverType: CodeBuildClientTypes.ServerType? = nil,
        shouldOverwrite: Swift.Bool? = nil,
        token: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.authType = authType
        self.serverType = serverType
        self.shouldOverwrite = shouldOverwrite
        self.token = token
        self.username = username
    }
}

extension ImportSourceCredentialsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportSourceCredentialsInput(authType: \(Swift.String(describing: authType)), serverType: \(Swift.String(describing: serverType)), shouldOverwrite: \(Swift.String(describing: shouldOverwrite)), username: \(Swift.String(describing: username)), token: \"CONTENT_REDACTED\")"}
}

public struct ImportSourceCredentialsOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the token.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct InvalidateProjectCacheInput: Swift.Sendable {
    /// The name of the CodeBuild build project that the cache is reset for.
    /// This member is required.
    public var projectName: Swift.String?

    public init(
        projectName: Swift.String? = nil
    )
    {
        self.projectName = projectName
    }
}

public struct InvalidateProjectCacheOutput: Swift.Sendable {

    public init() { }
}

public struct ListBuildBatchesInput: Swift.Sendable {
    /// A BuildBatchFilter object that specifies the filters for the search.
    public var filter: CodeBuildClientTypes.BuildBatchFilter?
    /// The maximum number of results to return.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous call to ListBuildBatches. This specifies the next item to return. To return the beginning of the list, exclude this parameter.
    public var nextToken: Swift.String?
    /// Specifies the sort order of the returned items. Valid values include:
    ///
    /// * ASCENDING: List the batch build identifiers in ascending order by identifier.
    ///
    /// * DESCENDING: List the batch build identifiers in descending order by identifier.
    public var sortOrder: CodeBuildClientTypes.SortOrderType?

    public init(
        filter: CodeBuildClientTypes.BuildBatchFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

public struct ListBuildBatchesOutput: Swift.Sendable {
    /// An array of strings that contains the batch build identifiers.
    public var ids: [Swift.String]?
    /// If there are more items to return, this contains a token that is passed to a subsequent call to ListBuildBatches to retrieve the next set of items.
    public var nextToken: Swift.String?

    public init(
        ids: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.ids = ids
        self.nextToken = nextToken
    }
}

public struct ListBuildBatchesForProjectInput: Swift.Sendable {
    /// A BuildBatchFilter object that specifies the filters for the search.
    public var filter: CodeBuildClientTypes.BuildBatchFilter?
    /// The maximum number of results to return.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous call to ListBuildBatchesForProject. This specifies the next item to return. To return the beginning of the list, exclude this parameter.
    public var nextToken: Swift.String?
    /// The name of the project.
    public var projectName: Swift.String?
    /// Specifies the sort order of the returned items. Valid values include:
    ///
    /// * ASCENDING: List the batch build identifiers in ascending order by identifier.
    ///
    /// * DESCENDING: List the batch build identifiers in descending order by identifier.
    public var sortOrder: CodeBuildClientTypes.SortOrderType?

    public init(
        filter: CodeBuildClientTypes.BuildBatchFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        projectName: Swift.String? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.projectName = projectName
        self.sortOrder = sortOrder
    }
}

public struct ListBuildBatchesForProjectOutput: Swift.Sendable {
    /// An array of strings that contains the batch build identifiers.
    public var ids: [Swift.String]?
    /// If there are more items to return, this contains a token that is passed to a subsequent call to ListBuildBatchesForProject to retrieve the next set of items.
    public var nextToken: Swift.String?

    public init(
        ids: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.ids = ids
        self.nextToken = nextToken
    }
}

public struct ListBuildsInput: Swift.Sendable {
    /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The order to list build IDs. Valid values include:
    ///
    /// * ASCENDING: List the build IDs in ascending order by build ID.
    ///
    /// * DESCENDING: List the build IDs in descending order by build ID.
    public var sortOrder: CodeBuildClientTypes.SortOrderType?

    public init(
        nextToken: Swift.String? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

public struct ListBuildsOutput: Swift.Sendable {
    /// A list of build IDs, with each build ID representing a single build.
    public var ids: [Swift.String]?
    /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call.
    public var nextToken: Swift.String?

    public init(
        ids: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.ids = ids
        self.nextToken = nextToken
    }
}

public struct ListBuildsForProjectInput: Swift.Sendable {
    /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The name of the CodeBuild project.
    /// This member is required.
    public var projectName: Swift.String?
    /// The order to sort the results in. The results are sorted by build number, not the build identifier. If this is not specified, the results are sorted in descending order. Valid values include:
    ///
    /// * ASCENDING: List the build identifiers in ascending order, by build number.
    ///
    /// * DESCENDING: List the build identifiers in descending order, by build number.
    ///
    ///
    /// If the project has more than 100 builds, setting the sort order will result in an error.
    public var sortOrder: CodeBuildClientTypes.SortOrderType?

    public init(
        nextToken: Swift.String? = nil,
        projectName: Swift.String? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.nextToken = nextToken
        self.projectName = projectName
        self.sortOrder = sortOrder
    }
}

public struct ListBuildsForProjectOutput: Swift.Sendable {
    /// A list of build identifiers for the specified build project, with each build ID representing a single build.
    public var ids: [Swift.String]?
    /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call.
    public var nextToken: Swift.String?

    public init(
        ids: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.ids = ids
        self.nextToken = nextToken
    }
}

public struct ListCuratedEnvironmentImagesInput: Swift.Sendable {

    public init() { }
}

extension CodeBuildClientTypes {

    /// Information about a Docker image that is managed by CodeBuild.
    public struct EnvironmentImage: Swift.Sendable {
        /// The description of the Docker image.
        public var description: Swift.String?
        /// The name of the Docker image.
        public var name: Swift.String?
        /// A list of environment image versions.
        public var versions: [Swift.String]?

        public init(
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            versions: [Swift.String]? = nil
        )
        {
            self.description = description
            self.name = name
            self.versions = versions
        }
    }
}

extension CodeBuildClientTypes {

    public enum LanguageType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case android
        case base
        case docker
        case dotnet
        case golang
        case java
        case nodeJs
        case php
        case python
        case ruby
        case sdkUnknown(Swift.String)

        public static var allCases: [LanguageType] {
            return [
                .android,
                .base,
                .docker,
                .dotnet,
                .golang,
                .java,
                .nodeJs,
                .php,
                .python,
                .ruby
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .android: return "ANDROID"
            case .base: return "BASE"
            case .docker: return "DOCKER"
            case .dotnet: return "DOTNET"
            case .golang: return "GOLANG"
            case .java: return "JAVA"
            case .nodeJs: return "NODE_JS"
            case .php: return "PHP"
            case .python: return "PYTHON"
            case .ruby: return "RUBY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// A set of Docker images that are related by programming language and are managed by CodeBuild.
    public struct EnvironmentLanguage: Swift.Sendable {
        /// The list of Docker images that are related by the specified programming language.
        public var images: [CodeBuildClientTypes.EnvironmentImage]?
        /// The programming language for the Docker images.
        public var language: CodeBuildClientTypes.LanguageType?

        public init(
            images: [CodeBuildClientTypes.EnvironmentImage]? = nil,
            language: CodeBuildClientTypes.LanguageType? = nil
        )
        {
            self.images = images
            self.language = language
        }
    }
}

extension CodeBuildClientTypes {

    public enum PlatformType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case amazonLinux
        case debian
        case ubuntu
        case windowsServer
        case sdkUnknown(Swift.String)

        public static var allCases: [PlatformType] {
            return [
                .amazonLinux,
                .debian,
                .ubuntu,
                .windowsServer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .amazonLinux: return "AMAZON_LINUX"
            case .debian: return "DEBIAN"
            case .ubuntu: return "UBUNTU"
            case .windowsServer: return "WINDOWS_SERVER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeBuildClientTypes {

    /// A set of Docker images that are related by platform and are managed by CodeBuild.
    public struct EnvironmentPlatform: Swift.Sendable {
        /// The list of programming languages that are available for the specified platform.
        public var languages: [CodeBuildClientTypes.EnvironmentLanguage]?
        /// The platform's name.
        public var platform: CodeBuildClientTypes.PlatformType?

        public init(
            languages: [CodeBuildClientTypes.EnvironmentLanguage]? = nil,
            platform: CodeBuildClientTypes.PlatformType? = nil
        )
        {
            self.languages = languages
            self.platform = platform
        }
    }
}

public struct ListCuratedEnvironmentImagesOutput: Swift.Sendable {
    /// Information about supported platforms for Docker images that are managed by CodeBuild.
    public var platforms: [CodeBuildClientTypes.EnvironmentPlatform]?

    public init(
        platforms: [CodeBuildClientTypes.EnvironmentPlatform]? = nil
    )
    {
        self.platforms = platforms
    }
}

extension CodeBuildClientTypes {

    public enum FleetSortByType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdTime
        case lastModifiedTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetSortByType] {
            return [
                .createdTime,
                .lastModifiedTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdTime: return "CREATED_TIME"
            case .lastModifiedTime: return "LAST_MODIFIED_TIME"
            case .name: return "NAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListFleetsInput: Swift.Sendable {
    /// The maximum number of paginated compute fleets returned per response. Use nextToken to iterate pages in the list of returned compute fleets.
    public var maxResults: Swift.Int?
    /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The criterion to be used to list compute fleet names. Valid values include:
    ///
    /// * CREATED_TIME: List based on when each compute fleet was created.
    ///
    /// * LAST_MODIFIED_TIME: List based on when information about each compute fleet was last changed.
    ///
    /// * NAME: List based on each compute fleet's name.
    ///
    ///
    /// Use sortOrder to specify in what order to list the compute fleet names based on the preceding criteria.
    public var sortBy: CodeBuildClientTypes.FleetSortByType?
    /// The order in which to list compute fleets. Valid values include:
    ///
    /// * ASCENDING: List in ascending order.
    ///
    /// * DESCENDING: List in descending order.
    ///
    ///
    /// Use sortBy to specify the criterion to be used to list compute fleet names.
    public var sortOrder: CodeBuildClientTypes.SortOrderType?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: CodeBuildClientTypes.FleetSortByType? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension ListFleetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListFleetsInput(maxResults: \(Swift.String(describing: maxResults)), sortBy: \(Swift.String(describing: sortBy)), sortOrder: \(Swift.String(describing: sortOrder)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListFleetsOutput: Swift.Sendable {
    /// The list of compute fleet names.
    public var fleets: [Swift.String]?
    /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call.
    public var nextToken: Swift.String?

    public init(
        fleets: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleets = fleets
        self.nextToken = nextToken
    }
}

extension CodeBuildClientTypes {

    public enum ProjectSortByType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdTime
        case lastModifiedTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectSortByType] {
            return [
                .createdTime,
                .lastModifiedTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdTime: return "CREATED_TIME"
            case .lastModifiedTime: return "LAST_MODIFIED_TIME"
            case .name: return "NAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListProjectsInput: Swift.Sendable {
    /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The criterion to be used to list build project names. Valid values include:
    ///
    /// * CREATED_TIME: List based on when each build project was created.
    ///
    /// * LAST_MODIFIED_TIME: List based on when information about each build project was last changed.
    ///
    /// * NAME: List based on each build project's name.
    ///
    ///
    /// Use sortOrder to specify in what order to list the build project names based on the preceding criteria.
    public var sortBy: CodeBuildClientTypes.ProjectSortByType?
    /// The order in which to list build projects. Valid values include:
    ///
    /// * ASCENDING: List in ascending order.
    ///
    /// * DESCENDING: List in descending order.
    ///
    ///
    /// Use sortBy to specify the criterion to be used to list build project names.
    public var sortOrder: CodeBuildClientTypes.SortOrderType?

    public init(
        nextToken: Swift.String? = nil,
        sortBy: CodeBuildClientTypes.ProjectSortByType? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListProjectsOutput: Swift.Sendable {
    /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call.
    public var nextToken: Swift.String?
    /// The list of build project names, with each build project name representing a single build project.
    public var projects: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        projects: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.projects = projects
    }
}

extension CodeBuildClientTypes {

    public enum ReportGroupSortByType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdTime
        case lastModifiedTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportGroupSortByType] {
            return [
                .createdTime,
                .lastModifiedTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdTime: return "CREATED_TIME"
            case .lastModifiedTime: return "LAST_MODIFIED_TIME"
            case .name: return "NAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListReportGroupsInput: Swift.Sendable {
    /// The maximum number of paginated report groups returned per response. Use nextToken to iterate pages in the list of returned ReportGroup objects. The default value is 100.
    public var maxResults: Swift.Int?
    /// During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The criterion to be used to list build report groups. Valid values include:
    ///
    /// * CREATED_TIME: List based on when each report group was created.
    ///
    /// * LAST_MODIFIED_TIME: List based on when each report group was last changed.
    ///
    /// * NAME: List based on each report group's name.
    public var sortBy: CodeBuildClientTypes.ReportGroupSortByType?
    /// Used to specify the order to sort the list of returned report groups. Valid values are ASCENDING and DESCENDING.
    public var sortOrder: CodeBuildClientTypes.SortOrderType?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: CodeBuildClientTypes.ReportGroupSortByType? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListReportGroupsOutput: Swift.Sendable {
    /// During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The list of ARNs for the report groups in the current Amazon Web Services account.
    public var reportGroups: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        reportGroups: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.reportGroups = reportGroups
    }
}

extension CodeBuildClientTypes {

    /// A filter used to return reports with the status specified by the input status parameter.
    public struct ReportFilter: Swift.Sendable {
        /// The status used to filter reports. You can filter using one status only.
        public var status: CodeBuildClientTypes.ReportStatusType?

        public init(
            status: CodeBuildClientTypes.ReportStatusType? = nil
        )
        {
            self.status = status
        }
    }
}

public struct ListReportsInput: Swift.Sendable {
    /// A ReportFilter object used to filter the returned reports.
    public var filter: CodeBuildClientTypes.ReportFilter?
    /// The maximum number of paginated reports returned per response. Use nextToken to iterate pages in the list of returned Report objects. The default value is 100.
    public var maxResults: Swift.Int?
    /// During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// Specifies the sort order for the list of returned reports. Valid values are:
    ///
    /// * ASCENDING: return reports in chronological order based on their creation date.
    ///
    /// * DESCENDING: return reports in the reverse chronological order based on their creation date.
    public var sortOrder: CodeBuildClientTypes.SortOrderType?

    public init(
        filter: CodeBuildClientTypes.ReportFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

public struct ListReportsOutput: Swift.Sendable {
    /// During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The list of returned ARNs for the reports in the current Amazon Web Services account.
    public var reports: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        reports: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.reports = reports
    }
}

public struct ListReportsForReportGroupInput: Swift.Sendable {
    /// A ReportFilter object used to filter the returned reports.
    public var filter: CodeBuildClientTypes.ReportFilter?
    /// The maximum number of paginated reports in this report group returned per response. Use nextToken to iterate pages in the list of returned Report objects. The default value is 100.
    public var maxResults: Swift.Int?
    /// During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The ARN of the report group for which you want to return report ARNs.
    /// This member is required.
    public var reportGroupArn: Swift.String?
    /// Use to specify whether the results are returned in ascending or descending order.
    public var sortOrder: CodeBuildClientTypes.SortOrderType?

    public init(
        filter: CodeBuildClientTypes.ReportFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        reportGroupArn: Swift.String? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reportGroupArn = reportGroupArn
        self.sortOrder = sortOrder
    }
}

public struct ListReportsForReportGroupOutput: Swift.Sendable {
    /// During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The list of report ARNs.
    public var reports: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        reports: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.reports = reports
    }
}

extension CodeBuildClientTypes {

    public enum SharedResourceSortByType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case arn
        case modifiedTime
        case sdkUnknown(Swift.String)

        public static var allCases: [SharedResourceSortByType] {
            return [
                .arn,
                .modifiedTime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .arn: return "ARN"
            case .modifiedTime: return "MODIFIED_TIME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListSharedProjectsInput: Swift.Sendable {
    /// The maximum number of paginated shared build projects returned per response. Use nextToken to iterate pages in the list of returned Project objects. The default value is 100.
    public var maxResults: Swift.Int?
    /// During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The criterion to be used to list build projects shared with the current Amazon Web Services account or user. Valid values include:
    ///
    /// * ARN: List based on the ARN.
    ///
    /// * MODIFIED_TIME: List based on when information about the shared project was last changed.
    public var sortBy: CodeBuildClientTypes.SharedResourceSortByType?
    /// The order in which to list shared build projects. Valid values include:
    ///
    /// * ASCENDING: List in ascending order.
    ///
    /// * DESCENDING: List in descending order.
    public var sortOrder: CodeBuildClientTypes.SortOrderType?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: CodeBuildClientTypes.SharedResourceSortByType? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListSharedProjectsOutput: Swift.Sendable {
    /// During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The list of ARNs for the build projects shared with the current Amazon Web Services account or user.
    public var projects: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        projects: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.projects = projects
    }
}

public struct ListSharedReportGroupsInput: Swift.Sendable {
    /// The maximum number of paginated shared report groups per response. Use nextToken to iterate pages in the list of returned ReportGroup objects. The default value is 100.
    public var maxResults: Swift.Int?
    /// During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The criterion to be used to list report groups shared with the current Amazon Web Services account or user. Valid values include:
    ///
    /// * ARN: List based on the ARN.
    ///
    /// * MODIFIED_TIME: List based on when information about the shared report group was last changed.
    public var sortBy: CodeBuildClientTypes.SharedResourceSortByType?
    /// The order in which to list shared report groups. Valid values include:
    ///
    /// * ASCENDING: List in ascending order.
    ///
    /// * DESCENDING: List in descending order.
    public var sortOrder: CodeBuildClientTypes.SortOrderType?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: CodeBuildClientTypes.SharedResourceSortByType? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListSharedReportGroupsOutput: Swift.Sendable {
    /// During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
    public var nextToken: Swift.String?
    /// The list of ARNs for the report groups shared with the current Amazon Web Services account or user.
    public var reportGroups: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        reportGroups: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.reportGroups = reportGroups
    }
}

public struct ListSourceCredentialsInput: Swift.Sendable {

    public init() { }
}

extension CodeBuildClientTypes {

    /// Information about the credentials for a GitHub, GitHub Enterprise, GitLab, GitLab Self Managed, or Bitbucket repository.
    public struct SourceCredentialsInfo: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the token.
        public var arn: Swift.String?
        /// The type of authentication used by the credentials. Valid options are OAUTH, BASIC_AUTH, PERSONAL_ACCESS_TOKEN, CODECONNECTIONS, or SECRETS_MANAGER.
        public var authType: CodeBuildClientTypes.AuthType?
        /// The connection ARN if your authType is CODECONNECTIONS or SECRETS_MANAGER.
        public var resource: Swift.String?
        /// The type of source provider. The valid options are GITHUB, GITHUB_ENTERPRISE, GITLAB, GITLAB_SELF_MANAGED, or BITBUCKET.
        public var serverType: CodeBuildClientTypes.ServerType?

        public init(
            arn: Swift.String? = nil,
            authType: CodeBuildClientTypes.AuthType? = nil,
            resource: Swift.String? = nil,
            serverType: CodeBuildClientTypes.ServerType? = nil
        )
        {
            self.arn = arn
            self.authType = authType
            self.resource = resource
            self.serverType = serverType
        }
    }
}

public struct ListSourceCredentialsOutput: Swift.Sendable {
    /// A list of SourceCredentialsInfo objects. Each SourceCredentialsInfo object includes the authentication type, token ARN, and type of source provider for one set of credentials.
    public var sourceCredentialsInfos: [CodeBuildClientTypes.SourceCredentialsInfo]?

    public init(
        sourceCredentialsInfos: [CodeBuildClientTypes.SourceCredentialsInfo]? = nil
    )
    {
        self.sourceCredentialsInfos = sourceCredentialsInfos
    }
}

public struct PutResourcePolicyInput: Swift.Sendable {
    /// A JSON-formatted resource policy. For more information, see [Sharing a Project](https://docs.aws.amazon.com/codebuild/latest/userguide/project-sharing.html#project-sharing-share) and [Sharing a Report Group](https://docs.aws.amazon.com/codebuild/latest/userguide/report-groups-sharing.html#report-groups-sharing-share) in the CodeBuild User Guide.
    /// This member is required.
    public var policy: Swift.String?
    /// The ARN of the Project or ReportGroup resource you want to associate with a resource policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

public struct PutResourcePolicyOutput: Swift.Sendable {
    /// The ARN of the Project or ReportGroup resource that is associated with a resource policy.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct RetryBuildInput: Swift.Sendable {
    /// Specifies the identifier of the build to restart.
    public var id: Swift.String?
    /// A unique, case sensitive identifier you provide to ensure the idempotency of the RetryBuild request. The token is included in the RetryBuild request and is valid for five minutes. If you repeat the RetryBuild request with the same token, but change a parameter, CodeBuild returns a parameter mismatch error.
    public var idempotencyToken: Swift.String?

    public init(
        id: Swift.String? = nil,
        idempotencyToken: Swift.String? = nil
    )
    {
        self.id = id
        self.idempotencyToken = idempotencyToken
    }
}

public struct RetryBuildOutput: Swift.Sendable {
    /// Information about a build.
    public var build: CodeBuildClientTypes.Build?

    public init(
        build: CodeBuildClientTypes.Build? = nil
    )
    {
        self.build = build
    }
}

extension CodeBuildClientTypes {

    public enum RetryBuildBatchType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case retryAllBuilds
        case retryFailedBuilds
        case sdkUnknown(Swift.String)

        public static var allCases: [RetryBuildBatchType] {
            return [
                .retryAllBuilds,
                .retryFailedBuilds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .retryAllBuilds: return "RETRY_ALL_BUILDS"
            case .retryFailedBuilds: return "RETRY_FAILED_BUILDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct RetryBuildBatchInput: Swift.Sendable {
    /// Specifies the identifier of the batch build to restart.
    public var id: Swift.String?
    /// A unique, case sensitive identifier you provide to ensure the idempotency of the RetryBuildBatch request. The token is included in the RetryBuildBatch request and is valid for five minutes. If you repeat the RetryBuildBatch request with the same token, but change a parameter, CodeBuild returns a parameter mismatch error.
    public var idempotencyToken: Swift.String?
    /// Specifies the type of retry to perform.
    public var retryType: CodeBuildClientTypes.RetryBuildBatchType?

    public init(
        id: Swift.String? = nil,
        idempotencyToken: Swift.String? = nil,
        retryType: CodeBuildClientTypes.RetryBuildBatchType? = nil
    )
    {
        self.id = id
        self.idempotencyToken = idempotencyToken
        self.retryType = retryType
    }
}

public struct RetryBuildBatchOutput: Swift.Sendable {
    /// Contains information about a batch build.
    public var buildBatch: CodeBuildClientTypes.BuildBatch?

    public init(
        buildBatch: CodeBuildClientTypes.BuildBatch? = nil
    )
    {
        self.buildBatch = buildBatch
    }
}

public struct StartBuildInput: Swift.Sendable {
    /// Build output artifact settings that override, for this build only, the latest ones already defined in the build project.
    public var artifactsOverride: CodeBuildClientTypes.ProjectArtifacts?
    /// The maximum number of additional automatic retries after a failed build. For example, if the auto-retry limit is set to 2, CodeBuild will call the RetryBuild API to automatically retry your build for up to 2 additional times.
    public var autoRetryLimitOverride: Swift.Int?
    /// Contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is GITHUB, GITHUB_ENTERPRISE, or BITBUCKET.
    public var buildStatusConfigOverride: CodeBuildClientTypes.BuildStatusConfig?
    /// A buildspec file declaration that overrides the latest one defined in the build project, for this build only. The buildspec defined on the project is not changed. If this value is set, it can be either an inline buildspec definition, the path to an alternate buildspec file relative to the value of the built-in CODEBUILD_SRC_DIR environment variable, or the path to an S3 bucket. The bucket must be in the same Amazon Web Services Region as the build project. Specify the buildspec file using its ARN (for example, arn:aws:s3:::my-codebuild-sample2/buildspec.yml). If this value is not provided or is set to an empty string, the source code must contain a buildspec file in its root directory. For more information, see [Buildspec File Name and Storage Location](https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage). Since this property allows you to change the build commands that will run in the container, you should note that an IAM principal with the ability to call this API and set this parameter can override the default settings. Moreover, we encourage that you use a trustworthy buildspec location like a file in your source repository or a Amazon S3 bucket.
    public var buildspecOverride: Swift.String?
    /// A ProjectCache object specified for this build that overrides the one defined in the build project.
    public var cacheOverride: CodeBuildClientTypes.ProjectCache?
    /// The name of a certificate for this build that overrides the one specified in the build project.
    public var certificateOverride: Swift.String?
    /// The name of a compute type for this build that overrides the one specified in the build project.
    public var computeTypeOverride: CodeBuildClientTypes.ComputeType?
    /// Specifies if session debugging is enabled for this build. For more information, see [Viewing a running build in Session Manager](https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html).
    public var debugSessionEnabled: Swift.Bool?
    /// The Key Management Service customer master key (CMK) that overrides the one specified in the build project. The CMK key encrypts the build output artifacts. You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/).
    public var encryptionKeyOverride: Swift.String?
    /// A container type for this build that overrides the one specified in the build project.
    public var environmentTypeOverride: CodeBuildClientTypes.EnvironmentType?
    /// A set of environment variables that overrides, for this build only, the latest ones already defined in the build project.
    public var environmentVariablesOverride: [CodeBuildClientTypes.EnvironmentVariable]?
    /// A ProjectFleet object specified for this build that overrides the one defined in the build project.
    public var fleetOverride: CodeBuildClientTypes.ProjectFleet?
    /// The user-defined depth of history, with a minimum value of 0, that overrides, for this build only, any previous depth of history defined in the build project.
    public var gitCloneDepthOverride: Swift.Int?
    /// Information about the Git submodules configuration for this build of an CodeBuild build project.
    public var gitSubmodulesConfigOverride: CodeBuildClientTypes.GitSubmodulesConfig?
    /// A unique, case sensitive identifier you provide to ensure the idempotency of the StartBuild request. The token is included in the StartBuild request and is valid for 5 minutes. If you repeat the StartBuild request with the same token, but change a parameter, CodeBuild returns a parameter mismatch error.
    public var idempotencyToken: Swift.String?
    /// The name of an image for this build that overrides the one specified in the build project.
    public var imageOverride: Swift.String?
    /// The type of credentials CodeBuild uses to pull images in your build. There are two valid values: CODEBUILD Specifies that CodeBuild uses its own credentials. This requires that you modify your ECR repository policy to trust CodeBuild's service principal. SERVICE_ROLE Specifies that CodeBuild uses your build project's service role. When using a cross-account or private registry image, you must use SERVICE_ROLE credentials. When using an CodeBuild curated image, you must use CODEBUILD credentials.
    public var imagePullCredentialsTypeOverride: CodeBuildClientTypes.ImagePullCredentialsType?
    /// Enable this flag to override the insecure SSL setting that is specified in the build project. The insecure SSL setting determines whether to ignore SSL warnings while connecting to the project source code. This override applies only if the build's source is GitHub Enterprise.
    public var insecureSslOverride: Swift.Bool?
    /// Log settings for this build that override the log settings defined in the build project.
    public var logsConfigOverride: CodeBuildClientTypes.LogsConfig?
    /// Enable this flag to override privileged mode in the build project.
    public var privilegedModeOverride: Swift.Bool?
    /// The name of the CodeBuild build project to start running a build.
    /// This member is required.
    public var projectName: Swift.String?
    /// The number of minutes a build is allowed to be queued before it times out.
    public var queuedTimeoutInMinutesOverride: Swift.Int?
    /// The credentials for access to a private registry.
    public var registryCredentialOverride: CodeBuildClientTypes.RegistryCredential?
    /// Set to true to report to your source provider the status of a build's start and completion. If you use this option with a source provider other than GitHub, GitHub Enterprise, or Bitbucket, an invalidInputException is thrown. To be able to report the build status to the source provider, the user associated with the source provider must have write access to the repo. If the user does not have write access, the build status cannot be updated. For more information, see [Source provider access](https://docs.aws.amazon.com/codebuild/latest/userguide/access-tokens.html) in the CodeBuild User Guide. The status of a build triggered by a webhook is always reported to your source provider.
    public var reportBuildStatusOverride: Swift.Bool?
    /// An array of ProjectArtifacts objects.
    public var secondaryArtifactsOverride: [CodeBuildClientTypes.ProjectArtifacts]?
    /// An array of ProjectSource objects.
    public var secondarySourcesOverride: [CodeBuildClientTypes.ProjectSource]?
    /// An array of ProjectSourceVersion objects that specify one or more versions of the project's secondary sources to be used for this build only.
    public var secondarySourcesVersionOverride: [CodeBuildClientTypes.ProjectSourceVersion]?
    /// The name of a service role for this build that overrides the one specified in the build project.
    public var serviceRoleOverride: Swift.String?
    /// An authorization type for this build that overrides the one defined in the build project. This override applies only if the build project's source is BitBucket, GitHub, GitLab, or GitLab Self Managed.
    public var sourceAuthOverride: CodeBuildClientTypes.SourceAuth?
    /// A location that overrides, for this build, the source location for the one defined in the build project.
    public var sourceLocationOverride: Swift.String?
    /// A source input type, for this build, that overrides the source input defined in the build project.
    public var sourceTypeOverride: CodeBuildClientTypes.SourceType?
    /// The version of the build input to be built, for this build only. If not specified, the latest version is used. If specified, the contents depends on the source provider: CodeCommit The commit ID, branch, or Git tag to use. GitHub The commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used. GitLab The commit ID, branch, or Git tag to use. Bitbucket The commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used. Amazon S3 The version ID of the object that represents the build input ZIP file to use. If sourceVersion is specified at the project level, then this sourceVersion (at the build level) takes precedence. For more information, see [Source Version Sample with CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html) in the CodeBuild User Guide.
    public var sourceVersion: Swift.String?
    /// The number of build timeout minutes, from 5 to 2160 (36 hours), that overrides, for this build only, the latest setting already defined in the build project.
    public var timeoutInMinutesOverride: Swift.Int?

    public init(
        artifactsOverride: CodeBuildClientTypes.ProjectArtifacts? = nil,
        autoRetryLimitOverride: Swift.Int? = nil,
        buildStatusConfigOverride: CodeBuildClientTypes.BuildStatusConfig? = nil,
        buildspecOverride: Swift.String? = nil,
        cacheOverride: CodeBuildClientTypes.ProjectCache? = nil,
        certificateOverride: Swift.String? = nil,
        computeTypeOverride: CodeBuildClientTypes.ComputeType? = nil,
        debugSessionEnabled: Swift.Bool? = nil,
        encryptionKeyOverride: Swift.String? = nil,
        environmentTypeOverride: CodeBuildClientTypes.EnvironmentType? = nil,
        environmentVariablesOverride: [CodeBuildClientTypes.EnvironmentVariable]? = nil,
        fleetOverride: CodeBuildClientTypes.ProjectFleet? = nil,
        gitCloneDepthOverride: Swift.Int? = nil,
        gitSubmodulesConfigOverride: CodeBuildClientTypes.GitSubmodulesConfig? = nil,
        idempotencyToken: Swift.String? = nil,
        imageOverride: Swift.String? = nil,
        imagePullCredentialsTypeOverride: CodeBuildClientTypes.ImagePullCredentialsType? = nil,
        insecureSslOverride: Swift.Bool? = nil,
        logsConfigOverride: CodeBuildClientTypes.LogsConfig? = nil,
        privilegedModeOverride: Swift.Bool? = nil,
        projectName: Swift.String? = nil,
        queuedTimeoutInMinutesOverride: Swift.Int? = nil,
        registryCredentialOverride: CodeBuildClientTypes.RegistryCredential? = nil,
        reportBuildStatusOverride: Swift.Bool? = nil,
        secondaryArtifactsOverride: [CodeBuildClientTypes.ProjectArtifacts]? = nil,
        secondarySourcesOverride: [CodeBuildClientTypes.ProjectSource]? = nil,
        secondarySourcesVersionOverride: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
        serviceRoleOverride: Swift.String? = nil,
        sourceAuthOverride: CodeBuildClientTypes.SourceAuth? = nil,
        sourceLocationOverride: Swift.String? = nil,
        sourceTypeOverride: CodeBuildClientTypes.SourceType? = nil,
        sourceVersion: Swift.String? = nil,
        timeoutInMinutesOverride: Swift.Int? = nil
    )
    {
        self.artifactsOverride = artifactsOverride
        self.autoRetryLimitOverride = autoRetryLimitOverride
        self.buildStatusConfigOverride = buildStatusConfigOverride
        self.buildspecOverride = buildspecOverride
        self.cacheOverride = cacheOverride
        self.certificateOverride = certificateOverride
        self.computeTypeOverride = computeTypeOverride
        self.debugSessionEnabled = debugSessionEnabled
        self.encryptionKeyOverride = encryptionKeyOverride
        self.environmentTypeOverride = environmentTypeOverride
        self.environmentVariablesOverride = environmentVariablesOverride
        self.fleetOverride = fleetOverride
        self.gitCloneDepthOverride = gitCloneDepthOverride
        self.gitSubmodulesConfigOverride = gitSubmodulesConfigOverride
        self.idempotencyToken = idempotencyToken
        self.imageOverride = imageOverride
        self.imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverride
        self.insecureSslOverride = insecureSslOverride
        self.logsConfigOverride = logsConfigOverride
        self.privilegedModeOverride = privilegedModeOverride
        self.projectName = projectName
        self.queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverride
        self.registryCredentialOverride = registryCredentialOverride
        self.reportBuildStatusOverride = reportBuildStatusOverride
        self.secondaryArtifactsOverride = secondaryArtifactsOverride
        self.secondarySourcesOverride = secondarySourcesOverride
        self.secondarySourcesVersionOverride = secondarySourcesVersionOverride
        self.serviceRoleOverride = serviceRoleOverride
        self.sourceAuthOverride = sourceAuthOverride
        self.sourceLocationOverride = sourceLocationOverride
        self.sourceTypeOverride = sourceTypeOverride
        self.sourceVersion = sourceVersion
        self.timeoutInMinutesOverride = timeoutInMinutesOverride
    }
}

public struct StartBuildOutput: Swift.Sendable {
    /// Information about the build to be run.
    public var build: CodeBuildClientTypes.Build?

    public init(
        build: CodeBuildClientTypes.Build? = nil
    )
    {
        self.build = build
    }
}

public struct StartBuildBatchInput: Swift.Sendable {
    /// An array of ProjectArtifacts objects that contains information about the build output artifact overrides for the build project.
    public var artifactsOverride: CodeBuildClientTypes.ProjectArtifacts?
    /// A BuildBatchConfigOverride object that contains batch build configuration overrides.
    public var buildBatchConfigOverride: CodeBuildClientTypes.ProjectBuildBatchConfig?
    /// Overrides the build timeout specified in the batch build project.
    public var buildTimeoutInMinutesOverride: Swift.Int?
    /// A buildspec file declaration that overrides, for this build only, the latest one already defined in the build project. If this value is set, it can be either an inline buildspec definition, the path to an alternate buildspec file relative to the value of the built-in CODEBUILD_SRC_DIR environment variable, or the path to an S3 bucket. The bucket must be in the same Amazon Web Services Region as the build project. Specify the buildspec file using its ARN (for example, arn:aws:s3:::my-codebuild-sample2/buildspec.yml). If this value is not provided or is set to an empty string, the source code must contain a buildspec file in its root directory. For more information, see [Buildspec File Name and Storage Location](https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage).
    public var buildspecOverride: Swift.String?
    /// A ProjectCache object that specifies cache overrides.
    public var cacheOverride: CodeBuildClientTypes.ProjectCache?
    /// The name of a certificate for this batch build that overrides the one specified in the batch build project.
    public var certificateOverride: Swift.String?
    /// The name of a compute type for this batch build that overrides the one specified in the batch build project.
    public var computeTypeOverride: CodeBuildClientTypes.ComputeType?
    /// Specifies if session debugging is enabled for this batch build. For more information, see [Viewing a running build in Session Manager](https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html). Batch session debugging is not supported for matrix batch builds.
    public var debugSessionEnabled: Swift.Bool?
    /// The Key Management Service customer master key (CMK) that overrides the one specified in the batch build project. The CMK key encrypts the build output artifacts. You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/).
    public var encryptionKeyOverride: Swift.String?
    /// A container type for this batch build that overrides the one specified in the batch build project.
    public var environmentTypeOverride: CodeBuildClientTypes.EnvironmentType?
    /// An array of EnvironmentVariable objects that override, or add to, the environment variables defined in the batch build project.
    public var environmentVariablesOverride: [CodeBuildClientTypes.EnvironmentVariable]?
    /// The user-defined depth of history, with a minimum value of 0, that overrides, for this batch build only, any previous depth of history defined in the batch build project.
    public var gitCloneDepthOverride: Swift.Int?
    /// A GitSubmodulesConfig object that overrides the Git submodules configuration for this batch build.
    public var gitSubmodulesConfigOverride: CodeBuildClientTypes.GitSubmodulesConfig?
    /// A unique, case sensitive identifier you provide to ensure the idempotency of the StartBuildBatch request. The token is included in the StartBuildBatch request and is valid for five minutes. If you repeat the StartBuildBatch request with the same token, but change a parameter, CodeBuild returns a parameter mismatch error.
    public var idempotencyToken: Swift.String?
    /// The name of an image for this batch build that overrides the one specified in the batch build project.
    public var imageOverride: Swift.String?
    /// The type of credentials CodeBuild uses to pull images in your batch build. There are two valid values: CODEBUILD Specifies that CodeBuild uses its own credentials. This requires that you modify your ECR repository policy to trust CodeBuild's service principal. SERVICE_ROLE Specifies that CodeBuild uses your build project's service role. When using a cross-account or private registry image, you must use SERVICE_ROLE credentials. When using an CodeBuild curated image, you must use CODEBUILD credentials.
    public var imagePullCredentialsTypeOverride: CodeBuildClientTypes.ImagePullCredentialsType?
    /// Enable this flag to override the insecure SSL setting that is specified in the batch build project. The insecure SSL setting determines whether to ignore SSL warnings while connecting to the project source code. This override applies only if the build's source is GitHub Enterprise.
    public var insecureSslOverride: Swift.Bool?
    /// A LogsConfig object that override the log settings defined in the batch build project.
    public var logsConfigOverride: CodeBuildClientTypes.LogsConfig?
    /// Enable this flag to override privileged mode in the batch build project.
    public var privilegedModeOverride: Swift.Bool?
    /// The name of the project.
    /// This member is required.
    public var projectName: Swift.String?
    /// The number of minutes a batch build is allowed to be queued before it times out.
    public var queuedTimeoutInMinutesOverride: Swift.Int?
    /// A RegistryCredential object that overrides credentials for access to a private registry.
    public var registryCredentialOverride: CodeBuildClientTypes.RegistryCredential?
    /// Set to true to report to your source provider the status of a batch build's start and completion. If you use this option with a source provider other than GitHub, GitHub Enterprise, or Bitbucket, an invalidInputException is thrown. The status of a build triggered by a webhook is always reported to your source provider.
    public var reportBuildBatchStatusOverride: Swift.Bool?
    /// An array of ProjectArtifacts objects that override the secondary artifacts defined in the batch build project.
    public var secondaryArtifactsOverride: [CodeBuildClientTypes.ProjectArtifacts]?
    /// An array of ProjectSource objects that override the secondary sources defined in the batch build project.
    public var secondarySourcesOverride: [CodeBuildClientTypes.ProjectSource]?
    /// An array of ProjectSourceVersion objects that override the secondary source versions in the batch build project.
    public var secondarySourcesVersionOverride: [CodeBuildClientTypes.ProjectSourceVersion]?
    /// The name of a service role for this batch build that overrides the one specified in the batch build project.
    public var serviceRoleOverride: Swift.String?
    /// A SourceAuth object that overrides the one defined in the batch build project. This override applies only if the build project's source is BitBucket or GitHub.
    public var sourceAuthOverride: CodeBuildClientTypes.SourceAuth?
    /// A location that overrides, for this batch build, the source location defined in the batch build project.
    public var sourceLocationOverride: Swift.String?
    /// The source input type that overrides the source input defined in the batch build project.
    public var sourceTypeOverride: CodeBuildClientTypes.SourceType?
    /// The version of the batch build input to be built, for this build only. If not specified, the latest version is used. If specified, the contents depends on the source provider: CodeCommit The commit ID, branch, or Git tag to use. GitHub The commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used. Bitbucket The commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used. Amazon S3 The version ID of the object that represents the build input ZIP file to use. If sourceVersion is specified at the project level, then this sourceVersion (at the build level) takes precedence. For more information, see [Source Version Sample with CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html) in the CodeBuild User Guide.
    public var sourceVersion: Swift.String?

    public init(
        artifactsOverride: CodeBuildClientTypes.ProjectArtifacts? = nil,
        buildBatchConfigOverride: CodeBuildClientTypes.ProjectBuildBatchConfig? = nil,
        buildTimeoutInMinutesOverride: Swift.Int? = nil,
        buildspecOverride: Swift.String? = nil,
        cacheOverride: CodeBuildClientTypes.ProjectCache? = nil,
        certificateOverride: Swift.String? = nil,
        computeTypeOverride: CodeBuildClientTypes.ComputeType? = nil,
        debugSessionEnabled: Swift.Bool? = nil,
        encryptionKeyOverride: Swift.String? = nil,
        environmentTypeOverride: CodeBuildClientTypes.EnvironmentType? = nil,
        environmentVariablesOverride: [CodeBuildClientTypes.EnvironmentVariable]? = nil,
        gitCloneDepthOverride: Swift.Int? = nil,
        gitSubmodulesConfigOverride: CodeBuildClientTypes.GitSubmodulesConfig? = nil,
        idempotencyToken: Swift.String? = nil,
        imageOverride: Swift.String? = nil,
        imagePullCredentialsTypeOverride: CodeBuildClientTypes.ImagePullCredentialsType? = nil,
        insecureSslOverride: Swift.Bool? = nil,
        logsConfigOverride: CodeBuildClientTypes.LogsConfig? = nil,
        privilegedModeOverride: Swift.Bool? = nil,
        projectName: Swift.String? = nil,
        queuedTimeoutInMinutesOverride: Swift.Int? = nil,
        registryCredentialOverride: CodeBuildClientTypes.RegistryCredential? = nil,
        reportBuildBatchStatusOverride: Swift.Bool? = nil,
        secondaryArtifactsOverride: [CodeBuildClientTypes.ProjectArtifacts]? = nil,
        secondarySourcesOverride: [CodeBuildClientTypes.ProjectSource]? = nil,
        secondarySourcesVersionOverride: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
        serviceRoleOverride: Swift.String? = nil,
        sourceAuthOverride: CodeBuildClientTypes.SourceAuth? = nil,
        sourceLocationOverride: Swift.String? = nil,
        sourceTypeOverride: CodeBuildClientTypes.SourceType? = nil,
        sourceVersion: Swift.String? = nil
    )
    {
        self.artifactsOverride = artifactsOverride
        self.buildBatchConfigOverride = buildBatchConfigOverride
        self.buildTimeoutInMinutesOverride = buildTimeoutInMinutesOverride
        self.buildspecOverride = buildspecOverride
        self.cacheOverride = cacheOverride
        self.certificateOverride = certificateOverride
        self.computeTypeOverride = computeTypeOverride
        self.debugSessionEnabled = debugSessionEnabled
        self.encryptionKeyOverride = encryptionKeyOverride
        self.environmentTypeOverride = environmentTypeOverride
        self.environmentVariablesOverride = environmentVariablesOverride
        self.gitCloneDepthOverride = gitCloneDepthOverride
        self.gitSubmodulesConfigOverride = gitSubmodulesConfigOverride
        self.idempotencyToken = idempotencyToken
        self.imageOverride = imageOverride
        self.imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverride
        self.insecureSslOverride = insecureSslOverride
        self.logsConfigOverride = logsConfigOverride
        self.privilegedModeOverride = privilegedModeOverride
        self.projectName = projectName
        self.queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverride
        self.registryCredentialOverride = registryCredentialOverride
        self.reportBuildBatchStatusOverride = reportBuildBatchStatusOverride
        self.secondaryArtifactsOverride = secondaryArtifactsOverride
        self.secondarySourcesOverride = secondarySourcesOverride
        self.secondarySourcesVersionOverride = secondarySourcesVersionOverride
        self.serviceRoleOverride = serviceRoleOverride
        self.sourceAuthOverride = sourceAuthOverride
        self.sourceLocationOverride = sourceLocationOverride
        self.sourceTypeOverride = sourceTypeOverride
        self.sourceVersion = sourceVersion
    }
}

public struct StartBuildBatchOutput: Swift.Sendable {
    /// A BuildBatch object that contains information about the batch build.
    public var buildBatch: CodeBuildClientTypes.BuildBatch?

    public init(
        buildBatch: CodeBuildClientTypes.BuildBatch? = nil
    )
    {
        self.buildBatch = buildBatch
    }
}

public struct StopBuildInput: Swift.Sendable {
    /// The ID of the build.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct StopBuildOutput: Swift.Sendable {
    /// Information about the build.
    public var build: CodeBuildClientTypes.Build?

    public init(
        build: CodeBuildClientTypes.Build? = nil
    )
    {
        self.build = build
    }
}

public struct StopBuildBatchInput: Swift.Sendable {
    /// The identifier of the batch build to stop.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct StopBuildBatchOutput: Swift.Sendable {
    /// Contains information about a batch build.
    public var buildBatch: CodeBuildClientTypes.BuildBatch?

    public init(
        buildBatch: CodeBuildClientTypes.BuildBatch? = nil
    )
    {
        self.buildBatch = buildBatch
    }
}

public struct UpdateFleetInput: Swift.Sendable {
    /// The ARN of the compute fleet.
    /// This member is required.
    public var arn: Swift.String?
    /// The initial number of machines allocated to the compute ﬂeet, which deﬁnes the number of builds that can run in parallel.
    public var baseCapacity: Swift.Int?
    /// Information about the compute resources the compute fleet uses. Available values include:
    ///
    /// * BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds.
    ///
    /// * BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds.
    ///
    /// * BUILD_GENERAL1_LARGE: Use up to 16 GB memory and 8 vCPUs for builds, depending on your environment type.
    ///
    /// * BUILD_GENERAL1_XLARGE: Use up to 70 GB memory and 36 vCPUs for builds, depending on your environment type.
    ///
    /// * BUILD_GENERAL1_2XLARGE: Use up to 145 GB memory, 72 vCPUs, and 824 GB of SSD storage for builds. This compute type supports Docker images up to 100 GB uncompressed.
    ///
    ///
    /// If you use BUILD_GENERAL1_SMALL:
    ///
    /// * For environment type LINUX_CONTAINER, you can use up to 3 GB memory and 2 vCPUs for builds.
    ///
    /// * For environment type LINUX_GPU_CONTAINER, you can use up to 16 GB memory, 4 vCPUs, and 1 NVIDIA A10G Tensor Core GPU for builds.
    ///
    /// * For environment type ARM_CONTAINER, you can use up to 4 GB memory and 2 vCPUs on ARM-based processors for builds.
    ///
    ///
    /// If you use BUILD_GENERAL1_LARGE:
    ///
    /// * For environment type LINUX_CONTAINER, you can use up to 15 GB memory and 8 vCPUs for builds.
    ///
    /// * For environment type LINUX_GPU_CONTAINER, you can use up to 255 GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.
    ///
    /// * For environment type ARM_CONTAINER, you can use up to 16 GB memory and 8 vCPUs on ARM-based processors for builds.
    ///
    ///
    /// For more information, see [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the CodeBuild User Guide.
    public var computeType: CodeBuildClientTypes.ComputeType?
    /// The environment type of the compute fleet.
    ///
    /// * The environment type ARM_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), Asia Pacific (Mumbai), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), EU (Frankfurt), and South America (São Paulo).
    ///
    /// * The environment type LINUX_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), South America (São Paulo), and Asia Pacific (Mumbai).
    ///
    /// * The environment type LINUX_GPU_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), and Asia Pacific (Sydney).
    ///
    /// * The environment type MAC_ARM is available for Medium fleets only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Sydney), and EU (Frankfurt)
    ///
    /// * The environment type MAC_ARM is available for Large fleets only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), and Asia Pacific (Sydney).
    ///
    /// * The environment type WINDOWS_SERVER_2019_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Sydney), Asia Pacific (Tokyo), Asia Pacific (Mumbai) and EU (Ireland).
    ///
    /// * The environment type WINDOWS_SERVER_2022_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Sydney), Asia Pacific (Singapore), Asia Pacific (Tokyo), South America (São Paulo) and Asia Pacific (Mumbai).
    ///
    ///
    /// For more information, see [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the CodeBuild user guide.
    public var environmentType: CodeBuildClientTypes.EnvironmentType?
    /// The service role associated with the compute fleet. For more information, see [ Allow a user to add a permission policy for a fleet service role](https://docs.aws.amazon.com/codebuild/latest/userguide/auth-and-access-control-iam-identity-based-access-control.html#customer-managed-policies-example-permission-policy-fleet-service-role.html) in the CodeBuild User Guide.
    public var fleetServiceRole: Swift.String?
    /// The Amazon Machine Image (AMI) of the compute fleet.
    public var imageId: Swift.String?
    /// The compute fleet overflow behavior.
    ///
    /// * For overflow behavior QUEUE, your overflow builds need to wait on the existing fleet instance to become available.
    ///
    /// * For overflow behavior ON_DEMAND, your overflow builds run on CodeBuild on-demand. If you choose to set your overflow behavior to on-demand while creating a VPC-connected fleet, make sure that you add the required VPC permissions to your project service role. For more information, see [Example policy statement to allow CodeBuild access to Amazon Web Services services required to create a VPC network interface](https://docs.aws.amazon.com/codebuild/latest/userguide/auth-and-access-control-iam-identity-based-access-control.html#customer-managed-policies-example-create-vpc-network-interface).
    public var overflowBehavior: CodeBuildClientTypes.FleetOverflowBehavior?
    /// The proxy configuration of the compute fleet.
    public var proxyConfiguration: CodeBuildClientTypes.ProxyConfiguration?
    /// The scaling configuration of the compute fleet.
    public var scalingConfiguration: CodeBuildClientTypes.ScalingConfigurationInput?
    /// A list of tag key and value pairs associated with this compute fleet. These tags are available for use by Amazon Web Services services that support CodeBuild build project tags.
    public var tags: [CodeBuildClientTypes.Tag]?
    /// Information about the VPC configuration that CodeBuild accesses.
    public var vpcConfig: CodeBuildClientTypes.VpcConfig?

    public init(
        arn: Swift.String? = nil,
        baseCapacity: Swift.Int? = nil,
        computeType: CodeBuildClientTypes.ComputeType? = nil,
        environmentType: CodeBuildClientTypes.EnvironmentType? = nil,
        fleetServiceRole: Swift.String? = nil,
        imageId: Swift.String? = nil,
        overflowBehavior: CodeBuildClientTypes.FleetOverflowBehavior? = nil,
        proxyConfiguration: CodeBuildClientTypes.ProxyConfiguration? = nil,
        scalingConfiguration: CodeBuildClientTypes.ScalingConfigurationInput? = nil,
        tags: [CodeBuildClientTypes.Tag]? = nil,
        vpcConfig: CodeBuildClientTypes.VpcConfig? = nil
    )
    {
        self.arn = arn
        self.baseCapacity = baseCapacity
        self.computeType = computeType
        self.environmentType = environmentType
        self.fleetServiceRole = fleetServiceRole
        self.imageId = imageId
        self.overflowBehavior = overflowBehavior
        self.proxyConfiguration = proxyConfiguration
        self.scalingConfiguration = scalingConfiguration
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}

public struct UpdateFleetOutput: Swift.Sendable {
    /// A Fleet object.
    public var fleet: CodeBuildClientTypes.Fleet?

    public init(
        fleet: CodeBuildClientTypes.Fleet? = nil
    )
    {
        self.fleet = fleet
    }
}

public struct UpdateProjectInput: Swift.Sendable {
    /// Information to be changed about the build output artifacts for the build project.
    public var artifacts: CodeBuildClientTypes.ProjectArtifacts?
    /// The maximum number of additional automatic retries after a failed build. For example, if the auto-retry limit is set to 2, CodeBuild will call the RetryBuild API to automatically retry your build for up to 2 additional times.
    public var autoRetryLimit: Swift.Int?
    /// Set this to true to generate a publicly accessible URL for your project's build badge.
    public var badgeEnabled: Swift.Bool?
    /// Contains configuration information about a batch build project.
    public var buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig?
    /// Stores recently used information so that it can be quickly accessed at a later time.
    public var cache: CodeBuildClientTypes.ProjectCache?
    /// The maximum number of concurrent builds that are allowed for this project. New builds are only started if the current number of builds is less than or equal to this limit. If the current build count meets this limit, new builds are throttled and are not run. To remove this limit, set this value to -1.
    public var concurrentBuildLimit: Swift.Int?
    /// A new or replacement description of the build project.
    public var description: Swift.String?
    /// The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts. You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/).
    public var encryptionKey: Swift.String?
    /// Information to be changed about the build environment for the build project.
    public var environment: CodeBuildClientTypes.ProjectEnvironment?
    /// An array of ProjectFileSystemLocation objects for a CodeBuild build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System.
    public var fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]?
    /// Information about logs for the build project. A project can create logs in CloudWatch Logs, logs in an S3 bucket, or both.
    public var logsConfig: CodeBuildClientTypes.LogsConfig?
    /// The name of the build project. You cannot change a build project's name.
    /// This member is required.
    public var name: Swift.String?
    /// The number of minutes a build is allowed to be queued before it times out.
    public var queuedTimeoutInMinutes: Swift.Int?
    /// An array of ProjectArtifact objects.
    public var secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]?
    /// An array of ProjectSourceVersion objects. If secondarySourceVersions is specified at the build level, then they take over these secondarySourceVersions (at the project level).
    public var secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]?
    /// An array of ProjectSource objects.
    public var secondarySources: [CodeBuildClientTypes.ProjectSource]?
    /// The replacement ARN of the IAM role that enables CodeBuild to interact with dependent Amazon Web Services services on behalf of the Amazon Web Services account.
    public var serviceRole: Swift.String?
    /// Information to be changed about the build input source code for the build project.
    public var source: CodeBuildClientTypes.ProjectSource?
    /// A version of the build input to be built for this project. If not specified, the latest version is used. If specified, it must be one of:
    ///
    /// * For CodeCommit: the commit ID, branch, or Git tag to use.
    ///
    /// * For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
    ///
    /// * For GitLab: the commit ID, branch, or Git tag to use.
    ///
    /// * For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
    ///
    /// * For Amazon S3: the version ID of the object that represents the build input ZIP file to use.
    ///
    ///
    /// If sourceVersion is specified at the build level, then that version takes precedence over this sourceVersion (at the project level). For more information, see [Source Version Sample with CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html) in the CodeBuild User Guide.
    public var sourceVersion: Swift.String?
    /// An updated list of tag key and value pairs associated with this build project. These tags are available for use by Amazon Web Services services that support CodeBuild build project tags.
    public var tags: [CodeBuildClientTypes.Tag]?
    /// The replacement value in minutes, from 5 to 2160 (36 hours), for CodeBuild to wait before timing out any related build that did not get marked as completed.
    public var timeoutInMinutes: Swift.Int?
    /// VpcConfig enables CodeBuild to access resources in an Amazon VPC.
    public var vpcConfig: CodeBuildClientTypes.VpcConfig?

    public init(
        artifacts: CodeBuildClientTypes.ProjectArtifacts? = nil,
        autoRetryLimit: Swift.Int? = nil,
        badgeEnabled: Swift.Bool? = nil,
        buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig? = nil,
        cache: CodeBuildClientTypes.ProjectCache? = nil,
        concurrentBuildLimit: Swift.Int? = nil,
        description: Swift.String? = nil,
        encryptionKey: Swift.String? = nil,
        environment: CodeBuildClientTypes.ProjectEnvironment? = nil,
        fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]? = nil,
        logsConfig: CodeBuildClientTypes.LogsConfig? = nil,
        name: Swift.String? = nil,
        queuedTimeoutInMinutes: Swift.Int? = nil,
        secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]? = nil,
        secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
        secondarySources: [CodeBuildClientTypes.ProjectSource]? = nil,
        serviceRole: Swift.String? = nil,
        source: CodeBuildClientTypes.ProjectSource? = nil,
        sourceVersion: Swift.String? = nil,
        tags: [CodeBuildClientTypes.Tag]? = nil,
        timeoutInMinutes: Swift.Int? = nil,
        vpcConfig: CodeBuildClientTypes.VpcConfig? = nil
    )
    {
        self.artifacts = artifacts
        self.autoRetryLimit = autoRetryLimit
        self.badgeEnabled = badgeEnabled
        self.buildBatchConfig = buildBatchConfig
        self.cache = cache
        self.concurrentBuildLimit = concurrentBuildLimit
        self.description = description
        self.encryptionKey = encryptionKey
        self.environment = environment
        self.fileSystemLocations = fileSystemLocations
        self.logsConfig = logsConfig
        self.name = name
        self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
        self.secondaryArtifacts = secondaryArtifacts
        self.secondarySourceVersions = secondarySourceVersions
        self.secondarySources = secondarySources
        self.serviceRole = serviceRole
        self.source = source
        self.sourceVersion = sourceVersion
        self.tags = tags
        self.timeoutInMinutes = timeoutInMinutes
        self.vpcConfig = vpcConfig
    }
}

public struct UpdateProjectOutput: Swift.Sendable {
    /// Information about the build project that was changed.
    public var project: CodeBuildClientTypes.Project?

    public init(
        project: CodeBuildClientTypes.Project? = nil
    )
    {
        self.project = project
    }
}

public struct UpdateProjectVisibilityInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the build project.
    /// This member is required.
    public var projectArn: Swift.String?
    /// Specifies the visibility of the project's builds. Possible values are: PUBLIC_READ The project builds are visible to the public. PRIVATE The project builds are not visible to the public.
    /// This member is required.
    public var projectVisibility: CodeBuildClientTypes.ProjectVisibilityType?
    /// The ARN of the IAM role that enables CodeBuild to access the CloudWatch Logs and Amazon S3 artifacts for the project's builds.
    public var resourceAccessRole: Swift.String?

    public init(
        projectArn: Swift.String? = nil,
        projectVisibility: CodeBuildClientTypes.ProjectVisibilityType? = nil,
        resourceAccessRole: Swift.String? = nil
    )
    {
        self.projectArn = projectArn
        self.projectVisibility = projectVisibility
        self.resourceAccessRole = resourceAccessRole
    }
}

public struct UpdateProjectVisibilityOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the build project.
    public var projectArn: Swift.String?
    /// Specifies the visibility of the project's builds. Possible values are: PUBLIC_READ The project builds are visible to the public. PRIVATE The project builds are not visible to the public.
    public var projectVisibility: CodeBuildClientTypes.ProjectVisibilityType?
    /// Contains the project identifier used with the public build APIs.
    public var publicProjectAlias: Swift.String?

    public init(
        projectArn: Swift.String? = nil,
        projectVisibility: CodeBuildClientTypes.ProjectVisibilityType? = nil,
        publicProjectAlias: Swift.String? = nil
    )
    {
        self.projectArn = projectArn
        self.projectVisibility = projectVisibility
        self.publicProjectAlias = publicProjectAlias
    }
}

public struct UpdateReportGroupInput: Swift.Sendable {
    /// The ARN of the report group to update.
    /// This member is required.
    public var arn: Swift.String?
    /// Used to specify an updated export type. Valid values are:
    ///
    /// * S3: The report results are exported to an S3 bucket.
    ///
    /// * NO_EXPORT: The report results are not exported.
    public var exportConfig: CodeBuildClientTypes.ReportExportConfig?
    /// An updated list of tag key and value pairs associated with this report group. These tags are available for use by Amazon Web Services services that support CodeBuild report group tags.
    public var tags: [CodeBuildClientTypes.Tag]?

    public init(
        arn: Swift.String? = nil,
        exportConfig: CodeBuildClientTypes.ReportExportConfig? = nil,
        tags: [CodeBuildClientTypes.Tag]? = nil
    )
    {
        self.arn = arn
        self.exportConfig = exportConfig
        self.tags = tags
    }
}

public struct UpdateReportGroupOutput: Swift.Sendable {
    /// Information about the updated report group.
    public var reportGroup: CodeBuildClientTypes.ReportGroup?

    public init(
        reportGroup: CodeBuildClientTypes.ReportGroup? = nil
    )
    {
        self.reportGroup = reportGroup
    }
}

public struct UpdateWebhookInput: Swift.Sendable {
    /// A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If branchFilter is empty, then all branches are built. It is recommended that you use filterGroups instead of branchFilter.
    public var branchFilter: Swift.String?
    /// Specifies the type of build this webhook will trigger.
    public var buildType: CodeBuildClientTypes.WebhookBuildType?
    /// An array of arrays of WebhookFilter objects used to determine if a webhook event can trigger a build. A filter group must contain at least one EVENTWebhookFilter.
    public var filterGroups: [[CodeBuildClientTypes.WebhookFilter]]?
    /// The name of the CodeBuild project.
    /// This member is required.
    public var projectName: Swift.String?
    /// A boolean value that specifies whether the associated GitHub repository's secret token should be updated. If you use Bitbucket for your repository, rotateSecret is ignored.
    public var rotateSecret: Swift.Bool?

    public init(
        branchFilter: Swift.String? = nil,
        buildType: CodeBuildClientTypes.WebhookBuildType? = nil,
        filterGroups: [[CodeBuildClientTypes.WebhookFilter]]? = nil,
        projectName: Swift.String? = nil,
        rotateSecret: Swift.Bool? = false
    )
    {
        self.branchFilter = branchFilter
        self.buildType = buildType
        self.filterGroups = filterGroups
        self.projectName = projectName
        self.rotateSecret = rotateSecret
    }
}

public struct UpdateWebhookOutput: Swift.Sendable {
    /// Information about a repository's webhook that is associated with a project in CodeBuild.
    public var webhook: CodeBuildClientTypes.Webhook?

    public init(
        webhook: CodeBuildClientTypes.Webhook? = nil
    )
    {
        self.webhook = webhook
    }
}

extension BatchDeleteBuildsInput {

    static func urlPathProvider(_ value: BatchDeleteBuildsInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetBuildBatchesInput {

    static func urlPathProvider(_ value: BatchGetBuildBatchesInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetBuildsInput {

    static func urlPathProvider(_ value: BatchGetBuildsInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetFleetsInput {

    static func urlPathProvider(_ value: BatchGetFleetsInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetProjectsInput {

    static func urlPathProvider(_ value: BatchGetProjectsInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetReportGroupsInput {

    static func urlPathProvider(_ value: BatchGetReportGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetReportsInput {

    static func urlPathProvider(_ value: BatchGetReportsInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFleetInput {

    static func urlPathProvider(_ value: CreateFleetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateProjectInput {

    static func urlPathProvider(_ value: CreateProjectInput) -> Swift.String? {
        return "/"
    }
}

extension CreateReportGroupInput {

    static func urlPathProvider(_ value: CreateReportGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateWebhookInput {

    static func urlPathProvider(_ value: CreateWebhookInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBuildBatchInput {

    static func urlPathProvider(_ value: DeleteBuildBatchInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteFleetInput {

    static func urlPathProvider(_ value: DeleteFleetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteProjectInput {

    static func urlPathProvider(_ value: DeleteProjectInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteReportInput {

    static func urlPathProvider(_ value: DeleteReportInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteReportGroupInput {

    static func urlPathProvider(_ value: DeleteReportGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteResourcePolicyInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteSourceCredentialsInput {

    static func urlPathProvider(_ value: DeleteSourceCredentialsInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteWebhookInput {

    static func urlPathProvider(_ value: DeleteWebhookInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCodeCoveragesInput {

    static func urlPathProvider(_ value: DescribeCodeCoveragesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTestCasesInput {

    static func urlPathProvider(_ value: DescribeTestCasesInput) -> Swift.String? {
        return "/"
    }
}

extension GetReportGroupTrendInput {

    static func urlPathProvider(_ value: GetReportGroupTrendInput) -> Swift.String? {
        return "/"
    }
}

extension GetResourcePolicyInput {

    static func urlPathProvider(_ value: GetResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension ImportSourceCredentialsInput {

    static func urlPathProvider(_ value: ImportSourceCredentialsInput) -> Swift.String? {
        return "/"
    }
}

extension InvalidateProjectCacheInput {

    static func urlPathProvider(_ value: InvalidateProjectCacheInput) -> Swift.String? {
        return "/"
    }
}

extension ListBuildBatchesInput {

    static func urlPathProvider(_ value: ListBuildBatchesInput) -> Swift.String? {
        return "/"
    }
}

extension ListBuildBatchesForProjectInput {

    static func urlPathProvider(_ value: ListBuildBatchesForProjectInput) -> Swift.String? {
        return "/"
    }
}

extension ListBuildsInput {

    static func urlPathProvider(_ value: ListBuildsInput) -> Swift.String? {
        return "/"
    }
}

extension ListBuildsForProjectInput {

    static func urlPathProvider(_ value: ListBuildsForProjectInput) -> Swift.String? {
        return "/"
    }
}

extension ListCuratedEnvironmentImagesInput {

    static func urlPathProvider(_ value: ListCuratedEnvironmentImagesInput) -> Swift.String? {
        return "/"
    }
}

extension ListFleetsInput {

    static func urlPathProvider(_ value: ListFleetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListProjectsInput {

    static func urlPathProvider(_ value: ListProjectsInput) -> Swift.String? {
        return "/"
    }
}

extension ListReportGroupsInput {

    static func urlPathProvider(_ value: ListReportGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListReportsInput {

    static func urlPathProvider(_ value: ListReportsInput) -> Swift.String? {
        return "/"
    }
}

extension ListReportsForReportGroupInput {

    static func urlPathProvider(_ value: ListReportsForReportGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ListSharedProjectsInput {

    static func urlPathProvider(_ value: ListSharedProjectsInput) -> Swift.String? {
        return "/"
    }
}

extension ListSharedReportGroupsInput {

    static func urlPathProvider(_ value: ListSharedReportGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListSourceCredentialsInput {

    static func urlPathProvider(_ value: ListSourceCredentialsInput) -> Swift.String? {
        return "/"
    }
}

extension PutResourcePolicyInput {

    static func urlPathProvider(_ value: PutResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension RetryBuildInput {

    static func urlPathProvider(_ value: RetryBuildInput) -> Swift.String? {
        return "/"
    }
}

extension RetryBuildBatchInput {

    static func urlPathProvider(_ value: RetryBuildBatchInput) -> Swift.String? {
        return "/"
    }
}

extension StartBuildInput {

    static func urlPathProvider(_ value: StartBuildInput) -> Swift.String? {
        return "/"
    }
}

extension StartBuildBatchInput {

    static func urlPathProvider(_ value: StartBuildBatchInput) -> Swift.String? {
        return "/"
    }
}

extension StopBuildInput {

    static func urlPathProvider(_ value: StopBuildInput) -> Swift.String? {
        return "/"
    }
}

extension StopBuildBatchInput {

    static func urlPathProvider(_ value: StopBuildBatchInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFleetInput {

    static func urlPathProvider(_ value: UpdateFleetInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateProjectInput {

    static func urlPathProvider(_ value: UpdateProjectInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateProjectVisibilityInput {

    static func urlPathProvider(_ value: UpdateProjectVisibilityInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateReportGroupInput {

    static func urlPathProvider(_ value: UpdateReportGroupInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateWebhookInput {

    static func urlPathProvider(_ value: UpdateWebhookInput) -> Swift.String? {
        return "/"
    }
}

extension BatchDeleteBuildsInput {

    static func write(value: BatchDeleteBuildsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ids"].writeList(value.ids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetBuildBatchesInput {

    static func write(value: BatchGetBuildBatchesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ids"].writeList(value.ids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetBuildsInput {

    static func write(value: BatchGetBuildsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ids"].writeList(value.ids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetFleetsInput {

    static func write(value: BatchGetFleetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["names"].writeList(value.names, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetProjectsInput {

    static func write(value: BatchGetProjectsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["names"].writeList(value.names, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetReportGroupsInput {

    static func write(value: BatchGetReportGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["reportGroupArns"].writeList(value.reportGroupArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetReportsInput {

    static func write(value: BatchGetReportsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["reportArns"].writeList(value.reportArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateFleetInput {

    static func write(value: CreateFleetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["baseCapacity"].write(value.baseCapacity)
        try writer["computeType"].write(value.computeType)
        try writer["environmentType"].write(value.environmentType)
        try writer["fleetServiceRole"].write(value.fleetServiceRole)
        try writer["imageId"].write(value.imageId)
        try writer["name"].write(value.name)
        try writer["overflowBehavior"].write(value.overflowBehavior)
        try writer["proxyConfiguration"].write(value.proxyConfiguration, with: CodeBuildClientTypes.ProxyConfiguration.write(value:to:))
        try writer["scalingConfiguration"].write(value.scalingConfiguration, with: CodeBuildClientTypes.ScalingConfigurationInput.write(value:to:))
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodeBuildClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["vpcConfig"].write(value.vpcConfig, with: CodeBuildClientTypes.VpcConfig.write(value:to:))
    }
}

extension CreateProjectInput {

    static func write(value: CreateProjectInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["artifacts"].write(value.artifacts, with: CodeBuildClientTypes.ProjectArtifacts.write(value:to:))
        try writer["autoRetryLimit"].write(value.autoRetryLimit)
        try writer["badgeEnabled"].write(value.badgeEnabled)
        try writer["buildBatchConfig"].write(value.buildBatchConfig, with: CodeBuildClientTypes.ProjectBuildBatchConfig.write(value:to:))
        try writer["cache"].write(value.cache, with: CodeBuildClientTypes.ProjectCache.write(value:to:))
        try writer["concurrentBuildLimit"].write(value.concurrentBuildLimit)
        try writer["description"].write(value.description)
        try writer["encryptionKey"].write(value.encryptionKey)
        try writer["environment"].write(value.environment, with: CodeBuildClientTypes.ProjectEnvironment.write(value:to:))
        try writer["fileSystemLocations"].writeList(value.fileSystemLocations, memberWritingClosure: CodeBuildClientTypes.ProjectFileSystemLocation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["logsConfig"].write(value.logsConfig, with: CodeBuildClientTypes.LogsConfig.write(value:to:))
        try writer["name"].write(value.name)
        try writer["queuedTimeoutInMinutes"].write(value.queuedTimeoutInMinutes)
        try writer["secondaryArtifacts"].writeList(value.secondaryArtifacts, memberWritingClosure: CodeBuildClientTypes.ProjectArtifacts.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["secondarySourceVersions"].writeList(value.secondarySourceVersions, memberWritingClosure: CodeBuildClientTypes.ProjectSourceVersion.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["secondarySources"].writeList(value.secondarySources, memberWritingClosure: CodeBuildClientTypes.ProjectSource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["serviceRole"].write(value.serviceRole)
        try writer["source"].write(value.source, with: CodeBuildClientTypes.ProjectSource.write(value:to:))
        try writer["sourceVersion"].write(value.sourceVersion)
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodeBuildClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["timeoutInMinutes"].write(value.timeoutInMinutes)
        try writer["vpcConfig"].write(value.vpcConfig, with: CodeBuildClientTypes.VpcConfig.write(value:to:))
    }
}

extension CreateReportGroupInput {

    static func write(value: CreateReportGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["exportConfig"].write(value.exportConfig, with: CodeBuildClientTypes.ReportExportConfig.write(value:to:))
        try writer["name"].write(value.name)
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodeBuildClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["type"].write(value.type)
    }
}

extension CreateWebhookInput {

    static func write(value: CreateWebhookInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["branchFilter"].write(value.branchFilter)
        try writer["buildType"].write(value.buildType)
        try writer["filterGroups"].writeList(value.filterGroups, memberWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: CodeBuildClientTypes.WebhookFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        try writer["manualCreation"].write(value.manualCreation)
        try writer["projectName"].write(value.projectName)
        try writer["scopeConfiguration"].write(value.scopeConfiguration, with: CodeBuildClientTypes.ScopeConfiguration.write(value:to:))
    }
}

extension DeleteBuildBatchInput {

    static func write(value: DeleteBuildBatchInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
    }
}

extension DeleteFleetInput {

    static func write(value: DeleteFleetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arn"].write(value.arn)
    }
}

extension DeleteProjectInput {

    static func write(value: DeleteProjectInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension DeleteReportInput {

    static func write(value: DeleteReportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arn"].write(value.arn)
    }
}

extension DeleteReportGroupInput {

    static func write(value: DeleteReportGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arn"].write(value.arn)
        try writer["deleteReports"].write(value.deleteReports)
    }
}

extension DeleteResourcePolicyInput {

    static func write(value: DeleteResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
    }
}

extension DeleteSourceCredentialsInput {

    static func write(value: DeleteSourceCredentialsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arn"].write(value.arn)
    }
}

extension DeleteWebhookInput {

    static func write(value: DeleteWebhookInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["projectName"].write(value.projectName)
    }
}

extension DescribeCodeCoveragesInput {

    static func write(value: DescribeCodeCoveragesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxLineCoveragePercentage"].write(value.maxLineCoveragePercentage)
        try writer["maxResults"].write(value.maxResults)
        try writer["minLineCoveragePercentage"].write(value.minLineCoveragePercentage)
        try writer["nextToken"].write(value.nextToken)
        try writer["reportArn"].write(value.reportArn)
        try writer["sortBy"].write(value.sortBy)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension DescribeTestCasesInput {

    static func write(value: DescribeTestCasesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filter"].write(value.filter, with: CodeBuildClientTypes.TestCaseFilter.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["reportArn"].write(value.reportArn)
    }
}

extension GetReportGroupTrendInput {

    static func write(value: GetReportGroupTrendInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["numOfReports"].write(value.numOfReports)
        try writer["reportGroupArn"].write(value.reportGroupArn)
        try writer["trendField"].write(value.trendField)
    }
}

extension GetResourcePolicyInput {

    static func write(value: GetResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
    }
}

extension ImportSourceCredentialsInput {

    static func write(value: ImportSourceCredentialsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["authType"].write(value.authType)
        try writer["serverType"].write(value.serverType)
        try writer["shouldOverwrite"].write(value.shouldOverwrite)
        try writer["token"].write(value.token)
        try writer["username"].write(value.username)
    }
}

extension InvalidateProjectCacheInput {

    static func write(value: InvalidateProjectCacheInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["projectName"].write(value.projectName)
    }
}

extension ListBuildBatchesInput {

    static func write(value: ListBuildBatchesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filter"].write(value.filter, with: CodeBuildClientTypes.BuildBatchFilter.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension ListBuildBatchesForProjectInput {

    static func write(value: ListBuildBatchesForProjectInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filter"].write(value.filter, with: CodeBuildClientTypes.BuildBatchFilter.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["projectName"].write(value.projectName)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension ListBuildsInput {

    static func write(value: ListBuildsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension ListBuildsForProjectInput {

    static func write(value: ListBuildsForProjectInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
        try writer["projectName"].write(value.projectName)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension ListCuratedEnvironmentImagesInput {

    static func write(value: ListCuratedEnvironmentImagesInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension ListFleetsInput {

    static func write(value: ListFleetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension ListProjectsInput {

    static func write(value: ListProjectsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension ListReportGroupsInput {

    static func write(value: ListReportGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension ListReportsInput {

    static func write(value: ListReportsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filter"].write(value.filter, with: CodeBuildClientTypes.ReportFilter.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension ListReportsForReportGroupInput {

    static func write(value: ListReportsForReportGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filter"].write(value.filter, with: CodeBuildClientTypes.ReportFilter.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["reportGroupArn"].write(value.reportGroupArn)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension ListSharedProjectsInput {

    static func write(value: ListSharedProjectsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension ListSharedReportGroupsInput {

    static func write(value: ListSharedReportGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension ListSourceCredentialsInput {

    static func write(value: ListSourceCredentialsInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension PutResourcePolicyInput {

    static func write(value: PutResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["policy"].write(value.policy)
        try writer["resourceArn"].write(value.resourceArn)
    }
}

extension RetryBuildInput {

    static func write(value: RetryBuildInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["idempotencyToken"].write(value.idempotencyToken)
    }
}

extension RetryBuildBatchInput {

    static func write(value: RetryBuildBatchInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["idempotencyToken"].write(value.idempotencyToken)
        try writer["retryType"].write(value.retryType)
    }
}

extension StartBuildInput {

    static func write(value: StartBuildInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["artifactsOverride"].write(value.artifactsOverride, with: CodeBuildClientTypes.ProjectArtifacts.write(value:to:))
        try writer["autoRetryLimitOverride"].write(value.autoRetryLimitOverride)
        try writer["buildStatusConfigOverride"].write(value.buildStatusConfigOverride, with: CodeBuildClientTypes.BuildStatusConfig.write(value:to:))
        try writer["buildspecOverride"].write(value.buildspecOverride)
        try writer["cacheOverride"].write(value.cacheOverride, with: CodeBuildClientTypes.ProjectCache.write(value:to:))
        try writer["certificateOverride"].write(value.certificateOverride)
        try writer["computeTypeOverride"].write(value.computeTypeOverride)
        try writer["debugSessionEnabled"].write(value.debugSessionEnabled)
        try writer["encryptionKeyOverride"].write(value.encryptionKeyOverride)
        try writer["environmentTypeOverride"].write(value.environmentTypeOverride)
        try writer["environmentVariablesOverride"].writeList(value.environmentVariablesOverride, memberWritingClosure: CodeBuildClientTypes.EnvironmentVariable.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fleetOverride"].write(value.fleetOverride, with: CodeBuildClientTypes.ProjectFleet.write(value:to:))
        try writer["gitCloneDepthOverride"].write(value.gitCloneDepthOverride)
        try writer["gitSubmodulesConfigOverride"].write(value.gitSubmodulesConfigOverride, with: CodeBuildClientTypes.GitSubmodulesConfig.write(value:to:))
        try writer["idempotencyToken"].write(value.idempotencyToken)
        try writer["imageOverride"].write(value.imageOverride)
        try writer["imagePullCredentialsTypeOverride"].write(value.imagePullCredentialsTypeOverride)
        try writer["insecureSslOverride"].write(value.insecureSslOverride)
        try writer["logsConfigOverride"].write(value.logsConfigOverride, with: CodeBuildClientTypes.LogsConfig.write(value:to:))
        try writer["privilegedModeOverride"].write(value.privilegedModeOverride)
        try writer["projectName"].write(value.projectName)
        try writer["queuedTimeoutInMinutesOverride"].write(value.queuedTimeoutInMinutesOverride)
        try writer["registryCredentialOverride"].write(value.registryCredentialOverride, with: CodeBuildClientTypes.RegistryCredential.write(value:to:))
        try writer["reportBuildStatusOverride"].write(value.reportBuildStatusOverride)
        try writer["secondaryArtifactsOverride"].writeList(value.secondaryArtifactsOverride, memberWritingClosure: CodeBuildClientTypes.ProjectArtifacts.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["secondarySourcesOverride"].writeList(value.secondarySourcesOverride, memberWritingClosure: CodeBuildClientTypes.ProjectSource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["secondarySourcesVersionOverride"].writeList(value.secondarySourcesVersionOverride, memberWritingClosure: CodeBuildClientTypes.ProjectSourceVersion.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["serviceRoleOverride"].write(value.serviceRoleOverride)
        try writer["sourceAuthOverride"].write(value.sourceAuthOverride, with: CodeBuildClientTypes.SourceAuth.write(value:to:))
        try writer["sourceLocationOverride"].write(value.sourceLocationOverride)
        try writer["sourceTypeOverride"].write(value.sourceTypeOverride)
        try writer["sourceVersion"].write(value.sourceVersion)
        try writer["timeoutInMinutesOverride"].write(value.timeoutInMinutesOverride)
    }
}

extension StartBuildBatchInput {

    static func write(value: StartBuildBatchInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["artifactsOverride"].write(value.artifactsOverride, with: CodeBuildClientTypes.ProjectArtifacts.write(value:to:))
        try writer["buildBatchConfigOverride"].write(value.buildBatchConfigOverride, with: CodeBuildClientTypes.ProjectBuildBatchConfig.write(value:to:))
        try writer["buildTimeoutInMinutesOverride"].write(value.buildTimeoutInMinutesOverride)
        try writer["buildspecOverride"].write(value.buildspecOverride)
        try writer["cacheOverride"].write(value.cacheOverride, with: CodeBuildClientTypes.ProjectCache.write(value:to:))
        try writer["certificateOverride"].write(value.certificateOverride)
        try writer["computeTypeOverride"].write(value.computeTypeOverride)
        try writer["debugSessionEnabled"].write(value.debugSessionEnabled)
        try writer["encryptionKeyOverride"].write(value.encryptionKeyOverride)
        try writer["environmentTypeOverride"].write(value.environmentTypeOverride)
        try writer["environmentVariablesOverride"].writeList(value.environmentVariablesOverride, memberWritingClosure: CodeBuildClientTypes.EnvironmentVariable.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["gitCloneDepthOverride"].write(value.gitCloneDepthOverride)
        try writer["gitSubmodulesConfigOverride"].write(value.gitSubmodulesConfigOverride, with: CodeBuildClientTypes.GitSubmodulesConfig.write(value:to:))
        try writer["idempotencyToken"].write(value.idempotencyToken)
        try writer["imageOverride"].write(value.imageOverride)
        try writer["imagePullCredentialsTypeOverride"].write(value.imagePullCredentialsTypeOverride)
        try writer["insecureSslOverride"].write(value.insecureSslOverride)
        try writer["logsConfigOverride"].write(value.logsConfigOverride, with: CodeBuildClientTypes.LogsConfig.write(value:to:))
        try writer["privilegedModeOverride"].write(value.privilegedModeOverride)
        try writer["projectName"].write(value.projectName)
        try writer["queuedTimeoutInMinutesOverride"].write(value.queuedTimeoutInMinutesOverride)
        try writer["registryCredentialOverride"].write(value.registryCredentialOverride, with: CodeBuildClientTypes.RegistryCredential.write(value:to:))
        try writer["reportBuildBatchStatusOverride"].write(value.reportBuildBatchStatusOverride)
        try writer["secondaryArtifactsOverride"].writeList(value.secondaryArtifactsOverride, memberWritingClosure: CodeBuildClientTypes.ProjectArtifacts.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["secondarySourcesOverride"].writeList(value.secondarySourcesOverride, memberWritingClosure: CodeBuildClientTypes.ProjectSource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["secondarySourcesVersionOverride"].writeList(value.secondarySourcesVersionOverride, memberWritingClosure: CodeBuildClientTypes.ProjectSourceVersion.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["serviceRoleOverride"].write(value.serviceRoleOverride)
        try writer["sourceAuthOverride"].write(value.sourceAuthOverride, with: CodeBuildClientTypes.SourceAuth.write(value:to:))
        try writer["sourceLocationOverride"].write(value.sourceLocationOverride)
        try writer["sourceTypeOverride"].write(value.sourceTypeOverride)
        try writer["sourceVersion"].write(value.sourceVersion)
    }
}

extension StopBuildInput {

    static func write(value: StopBuildInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
    }
}

extension StopBuildBatchInput {

    static func write(value: StopBuildBatchInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
    }
}

extension UpdateFleetInput {

    static func write(value: UpdateFleetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arn"].write(value.arn)
        try writer["baseCapacity"].write(value.baseCapacity)
        try writer["computeType"].write(value.computeType)
        try writer["environmentType"].write(value.environmentType)
        try writer["fleetServiceRole"].write(value.fleetServiceRole)
        try writer["imageId"].write(value.imageId)
        try writer["overflowBehavior"].write(value.overflowBehavior)
        try writer["proxyConfiguration"].write(value.proxyConfiguration, with: CodeBuildClientTypes.ProxyConfiguration.write(value:to:))
        try writer["scalingConfiguration"].write(value.scalingConfiguration, with: CodeBuildClientTypes.ScalingConfigurationInput.write(value:to:))
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodeBuildClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["vpcConfig"].write(value.vpcConfig, with: CodeBuildClientTypes.VpcConfig.write(value:to:))
    }
}

extension UpdateProjectInput {

    static func write(value: UpdateProjectInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["artifacts"].write(value.artifacts, with: CodeBuildClientTypes.ProjectArtifacts.write(value:to:))
        try writer["autoRetryLimit"].write(value.autoRetryLimit)
        try writer["badgeEnabled"].write(value.badgeEnabled)
        try writer["buildBatchConfig"].write(value.buildBatchConfig, with: CodeBuildClientTypes.ProjectBuildBatchConfig.write(value:to:))
        try writer["cache"].write(value.cache, with: CodeBuildClientTypes.ProjectCache.write(value:to:))
        try writer["concurrentBuildLimit"].write(value.concurrentBuildLimit)
        try writer["description"].write(value.description)
        try writer["encryptionKey"].write(value.encryptionKey)
        try writer["environment"].write(value.environment, with: CodeBuildClientTypes.ProjectEnvironment.write(value:to:))
        try writer["fileSystemLocations"].writeList(value.fileSystemLocations, memberWritingClosure: CodeBuildClientTypes.ProjectFileSystemLocation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["logsConfig"].write(value.logsConfig, with: CodeBuildClientTypes.LogsConfig.write(value:to:))
        try writer["name"].write(value.name)
        try writer["queuedTimeoutInMinutes"].write(value.queuedTimeoutInMinutes)
        try writer["secondaryArtifacts"].writeList(value.secondaryArtifacts, memberWritingClosure: CodeBuildClientTypes.ProjectArtifacts.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["secondarySourceVersions"].writeList(value.secondarySourceVersions, memberWritingClosure: CodeBuildClientTypes.ProjectSourceVersion.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["secondarySources"].writeList(value.secondarySources, memberWritingClosure: CodeBuildClientTypes.ProjectSource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["serviceRole"].write(value.serviceRole)
        try writer["source"].write(value.source, with: CodeBuildClientTypes.ProjectSource.write(value:to:))
        try writer["sourceVersion"].write(value.sourceVersion)
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodeBuildClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["timeoutInMinutes"].write(value.timeoutInMinutes)
        try writer["vpcConfig"].write(value.vpcConfig, with: CodeBuildClientTypes.VpcConfig.write(value:to:))
    }
}

extension UpdateProjectVisibilityInput {

    static func write(value: UpdateProjectVisibilityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["projectArn"].write(value.projectArn)
        try writer["projectVisibility"].write(value.projectVisibility)
        try writer["resourceAccessRole"].write(value.resourceAccessRole)
    }
}

extension UpdateReportGroupInput {

    static func write(value: UpdateReportGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arn"].write(value.arn)
        try writer["exportConfig"].write(value.exportConfig, with: CodeBuildClientTypes.ReportExportConfig.write(value:to:))
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodeBuildClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateWebhookInput {

    static func write(value: UpdateWebhookInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["branchFilter"].write(value.branchFilter)
        try writer["buildType"].write(value.buildType)
        try writer["filterGroups"].writeList(value.filterGroups, memberWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: CodeBuildClientTypes.WebhookFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        try writer["projectName"].write(value.projectName)
        try writer["rotateSecret"].write(value.rotateSecret)
    }
}

extension BatchDeleteBuildsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDeleteBuildsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDeleteBuildsOutput()
        value.buildsDeleted = try reader["buildsDeleted"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.buildsNotDeleted = try reader["buildsNotDeleted"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.BuildNotDeleted.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchGetBuildBatchesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetBuildBatchesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetBuildBatchesOutput()
        value.buildBatches = try reader["buildBatches"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.BuildBatch.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.buildBatchesNotFound = try reader["buildBatchesNotFound"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchGetBuildsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetBuildsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetBuildsOutput()
        value.builds = try reader["builds"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.Build.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.buildsNotFound = try reader["buildsNotFound"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchGetFleetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetFleetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetFleetsOutput()
        value.fleets = try reader["fleets"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.Fleet.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.fleetsNotFound = try reader["fleetsNotFound"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchGetProjectsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetProjectsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetProjectsOutput()
        value.projects = try reader["projects"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.Project.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.projectsNotFound = try reader["projectsNotFound"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchGetReportGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetReportGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetReportGroupsOutput()
        value.reportGroups = try reader["reportGroups"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ReportGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.reportGroupsNotFound = try reader["reportGroupsNotFound"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchGetReportsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetReportsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetReportsOutput()
        value.reports = try reader["reports"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.Report.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.reportsNotFound = try reader["reportsNotFound"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateFleetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFleetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFleetOutput()
        value.fleet = try reader["fleet"].readIfPresent(with: CodeBuildClientTypes.Fleet.read(from:))
        return value
    }
}

extension CreateProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateProjectOutput()
        value.project = try reader["project"].readIfPresent(with: CodeBuildClientTypes.Project.read(from:))
        return value
    }
}

extension CreateReportGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateReportGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateReportGroupOutput()
        value.reportGroup = try reader["reportGroup"].readIfPresent(with: CodeBuildClientTypes.ReportGroup.read(from:))
        return value
    }
}

extension CreateWebhookOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWebhookOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateWebhookOutput()
        value.webhook = try reader["webhook"].readIfPresent(with: CodeBuildClientTypes.Webhook.read(from:))
        return value
    }
}

extension DeleteBuildBatchOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBuildBatchOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBuildBatchOutput()
        value.buildsDeleted = try reader["buildsDeleted"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.buildsNotDeleted = try reader["buildsNotDeleted"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.BuildNotDeleted.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.statusCode = try reader["statusCode"].readIfPresent()
        return value
    }
}

extension DeleteFleetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFleetOutput {
        return DeleteFleetOutput()
    }
}

extension DeleteProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteProjectOutput {
        return DeleteProjectOutput()
    }
}

extension DeleteReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteReportOutput {
        return DeleteReportOutput()
    }
}

extension DeleteReportGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteReportGroupOutput {
        return DeleteReportGroupOutput()
    }
}

extension DeleteResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcePolicyOutput {
        return DeleteResourcePolicyOutput()
    }
}

extension DeleteSourceCredentialsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSourceCredentialsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteSourceCredentialsOutput()
        value.arn = try reader["arn"].readIfPresent()
        return value
    }
}

extension DeleteWebhookOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteWebhookOutput {
        return DeleteWebhookOutput()
    }
}

extension DescribeCodeCoveragesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCodeCoveragesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeCodeCoveragesOutput()
        value.codeCoverages = try reader["codeCoverages"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.CodeCoverage.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeTestCasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTestCasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTestCasesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.testCases = try reader["testCases"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.TestCase.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetReportGroupTrendOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetReportGroupTrendOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetReportGroupTrendOutput()
        value.rawData = try reader["rawData"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ReportWithRawData.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.stats = try reader["stats"].readIfPresent(with: CodeBuildClientTypes.ReportGroupTrendStats.read(from:))
        return value
    }
}

extension GetResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourcePolicyOutput()
        value.policy = try reader["policy"].readIfPresent()
        return value
    }
}

extension ImportSourceCredentialsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportSourceCredentialsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportSourceCredentialsOutput()
        value.arn = try reader["arn"].readIfPresent()
        return value
    }
}

extension InvalidateProjectCacheOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> InvalidateProjectCacheOutput {
        return InvalidateProjectCacheOutput()
    }
}

extension ListBuildBatchesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBuildBatchesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBuildBatchesOutput()
        value.ids = try reader["ids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListBuildBatchesForProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBuildBatchesForProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBuildBatchesForProjectOutput()
        value.ids = try reader["ids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListBuildsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBuildsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBuildsOutput()
        value.ids = try reader["ids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListBuildsForProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBuildsForProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBuildsForProjectOutput()
        value.ids = try reader["ids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListCuratedEnvironmentImagesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCuratedEnvironmentImagesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCuratedEnvironmentImagesOutput()
        value.platforms = try reader["platforms"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.EnvironmentPlatform.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListFleetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFleetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFleetsOutput()
        value.fleets = try reader["fleets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListProjectsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListProjectsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListProjectsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.projects = try reader["projects"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListReportGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListReportGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListReportGroupsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.reportGroups = try reader["reportGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListReportsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListReportsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListReportsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.reports = try reader["reports"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListReportsForReportGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListReportsForReportGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListReportsForReportGroupOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.reports = try reader["reports"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSharedProjectsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSharedProjectsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSharedProjectsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.projects = try reader["projects"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSharedReportGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSharedReportGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSharedReportGroupsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.reportGroups = try reader["reportGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSourceCredentialsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSourceCredentialsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSourceCredentialsOutput()
        value.sourceCredentialsInfos = try reader["sourceCredentialsInfos"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.SourceCredentialsInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutResourcePolicyOutput()
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        return value
    }
}

extension RetryBuildOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RetryBuildOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RetryBuildOutput()
        value.build = try reader["build"].readIfPresent(with: CodeBuildClientTypes.Build.read(from:))
        return value
    }
}

extension RetryBuildBatchOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RetryBuildBatchOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RetryBuildBatchOutput()
        value.buildBatch = try reader["buildBatch"].readIfPresent(with: CodeBuildClientTypes.BuildBatch.read(from:))
        return value
    }
}

extension StartBuildOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartBuildOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartBuildOutput()
        value.build = try reader["build"].readIfPresent(with: CodeBuildClientTypes.Build.read(from:))
        return value
    }
}

extension StartBuildBatchOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartBuildBatchOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartBuildBatchOutput()
        value.buildBatch = try reader["buildBatch"].readIfPresent(with: CodeBuildClientTypes.BuildBatch.read(from:))
        return value
    }
}

extension StopBuildOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopBuildOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopBuildOutput()
        value.build = try reader["build"].readIfPresent(with: CodeBuildClientTypes.Build.read(from:))
        return value
    }
}

extension StopBuildBatchOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopBuildBatchOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopBuildBatchOutput()
        value.buildBatch = try reader["buildBatch"].readIfPresent(with: CodeBuildClientTypes.BuildBatch.read(from:))
        return value
    }
}

extension UpdateFleetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFleetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFleetOutput()
        value.fleet = try reader["fleet"].readIfPresent(with: CodeBuildClientTypes.Fleet.read(from:))
        return value
    }
}

extension UpdateProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateProjectOutput()
        value.project = try reader["project"].readIfPresent(with: CodeBuildClientTypes.Project.read(from:))
        return value
    }
}

extension UpdateProjectVisibilityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateProjectVisibilityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateProjectVisibilityOutput()
        value.projectArn = try reader["projectArn"].readIfPresent()
        value.projectVisibility = try reader["projectVisibility"].readIfPresent()
        value.publicProjectAlias = try reader["publicProjectAlias"].readIfPresent()
        return value
    }
}

extension UpdateReportGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateReportGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateReportGroupOutput()
        value.reportGroup = try reader["reportGroup"].readIfPresent(with: CodeBuildClientTypes.ReportGroup.read(from:))
        return value
    }
}

extension UpdateWebhookOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateWebhookOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateWebhookOutput()
        value.webhook = try reader["webhook"].readIfPresent(with: CodeBuildClientTypes.Webhook.read(from:))
        return value
    }
}

enum BatchDeleteBuildsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetBuildBatchesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetBuildsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetFleetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetProjectsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetReportGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetReportsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFleetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccountLimitExceededException": return try AccountLimitExceededException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccountLimitExceededException": return try AccountLimitExceededException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateReportGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccountLimitExceededException": return try AccountLimitExceededException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWebhookOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "OAuthProviderException": return try OAuthProviderException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBuildBatchOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFleetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteReportGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSourceCredentialsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteWebhookOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "OAuthProviderException": return try OAuthProviderException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCodeCoveragesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTestCasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetReportGroupTrendOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportSourceCredentialsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccountLimitExceededException": return try AccountLimitExceededException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum InvalidateProjectCacheOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBuildBatchesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBuildBatchesForProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBuildsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBuildsForProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCuratedEnvironmentImagesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFleetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListProjectsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListReportGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListReportsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListReportsForReportGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSharedProjectsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSharedReportGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSourceCredentialsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RetryBuildOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccountLimitExceededException": return try AccountLimitExceededException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RetryBuildBatchOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartBuildOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccountLimitExceededException": return try AccountLimitExceededException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartBuildBatchOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopBuildOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopBuildBatchOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFleetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccountLimitExceededException": return try AccountLimitExceededException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateProjectVisibilityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateReportGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateWebhookOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "OAuthProviderException": return try OAuthProviderException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InvalidInputException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidInputException {
        let reader = baseError.errorBodyReader
        var value = InvalidInputException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccountLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccountLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = AccountLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = ResourceAlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OAuthProviderException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> OAuthProviderException {
        let reader = baseError.errorBodyReader
        var value = OAuthProviderException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CodeBuildClientTypes.BuildNotDeleted {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.BuildNotDeleted {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.BuildNotDeleted()
        value.id = try reader["id"].readIfPresent()
        value.statusCode = try reader["statusCode"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.BuildBatch {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.BuildBatch {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.BuildBatch()
        value.id = try reader["id"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.currentPhase = try reader["currentPhase"].readIfPresent()
        value.buildBatchStatus = try reader["buildBatchStatus"].readIfPresent()
        value.sourceVersion = try reader["sourceVersion"].readIfPresent()
        value.resolvedSourceVersion = try reader["resolvedSourceVersion"].readIfPresent()
        value.projectName = try reader["projectName"].readIfPresent()
        value.phases = try reader["phases"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.BuildBatchPhase.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.source = try reader["source"].readIfPresent(with: CodeBuildClientTypes.ProjectSource.read(from:))
        value.secondarySources = try reader["secondarySources"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ProjectSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.secondarySourceVersions = try reader["secondarySourceVersions"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ProjectSourceVersion.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.artifacts = try reader["artifacts"].readIfPresent(with: CodeBuildClientTypes.BuildArtifacts.read(from:))
        value.secondaryArtifacts = try reader["secondaryArtifacts"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.BuildArtifacts.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.cache = try reader["cache"].readIfPresent(with: CodeBuildClientTypes.ProjectCache.read(from:))
        value.environment = try reader["environment"].readIfPresent(with: CodeBuildClientTypes.ProjectEnvironment.read(from:))
        value.serviceRole = try reader["serviceRole"].readIfPresent()
        value.logConfig = try reader["logConfig"].readIfPresent(with: CodeBuildClientTypes.LogsConfig.read(from:))
        value.buildTimeoutInMinutes = try reader["buildTimeoutInMinutes"].readIfPresent()
        value.queuedTimeoutInMinutes = try reader["queuedTimeoutInMinutes"].readIfPresent()
        value.complete = try reader["complete"].readIfPresent() ?? false
        value.initiator = try reader["initiator"].readIfPresent()
        value.vpcConfig = try reader["vpcConfig"].readIfPresent(with: CodeBuildClientTypes.VpcConfig.read(from:))
        value.encryptionKey = try reader["encryptionKey"].readIfPresent()
        value.buildBatchNumber = try reader["buildBatchNumber"].readIfPresent()
        value.fileSystemLocations = try reader["fileSystemLocations"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ProjectFileSystemLocation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.buildBatchConfig = try reader["buildBatchConfig"].readIfPresent(with: CodeBuildClientTypes.ProjectBuildBatchConfig.read(from:))
        value.buildGroups = try reader["buildGroups"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.BuildGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.debugSessionEnabled = try reader["debugSessionEnabled"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.BuildGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.BuildGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.BuildGroup()
        value.identifier = try reader["identifier"].readIfPresent()
        value.dependsOn = try reader["dependsOn"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.ignoreFailure = try reader["ignoreFailure"].readIfPresent() ?? false
        value.currentBuildSummary = try reader["currentBuildSummary"].readIfPresent(with: CodeBuildClientTypes.BuildSummary.read(from:))
        value.priorBuildSummaryList = try reader["priorBuildSummaryList"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.BuildSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeBuildClientTypes.BuildSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.BuildSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.BuildSummary()
        value.arn = try reader["arn"].readIfPresent()
        value.requestedOn = try reader["requestedOn"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.buildStatus = try reader["buildStatus"].readIfPresent()
        value.primaryArtifact = try reader["primaryArtifact"].readIfPresent(with: CodeBuildClientTypes.ResolvedArtifact.read(from:))
        value.secondaryArtifacts = try reader["secondaryArtifacts"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ResolvedArtifact.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeBuildClientTypes.ResolvedArtifact {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ResolvedArtifact {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ResolvedArtifact()
        value.type = try reader["type"].readIfPresent()
        value.location = try reader["location"].readIfPresent()
        value.identifier = try reader["identifier"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.ProjectBuildBatchConfig {

    static func write(value: CodeBuildClientTypes.ProjectBuildBatchConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["batchReportMode"].write(value.batchReportMode)
        try writer["combineArtifacts"].write(value.combineArtifacts)
        try writer["restrictions"].write(value.restrictions, with: CodeBuildClientTypes.BatchRestrictions.write(value:to:))
        try writer["serviceRole"].write(value.serviceRole)
        try writer["timeoutInMins"].write(value.timeoutInMins)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ProjectBuildBatchConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ProjectBuildBatchConfig()
        value.serviceRole = try reader["serviceRole"].readIfPresent()
        value.combineArtifacts = try reader["combineArtifacts"].readIfPresent()
        value.restrictions = try reader["restrictions"].readIfPresent(with: CodeBuildClientTypes.BatchRestrictions.read(from:))
        value.timeoutInMins = try reader["timeoutInMins"].readIfPresent()
        value.batchReportMode = try reader["batchReportMode"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.BatchRestrictions {

    static func write(value: CodeBuildClientTypes.BatchRestrictions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["computeTypesAllowed"].writeList(value.computeTypesAllowed, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maximumBuildsAllowed"].write(value.maximumBuildsAllowed)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.BatchRestrictions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.BatchRestrictions()
        value.maximumBuildsAllowed = try reader["maximumBuildsAllowed"].readIfPresent()
        value.computeTypesAllowed = try reader["computeTypesAllowed"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeBuildClientTypes.ProjectFileSystemLocation {

    static func write(value: CodeBuildClientTypes.ProjectFileSystemLocation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["identifier"].write(value.identifier)
        try writer["location"].write(value.location)
        try writer["mountOptions"].write(value.mountOptions)
        try writer["mountPoint"].write(value.mountPoint)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ProjectFileSystemLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ProjectFileSystemLocation()
        value.type = try reader["type"].readIfPresent()
        value.location = try reader["location"].readIfPresent()
        value.mountPoint = try reader["mountPoint"].readIfPresent()
        value.identifier = try reader["identifier"].readIfPresent()
        value.mountOptions = try reader["mountOptions"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.VpcConfig {

    static func write(value: CodeBuildClientTypes.VpcConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["securityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["vpcId"].write(value.vpcId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.VpcConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.VpcConfig()
        value.vpcId = try reader["vpcId"].readIfPresent()
        value.subnets = try reader["subnets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.securityGroupIds = try reader["securityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeBuildClientTypes.LogsConfig {

    static func write(value: CodeBuildClientTypes.LogsConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cloudWatchLogs"].write(value.cloudWatchLogs, with: CodeBuildClientTypes.CloudWatchLogsConfig.write(value:to:))
        try writer["s3Logs"].write(value.s3Logs, with: CodeBuildClientTypes.S3LogsConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.LogsConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.LogsConfig()
        value.cloudWatchLogs = try reader["cloudWatchLogs"].readIfPresent(with: CodeBuildClientTypes.CloudWatchLogsConfig.read(from:))
        value.s3Logs = try reader["s3Logs"].readIfPresent(with: CodeBuildClientTypes.S3LogsConfig.read(from:))
        return value
    }
}

extension CodeBuildClientTypes.S3LogsConfig {

    static func write(value: CodeBuildClientTypes.S3LogsConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketOwnerAccess"].write(value.bucketOwnerAccess)
        try writer["encryptionDisabled"].write(value.encryptionDisabled)
        try writer["location"].write(value.location)
        try writer["status"].write(value.status)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.S3LogsConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.S3LogsConfig()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.location = try reader["location"].readIfPresent()
        value.encryptionDisabled = try reader["encryptionDisabled"].readIfPresent()
        value.bucketOwnerAccess = try reader["bucketOwnerAccess"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.CloudWatchLogsConfig {

    static func write(value: CodeBuildClientTypes.CloudWatchLogsConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["groupName"].write(value.groupName)
        try writer["status"].write(value.status)
        try writer["streamName"].write(value.streamName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.CloudWatchLogsConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.CloudWatchLogsConfig()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.groupName = try reader["groupName"].readIfPresent()
        value.streamName = try reader["streamName"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.ProjectEnvironment {

    static func write(value: CodeBuildClientTypes.ProjectEnvironment?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["certificate"].write(value.certificate)
        try writer["computeType"].write(value.computeType)
        try writer["environmentVariables"].writeList(value.environmentVariables, memberWritingClosure: CodeBuildClientTypes.EnvironmentVariable.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fleet"].write(value.fleet, with: CodeBuildClientTypes.ProjectFleet.write(value:to:))
        try writer["image"].write(value.image)
        try writer["imagePullCredentialsType"].write(value.imagePullCredentialsType)
        try writer["privilegedMode"].write(value.privilegedMode)
        try writer["registryCredential"].write(value.registryCredential, with: CodeBuildClientTypes.RegistryCredential.write(value:to:))
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ProjectEnvironment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ProjectEnvironment()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.image = try reader["image"].readIfPresent() ?? ""
        value.computeType = try reader["computeType"].readIfPresent() ?? .sdkUnknown("")
        value.fleet = try reader["fleet"].readIfPresent(with: CodeBuildClientTypes.ProjectFleet.read(from:))
        value.environmentVariables = try reader["environmentVariables"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.EnvironmentVariable.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.privilegedMode = try reader["privilegedMode"].readIfPresent()
        value.certificate = try reader["certificate"].readIfPresent()
        value.registryCredential = try reader["registryCredential"].readIfPresent(with: CodeBuildClientTypes.RegistryCredential.read(from:))
        value.imagePullCredentialsType = try reader["imagePullCredentialsType"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.RegistryCredential {

    static func write(value: CodeBuildClientTypes.RegistryCredential?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["credential"].write(value.credential)
        try writer["credentialProvider"].write(value.credentialProvider)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.RegistryCredential {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.RegistryCredential()
        value.credential = try reader["credential"].readIfPresent() ?? ""
        value.credentialProvider = try reader["credentialProvider"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension CodeBuildClientTypes.EnvironmentVariable {

    static func write(value: CodeBuildClientTypes.EnvironmentVariable?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["type"].write(value.type)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.EnvironmentVariable {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.EnvironmentVariable()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.value = try reader["value"].readIfPresent() ?? ""
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.ProjectFleet {

    static func write(value: CodeBuildClientTypes.ProjectFleet?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fleetArn"].write(value.fleetArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ProjectFleet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ProjectFleet()
        value.fleetArn = try reader["fleetArn"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.ProjectCache {

    static func write(value: CodeBuildClientTypes.ProjectCache?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["location"].write(value.location)
        try writer["modes"].writeList(value.modes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CodeBuildClientTypes.CacheMode>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ProjectCache {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ProjectCache()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.location = try reader["location"].readIfPresent()
        value.modes = try reader["modes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CodeBuildClientTypes.CacheMode>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeBuildClientTypes.BuildArtifacts {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.BuildArtifacts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.BuildArtifacts()
        value.location = try reader["location"].readIfPresent()
        value.sha256sum = try reader["sha256sum"].readIfPresent()
        value.md5sum = try reader["md5sum"].readIfPresent()
        value.overrideArtifactName = try reader["overrideArtifactName"].readIfPresent()
        value.encryptionDisabled = try reader["encryptionDisabled"].readIfPresent()
        value.artifactIdentifier = try reader["artifactIdentifier"].readIfPresent()
        value.bucketOwnerAccess = try reader["bucketOwnerAccess"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.ProjectSourceVersion {

    static func write(value: CodeBuildClientTypes.ProjectSourceVersion?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sourceIdentifier"].write(value.sourceIdentifier)
        try writer["sourceVersion"].write(value.sourceVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ProjectSourceVersion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ProjectSourceVersion()
        value.sourceIdentifier = try reader["sourceIdentifier"].readIfPresent() ?? ""
        value.sourceVersion = try reader["sourceVersion"].readIfPresent() ?? ""
        return value
    }
}

extension CodeBuildClientTypes.ProjectSource {

    static func write(value: CodeBuildClientTypes.ProjectSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["auth"].write(value.auth, with: CodeBuildClientTypes.SourceAuth.write(value:to:))
        try writer["buildStatusConfig"].write(value.buildStatusConfig, with: CodeBuildClientTypes.BuildStatusConfig.write(value:to:))
        try writer["buildspec"].write(value.buildspec)
        try writer["gitCloneDepth"].write(value.gitCloneDepth)
        try writer["gitSubmodulesConfig"].write(value.gitSubmodulesConfig, with: CodeBuildClientTypes.GitSubmodulesConfig.write(value:to:))
        try writer["insecureSsl"].write(value.insecureSsl)
        try writer["location"].write(value.location)
        try writer["reportBuildStatus"].write(value.reportBuildStatus)
        try writer["sourceIdentifier"].write(value.sourceIdentifier)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ProjectSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ProjectSource()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.location = try reader["location"].readIfPresent()
        value.gitCloneDepth = try reader["gitCloneDepth"].readIfPresent()
        value.gitSubmodulesConfig = try reader["gitSubmodulesConfig"].readIfPresent(with: CodeBuildClientTypes.GitSubmodulesConfig.read(from:))
        value.buildspec = try reader["buildspec"].readIfPresent()
        value.auth = try reader["auth"].readIfPresent(with: CodeBuildClientTypes.SourceAuth.read(from:))
        value.reportBuildStatus = try reader["reportBuildStatus"].readIfPresent()
        value.buildStatusConfig = try reader["buildStatusConfig"].readIfPresent(with: CodeBuildClientTypes.BuildStatusConfig.read(from:))
        value.insecureSsl = try reader["insecureSsl"].readIfPresent()
        value.sourceIdentifier = try reader["sourceIdentifier"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.BuildStatusConfig {

    static func write(value: CodeBuildClientTypes.BuildStatusConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["context"].write(value.context)
        try writer["targetUrl"].write(value.targetUrl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.BuildStatusConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.BuildStatusConfig()
        value.context = try reader["context"].readIfPresent()
        value.targetUrl = try reader["targetUrl"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.SourceAuth {

    static func write(value: CodeBuildClientTypes.SourceAuth?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resource"].write(value.resource)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.SourceAuth {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.SourceAuth()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.resource = try reader["resource"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.GitSubmodulesConfig {

    static func write(value: CodeBuildClientTypes.GitSubmodulesConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fetchSubmodules"].write(value.fetchSubmodules)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.GitSubmodulesConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.GitSubmodulesConfig()
        value.fetchSubmodules = try reader["fetchSubmodules"].readIfPresent() ?? false
        return value
    }
}

extension CodeBuildClientTypes.BuildBatchPhase {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.BuildBatchPhase {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.BuildBatchPhase()
        value.phaseType = try reader["phaseType"].readIfPresent()
        value.phaseStatus = try reader["phaseStatus"].readIfPresent()
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.durationInSeconds = try reader["durationInSeconds"].readIfPresent()
        value.contexts = try reader["contexts"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.PhaseContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeBuildClientTypes.PhaseContext {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.PhaseContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.PhaseContext()
        value.statusCode = try reader["statusCode"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.Build {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.Build {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.Build()
        value.id = try reader["id"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.buildNumber = try reader["buildNumber"].readIfPresent()
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.currentPhase = try reader["currentPhase"].readIfPresent()
        value.buildStatus = try reader["buildStatus"].readIfPresent()
        value.sourceVersion = try reader["sourceVersion"].readIfPresent()
        value.resolvedSourceVersion = try reader["resolvedSourceVersion"].readIfPresent()
        value.projectName = try reader["projectName"].readIfPresent()
        value.phases = try reader["phases"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.BuildPhase.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.source = try reader["source"].readIfPresent(with: CodeBuildClientTypes.ProjectSource.read(from:))
        value.secondarySources = try reader["secondarySources"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ProjectSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.secondarySourceVersions = try reader["secondarySourceVersions"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ProjectSourceVersion.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.artifacts = try reader["artifacts"].readIfPresent(with: CodeBuildClientTypes.BuildArtifacts.read(from:))
        value.secondaryArtifacts = try reader["secondaryArtifacts"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.BuildArtifacts.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.cache = try reader["cache"].readIfPresent(with: CodeBuildClientTypes.ProjectCache.read(from:))
        value.environment = try reader["environment"].readIfPresent(with: CodeBuildClientTypes.ProjectEnvironment.read(from:))
        value.serviceRole = try reader["serviceRole"].readIfPresent()
        value.logs = try reader["logs"].readIfPresent(with: CodeBuildClientTypes.LogsLocation.read(from:))
        value.timeoutInMinutes = try reader["timeoutInMinutes"].readIfPresent()
        value.queuedTimeoutInMinutes = try reader["queuedTimeoutInMinutes"].readIfPresent()
        value.buildComplete = try reader["buildComplete"].readIfPresent() ?? false
        value.initiator = try reader["initiator"].readIfPresent()
        value.vpcConfig = try reader["vpcConfig"].readIfPresent(with: CodeBuildClientTypes.VpcConfig.read(from:))
        value.networkInterface = try reader["networkInterface"].readIfPresent(with: CodeBuildClientTypes.NetworkInterface.read(from:))
        value.encryptionKey = try reader["encryptionKey"].readIfPresent()
        value.exportedEnvironmentVariables = try reader["exportedEnvironmentVariables"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ExportedEnvironmentVariable.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.reportArns = try reader["reportArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.fileSystemLocations = try reader["fileSystemLocations"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ProjectFileSystemLocation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.debugSession = try reader["debugSession"].readIfPresent(with: CodeBuildClientTypes.DebugSession.read(from:))
        value.buildBatchArn = try reader["buildBatchArn"].readIfPresent()
        value.autoRetryConfig = try reader["autoRetryConfig"].readIfPresent(with: CodeBuildClientTypes.AutoRetryConfig.read(from:))
        return value
    }
}

extension CodeBuildClientTypes.AutoRetryConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.AutoRetryConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.AutoRetryConfig()
        value.autoRetryLimit = try reader["autoRetryLimit"].readIfPresent()
        value.autoRetryNumber = try reader["autoRetryNumber"].readIfPresent()
        value.nextAutoRetry = try reader["nextAutoRetry"].readIfPresent()
        value.previousAutoRetry = try reader["previousAutoRetry"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.DebugSession {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.DebugSession {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.DebugSession()
        value.sessionEnabled = try reader["sessionEnabled"].readIfPresent()
        value.sessionTarget = try reader["sessionTarget"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.ExportedEnvironmentVariable {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ExportedEnvironmentVariable {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ExportedEnvironmentVariable()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.NetworkInterface {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.NetworkInterface {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.NetworkInterface()
        value.subnetId = try reader["subnetId"].readIfPresent()
        value.networkInterfaceId = try reader["networkInterfaceId"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.LogsLocation {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.LogsLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.LogsLocation()
        value.groupName = try reader["groupName"].readIfPresent()
        value.streamName = try reader["streamName"].readIfPresent()
        value.deepLink = try reader["deepLink"].readIfPresent()
        value.s3DeepLink = try reader["s3DeepLink"].readIfPresent()
        value.cloudWatchLogsArn = try reader["cloudWatchLogsArn"].readIfPresent()
        value.s3LogsArn = try reader["s3LogsArn"].readIfPresent()
        value.cloudWatchLogs = try reader["cloudWatchLogs"].readIfPresent(with: CodeBuildClientTypes.CloudWatchLogsConfig.read(from:))
        value.s3Logs = try reader["s3Logs"].readIfPresent(with: CodeBuildClientTypes.S3LogsConfig.read(from:))
        return value
    }
}

extension CodeBuildClientTypes.BuildPhase {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.BuildPhase {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.BuildPhase()
        value.phaseType = try reader["phaseType"].readIfPresent()
        value.phaseStatus = try reader["phaseStatus"].readIfPresent()
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.durationInSeconds = try reader["durationInSeconds"].readIfPresent()
        value.contexts = try reader["contexts"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.PhaseContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeBuildClientTypes.Fleet {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.Fleet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.Fleet()
        value.arn = try reader["arn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.created = try reader["created"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModified = try reader["lastModified"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["status"].readIfPresent(with: CodeBuildClientTypes.FleetStatus.read(from:))
        value.baseCapacity = try reader["baseCapacity"].readIfPresent()
        value.environmentType = try reader["environmentType"].readIfPresent()
        value.computeType = try reader["computeType"].readIfPresent()
        value.scalingConfiguration = try reader["scalingConfiguration"].readIfPresent(with: CodeBuildClientTypes.ScalingConfigurationOutput.read(from:))
        value.overflowBehavior = try reader["overflowBehavior"].readIfPresent()
        value.vpcConfig = try reader["vpcConfig"].readIfPresent(with: CodeBuildClientTypes.VpcConfig.read(from:))
        value.proxyConfiguration = try reader["proxyConfiguration"].readIfPresent(with: CodeBuildClientTypes.ProxyConfiguration.read(from:))
        value.imageId = try reader["imageId"].readIfPresent()
        value.fleetServiceRole = try reader["fleetServiceRole"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeBuildClientTypes.Tag {

    static func write(value: CodeBuildClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.Tag()
        value.key = try reader["key"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.ProxyConfiguration {

    static func write(value: CodeBuildClientTypes.ProxyConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["defaultBehavior"].write(value.defaultBehavior)
        try writer["orderedProxyRules"].writeList(value.orderedProxyRules, memberWritingClosure: CodeBuildClientTypes.FleetProxyRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ProxyConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ProxyConfiguration()
        value.defaultBehavior = try reader["defaultBehavior"].readIfPresent()
        value.orderedProxyRules = try reader["orderedProxyRules"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.FleetProxyRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeBuildClientTypes.FleetProxyRule {

    static func write(value: CodeBuildClientTypes.FleetProxyRule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["effect"].write(value.effect)
        try writer["entities"].writeList(value.entities, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.FleetProxyRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.FleetProxyRule()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.effect = try reader["effect"].readIfPresent() ?? .sdkUnknown("")
        value.entities = try reader["entities"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension CodeBuildClientTypes.ScalingConfigurationOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ScalingConfigurationOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ScalingConfigurationOutput()
        value.scalingType = try reader["scalingType"].readIfPresent()
        value.targetTrackingScalingConfigs = try reader["targetTrackingScalingConfigs"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.TargetTrackingScalingConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.maxCapacity = try reader["maxCapacity"].readIfPresent()
        value.desiredCapacity = try reader["desiredCapacity"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.TargetTrackingScalingConfiguration {

    static func write(value: CodeBuildClientTypes.TargetTrackingScalingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["metricType"].write(value.metricType)
        try writer["targetValue"].write(value.targetValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.TargetTrackingScalingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.TargetTrackingScalingConfiguration()
        value.metricType = try reader["metricType"].readIfPresent()
        value.targetValue = try reader["targetValue"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.FleetStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.FleetStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.FleetStatus()
        value.statusCode = try reader["statusCode"].readIfPresent()
        value.context = try reader["context"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.Project {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.Project {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.Project()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.source = try reader["source"].readIfPresent(with: CodeBuildClientTypes.ProjectSource.read(from:))
        value.secondarySources = try reader["secondarySources"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ProjectSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sourceVersion = try reader["sourceVersion"].readIfPresent()
        value.secondarySourceVersions = try reader["secondarySourceVersions"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ProjectSourceVersion.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.artifacts = try reader["artifacts"].readIfPresent(with: CodeBuildClientTypes.ProjectArtifacts.read(from:))
        value.secondaryArtifacts = try reader["secondaryArtifacts"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ProjectArtifacts.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.cache = try reader["cache"].readIfPresent(with: CodeBuildClientTypes.ProjectCache.read(from:))
        value.environment = try reader["environment"].readIfPresent(with: CodeBuildClientTypes.ProjectEnvironment.read(from:))
        value.serviceRole = try reader["serviceRole"].readIfPresent()
        value.timeoutInMinutes = try reader["timeoutInMinutes"].readIfPresent()
        value.queuedTimeoutInMinutes = try reader["queuedTimeoutInMinutes"].readIfPresent()
        value.encryptionKey = try reader["encryptionKey"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.created = try reader["created"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModified = try reader["lastModified"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.webhook = try reader["webhook"].readIfPresent(with: CodeBuildClientTypes.Webhook.read(from:))
        value.vpcConfig = try reader["vpcConfig"].readIfPresent(with: CodeBuildClientTypes.VpcConfig.read(from:))
        value.badge = try reader["badge"].readIfPresent(with: CodeBuildClientTypes.ProjectBadge.read(from:))
        value.logsConfig = try reader["logsConfig"].readIfPresent(with: CodeBuildClientTypes.LogsConfig.read(from:))
        value.fileSystemLocations = try reader["fileSystemLocations"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.ProjectFileSystemLocation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.buildBatchConfig = try reader["buildBatchConfig"].readIfPresent(with: CodeBuildClientTypes.ProjectBuildBatchConfig.read(from:))
        value.concurrentBuildLimit = try reader["concurrentBuildLimit"].readIfPresent()
        value.projectVisibility = try reader["projectVisibility"].readIfPresent()
        value.publicProjectAlias = try reader["publicProjectAlias"].readIfPresent()
        value.resourceAccessRole = try reader["resourceAccessRole"].readIfPresent()
        value.autoRetryLimit = try reader["autoRetryLimit"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.ProjectBadge {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ProjectBadge {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ProjectBadge()
        value.badgeEnabled = try reader["badgeEnabled"].readIfPresent() ?? false
        value.badgeRequestUrl = try reader["badgeRequestUrl"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.Webhook {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.Webhook {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.Webhook()
        value.url = try reader["url"].readIfPresent()
        value.payloadUrl = try reader["payloadUrl"].readIfPresent()
        value.secret = try reader["secret"].readIfPresent()
        value.branchFilter = try reader["branchFilter"].readIfPresent()
        value.filterGroups = try reader["filterGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: CodeBuildClientTypes.WebhookFilter.read(from:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        value.buildType = try reader["buildType"].readIfPresent()
        value.manualCreation = try reader["manualCreation"].readIfPresent()
        value.lastModifiedSecret = try reader["lastModifiedSecret"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.scopeConfiguration = try reader["scopeConfiguration"].readIfPresent(with: CodeBuildClientTypes.ScopeConfiguration.read(from:))
        return value
    }
}

extension CodeBuildClientTypes.ScopeConfiguration {

    static func write(value: CodeBuildClientTypes.ScopeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["domain"].write(value.domain)
        try writer["name"].write(value.name)
        try writer["scope"].write(value.scope)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ScopeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ScopeConfiguration()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.domain = try reader["domain"].readIfPresent()
        value.scope = try reader["scope"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension CodeBuildClientTypes.WebhookFilter {

    static func write(value: CodeBuildClientTypes.WebhookFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["excludeMatchedPattern"].write(value.excludeMatchedPattern)
        try writer["pattern"].write(value.pattern)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.WebhookFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.WebhookFilter()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.pattern = try reader["pattern"].readIfPresent() ?? ""
        value.excludeMatchedPattern = try reader["excludeMatchedPattern"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.ProjectArtifacts {

    static func write(value: CodeBuildClientTypes.ProjectArtifacts?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["artifactIdentifier"].write(value.artifactIdentifier)
        try writer["bucketOwnerAccess"].write(value.bucketOwnerAccess)
        try writer["encryptionDisabled"].write(value.encryptionDisabled)
        try writer["location"].write(value.location)
        try writer["name"].write(value.name)
        try writer["namespaceType"].write(value.namespaceType)
        try writer["overrideArtifactName"].write(value.overrideArtifactName)
        try writer["packaging"].write(value.packaging)
        try writer["path"].write(value.path)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ProjectArtifacts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ProjectArtifacts()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.location = try reader["location"].readIfPresent()
        value.path = try reader["path"].readIfPresent()
        value.namespaceType = try reader["namespaceType"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.packaging = try reader["packaging"].readIfPresent()
        value.overrideArtifactName = try reader["overrideArtifactName"].readIfPresent()
        value.encryptionDisabled = try reader["encryptionDisabled"].readIfPresent()
        value.artifactIdentifier = try reader["artifactIdentifier"].readIfPresent()
        value.bucketOwnerAccess = try reader["bucketOwnerAccess"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.ReportGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ReportGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ReportGroup()
        value.arn = try reader["arn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.exportConfig = try reader["exportConfig"].readIfPresent(with: CodeBuildClientTypes.ReportExportConfig.read(from:))
        value.created = try reader["created"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModified = try reader["lastModified"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.ReportExportConfig {

    static func write(value: CodeBuildClientTypes.ReportExportConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["exportConfigType"].write(value.exportConfigType)
        try writer["s3Destination"].write(value.s3Destination, with: CodeBuildClientTypes.S3ReportExportConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ReportExportConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ReportExportConfig()
        value.exportConfigType = try reader["exportConfigType"].readIfPresent()
        value.s3Destination = try reader["s3Destination"].readIfPresent(with: CodeBuildClientTypes.S3ReportExportConfig.read(from:))
        return value
    }
}

extension CodeBuildClientTypes.S3ReportExportConfig {

    static func write(value: CodeBuildClientTypes.S3ReportExportConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucket"].write(value.bucket)
        try writer["bucketOwner"].write(value.bucketOwner)
        try writer["encryptionDisabled"].write(value.encryptionDisabled)
        try writer["encryptionKey"].write(value.encryptionKey)
        try writer["packaging"].write(value.packaging)
        try writer["path"].write(value.path)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.S3ReportExportConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.S3ReportExportConfig()
        value.bucket = try reader["bucket"].readIfPresent()
        value.bucketOwner = try reader["bucketOwner"].readIfPresent()
        value.path = try reader["path"].readIfPresent()
        value.packaging = try reader["packaging"].readIfPresent()
        value.encryptionKey = try reader["encryptionKey"].readIfPresent()
        value.encryptionDisabled = try reader["encryptionDisabled"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.Report {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.Report {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.Report()
        value.arn = try reader["arn"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.reportGroupArn = try reader["reportGroupArn"].readIfPresent()
        value.executionId = try reader["executionId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.created = try reader["created"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.expired = try reader["expired"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.exportConfig = try reader["exportConfig"].readIfPresent(with: CodeBuildClientTypes.ReportExportConfig.read(from:))
        value.truncated = try reader["truncated"].readIfPresent()
        value.testSummary = try reader["testSummary"].readIfPresent(with: CodeBuildClientTypes.TestReportSummary.read(from:))
        value.codeCoverageSummary = try reader["codeCoverageSummary"].readIfPresent(with: CodeBuildClientTypes.CodeCoverageReportSummary.read(from:))
        return value
    }
}

extension CodeBuildClientTypes.CodeCoverageReportSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.CodeCoverageReportSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.CodeCoverageReportSummary()
        value.lineCoveragePercentage = try reader["lineCoveragePercentage"].readIfPresent()
        value.linesCovered = try reader["linesCovered"].readIfPresent()
        value.linesMissed = try reader["linesMissed"].readIfPresent()
        value.branchCoveragePercentage = try reader["branchCoveragePercentage"].readIfPresent()
        value.branchesCovered = try reader["branchesCovered"].readIfPresent()
        value.branchesMissed = try reader["branchesMissed"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.TestReportSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.TestReportSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.TestReportSummary()
        value.total = try reader["total"].readIfPresent() ?? 0
        value.statusCounts = try reader["statusCounts"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.durationInNanoSeconds = try reader["durationInNanoSeconds"].readIfPresent() ?? 0
        return value
    }
}

extension CodeBuildClientTypes.CodeCoverage {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.CodeCoverage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.CodeCoverage()
        value.id = try reader["id"].readIfPresent()
        value.reportARN = try reader["reportARN"].readIfPresent()
        value.filePath = try reader["filePath"].readIfPresent()
        value.lineCoveragePercentage = try reader["lineCoveragePercentage"].readIfPresent()
        value.linesCovered = try reader["linesCovered"].readIfPresent()
        value.linesMissed = try reader["linesMissed"].readIfPresent()
        value.branchCoveragePercentage = try reader["branchCoveragePercentage"].readIfPresent()
        value.branchesCovered = try reader["branchesCovered"].readIfPresent()
        value.branchesMissed = try reader["branchesMissed"].readIfPresent()
        value.expired = try reader["expired"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CodeBuildClientTypes.TestCase {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.TestCase {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.TestCase()
        value.reportArn = try reader["reportArn"].readIfPresent()
        value.testRawDataPath = try reader["testRawDataPath"].readIfPresent()
        value.`prefix` = try reader["prefix"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.durationInNanoSeconds = try reader["durationInNanoSeconds"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        value.expired = try reader["expired"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CodeBuildClientTypes.ReportGroupTrendStats {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ReportGroupTrendStats {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ReportGroupTrendStats()
        value.average = try reader["average"].readIfPresent()
        value.max = try reader["max"].readIfPresent()
        value.min = try reader["min"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.ReportWithRawData {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.ReportWithRawData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.ReportWithRawData()
        value.reportArn = try reader["reportArn"].readIfPresent()
        value.data = try reader["data"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.EnvironmentPlatform {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.EnvironmentPlatform {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.EnvironmentPlatform()
        value.platform = try reader["platform"].readIfPresent()
        value.languages = try reader["languages"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.EnvironmentLanguage.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeBuildClientTypes.EnvironmentLanguage {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.EnvironmentLanguage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.EnvironmentLanguage()
        value.language = try reader["language"].readIfPresent()
        value.images = try reader["images"].readListIfPresent(memberReadingClosure: CodeBuildClientTypes.EnvironmentImage.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeBuildClientTypes.EnvironmentImage {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.EnvironmentImage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.EnvironmentImage()
        value.name = try reader["name"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.versions = try reader["versions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeBuildClientTypes.SourceCredentialsInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeBuildClientTypes.SourceCredentialsInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeBuildClientTypes.SourceCredentialsInfo()
        value.arn = try reader["arn"].readIfPresent()
        value.serverType = try reader["serverType"].readIfPresent()
        value.authType = try reader["authType"].readIfPresent()
        value.resource = try reader["resource"].readIfPresent()
        return value
    }
}

extension CodeBuildClientTypes.ScalingConfigurationInput {

    static func write(value: CodeBuildClientTypes.ScalingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxCapacity"].write(value.maxCapacity)
        try writer["scalingType"].write(value.scalingType)
        try writer["targetTrackingScalingConfigs"].writeList(value.targetTrackingScalingConfigs, memberWritingClosure: CodeBuildClientTypes.TargetTrackingScalingConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CodeBuildClientTypes.TestCaseFilter {

    static func write(value: CodeBuildClientTypes.TestCaseFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["keyword"].write(value.keyword)
        try writer["status"].write(value.status)
    }
}

extension CodeBuildClientTypes.BuildBatchFilter {

    static func write(value: CodeBuildClientTypes.BuildBatchFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["status"].write(value.status)
    }
}

extension CodeBuildClientTypes.ReportFilter {

    static func write(value: CodeBuildClientTypes.ReportFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["status"].write(value.status)
    }
}

public enum CodeBuildClientTypes {}
