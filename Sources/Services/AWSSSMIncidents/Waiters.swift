// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SSMIncidentsClientProtocol {

    static func waitForReplicationSetActiveWaiterConfig() throws -> WaiterConfiguration<GetReplicationSetInput, GetReplicationSetOutputResponse> {
        let acceptors: [WaiterConfiguration<GetReplicationSetInput, GetReplicationSetOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetReplicationSetInput, result: Result<GetReplicationSetOutputResponse, Error>) -> Bool in
                // JMESPath expression: "replicationSet.status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "ACTIVE"
                guard case .success(let output) = result else { return false }
                let replicationSet = output.replicationSet
                let status = replicationSet?.status
                return JMESUtils.compare(status, ==, "ACTIVE")
            }),
            .init(state: .retry, matcher: { (input: GetReplicationSetInput, result: Result<GetReplicationSetOutputResponse, Error>) -> Bool in
                // JMESPath expression: "replicationSet.status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "CREATING"
                guard case .success(let output) = result else { return false }
                let replicationSet = output.replicationSet
                let status = replicationSet?.status
                return JMESUtils.compare(status, ==, "CREATING")
            }),
            .init(state: .retry, matcher: { (input: GetReplicationSetInput, result: Result<GetReplicationSetOutputResponse, Error>) -> Bool in
                // JMESPath expression: "replicationSet.status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "UPDATING"
                guard case .success(let output) = result else { return false }
                let replicationSet = output.replicationSet
                let status = replicationSet?.status
                return JMESUtils.compare(status, ==, "UPDATING")
            }),
            .init(state: .failure, matcher: { (input: GetReplicationSetInput, result: Result<GetReplicationSetOutputResponse, Error>) -> Bool in
                // JMESPath expression: "replicationSet.status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "FAILED"
                guard case .success(let output) = result else { return false }
                let replicationSet = output.replicationSet
                let status = replicationSet?.status
                return JMESUtils.compare(status, ==, "FAILED")
            }),
        ]
        return try WaiterConfiguration<GetReplicationSetInput, GetReplicationSetOutputResponse>(acceptors: acceptors, minDelay: 30.0, maxDelay: 30.0)
    }

    /// Initiates waiting for the WaitForReplicationSetActive event on the getReplicationSet operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetReplicationSetInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilWaitForReplicationSetActive(options: WaiterOptions, input: GetReplicationSetInput) async throws -> WaiterOutcome<GetReplicationSetOutputResponse> {
        let waiter = Waiter(config: try Self.waitForReplicationSetActiveWaiterConfig(), operation: self.getReplicationSet(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func waitForReplicationSetDeletedWaiterConfig() throws -> WaiterConfiguration<GetReplicationSetInput, GetReplicationSetOutputResponse> {
        let acceptors: [WaiterConfiguration<GetReplicationSetInput, GetReplicationSetOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetReplicationSetInput, result: Result<GetReplicationSetOutputResponse, Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? WaiterTypedError)?.waiterErrorType == "ResourceNotFoundException"
            }),
            .init(state: .retry, matcher: { (input: GetReplicationSetInput, result: Result<GetReplicationSetOutputResponse, Error>) -> Bool in
                // JMESPath expression: "replicationSet.status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "DELETING"
                guard case .success(let output) = result else { return false }
                let replicationSet = output.replicationSet
                let status = replicationSet?.status
                return JMESUtils.compare(status, ==, "DELETING")
            }),
            .init(state: .failure, matcher: { (input: GetReplicationSetInput, result: Result<GetReplicationSetOutputResponse, Error>) -> Bool in
                // JMESPath expression: "replicationSet.status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "FAILED"
                guard case .success(let output) = result else { return false }
                let replicationSet = output.replicationSet
                let status = replicationSet?.status
                return JMESUtils.compare(status, ==, "FAILED")
            }),
        ]
        return try WaiterConfiguration<GetReplicationSetInput, GetReplicationSetOutputResponse>(acceptors: acceptors, minDelay: 30.0, maxDelay: 30.0)
    }

    /// Initiates waiting for the WaitForReplicationSetDeleted event on the getReplicationSet operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetReplicationSetInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilWaitForReplicationSetDeleted(options: WaiterOptions, input: GetReplicationSetInput) async throws -> WaiterOutcome<GetReplicationSetOutputResponse> {
        let waiter = Waiter(config: try Self.waitForReplicationSetDeletedWaiterConfig(), operation: self.getReplicationSet(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
