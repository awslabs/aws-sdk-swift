//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

extension MarketplaceCommerceAnalyticsClientTypes {

    public enum DataSetType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case customerProfileByGeography
        case customerProfileByIndustry
        case customerProfileByRevenue
        case customerSubscriberAnnualSubscriptions
        case customerSubscriberHourlyMonthlySubscriptions
        case dailyBusinessCanceledProductSubscribers
        case dailyBusinessFees
        case dailyBusinessFreeTrialConversions
        case dailyBusinessNewInstances
        case dailyBusinessNewProductSubscribers
        case dailyBusinessUsageByInstanceType
        case disbursedAmountByAgeOfDisbursedFunds
        case disbursedAmountByAgeOfPastDueFunds
        case disbursedAmountByAgeOfUncollectedFunds
        case disbursedAmountByCustomerGeo
        case disbursedAmountByInstanceHours
        case disbursedAmountByProduct
        case disbursedAmountByProductWithUncollectedFunds
        case disbursedAmountByUncollectedFundsBreakdown
        case monthlyRevenueAnnualSubscriptions
        case monthlyRevenueBillingAndRevenueData
        case monthlyRevenueFieldDemonstrationUsage
        case monthlyRevenueFlexiblePaymentSchedule
        case salesCompensationBilledRevenue
        case usSalesAndUseTaxRecords
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSetType] {
            return [
                .customerProfileByGeography,
                .customerProfileByIndustry,
                .customerProfileByRevenue,
                .customerSubscriberAnnualSubscriptions,
                .customerSubscriberHourlyMonthlySubscriptions,
                .dailyBusinessCanceledProductSubscribers,
                .dailyBusinessFees,
                .dailyBusinessFreeTrialConversions,
                .dailyBusinessNewInstances,
                .dailyBusinessNewProductSubscribers,
                .dailyBusinessUsageByInstanceType,
                .disbursedAmountByAgeOfDisbursedFunds,
                .disbursedAmountByAgeOfPastDueFunds,
                .disbursedAmountByAgeOfUncollectedFunds,
                .disbursedAmountByCustomerGeo,
                .disbursedAmountByInstanceHours,
                .disbursedAmountByProduct,
                .disbursedAmountByProductWithUncollectedFunds,
                .disbursedAmountByUncollectedFundsBreakdown,
                .monthlyRevenueAnnualSubscriptions,
                .monthlyRevenueBillingAndRevenueData,
                .monthlyRevenueFieldDemonstrationUsage,
                .monthlyRevenueFlexiblePaymentSchedule,
                .salesCompensationBilledRevenue,
                .usSalesAndUseTaxRecords
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .customerProfileByGeography: return "customer_profile_by_geography"
            case .customerProfileByIndustry: return "customer_profile_by_industry"
            case .customerProfileByRevenue: return "customer_profile_by_revenue"
            case .customerSubscriberAnnualSubscriptions: return "customer_subscriber_annual_subscriptions"
            case .customerSubscriberHourlyMonthlySubscriptions: return "customer_subscriber_hourly_monthly_subscriptions"
            case .dailyBusinessCanceledProductSubscribers: return "daily_business_canceled_product_subscribers"
            case .dailyBusinessFees: return "daily_business_fees"
            case .dailyBusinessFreeTrialConversions: return "daily_business_free_trial_conversions"
            case .dailyBusinessNewInstances: return "daily_business_new_instances"
            case .dailyBusinessNewProductSubscribers: return "daily_business_new_product_subscribers"
            case .dailyBusinessUsageByInstanceType: return "daily_business_usage_by_instance_type"
            case .disbursedAmountByAgeOfDisbursedFunds: return "disbursed_amount_by_age_of_disbursed_funds"
            case .disbursedAmountByAgeOfPastDueFunds: return "disbursed_amount_by_age_of_past_due_funds"
            case .disbursedAmountByAgeOfUncollectedFunds: return "disbursed_amount_by_age_of_uncollected_funds"
            case .disbursedAmountByCustomerGeo: return "disbursed_amount_by_customer_geo"
            case .disbursedAmountByInstanceHours: return "disbursed_amount_by_instance_hours"
            case .disbursedAmountByProduct: return "disbursed_amount_by_product"
            case .disbursedAmountByProductWithUncollectedFunds: return "disbursed_amount_by_product_with_uncollected_funds"
            case .disbursedAmountByUncollectedFundsBreakdown: return "disbursed_amount_by_uncollected_funds_breakdown"
            case .monthlyRevenueAnnualSubscriptions: return "monthly_revenue_annual_subscriptions"
            case .monthlyRevenueBillingAndRevenueData: return "monthly_revenue_billing_and_revenue_data"
            case .monthlyRevenueFieldDemonstrationUsage: return "monthly_revenue_field_demonstration_usage"
            case .monthlyRevenueFlexiblePaymentSchedule: return "monthly_revenue_flexible_payment_schedule"
            case .salesCompensationBilledRevenue: return "sales_compensation_billed_revenue"
            case .usSalesAndUseTaxRecords: return "us_sales_and_use_tax_records"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// This exception is thrown when an internal service error occurs.
public struct MarketplaceCommerceAnalyticsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This message describes details of the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MarketplaceCommerceAnalyticsException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Container for the parameters to the GenerateDataSet operation.
public struct GenerateDataSetInput: Swift.Sendable {
    /// (Optional) Key-value pairs which will be returned, unmodified, in the Amazon SNS notification message and the data set metadata file. These key-value pairs can be used to correlated responses with tracking information from other systems.
    public var customerDefinedValues: [Swift.String: Swift.String]?
    /// The date a data set was published. For daily data sets, provide a date with day-level granularity for the desired day. For monthly data sets except those with prefix disbursed_amount, provide a date with month-level granularity for the desired month (the day value will be ignored). For data sets with prefix disbursed_amount, provide a date with day-level granularity for the desired day. For these data sets we will look backwards in time over the range of 31 days until the first data set is found (the latest one).
    /// This member is required.
    public var dataSetPublicationDate: Foundation.Date?
    /// The desired data set type.
    ///
    /// * customer_subscriber_hourly_monthly_subscriptions From 2017-09-15 to present: Available daily by 24:00 UTC.
    ///
    /// * customer_subscriber_annual_subscriptions From 2017-09-15 to present: Available daily by 24:00 UTC.
    ///
    /// * daily_business_usage_by_instance_type From 2017-09-15 to present: Available daily by 24:00 UTC.
    ///
    /// * daily_business_fees From 2017-09-15 to present: Available daily by 24:00 UTC.
    ///
    /// * daily_business_free_trial_conversions From 2017-09-15 to present: Available daily by 24:00 UTC.
    ///
    /// * daily_business_new_instances From 2017-09-15 to present: Available daily by 24:00 UTC.
    ///
    /// * daily_business_new_product_subscribers From 2017-09-15 to present: Available daily by 24:00 UTC.
    ///
    /// * daily_business_canceled_product_subscribers From 2017-09-15 to present: Available daily by 24:00 UTC.
    ///
    /// * monthly_revenue_billing_and_revenue_data From 2017-09-15 to present: Available monthly on the 15th day of the month by 24:00 UTC. Data includes metered transactions (e.g. hourly) from one month prior.
    ///
    /// * monthly_revenue_annual_subscriptions From 2017-09-15 to present: Available monthly on the 15th day of the month by 24:00 UTC. Data includes up-front software charges (e.g. annual) from one month prior.
    ///
    /// * monthly_revenue_field_demonstration_usage From 2018-03-15 to present: Available monthly on the 15th day of the month by 24:00 UTC.
    ///
    /// * monthly_revenue_flexible_payment_schedule From 2018-11-15 to present: Available monthly on the 15th day of the month by 24:00 UTC.
    ///
    /// * disbursed_amount_by_product From 2017-09-15 to present: Available every 30 days by 24:00 UTC.
    ///
    /// * disbursed_amount_by_instance_hours From 2017-09-15 to present: Available every 30 days by 24:00 UTC.
    ///
    /// * disbursed_amount_by_customer_geo From 2017-09-15 to present: Available every 30 days by 24:00 UTC.
    ///
    /// * disbursed_amount_by_age_of_uncollected_funds From 2017-09-15 to present: Available every 30 days by 24:00 UTC.
    ///
    /// * disbursed_amount_by_age_of_disbursed_funds From 2017-09-15 to present: Available every 30 days by 24:00 UTC.
    ///
    /// * disbursed_amount_by_age_of_past_due_funds From 2018-04-07 to present: Available every 30 days by 24:00 UTC.
    ///
    /// * disbursed_amount_by_uncollected_funds_breakdown From 2019-10-04 to present: Available every 30 days by 24:00 UTC.
    ///
    /// * sales_compensation_billed_revenue From 2017-09-15 to present: Available monthly on the 15th day of the month by 24:00 UTC. Data includes metered transactions (e.g. hourly) from one month prior, and up-front software charges (e.g. annual) from one month prior.
    ///
    /// * us_sales_and_use_tax_records From 2017-09-15 to present: Available monthly on the 15th day of the month by 24:00 UTC.
    ///
    /// * disbursed_amount_by_product_with_uncollected_funds This data set is deprecated. Download related reports from AMMP instead!
    ///
    /// * customer_profile_by_industry This data set is deprecated. Download related reports from AMMP instead!
    ///
    /// * customer_profile_by_revenue This data set is deprecated. Download related reports from AMMP instead!
    ///
    /// * customer_profile_by_geography This data set is deprecated. Download related reports from AMMP instead!
    /// This member is required.
    public var dataSetType: MarketplaceCommerceAnalyticsClientTypes.DataSetType?
    /// The name (friendly name, not ARN) of the destination S3 bucket.
    /// This member is required.
    public var destinationS3BucketName: Swift.String?
    /// (Optional) The desired S3 prefix for the published data set, similar to a directory path in standard file systems. For example, if given the bucket name "mybucket" and the prefix "myprefix/mydatasets", the output file "outputfile" would be published to "s3://mybucket/myprefix/mydatasets/outputfile". If the prefix directory structure does not exist, it will be created. If no prefix is provided, the data set will be published to the S3 bucket root.
    public var destinationS3Prefix: Swift.String?
    /// The Amazon Resource Name (ARN) of the Role with an attached permissions policy to interact with the provided AWS services.
    /// This member is required.
    public var roleNameArn: Swift.String?
    /// Amazon Resource Name (ARN) for the SNS Topic that will be notified when the data set has been published or if an error has occurred.
    /// This member is required.
    public var snsTopicArn: Swift.String?

    public init(
        customerDefinedValues: [Swift.String: Swift.String]? = nil,
        dataSetPublicationDate: Foundation.Date? = nil,
        dataSetType: MarketplaceCommerceAnalyticsClientTypes.DataSetType? = nil,
        destinationS3BucketName: Swift.String? = nil,
        destinationS3Prefix: Swift.String? = nil,
        roleNameArn: Swift.String? = nil,
        snsTopicArn: Swift.String? = nil
    )
    {
        self.customerDefinedValues = customerDefinedValues
        self.dataSetPublicationDate = dataSetPublicationDate
        self.dataSetType = dataSetType
        self.destinationS3BucketName = destinationS3BucketName
        self.destinationS3Prefix = destinationS3Prefix
        self.roleNameArn = roleNameArn
        self.snsTopicArn = snsTopicArn
    }
}

/// Container for the result of the GenerateDataSet operation.
public struct GenerateDataSetOutput: Swift.Sendable {
    /// A unique identifier representing a specific request to the GenerateDataSet operation. This identifier can be used to correlate a request with notifications from the SNS topic.
    public var dataSetRequestId: Swift.String?

    public init(
        dataSetRequestId: Swift.String? = nil
    )
    {
        self.dataSetRequestId = dataSetRequestId
    }
}

extension MarketplaceCommerceAnalyticsClientTypes {

    public enum SupportDataSetType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case customerSupportContactsData
        case testCustomerSupportContactsData
        case sdkUnknown(Swift.String)

        public static var allCases: [SupportDataSetType] {
            return [
                .customerSupportContactsData,
                .testCustomerSupportContactsData
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .customerSupportContactsData: return "customer_support_contacts_data"
            case .testCustomerSupportContactsData: return "test_customer_support_contacts_data"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// This target has been deprecated. Container for the parameters to the StartSupportDataExport operation.
@available(*, deprecated, message: "This target has been deprecated. As of December 2022 Product Support Connection is no longer supported.")
public struct StartSupportDataExportInput: Swift.Sendable {
    /// This target has been deprecated. (Optional) Key-value pairs which will be returned, unmodified, in the Amazon SNS notification message and the data set metadata file.
    public var customerDefinedValues: [Swift.String: Swift.String]?
    /// This target has been deprecated. Specifies the data set type to be written to the output csv file. The data set types customer_support_contacts_data and test_customer_support_contacts_data both result in a csv file containing the following fields: Product Id, Product Code, Customer Guid, Subscription Guid, Subscription Start Date, Organization, AWS Account Id, Given Name, Surname, Telephone Number, Email, Title, Country Code, ZIP Code, Operation Type, and Operation Time.
    ///
    /// * customer_support_contacts_data Customer support contact data. The data set will contain all changes (Creates, Updates, and Deletes) to customer support contact data from the date specified in the from_date parameter.
    ///
    /// * test_customer_support_contacts_data An example data set containing static test data in the same format as customer_support_contacts_data
    /// This member is required.
    public var dataSetType: MarketplaceCommerceAnalyticsClientTypes.SupportDataSetType?
    /// This target has been deprecated. The name (friendly name, not ARN) of the destination S3 bucket.
    /// This member is required.
    public var destinationS3BucketName: Swift.String?
    /// This target has been deprecated. (Optional) The desired S3 prefix for the published data set, similar to a directory path in standard file systems. For example, if given the bucket name "mybucket" and the prefix "myprefix/mydatasets", the output file "outputfile" would be published to "s3://mybucket/myprefix/mydatasets/outputfile". If the prefix directory structure does not exist, it will be created. If no prefix is provided, the data set will be published to the S3 bucket root.
    public var destinationS3Prefix: Swift.String?
    /// This target has been deprecated. The start date from which to retrieve the data set in UTC. This parameter only affects the customer_support_contacts_data data set type.
    /// This member is required.
    public var fromDate: Foundation.Date?
    /// This target has been deprecated. The Amazon Resource Name (ARN) of the Role with an attached permissions policy to interact with the provided AWS services.
    /// This member is required.
    public var roleNameArn: Swift.String?
    /// This target has been deprecated. Amazon Resource Name (ARN) for the SNS Topic that will be notified when the data set has been published or if an error has occurred.
    /// This member is required.
    public var snsTopicArn: Swift.String?

    public init(
        customerDefinedValues: [Swift.String: Swift.String]? = nil,
        dataSetType: MarketplaceCommerceAnalyticsClientTypes.SupportDataSetType? = nil,
        destinationS3BucketName: Swift.String? = nil,
        destinationS3Prefix: Swift.String? = nil,
        fromDate: Foundation.Date? = nil,
        roleNameArn: Swift.String? = nil,
        snsTopicArn: Swift.String? = nil
    )
    {
        self.customerDefinedValues = customerDefinedValues
        self.dataSetType = dataSetType
        self.destinationS3BucketName = destinationS3BucketName
        self.destinationS3Prefix = destinationS3Prefix
        self.fromDate = fromDate
        self.roleNameArn = roleNameArn
        self.snsTopicArn = snsTopicArn
    }
}

/// This target has been deprecated. Container for the result of the StartSupportDataExport operation.
@available(*, deprecated, message: "This target has been deprecated. As of December 2022 Product Support Connection is no longer supported.")
public struct StartSupportDataExportOutput: Swift.Sendable {
    /// This target has been deprecated. A unique identifier representing a specific request to the StartSupportDataExport operation. This identifier can be used to correlate a request with notifications from the SNS topic.
    public var dataSetRequestId: Swift.String?

    public init(
        dataSetRequestId: Swift.String? = nil
    )
    {
        self.dataSetRequestId = dataSetRequestId
    }
}

extension GenerateDataSetInput {

    static func urlPathProvider(_ value: GenerateDataSetInput) -> Swift.String? {
        return "/"
    }
}

extension StartSupportDataExportInput {

    static func urlPathProvider(_ value: StartSupportDataExportInput) -> Swift.String? {
        return "/"
    }
}

extension GenerateDataSetInput {

    static func write(value: GenerateDataSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["customerDefinedValues"].writeMap(value.customerDefinedValues, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["dataSetPublicationDate"].writeTimestamp(value.dataSetPublicationDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["dataSetType"].write(value.dataSetType)
        try writer["destinationS3BucketName"].write(value.destinationS3BucketName)
        try writer["destinationS3Prefix"].write(value.destinationS3Prefix)
        try writer["roleNameArn"].write(value.roleNameArn)
        try writer["snsTopicArn"].write(value.snsTopicArn)
    }
}

extension StartSupportDataExportInput {

    static func write(value: StartSupportDataExportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["customerDefinedValues"].writeMap(value.customerDefinedValues, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["dataSetType"].write(value.dataSetType)
        try writer["destinationS3BucketName"].write(value.destinationS3BucketName)
        try writer["destinationS3Prefix"].write(value.destinationS3Prefix)
        try writer["fromDate"].writeTimestamp(value.fromDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["roleNameArn"].write(value.roleNameArn)
        try writer["snsTopicArn"].write(value.snsTopicArn)
    }
}

extension GenerateDataSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GenerateDataSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GenerateDataSetOutput()
        value.dataSetRequestId = try reader["dataSetRequestId"].readIfPresent()
        return value
    }
}

extension StartSupportDataExportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartSupportDataExportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartSupportDataExportOutput()
        value.dataSetRequestId = try reader["dataSetRequestId"].readIfPresent()
        return value
    }
}

enum GenerateDataSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "MarketplaceCommerceAnalyticsException": return try MarketplaceCommerceAnalyticsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartSupportDataExportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "MarketplaceCommerceAnalyticsException": return try MarketplaceCommerceAnalyticsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension MarketplaceCommerceAnalyticsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MarketplaceCommerceAnalyticsException {
        let reader = baseError.errorBodyReader
        var value = MarketplaceCommerceAnalyticsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

public enum MarketplaceCommerceAnalyticsClientTypes {}
