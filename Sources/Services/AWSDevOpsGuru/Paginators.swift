// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DevOpsGuruClient {
    /// Paginate over `[DescribeOrganizationResourceCollectionHealthOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeOrganizationResourceCollectionHealthInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeOrganizationResourceCollectionHealthOutput`
    public func describeOrganizationResourceCollectionHealthPaginated(input: DescribeOrganizationResourceCollectionHealthInput) -> ClientRuntime.PaginatorSequence<DescribeOrganizationResourceCollectionHealthInput, DescribeOrganizationResourceCollectionHealthOutput> {
        return ClientRuntime.PaginatorSequence<DescribeOrganizationResourceCollectionHealthInput, DescribeOrganizationResourceCollectionHealthOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeOrganizationResourceCollectionHealth(input:))
    }
}

extension DescribeOrganizationResourceCollectionHealthInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeOrganizationResourceCollectionHealthInput {
        return DescribeOrganizationResourceCollectionHealthInput(
            accountIds: self.accountIds,
            maxResults: self.maxResults,
            nextToken: token,
            organizationResourceCollectionType: self.organizationResourceCollectionType,
            organizationalUnitIds: self.organizationalUnitIds
        )}
}
extension DevOpsGuruClient {
    /// Paginate over `[DescribeResourceCollectionHealthOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeResourceCollectionHealthInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeResourceCollectionHealthOutput`
    public func describeResourceCollectionHealthPaginated(input: DescribeResourceCollectionHealthInput) -> ClientRuntime.PaginatorSequence<DescribeResourceCollectionHealthInput, DescribeResourceCollectionHealthOutput> {
        return ClientRuntime.PaginatorSequence<DescribeResourceCollectionHealthInput, DescribeResourceCollectionHealthOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeResourceCollectionHealth(input:))
    }
}

extension DescribeResourceCollectionHealthInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeResourceCollectionHealthInput {
        return DescribeResourceCollectionHealthInput(
            nextToken: token,
            resourceCollectionType: self.resourceCollectionType
        )}
}
extension DevOpsGuruClient {
    /// Paginate over `[GetCostEstimationOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetCostEstimationInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetCostEstimationOutput`
    public func getCostEstimationPaginated(input: GetCostEstimationInput) -> ClientRuntime.PaginatorSequence<GetCostEstimationInput, GetCostEstimationOutput> {
        return ClientRuntime.PaginatorSequence<GetCostEstimationInput, GetCostEstimationOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getCostEstimation(input:))
    }
}

extension GetCostEstimationInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetCostEstimationInput {
        return GetCostEstimationInput(
            nextToken: token
        )}
}
extension DevOpsGuruClient {
    /// Paginate over `[GetResourceCollectionOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetResourceCollectionInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetResourceCollectionOutput`
    public func getResourceCollectionPaginated(input: GetResourceCollectionInput) -> ClientRuntime.PaginatorSequence<GetResourceCollectionInput, GetResourceCollectionOutput> {
        return ClientRuntime.PaginatorSequence<GetResourceCollectionInput, GetResourceCollectionOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getResourceCollection(input:))
    }
}

extension GetResourceCollectionInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetResourceCollectionInput {
        return GetResourceCollectionInput(
            nextToken: token,
            resourceCollectionType: self.resourceCollectionType
        )}
}
extension DevOpsGuruClient {
    /// Paginate over `[ListAnomaliesForInsightOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAnomaliesForInsightInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAnomaliesForInsightOutput`
    public func listAnomaliesForInsightPaginated(input: ListAnomaliesForInsightInput) -> ClientRuntime.PaginatorSequence<ListAnomaliesForInsightInput, ListAnomaliesForInsightOutput> {
        return ClientRuntime.PaginatorSequence<ListAnomaliesForInsightInput, ListAnomaliesForInsightOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAnomaliesForInsight(input:))
    }
}

extension ListAnomaliesForInsightInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAnomaliesForInsightInput {
        return ListAnomaliesForInsightInput(
            accountId: self.accountId,
            filters: self.filters,
            insightId: self.insightId,
            maxResults: self.maxResults,
            nextToken: token,
            startTimeRange: self.startTimeRange
        )}
}
extension DevOpsGuruClient {
    /// Paginate over `[ListAnomalousLogGroupsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAnomalousLogGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAnomalousLogGroupsOutput`
    public func listAnomalousLogGroupsPaginated(input: ListAnomalousLogGroupsInput) -> ClientRuntime.PaginatorSequence<ListAnomalousLogGroupsInput, ListAnomalousLogGroupsOutput> {
        return ClientRuntime.PaginatorSequence<ListAnomalousLogGroupsInput, ListAnomalousLogGroupsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAnomalousLogGroups(input:))
    }
}

extension ListAnomalousLogGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAnomalousLogGroupsInput {
        return ListAnomalousLogGroupsInput(
            insightId: self.insightId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension DevOpsGuruClient {
    /// Paginate over `[ListEventsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListEventsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListEventsOutput`
    public func listEventsPaginated(input: ListEventsInput) -> ClientRuntime.PaginatorSequence<ListEventsInput, ListEventsOutput> {
        return ClientRuntime.PaginatorSequence<ListEventsInput, ListEventsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listEvents(input:))
    }
}

extension ListEventsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEventsInput {
        return ListEventsInput(
            accountId: self.accountId,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListEventsInput, OperationStackOutput == ListEventsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listEventsPaginated`
    /// to access the nested member `[DevOpsGuruClientTypes.Event]`
    /// - Returns: `[DevOpsGuruClientTypes.Event]`
    public func events() async throws -> [DevOpsGuruClientTypes.Event] {
        return try await self.asyncCompactMap { item in item.events }
    }
}
extension DevOpsGuruClient {
    /// Paginate over `[ListInsightsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListInsightsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListInsightsOutput`
    public func listInsightsPaginated(input: ListInsightsInput) -> ClientRuntime.PaginatorSequence<ListInsightsInput, ListInsightsOutput> {
        return ClientRuntime.PaginatorSequence<ListInsightsInput, ListInsightsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listInsights(input:))
    }
}

extension ListInsightsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInsightsInput {
        return ListInsightsInput(
            maxResults: self.maxResults,
            nextToken: token,
            statusFilter: self.statusFilter
        )}
}
extension DevOpsGuruClient {
    /// Paginate over `[ListMonitoredResourcesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMonitoredResourcesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMonitoredResourcesOutput`
    public func listMonitoredResourcesPaginated(input: ListMonitoredResourcesInput) -> ClientRuntime.PaginatorSequence<ListMonitoredResourcesInput, ListMonitoredResourcesOutput> {
        return ClientRuntime.PaginatorSequence<ListMonitoredResourcesInput, ListMonitoredResourcesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listMonitoredResources(input:))
    }
}

extension ListMonitoredResourcesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMonitoredResourcesInput {
        return ListMonitoredResourcesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension DevOpsGuruClient {
    /// Paginate over `[ListNotificationChannelsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListNotificationChannelsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListNotificationChannelsOutput`
    public func listNotificationChannelsPaginated(input: ListNotificationChannelsInput) -> ClientRuntime.PaginatorSequence<ListNotificationChannelsInput, ListNotificationChannelsOutput> {
        return ClientRuntime.PaginatorSequence<ListNotificationChannelsInput, ListNotificationChannelsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listNotificationChannels(input:))
    }
}

extension ListNotificationChannelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListNotificationChannelsInput {
        return ListNotificationChannelsInput(
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListNotificationChannelsInput, OperationStackOutput == ListNotificationChannelsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listNotificationChannelsPaginated`
    /// to access the nested member `[DevOpsGuruClientTypes.NotificationChannel]`
    /// - Returns: `[DevOpsGuruClientTypes.NotificationChannel]`
    public func channels() async throws -> [DevOpsGuruClientTypes.NotificationChannel] {
        return try await self.asyncCompactMap { item in item.channels }
    }
}
extension DevOpsGuruClient {
    /// Paginate over `[ListOrganizationInsightsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListOrganizationInsightsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListOrganizationInsightsOutput`
    public func listOrganizationInsightsPaginated(input: ListOrganizationInsightsInput) -> ClientRuntime.PaginatorSequence<ListOrganizationInsightsInput, ListOrganizationInsightsOutput> {
        return ClientRuntime.PaginatorSequence<ListOrganizationInsightsInput, ListOrganizationInsightsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listOrganizationInsights(input:))
    }
}

extension ListOrganizationInsightsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListOrganizationInsightsInput {
        return ListOrganizationInsightsInput(
            accountIds: self.accountIds,
            maxResults: self.maxResults,
            nextToken: token,
            organizationalUnitIds: self.organizationalUnitIds,
            statusFilter: self.statusFilter
        )}
}
extension DevOpsGuruClient {
    /// Paginate over `[ListRecommendationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRecommendationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRecommendationsOutput`
    public func listRecommendationsPaginated(input: ListRecommendationsInput) -> ClientRuntime.PaginatorSequence<ListRecommendationsInput, ListRecommendationsOutput> {
        return ClientRuntime.PaginatorSequence<ListRecommendationsInput, ListRecommendationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listRecommendations(input:))
    }
}

extension ListRecommendationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRecommendationsInput {
        return ListRecommendationsInput(
            accountId: self.accountId,
            insightId: self.insightId,
            locale: self.locale,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListRecommendationsInput, OperationStackOutput == ListRecommendationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listRecommendationsPaginated`
    /// to access the nested member `[DevOpsGuruClientTypes.Recommendation]`
    /// - Returns: `[DevOpsGuruClientTypes.Recommendation]`
    public func recommendations() async throws -> [DevOpsGuruClientTypes.Recommendation] {
        return try await self.asyncCompactMap { item in item.recommendations }
    }
}
extension DevOpsGuruClient {
    /// Paginate over `[SearchInsightsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SearchInsightsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SearchInsightsOutput`
    public func searchInsightsPaginated(input: SearchInsightsInput) -> ClientRuntime.PaginatorSequence<SearchInsightsInput, SearchInsightsOutput> {
        return ClientRuntime.PaginatorSequence<SearchInsightsInput, SearchInsightsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.searchInsights(input:))
    }
}

extension SearchInsightsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchInsightsInput {
        return SearchInsightsInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            startTimeRange: self.startTimeRange,
            type: self.type
        )}
}
extension DevOpsGuruClient {
    /// Paginate over `[SearchOrganizationInsightsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SearchOrganizationInsightsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SearchOrganizationInsightsOutput`
    public func searchOrganizationInsightsPaginated(input: SearchOrganizationInsightsInput) -> ClientRuntime.PaginatorSequence<SearchOrganizationInsightsInput, SearchOrganizationInsightsOutput> {
        return ClientRuntime.PaginatorSequence<SearchOrganizationInsightsInput, SearchOrganizationInsightsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.searchOrganizationInsights(input:))
    }
}

extension SearchOrganizationInsightsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchOrganizationInsightsInput {
        return SearchOrganizationInsightsInput(
            accountIds: self.accountIds,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            startTimeRange: self.startTimeRange,
            type: self.type
        )}
}
