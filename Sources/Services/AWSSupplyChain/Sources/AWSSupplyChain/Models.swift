//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

/// You do not have the required privileges to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SupplyChainClientTypes {

    /// The status of the job.
    public enum ConfigurationJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case new
        case queued
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigurationJobStatus] {
            return [
                .failed,
                .inProgress,
                .new,
                .queued,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .new: return "NEW"
            case .queued: return "QUEUED"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SupplyChainClientTypes {
    /// The BillOfMaterialsImportJob details.
    public struct BillOfMaterialsImportJob {
        /// The BillOfMaterialsImportJob instanceId.
        /// This member is required.
        public var instanceId: Swift.String?
        /// The BillOfMaterialsImportJob jobId.
        /// This member is required.
        public var jobId: Swift.String?
        /// When the BillOfMaterialsImportJob has reached a terminal state, there will be a message.
        public var message: Swift.String?
        /// The S3 URI from which the CSV is read.
        /// This member is required.
        public var s3uri: Swift.String?
        /// The BillOfMaterialsImportJob ConfigurationJobStatus.
        /// This member is required.
        public var status: SupplyChainClientTypes.ConfigurationJobStatus?

        public init(
            instanceId: Swift.String? = nil,
            jobId: Swift.String? = nil,
            message: Swift.String? = nil,
            s3uri: Swift.String? = nil,
            status: SupplyChainClientTypes.ConfigurationJobStatus? = nil
        )
        {
            self.instanceId = instanceId
            self.jobId = jobId
            self.message = message
            self.s3uri = s3uri
            self.status = status
        }
    }

}

/// Updating or deleting a resource can cause an inconsistent state.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Unexpected error during processing of request.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Request would cause a service quota to be exceeded.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { true }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The input does not satisfy the constraints specified by an AWS service.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request parameters for CreateBillOfMaterialsImportJob.
public struct CreateBillOfMaterialsImportJobInput {
    /// An idempotency token.
    public var clientToken: Swift.String?
    /// The AWS Supply Chain instance identifier.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The S3 URI of the CSV file to be imported. The bucket must grant permissions for AWS Supply Chain to read the file.
    /// This member is required.
    public var s3uri: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        s3uri: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.instanceId = instanceId
        self.s3uri = s3uri
    }
}

/// The response parameters of CreateBillOfMaterialsImportJob.
public struct CreateBillOfMaterialsImportJobOutput {
    /// The new BillOfMaterialsImportJob identifier.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

/// Request references a resource which does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request parameters for GetBillOfMaterialsImportJob.
public struct GetBillOfMaterialsImportJobInput {
    /// The AWS Supply Chain instance identifier.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The BillOfMaterialsImportJob identifier.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        instanceId: Swift.String? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.jobId = jobId
    }
}

/// The response parameters for GetBillOfMaterialsImportJob.
public struct GetBillOfMaterialsImportJobOutput {
    /// The BillOfMaterialsImportJob.
    /// This member is required.
    public var job: SupplyChainClientTypes.BillOfMaterialsImportJob?

    public init(
        job: SupplyChainClientTypes.BillOfMaterialsImportJob? = nil
    )
    {
        self.job = job
    }
}

extension SupplyChainClientTypes {

    public enum DataIntegrationEventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case forecast
        case inboundOrder
        case inboundOrderLine
        case inboundOrderLineSchedule
        case inventoryLevel
        case outboundOrderLine
        case outboundShipment
        case processHeader
        case processOperation
        case processProduct
        case reservation
        case shipment
        case shipmentStop
        case shipmentStopOrder
        case supplyPlan
        case sdkUnknown(Swift.String)

        public static var allCases: [DataIntegrationEventType] {
            return [
                .forecast,
                .inboundOrder,
                .inboundOrderLine,
                .inboundOrderLineSchedule,
                .inventoryLevel,
                .outboundOrderLine,
                .outboundShipment,
                .processHeader,
                .processOperation,
                .processProduct,
                .reservation,
                .shipment,
                .shipmentStop,
                .shipmentStopOrder,
                .supplyPlan
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .forecast: return "scn.data.forecast"
            case .inboundOrder: return "scn.data.inboundorder"
            case .inboundOrderLine: return "scn.data.inboundorderline"
            case .inboundOrderLineSchedule: return "scn.data.inboundorderlineschedule"
            case .inventoryLevel: return "scn.data.inventorylevel"
            case .outboundOrderLine: return "scn.data.outboundorderline"
            case .outboundShipment: return "scn.data.outboundshipment"
            case .processHeader: return "scn.data.processheader"
            case .processOperation: return "scn.data.processoperation"
            case .processProduct: return "scn.data.processproduct"
            case .reservation: return "scn.data.reservation"
            case .shipment: return "scn.data.shipment"
            case .shipmentStop: return "scn.data.shipmentstop"
            case .shipmentStopOrder: return "scn.data.shipmentstoporder"
            case .supplyPlan: return "scn.data.supplyplan"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The request parameters for SendDataIntegrationEvent.
public struct SendDataIntegrationEventInput {
    /// The idempotent client token.
    public var clientToken: Swift.String?
    /// The data payload of the event. For more information on the data schema to use, see [Data entities supported in AWS Supply Chain ](https://docs.aws.amazon.com/aws-supply-chain/latest/userguide/data-model-asc.html).
    /// This member is required.
    public var data: Swift.String?
    /// Event identifier (for example, orderId for InboundOrder) used for data sharing or partitioning.
    /// This member is required.
    public var eventGroupId: Swift.String?
    /// The event timestamp (in epoch seconds).
    public var eventTimestamp: Foundation.Date?
    /// The data event type.
    /// This member is required.
    public var eventType: SupplyChainClientTypes.DataIntegrationEventType?
    /// The AWS Supply Chain instance identifier.
    /// This member is required.
    public var instanceId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        data: Swift.String? = nil,
        eventGroupId: Swift.String? = nil,
        eventTimestamp: Foundation.Date? = nil,
        eventType: SupplyChainClientTypes.DataIntegrationEventType? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.data = data
        self.eventGroupId = eventGroupId
        self.eventTimestamp = eventTimestamp
        self.eventType = eventType
        self.instanceId = instanceId
    }
}

extension SendDataIntegrationEventInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendDataIntegrationEventInput(clientToken: \(Swift.String(describing: clientToken)), eventGroupId: \(Swift.String(describing: eventGroupId)), eventTimestamp: \(Swift.String(describing: eventTimestamp)), eventType: \(Swift.String(describing: eventType)), instanceId: \(Swift.String(describing: instanceId)), data: \"CONTENT_REDACTED\")"}
}

/// The response parameters for SendDataIntegrationEvent.
public struct SendDataIntegrationEventOutput {
    /// The unique event identifier.
    /// This member is required.
    public var eventId: Swift.String?

    public init(
        eventId: Swift.String? = nil
    )
    {
        self.eventId = eventId
    }
}

extension CreateBillOfMaterialsImportJobInput {

    static func urlPathProvider(_ value: CreateBillOfMaterialsImportJobInput) -> Swift.String? {
        guard let instanceId = value.instanceId else {
            return nil
        }
        return "/api/configuration/instances/\(instanceId.urlPercentEncoding())/bill-of-materials-import-jobs"
    }
}

extension GetBillOfMaterialsImportJobInput {

    static func urlPathProvider(_ value: GetBillOfMaterialsImportJobInput) -> Swift.String? {
        guard let instanceId = value.instanceId else {
            return nil
        }
        guard let jobId = value.jobId else {
            return nil
        }
        return "/api/configuration/instances/\(instanceId.urlPercentEncoding())/bill-of-materials-import-jobs/\(jobId.urlPercentEncoding())"
    }
}

extension SendDataIntegrationEventInput {

    static func urlPathProvider(_ value: SendDataIntegrationEventInput) -> Swift.String? {
        guard let instanceId = value.instanceId else {
            return nil
        }
        return "/api-data/data-integration/instance/\(instanceId.urlPercentEncoding())/data-integration-events"
    }
}

extension CreateBillOfMaterialsImportJobInput {

    static func write(value: CreateBillOfMaterialsImportJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["s3uri"].write(value.s3uri)
    }
}

extension SendDataIntegrationEventInput {

    static func write(value: SendDataIntegrationEventInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["data"].write(value.data)
        try writer["eventGroupId"].write(value.eventGroupId)
        try writer["eventTimestamp"].writeTimestamp(value.eventTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["eventType"].write(value.eventType)
    }
}

extension CreateBillOfMaterialsImportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBillOfMaterialsImportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBillOfMaterialsImportJobOutput()
        value.jobId = try reader["jobId"].readIfPresent() ?? ""
        return value
    }
}

extension GetBillOfMaterialsImportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBillOfMaterialsImportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBillOfMaterialsImportJobOutput()
        value.job = try reader["job"].readIfPresent(with: SupplyChainClientTypes.BillOfMaterialsImportJob.read(from:))
        return value
    }
}

extension SendDataIntegrationEventOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendDataIntegrationEventOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SendDataIntegrationEventOutput()
        value.eventId = try reader["eventId"].readIfPresent() ?? ""
        return value
    }
}

func httpServiceError(baseError: AWSClientRuntime.RestJSONError) throws -> Swift.Error? {
    switch baseError.code {
        case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
        case "ConflictException": return try ConflictException.makeError(baseError: baseError)
        case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
        case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
        case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
        case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
        case "ValidationException": return try ValidationException.makeError(baseError: baseError)
        default: return nil
    }
}

enum CreateBillOfMaterialsImportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBillOfMaterialsImportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendDataIntegrationEventOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SupplyChainClientTypes.BillOfMaterialsImportJob {

    static func read(from reader: SmithyJSON.Reader) throws -> SupplyChainClientTypes.BillOfMaterialsImportJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SupplyChainClientTypes.BillOfMaterialsImportJob()
        value.instanceId = try reader["instanceId"].readIfPresent() ?? ""
        value.jobId = try reader["jobId"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.s3uri = try reader["s3uri"].readIfPresent() ?? ""
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

public enum SupplyChainClientTypes {}
