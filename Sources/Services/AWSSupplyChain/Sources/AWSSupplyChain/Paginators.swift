//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension SupplyChainClient {
    /// Paginate over `[ListDataIntegrationEventsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDataIntegrationEventsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDataIntegrationEventsOutput`
    public func listDataIntegrationEventsPaginated(input: ListDataIntegrationEventsInput) -> ClientRuntime.PaginatorSequence<ListDataIntegrationEventsInput, ListDataIntegrationEventsOutput> {
        return ClientRuntime.PaginatorSequence<ListDataIntegrationEventsInput, ListDataIntegrationEventsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listDataIntegrationEvents(input:))
    }
}

extension ListDataIntegrationEventsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDataIntegrationEventsInput {
        return ListDataIntegrationEventsInput(
            eventType: self.eventType,
            instanceId: self.instanceId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListDataIntegrationEventsInput, OperationStackOutput == ListDataIntegrationEventsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDataIntegrationEventsPaginated`
    /// to access the nested member `[SupplyChainClientTypes.DataIntegrationEvent]`
    /// - Returns: `[SupplyChainClientTypes.DataIntegrationEvent]`
    public func events() async throws -> [SupplyChainClientTypes.DataIntegrationEvent] {
        return try await self.asyncCompactMap { item in item.events }
    }
}
extension SupplyChainClient {
    /// Paginate over `[ListDataIntegrationFlowExecutionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDataIntegrationFlowExecutionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDataIntegrationFlowExecutionsOutput`
    public func listDataIntegrationFlowExecutionsPaginated(input: ListDataIntegrationFlowExecutionsInput) -> ClientRuntime.PaginatorSequence<ListDataIntegrationFlowExecutionsInput, ListDataIntegrationFlowExecutionsOutput> {
        return ClientRuntime.PaginatorSequence<ListDataIntegrationFlowExecutionsInput, ListDataIntegrationFlowExecutionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listDataIntegrationFlowExecutions(input:))
    }
}

extension ListDataIntegrationFlowExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDataIntegrationFlowExecutionsInput {
        return ListDataIntegrationFlowExecutionsInput(
            flowName: self.flowName,
            instanceId: self.instanceId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListDataIntegrationFlowExecutionsInput, OperationStackOutput == ListDataIntegrationFlowExecutionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDataIntegrationFlowExecutionsPaginated`
    /// to access the nested member `[SupplyChainClientTypes.DataIntegrationFlowExecution]`
    /// - Returns: `[SupplyChainClientTypes.DataIntegrationFlowExecution]`
    public func flowExecutions() async throws -> [SupplyChainClientTypes.DataIntegrationFlowExecution] {
        return try await self.asyncCompactMap { item in item.flowExecutions }
    }
}
