//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

public struct DeletePhoneNumberOutput {

    public init() { }
}

public struct DeleteProxySessionOutput {

    public init() { }
}

public struct DeleteSipMediaApplicationOutput {

    public init() { }
}

public struct DeleteSipRuleOutput {

    public init() { }
}

public struct DeleteVoiceConnectorEmergencyCallingConfigurationOutput {

    public init() { }
}

public struct DeleteVoiceConnectorGroupOutput {

    public init() { }
}

public struct DeleteVoiceConnectorOriginationOutput {

    public init() { }
}

public struct DeleteVoiceConnectorOutput {

    public init() { }
}

public struct DeleteVoiceConnectorProxyOutput {

    public init() { }
}

public struct DeleteVoiceConnectorStreamingConfigurationOutput {

    public init() { }
}

public struct DeleteVoiceConnectorTerminationCredentialsOutput {

    public init() { }
}

public struct DeleteVoiceConnectorTerminationOutput {

    public init() { }
}

public struct DeleteVoiceProfileDomainOutput {

    public init() { }
}

public struct DeleteVoiceProfileOutput {

    public init() { }
}

public struct GetGlobalSettingsInput {

    public init() { }
}

public struct GetPhoneNumberSettingsInput {

    public init() { }
}

public struct ListAvailableVoiceConnectorRegionsInput {

    public init() { }
}

public struct PutVoiceConnectorTerminationCredentialsOutput {

    public init() { }
}

public struct StopSpeakerSearchTaskOutput {

    public init() { }
}

public struct StopVoiceToneAnalysisTaskOutput {

    public init() { }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateGlobalSettingsOutput {

    public init() { }
}

public struct UpdatePhoneNumberSettingsOutput {

    public init() { }
}

extension ChimeSDKVoiceClientTypes {

    public enum ErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessdenied
        case badrequest
        case conflict
        case forbidden
        case gone
        case notfound
        case phonenumberassociationsexist
        case preconditionfailed
        case resourcelimitexceeded
        case servicefailure
        case serviceunavailable
        case throttled
        case throttling
        case unauthorized
        case unprocessable
        case voiceconnectorgroupassociationsexist
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .accessdenied,
                .badrequest,
                .conflict,
                .forbidden,
                .gone,
                .notfound,
                .phonenumberassociationsexist,
                .preconditionfailed,
                .resourcelimitexceeded,
                .servicefailure,
                .serviceunavailable,
                .throttled,
                .throttling,
                .unauthorized,
                .unprocessable,
                .voiceconnectorgroupassociationsexist
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessdenied: return "AccessDenied"
            case .badrequest: return "BadRequest"
            case .conflict: return "Conflict"
            case .forbidden: return "Forbidden"
            case .gone: return "Gone"
            case .notfound: return "NotFound"
            case .phonenumberassociationsexist: return "PhoneNumberAssociationsExist"
            case .preconditionfailed: return "PreconditionFailed"
            case .resourcelimitexceeded: return "ResourceLimitExceeded"
            case .servicefailure: return "ServiceFailure"
            case .serviceunavailable: return "ServiceUnavailable"
            case .throttled: return "Throttled"
            case .throttling: return "Throttling"
            case .unauthorized: return "Unauthorized"
            case .unprocessable: return "Unprocessable"
            case .voiceconnectorgroupassociationsexist: return "VoiceConnectorGroupAssociationsExist"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// You don't have the permissions needed to run this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKVoiceClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKVoiceClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

extension ChimeSDKVoiceClientTypes {
    /// A validated address.
    public struct Address {
        /// The city of an address.
        public var city: Swift.String?
        /// The country of an address.
        public var country: Swift.String?
        /// An address suffix location, such as the S. Unit A in Central Park S. Unit A.
        public var postDirectional: Swift.String?
        /// The postal code of an address.
        public var postalCode: Swift.String?
        /// The zip + 4 or postal code + 4 of an address.
        public var postalCodePlus4: Swift.String?
        /// An address prefix location, such as the N in N. Third St.
        public var preDirectional: Swift.String?
        /// The state of an address.
        public var state: Swift.String?
        /// The address street, such as 8th Avenue.
        public var streetName: Swift.String?
        /// The numeric portion of an address.
        public var streetNumber: Swift.String?
        /// The address suffix, such as the N in 8th Avenue N.
        public var streetSuffix: Swift.String?

        public init(
            city: Swift.String? = nil,
            country: Swift.String? = nil,
            postDirectional: Swift.String? = nil,
            postalCode: Swift.String? = nil,
            postalCodePlus4: Swift.String? = nil,
            preDirectional: Swift.String? = nil,
            state: Swift.String? = nil,
            streetName: Swift.String? = nil,
            streetNumber: Swift.String? = nil,
            streetSuffix: Swift.String? = nil
        )
        {
            self.city = city
            self.country = country
            self.postDirectional = postDirectional
            self.postalCode = postalCode
            self.postalCodePlus4 = postalCodePlus4
            self.preDirectional = preDirectional
            self.state = state
            self.streetName = streetName
            self.streetNumber = streetNumber
            self.streetSuffix = streetSuffix
        }
    }

}

extension ChimeSDKVoiceClientTypes.Address: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Address(city: \"CONTENT_REDACTED\", country: \"CONTENT_REDACTED\", postDirectional: \"CONTENT_REDACTED\", postalCode: \"CONTENT_REDACTED\", postalCodePlus4: \"CONTENT_REDACTED\", preDirectional: \"CONTENT_REDACTED\", state: \"CONTENT_REDACTED\", streetName: \"CONTENT_REDACTED\", streetNumber: \"CONTENT_REDACTED\", streetSuffix: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKVoiceClientTypes {

    public enum AlexaSkillStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [AlexaSkillStatus] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The input parameters don't match the service's restrictions.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKVoiceClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKVoiceClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The client is permanently forbidden from making the request.
public struct ForbiddenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKVoiceClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ForbiddenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKVoiceClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The requested resource couldn't be found.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKVoiceClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKVoiceClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The service encountered an unexpected error.
public struct ServiceFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKVoiceClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceFailureException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKVoiceClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The service is currently unavailable.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKVoiceClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKVoiceClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The number of customer requests exceeds the request rate limit.
public struct ThrottledClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKVoiceClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottledClientException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKVoiceClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The client isn't authorized to request a resource.
public struct UnauthorizedClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKVoiceClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedClientException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKVoiceClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

public struct AssociatePhoneNumbersWithVoiceConnectorInput {
    /// List of phone numbers, in E.164 format.
    /// This member is required.
    public var e164PhoneNumbers: [Swift.String]?
    /// If true, associates the provided phone numbers with the provided Amazon Chime SDK Voice Connector and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.
    public var forceAssociate: Swift.Bool?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        e164PhoneNumbers: [Swift.String]? = nil,
        forceAssociate: Swift.Bool? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.e164PhoneNumbers = e164PhoneNumbers
        self.forceAssociate = forceAssociate
        self.voiceConnectorId = voiceConnectorId
    }
}

extension AssociatePhoneNumbersWithVoiceConnectorInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociatePhoneNumbersWithVoiceConnectorInput(forceAssociate: \(Swift.String(describing: forceAssociate)), voiceConnectorId: \(Swift.String(describing: voiceConnectorId)), e164PhoneNumbers: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKVoiceClientTypes {
    /// If a phone number action fails for one or more of the phone numbers in a request, a list of the failed phone numbers is returned, along with error codes and error messages.
    public struct PhoneNumberError {
        /// The error code.
        public var errorCode: ChimeSDKVoiceClientTypes.ErrorCode?
        /// The error message.
        public var errorMessage: Swift.String?
        /// The phone number ID for which the action failed.
        public var phoneNumberId: Swift.String?

        public init(
            errorCode: ChimeSDKVoiceClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            phoneNumberId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.phoneNumberId = phoneNumberId
        }
    }

}

extension ChimeSDKVoiceClientTypes.PhoneNumberError: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PhoneNumberError(errorCode: \(Swift.String(describing: errorCode)), errorMessage: \(Swift.String(describing: errorMessage)), phoneNumberId: \"CONTENT_REDACTED\")"}
}

public struct AssociatePhoneNumbersWithVoiceConnectorOutput {
    /// If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
    public var phoneNumberErrors: [ChimeSDKVoiceClientTypes.PhoneNumberError]?

    public init(
        phoneNumberErrors: [ChimeSDKVoiceClientTypes.PhoneNumberError]? = nil
    )
    {
        self.phoneNumberErrors = phoneNumberErrors
    }
}

public struct AssociatePhoneNumbersWithVoiceConnectorGroupInput {
    /// List of phone numbers, in E.164 format.
    /// This member is required.
    public var e164PhoneNumbers: [Swift.String]?
    /// If true, associates the provided phone numbers with the provided Amazon Chime SDK Voice Connector Group and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.
    public var forceAssociate: Swift.Bool?
    /// The Amazon Chime SDK Voice Connector group ID.
    /// This member is required.
    public var voiceConnectorGroupId: Swift.String?

    public init(
        e164PhoneNumbers: [Swift.String]? = nil,
        forceAssociate: Swift.Bool? = nil,
        voiceConnectorGroupId: Swift.String? = nil
    )
    {
        self.e164PhoneNumbers = e164PhoneNumbers
        self.forceAssociate = forceAssociate
        self.voiceConnectorGroupId = voiceConnectorGroupId
    }
}

extension AssociatePhoneNumbersWithVoiceConnectorGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociatePhoneNumbersWithVoiceConnectorGroupInput(forceAssociate: \(Swift.String(describing: forceAssociate)), voiceConnectorGroupId: \(Swift.String(describing: voiceConnectorGroupId)), e164PhoneNumbers: \"CONTENT_REDACTED\")"}
}

public struct AssociatePhoneNumbersWithVoiceConnectorGroupOutput {
    /// If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
    public var phoneNumberErrors: [ChimeSDKVoiceClientTypes.PhoneNumberError]?

    public init(
        phoneNumberErrors: [ChimeSDKVoiceClientTypes.PhoneNumberError]? = nil
    )
    {
        self.phoneNumberErrors = phoneNumberErrors
    }
}

public struct BatchDeletePhoneNumberInput {
    /// List of phone number IDs.
    /// This member is required.
    public var phoneNumberIds: [Swift.String]?

    public init(
        phoneNumberIds: [Swift.String]? = nil
    )
    {
        self.phoneNumberIds = phoneNumberIds
    }
}

public struct BatchDeletePhoneNumberOutput {
    /// If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
    public var phoneNumberErrors: [ChimeSDKVoiceClientTypes.PhoneNumberError]?

    public init(
        phoneNumberErrors: [ChimeSDKVoiceClientTypes.PhoneNumberError]? = nil
    )
    {
        self.phoneNumberErrors = phoneNumberErrors
    }
}

extension ChimeSDKVoiceClientTypes {

    public enum PhoneNumberProductType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sipmediaapplicationdialin
        case voiceconnector
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneNumberProductType] {
            return [
                .sipmediaapplicationdialin,
                .voiceconnector
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sipmediaapplicationdialin: return "SipMediaApplicationDialIn"
            case .voiceconnector: return "VoiceConnector"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The phone number ID, product type, or calling name fields to update, used with the [BatchUpdatePhoneNumber] and [UpdatePhoneNumber] actions.
    public struct UpdatePhoneNumberRequestItem {
        /// The outbound calling name to update.
        public var callingName: Swift.String?
        /// The name of the phone number.
        public var name: Swift.String?
        /// The phone number ID to update.
        /// This member is required.
        public var phoneNumberId: Swift.String?
        /// The product type to update.
        public var productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType?

        public init(
            callingName: Swift.String? = nil,
            name: Swift.String? = nil,
            phoneNumberId: Swift.String? = nil,
            productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType? = nil
        )
        {
            self.callingName = callingName
            self.name = name
            self.phoneNumberId = phoneNumberId
            self.productType = productType
        }
    }

}

extension ChimeSDKVoiceClientTypes.UpdatePhoneNumberRequestItem: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdatePhoneNumberRequestItem(productType: \(Swift.String(describing: productType)), callingName: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\", phoneNumberId: \"CONTENT_REDACTED\")"}
}

public struct BatchUpdatePhoneNumberInput {
    /// Lists the phone numbers in the update request.
    /// This member is required.
    public var updatePhoneNumberRequestItems: [ChimeSDKVoiceClientTypes.UpdatePhoneNumberRequestItem]?

    public init(
        updatePhoneNumberRequestItems: [ChimeSDKVoiceClientTypes.UpdatePhoneNumberRequestItem]? = nil
    )
    {
        self.updatePhoneNumberRequestItems = updatePhoneNumberRequestItems
    }
}

public struct BatchUpdatePhoneNumberOutput {
    /// A list of failed phone numbers and their error messages.
    public var phoneNumberErrors: [ChimeSDKVoiceClientTypes.PhoneNumberError]?

    public init(
        phoneNumberErrors: [ChimeSDKVoiceClientTypes.PhoneNumberError]? = nil
    )
    {
        self.phoneNumberErrors = phoneNumberErrors
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The details of an Amazon Chime SDK Voice Connector call.
    public struct CallDetails {
        /// Identifies a person as the caller or the callee.
        public var isCaller: Swift.Bool?
        /// The transaction ID of a Voice Connector call.
        public var transactionId: Swift.String?
        /// The Voice Connector ID.
        public var voiceConnectorId: Swift.String?

        public init(
            isCaller: Swift.Bool? = nil,
            transactionId: Swift.String? = nil,
            voiceConnectorId: Swift.String? = nil
        )
        {
            self.isCaller = isCaller
            self.transactionId = transactionId
            self.voiceConnectorId = voiceConnectorId
        }
    }

}

extension ChimeSDKVoiceClientTypes {

    public enum CallingNameStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case unassigned
        case updatefailed
        case updateinprogress
        case updatesucceeded
        case sdkUnknown(Swift.String)

        public static var allCases: [CallingNameStatus] {
            return [
                .unassigned,
                .updatefailed,
                .updateinprogress,
                .updatesucceeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .unassigned: return "Unassigned"
            case .updatefailed: return "UpdateFailed"
            case .updateinprogress: return "UpdateInProgress"
            case .updatesucceeded: return "UpdateSucceeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKVoiceClientTypes {

    public enum CallLegType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case callee
        case caller
        case sdkUnknown(Swift.String)

        public static var allCases: [CallLegType] {
            return [
                .callee,
                .caller
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .callee: return "Callee"
            case .caller: return "Caller"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKVoiceClientTypes {
    /// A suggested address.
    public struct CandidateAddress {
        /// The city of the candidate address.
        public var city: Swift.String?
        /// The country of the candidate address.
        public var country: Swift.String?
        /// The postal code of the candidate address.
        public var postalCode: Swift.String?
        /// The zip + 4 or postal code +4 of the candidate address.
        public var postalCodePlus4: Swift.String?
        /// The state of the candidate address.
        public var state: Swift.String?
        /// The street information of the candidate address.
        public var streetInfo: Swift.String?
        /// The numeric portion of the candidate address.
        public var streetNumber: Swift.String?

        public init(
            city: Swift.String? = nil,
            country: Swift.String? = nil,
            postalCode: Swift.String? = nil,
            postalCodePlus4: Swift.String? = nil,
            state: Swift.String? = nil,
            streetInfo: Swift.String? = nil,
            streetNumber: Swift.String? = nil
        )
        {
            self.city = city
            self.country = country
            self.postalCode = postalCode
            self.postalCodePlus4 = postalCodePlus4
            self.state = state
            self.streetInfo = streetInfo
            self.streetNumber = streetNumber
        }
    }

}

extension ChimeSDKVoiceClientTypes.CandidateAddress: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CandidateAddress(city: \"CONTENT_REDACTED\", country: \"CONTENT_REDACTED\", postalCode: \"CONTENT_REDACTED\", postalCodePlus4: \"CONTENT_REDACTED\", state: \"CONTENT_REDACTED\", streetInfo: \"CONTENT_REDACTED\", streetNumber: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKVoiceClientTypes {

    public enum Capability: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sms
        case voice
        case sdkUnknown(Swift.String)

        public static var allCases: [Capability] {
            return [
                .sms,
                .voice
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sms: return "SMS"
            case .voice: return "Voice"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The request exceeds the resource limit.
public struct ResourceLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKVoiceClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKVoiceClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

public struct CreatePhoneNumberOrderInput {
    /// List of phone numbers, in E.164 format.
    /// This member is required.
    public var e164PhoneNumbers: [Swift.String]?
    /// Specifies the name assigned to one or more phone numbers.
    public var name: Swift.String?
    /// The phone number product type.
    /// This member is required.
    public var productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType?

    public init(
        e164PhoneNumbers: [Swift.String]? = nil,
        name: Swift.String? = nil,
        productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType? = nil
    )
    {
        self.e164PhoneNumbers = e164PhoneNumbers
        self.name = name
        self.productType = productType
    }
}

extension CreatePhoneNumberOrderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePhoneNumberOrderInput(productType: \(Swift.String(describing: productType)), e164PhoneNumbers: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKVoiceClientTypes {

    public enum OrderedPhoneNumberStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case acquired
        case failed
        case processing
        case sdkUnknown(Swift.String)

        public static var allCases: [OrderedPhoneNumberStatus] {
            return [
                .acquired,
                .failed,
                .processing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .acquired: return "Acquired"
            case .failed: return "Failed"
            case .processing: return "Processing"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKVoiceClientTypes {
    /// A phone number for which an order has been placed.
    public struct OrderedPhoneNumber {
        /// The phone number, in E.164 format.
        public var e164PhoneNumber: Swift.String?
        /// The phone number status.
        public var status: ChimeSDKVoiceClientTypes.OrderedPhoneNumberStatus?

        public init(
            e164PhoneNumber: Swift.String? = nil,
            status: ChimeSDKVoiceClientTypes.OrderedPhoneNumberStatus? = nil
        )
        {
            self.e164PhoneNumber = e164PhoneNumber
            self.status = status
        }
    }

}

extension ChimeSDKVoiceClientTypes.OrderedPhoneNumber: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrderedPhoneNumber(status: \(Swift.String(describing: status)), e164PhoneNumber: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKVoiceClientTypes {

    public enum PhoneNumberOrderType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case new
        case porting
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneNumberOrderType] {
            return [
                .new,
                .porting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .new: return "New"
            case .porting: return "Porting"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKVoiceClientTypes {

    public enum PhoneNumberOrderStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelrequested
        case cancelled
        case changerequested
        case exception
        case foc
        case failed
        case partial
        case pendingdocuments
        case processing
        case submitted
        case successful
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneNumberOrderStatus] {
            return [
                .cancelrequested,
                .cancelled,
                .changerequested,
                .exception,
                .foc,
                .failed,
                .partial,
                .pendingdocuments,
                .processing,
                .submitted,
                .successful
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelrequested: return "CancelRequested"
            case .cancelled: return "Cancelled"
            case .changerequested: return "ChangeRequested"
            case .exception: return "Exception"
            case .foc: return "FOC"
            case .failed: return "Failed"
            case .partial: return "Partial"
            case .pendingdocuments: return "PendingDocuments"
            case .processing: return "Processing"
            case .submitted: return "Submitted"
            case .successful: return "Successful"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The details of an Amazon Chime SDK phone number order.
    public struct PhoneNumberOrder {
        /// The phone number order creation time stamp, in ISO 8601 format.
        public var createdTimestamp: Foundation.Date?
        /// The type of phone number being ordered, local or toll-free.
        public var orderType: ChimeSDKVoiceClientTypes.PhoneNumberOrderType?
        /// The ordered phone number details, such as the phone number in E.164 format and the phone number status.
        public var orderedPhoneNumbers: [ChimeSDKVoiceClientTypes.OrderedPhoneNumber]?
        /// The ID of the phone order.
        public var phoneNumberOrderId: Swift.String?
        /// The phone number order product type.
        public var productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType?
        /// The status of the phone number order.
        public var status: ChimeSDKVoiceClientTypes.PhoneNumberOrderStatus?
        /// The updated phone number order time stamp, in ISO 8601 format.
        public var updatedTimestamp: Foundation.Date?

        public init(
            createdTimestamp: Foundation.Date? = nil,
            orderType: ChimeSDKVoiceClientTypes.PhoneNumberOrderType? = nil,
            orderedPhoneNumbers: [ChimeSDKVoiceClientTypes.OrderedPhoneNumber]? = nil,
            phoneNumberOrderId: Swift.String? = nil,
            productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType? = nil,
            status: ChimeSDKVoiceClientTypes.PhoneNumberOrderStatus? = nil,
            updatedTimestamp: Foundation.Date? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.orderType = orderType
            self.orderedPhoneNumbers = orderedPhoneNumbers
            self.phoneNumberOrderId = phoneNumberOrderId
            self.productType = productType
            self.status = status
            self.updatedTimestamp = updatedTimestamp
        }
    }

}

public struct CreatePhoneNumberOrderOutput {
    /// The phone number order details.
    public var phoneNumberOrder: ChimeSDKVoiceClientTypes.PhoneNumberOrder?

    public init(
        phoneNumberOrder: ChimeSDKVoiceClientTypes.PhoneNumberOrder? = nil
    )
    {
        self.phoneNumberOrder = phoneNumberOrder
    }
}

extension ChimeSDKVoiceClientTypes {

    public enum GeoMatchLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case areacode
        case country
        case sdkUnknown(Swift.String)

        public static var allCases: [GeoMatchLevel] {
            return [
                .areacode,
                .country
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .areacode: return "AreaCode"
            case .country: return "Country"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The country and area code for a proxy phone number in a proxy phone session.
    public struct GeoMatchParams {
        /// The area code.
        /// This member is required.
        public var areaCode: Swift.String?
        /// The country.
        /// This member is required.
        public var country: Swift.String?

        public init(
            areaCode: Swift.String? = nil,
            country: Swift.String? = nil
        )
        {
            self.areaCode = areaCode
            self.country = country
        }
    }

}

extension ChimeSDKVoiceClientTypes {

    public enum NumberSelectionBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case avoidsticky
        case prefersticky
        case sdkUnknown(Swift.String)

        public static var allCases: [NumberSelectionBehavior] {
            return [
                .avoidsticky,
                .prefersticky
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .avoidsticky: return "AvoidSticky"
            case .prefersticky: return "PreferSticky"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateProxySessionInput {
    /// The proxy session's capabilities.
    /// This member is required.
    public var capabilities: [ChimeSDKVoiceClientTypes.Capability]?
    /// The number of minutes allowed for the proxy session.
    public var expiryMinutes: Swift.Int?
    /// The preference for matching the country or area code of the proxy phone number with that of the first participant.
    public var geoMatchLevel: ChimeSDKVoiceClientTypes.GeoMatchLevel?
    /// The country and area code for the proxy phone number.
    public var geoMatchParams: ChimeSDKVoiceClientTypes.GeoMatchParams?
    /// The name of the proxy session.
    public var name: Swift.String?
    /// The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.
    public var numberSelectionBehavior: ChimeSDKVoiceClientTypes.NumberSelectionBehavior?
    /// The participant phone numbers.
    /// This member is required.
    public var participantPhoneNumbers: [Swift.String]?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        capabilities: [ChimeSDKVoiceClientTypes.Capability]? = nil,
        expiryMinutes: Swift.Int? = nil,
        geoMatchLevel: ChimeSDKVoiceClientTypes.GeoMatchLevel? = nil,
        geoMatchParams: ChimeSDKVoiceClientTypes.GeoMatchParams? = nil,
        name: Swift.String? = nil,
        numberSelectionBehavior: ChimeSDKVoiceClientTypes.NumberSelectionBehavior? = nil,
        participantPhoneNumbers: [Swift.String]? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.capabilities = capabilities
        self.expiryMinutes = expiryMinutes
        self.geoMatchLevel = geoMatchLevel
        self.geoMatchParams = geoMatchParams
        self.name = name
        self.numberSelectionBehavior = numberSelectionBehavior
        self.participantPhoneNumbers = participantPhoneNumbers
        self.voiceConnectorId = voiceConnectorId
    }
}

extension CreateProxySessionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateProxySessionInput(capabilities: \(Swift.String(describing: capabilities)), expiryMinutes: \(Swift.String(describing: expiryMinutes)), geoMatchLevel: \(Swift.String(describing: geoMatchLevel)), geoMatchParams: \(Swift.String(describing: geoMatchParams)), numberSelectionBehavior: \(Swift.String(describing: numberSelectionBehavior)), voiceConnectorId: \(Swift.String(describing: voiceConnectorId)), name: \"CONTENT_REDACTED\", participantPhoneNumbers: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKVoiceClientTypes {
    /// The phone number and proxy phone number for a participant in an Amazon Chime SDK Voice Connector proxy session.
    public struct Participant {
        /// The participant's phone number.
        public var phoneNumber: Swift.String?
        /// The participant's proxy phone number.
        public var proxyPhoneNumber: Swift.String?

        public init(
            phoneNumber: Swift.String? = nil,
            proxyPhoneNumber: Swift.String? = nil
        )
        {
            self.phoneNumber = phoneNumber
            self.proxyPhoneNumber = proxyPhoneNumber
        }
    }

}

extension ChimeSDKVoiceClientTypes.Participant: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Participant(phoneNumber: \"CONTENT_REDACTED\", proxyPhoneNumber: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKVoiceClientTypes {

    public enum ProxySessionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case closed
        case inprogress
        case `open`
        case sdkUnknown(Swift.String)

        public static var allCases: [ProxySessionStatus] {
            return [
                .closed,
                .inprogress,
                .open
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .closed: return "Closed"
            case .inprogress: return "InProgress"
            case .open: return "Open"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The proxy session for an Amazon Chime SDK Voice Connector.
    public struct ProxySession {
        /// The proxy session capabilities.
        public var capabilities: [ChimeSDKVoiceClientTypes.Capability]?
        /// The created time stamp, in ISO 8601 format.
        public var createdTimestamp: Foundation.Date?
        /// The ended time stamp, in ISO 8601 format.
        public var endedTimestamp: Foundation.Date?
        /// The number of minutes allowed for the proxy session.
        public var expiryMinutes: Swift.Int?
        /// The preference for matching the country or area code of the proxy phone number with that of the first participant.
        public var geoMatchLevel: ChimeSDKVoiceClientTypes.GeoMatchLevel?
        /// The country and area code for the proxy phone number.
        public var geoMatchParams: ChimeSDKVoiceClientTypes.GeoMatchParams?
        /// The proxy session name.
        public var name: Swift.String?
        /// The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.
        public var numberSelectionBehavior: ChimeSDKVoiceClientTypes.NumberSelectionBehavior?
        /// The proxy session participants.
        public var participants: [ChimeSDKVoiceClientTypes.Participant]?
        /// The proxy session ID.
        public var proxySessionId: Swift.String?
        /// The proxy session status.
        public var status: ChimeSDKVoiceClientTypes.ProxySessionStatus?
        /// The updated time stamp, in ISO 8601 format.
        public var updatedTimestamp: Foundation.Date?
        /// The Voice Connector ID.
        public var voiceConnectorId: Swift.String?

        public init(
            capabilities: [ChimeSDKVoiceClientTypes.Capability]? = nil,
            createdTimestamp: Foundation.Date? = nil,
            endedTimestamp: Foundation.Date? = nil,
            expiryMinutes: Swift.Int? = nil,
            geoMatchLevel: ChimeSDKVoiceClientTypes.GeoMatchLevel? = nil,
            geoMatchParams: ChimeSDKVoiceClientTypes.GeoMatchParams? = nil,
            name: Swift.String? = nil,
            numberSelectionBehavior: ChimeSDKVoiceClientTypes.NumberSelectionBehavior? = nil,
            participants: [ChimeSDKVoiceClientTypes.Participant]? = nil,
            proxySessionId: Swift.String? = nil,
            status: ChimeSDKVoiceClientTypes.ProxySessionStatus? = nil,
            updatedTimestamp: Foundation.Date? = nil,
            voiceConnectorId: Swift.String? = nil
        )
        {
            self.capabilities = capabilities
            self.createdTimestamp = createdTimestamp
            self.endedTimestamp = endedTimestamp
            self.expiryMinutes = expiryMinutes
            self.geoMatchLevel = geoMatchLevel
            self.geoMatchParams = geoMatchParams
            self.name = name
            self.numberSelectionBehavior = numberSelectionBehavior
            self.participants = participants
            self.proxySessionId = proxySessionId
            self.status = status
            self.updatedTimestamp = updatedTimestamp
            self.voiceConnectorId = voiceConnectorId
        }
    }

}

public struct CreateProxySessionOutput {
    /// The proxy session details.
    public var proxySession: ChimeSDKVoiceClientTypes.ProxySession?

    public init(
        proxySession: ChimeSDKVoiceClientTypes.ProxySession? = nil
    )
    {
        self.proxySession = proxySession
    }
}

/// Multiple instances of the same request were made simultaneously.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKVoiceClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKVoiceClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The endpoint assigned to a SIP media application.
    public struct SipMediaApplicationEndpoint {
        /// Valid Amazon Resource Name (ARN) of the Lambda function, version, or alias. The function must be created in the same AWS Region as the SIP media application.
        public var lambdaArn: Swift.String?

        public init(
            lambdaArn: Swift.String? = nil
        )
        {
            self.lambdaArn = lambdaArn
        }
    }

}

extension ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SipMediaApplicationEndpoint(lambdaArn: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKVoiceClientTypes {
    /// Describes a tag applied to a resource.
    public struct Tag {
        /// The tag's key.
        /// This member is required.
        public var key: Swift.String?
        /// The tag's value.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension ChimeSDKVoiceClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \"CONTENT_REDACTED\", value: \"CONTENT_REDACTED\")"}
}

public struct CreateSipMediaApplicationInput {
    /// The AWS Region assigned to the SIP media application.
    /// This member is required.
    public var awsRegion: Swift.String?
    /// List of endpoints (Lambda ARNs) specified for the SIP media application.
    /// This member is required.
    public var endpoints: [ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint]?
    /// The SIP media application's name.
    /// This member is required.
    public var name: Swift.String?
    /// The tags assigned to the SIP media application.
    public var tags: [ChimeSDKVoiceClientTypes.Tag]?

    public init(
        awsRegion: Swift.String? = nil,
        endpoints: [ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint]? = nil,
        name: Swift.String? = nil,
        tags: [ChimeSDKVoiceClientTypes.Tag]? = nil
    )
    {
        self.awsRegion = awsRegion
        self.endpoints = endpoints
        self.name = name
        self.tags = tags
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The details of the SIP media application, including name and endpoints. An AWS account can have multiple SIP media applications.
    public struct SipMediaApplication {
        /// The AWS Region in which the SIP media application is created.
        public var awsRegion: Swift.String?
        /// The SIP media application creation timestamp, in ISO 8601 format.
        public var createdTimestamp: Foundation.Date?
        /// List of endpoints for a SIP media application. Currently, only one endpoint per SIP media application is permitted.
        public var endpoints: [ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint]?
        /// The SIP media application's name.
        public var name: Swift.String?
        /// The ARN of the SIP media application.
        public var sipMediaApplicationArn: Swift.String?
        /// A SIP media application's ID.
        public var sipMediaApplicationId: Swift.String?
        /// The time at which the SIP media application was updated.
        public var updatedTimestamp: Foundation.Date?

        public init(
            awsRegion: Swift.String? = nil,
            createdTimestamp: Foundation.Date? = nil,
            endpoints: [ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint]? = nil,
            name: Swift.String? = nil,
            sipMediaApplicationArn: Swift.String? = nil,
            sipMediaApplicationId: Swift.String? = nil,
            updatedTimestamp: Foundation.Date? = nil
        )
        {
            self.awsRegion = awsRegion
            self.createdTimestamp = createdTimestamp
            self.endpoints = endpoints
            self.name = name
            self.sipMediaApplicationArn = sipMediaApplicationArn
            self.sipMediaApplicationId = sipMediaApplicationId
            self.updatedTimestamp = updatedTimestamp
        }
    }

}

public struct CreateSipMediaApplicationOutput {
    /// The SIP media application details.
    public var sipMediaApplication: ChimeSDKVoiceClientTypes.SipMediaApplication?

    public init(
        sipMediaApplication: ChimeSDKVoiceClientTypes.SipMediaApplication? = nil
    )
    {
        self.sipMediaApplication = sipMediaApplication
    }
}

public struct CreateSipMediaApplicationCallInput {
    /// Context passed to a CreateSipMediaApplication API call. For example, you could pass key-value pairs such as: "FirstName": "John", "LastName": "Doe"
    public var argumentsMap: [Swift.String: Swift.String]?
    /// The phone number that a user calls from. This is a phone number in your Amazon Chime SDK phone number inventory.
    /// This member is required.
    public var fromPhoneNumber: Swift.String?
    /// The SIP headers added to an outbound call leg.
    public var sipHeaders: [Swift.String: Swift.String]?
    /// The ID of the SIP media application.
    /// This member is required.
    public var sipMediaApplicationId: Swift.String?
    /// The phone number that the service should call.
    /// This member is required.
    public var toPhoneNumber: Swift.String?

    public init(
        argumentsMap: [Swift.String: Swift.String]? = nil,
        fromPhoneNumber: Swift.String? = nil,
        sipHeaders: [Swift.String: Swift.String]? = nil,
        sipMediaApplicationId: Swift.String? = nil,
        toPhoneNumber: Swift.String? = nil
    )
    {
        self.argumentsMap = argumentsMap
        self.fromPhoneNumber = fromPhoneNumber
        self.sipHeaders = sipHeaders
        self.sipMediaApplicationId = sipMediaApplicationId
        self.toPhoneNumber = toPhoneNumber
    }
}

extension CreateSipMediaApplicationCallInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSipMediaApplicationCallInput(sipMediaApplicationId: \(Swift.String(describing: sipMediaApplicationId)), argumentsMap: \"CONTENT_REDACTED\", fromPhoneNumber: \"CONTENT_REDACTED\", sipHeaders: \"CONTENT_REDACTED\", toPhoneNumber: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKVoiceClientTypes {
    /// A Call instance for a SIP media application.
    public struct SipMediaApplicationCall {
        /// The call's transaction ID.
        public var transactionId: Swift.String?

        public init(
            transactionId: Swift.String? = nil
        )
        {
            self.transactionId = transactionId
        }
    }

}

public struct CreateSipMediaApplicationCallOutput {
    /// The actual call.
    public var sipMediaApplicationCall: ChimeSDKVoiceClientTypes.SipMediaApplicationCall?

    public init(
        sipMediaApplicationCall: ChimeSDKVoiceClientTypes.SipMediaApplicationCall? = nil
    )
    {
        self.sipMediaApplicationCall = sipMediaApplicationCall
    }
}

extension ChimeSDKVoiceClientTypes {
    /// A target SIP media application and other details, such as priority and AWS Region, to be specified in the SIP rule. Only one SIP rule per AWS Region can be provided.
    public struct SipRuleTargetApplication {
        /// The AWS Region of a rule's target SIP media application.
        public var awsRegion: Swift.String?
        /// The priority setting of a rule's target SIP media application.
        public var priority: Swift.Int?
        /// The ID of a rule's target SIP media application.
        public var sipMediaApplicationId: Swift.String?

        public init(
            awsRegion: Swift.String? = nil,
            priority: Swift.Int? = nil,
            sipMediaApplicationId: Swift.String? = nil
        )
        {
            self.awsRegion = awsRegion
            self.priority = priority
            self.sipMediaApplicationId = sipMediaApplicationId
        }
    }

}

extension ChimeSDKVoiceClientTypes {

    public enum SipRuleTriggerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case requesturihostname
        case tophonenumber
        case sdkUnknown(Swift.String)

        public static var allCases: [SipRuleTriggerType] {
            return [
                .requesturihostname,
                .tophonenumber
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .requesturihostname: return "RequestUriHostname"
            case .tophonenumber: return "ToPhoneNumber"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateSipRuleInput {
    /// Disables or enables a SIP rule. You must disable SIP rules before you can delete them.
    public var disabled: Swift.Bool?
    /// The name of the SIP rule.
    /// This member is required.
    public var name: Swift.String?
    /// List of SIP media applications, with priority and AWS Region. Only one SIP application per AWS Region can be used.
    public var targetApplications: [ChimeSDKVoiceClientTypes.SipRuleTargetApplication]?
    /// The type of trigger assigned to the SIP rule in TriggerValue, currently RequestUriHostname or ToPhoneNumber.
    /// This member is required.
    public var triggerType: ChimeSDKVoiceClientTypes.SipRuleTriggerType?
    /// If TriggerType is RequestUriHostname, the value can be the outbound host name of a Voice Connector. If TriggerType is ToPhoneNumber, the value can be a customer-owned phone number in the E164 format. The SipMediaApplication specified in the SipRule is triggered if the request URI in an incoming SIP request matches the RequestUriHostname, or if the To header in the incoming SIP request matches the ToPhoneNumber value.
    /// This member is required.
    public var triggerValue: Swift.String?

    public init(
        disabled: Swift.Bool? = nil,
        name: Swift.String? = nil,
        targetApplications: [ChimeSDKVoiceClientTypes.SipRuleTargetApplication]? = nil,
        triggerType: ChimeSDKVoiceClientTypes.SipRuleTriggerType? = nil,
        triggerValue: Swift.String? = nil
    )
    {
        self.disabled = disabled
        self.name = name
        self.targetApplications = targetApplications
        self.triggerType = triggerType
        self.triggerValue = triggerValue
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The details of a SIP rule, including name, triggers, and target applications. An AWS account can have multiple SIP rules.
    public struct SipRule {
        /// The time at which the SIP rule was created, in ISO 8601 format.
        public var createdTimestamp: Foundation.Date?
        /// Indicates whether the SIP rule is enabled or disabled. You must disable a rule before you can delete it.
        public var disabled: Swift.Bool?
        /// A SIP rule's name.
        public var name: Swift.String?
        /// A SIP rule's ID.
        public var sipRuleId: Swift.String?
        /// The target SIP media application and other details, such as priority and AWS Region, to be specified in the SIP rule. Only one SIP rule per AWS Region can be provided.
        public var targetApplications: [ChimeSDKVoiceClientTypes.SipRuleTargetApplication]?
        /// The type of trigger set for a SIP rule, either a phone number or a URI request host name.
        public var triggerType: ChimeSDKVoiceClientTypes.SipRuleTriggerType?
        /// The value set for a SIP rule's trigger type. Either a phone number or a URI hostname.
        public var triggerValue: Swift.String?
        /// The time at which the SIP rule was updated, in ISO 8601 format.
        public var updatedTimestamp: Foundation.Date?

        public init(
            createdTimestamp: Foundation.Date? = nil,
            disabled: Swift.Bool? = nil,
            name: Swift.String? = nil,
            sipRuleId: Swift.String? = nil,
            targetApplications: [ChimeSDKVoiceClientTypes.SipRuleTargetApplication]? = nil,
            triggerType: ChimeSDKVoiceClientTypes.SipRuleTriggerType? = nil,
            triggerValue: Swift.String? = nil,
            updatedTimestamp: Foundation.Date? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.disabled = disabled
            self.name = name
            self.sipRuleId = sipRuleId
            self.targetApplications = targetApplications
            self.triggerType = triggerType
            self.triggerValue = triggerValue
            self.updatedTimestamp = updatedTimestamp
        }
    }

}

public struct CreateSipRuleOutput {
    /// The SIP rule information, including the rule ID, triggers, and target applications.
    public var sipRule: ChimeSDKVoiceClientTypes.SipRule?

    public init(
        sipRule: ChimeSDKVoiceClientTypes.SipRule? = nil
    )
    {
        self.sipRule = sipRule
    }
}

extension ChimeSDKVoiceClientTypes {

    public enum VoiceConnectorAwsRegion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case apNortheast1
        case apNortheast2
        case apSoutheast1
        case apSoutheast2
        case caCentral1
        case euCentral1
        case euWest1
        case euWest2
        case usEast1
        case usWest2
        case sdkUnknown(Swift.String)

        public static var allCases: [VoiceConnectorAwsRegion] {
            return [
                .apNortheast1,
                .apNortheast2,
                .apSoutheast1,
                .apSoutheast2,
                .caCentral1,
                .euCentral1,
                .euWest1,
                .euWest2,
                .usEast1,
                .usWest2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .apNortheast1: return "ap-northeast-1"
            case .apNortheast2: return "ap-northeast-2"
            case .apSoutheast1: return "ap-southeast-1"
            case .apSoutheast2: return "ap-southeast-2"
            case .caCentral1: return "ca-central-1"
            case .euCentral1: return "eu-central-1"
            case .euWest1: return "eu-west-1"
            case .euWest2: return "eu-west-2"
            case .usEast1: return "us-east-1"
            case .usWest2: return "us-west-2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateVoiceConnectorInput {
    /// The AWS Region in which the Amazon Chime SDK Voice Connector is created. Default value: us-east-1 .
    public var awsRegion: ChimeSDKVoiceClientTypes.VoiceConnectorAwsRegion?
    /// The name of the Voice Connector.
    /// This member is required.
    public var name: Swift.String?
    /// Enables or disables encryption for the Voice Connector.
    /// This member is required.
    public var requireEncryption: Swift.Bool?
    /// The tags assigned to the Voice Connector.
    public var tags: [ChimeSDKVoiceClientTypes.Tag]?

    public init(
        awsRegion: ChimeSDKVoiceClientTypes.VoiceConnectorAwsRegion? = nil,
        name: Swift.String? = nil,
        requireEncryption: Swift.Bool? = nil,
        tags: [ChimeSDKVoiceClientTypes.Tag]? = nil
    )
    {
        self.awsRegion = awsRegion
        self.name = name
        self.requireEncryption = requireEncryption
        self.tags = tags
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The Amazon Chime SDK Voice Connector configuration, including outbound host name and encryption settings.
    public struct VoiceConnector {
        /// The AWS Region in which the Voice Connector is created. Default: us-east-1.
        public var awsRegion: ChimeSDKVoiceClientTypes.VoiceConnectorAwsRegion?
        /// The Voice Connector's creation timestamp, in ISO 8601 format.
        public var createdTimestamp: Foundation.Date?
        /// The Voice Connector's name.
        public var name: Swift.String?
        /// The outbound host name for the Voice Connector.
        public var outboundHostName: Swift.String?
        /// Enables or disables encryption for the Voice Connector.
        public var requireEncryption: Swift.Bool?
        /// The Voice Connector's updated timestamp, in ISO 8601 format.
        public var updatedTimestamp: Foundation.Date?
        /// The ARN of the Voice Connector.
        public var voiceConnectorArn: Swift.String?
        /// The Voice Connector's ID.
        public var voiceConnectorId: Swift.String?

        public init(
            awsRegion: ChimeSDKVoiceClientTypes.VoiceConnectorAwsRegion? = nil,
            createdTimestamp: Foundation.Date? = nil,
            name: Swift.String? = nil,
            outboundHostName: Swift.String? = nil,
            requireEncryption: Swift.Bool? = nil,
            updatedTimestamp: Foundation.Date? = nil,
            voiceConnectorArn: Swift.String? = nil,
            voiceConnectorId: Swift.String? = nil
        )
        {
            self.awsRegion = awsRegion
            self.createdTimestamp = createdTimestamp
            self.name = name
            self.outboundHostName = outboundHostName
            self.requireEncryption = requireEncryption
            self.updatedTimestamp = updatedTimestamp
            self.voiceConnectorArn = voiceConnectorArn
            self.voiceConnectorId = voiceConnectorId
        }
    }

}

public struct CreateVoiceConnectorOutput {
    /// The details of the Voice Connector.
    public var voiceConnector: ChimeSDKVoiceClientTypes.VoiceConnector?

    public init(
        voiceConnector: ChimeSDKVoiceClientTypes.VoiceConnector? = nil
    )
    {
        self.voiceConnector = voiceConnector
    }
}

extension ChimeSDKVoiceClientTypes {
    /// For Amazon Chime SDK Voice Connector groups, the Amazon Chime SDK Voice Connectors to which you route inbound calls. Includes priority configuration settings. Limit: 3 VoiceConnectorItems per Voice Connector group.
    public struct VoiceConnectorItem {
        /// The priority setting of a Voice Connector item. Calls are routed to hosts in priority order, with 1 as the highest priority. When hosts have equal priority, the system distributes calls among them based on their relative weight.
        /// This member is required.
        public var priority: Swift.Int?
        /// The Voice Connector ID.
        /// This member is required.
        public var voiceConnectorId: Swift.String?

        public init(
            priority: Swift.Int? = nil,
            voiceConnectorId: Swift.String? = nil
        )
        {
            self.priority = priority
            self.voiceConnectorId = voiceConnectorId
        }
    }

}

public struct CreateVoiceConnectorGroupInput {
    /// The name of the Voice Connector group.
    /// This member is required.
    public var name: Swift.String?
    /// Lists the Voice Connectors that inbound calls are routed to.
    public var voiceConnectorItems: [ChimeSDKVoiceClientTypes.VoiceConnectorItem]?

    public init(
        name: Swift.String? = nil,
        voiceConnectorItems: [ChimeSDKVoiceClientTypes.VoiceConnectorItem]? = nil
    )
    {
        self.name = name
        self.voiceConnectorItems = voiceConnectorItems
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The Amazon Chime SDK Voice Connector group configuration, including associated Voice Connectors. You can include Voice Connectors from different AWS Regions in a group. This creates a fault tolerant mechanism for fallback in case of availability events.
    public struct VoiceConnectorGroup {
        /// The Voice Connector group's creation time stamp, in ISO 8601 format.
        public var createdTimestamp: Foundation.Date?
        /// The name of a Voice Connector group.
        public var name: Swift.String?
        /// The Voice Connector group's creation time stamp, in ISO 8601 format.
        public var updatedTimestamp: Foundation.Date?
        /// The ARN of the Voice Connector group.
        public var voiceConnectorGroupArn: Swift.String?
        /// The ID of a Voice Connector group.
        public var voiceConnectorGroupId: Swift.String?
        /// The Voice Connectors to which you route inbound calls.
        public var voiceConnectorItems: [ChimeSDKVoiceClientTypes.VoiceConnectorItem]?

        public init(
            createdTimestamp: Foundation.Date? = nil,
            name: Swift.String? = nil,
            updatedTimestamp: Foundation.Date? = nil,
            voiceConnectorGroupArn: Swift.String? = nil,
            voiceConnectorGroupId: Swift.String? = nil,
            voiceConnectorItems: [ChimeSDKVoiceClientTypes.VoiceConnectorItem]? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.name = name
            self.updatedTimestamp = updatedTimestamp
            self.voiceConnectorGroupArn = voiceConnectorGroupArn
            self.voiceConnectorGroupId = voiceConnectorGroupId
            self.voiceConnectorItems = voiceConnectorItems
        }
    }

}

public struct CreateVoiceConnectorGroupOutput {
    /// The details of the Voice Connector group.
    public var voiceConnectorGroup: ChimeSDKVoiceClientTypes.VoiceConnectorGroup?

    public init(
        voiceConnectorGroup: ChimeSDKVoiceClientTypes.VoiceConnectorGroup? = nil
    )
    {
        self.voiceConnectorGroup = voiceConnectorGroup
    }
}

/// Access to the target resource is no longer available at the origin server. This condition is likely to be permanent.
public struct GoneException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKVoiceClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GoneException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKVoiceClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

public struct CreateVoiceProfileInput {
    /// The ID of the speaker search task.
    /// This member is required.
    public var speakerSearchTaskId: Swift.String?

    public init(
        speakerSearchTaskId: Swift.String? = nil
    )
    {
        self.speakerSearchTaskId = speakerSearchTaskId
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The combination of a voice print and caller ID.
    public struct VoiceProfile {
        /// The time at which the voice profile was created and enrolled.
        public var createdTimestamp: Foundation.Date?
        /// The time at which a voice profile expires unless you re-enroll the caller via the UpdateVoiceProfile API.
        public var expirationTimestamp: Foundation.Date?
        /// The time at which the voice profile was last updated.
        public var updatedTimestamp: Foundation.Date?
        /// The ARN of the voice profile.
        public var voiceProfileArn: Swift.String?
        /// The ID of the domain that contains the voice profile.
        public var voiceProfileDomainId: Swift.String?
        /// The ID of the voice profile.
        public var voiceProfileId: Swift.String?

        public init(
            createdTimestamp: Foundation.Date? = nil,
            expirationTimestamp: Foundation.Date? = nil,
            updatedTimestamp: Foundation.Date? = nil,
            voiceProfileArn: Swift.String? = nil,
            voiceProfileDomainId: Swift.String? = nil,
            voiceProfileId: Swift.String? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.expirationTimestamp = expirationTimestamp
            self.updatedTimestamp = updatedTimestamp
            self.voiceProfileArn = voiceProfileArn
            self.voiceProfileDomainId = voiceProfileDomainId
            self.voiceProfileId = voiceProfileId
        }
    }

}

extension ChimeSDKVoiceClientTypes.VoiceProfile: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VoiceProfile(createdTimestamp: \(Swift.String(describing: createdTimestamp)), expirationTimestamp: \(Swift.String(describing: expirationTimestamp)), updatedTimestamp: \(Swift.String(describing: updatedTimestamp)), voiceProfileDomainId: \(Swift.String(describing: voiceProfileDomainId)), voiceProfileId: \(Swift.String(describing: voiceProfileId)), voiceProfileArn: \"CONTENT_REDACTED\")"}
}

public struct CreateVoiceProfileOutput {
    /// The requested voice profile.
    public var voiceProfile: ChimeSDKVoiceClientTypes.VoiceProfile?

    public init(
        voiceProfile: ChimeSDKVoiceClientTypes.VoiceProfile? = nil
    )
    {
        self.voiceProfile = voiceProfile
    }
}

extension ChimeSDKVoiceClientTypes {
    /// A structure that contains the configuration settings for server-side encryption. We only support symmetric keys. Do not use asymmetric or HMAC keys, or KMS aliases.
    public struct ServerSideEncryptionConfiguration {
        /// The ARN of the KMS key used to encrypt the enrollment data in a voice profile domain. Asymmetric customer managed keys are not supported.
        /// This member is required.
        public var kmsKeyArn: Swift.String?

        public init(
            kmsKeyArn: Swift.String? = nil
        )
        {
            self.kmsKeyArn = kmsKeyArn
        }
    }

}

extension ChimeSDKVoiceClientTypes.ServerSideEncryptionConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServerSideEncryptionConfiguration(kmsKeyArn: \"CONTENT_REDACTED\")"}
}

public struct CreateVoiceProfileDomainInput {
    /// The unique identifier for the client request. Use a different token for different domain creation requests.
    public var clientRequestToken: Swift.String?
    /// A description of the voice profile domain.
    public var description: Swift.String?
    /// The name of the voice profile domain.
    /// This member is required.
    public var name: Swift.String?
    /// The server-side encryption configuration for the request.
    /// This member is required.
    public var serverSideEncryptionConfiguration: ChimeSDKVoiceClientTypes.ServerSideEncryptionConfiguration?
    /// The tags assigned to the domain.
    public var tags: [ChimeSDKVoiceClientTypes.Tag]?

    public init(
        clientRequestToken: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        serverSideEncryptionConfiguration: ChimeSDKVoiceClientTypes.ServerSideEncryptionConfiguration? = nil,
        tags: [ChimeSDKVoiceClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.name = name
        self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
        self.tags = tags
    }
}

extension ChimeSDKVoiceClientTypes {
    /// A collection of voice profiles.
    public struct VoiceProfileDomain {
        /// The time at which the voice profile domain was created.
        public var createdTimestamp: Foundation.Date?
        /// The description of the voice profile domain.
        public var description: Swift.String?
        /// The name of the voice profile domain.
        public var name: Swift.String?
        /// A structure that contains the configuration settings for server-side encryption.
        public var serverSideEncryptionConfiguration: ChimeSDKVoiceClientTypes.ServerSideEncryptionConfiguration?
        /// The time at which the voice profile was last updated.
        public var updatedTimestamp: Foundation.Date?
        /// The voice profile domain's Amazon Resource Number (ARN).
        public var voiceProfileDomainArn: Swift.String?
        /// The ID of the voice profile domain.
        public var voiceProfileDomainId: Swift.String?

        public init(
            createdTimestamp: Foundation.Date? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            serverSideEncryptionConfiguration: ChimeSDKVoiceClientTypes.ServerSideEncryptionConfiguration? = nil,
            updatedTimestamp: Foundation.Date? = nil,
            voiceProfileDomainArn: Swift.String? = nil,
            voiceProfileDomainId: Swift.String? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.description = description
            self.name = name
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
            self.updatedTimestamp = updatedTimestamp
            self.voiceProfileDomainArn = voiceProfileDomainArn
            self.voiceProfileDomainId = voiceProfileDomainId
        }
    }

}

extension ChimeSDKVoiceClientTypes.VoiceProfileDomain: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VoiceProfileDomain(createdTimestamp: \(Swift.String(describing: createdTimestamp)), description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), serverSideEncryptionConfiguration: \(Swift.String(describing: serverSideEncryptionConfiguration)), updatedTimestamp: \(Swift.String(describing: updatedTimestamp)), voiceProfileDomainId: \(Swift.String(describing: voiceProfileDomainId)), voiceProfileDomainArn: \"CONTENT_REDACTED\")"}
}

public struct CreateVoiceProfileDomainOutput {
    /// The requested voice profile domain.
    public var voiceProfileDomain: ChimeSDKVoiceClientTypes.VoiceProfileDomain?

    public init(
        voiceProfileDomain: ChimeSDKVoiceClientTypes.VoiceProfileDomain? = nil
    )
    {
        self.voiceProfileDomain = voiceProfileDomain
    }
}

public struct DeletePhoneNumberInput {
    /// The phone number ID.
    /// This member is required.
    public var phoneNumberId: Swift.String?

    public init(
        phoneNumberId: Swift.String? = nil
    )
    {
        self.phoneNumberId = phoneNumberId
    }
}

extension DeletePhoneNumberInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePhoneNumberInput(phoneNumberId: \"CONTENT_REDACTED\")"}
}

public struct DeleteProxySessionInput {
    /// The proxy session ID.
    /// This member is required.
    public var proxySessionId: Swift.String?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        proxySessionId: Swift.String? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.proxySessionId = proxySessionId
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct DeleteSipMediaApplicationInput {
    /// The SIP media application ID.
    /// This member is required.
    public var sipMediaApplicationId: Swift.String?

    public init(
        sipMediaApplicationId: Swift.String? = nil
    )
    {
        self.sipMediaApplicationId = sipMediaApplicationId
    }
}

public struct DeleteSipRuleInput {
    /// The SIP rule ID.
    /// This member is required.
    public var sipRuleId: Swift.String?

    public init(
        sipRuleId: Swift.String? = nil
    )
    {
        self.sipRuleId = sipRuleId
    }
}

public struct DeleteVoiceConnectorInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct DeleteVoiceConnectorEmergencyCallingConfigurationInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct DeleteVoiceConnectorGroupInput {
    /// The Voice Connector Group ID.
    /// This member is required.
    public var voiceConnectorGroupId: Swift.String?

    public init(
        voiceConnectorGroupId: Swift.String? = nil
    )
    {
        self.voiceConnectorGroupId = voiceConnectorGroupId
    }
}

public struct DeleteVoiceConnectorOriginationInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct DeleteVoiceConnectorProxyInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct DeleteVoiceConnectorStreamingConfigurationInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct DeleteVoiceConnectorTerminationInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct DeleteVoiceConnectorTerminationCredentialsInput {
    /// The RFC2617 compliant username associated with the SIP credentials, in US-ASCII format.
    /// This member is required.
    public var usernames: [Swift.String]?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        usernames: [Swift.String]? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.usernames = usernames
        self.voiceConnectorId = voiceConnectorId
    }
}

extension DeleteVoiceConnectorTerminationCredentialsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVoiceConnectorTerminationCredentialsInput(voiceConnectorId: \(Swift.String(describing: voiceConnectorId)), usernames: \"CONTENT_REDACTED\")"}
}

public struct DeleteVoiceProfileInput {
    /// The voice profile ID.
    /// This member is required.
    public var voiceProfileId: Swift.String?

    public init(
        voiceProfileId: Swift.String? = nil
    )
    {
        self.voiceProfileId = voiceProfileId
    }
}

public struct DeleteVoiceProfileDomainInput {
    /// The voice profile domain ID.
    /// This member is required.
    public var voiceProfileDomainId: Swift.String?

    public init(
        voiceProfileDomainId: Swift.String? = nil
    )
    {
        self.voiceProfileDomainId = voiceProfileDomainId
    }
}

public struct DisassociatePhoneNumbersFromVoiceConnectorInput {
    /// List of phone numbers, in E.164 format.
    /// This member is required.
    public var e164PhoneNumbers: [Swift.String]?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        e164PhoneNumbers: [Swift.String]? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.e164PhoneNumbers = e164PhoneNumbers
        self.voiceConnectorId = voiceConnectorId
    }
}

extension DisassociatePhoneNumbersFromVoiceConnectorInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociatePhoneNumbersFromVoiceConnectorInput(voiceConnectorId: \(Swift.String(describing: voiceConnectorId)), e164PhoneNumbers: \"CONTENT_REDACTED\")"}
}

public struct DisassociatePhoneNumbersFromVoiceConnectorOutput {
    /// If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
    public var phoneNumberErrors: [ChimeSDKVoiceClientTypes.PhoneNumberError]?

    public init(
        phoneNumberErrors: [ChimeSDKVoiceClientTypes.PhoneNumberError]? = nil
    )
    {
        self.phoneNumberErrors = phoneNumberErrors
    }
}

public struct DisassociatePhoneNumbersFromVoiceConnectorGroupInput {
    /// The list of phone numbers, in E.164 format.
    /// This member is required.
    public var e164PhoneNumbers: [Swift.String]?
    /// The Voice Connector group ID.
    /// This member is required.
    public var voiceConnectorGroupId: Swift.String?

    public init(
        e164PhoneNumbers: [Swift.String]? = nil,
        voiceConnectorGroupId: Swift.String? = nil
    )
    {
        self.e164PhoneNumbers = e164PhoneNumbers
        self.voiceConnectorGroupId = voiceConnectorGroupId
    }
}

extension DisassociatePhoneNumbersFromVoiceConnectorGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociatePhoneNumbersFromVoiceConnectorGroupInput(voiceConnectorGroupId: \(Swift.String(describing: voiceConnectorGroupId)), e164PhoneNumbers: \"CONTENT_REDACTED\")"}
}

public struct DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {
    /// If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
    public var phoneNumberErrors: [ChimeSDKVoiceClientTypes.PhoneNumberError]?

    public init(
        phoneNumberErrors: [ChimeSDKVoiceClientTypes.PhoneNumberError]? = nil
    )
    {
        self.phoneNumberErrors = phoneNumberErrors
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The Amazon Chime SDK Voice Connector settings. Includes any Amazon S3 buckets designated for storing call detail records.
    public struct VoiceConnectorSettings {
        /// The S3 bucket that stores the Voice Connector's call detail records.
        public var cdrBucket: Swift.String?

        public init(
            cdrBucket: Swift.String? = nil
        )
        {
            self.cdrBucket = cdrBucket
        }
    }

}

public struct GetGlobalSettingsOutput {
    /// The Voice Connector settings.
    public var voiceConnector: ChimeSDKVoiceClientTypes.VoiceConnectorSettings?

    public init(
        voiceConnector: ChimeSDKVoiceClientTypes.VoiceConnectorSettings? = nil
    )
    {
        self.voiceConnector = voiceConnector
    }
}

public struct GetPhoneNumberInput {
    /// The phone number ID.
    /// This member is required.
    public var phoneNumberId: Swift.String?

    public init(
        phoneNumberId: Swift.String? = nil
    )
    {
        self.phoneNumberId = phoneNumberId
    }
}

extension GetPhoneNumberInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPhoneNumberInput(phoneNumberId: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKVoiceClientTypes {

    public enum PhoneNumberAssociationName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sipruleid
        case voiceconnectorgroupid
        case voiceconnectorid
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneNumberAssociationName] {
            return [
                .sipruleid,
                .voiceconnectorgroupid,
                .voiceconnectorid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sipruleid: return "SipRuleId"
            case .voiceconnectorgroupid: return "VoiceConnectorGroupId"
            case .voiceconnectorid: return "VoiceConnectorId"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The phone number associations, such as an Amazon Chime SDK account ID, user ID, Voice Connector ID, or Voice Connector group ID.
    public struct PhoneNumberAssociation {
        /// The timestamp of the phone number association, in ISO 8601 format.
        public var associatedTimestamp: Foundation.Date?
        /// Defines the association with an Amazon Chime SDK account ID, user ID, Voice Connector ID, or Voice Connector group ID.
        public var name: ChimeSDKVoiceClientTypes.PhoneNumberAssociationName?
        /// Contains the ID for the entity specified in Name.
        public var value: Swift.String?

        public init(
            associatedTimestamp: Foundation.Date? = nil,
            name: ChimeSDKVoiceClientTypes.PhoneNumberAssociationName? = nil,
            value: Swift.String? = nil
        )
        {
            self.associatedTimestamp = associatedTimestamp
            self.name = name
            self.value = value
        }
    }

}

extension ChimeSDKVoiceClientTypes {
    /// The phone number capabilities for Amazon Chime SDK phone numbers, such as enabled inbound and outbound calling, and text messaging.
    public struct PhoneNumberCapabilities {
        /// Allows or denies inbound calling for the specified phone number.
        public var inboundCall: Swift.Bool?
        /// Allows or denies inbound MMS messaging for the specified phone number.
        public var inboundMMS: Swift.Bool?
        /// Allows or denies inbound SMS messaging for the specified phone number.
        public var inboundSMS: Swift.Bool?
        /// Allows or denies outbound calling for the specified phone number.
        public var outboundCall: Swift.Bool?
        /// Allows or denies inbound MMS messaging for the specified phone number.
        public var outboundMMS: Swift.Bool?
        /// Allows or denies outbound SMS messaging for the specified phone number.
        public var outboundSMS: Swift.Bool?

        public init(
            inboundCall: Swift.Bool? = nil,
            inboundMMS: Swift.Bool? = nil,
            inboundSMS: Swift.Bool? = nil,
            outboundCall: Swift.Bool? = nil,
            outboundMMS: Swift.Bool? = nil,
            outboundSMS: Swift.Bool? = nil
        )
        {
            self.inboundCall = inboundCall
            self.inboundMMS = inboundMMS
            self.inboundSMS = inboundSMS
            self.outboundCall = outboundCall
            self.outboundMMS = outboundMMS
            self.outboundSMS = outboundSMS
        }
    }

}

extension ChimeSDKVoiceClientTypes {

    public enum PhoneNumberStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case acquirefailed
        case acquireinprogress
        case assigned
        case cancelled
        case deletefailed
        case deleteinprogress
        case portincancelrequested
        case portininprogress
        case releasefailed
        case releaseinprogress
        case unassigned
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneNumberStatus] {
            return [
                .acquirefailed,
                .acquireinprogress,
                .assigned,
                .cancelled,
                .deletefailed,
                .deleteinprogress,
                .portincancelrequested,
                .portininprogress,
                .releasefailed,
                .releaseinprogress,
                .unassigned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .acquirefailed: return "AcquireFailed"
            case .acquireinprogress: return "AcquireInProgress"
            case .assigned: return "Assigned"
            case .cancelled: return "Cancelled"
            case .deletefailed: return "DeleteFailed"
            case .deleteinprogress: return "DeleteInProgress"
            case .portincancelrequested: return "PortinCancelRequested"
            case .portininprogress: return "PortinInProgress"
            case .releasefailed: return "ReleaseFailed"
            case .releaseinprogress: return "ReleaseInProgress"
            case .unassigned: return "Unassigned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKVoiceClientTypes {

    public enum PhoneNumberType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case local
        case tollfree
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneNumberType] {
            return [
                .local,
                .tollfree
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .local: return "Local"
            case .tollfree: return "TollFree"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKVoiceClientTypes {
    /// A phone number used to call an Amazon Chime SDK Voice Connector.
    public struct PhoneNumber {
        /// The phone number's associations.
        public var associations: [ChimeSDKVoiceClientTypes.PhoneNumberAssociation]?
        /// The outbound calling name associated with the phone number.
        public var callingName: Swift.String?
        /// The outbound calling name status.
        public var callingNameStatus: ChimeSDKVoiceClientTypes.CallingNameStatus?
        /// The phone number's capabilities.
        public var capabilities: ChimeSDKVoiceClientTypes.PhoneNumberCapabilities?
        /// The phone number's country. Format: ISO 3166-1 alpha-2.
        public var country: Swift.String?
        /// The phone number creation timestamp, in ISO 8601 format.
        public var createdTimestamp: Foundation.Date?
        /// The deleted phone number timestamp, in ISO 8601 format.
        public var deletionTimestamp: Foundation.Date?
        /// The phone number, in E.164 format.
        public var e164PhoneNumber: Swift.String?
        /// The name of the phone number.
        public var name: Swift.String?
        /// The phone number's order ID.
        public var orderId: Swift.String?
        /// The phone number's ID.
        public var phoneNumberId: Swift.String?
        /// The phone number's product type.
        public var productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType?
        /// The phone number's status.
        public var status: ChimeSDKVoiceClientTypes.PhoneNumberStatus?
        /// The phone number's type.
        public var type: ChimeSDKVoiceClientTypes.PhoneNumberType?
        /// The updated phone number timestamp, in ISO 8601 format.
        public var updatedTimestamp: Foundation.Date?

        public init(
            associations: [ChimeSDKVoiceClientTypes.PhoneNumberAssociation]? = nil,
            callingName: Swift.String? = nil,
            callingNameStatus: ChimeSDKVoiceClientTypes.CallingNameStatus? = nil,
            capabilities: ChimeSDKVoiceClientTypes.PhoneNumberCapabilities? = nil,
            country: Swift.String? = nil,
            createdTimestamp: Foundation.Date? = nil,
            deletionTimestamp: Foundation.Date? = nil,
            e164PhoneNumber: Swift.String? = nil,
            name: Swift.String? = nil,
            orderId: Swift.String? = nil,
            phoneNumberId: Swift.String? = nil,
            productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType? = nil,
            status: ChimeSDKVoiceClientTypes.PhoneNumberStatus? = nil,
            type: ChimeSDKVoiceClientTypes.PhoneNumberType? = nil,
            updatedTimestamp: Foundation.Date? = nil
        )
        {
            self.associations = associations
            self.callingName = callingName
            self.callingNameStatus = callingNameStatus
            self.capabilities = capabilities
            self.country = country
            self.createdTimestamp = createdTimestamp
            self.deletionTimestamp = deletionTimestamp
            self.e164PhoneNumber = e164PhoneNumber
            self.name = name
            self.orderId = orderId
            self.phoneNumberId = phoneNumberId
            self.productType = productType
            self.status = status
            self.type = type
            self.updatedTimestamp = updatedTimestamp
        }
    }

}

extension ChimeSDKVoiceClientTypes.PhoneNumber: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PhoneNumber(associations: \(Swift.String(describing: associations)), callingNameStatus: \(Swift.String(describing: callingNameStatus)), capabilities: \(Swift.String(describing: capabilities)), country: \(Swift.String(describing: country)), createdTimestamp: \(Swift.String(describing: createdTimestamp)), deletionTimestamp: \(Swift.String(describing: deletionTimestamp)), orderId: \(Swift.String(describing: orderId)), productType: \(Swift.String(describing: productType)), status: \(Swift.String(describing: status)), type: \(Swift.String(describing: type)), updatedTimestamp: \(Swift.String(describing: updatedTimestamp)), callingName: \"CONTENT_REDACTED\", e164PhoneNumber: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\", phoneNumberId: \"CONTENT_REDACTED\")"}
}

public struct GetPhoneNumberOutput {
    /// The phone number details.
    public var phoneNumber: ChimeSDKVoiceClientTypes.PhoneNumber?

    public init(
        phoneNumber: ChimeSDKVoiceClientTypes.PhoneNumber? = nil
    )
    {
        self.phoneNumber = phoneNumber
    }
}

public struct GetPhoneNumberOrderInput {
    /// The ID of the phone number order .
    /// This member is required.
    public var phoneNumberOrderId: Swift.String?

    public init(
        phoneNumberOrderId: Swift.String? = nil
    )
    {
        self.phoneNumberOrderId = phoneNumberOrderId
    }
}

public struct GetPhoneNumberOrderOutput {
    /// The phone number order details.
    public var phoneNumberOrder: ChimeSDKVoiceClientTypes.PhoneNumberOrder?

    public init(
        phoneNumberOrder: ChimeSDKVoiceClientTypes.PhoneNumberOrder? = nil
    )
    {
        self.phoneNumberOrder = phoneNumberOrder
    }
}

public struct GetPhoneNumberSettingsOutput {
    /// The default outbound calling name for the account.
    public var callingName: Swift.String?
    /// The updated outbound calling name timestamp, in ISO 8601 format.
    public var callingNameUpdatedTimestamp: Foundation.Date?

    public init(
        callingName: Swift.String? = nil,
        callingNameUpdatedTimestamp: Foundation.Date? = nil
    )
    {
        self.callingName = callingName
        self.callingNameUpdatedTimestamp = callingNameUpdatedTimestamp
    }
}

extension GetPhoneNumberSettingsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPhoneNumberSettingsOutput(callingNameUpdatedTimestamp: \(Swift.String(describing: callingNameUpdatedTimestamp)), callingName: \"CONTENT_REDACTED\")"}
}

public struct GetProxySessionInput {
    /// The proxy session ID.
    /// This member is required.
    public var proxySessionId: Swift.String?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        proxySessionId: Swift.String? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.proxySessionId = proxySessionId
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct GetProxySessionOutput {
    /// The proxy session details.
    public var proxySession: ChimeSDKVoiceClientTypes.ProxySession?

    public init(
        proxySession: ChimeSDKVoiceClientTypes.ProxySession? = nil
    )
    {
        self.proxySession = proxySession
    }
}

public struct GetSipMediaApplicationInput {
    /// The SIP media application ID .
    /// This member is required.
    public var sipMediaApplicationId: Swift.String?

    public init(
        sipMediaApplicationId: Swift.String? = nil
    )
    {
        self.sipMediaApplicationId = sipMediaApplicationId
    }
}

public struct GetSipMediaApplicationOutput {
    /// The details of the SIP media application.
    public var sipMediaApplication: ChimeSDKVoiceClientTypes.SipMediaApplication?

    public init(
        sipMediaApplication: ChimeSDKVoiceClientTypes.SipMediaApplication? = nil
    )
    {
        self.sipMediaApplication = sipMediaApplication
    }
}

public struct GetSipMediaApplicationAlexaSkillConfigurationInput {
    /// The SIP media application ID.
    /// This member is required.
    public var sipMediaApplicationId: Swift.String?

    public init(
        sipMediaApplicationId: Swift.String? = nil
    )
    {
        self.sipMediaApplicationId = sipMediaApplicationId
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The Alexa Skill configuration of a SIP media application. Due to changes made by the Amazon Alexa service, this data type is no longer available for use. For more information, refer to the [Alexa Smart Properties](https://developer.amazon.com/en-US/alexa/alexasmartproperties) page.
    public struct SipMediaApplicationAlexaSkillConfiguration {
        /// The ID of the Alexa Skill configuration.
        /// This member is required.
        public var alexaSkillIds: [Swift.String]?
        /// The status of the Alexa Skill configuration.
        /// This member is required.
        public var alexaSkillStatus: ChimeSDKVoiceClientTypes.AlexaSkillStatus?

        public init(
            alexaSkillIds: [Swift.String]? = nil,
            alexaSkillStatus: ChimeSDKVoiceClientTypes.AlexaSkillStatus? = nil
        )
        {
            self.alexaSkillIds = alexaSkillIds
            self.alexaSkillStatus = alexaSkillStatus
        }
    }

}

extension ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SipMediaApplicationAlexaSkillConfiguration(alexaSkillStatus: \(Swift.String(describing: alexaSkillStatus)), alexaSkillIds: \"CONTENT_REDACTED\")"}
}

public struct GetSipMediaApplicationAlexaSkillConfigurationOutput {
    /// Returns the Alexa Skill configuration.
    public var sipMediaApplicationAlexaSkillConfiguration: ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration?

    public init(
        sipMediaApplicationAlexaSkillConfiguration: ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration? = nil
    )
    {
        self.sipMediaApplicationAlexaSkillConfiguration = sipMediaApplicationAlexaSkillConfiguration
    }
}

public struct GetSipMediaApplicationLoggingConfigurationInput {
    /// The SIP media application ID.
    /// This member is required.
    public var sipMediaApplicationId: Swift.String?

    public init(
        sipMediaApplicationId: Swift.String? = nil
    )
    {
        self.sipMediaApplicationId = sipMediaApplicationId
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The logging configuration of a SIP media application.
    public struct SipMediaApplicationLoggingConfiguration {
        /// Enables message logging for the specified SIP media application.
        public var enableSipMediaApplicationMessageLogs: Swift.Bool?

        public init(
            enableSipMediaApplicationMessageLogs: Swift.Bool? = nil
        )
        {
            self.enableSipMediaApplicationMessageLogs = enableSipMediaApplicationMessageLogs
        }
    }

}

public struct GetSipMediaApplicationLoggingConfigurationOutput {
    /// The actual logging configuration.
    public var sipMediaApplicationLoggingConfiguration: ChimeSDKVoiceClientTypes.SipMediaApplicationLoggingConfiguration?

    public init(
        sipMediaApplicationLoggingConfiguration: ChimeSDKVoiceClientTypes.SipMediaApplicationLoggingConfiguration? = nil
    )
    {
        self.sipMediaApplicationLoggingConfiguration = sipMediaApplicationLoggingConfiguration
    }
}

public struct GetSipRuleInput {
    /// The SIP rule ID.
    /// This member is required.
    public var sipRuleId: Swift.String?

    public init(
        sipRuleId: Swift.String? = nil
    )
    {
        self.sipRuleId = sipRuleId
    }
}

public struct GetSipRuleOutput {
    /// The SIP rule details.
    public var sipRule: ChimeSDKVoiceClientTypes.SipRule?

    public init(
        sipRule: ChimeSDKVoiceClientTypes.SipRule? = nil
    )
    {
        self.sipRule = sipRule
    }
}

public struct GetSpeakerSearchTaskInput {
    /// The ID of the speaker search task.
    /// This member is required.
    public var speakerSearchTaskId: Swift.String?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        speakerSearchTaskId: Swift.String? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.speakerSearchTaskId = speakerSearchTaskId
        self.voiceConnectorId = voiceConnectorId
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The result of a speaker search analysis.
    public struct SpeakerSearchResult {
        /// The confidence score in the speaker search analysis.
        public var confidenceScore: Swift.Float
        /// The voice profile ID.
        public var voiceProfileId: Swift.String?

        public init(
            confidenceScore: Swift.Float = 0.0,
            voiceProfileId: Swift.String? = nil
        )
        {
            self.confidenceScore = confidenceScore
            self.voiceProfileId = voiceProfileId
        }
    }

}

extension ChimeSDKVoiceClientTypes {
    /// The details of a speaker search task.
    public struct SpeakerSearchDetails {
        /// The result value in the speaker search details.
        public var results: [ChimeSDKVoiceClientTypes.SpeakerSearchResult]?
        /// The status of a voice print generation operation, VoiceprintGenerationSuccess or VoiceprintGenerationFailure..
        public var voiceprintGenerationStatus: Swift.String?

        public init(
            results: [ChimeSDKVoiceClientTypes.SpeakerSearchResult]? = nil,
            voiceprintGenerationStatus: Swift.String? = nil
        )
        {
            self.results = results
            self.voiceprintGenerationStatus = voiceprintGenerationStatus
        }
    }

}

extension ChimeSDKVoiceClientTypes {
    /// A representation of an asynchronous request to perform speaker search analysis on a Voice Connector call.
    public struct SpeakerSearchTask {
        /// The call details of a speaker search task.
        public var callDetails: ChimeSDKVoiceClientTypes.CallDetails?
        /// The time at which a speaker search task was created.
        public var createdTimestamp: Foundation.Date?
        /// The details of a speaker search task.
        public var speakerSearchDetails: ChimeSDKVoiceClientTypes.SpeakerSearchDetails?
        /// The speaker search task ID.
        public var speakerSearchTaskId: Swift.String?
        /// The status of the speaker search task, IN_QUEUE, IN_PROGRESS, PARTIAL_SUCCESS, SUCCEEDED, FAILED, or STOPPED.
        public var speakerSearchTaskStatus: Swift.String?
        /// The time at which the speaker search task began.
        public var startedTimestamp: Foundation.Date?
        /// A detailed message about the status of a speaker search.
        public var statusMessage: Swift.String?
        /// The time at which a speaker search task was updated.
        public var updatedTimestamp: Foundation.Date?

        public init(
            callDetails: ChimeSDKVoiceClientTypes.CallDetails? = nil,
            createdTimestamp: Foundation.Date? = nil,
            speakerSearchDetails: ChimeSDKVoiceClientTypes.SpeakerSearchDetails? = nil,
            speakerSearchTaskId: Swift.String? = nil,
            speakerSearchTaskStatus: Swift.String? = nil,
            startedTimestamp: Foundation.Date? = nil,
            statusMessage: Swift.String? = nil,
            updatedTimestamp: Foundation.Date? = nil
        )
        {
            self.callDetails = callDetails
            self.createdTimestamp = createdTimestamp
            self.speakerSearchDetails = speakerSearchDetails
            self.speakerSearchTaskId = speakerSearchTaskId
            self.speakerSearchTaskStatus = speakerSearchTaskStatus
            self.startedTimestamp = startedTimestamp
            self.statusMessage = statusMessage
            self.updatedTimestamp = updatedTimestamp
        }
    }

}

public struct GetSpeakerSearchTaskOutput {
    /// The details of the speaker search task.
    public var speakerSearchTask: ChimeSDKVoiceClientTypes.SpeakerSearchTask?

    public init(
        speakerSearchTask: ChimeSDKVoiceClientTypes.SpeakerSearchTask? = nil
    )
    {
        self.speakerSearchTask = speakerSearchTask
    }
}

public struct GetVoiceConnectorInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct GetVoiceConnectorOutput {
    /// The Voice Connector details.
    public var voiceConnector: ChimeSDKVoiceClientTypes.VoiceConnector?

    public init(
        voiceConnector: ChimeSDKVoiceClientTypes.VoiceConnector? = nil
    )
    {
        self.voiceConnector = voiceConnector
    }
}

public struct GetVoiceConnectorEmergencyCallingConfigurationInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The Dialed Number Identification Service (DNIS) emergency calling configuration details associated with an Amazon Chime SDK Voice Connector's emergency calling configuration.
    public struct DNISEmergencyCallingConfiguration {
        /// The country from which emergency calls are allowed, in ISO 3166-1 alpha-2 format.
        /// This member is required.
        public var callingCountry: Swift.String?
        /// The DNIS phone number that you route emergency calls to, in E.164 format.
        /// This member is required.
        public var emergencyPhoneNumber: Swift.String?
        /// The DNIS phone number for routing test emergency calls to, in E.164 format.
        public var testPhoneNumber: Swift.String?

        public init(
            callingCountry: Swift.String? = nil,
            emergencyPhoneNumber: Swift.String? = nil,
            testPhoneNumber: Swift.String? = nil
        )
        {
            self.callingCountry = callingCountry
            self.emergencyPhoneNumber = emergencyPhoneNumber
            self.testPhoneNumber = testPhoneNumber
        }
    }

}

extension ChimeSDKVoiceClientTypes.DNISEmergencyCallingConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DNISEmergencyCallingConfiguration(callingCountry: \(Swift.String(describing: callingCountry)), emergencyPhoneNumber: \"CONTENT_REDACTED\", testPhoneNumber: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKVoiceClientTypes {
    /// The emergency calling configuration details associated with an Amazon Chime SDK Voice Connector.
    public struct EmergencyCallingConfiguration {
        /// The Dialed Number Identification Service (DNIS) emergency calling configuration details.
        public var dnis: [ChimeSDKVoiceClientTypes.DNISEmergencyCallingConfiguration]?

        public init(
            dnis: [ChimeSDKVoiceClientTypes.DNISEmergencyCallingConfiguration]? = nil
        )
        {
            self.dnis = dnis
        }
    }

}

public struct GetVoiceConnectorEmergencyCallingConfigurationOutput {
    /// The details of the emergency calling configuration.
    public var emergencyCallingConfiguration: ChimeSDKVoiceClientTypes.EmergencyCallingConfiguration?

    public init(
        emergencyCallingConfiguration: ChimeSDKVoiceClientTypes.EmergencyCallingConfiguration? = nil
    )
    {
        self.emergencyCallingConfiguration = emergencyCallingConfiguration
    }
}

public struct GetVoiceConnectorGroupInput {
    /// The Voice Connector group ID.
    /// This member is required.
    public var voiceConnectorGroupId: Swift.String?

    public init(
        voiceConnectorGroupId: Swift.String? = nil
    )
    {
        self.voiceConnectorGroupId = voiceConnectorGroupId
    }
}

public struct GetVoiceConnectorGroupOutput {
    /// The details of the Voice Connector group.
    public var voiceConnectorGroup: ChimeSDKVoiceClientTypes.VoiceConnectorGroup?

    public init(
        voiceConnectorGroup: ChimeSDKVoiceClientTypes.VoiceConnectorGroup? = nil
    )
    {
        self.voiceConnectorGroup = voiceConnectorGroup
    }
}

public struct GetVoiceConnectorLoggingConfigurationInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The logging configuration associated with an Amazon Chime SDK Voice Connector. Specifies whether SIP message logs can be sent to Amazon CloudWatch Logs.
    public struct LoggingConfiguration {
        /// Enables or disables media metrics logging.
        public var enableMediaMetricLogs: Swift.Bool?
        /// Boolean that enables sending SIP message logs to Amazon CloudWatch.
        public var enableSIPLogs: Swift.Bool?

        public init(
            enableMediaMetricLogs: Swift.Bool? = nil,
            enableSIPLogs: Swift.Bool? = nil
        )
        {
            self.enableMediaMetricLogs = enableMediaMetricLogs
            self.enableSIPLogs = enableSIPLogs
        }
    }

}

public struct GetVoiceConnectorLoggingConfigurationOutput {
    /// The logging configuration details .
    public var loggingConfiguration: ChimeSDKVoiceClientTypes.LoggingConfiguration?

    public init(
        loggingConfiguration: ChimeSDKVoiceClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

public struct GetVoiceConnectorOriginationInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

extension ChimeSDKVoiceClientTypes {

    public enum OriginationRouteProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case tcp
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginationRouteProtocol] {
            return [
                .tcp,
                .udp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .tcp: return "TCP"
            case .udp: return "UDP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKVoiceClientTypes {
    /// Origination routes define call distribution properties for your SIP hosts to receive inbound calls using an Amazon Chime SDK Voice Connector. Limit: Ten origination routes for each Voice Connector. The parameters listed below are not required, but you must use at least one.
    public struct OriginationRoute {
        /// The FQDN or IP address to contact for origination traffic.
        public var host: Swift.String?
        /// The designated origination route port. Defaults to 5060.
        public var port: Swift.Int?
        /// The priority associated with the host, with 1 being the highest priority. Higher priority hosts are attempted first.
        public var priority: Swift.Int?
        /// The protocol to use for the origination route. Encryption-enabled Amazon Chime SDK Voice Connectors use TCP protocol by default.
        public var `protocol`: ChimeSDKVoiceClientTypes.OriginationRouteProtocol?
        /// The weight assigned to an origination route. When hosts have equal priority, calls are distributed between them based on their relative weights.
        public var weight: Swift.Int?

        public init(
            host: Swift.String? = nil,
            port: Swift.Int? = nil,
            priority: Swift.Int? = nil,
            `protocol`: ChimeSDKVoiceClientTypes.OriginationRouteProtocol? = nil,
            weight: Swift.Int? = nil
        )
        {
            self.host = host
            self.port = port
            self.priority = priority
            self.`protocol` = `protocol`
            self.weight = weight
        }
    }

}

extension ChimeSDKVoiceClientTypes {
    /// Origination settings enable your SIP hosts to receive inbound calls using your Amazon Chime SDK Voice Connector. The parameters listed below are not required, but you must use at least one.
    public struct Origination {
        /// When origination settings are disabled, inbound calls are not enabled for your Amazon Chime SDK Voice Connector. This parameter is not required, but you must specify this parameter or Routes.
        public var disabled: Swift.Bool?
        /// The call distribution properties defined for your SIP hosts. Valid range: Minimum value of 1. Maximum value of 20. This parameter is not required, but you must specify this parameter or Disabled.
        public var routes: [ChimeSDKVoiceClientTypes.OriginationRoute]?

        public init(
            disabled: Swift.Bool? = nil,
            routes: [ChimeSDKVoiceClientTypes.OriginationRoute]? = nil
        )
        {
            self.disabled = disabled
            self.routes = routes
        }
    }

}

public struct GetVoiceConnectorOriginationOutput {
    /// The origination setting details.
    public var origination: ChimeSDKVoiceClientTypes.Origination?

    public init(
        origination: ChimeSDKVoiceClientTypes.Origination? = nil
    )
    {
        self.origination = origination
    }
}

public struct GetVoiceConnectorProxyInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The proxy configuration for an Amazon Chime SDK Voice Connector.
    public struct Proxy {
        /// The default number of minutes allowed for proxy sessions.
        public var defaultSessionExpiryMinutes: Swift.Int?
        /// When true, stops proxy sessions from being created on the specified Amazon Chime SDK Voice Connector.
        public var disabled: Swift.Bool?
        /// The phone number to route calls to after a proxy session expires.
        public var fallBackPhoneNumber: Swift.String?
        /// The countries for proxy phone numbers to be selected from.
        public var phoneNumberCountries: [Swift.String]?

        public init(
            defaultSessionExpiryMinutes: Swift.Int? = nil,
            disabled: Swift.Bool? = nil,
            fallBackPhoneNumber: Swift.String? = nil,
            phoneNumberCountries: [Swift.String]? = nil
        )
        {
            self.defaultSessionExpiryMinutes = defaultSessionExpiryMinutes
            self.disabled = disabled
            self.fallBackPhoneNumber = fallBackPhoneNumber
            self.phoneNumberCountries = phoneNumberCountries
        }
    }

}

extension ChimeSDKVoiceClientTypes.Proxy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Proxy(defaultSessionExpiryMinutes: \(Swift.String(describing: defaultSessionExpiryMinutes)), disabled: \(Swift.String(describing: disabled)), phoneNumberCountries: \(Swift.String(describing: phoneNumberCountries)), fallBackPhoneNumber: \"CONTENT_REDACTED\")"}
}

public struct GetVoiceConnectorProxyOutput {
    /// The proxy configuration details.
    public var proxy: ChimeSDKVoiceClientTypes.Proxy?

    public init(
        proxy: ChimeSDKVoiceClientTypes.Proxy? = nil
    )
    {
        self.proxy = proxy
    }
}

public struct GetVoiceConnectorStreamingConfigurationInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The configuration for a call analytics task.
    public struct MediaInsightsConfiguration {
        /// The configuration's ARN.
        public var configurationArn: Swift.String?
        /// Denotes the configuration as enabled or disabled.
        public var disabled: Swift.Bool?

        public init(
            configurationArn: Swift.String? = nil,
            disabled: Swift.Bool? = nil
        )
        {
            self.configurationArn = configurationArn
            self.disabled = disabled
        }
    }

}

extension ChimeSDKVoiceClientTypes.MediaInsightsConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MediaInsightsConfiguration(disabled: \(Swift.String(describing: disabled)), configurationArn: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKVoiceClientTypes {

    public enum NotificationTarget: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case eventbridge
        case sns
        case sqs
        case sdkUnknown(Swift.String)

        public static var allCases: [NotificationTarget] {
            return [
                .eventbridge,
                .sns,
                .sqs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .eventbridge: return "EventBridge"
            case .sns: return "SNS"
            case .sqs: return "SQS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The target recipient for a streaming configuration notification.
    public struct StreamingNotificationTarget {
        /// The streaming notification target.
        public var notificationTarget: ChimeSDKVoiceClientTypes.NotificationTarget?

        public init(
            notificationTarget: ChimeSDKVoiceClientTypes.NotificationTarget? = nil
        )
        {
            self.notificationTarget = notificationTarget
        }
    }

}

extension ChimeSDKVoiceClientTypes {
    /// The streaming configuration associated with an Amazon Chime SDK Voice Connector. Specifies whether media streaming is enabled for sending to Amazon Kinesis, and shows the retention period for the Amazon Kinesis data, in hours.
    public struct StreamingConfiguration {
        /// The amount of time, in hours, to the Kinesis data.
        /// This member is required.
        public var dataRetentionInHours: Swift.Int?
        /// When true, streaming to Kinesis is off.
        /// This member is required.
        public var disabled: Swift.Bool?
        /// The call analytics configuration.
        public var mediaInsightsConfiguration: ChimeSDKVoiceClientTypes.MediaInsightsConfiguration?
        /// The streaming notification targets.
        public var streamingNotificationTargets: [ChimeSDKVoiceClientTypes.StreamingNotificationTarget]?

        public init(
            dataRetentionInHours: Swift.Int? = nil,
            disabled: Swift.Bool? = nil,
            mediaInsightsConfiguration: ChimeSDKVoiceClientTypes.MediaInsightsConfiguration? = nil,
            streamingNotificationTargets: [ChimeSDKVoiceClientTypes.StreamingNotificationTarget]? = nil
        )
        {
            self.dataRetentionInHours = dataRetentionInHours
            self.disabled = disabled
            self.mediaInsightsConfiguration = mediaInsightsConfiguration
            self.streamingNotificationTargets = streamingNotificationTargets
        }
    }

}

public struct GetVoiceConnectorStreamingConfigurationOutput {
    /// The details of the streaming configuration.
    public var streamingConfiguration: ChimeSDKVoiceClientTypes.StreamingConfiguration?

    public init(
        streamingConfiguration: ChimeSDKVoiceClientTypes.StreamingConfiguration? = nil
    )
    {
        self.streamingConfiguration = streamingConfiguration
    }
}

public struct GetVoiceConnectorTerminationInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

extension ChimeSDKVoiceClientTypes {
    /// Termination settings enable SIP hosts to make outbound calls using an Amazon Chime SDK Voice Connector.
    public struct Termination {
        /// The countries to which calls are allowed, in ISO 3166-1 alpha-2 format. Required.
        public var callingRegions: [Swift.String]?
        /// The IP addresses allowed to make calls, in CIDR format.
        public var cidrAllowedList: [Swift.String]?
        /// The limit on calls per second. Max value based on account service quota. Default value of 1.
        public var cpsLimit: Swift.Int?
        /// The default outbound calling number.
        public var defaultPhoneNumber: Swift.String?
        /// When termination is disabled, outbound calls cannot be made.
        public var disabled: Swift.Bool?

        public init(
            callingRegions: [Swift.String]? = nil,
            cidrAllowedList: [Swift.String]? = nil,
            cpsLimit: Swift.Int? = nil,
            defaultPhoneNumber: Swift.String? = nil,
            disabled: Swift.Bool? = nil
        )
        {
            self.callingRegions = callingRegions
            self.cidrAllowedList = cidrAllowedList
            self.cpsLimit = cpsLimit
            self.defaultPhoneNumber = defaultPhoneNumber
            self.disabled = disabled
        }
    }

}

extension ChimeSDKVoiceClientTypes.Termination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Termination(callingRegions: \(Swift.String(describing: callingRegions)), cidrAllowedList: \(Swift.String(describing: cidrAllowedList)), cpsLimit: \(Swift.String(describing: cpsLimit)), disabled: \(Swift.String(describing: disabled)), defaultPhoneNumber: \"CONTENT_REDACTED\")"}
}

public struct GetVoiceConnectorTerminationOutput {
    /// The termination setting details.
    public var termination: ChimeSDKVoiceClientTypes.Termination?

    public init(
        termination: ChimeSDKVoiceClientTypes.Termination? = nil
    )
    {
        self.termination = termination
    }
}

public struct GetVoiceConnectorTerminationHealthInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The termination health details, including the source IP address and timestamp of the last successful SIP OPTIONS message from your SIP infrastructure.
    public struct TerminationHealth {
        /// The source IP address.
        public var source: Swift.String?
        /// The timestamp, in ISO 8601 format.
        public var timestamp: Foundation.Date?

        public init(
            source: Swift.String? = nil,
            timestamp: Foundation.Date? = nil
        )
        {
            self.source = source
            self.timestamp = timestamp
        }
    }

}

public struct GetVoiceConnectorTerminationHealthOutput {
    /// The termination health details.
    public var terminationHealth: ChimeSDKVoiceClientTypes.TerminationHealth?

    public init(
        terminationHealth: ChimeSDKVoiceClientTypes.TerminationHealth? = nil
    )
    {
        self.terminationHealth = terminationHealth
    }
}

public struct GetVoiceProfileInput {
    /// The voice profile ID.
    /// This member is required.
    public var voiceProfileId: Swift.String?

    public init(
        voiceProfileId: Swift.String? = nil
    )
    {
        self.voiceProfileId = voiceProfileId
    }
}

public struct GetVoiceProfileOutput {
    /// The voice profile details.
    public var voiceProfile: ChimeSDKVoiceClientTypes.VoiceProfile?

    public init(
        voiceProfile: ChimeSDKVoiceClientTypes.VoiceProfile? = nil
    )
    {
        self.voiceProfile = voiceProfile
    }
}

public struct GetVoiceProfileDomainInput {
    /// The voice profile domain ID.
    /// This member is required.
    public var voiceProfileDomainId: Swift.String?

    public init(
        voiceProfileDomainId: Swift.String? = nil
    )
    {
        self.voiceProfileDomainId = voiceProfileDomainId
    }
}

public struct GetVoiceProfileDomainOutput {
    /// The details of the voice profile domain.
    public var voiceProfileDomain: ChimeSDKVoiceClientTypes.VoiceProfileDomain?

    public init(
        voiceProfileDomain: ChimeSDKVoiceClientTypes.VoiceProfileDomain? = nil
    )
    {
        self.voiceProfileDomain = voiceProfileDomain
    }
}

public struct GetVoiceToneAnalysisTaskInput {
    /// Specifies whether the voice being analyzed is the caller (originator) or the callee (responder).
    /// This member is required.
    public var isCaller: Swift.Bool?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?
    /// The ID of the voice tone analysis task.
    /// This member is required.
    public var voiceToneAnalysisTaskId: Swift.String?

    public init(
        isCaller: Swift.Bool? = nil,
        voiceConnectorId: Swift.String? = nil,
        voiceToneAnalysisTaskId: Swift.String? = nil
    )
    {
        self.isCaller = isCaller
        self.voiceConnectorId = voiceConnectorId
        self.voiceToneAnalysisTaskId = voiceToneAnalysisTaskId
    }
}

extension ChimeSDKVoiceClientTypes {
    /// A representation of an asynchronous request to perform voice tone analysis on a Voice Connector call.
    public struct VoiceToneAnalysisTask {
        /// The call details of a voice tone analysis task.
        public var callDetails: ChimeSDKVoiceClientTypes.CallDetails?
        /// The time at which a voice tone analysis task was created.
        public var createdTimestamp: Foundation.Date?
        /// The time at which a voice tone analysis task started.
        public var startedTimestamp: Foundation.Date?
        /// The status of a voice tone analysis task.
        public var statusMessage: Swift.String?
        /// The time at which a voice tone analysis task was updated.
        public var updatedTimestamp: Foundation.Date?
        /// The ID of the voice tone analysis task.
        public var voiceToneAnalysisTaskId: Swift.String?
        /// The status of a voice tone analysis task, IN_QUEUE, IN_PROGRESS, PARTIAL_SUCCESS, SUCCEEDED, FAILED, or STOPPED.
        public var voiceToneAnalysisTaskStatus: Swift.String?

        public init(
            callDetails: ChimeSDKVoiceClientTypes.CallDetails? = nil,
            createdTimestamp: Foundation.Date? = nil,
            startedTimestamp: Foundation.Date? = nil,
            statusMessage: Swift.String? = nil,
            updatedTimestamp: Foundation.Date? = nil,
            voiceToneAnalysisTaskId: Swift.String? = nil,
            voiceToneAnalysisTaskStatus: Swift.String? = nil
        )
        {
            self.callDetails = callDetails
            self.createdTimestamp = createdTimestamp
            self.startedTimestamp = startedTimestamp
            self.statusMessage = statusMessage
            self.updatedTimestamp = updatedTimestamp
            self.voiceToneAnalysisTaskId = voiceToneAnalysisTaskId
            self.voiceToneAnalysisTaskStatus = voiceToneAnalysisTaskStatus
        }
    }

}

public struct GetVoiceToneAnalysisTaskOutput {
    /// The details of the voice tone analysis task.
    public var voiceToneAnalysisTask: ChimeSDKVoiceClientTypes.VoiceToneAnalysisTask?

    public init(
        voiceToneAnalysisTask: ChimeSDKVoiceClientTypes.VoiceToneAnalysisTask? = nil
    )
    {
        self.voiceToneAnalysisTask = voiceToneAnalysisTask
    }
}

public struct ListAvailableVoiceConnectorRegionsOutput {
    /// The list of AWS Regions.
    public var voiceConnectorRegions: [ChimeSDKVoiceClientTypes.VoiceConnectorAwsRegion]?

    public init(
        voiceConnectorRegions: [ChimeSDKVoiceClientTypes.VoiceConnectorAwsRegion]? = nil
    )
    {
        self.voiceConnectorRegions = voiceConnectorRegions
    }
}

public struct ListPhoneNumberOrdersInput {
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The token used to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListPhoneNumberOrdersOutput {
    /// The token used to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The phone number order details.
    public var phoneNumberOrders: [ChimeSDKVoiceClientTypes.PhoneNumberOrder]?

    public init(
        nextToken: Swift.String? = nil,
        phoneNumberOrders: [ChimeSDKVoiceClientTypes.PhoneNumberOrder]? = nil
    )
    {
        self.nextToken = nextToken
        self.phoneNumberOrders = phoneNumberOrders
    }
}

public struct ListPhoneNumbersInput {
    /// The filter to limit the number of results.
    public var filterName: ChimeSDKVoiceClientTypes.PhoneNumberAssociationName?
    /// The filter value.
    public var filterValue: Swift.String?
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?
    /// The phone number product types.
    public var productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType?
    /// The status of your organization's phone numbers.
    public var status: Swift.String?

    public init(
        filterName: ChimeSDKVoiceClientTypes.PhoneNumberAssociationName? = nil,
        filterValue: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType? = nil,
        status: Swift.String? = nil
    )
    {
        self.filterName = filterName
        self.filterValue = filterValue
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.productType = productType
        self.status = status
    }
}

public struct ListPhoneNumbersOutput {
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?
    /// The phone number details.
    public var phoneNumbers: [ChimeSDKVoiceClientTypes.PhoneNumber]?

    public init(
        nextToken: Swift.String? = nil,
        phoneNumbers: [ChimeSDKVoiceClientTypes.PhoneNumber]? = nil
    )
    {
        self.nextToken = nextToken
        self.phoneNumbers = phoneNumbers
    }
}

public struct ListProxySessionsInput {
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The token used to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The proxy session status.
    public var status: ChimeSDKVoiceClientTypes.ProxySessionStatus?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: ChimeSDKVoiceClientTypes.ProxySessionStatus? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct ListProxySessionsOutput {
    /// The token used to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The proxy sessions' details.
    public var proxySessions: [ChimeSDKVoiceClientTypes.ProxySession]?

    public init(
        nextToken: Swift.String? = nil,
        proxySessions: [ChimeSDKVoiceClientTypes.ProxySession]? = nil
    )
    {
        self.nextToken = nextToken
        self.proxySessions = proxySessions
    }
}

public struct ListSipMediaApplicationsInput {
    /// The maximum number of results to return in a single call. Defaults to 100.
    public var maxResults: Swift.Int?
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListSipMediaApplicationsOutput {
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?
    /// The list of SIP media applications and application details.
    public var sipMediaApplications: [ChimeSDKVoiceClientTypes.SipMediaApplication]?

    public init(
        nextToken: Swift.String? = nil,
        sipMediaApplications: [ChimeSDKVoiceClientTypes.SipMediaApplication]? = nil
    )
    {
        self.nextToken = nextToken
        self.sipMediaApplications = sipMediaApplications
    }
}

public struct ListSipRulesInput {
    /// The maximum number of results to return in a single call. Defaults to 100.
    public var maxResults: Swift.Int?
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?
    /// The SIP media application ID.
    public var sipMediaApplicationId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sipMediaApplicationId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sipMediaApplicationId = sipMediaApplicationId
    }
}

public struct ListSipRulesOutput {
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?
    /// The list of SIP rules and details.
    public var sipRules: [ChimeSDKVoiceClientTypes.SipRule]?

    public init(
        nextToken: Swift.String? = nil,
        sipRules: [ChimeSDKVoiceClientTypes.SipRule]? = nil
    )
    {
        self.nextToken = nextToken
        self.sipRules = sipRules
    }
}

public struct ListSupportedPhoneNumberCountriesInput {
    /// The phone number product type.
    /// This member is required.
    public var productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType?

    public init(
        productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType? = nil
    )
    {
        self.productType = productType
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The phone number's country.
    public struct PhoneNumberCountry {
        /// The phone number country code. Format: ISO 3166-1 alpha-2.
        public var countryCode: Swift.String?
        /// The supported phone number types.
        public var supportedPhoneNumberTypes: [ChimeSDKVoiceClientTypes.PhoneNumberType]?

        public init(
            countryCode: Swift.String? = nil,
            supportedPhoneNumberTypes: [ChimeSDKVoiceClientTypes.PhoneNumberType]? = nil
        )
        {
            self.countryCode = countryCode
            self.supportedPhoneNumberTypes = supportedPhoneNumberTypes
        }
    }

}

public struct ListSupportedPhoneNumberCountriesOutput {
    /// The supported phone number countries.
    public var phoneNumberCountries: [ChimeSDKVoiceClientTypes.PhoneNumberCountry]?

    public init(
        phoneNumberCountries: [ChimeSDKVoiceClientTypes.PhoneNumberCountry]? = nil
    )
    {
        self.phoneNumberCountries = phoneNumberCountries
    }
}

public struct ListTagsForResourceInput {
    /// The resource ARN.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(resourceARN: \"CONTENT_REDACTED\")"}
}

public struct ListTagsForResourceOutput {
    /// The tags in the list.
    public var tags: [ChimeSDKVoiceClientTypes.Tag]?

    public init(
        tags: [ChimeSDKVoiceClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

public struct ListVoiceConnectorGroupsInput {
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListVoiceConnectorGroupsOutput {
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?
    /// The details of the Voice Connector groups.
    public var voiceConnectorGroups: [ChimeSDKVoiceClientTypes.VoiceConnectorGroup]?

    public init(
        nextToken: Swift.String? = nil,
        voiceConnectorGroups: [ChimeSDKVoiceClientTypes.VoiceConnectorGroup]? = nil
    )
    {
        self.nextToken = nextToken
        self.voiceConnectorGroups = voiceConnectorGroups
    }
}

public struct ListVoiceConnectorsInput {
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListVoiceConnectorsOutput {
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?
    /// The details of the Voice Connectors.
    public var voiceConnectors: [ChimeSDKVoiceClientTypes.VoiceConnector]?

    public init(
        nextToken: Swift.String? = nil,
        voiceConnectors: [ChimeSDKVoiceClientTypes.VoiceConnector]? = nil
    )
    {
        self.nextToken = nextToken
        self.voiceConnectors = voiceConnectors
    }
}

public struct ListVoiceConnectorTerminationCredentialsInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct ListVoiceConnectorTerminationCredentialsOutput {
    /// A list of user names.
    public var usernames: [Swift.String]?

    public init(
        usernames: [Swift.String]? = nil
    )
    {
        self.usernames = usernames
    }
}

extension ListVoiceConnectorTerminationCredentialsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVoiceConnectorTerminationCredentialsOutput(usernames: \"CONTENT_REDACTED\")"}
}

public struct ListVoiceProfileDomainsInput {
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ChimeSDKVoiceClientTypes {
    /// A high-level overview of a voice profile domain.
    public struct VoiceProfileDomainSummary {
        /// The time at which the voice profile domain summary was created.
        public var createdTimestamp: Foundation.Date?
        /// Describes the voice profile domain summary.
        public var description: Swift.String?
        /// The name of the voice profile domain summary.
        public var name: Swift.String?
        /// The time at which the voice profile domain summary was last updated.
        public var updatedTimestamp: Foundation.Date?
        /// The ARN of a voice profile in a voice profile domain summary.
        public var voiceProfileDomainArn: Swift.String?
        /// The ID of the voice profile domain summary.
        public var voiceProfileDomainId: Swift.String?

        public init(
            createdTimestamp: Foundation.Date? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            updatedTimestamp: Foundation.Date? = nil,
            voiceProfileDomainArn: Swift.String? = nil,
            voiceProfileDomainId: Swift.String? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.description = description
            self.name = name
            self.updatedTimestamp = updatedTimestamp
            self.voiceProfileDomainArn = voiceProfileDomainArn
            self.voiceProfileDomainId = voiceProfileDomainId
        }
    }

}

extension ChimeSDKVoiceClientTypes.VoiceProfileDomainSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VoiceProfileDomainSummary(createdTimestamp: \(Swift.String(describing: createdTimestamp)), description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), updatedTimestamp: \(Swift.String(describing: updatedTimestamp)), voiceProfileDomainId: \(Swift.String(describing: voiceProfileDomainId)), voiceProfileDomainArn: \"CONTENT_REDACTED\")"}
}

public struct ListVoiceProfileDomainsOutput {
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?
    /// The list of voice profile domains.
    public var voiceProfileDomains: [ChimeSDKVoiceClientTypes.VoiceProfileDomainSummary]?

    public init(
        nextToken: Swift.String? = nil,
        voiceProfileDomains: [ChimeSDKVoiceClientTypes.VoiceProfileDomainSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.voiceProfileDomains = voiceProfileDomains
    }
}

public struct ListVoiceProfilesInput {
    /// The maximum number of results in the request.
    public var maxResults: Swift.Int?
    /// The token used to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The ID of the voice profile domain.
    /// This member is required.
    public var voiceProfileDomainId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        voiceProfileDomainId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.voiceProfileDomainId = voiceProfileDomainId
    }
}

extension ChimeSDKVoiceClientTypes {
    /// A high-level summary of a voice profile.
    public struct VoiceProfileSummary {
        /// The time at which a voice profile summary was created.
        public var createdTimestamp: Foundation.Date?
        /// Extends the life of the voice profile. You can use UpdateVoiceProfile to refresh an existing voice profile's voice print and extend the life of the summary.
        public var expirationTimestamp: Foundation.Date?
        /// The time at which a voice profile summary was last updated.
        public var updatedTimestamp: Foundation.Date?
        /// The ARN of the voice profile in a voice profile summary.
        public var voiceProfileArn: Swift.String?
        /// The ID of the voice profile domain in a voice profile summary.
        public var voiceProfileDomainId: Swift.String?
        /// The ID of the voice profile in a voice profile summary.
        public var voiceProfileId: Swift.String?

        public init(
            createdTimestamp: Foundation.Date? = nil,
            expirationTimestamp: Foundation.Date? = nil,
            updatedTimestamp: Foundation.Date? = nil,
            voiceProfileArn: Swift.String? = nil,
            voiceProfileDomainId: Swift.String? = nil,
            voiceProfileId: Swift.String? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.expirationTimestamp = expirationTimestamp
            self.updatedTimestamp = updatedTimestamp
            self.voiceProfileArn = voiceProfileArn
            self.voiceProfileDomainId = voiceProfileDomainId
            self.voiceProfileId = voiceProfileId
        }
    }

}

extension ChimeSDKVoiceClientTypes.VoiceProfileSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VoiceProfileSummary(createdTimestamp: \(Swift.String(describing: createdTimestamp)), expirationTimestamp: \(Swift.String(describing: expirationTimestamp)), updatedTimestamp: \(Swift.String(describing: updatedTimestamp)), voiceProfileDomainId: \(Swift.String(describing: voiceProfileDomainId)), voiceProfileId: \(Swift.String(describing: voiceProfileId)), voiceProfileArn: \"CONTENT_REDACTED\")"}
}

public struct ListVoiceProfilesOutput {
    /// The token used to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The list of voice profiles.
    public var voiceProfiles: [ChimeSDKVoiceClientTypes.VoiceProfileSummary]?

    public init(
        nextToken: Swift.String? = nil,
        voiceProfiles: [ChimeSDKVoiceClientTypes.VoiceProfileSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.voiceProfiles = voiceProfiles
    }
}

public struct PutSipMediaApplicationAlexaSkillConfigurationInput {
    /// The Alexa Skill configuration.
    public var sipMediaApplicationAlexaSkillConfiguration: ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration?
    /// The SIP media application ID.
    /// This member is required.
    public var sipMediaApplicationId: Swift.String?

    public init(
        sipMediaApplicationAlexaSkillConfiguration: ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration? = nil,
        sipMediaApplicationId: Swift.String? = nil
    )
    {
        self.sipMediaApplicationAlexaSkillConfiguration = sipMediaApplicationAlexaSkillConfiguration
        self.sipMediaApplicationId = sipMediaApplicationId
    }
}

public struct PutSipMediaApplicationAlexaSkillConfigurationOutput {
    /// Returns the Alexa Skill configuration.
    public var sipMediaApplicationAlexaSkillConfiguration: ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration?

    public init(
        sipMediaApplicationAlexaSkillConfiguration: ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration? = nil
    )
    {
        self.sipMediaApplicationAlexaSkillConfiguration = sipMediaApplicationAlexaSkillConfiguration
    }
}

public struct PutSipMediaApplicationLoggingConfigurationInput {
    /// The SIP media application ID.
    /// This member is required.
    public var sipMediaApplicationId: Swift.String?
    /// The logging configuration for the specified SIP media application.
    public var sipMediaApplicationLoggingConfiguration: ChimeSDKVoiceClientTypes.SipMediaApplicationLoggingConfiguration?

    public init(
        sipMediaApplicationId: Swift.String? = nil,
        sipMediaApplicationLoggingConfiguration: ChimeSDKVoiceClientTypes.SipMediaApplicationLoggingConfiguration? = nil
    )
    {
        self.sipMediaApplicationId = sipMediaApplicationId
        self.sipMediaApplicationLoggingConfiguration = sipMediaApplicationLoggingConfiguration
    }
}

public struct PutSipMediaApplicationLoggingConfigurationOutput {
    /// The updated logging configuration for the specified SIP media application.
    public var sipMediaApplicationLoggingConfiguration: ChimeSDKVoiceClientTypes.SipMediaApplicationLoggingConfiguration?

    public init(
        sipMediaApplicationLoggingConfiguration: ChimeSDKVoiceClientTypes.SipMediaApplicationLoggingConfiguration? = nil
    )
    {
        self.sipMediaApplicationLoggingConfiguration = sipMediaApplicationLoggingConfiguration
    }
}

public struct PutVoiceConnectorEmergencyCallingConfigurationInput {
    /// The configuration being updated.
    /// This member is required.
    public var emergencyCallingConfiguration: ChimeSDKVoiceClientTypes.EmergencyCallingConfiguration?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        emergencyCallingConfiguration: ChimeSDKVoiceClientTypes.EmergencyCallingConfiguration? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.emergencyCallingConfiguration = emergencyCallingConfiguration
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct PutVoiceConnectorEmergencyCallingConfigurationOutput {
    /// The updated configuration.
    public var emergencyCallingConfiguration: ChimeSDKVoiceClientTypes.EmergencyCallingConfiguration?

    public init(
        emergencyCallingConfiguration: ChimeSDKVoiceClientTypes.EmergencyCallingConfiguration? = nil
    )
    {
        self.emergencyCallingConfiguration = emergencyCallingConfiguration
    }
}

public struct PutVoiceConnectorLoggingConfigurationInput {
    /// The logging configuration being updated.
    /// This member is required.
    public var loggingConfiguration: ChimeSDKVoiceClientTypes.LoggingConfiguration?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        loggingConfiguration: ChimeSDKVoiceClientTypes.LoggingConfiguration? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct PutVoiceConnectorLoggingConfigurationOutput {
    /// The updated logging configuration.
    public var loggingConfiguration: ChimeSDKVoiceClientTypes.LoggingConfiguration?

    public init(
        loggingConfiguration: ChimeSDKVoiceClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

public struct PutVoiceConnectorOriginationInput {
    /// The origination settings being updated.
    /// This member is required.
    public var origination: ChimeSDKVoiceClientTypes.Origination?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        origination: ChimeSDKVoiceClientTypes.Origination? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.origination = origination
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct PutVoiceConnectorOriginationOutput {
    /// The updated origination settings.
    public var origination: ChimeSDKVoiceClientTypes.Origination?

    public init(
        origination: ChimeSDKVoiceClientTypes.Origination? = nil
    )
    {
        self.origination = origination
    }
}

public struct PutVoiceConnectorProxyInput {
    /// The default number of minutes allowed for proxy session.
    /// This member is required.
    public var defaultSessionExpiryMinutes: Swift.Int?
    /// When true, stops proxy sessions from being created on the specified Amazon Chime SDK Voice Connector.
    public var disabled: Swift.Bool?
    /// The phone number to route calls to after a proxy session expires.
    public var fallBackPhoneNumber: Swift.String?
    /// The countries for proxy phone numbers to be selected from.
    /// This member is required.
    public var phoneNumberPoolCountries: [Swift.String]?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        defaultSessionExpiryMinutes: Swift.Int? = nil,
        disabled: Swift.Bool? = nil,
        fallBackPhoneNumber: Swift.String? = nil,
        phoneNumberPoolCountries: [Swift.String]? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.defaultSessionExpiryMinutes = defaultSessionExpiryMinutes
        self.disabled = disabled
        self.fallBackPhoneNumber = fallBackPhoneNumber
        self.phoneNumberPoolCountries = phoneNumberPoolCountries
        self.voiceConnectorId = voiceConnectorId
    }
}

extension PutVoiceConnectorProxyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutVoiceConnectorProxyInput(defaultSessionExpiryMinutes: \(Swift.String(describing: defaultSessionExpiryMinutes)), disabled: \(Swift.String(describing: disabled)), phoneNumberPoolCountries: \(Swift.String(describing: phoneNumberPoolCountries)), voiceConnectorId: \(Swift.String(describing: voiceConnectorId)), fallBackPhoneNumber: \"CONTENT_REDACTED\")"}
}

public struct PutVoiceConnectorProxyOutput {
    /// The proxy configuration details.
    public var proxy: ChimeSDKVoiceClientTypes.Proxy?

    public init(
        proxy: ChimeSDKVoiceClientTypes.Proxy? = nil
    )
    {
        self.proxy = proxy
    }
}

public struct PutVoiceConnectorStreamingConfigurationInput {
    /// The streaming settings being updated.
    /// This member is required.
    public var streamingConfiguration: ChimeSDKVoiceClientTypes.StreamingConfiguration?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        streamingConfiguration: ChimeSDKVoiceClientTypes.StreamingConfiguration? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.streamingConfiguration = streamingConfiguration
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct PutVoiceConnectorStreamingConfigurationOutput {
    /// The updated streaming settings.
    public var streamingConfiguration: ChimeSDKVoiceClientTypes.StreamingConfiguration?

    public init(
        streamingConfiguration: ChimeSDKVoiceClientTypes.StreamingConfiguration? = nil
    )
    {
        self.streamingConfiguration = streamingConfiguration
    }
}

public struct PutVoiceConnectorTerminationInput {
    /// The termination settings to be updated.
    /// This member is required.
    public var termination: ChimeSDKVoiceClientTypes.Termination?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        termination: ChimeSDKVoiceClientTypes.Termination? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.termination = termination
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct PutVoiceConnectorTerminationOutput {
    /// The updated termination settings.
    public var termination: ChimeSDKVoiceClientTypes.Termination?

    public init(
        termination: ChimeSDKVoiceClientTypes.Termination? = nil
    )
    {
        self.termination = termination
    }
}

extension ChimeSDKVoiceClientTypes {
    /// The SIP credentials used to authenticate requests to an Amazon Chime SDK Voice Connector.
    public struct Credential {
        /// The RFC2617 compliant password associated with the SIP credentials, in US-ASCII format.
        public var password: Swift.String?
        /// The RFC2617 compliant user name associated with the SIP credentials, in US-ASCII format.
        public var username: Swift.String?

        public init(
            password: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.password = password
            self.username = username
        }
    }

}

extension ChimeSDKVoiceClientTypes.Credential: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Credential(password: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

public struct PutVoiceConnectorTerminationCredentialsInput {
    /// The termination credentials being updated.
    public var credentials: [ChimeSDKVoiceClientTypes.Credential]?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        credentials: [ChimeSDKVoiceClientTypes.Credential]? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.credentials = credentials
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct RestorePhoneNumberInput {
    /// The ID of the phone number being restored.
    /// This member is required.
    public var phoneNumberId: Swift.String?

    public init(
        phoneNumberId: Swift.String? = nil
    )
    {
        self.phoneNumberId = phoneNumberId
    }
}

extension RestorePhoneNumberInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RestorePhoneNumberInput(phoneNumberId: \"CONTENT_REDACTED\")"}
}

public struct RestorePhoneNumberOutput {
    /// The restored phone number.
    public var phoneNumber: ChimeSDKVoiceClientTypes.PhoneNumber?

    public init(
        phoneNumber: ChimeSDKVoiceClientTypes.PhoneNumber? = nil
    )
    {
        self.phoneNumber = phoneNumber
    }
}

public struct SearchAvailablePhoneNumbersInput {
    /// Confines a search to just the phone numbers associated with the specified area code.
    public var areaCode: Swift.String?
    /// Confines a search to just the phone numbers associated with the specified city.
    public var city: Swift.String?
    /// Confines a search to just the phone numbers associated with the specified country.
    public var country: Swift.String?
    /// The maximum number of results to return.
    public var maxResults: Swift.Int?
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?
    /// Confines a search to just the phone numbers associated with the specified phone number type, either local or toll-free.
    public var phoneNumberType: ChimeSDKVoiceClientTypes.PhoneNumberType?
    /// Confines a search to just the phone numbers associated with the specified state.
    public var state: Swift.String?
    /// Confines a search to just the phone numbers associated with the specified toll-free prefix.
    public var tollFreePrefix: Swift.String?

    public init(
        areaCode: Swift.String? = nil,
        city: Swift.String? = nil,
        country: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        phoneNumberType: ChimeSDKVoiceClientTypes.PhoneNumberType? = nil,
        state: Swift.String? = nil,
        tollFreePrefix: Swift.String? = nil
    )
    {
        self.areaCode = areaCode
        self.city = city
        self.country = country
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.phoneNumberType = phoneNumberType
        self.state = state
        self.tollFreePrefix = tollFreePrefix
    }
}

public struct SearchAvailablePhoneNumbersOutput {
    /// Confines a search to just the phone numbers in the E.164 format.
    public var e164PhoneNumbers: [Swift.String]?
    /// The token used to return the next page of results.
    public var nextToken: Swift.String?

    public init(
        e164PhoneNumbers: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.e164PhoneNumbers = e164PhoneNumbers
        self.nextToken = nextToken
    }
}

extension SearchAvailablePhoneNumbersOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SearchAvailablePhoneNumbersOutput(nextToken: \(Swift.String(describing: nextToken)), e164PhoneNumbers: \"CONTENT_REDACTED\")"}
}

/// A well-formed request couldn't be followed due to semantic errors.
public struct UnprocessableEntityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKVoiceClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnprocessableEntityException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKVoiceClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

public struct StartSpeakerSearchTaskInput {
    /// Specifies which call leg to stream for speaker search.
    public var callLeg: ChimeSDKVoiceClientTypes.CallLegType?
    /// The unique identifier for the client request. Use a different token for different speaker search tasks.
    public var clientRequestToken: Swift.String?
    /// The transaction ID of the call being analyzed.
    /// This member is required.
    public var transactionId: Swift.String?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?
    /// The ID of the voice profile domain that will store the voice profile.
    /// This member is required.
    public var voiceProfileDomainId: Swift.String?

    public init(
        callLeg: ChimeSDKVoiceClientTypes.CallLegType? = nil,
        clientRequestToken: Swift.String? = nil,
        transactionId: Swift.String? = nil,
        voiceConnectorId: Swift.String? = nil,
        voiceProfileDomainId: Swift.String? = nil
    )
    {
        self.callLeg = callLeg
        self.clientRequestToken = clientRequestToken
        self.transactionId = transactionId
        self.voiceConnectorId = voiceConnectorId
        self.voiceProfileDomainId = voiceProfileDomainId
    }
}

public struct StartSpeakerSearchTaskOutput {
    /// The details of the speaker search task.
    public var speakerSearchTask: ChimeSDKVoiceClientTypes.SpeakerSearchTask?

    public init(
        speakerSearchTask: ChimeSDKVoiceClientTypes.SpeakerSearchTask? = nil
    )
    {
        self.speakerSearchTask = speakerSearchTask
    }
}

extension ChimeSDKVoiceClientTypes {

    public enum LanguageCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enUs
        case sdkUnknown(Swift.String)

        public static var allCases: [LanguageCode] {
            return [
                .enUs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enUs: return "en-US"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct StartVoiceToneAnalysisTaskInput {
    /// The unique identifier for the client request. Use a different token for different voice tone analysis tasks.
    public var clientRequestToken: Swift.String?
    /// The language code.
    /// This member is required.
    public var languageCode: ChimeSDKVoiceClientTypes.LanguageCode?
    /// The transaction ID.
    /// This member is required.
    public var transactionId: Swift.String?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        languageCode: ChimeSDKVoiceClientTypes.LanguageCode? = nil,
        transactionId: Swift.String? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.languageCode = languageCode
        self.transactionId = transactionId
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct StartVoiceToneAnalysisTaskOutput {
    /// The details of the voice tone analysis task.
    public var voiceToneAnalysisTask: ChimeSDKVoiceClientTypes.VoiceToneAnalysisTask?

    public init(
        voiceToneAnalysisTask: ChimeSDKVoiceClientTypes.VoiceToneAnalysisTask? = nil
    )
    {
        self.voiceToneAnalysisTask = voiceToneAnalysisTask
    }
}

public struct StopSpeakerSearchTaskInput {
    /// The speaker search task ID.
    /// This member is required.
    public var speakerSearchTaskId: Swift.String?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        speakerSearchTaskId: Swift.String? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.speakerSearchTaskId = speakerSearchTaskId
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct StopVoiceToneAnalysisTaskInput {
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?
    /// The ID of the voice tone analysis task.
    /// This member is required.
    public var voiceToneAnalysisTaskId: Swift.String?

    public init(
        voiceConnectorId: Swift.String? = nil,
        voiceToneAnalysisTaskId: Swift.String? = nil
    )
    {
        self.voiceConnectorId = voiceConnectorId
        self.voiceToneAnalysisTaskId = voiceToneAnalysisTaskId
    }
}

public struct TagResourceInput {
    /// The ARN of the resource being tagged.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of the tags being added to the resource.
    /// This member is required.
    public var tags: [ChimeSDKVoiceClientTypes.Tag]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [ChimeSDKVoiceClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(tags: \(Swift.String(describing: tags)), resourceARN: \"CONTENT_REDACTED\")"}
}

public struct UntagResourceInput {
    /// The ARN of the resource having its tags removed.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// The keys of the tags being removed from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceARN: \"CONTENT_REDACTED\", tagKeys: \"CONTENT_REDACTED\")"}
}

public struct UpdateGlobalSettingsInput {
    /// The Voice Connector settings.
    public var voiceConnector: ChimeSDKVoiceClientTypes.VoiceConnectorSettings?

    public init(
        voiceConnector: ChimeSDKVoiceClientTypes.VoiceConnectorSettings? = nil
    )
    {
        self.voiceConnector = voiceConnector
    }
}

public struct UpdatePhoneNumberInput {
    /// The outbound calling name associated with the phone number.
    public var callingName: Swift.String?
    /// Specifies the updated name assigned to one or more phone numbers.
    public var name: Swift.String?
    /// The phone number ID.
    /// This member is required.
    public var phoneNumberId: Swift.String?
    /// The product type.
    public var productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType?

    public init(
        callingName: Swift.String? = nil,
        name: Swift.String? = nil,
        phoneNumberId: Swift.String? = nil,
        productType: ChimeSDKVoiceClientTypes.PhoneNumberProductType? = nil
    )
    {
        self.callingName = callingName
        self.name = name
        self.phoneNumberId = phoneNumberId
        self.productType = productType
    }
}

extension UpdatePhoneNumberInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdatePhoneNumberInput(productType: \(Swift.String(describing: productType)), callingName: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\", phoneNumberId: \"CONTENT_REDACTED\")"}
}

public struct UpdatePhoneNumberOutput {
    /// The updated phone number details.
    public var phoneNumber: ChimeSDKVoiceClientTypes.PhoneNumber?

    public init(
        phoneNumber: ChimeSDKVoiceClientTypes.PhoneNumber? = nil
    )
    {
        self.phoneNumber = phoneNumber
    }
}

public struct UpdatePhoneNumberSettingsInput {
    /// The default outbound calling name for the account.
    /// This member is required.
    public var callingName: Swift.String?

    public init(
        callingName: Swift.String? = nil
    )
    {
        self.callingName = callingName
    }
}

extension UpdatePhoneNumberSettingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdatePhoneNumberSettingsInput(callingName: \"CONTENT_REDACTED\")"}
}

public struct UpdateProxySessionInput {
    /// The proxy session capabilities.
    /// This member is required.
    public var capabilities: [ChimeSDKVoiceClientTypes.Capability]?
    /// The number of minutes allowed for the proxy session.
    public var expiryMinutes: Swift.Int?
    /// The proxy session ID.
    /// This member is required.
    public var proxySessionId: Swift.String?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        capabilities: [ChimeSDKVoiceClientTypes.Capability]? = nil,
        expiryMinutes: Swift.Int? = nil,
        proxySessionId: Swift.String? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.capabilities = capabilities
        self.expiryMinutes = expiryMinutes
        self.proxySessionId = proxySessionId
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct UpdateProxySessionOutput {
    /// The updated proxy session details.
    public var proxySession: ChimeSDKVoiceClientTypes.ProxySession?

    public init(
        proxySession: ChimeSDKVoiceClientTypes.ProxySession? = nil
    )
    {
        self.proxySession = proxySession
    }
}

public struct UpdateSipMediaApplicationInput {
    /// The new set of endpoints for the specified SIP media application.
    public var endpoints: [ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint]?
    /// The new name for the specified SIP media application.
    public var name: Swift.String?
    /// The SIP media application ID.
    /// This member is required.
    public var sipMediaApplicationId: Swift.String?

    public init(
        endpoints: [ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint]? = nil,
        name: Swift.String? = nil,
        sipMediaApplicationId: Swift.String? = nil
    )
    {
        self.endpoints = endpoints
        self.name = name
        self.sipMediaApplicationId = sipMediaApplicationId
    }
}

public struct UpdateSipMediaApplicationOutput {
    /// The updated SIP media application’s details.
    public var sipMediaApplication: ChimeSDKVoiceClientTypes.SipMediaApplication?

    public init(
        sipMediaApplication: ChimeSDKVoiceClientTypes.SipMediaApplication? = nil
    )
    {
        self.sipMediaApplication = sipMediaApplication
    }
}

public struct UpdateSipMediaApplicationCallInput {
    /// Arguments made available to the Lambda function as part of the CALL_UPDATE_REQUESTED event. Can contain 0-20 key-value pairs.
    /// This member is required.
    public var arguments: [Swift.String: Swift.String]?
    /// The ID of the SIP media application handling the call.
    /// This member is required.
    public var sipMediaApplicationId: Swift.String?
    /// The ID of the call transaction.
    /// This member is required.
    public var transactionId: Swift.String?

    public init(
        arguments: [Swift.String: Swift.String]? = nil,
        sipMediaApplicationId: Swift.String? = nil,
        transactionId: Swift.String? = nil
    )
    {
        self.arguments = arguments
        self.sipMediaApplicationId = sipMediaApplicationId
        self.transactionId = transactionId
    }
}

extension UpdateSipMediaApplicationCallInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSipMediaApplicationCallInput(sipMediaApplicationId: \(Swift.String(describing: sipMediaApplicationId)), transactionId: \(Swift.String(describing: transactionId)), arguments: \"CONTENT_REDACTED\")"}
}

public struct UpdateSipMediaApplicationCallOutput {
    /// A Call instance for a SIP media application.
    public var sipMediaApplicationCall: ChimeSDKVoiceClientTypes.SipMediaApplicationCall?

    public init(
        sipMediaApplicationCall: ChimeSDKVoiceClientTypes.SipMediaApplicationCall? = nil
    )
    {
        self.sipMediaApplicationCall = sipMediaApplicationCall
    }
}

public struct UpdateSipRuleInput {
    /// The new value that indicates whether the rule is disabled.
    public var disabled: Swift.Bool?
    /// The new name for the specified SIP rule.
    /// This member is required.
    public var name: Swift.String?
    /// The SIP rule ID.
    /// This member is required.
    public var sipRuleId: Swift.String?
    /// The new list of target applications.
    public var targetApplications: [ChimeSDKVoiceClientTypes.SipRuleTargetApplication]?

    public init(
        disabled: Swift.Bool? = nil,
        name: Swift.String? = nil,
        sipRuleId: Swift.String? = nil,
        targetApplications: [ChimeSDKVoiceClientTypes.SipRuleTargetApplication]? = nil
    )
    {
        self.disabled = disabled
        self.name = name
        self.sipRuleId = sipRuleId
        self.targetApplications = targetApplications
    }
}

public struct UpdateSipRuleOutput {
    /// The updated SIP rule details.
    public var sipRule: ChimeSDKVoiceClientTypes.SipRule?

    public init(
        sipRule: ChimeSDKVoiceClientTypes.SipRule? = nil
    )
    {
        self.sipRule = sipRule
    }
}

public struct UpdateVoiceConnectorInput {
    /// The name of the Voice Connector.
    /// This member is required.
    public var name: Swift.String?
    /// When enabled, requires encryption for the Voice Connector.
    /// This member is required.
    public var requireEncryption: Swift.Bool?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorId: Swift.String?

    public init(
        name: Swift.String? = nil,
        requireEncryption: Swift.Bool? = nil,
        voiceConnectorId: Swift.String? = nil
    )
    {
        self.name = name
        self.requireEncryption = requireEncryption
        self.voiceConnectorId = voiceConnectorId
    }
}

public struct UpdateVoiceConnectorOutput {
    /// The updated Voice Connector details.
    public var voiceConnector: ChimeSDKVoiceClientTypes.VoiceConnector?

    public init(
        voiceConnector: ChimeSDKVoiceClientTypes.VoiceConnector? = nil
    )
    {
        self.voiceConnector = voiceConnector
    }
}

public struct UpdateVoiceConnectorGroupInput {
    /// The name of the Voice Connector group.
    /// This member is required.
    public var name: Swift.String?
    /// The Voice Connector ID.
    /// This member is required.
    public var voiceConnectorGroupId: Swift.String?
    /// The VoiceConnectorItems to associate with the Voice Connector group.
    /// This member is required.
    public var voiceConnectorItems: [ChimeSDKVoiceClientTypes.VoiceConnectorItem]?

    public init(
        name: Swift.String? = nil,
        voiceConnectorGroupId: Swift.String? = nil,
        voiceConnectorItems: [ChimeSDKVoiceClientTypes.VoiceConnectorItem]? = nil
    )
    {
        self.name = name
        self.voiceConnectorGroupId = voiceConnectorGroupId
        self.voiceConnectorItems = voiceConnectorItems
    }
}

public struct UpdateVoiceConnectorGroupOutput {
    /// The updated Voice Connector group.
    public var voiceConnectorGroup: ChimeSDKVoiceClientTypes.VoiceConnectorGroup?

    public init(
        voiceConnectorGroup: ChimeSDKVoiceClientTypes.VoiceConnectorGroup? = nil
    )
    {
        self.voiceConnectorGroup = voiceConnectorGroup
    }
}

public struct UpdateVoiceProfileInput {
    /// The ID of the speaker search task.
    /// This member is required.
    public var speakerSearchTaskId: Swift.String?
    /// The profile ID.
    /// This member is required.
    public var voiceProfileId: Swift.String?

    public init(
        speakerSearchTaskId: Swift.String? = nil,
        voiceProfileId: Swift.String? = nil
    )
    {
        self.speakerSearchTaskId = speakerSearchTaskId
        self.voiceProfileId = voiceProfileId
    }
}

public struct UpdateVoiceProfileOutput {
    /// The updated voice profile settings.
    public var voiceProfile: ChimeSDKVoiceClientTypes.VoiceProfile?

    public init(
        voiceProfile: ChimeSDKVoiceClientTypes.VoiceProfile? = nil
    )
    {
        self.voiceProfile = voiceProfile
    }
}

public struct UpdateVoiceProfileDomainInput {
    /// The description of the voice profile domain.
    public var description: Swift.String?
    /// The name of the voice profile domain.
    public var name: Swift.String?
    /// The domain ID.
    /// This member is required.
    public var voiceProfileDomainId: Swift.String?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        voiceProfileDomainId: Swift.String? = nil
    )
    {
        self.description = description
        self.name = name
        self.voiceProfileDomainId = voiceProfileDomainId
    }
}

public struct UpdateVoiceProfileDomainOutput {
    /// The updated details of the voice profile domain.
    public var voiceProfileDomain: ChimeSDKVoiceClientTypes.VoiceProfileDomain?

    public init(
        voiceProfileDomain: ChimeSDKVoiceClientTypes.VoiceProfileDomain? = nil
    )
    {
        self.voiceProfileDomain = voiceProfileDomain
    }
}

public struct ValidateE911AddressInput {
    /// The AWS account ID.
    /// This member is required.
    public var awsAccountId: Swift.String?
    /// The address city, such as Portland.
    /// This member is required.
    public var city: Swift.String?
    /// The country in the address being validated as two-letter country code in ISO 3166-1 alpha-2 format, such as US. For more information, see [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) in Wikipedia.
    /// This member is required.
    public var country: Swift.String?
    /// The dress postal code, such 04352.
    /// This member is required.
    public var postalCode: Swift.String?
    /// The address state, such as ME.
    /// This member is required.
    public var state: Swift.String?
    /// The address street information, such as 8th Avenue.
    /// This member is required.
    public var streetInfo: Swift.String?
    /// The address street number, such as 200 or 2121.
    /// This member is required.
    public var streetNumber: Swift.String?

    public init(
        awsAccountId: Swift.String? = nil,
        city: Swift.String? = nil,
        country: Swift.String? = nil,
        postalCode: Swift.String? = nil,
        state: Swift.String? = nil,
        streetInfo: Swift.String? = nil,
        streetNumber: Swift.String? = nil
    )
    {
        self.awsAccountId = awsAccountId
        self.city = city
        self.country = country
        self.postalCode = postalCode
        self.state = state
        self.streetInfo = streetInfo
        self.streetNumber = streetNumber
    }
}

extension ValidateE911AddressInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidateE911AddressInput(awsAccountId: \(Swift.String(describing: awsAccountId)), city: \"CONTENT_REDACTED\", country: \"CONTENT_REDACTED\", postalCode: \"CONTENT_REDACTED\", state: \"CONTENT_REDACTED\", streetInfo: \"CONTENT_REDACTED\", streetNumber: \"CONTENT_REDACTED\")"}
}

public struct ValidateE911AddressOutput {
    /// The validated address.
    public var address: ChimeSDKVoiceClientTypes.Address?
    /// The ID that represents the address.
    public var addressExternalId: Swift.String?
    /// The list of address suggestions..
    public var candidateAddressList: [ChimeSDKVoiceClientTypes.CandidateAddress]?
    /// Number indicating the result of address validation. Each possible result is defined as follows:
    ///
    /// * 0 - Address validation succeeded.
    ///
    /// * 1 - Address validation succeeded. The address was a close enough match and has been corrected as part of the address object.
    ///
    /// * 2 - Address validation failed. You should re-submit the validation request with candidates from the CandidateAddressList result, if it's a close match.
    public var validationResult: Swift.Int

    public init(
        address: ChimeSDKVoiceClientTypes.Address? = nil,
        addressExternalId: Swift.String? = nil,
        candidateAddressList: [ChimeSDKVoiceClientTypes.CandidateAddress]? = nil,
        validationResult: Swift.Int = 0
    )
    {
        self.address = address
        self.addressExternalId = addressExternalId
        self.candidateAddressList = candidateAddressList
        self.validationResult = validationResult
    }
}

extension AssociatePhoneNumbersWithVoiceConnectorInput {

    static func urlPathProvider(_ value: AssociatePhoneNumbersWithVoiceConnectorInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())"
    }
}

extension AssociatePhoneNumbersWithVoiceConnectorInput {

    static func queryItemProvider(_ value: AssociatePhoneNumbersWithVoiceConnectorInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "associate-phone-numbers"))
        return items
    }
}

extension AssociatePhoneNumbersWithVoiceConnectorGroupInput {

    static func urlPathProvider(_ value: AssociatePhoneNumbersWithVoiceConnectorGroupInput) -> Swift.String? {
        guard let voiceConnectorGroupId = value.voiceConnectorGroupId else {
            return nil
        }
        return "/voice-connector-groups/\(voiceConnectorGroupId.urlPercentEncoding())"
    }
}

extension AssociatePhoneNumbersWithVoiceConnectorGroupInput {

    static func queryItemProvider(_ value: AssociatePhoneNumbersWithVoiceConnectorGroupInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "associate-phone-numbers"))
        return items
    }
}

extension BatchDeletePhoneNumberInput {

    static func urlPathProvider(_ value: BatchDeletePhoneNumberInput) -> Swift.String? {
        return "/phone-numbers"
    }
}

extension BatchDeletePhoneNumberInput {

    static func queryItemProvider(_ value: BatchDeletePhoneNumberInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "batch-delete"))
        return items
    }
}

extension BatchUpdatePhoneNumberInput {

    static func urlPathProvider(_ value: BatchUpdatePhoneNumberInput) -> Swift.String? {
        return "/phone-numbers"
    }
}

extension BatchUpdatePhoneNumberInput {

    static func queryItemProvider(_ value: BatchUpdatePhoneNumberInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "batch-update"))
        return items
    }
}

extension CreatePhoneNumberOrderInput {

    static func urlPathProvider(_ value: CreatePhoneNumberOrderInput) -> Swift.String? {
        return "/phone-number-orders"
    }
}

extension CreateProxySessionInput {

    static func urlPathProvider(_ value: CreateProxySessionInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/proxy-sessions"
    }
}

extension CreateSipMediaApplicationInput {

    static func urlPathProvider(_ value: CreateSipMediaApplicationInput) -> Swift.String? {
        return "/sip-media-applications"
    }
}

extension CreateSipMediaApplicationCallInput {

    static func urlPathProvider(_ value: CreateSipMediaApplicationCallInput) -> Swift.String? {
        guard let sipMediaApplicationId = value.sipMediaApplicationId else {
            return nil
        }
        return "/sip-media-applications/\(sipMediaApplicationId.urlPercentEncoding())/calls"
    }
}

extension CreateSipRuleInput {

    static func urlPathProvider(_ value: CreateSipRuleInput) -> Swift.String? {
        return "/sip-rules"
    }
}

extension CreateVoiceConnectorInput {

    static func urlPathProvider(_ value: CreateVoiceConnectorInput) -> Swift.String? {
        return "/voice-connectors"
    }
}

extension CreateVoiceConnectorGroupInput {

    static func urlPathProvider(_ value: CreateVoiceConnectorGroupInput) -> Swift.String? {
        return "/voice-connector-groups"
    }
}

extension CreateVoiceProfileInput {

    static func urlPathProvider(_ value: CreateVoiceProfileInput) -> Swift.String? {
        return "/voice-profiles"
    }
}

extension CreateVoiceProfileDomainInput {

    static func urlPathProvider(_ value: CreateVoiceProfileDomainInput) -> Swift.String? {
        return "/voice-profile-domains"
    }
}

extension DeletePhoneNumberInput {

    static func urlPathProvider(_ value: DeletePhoneNumberInput) -> Swift.String? {
        guard let phoneNumberId = value.phoneNumberId else {
            return nil
        }
        return "/phone-numbers/\(phoneNumberId.urlPercentEncoding())"
    }
}

extension DeleteProxySessionInput {

    static func urlPathProvider(_ value: DeleteProxySessionInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        guard let proxySessionId = value.proxySessionId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/proxy-sessions/\(proxySessionId.urlPercentEncoding())"
    }
}

extension DeleteSipMediaApplicationInput {

    static func urlPathProvider(_ value: DeleteSipMediaApplicationInput) -> Swift.String? {
        guard let sipMediaApplicationId = value.sipMediaApplicationId else {
            return nil
        }
        return "/sip-media-applications/\(sipMediaApplicationId.urlPercentEncoding())"
    }
}

extension DeleteSipRuleInput {

    static func urlPathProvider(_ value: DeleteSipRuleInput) -> Swift.String? {
        guard let sipRuleId = value.sipRuleId else {
            return nil
        }
        return "/sip-rules/\(sipRuleId.urlPercentEncoding())"
    }
}

extension DeleteVoiceConnectorInput {

    static func urlPathProvider(_ value: DeleteVoiceConnectorInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())"
    }
}

extension DeleteVoiceConnectorEmergencyCallingConfigurationInput {

    static func urlPathProvider(_ value: DeleteVoiceConnectorEmergencyCallingConfigurationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/emergency-calling-configuration"
    }
}

extension DeleteVoiceConnectorGroupInput {

    static func urlPathProvider(_ value: DeleteVoiceConnectorGroupInput) -> Swift.String? {
        guard let voiceConnectorGroupId = value.voiceConnectorGroupId else {
            return nil
        }
        return "/voice-connector-groups/\(voiceConnectorGroupId.urlPercentEncoding())"
    }
}

extension DeleteVoiceConnectorOriginationInput {

    static func urlPathProvider(_ value: DeleteVoiceConnectorOriginationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/origination"
    }
}

extension DeleteVoiceConnectorProxyInput {

    static func urlPathProvider(_ value: DeleteVoiceConnectorProxyInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/programmable-numbers/proxy"
    }
}

extension DeleteVoiceConnectorStreamingConfigurationInput {

    static func urlPathProvider(_ value: DeleteVoiceConnectorStreamingConfigurationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/streaming-configuration"
    }
}

extension DeleteVoiceConnectorTerminationInput {

    static func urlPathProvider(_ value: DeleteVoiceConnectorTerminationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/termination"
    }
}

extension DeleteVoiceConnectorTerminationCredentialsInput {

    static func urlPathProvider(_ value: DeleteVoiceConnectorTerminationCredentialsInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/termination/credentials"
    }
}

extension DeleteVoiceConnectorTerminationCredentialsInput {

    static func queryItemProvider(_ value: DeleteVoiceConnectorTerminationCredentialsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "delete"))
        return items
    }
}

extension DeleteVoiceProfileInput {

    static func urlPathProvider(_ value: DeleteVoiceProfileInput) -> Swift.String? {
        guard let voiceProfileId = value.voiceProfileId else {
            return nil
        }
        return "/voice-profiles/\(voiceProfileId.urlPercentEncoding())"
    }
}

extension DeleteVoiceProfileDomainInput {

    static func urlPathProvider(_ value: DeleteVoiceProfileDomainInput) -> Swift.String? {
        guard let voiceProfileDomainId = value.voiceProfileDomainId else {
            return nil
        }
        return "/voice-profile-domains/\(voiceProfileDomainId.urlPercentEncoding())"
    }
}

extension DisassociatePhoneNumbersFromVoiceConnectorInput {

    static func urlPathProvider(_ value: DisassociatePhoneNumbersFromVoiceConnectorInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())"
    }
}

extension DisassociatePhoneNumbersFromVoiceConnectorInput {

    static func queryItemProvider(_ value: DisassociatePhoneNumbersFromVoiceConnectorInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "disassociate-phone-numbers"))
        return items
    }
}

extension DisassociatePhoneNumbersFromVoiceConnectorGroupInput {

    static func urlPathProvider(_ value: DisassociatePhoneNumbersFromVoiceConnectorGroupInput) -> Swift.String? {
        guard let voiceConnectorGroupId = value.voiceConnectorGroupId else {
            return nil
        }
        return "/voice-connector-groups/\(voiceConnectorGroupId.urlPercentEncoding())"
    }
}

extension DisassociatePhoneNumbersFromVoiceConnectorGroupInput {

    static func queryItemProvider(_ value: DisassociatePhoneNumbersFromVoiceConnectorGroupInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "disassociate-phone-numbers"))
        return items
    }
}

extension GetGlobalSettingsInput {

    static func urlPathProvider(_ value: GetGlobalSettingsInput) -> Swift.String? {
        return "/settings"
    }
}

extension GetPhoneNumberInput {

    static func urlPathProvider(_ value: GetPhoneNumberInput) -> Swift.String? {
        guard let phoneNumberId = value.phoneNumberId else {
            return nil
        }
        return "/phone-numbers/\(phoneNumberId.urlPercentEncoding())"
    }
}

extension GetPhoneNumberOrderInput {

    static func urlPathProvider(_ value: GetPhoneNumberOrderInput) -> Swift.String? {
        guard let phoneNumberOrderId = value.phoneNumberOrderId else {
            return nil
        }
        return "/phone-number-orders/\(phoneNumberOrderId.urlPercentEncoding())"
    }
}

extension GetPhoneNumberSettingsInput {

    static func urlPathProvider(_ value: GetPhoneNumberSettingsInput) -> Swift.String? {
        return "/settings/phone-number"
    }
}

extension GetProxySessionInput {

    static func urlPathProvider(_ value: GetProxySessionInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        guard let proxySessionId = value.proxySessionId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/proxy-sessions/\(proxySessionId.urlPercentEncoding())"
    }
}

extension GetSipMediaApplicationInput {

    static func urlPathProvider(_ value: GetSipMediaApplicationInput) -> Swift.String? {
        guard let sipMediaApplicationId = value.sipMediaApplicationId else {
            return nil
        }
        return "/sip-media-applications/\(sipMediaApplicationId.urlPercentEncoding())"
    }
}

extension GetSipMediaApplicationAlexaSkillConfigurationInput {

    static func urlPathProvider(_ value: GetSipMediaApplicationAlexaSkillConfigurationInput) -> Swift.String? {
        guard let sipMediaApplicationId = value.sipMediaApplicationId else {
            return nil
        }
        return "/sip-media-applications/\(sipMediaApplicationId.urlPercentEncoding())/alexa-skill-configuration"
    }
}

extension GetSipMediaApplicationLoggingConfigurationInput {

    static func urlPathProvider(_ value: GetSipMediaApplicationLoggingConfigurationInput) -> Swift.String? {
        guard let sipMediaApplicationId = value.sipMediaApplicationId else {
            return nil
        }
        return "/sip-media-applications/\(sipMediaApplicationId.urlPercentEncoding())/logging-configuration"
    }
}

extension GetSipRuleInput {

    static func urlPathProvider(_ value: GetSipRuleInput) -> Swift.String? {
        guard let sipRuleId = value.sipRuleId else {
            return nil
        }
        return "/sip-rules/\(sipRuleId.urlPercentEncoding())"
    }
}

extension GetSpeakerSearchTaskInput {

    static func urlPathProvider(_ value: GetSpeakerSearchTaskInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        guard let speakerSearchTaskId = value.speakerSearchTaskId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/speaker-search-tasks/\(speakerSearchTaskId.urlPercentEncoding())"
    }
}

extension GetVoiceConnectorInput {

    static func urlPathProvider(_ value: GetVoiceConnectorInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())"
    }
}

extension GetVoiceConnectorEmergencyCallingConfigurationInput {

    static func urlPathProvider(_ value: GetVoiceConnectorEmergencyCallingConfigurationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/emergency-calling-configuration"
    }
}

extension GetVoiceConnectorGroupInput {

    static func urlPathProvider(_ value: GetVoiceConnectorGroupInput) -> Swift.String? {
        guard let voiceConnectorGroupId = value.voiceConnectorGroupId else {
            return nil
        }
        return "/voice-connector-groups/\(voiceConnectorGroupId.urlPercentEncoding())"
    }
}

extension GetVoiceConnectorLoggingConfigurationInput {

    static func urlPathProvider(_ value: GetVoiceConnectorLoggingConfigurationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/logging-configuration"
    }
}

extension GetVoiceConnectorOriginationInput {

    static func urlPathProvider(_ value: GetVoiceConnectorOriginationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/origination"
    }
}

extension GetVoiceConnectorProxyInput {

    static func urlPathProvider(_ value: GetVoiceConnectorProxyInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/programmable-numbers/proxy"
    }
}

extension GetVoiceConnectorStreamingConfigurationInput {

    static func urlPathProvider(_ value: GetVoiceConnectorStreamingConfigurationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/streaming-configuration"
    }
}

extension GetVoiceConnectorTerminationInput {

    static func urlPathProvider(_ value: GetVoiceConnectorTerminationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/termination"
    }
}

extension GetVoiceConnectorTerminationHealthInput {

    static func urlPathProvider(_ value: GetVoiceConnectorTerminationHealthInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/termination/health"
    }
}

extension GetVoiceProfileInput {

    static func urlPathProvider(_ value: GetVoiceProfileInput) -> Swift.String? {
        guard let voiceProfileId = value.voiceProfileId else {
            return nil
        }
        return "/voice-profiles/\(voiceProfileId.urlPercentEncoding())"
    }
}

extension GetVoiceProfileDomainInput {

    static func urlPathProvider(_ value: GetVoiceProfileDomainInput) -> Swift.String? {
        guard let voiceProfileDomainId = value.voiceProfileDomainId else {
            return nil
        }
        return "/voice-profile-domains/\(voiceProfileDomainId.urlPercentEncoding())"
    }
}

extension GetVoiceToneAnalysisTaskInput {

    static func urlPathProvider(_ value: GetVoiceToneAnalysisTaskInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        guard let voiceToneAnalysisTaskId = value.voiceToneAnalysisTaskId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/voice-tone-analysis-tasks/\(voiceToneAnalysisTaskId.urlPercentEncoding())"
    }
}

extension GetVoiceToneAnalysisTaskInput {

    static func queryItemProvider(_ value: GetVoiceToneAnalysisTaskInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let isCaller = value.isCaller else {
            let message = "Creating a URL Query Item failed. isCaller is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let isCallerQueryItem = Smithy.URIQueryItem(name: "isCaller".urlPercentEncoding(), value: Swift.String(isCaller).urlPercentEncoding())
        items.append(isCallerQueryItem)
        return items
    }
}

extension ListAvailableVoiceConnectorRegionsInput {

    static func urlPathProvider(_ value: ListAvailableVoiceConnectorRegionsInput) -> Swift.String? {
        return "/voice-connector-regions"
    }
}

extension ListPhoneNumberOrdersInput {

    static func urlPathProvider(_ value: ListPhoneNumberOrdersInput) -> Swift.String? {
        return "/phone-number-orders"
    }
}

extension ListPhoneNumberOrdersInput {

    static func queryItemProvider(_ value: ListPhoneNumberOrdersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListPhoneNumbersInput {

    static func urlPathProvider(_ value: ListPhoneNumbersInput) -> Swift.String? {
        return "/phone-numbers"
    }
}

extension ListPhoneNumbersInput {

    static func queryItemProvider(_ value: ListPhoneNumbersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let status = value.status {
            let statusQueryItem = Smithy.URIQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status).urlPercentEncoding())
            items.append(statusQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let productType = value.productType {
            let productTypeQueryItem = Smithy.URIQueryItem(name: "product-type".urlPercentEncoding(), value: Swift.String(productType.rawValue).urlPercentEncoding())
            items.append(productTypeQueryItem)
        }
        if let filterName = value.filterName {
            let filterNameQueryItem = Smithy.URIQueryItem(name: "filter-name".urlPercentEncoding(), value: Swift.String(filterName.rawValue).urlPercentEncoding())
            items.append(filterNameQueryItem)
        }
        if let filterValue = value.filterValue {
            let filterValueQueryItem = Smithy.URIQueryItem(name: "filter-value".urlPercentEncoding(), value: Swift.String(filterValue).urlPercentEncoding())
            items.append(filterValueQueryItem)
        }
        return items
    }
}

extension ListProxySessionsInput {

    static func urlPathProvider(_ value: ListProxySessionsInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/proxy-sessions"
    }
}

extension ListProxySessionsInput {

    static func queryItemProvider(_ value: ListProxySessionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let status = value.status {
            let statusQueryItem = Smithy.URIQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            items.append(statusQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListSipMediaApplicationsInput {

    static func urlPathProvider(_ value: ListSipMediaApplicationsInput) -> Swift.String? {
        return "/sip-media-applications"
    }
}

extension ListSipMediaApplicationsInput {

    static func queryItemProvider(_ value: ListSipMediaApplicationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListSipRulesInput {

    static func urlPathProvider(_ value: ListSipRulesInput) -> Swift.String? {
        return "/sip-rules"
    }
}

extension ListSipRulesInput {

    static func queryItemProvider(_ value: ListSipRulesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let sipMediaApplicationId = value.sipMediaApplicationId {
            let sipMediaApplicationIdQueryItem = Smithy.URIQueryItem(name: "sip-media-application".urlPercentEncoding(), value: Swift.String(sipMediaApplicationId).urlPercentEncoding())
            items.append(sipMediaApplicationIdQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListSupportedPhoneNumberCountriesInput {

    static func urlPathProvider(_ value: ListSupportedPhoneNumberCountriesInput) -> Swift.String? {
        return "/phone-number-countries"
    }
}

extension ListSupportedPhoneNumberCountriesInput {

    static func queryItemProvider(_ value: ListSupportedPhoneNumberCountriesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let productType = value.productType else {
            let message = "Creating a URL Query Item failed. productType is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let productTypeQueryItem = Smithy.URIQueryItem(name: "product-type".urlPercentEncoding(), value: Swift.String(productType.rawValue).urlPercentEncoding())
        items.append(productTypeQueryItem)
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/tags"
    }
}

extension ListTagsForResourceInput {

    static func queryItemProvider(_ value: ListTagsForResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceARN = value.resourceARN else {
            let message = "Creating a URL Query Item failed. resourceARN is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceARNQueryItem = Smithy.URIQueryItem(name: "arn".urlPercentEncoding(), value: Swift.String(resourceARN).urlPercentEncoding())
        items.append(resourceARNQueryItem)
        return items
    }
}

extension ListVoiceConnectorGroupsInput {

    static func urlPathProvider(_ value: ListVoiceConnectorGroupsInput) -> Swift.String? {
        return "/voice-connector-groups"
    }
}

extension ListVoiceConnectorGroupsInput {

    static func queryItemProvider(_ value: ListVoiceConnectorGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListVoiceConnectorsInput {

    static func urlPathProvider(_ value: ListVoiceConnectorsInput) -> Swift.String? {
        return "/voice-connectors"
    }
}

extension ListVoiceConnectorsInput {

    static func queryItemProvider(_ value: ListVoiceConnectorsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListVoiceConnectorTerminationCredentialsInput {

    static func urlPathProvider(_ value: ListVoiceConnectorTerminationCredentialsInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/termination/credentials"
    }
}

extension ListVoiceProfileDomainsInput {

    static func urlPathProvider(_ value: ListVoiceProfileDomainsInput) -> Swift.String? {
        return "/voice-profile-domains"
    }
}

extension ListVoiceProfileDomainsInput {

    static func queryItemProvider(_ value: ListVoiceProfileDomainsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListVoiceProfilesInput {

    static func urlPathProvider(_ value: ListVoiceProfilesInput) -> Swift.String? {
        return "/voice-profiles"
    }
}

extension ListVoiceProfilesInput {

    static func queryItemProvider(_ value: ListVoiceProfilesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        guard let voiceProfileDomainId = value.voiceProfileDomainId else {
            let message = "Creating a URL Query Item failed. voiceProfileDomainId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let voiceProfileDomainIdQueryItem = Smithy.URIQueryItem(name: "voice-profile-domain-id".urlPercentEncoding(), value: Swift.String(voiceProfileDomainId).urlPercentEncoding())
        items.append(voiceProfileDomainIdQueryItem)
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension PutSipMediaApplicationAlexaSkillConfigurationInput {

    static func urlPathProvider(_ value: PutSipMediaApplicationAlexaSkillConfigurationInput) -> Swift.String? {
        guard let sipMediaApplicationId = value.sipMediaApplicationId else {
            return nil
        }
        return "/sip-media-applications/\(sipMediaApplicationId.urlPercentEncoding())/alexa-skill-configuration"
    }
}

extension PutSipMediaApplicationLoggingConfigurationInput {

    static func urlPathProvider(_ value: PutSipMediaApplicationLoggingConfigurationInput) -> Swift.String? {
        guard let sipMediaApplicationId = value.sipMediaApplicationId else {
            return nil
        }
        return "/sip-media-applications/\(sipMediaApplicationId.urlPercentEncoding())/logging-configuration"
    }
}

extension PutVoiceConnectorEmergencyCallingConfigurationInput {

    static func urlPathProvider(_ value: PutVoiceConnectorEmergencyCallingConfigurationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/emergency-calling-configuration"
    }
}

extension PutVoiceConnectorLoggingConfigurationInput {

    static func urlPathProvider(_ value: PutVoiceConnectorLoggingConfigurationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/logging-configuration"
    }
}

extension PutVoiceConnectorOriginationInput {

    static func urlPathProvider(_ value: PutVoiceConnectorOriginationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/origination"
    }
}

extension PutVoiceConnectorProxyInput {

    static func urlPathProvider(_ value: PutVoiceConnectorProxyInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/programmable-numbers/proxy"
    }
}

extension PutVoiceConnectorStreamingConfigurationInput {

    static func urlPathProvider(_ value: PutVoiceConnectorStreamingConfigurationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/streaming-configuration"
    }
}

extension PutVoiceConnectorTerminationInput {

    static func urlPathProvider(_ value: PutVoiceConnectorTerminationInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/termination"
    }
}

extension PutVoiceConnectorTerminationCredentialsInput {

    static func urlPathProvider(_ value: PutVoiceConnectorTerminationCredentialsInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/termination/credentials"
    }
}

extension PutVoiceConnectorTerminationCredentialsInput {

    static func queryItemProvider(_ value: PutVoiceConnectorTerminationCredentialsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "put"))
        return items
    }
}

extension RestorePhoneNumberInput {

    static func urlPathProvider(_ value: RestorePhoneNumberInput) -> Swift.String? {
        guard let phoneNumberId = value.phoneNumberId else {
            return nil
        }
        return "/phone-numbers/\(phoneNumberId.urlPercentEncoding())"
    }
}

extension RestorePhoneNumberInput {

    static func queryItemProvider(_ value: RestorePhoneNumberInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "restore"))
        return items
    }
}

extension SearchAvailablePhoneNumbersInput {

    static func urlPathProvider(_ value: SearchAvailablePhoneNumbersInput) -> Swift.String? {
        return "/search"
    }
}

extension SearchAvailablePhoneNumbersInput {

    static func queryItemProvider(_ value: SearchAvailablePhoneNumbersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "type", value: "phone-numbers"))
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let state = value.state {
            let stateQueryItem = Smithy.URIQueryItem(name: "state".urlPercentEncoding(), value: Swift.String(state).urlPercentEncoding())
            items.append(stateQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let areaCode = value.areaCode {
            let areaCodeQueryItem = Smithy.URIQueryItem(name: "area-code".urlPercentEncoding(), value: Swift.String(areaCode).urlPercentEncoding())
            items.append(areaCodeQueryItem)
        }
        if let country = value.country {
            let countryQueryItem = Smithy.URIQueryItem(name: "country".urlPercentEncoding(), value: Swift.String(country).urlPercentEncoding())
            items.append(countryQueryItem)
        }
        if let city = value.city {
            let cityQueryItem = Smithy.URIQueryItem(name: "city".urlPercentEncoding(), value: Swift.String(city).urlPercentEncoding())
            items.append(cityQueryItem)
        }
        if let phoneNumberType = value.phoneNumberType {
            let phoneNumberTypeQueryItem = Smithy.URIQueryItem(name: "phone-number-type".urlPercentEncoding(), value: Swift.String(phoneNumberType.rawValue).urlPercentEncoding())
            items.append(phoneNumberTypeQueryItem)
        }
        if let tollFreePrefix = value.tollFreePrefix {
            let tollFreePrefixQueryItem = Smithy.URIQueryItem(name: "toll-free-prefix".urlPercentEncoding(), value: Swift.String(tollFreePrefix).urlPercentEncoding())
            items.append(tollFreePrefixQueryItem)
        }
        return items
    }
}

extension StartSpeakerSearchTaskInput {

    static func urlPathProvider(_ value: StartSpeakerSearchTaskInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/speaker-search-tasks"
    }
}

extension StartVoiceToneAnalysisTaskInput {

    static func urlPathProvider(_ value: StartVoiceToneAnalysisTaskInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/voice-tone-analysis-tasks"
    }
}

extension StopSpeakerSearchTaskInput {

    static func urlPathProvider(_ value: StopSpeakerSearchTaskInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        guard let speakerSearchTaskId = value.speakerSearchTaskId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/speaker-search-tasks/\(speakerSearchTaskId.urlPercentEncoding())"
    }
}

extension StopSpeakerSearchTaskInput {

    static func queryItemProvider(_ value: StopSpeakerSearchTaskInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "stop"))
        return items
    }
}

extension StopVoiceToneAnalysisTaskInput {

    static func urlPathProvider(_ value: StopVoiceToneAnalysisTaskInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        guard let voiceToneAnalysisTaskId = value.voiceToneAnalysisTaskId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/voice-tone-analysis-tasks/\(voiceToneAnalysisTaskId.urlPercentEncoding())"
    }
}

extension StopVoiceToneAnalysisTaskInput {

    static func queryItemProvider(_ value: StopVoiceToneAnalysisTaskInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "stop"))
        return items
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/tags"
    }
}

extension TagResourceInput {

    static func queryItemProvider(_ value: TagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "tag-resource"))
        return items
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/tags"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "untag-resource"))
        return items
    }
}

extension UpdateGlobalSettingsInput {

    static func urlPathProvider(_ value: UpdateGlobalSettingsInput) -> Swift.String? {
        return "/settings"
    }
}

extension UpdatePhoneNumberInput {

    static func urlPathProvider(_ value: UpdatePhoneNumberInput) -> Swift.String? {
        guard let phoneNumberId = value.phoneNumberId else {
            return nil
        }
        return "/phone-numbers/\(phoneNumberId.urlPercentEncoding())"
    }
}

extension UpdatePhoneNumberSettingsInput {

    static func urlPathProvider(_ value: UpdatePhoneNumberSettingsInput) -> Swift.String? {
        return "/settings/phone-number"
    }
}

extension UpdateProxySessionInput {

    static func urlPathProvider(_ value: UpdateProxySessionInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        guard let proxySessionId = value.proxySessionId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())/proxy-sessions/\(proxySessionId.urlPercentEncoding())"
    }
}

extension UpdateSipMediaApplicationInput {

    static func urlPathProvider(_ value: UpdateSipMediaApplicationInput) -> Swift.String? {
        guard let sipMediaApplicationId = value.sipMediaApplicationId else {
            return nil
        }
        return "/sip-media-applications/\(sipMediaApplicationId.urlPercentEncoding())"
    }
}

extension UpdateSipMediaApplicationCallInput {

    static func urlPathProvider(_ value: UpdateSipMediaApplicationCallInput) -> Swift.String? {
        guard let sipMediaApplicationId = value.sipMediaApplicationId else {
            return nil
        }
        guard let transactionId = value.transactionId else {
            return nil
        }
        return "/sip-media-applications/\(sipMediaApplicationId.urlPercentEncoding())/calls/\(transactionId.urlPercentEncoding())"
    }
}

extension UpdateSipRuleInput {

    static func urlPathProvider(_ value: UpdateSipRuleInput) -> Swift.String? {
        guard let sipRuleId = value.sipRuleId else {
            return nil
        }
        return "/sip-rules/\(sipRuleId.urlPercentEncoding())"
    }
}

extension UpdateVoiceConnectorInput {

    static func urlPathProvider(_ value: UpdateVoiceConnectorInput) -> Swift.String? {
        guard let voiceConnectorId = value.voiceConnectorId else {
            return nil
        }
        return "/voice-connectors/\(voiceConnectorId.urlPercentEncoding())"
    }
}

extension UpdateVoiceConnectorGroupInput {

    static func urlPathProvider(_ value: UpdateVoiceConnectorGroupInput) -> Swift.String? {
        guard let voiceConnectorGroupId = value.voiceConnectorGroupId else {
            return nil
        }
        return "/voice-connector-groups/\(voiceConnectorGroupId.urlPercentEncoding())"
    }
}

extension UpdateVoiceProfileInput {

    static func urlPathProvider(_ value: UpdateVoiceProfileInput) -> Swift.String? {
        guard let voiceProfileId = value.voiceProfileId else {
            return nil
        }
        return "/voice-profiles/\(voiceProfileId.urlPercentEncoding())"
    }
}

extension UpdateVoiceProfileDomainInput {

    static func urlPathProvider(_ value: UpdateVoiceProfileDomainInput) -> Swift.String? {
        guard let voiceProfileDomainId = value.voiceProfileDomainId else {
            return nil
        }
        return "/voice-profile-domains/\(voiceProfileDomainId.urlPercentEncoding())"
    }
}

extension ValidateE911AddressInput {

    static func urlPathProvider(_ value: ValidateE911AddressInput) -> Swift.String? {
        return "/emergency-calling/address"
    }
}

extension AssociatePhoneNumbersWithVoiceConnectorInput {

    static func write(value: AssociatePhoneNumbersWithVoiceConnectorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["E164PhoneNumbers"].writeList(value.e164PhoneNumbers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ForceAssociate"].write(value.forceAssociate)
    }
}

extension AssociatePhoneNumbersWithVoiceConnectorGroupInput {

    static func write(value: AssociatePhoneNumbersWithVoiceConnectorGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["E164PhoneNumbers"].writeList(value.e164PhoneNumbers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ForceAssociate"].write(value.forceAssociate)
    }
}

extension BatchDeletePhoneNumberInput {

    static func write(value: BatchDeletePhoneNumberInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PhoneNumberIds"].writeList(value.phoneNumberIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchUpdatePhoneNumberInput {

    static func write(value: BatchUpdatePhoneNumberInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UpdatePhoneNumberRequestItems"].writeList(value.updatePhoneNumberRequestItems, memberWritingClosure: ChimeSDKVoiceClientTypes.UpdatePhoneNumberRequestItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreatePhoneNumberOrderInput {

    static func write(value: CreatePhoneNumberOrderInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["E164PhoneNumbers"].writeList(value.e164PhoneNumbers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["ProductType"].write(value.productType)
    }
}

extension CreateProxySessionInput {

    static func write(value: CreateProxySessionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Capabilities"].writeList(value.capabilities, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ChimeSDKVoiceClientTypes.Capability>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExpiryMinutes"].write(value.expiryMinutes)
        try writer["GeoMatchLevel"].write(value.geoMatchLevel)
        try writer["GeoMatchParams"].write(value.geoMatchParams, with: ChimeSDKVoiceClientTypes.GeoMatchParams.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["NumberSelectionBehavior"].write(value.numberSelectionBehavior)
        try writer["ParticipantPhoneNumbers"].writeList(value.participantPhoneNumbers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateSipMediaApplicationInput {

    static func write(value: CreateSipMediaApplicationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AwsRegion"].write(value.awsRegion)
        try writer["Endpoints"].writeList(value.endpoints, memberWritingClosure: ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ChimeSDKVoiceClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateSipMediaApplicationCallInput {

    static func write(value: CreateSipMediaApplicationCallInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArgumentsMap"].writeMap(value.argumentsMap, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["FromPhoneNumber"].write(value.fromPhoneNumber)
        try writer["SipHeaders"].writeMap(value.sipHeaders, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ToPhoneNumber"].write(value.toPhoneNumber)
    }
}

extension CreateSipRuleInput {

    static func write(value: CreateSipRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Disabled"].write(value.disabled)
        try writer["Name"].write(value.name)
        try writer["TargetApplications"].writeList(value.targetApplications, memberWritingClosure: ChimeSDKVoiceClientTypes.SipRuleTargetApplication.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TriggerType"].write(value.triggerType)
        try writer["TriggerValue"].write(value.triggerValue)
    }
}

extension CreateVoiceConnectorInput {

    static func write(value: CreateVoiceConnectorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AwsRegion"].write(value.awsRegion)
        try writer["Name"].write(value.name)
        try writer["RequireEncryption"].write(value.requireEncryption)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ChimeSDKVoiceClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateVoiceConnectorGroupInput {

    static func write(value: CreateVoiceConnectorGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["VoiceConnectorItems"].writeList(value.voiceConnectorItems, memberWritingClosure: ChimeSDKVoiceClientTypes.VoiceConnectorItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateVoiceProfileInput {

    static func write(value: CreateVoiceProfileInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SpeakerSearchTaskId"].write(value.speakerSearchTaskId)
    }
}

extension CreateVoiceProfileDomainInput {

    static func write(value: CreateVoiceProfileDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["ServerSideEncryptionConfiguration"].write(value.serverSideEncryptionConfiguration, with: ChimeSDKVoiceClientTypes.ServerSideEncryptionConfiguration.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ChimeSDKVoiceClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteVoiceConnectorTerminationCredentialsInput {

    static func write(value: DeleteVoiceConnectorTerminationCredentialsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Usernames"].writeList(value.usernames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DisassociatePhoneNumbersFromVoiceConnectorInput {

    static func write(value: DisassociatePhoneNumbersFromVoiceConnectorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["E164PhoneNumbers"].writeList(value.e164PhoneNumbers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DisassociatePhoneNumbersFromVoiceConnectorGroupInput {

    static func write(value: DisassociatePhoneNumbersFromVoiceConnectorGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["E164PhoneNumbers"].writeList(value.e164PhoneNumbers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutSipMediaApplicationAlexaSkillConfigurationInput {

    static func write(value: PutSipMediaApplicationAlexaSkillConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SipMediaApplicationAlexaSkillConfiguration"].write(value.sipMediaApplicationAlexaSkillConfiguration, with: ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration.write(value:to:))
    }
}

extension PutSipMediaApplicationLoggingConfigurationInput {

    static func write(value: PutSipMediaApplicationLoggingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SipMediaApplicationLoggingConfiguration"].write(value.sipMediaApplicationLoggingConfiguration, with: ChimeSDKVoiceClientTypes.SipMediaApplicationLoggingConfiguration.write(value:to:))
    }
}

extension PutVoiceConnectorEmergencyCallingConfigurationInput {

    static func write(value: PutVoiceConnectorEmergencyCallingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EmergencyCallingConfiguration"].write(value.emergencyCallingConfiguration, with: ChimeSDKVoiceClientTypes.EmergencyCallingConfiguration.write(value:to:))
    }
}

extension PutVoiceConnectorLoggingConfigurationInput {

    static func write(value: PutVoiceConnectorLoggingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LoggingConfiguration"].write(value.loggingConfiguration, with: ChimeSDKVoiceClientTypes.LoggingConfiguration.write(value:to:))
    }
}

extension PutVoiceConnectorOriginationInput {

    static func write(value: PutVoiceConnectorOriginationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Origination"].write(value.origination, with: ChimeSDKVoiceClientTypes.Origination.write(value:to:))
    }
}

extension PutVoiceConnectorProxyInput {

    static func write(value: PutVoiceConnectorProxyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultSessionExpiryMinutes"].write(value.defaultSessionExpiryMinutes)
        try writer["Disabled"].write(value.disabled)
        try writer["FallBackPhoneNumber"].write(value.fallBackPhoneNumber)
        try writer["PhoneNumberPoolCountries"].writeList(value.phoneNumberPoolCountries, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutVoiceConnectorStreamingConfigurationInput {

    static func write(value: PutVoiceConnectorStreamingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StreamingConfiguration"].write(value.streamingConfiguration, with: ChimeSDKVoiceClientTypes.StreamingConfiguration.write(value:to:))
    }
}

extension PutVoiceConnectorTerminationInput {

    static func write(value: PutVoiceConnectorTerminationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Termination"].write(value.termination, with: ChimeSDKVoiceClientTypes.Termination.write(value:to:))
    }
}

extension PutVoiceConnectorTerminationCredentialsInput {

    static func write(value: PutVoiceConnectorTerminationCredentialsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Credentials"].writeList(value.credentials, memberWritingClosure: ChimeSDKVoiceClientTypes.Credential.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StartSpeakerSearchTaskInput {

    static func write(value: StartSpeakerSearchTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CallLeg"].write(value.callLeg)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["TransactionId"].write(value.transactionId)
        try writer["VoiceProfileDomainId"].write(value.voiceProfileDomainId)
    }
}

extension StartVoiceToneAnalysisTaskInput {

    static func write(value: StartVoiceToneAnalysisTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["LanguageCode"].write(value.languageCode)
        try writer["TransactionId"].write(value.transactionId)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ChimeSDKVoiceClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateGlobalSettingsInput {

    static func write(value: UpdateGlobalSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["VoiceConnector"].write(value.voiceConnector, with: ChimeSDKVoiceClientTypes.VoiceConnectorSettings.write(value:to:))
    }
}

extension UpdatePhoneNumberInput {

    static func write(value: UpdatePhoneNumberInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CallingName"].write(value.callingName)
        try writer["Name"].write(value.name)
        try writer["ProductType"].write(value.productType)
    }
}

extension UpdatePhoneNumberSettingsInput {

    static func write(value: UpdatePhoneNumberSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CallingName"].write(value.callingName)
    }
}

extension UpdateProxySessionInput {

    static func write(value: UpdateProxySessionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Capabilities"].writeList(value.capabilities, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ChimeSDKVoiceClientTypes.Capability>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExpiryMinutes"].write(value.expiryMinutes)
    }
}

extension UpdateSipMediaApplicationInput {

    static func write(value: UpdateSipMediaApplicationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Endpoints"].writeList(value.endpoints, memberWritingClosure: ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
    }
}

extension UpdateSipMediaApplicationCallInput {

    static func write(value: UpdateSipMediaApplicationCallInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arguments"].writeMap(value.arguments, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateSipRuleInput {

    static func write(value: UpdateSipRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Disabled"].write(value.disabled)
        try writer["Name"].write(value.name)
        try writer["TargetApplications"].writeList(value.targetApplications, memberWritingClosure: ChimeSDKVoiceClientTypes.SipRuleTargetApplication.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateVoiceConnectorInput {

    static func write(value: UpdateVoiceConnectorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["RequireEncryption"].write(value.requireEncryption)
    }
}

extension UpdateVoiceConnectorGroupInput {

    static func write(value: UpdateVoiceConnectorGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["VoiceConnectorItems"].writeList(value.voiceConnectorItems, memberWritingClosure: ChimeSDKVoiceClientTypes.VoiceConnectorItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateVoiceProfileInput {

    static func write(value: UpdateVoiceProfileInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SpeakerSearchTaskId"].write(value.speakerSearchTaskId)
    }
}

extension UpdateVoiceProfileDomainInput {

    static func write(value: UpdateVoiceProfileDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
    }
}

extension ValidateE911AddressInput {

    static func write(value: ValidateE911AddressInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AwsAccountId"].write(value.awsAccountId)
        try writer["City"].write(value.city)
        try writer["Country"].write(value.country)
        try writer["PostalCode"].write(value.postalCode)
        try writer["State"].write(value.state)
        try writer["StreetInfo"].write(value.streetInfo)
        try writer["StreetNumber"].write(value.streetNumber)
    }
}

extension AssociatePhoneNumbersWithVoiceConnectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociatePhoneNumbersWithVoiceConnectorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociatePhoneNumbersWithVoiceConnectorOutput()
        value.phoneNumberErrors = try reader["PhoneNumberErrors"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.PhoneNumberError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AssociatePhoneNumbersWithVoiceConnectorGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociatePhoneNumbersWithVoiceConnectorGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociatePhoneNumbersWithVoiceConnectorGroupOutput()
        value.phoneNumberErrors = try reader["PhoneNumberErrors"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.PhoneNumberError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchDeletePhoneNumberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDeletePhoneNumberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDeletePhoneNumberOutput()
        value.phoneNumberErrors = try reader["PhoneNumberErrors"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.PhoneNumberError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchUpdatePhoneNumberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchUpdatePhoneNumberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchUpdatePhoneNumberOutput()
        value.phoneNumberErrors = try reader["PhoneNumberErrors"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.PhoneNumberError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreatePhoneNumberOrderOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePhoneNumberOrderOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePhoneNumberOrderOutput()
        value.phoneNumberOrder = try reader["PhoneNumberOrder"].readIfPresent(with: ChimeSDKVoiceClientTypes.PhoneNumberOrder.read(from:))
        return value
    }
}

extension CreateProxySessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateProxySessionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateProxySessionOutput()
        value.proxySession = try reader["ProxySession"].readIfPresent(with: ChimeSDKVoiceClientTypes.ProxySession.read(from:))
        return value
    }
}

extension CreateSipMediaApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSipMediaApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSipMediaApplicationOutput()
        value.sipMediaApplication = try reader["SipMediaApplication"].readIfPresent(with: ChimeSDKVoiceClientTypes.SipMediaApplication.read(from:))
        return value
    }
}

extension CreateSipMediaApplicationCallOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSipMediaApplicationCallOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSipMediaApplicationCallOutput()
        value.sipMediaApplicationCall = try reader["SipMediaApplicationCall"].readIfPresent(with: ChimeSDKVoiceClientTypes.SipMediaApplicationCall.read(from:))
        return value
    }
}

extension CreateSipRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSipRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSipRuleOutput()
        value.sipRule = try reader["SipRule"].readIfPresent(with: ChimeSDKVoiceClientTypes.SipRule.read(from:))
        return value
    }
}

extension CreateVoiceConnectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateVoiceConnectorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateVoiceConnectorOutput()
        value.voiceConnector = try reader["VoiceConnector"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceConnector.read(from:))
        return value
    }
}

extension CreateVoiceConnectorGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateVoiceConnectorGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateVoiceConnectorGroupOutput()
        value.voiceConnectorGroup = try reader["VoiceConnectorGroup"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceConnectorGroup.read(from:))
        return value
    }
}

extension CreateVoiceProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateVoiceProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateVoiceProfileOutput()
        value.voiceProfile = try reader["VoiceProfile"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceProfile.read(from:))
        return value
    }
}

extension CreateVoiceProfileDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateVoiceProfileDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateVoiceProfileDomainOutput()
        value.voiceProfileDomain = try reader["VoiceProfileDomain"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceProfileDomain.read(from:))
        return value
    }
}

extension DeletePhoneNumberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePhoneNumberOutput {
        return DeletePhoneNumberOutput()
    }
}

extension DeleteProxySessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteProxySessionOutput {
        return DeleteProxySessionOutput()
    }
}

extension DeleteSipMediaApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSipMediaApplicationOutput {
        return DeleteSipMediaApplicationOutput()
    }
}

extension DeleteSipRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSipRuleOutput {
        return DeleteSipRuleOutput()
    }
}

extension DeleteVoiceConnectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVoiceConnectorOutput {
        return DeleteVoiceConnectorOutput()
    }
}

extension DeleteVoiceConnectorEmergencyCallingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVoiceConnectorEmergencyCallingConfigurationOutput {
        return DeleteVoiceConnectorEmergencyCallingConfigurationOutput()
    }
}

extension DeleteVoiceConnectorGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVoiceConnectorGroupOutput {
        return DeleteVoiceConnectorGroupOutput()
    }
}

extension DeleteVoiceConnectorOriginationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVoiceConnectorOriginationOutput {
        return DeleteVoiceConnectorOriginationOutput()
    }
}

extension DeleteVoiceConnectorProxyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVoiceConnectorProxyOutput {
        return DeleteVoiceConnectorProxyOutput()
    }
}

extension DeleteVoiceConnectorStreamingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVoiceConnectorStreamingConfigurationOutput {
        return DeleteVoiceConnectorStreamingConfigurationOutput()
    }
}

extension DeleteVoiceConnectorTerminationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVoiceConnectorTerminationOutput {
        return DeleteVoiceConnectorTerminationOutput()
    }
}

extension DeleteVoiceConnectorTerminationCredentialsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVoiceConnectorTerminationCredentialsOutput {
        return DeleteVoiceConnectorTerminationCredentialsOutput()
    }
}

extension DeleteVoiceProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVoiceProfileOutput {
        return DeleteVoiceProfileOutput()
    }
}

extension DeleteVoiceProfileDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVoiceProfileDomainOutput {
        return DeleteVoiceProfileDomainOutput()
    }
}

extension DisassociatePhoneNumbersFromVoiceConnectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociatePhoneNumbersFromVoiceConnectorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociatePhoneNumbersFromVoiceConnectorOutput()
        value.phoneNumberErrors = try reader["PhoneNumberErrors"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.PhoneNumberError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociatePhoneNumbersFromVoiceConnectorGroupOutput()
        value.phoneNumberErrors = try reader["PhoneNumberErrors"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.PhoneNumberError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetGlobalSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetGlobalSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetGlobalSettingsOutput()
        value.voiceConnector = try reader["VoiceConnector"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceConnectorSettings.read(from:))
        return value
    }
}

extension GetPhoneNumberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPhoneNumberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPhoneNumberOutput()
        value.phoneNumber = try reader["PhoneNumber"].readIfPresent(with: ChimeSDKVoiceClientTypes.PhoneNumber.read(from:))
        return value
    }
}

extension GetPhoneNumberOrderOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPhoneNumberOrderOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPhoneNumberOrderOutput()
        value.phoneNumberOrder = try reader["PhoneNumberOrder"].readIfPresent(with: ChimeSDKVoiceClientTypes.PhoneNumberOrder.read(from:))
        return value
    }
}

extension GetPhoneNumberSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPhoneNumberSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPhoneNumberSettingsOutput()
        value.callingName = try reader["CallingName"].readIfPresent()
        value.callingNameUpdatedTimestamp = try reader["CallingNameUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension GetProxySessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetProxySessionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetProxySessionOutput()
        value.proxySession = try reader["ProxySession"].readIfPresent(with: ChimeSDKVoiceClientTypes.ProxySession.read(from:))
        return value
    }
}

extension GetSipMediaApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSipMediaApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSipMediaApplicationOutput()
        value.sipMediaApplication = try reader["SipMediaApplication"].readIfPresent(with: ChimeSDKVoiceClientTypes.SipMediaApplication.read(from:))
        return value
    }
}

extension GetSipMediaApplicationAlexaSkillConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSipMediaApplicationAlexaSkillConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSipMediaApplicationAlexaSkillConfigurationOutput()
        value.sipMediaApplicationAlexaSkillConfiguration = try reader["SipMediaApplicationAlexaSkillConfiguration"].readIfPresent(with: ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration.read(from:))
        return value
    }
}

extension GetSipMediaApplicationLoggingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSipMediaApplicationLoggingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSipMediaApplicationLoggingConfigurationOutput()
        value.sipMediaApplicationLoggingConfiguration = try reader["SipMediaApplicationLoggingConfiguration"].readIfPresent(with: ChimeSDKVoiceClientTypes.SipMediaApplicationLoggingConfiguration.read(from:))
        return value
    }
}

extension GetSipRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSipRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSipRuleOutput()
        value.sipRule = try reader["SipRule"].readIfPresent(with: ChimeSDKVoiceClientTypes.SipRule.read(from:))
        return value
    }
}

extension GetSpeakerSearchTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSpeakerSearchTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSpeakerSearchTaskOutput()
        value.speakerSearchTask = try reader["SpeakerSearchTask"].readIfPresent(with: ChimeSDKVoiceClientTypes.SpeakerSearchTask.read(from:))
        return value
    }
}

extension GetVoiceConnectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVoiceConnectorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVoiceConnectorOutput()
        value.voiceConnector = try reader["VoiceConnector"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceConnector.read(from:))
        return value
    }
}

extension GetVoiceConnectorEmergencyCallingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVoiceConnectorEmergencyCallingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVoiceConnectorEmergencyCallingConfigurationOutput()
        value.emergencyCallingConfiguration = try reader["EmergencyCallingConfiguration"].readIfPresent(with: ChimeSDKVoiceClientTypes.EmergencyCallingConfiguration.read(from:))
        return value
    }
}

extension GetVoiceConnectorGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVoiceConnectorGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVoiceConnectorGroupOutput()
        value.voiceConnectorGroup = try reader["VoiceConnectorGroup"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceConnectorGroup.read(from:))
        return value
    }
}

extension GetVoiceConnectorLoggingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVoiceConnectorLoggingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVoiceConnectorLoggingConfigurationOutput()
        value.loggingConfiguration = try reader["LoggingConfiguration"].readIfPresent(with: ChimeSDKVoiceClientTypes.LoggingConfiguration.read(from:))
        return value
    }
}

extension GetVoiceConnectorOriginationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVoiceConnectorOriginationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVoiceConnectorOriginationOutput()
        value.origination = try reader["Origination"].readIfPresent(with: ChimeSDKVoiceClientTypes.Origination.read(from:))
        return value
    }
}

extension GetVoiceConnectorProxyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVoiceConnectorProxyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVoiceConnectorProxyOutput()
        value.proxy = try reader["Proxy"].readIfPresent(with: ChimeSDKVoiceClientTypes.Proxy.read(from:))
        return value
    }
}

extension GetVoiceConnectorStreamingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVoiceConnectorStreamingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVoiceConnectorStreamingConfigurationOutput()
        value.streamingConfiguration = try reader["StreamingConfiguration"].readIfPresent(with: ChimeSDKVoiceClientTypes.StreamingConfiguration.read(from:))
        return value
    }
}

extension GetVoiceConnectorTerminationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVoiceConnectorTerminationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVoiceConnectorTerminationOutput()
        value.termination = try reader["Termination"].readIfPresent(with: ChimeSDKVoiceClientTypes.Termination.read(from:))
        return value
    }
}

extension GetVoiceConnectorTerminationHealthOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVoiceConnectorTerminationHealthOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVoiceConnectorTerminationHealthOutput()
        value.terminationHealth = try reader["TerminationHealth"].readIfPresent(with: ChimeSDKVoiceClientTypes.TerminationHealth.read(from:))
        return value
    }
}

extension GetVoiceProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVoiceProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVoiceProfileOutput()
        value.voiceProfile = try reader["VoiceProfile"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceProfile.read(from:))
        return value
    }
}

extension GetVoiceProfileDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVoiceProfileDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVoiceProfileDomainOutput()
        value.voiceProfileDomain = try reader["VoiceProfileDomain"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceProfileDomain.read(from:))
        return value
    }
}

extension GetVoiceToneAnalysisTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVoiceToneAnalysisTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVoiceToneAnalysisTaskOutput()
        value.voiceToneAnalysisTask = try reader["VoiceToneAnalysisTask"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceToneAnalysisTask.read(from:))
        return value
    }
}

extension ListAvailableVoiceConnectorRegionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAvailableVoiceConnectorRegionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAvailableVoiceConnectorRegionsOutput()
        value.voiceConnectorRegions = try reader["VoiceConnectorRegions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ChimeSDKVoiceClientTypes.VoiceConnectorAwsRegion>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPhoneNumberOrdersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPhoneNumberOrdersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPhoneNumberOrdersOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.phoneNumberOrders = try reader["PhoneNumberOrders"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.PhoneNumberOrder.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPhoneNumbersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPhoneNumbersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPhoneNumbersOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.phoneNumbers = try reader["PhoneNumbers"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.PhoneNumber.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListProxySessionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListProxySessionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListProxySessionsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.proxySessions = try reader["ProxySessions"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.ProxySession.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSipMediaApplicationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSipMediaApplicationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSipMediaApplicationsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.sipMediaApplications = try reader["SipMediaApplications"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.SipMediaApplication.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSipRulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSipRulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSipRulesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.sipRules = try reader["SipRules"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.SipRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSupportedPhoneNumberCountriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSupportedPhoneNumberCountriesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSupportedPhoneNumberCountriesOutput()
        value.phoneNumberCountries = try reader["PhoneNumberCountries"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.PhoneNumberCountry.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListVoiceConnectorGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListVoiceConnectorGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListVoiceConnectorGroupsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.voiceConnectorGroups = try reader["VoiceConnectorGroups"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.VoiceConnectorGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListVoiceConnectorsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListVoiceConnectorsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListVoiceConnectorsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.voiceConnectors = try reader["VoiceConnectors"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.VoiceConnector.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListVoiceConnectorTerminationCredentialsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListVoiceConnectorTerminationCredentialsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListVoiceConnectorTerminationCredentialsOutput()
        value.usernames = try reader["Usernames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListVoiceProfileDomainsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListVoiceProfileDomainsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListVoiceProfileDomainsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.voiceProfileDomains = try reader["VoiceProfileDomains"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.VoiceProfileDomainSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListVoiceProfilesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListVoiceProfilesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListVoiceProfilesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.voiceProfiles = try reader["VoiceProfiles"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.VoiceProfileSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutSipMediaApplicationAlexaSkillConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutSipMediaApplicationAlexaSkillConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutSipMediaApplicationAlexaSkillConfigurationOutput()
        value.sipMediaApplicationAlexaSkillConfiguration = try reader["SipMediaApplicationAlexaSkillConfiguration"].readIfPresent(with: ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration.read(from:))
        return value
    }
}

extension PutSipMediaApplicationLoggingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutSipMediaApplicationLoggingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutSipMediaApplicationLoggingConfigurationOutput()
        value.sipMediaApplicationLoggingConfiguration = try reader["SipMediaApplicationLoggingConfiguration"].readIfPresent(with: ChimeSDKVoiceClientTypes.SipMediaApplicationLoggingConfiguration.read(from:))
        return value
    }
}

extension PutVoiceConnectorEmergencyCallingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutVoiceConnectorEmergencyCallingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutVoiceConnectorEmergencyCallingConfigurationOutput()
        value.emergencyCallingConfiguration = try reader["EmergencyCallingConfiguration"].readIfPresent(with: ChimeSDKVoiceClientTypes.EmergencyCallingConfiguration.read(from:))
        return value
    }
}

extension PutVoiceConnectorLoggingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutVoiceConnectorLoggingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutVoiceConnectorLoggingConfigurationOutput()
        value.loggingConfiguration = try reader["LoggingConfiguration"].readIfPresent(with: ChimeSDKVoiceClientTypes.LoggingConfiguration.read(from:))
        return value
    }
}

extension PutVoiceConnectorOriginationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutVoiceConnectorOriginationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutVoiceConnectorOriginationOutput()
        value.origination = try reader["Origination"].readIfPresent(with: ChimeSDKVoiceClientTypes.Origination.read(from:))
        return value
    }
}

extension PutVoiceConnectorProxyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutVoiceConnectorProxyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutVoiceConnectorProxyOutput()
        value.proxy = try reader["Proxy"].readIfPresent(with: ChimeSDKVoiceClientTypes.Proxy.read(from:))
        return value
    }
}

extension PutVoiceConnectorStreamingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutVoiceConnectorStreamingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutVoiceConnectorStreamingConfigurationOutput()
        value.streamingConfiguration = try reader["StreamingConfiguration"].readIfPresent(with: ChimeSDKVoiceClientTypes.StreamingConfiguration.read(from:))
        return value
    }
}

extension PutVoiceConnectorTerminationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutVoiceConnectorTerminationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutVoiceConnectorTerminationOutput()
        value.termination = try reader["Termination"].readIfPresent(with: ChimeSDKVoiceClientTypes.Termination.read(from:))
        return value
    }
}

extension PutVoiceConnectorTerminationCredentialsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutVoiceConnectorTerminationCredentialsOutput {
        return PutVoiceConnectorTerminationCredentialsOutput()
    }
}

extension RestorePhoneNumberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestorePhoneNumberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RestorePhoneNumberOutput()
        value.phoneNumber = try reader["PhoneNumber"].readIfPresent(with: ChimeSDKVoiceClientTypes.PhoneNumber.read(from:))
        return value
    }
}

extension SearchAvailablePhoneNumbersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchAvailablePhoneNumbersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchAvailablePhoneNumbersOutput()
        value.e164PhoneNumbers = try reader["E164PhoneNumbers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension StartSpeakerSearchTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartSpeakerSearchTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartSpeakerSearchTaskOutput()
        value.speakerSearchTask = try reader["SpeakerSearchTask"].readIfPresent(with: ChimeSDKVoiceClientTypes.SpeakerSearchTask.read(from:))
        return value
    }
}

extension StartVoiceToneAnalysisTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartVoiceToneAnalysisTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartVoiceToneAnalysisTaskOutput()
        value.voiceToneAnalysisTask = try reader["VoiceToneAnalysisTask"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceToneAnalysisTask.read(from:))
        return value
    }
}

extension StopSpeakerSearchTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopSpeakerSearchTaskOutput {
        return StopSpeakerSearchTaskOutput()
    }
}

extension StopVoiceToneAnalysisTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopVoiceToneAnalysisTaskOutput {
        return StopVoiceToneAnalysisTaskOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateGlobalSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateGlobalSettingsOutput {
        return UpdateGlobalSettingsOutput()
    }
}

extension UpdatePhoneNumberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePhoneNumberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePhoneNumberOutput()
        value.phoneNumber = try reader["PhoneNumber"].readIfPresent(with: ChimeSDKVoiceClientTypes.PhoneNumber.read(from:))
        return value
    }
}

extension UpdatePhoneNumberSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePhoneNumberSettingsOutput {
        return UpdatePhoneNumberSettingsOutput()
    }
}

extension UpdateProxySessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateProxySessionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateProxySessionOutput()
        value.proxySession = try reader["ProxySession"].readIfPresent(with: ChimeSDKVoiceClientTypes.ProxySession.read(from:))
        return value
    }
}

extension UpdateSipMediaApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSipMediaApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSipMediaApplicationOutput()
        value.sipMediaApplication = try reader["SipMediaApplication"].readIfPresent(with: ChimeSDKVoiceClientTypes.SipMediaApplication.read(from:))
        return value
    }
}

extension UpdateSipMediaApplicationCallOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSipMediaApplicationCallOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSipMediaApplicationCallOutput()
        value.sipMediaApplicationCall = try reader["SipMediaApplicationCall"].readIfPresent(with: ChimeSDKVoiceClientTypes.SipMediaApplicationCall.read(from:))
        return value
    }
}

extension UpdateSipRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSipRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSipRuleOutput()
        value.sipRule = try reader["SipRule"].readIfPresent(with: ChimeSDKVoiceClientTypes.SipRule.read(from:))
        return value
    }
}

extension UpdateVoiceConnectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateVoiceConnectorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateVoiceConnectorOutput()
        value.voiceConnector = try reader["VoiceConnector"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceConnector.read(from:))
        return value
    }
}

extension UpdateVoiceConnectorGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateVoiceConnectorGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateVoiceConnectorGroupOutput()
        value.voiceConnectorGroup = try reader["VoiceConnectorGroup"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceConnectorGroup.read(from:))
        return value
    }
}

extension UpdateVoiceProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateVoiceProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateVoiceProfileOutput()
        value.voiceProfile = try reader["VoiceProfile"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceProfile.read(from:))
        return value
    }
}

extension UpdateVoiceProfileDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateVoiceProfileDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateVoiceProfileDomainOutput()
        value.voiceProfileDomain = try reader["VoiceProfileDomain"].readIfPresent(with: ChimeSDKVoiceClientTypes.VoiceProfileDomain.read(from:))
        return value
    }
}

extension ValidateE911AddressOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ValidateE911AddressOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ValidateE911AddressOutput()
        value.address = try reader["Address"].readIfPresent(with: ChimeSDKVoiceClientTypes.Address.read(from:))
        value.addressExternalId = try reader["AddressExternalId"].readIfPresent()
        value.candidateAddressList = try reader["CandidateAddressList"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.CandidateAddress.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.validationResult = try reader["ValidationResult"].readIfPresent() ?? 0
        return value
    }
}

enum AssociatePhoneNumbersWithVoiceConnectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociatePhoneNumbersWithVoiceConnectorGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDeletePhoneNumberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchUpdatePhoneNumberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePhoneNumberOrderOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateProxySessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSipMediaApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSipMediaApplicationCallOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSipRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateVoiceConnectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateVoiceConnectorGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateVoiceProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GoneException": return try GoneException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateVoiceProfileDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePhoneNumberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteProxySessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSipMediaApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSipRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVoiceConnectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVoiceConnectorEmergencyCallingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVoiceConnectorGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVoiceConnectorOriginationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVoiceConnectorProxyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVoiceConnectorStreamingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVoiceConnectorTerminationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVoiceConnectorTerminationCredentialsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVoiceProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVoiceProfileDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociatePhoneNumbersFromVoiceConnectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociatePhoneNumbersFromVoiceConnectorGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetGlobalSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPhoneNumberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPhoneNumberOrderOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPhoneNumberSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetProxySessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSipMediaApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSipMediaApplicationAlexaSkillConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSipMediaApplicationLoggingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSipRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSpeakerSearchTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVoiceConnectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVoiceConnectorEmergencyCallingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVoiceConnectorGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVoiceConnectorLoggingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVoiceConnectorOriginationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVoiceConnectorProxyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVoiceConnectorStreamingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVoiceConnectorTerminationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVoiceConnectorTerminationHealthOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVoiceProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVoiceProfileDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVoiceToneAnalysisTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAvailableVoiceConnectorRegionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPhoneNumberOrdersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPhoneNumbersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListProxySessionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSipMediaApplicationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSipRulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSupportedPhoneNumberCountriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListVoiceConnectorGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListVoiceConnectorsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListVoiceConnectorTerminationCredentialsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListVoiceProfileDomainsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListVoiceProfilesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutSipMediaApplicationAlexaSkillConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutSipMediaApplicationLoggingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutVoiceConnectorEmergencyCallingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutVoiceConnectorLoggingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutVoiceConnectorOriginationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutVoiceConnectorProxyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutVoiceConnectorStreamingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutVoiceConnectorTerminationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutVoiceConnectorTerminationCredentialsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestorePhoneNumberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchAvailablePhoneNumbersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartSpeakerSearchTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GoneException": return try GoneException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartVoiceToneAnalysisTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GoneException": return try GoneException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopSpeakerSearchTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopVoiceToneAnalysisTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateGlobalSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePhoneNumberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePhoneNumberSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateProxySessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSipMediaApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSipMediaApplicationCallOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSipRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateVoiceConnectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateVoiceConnectorGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateVoiceProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "GoneException": return try GoneException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateVoiceProfileDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ValidateE911AddressOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ServiceFailureException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceFailureException {
        let reader = baseError.errorBodyReader
        var value = ServiceFailureException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnauthorizedClientException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnauthorizedClientException {
        let reader = baseError.errorBodyReader
        var value = UnauthorizedClientException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottledClientException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottledClientException {
        let reader = baseError.errorBodyReader
        var value = ThrottledClientException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ForbiddenException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ForbiddenException {
        let reader = baseError.errorBodyReader
        var value = ForbiddenException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = ResourceLimitExceededException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GoneException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> GoneException {
        let reader = baseError.errorBodyReader
        var value = GoneException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnprocessableEntityException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnprocessableEntityException {
        let reader = baseError.errorBodyReader
        var value = UnprocessableEntityException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ChimeSDKVoiceClientTypes.PhoneNumberError {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.PhoneNumberError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.PhoneNumberError()
        value.phoneNumberId = try reader["PhoneNumberId"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.PhoneNumberOrder {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.PhoneNumberOrder {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.PhoneNumberOrder()
        value.phoneNumberOrderId = try reader["PhoneNumberOrderId"].readIfPresent()
        value.productType = try reader["ProductType"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.orderType = try reader["OrderType"].readIfPresent()
        value.orderedPhoneNumbers = try reader["OrderedPhoneNumbers"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.OrderedPhoneNumber.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ChimeSDKVoiceClientTypes.OrderedPhoneNumber {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.OrderedPhoneNumber {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.OrderedPhoneNumber()
        value.e164PhoneNumber = try reader["E164PhoneNumber"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.ProxySession {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.ProxySession {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.ProxySession()
        value.voiceConnectorId = try reader["VoiceConnectorId"].readIfPresent()
        value.proxySessionId = try reader["ProxySessionId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.expiryMinutes = try reader["ExpiryMinutes"].readIfPresent()
        value.capabilities = try reader["Capabilities"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ChimeSDKVoiceClientTypes.Capability>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.endedTimestamp = try reader["EndedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.participants = try reader["Participants"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.Participant.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.numberSelectionBehavior = try reader["NumberSelectionBehavior"].readIfPresent()
        value.geoMatchLevel = try reader["GeoMatchLevel"].readIfPresent()
        value.geoMatchParams = try reader["GeoMatchParams"].readIfPresent(with: ChimeSDKVoiceClientTypes.GeoMatchParams.read(from:))
        return value
    }
}

extension ChimeSDKVoiceClientTypes.GeoMatchParams {

    static func write(value: ChimeSDKVoiceClientTypes.GeoMatchParams?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AreaCode"].write(value.areaCode)
        try writer["Country"].write(value.country)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.GeoMatchParams {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.GeoMatchParams()
        value.country = try reader["Country"].readIfPresent() ?? ""
        value.areaCode = try reader["AreaCode"].readIfPresent() ?? ""
        return value
    }
}

extension ChimeSDKVoiceClientTypes.Participant {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.Participant {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.Participant()
        value.phoneNumber = try reader["PhoneNumber"].readIfPresent()
        value.proxyPhoneNumber = try reader["ProxyPhoneNumber"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.SipMediaApplication {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.SipMediaApplication {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.SipMediaApplication()
        value.sipMediaApplicationId = try reader["SipMediaApplicationId"].readIfPresent()
        value.awsRegion = try reader["AwsRegion"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.endpoints = try reader["Endpoints"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.sipMediaApplicationArn = try reader["SipMediaApplicationArn"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint {

    static func write(value: ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LambdaArn"].write(value.lambdaArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.SipMediaApplicationEndpoint()
        value.lambdaArn = try reader["LambdaArn"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.SipMediaApplicationCall {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.SipMediaApplicationCall {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.SipMediaApplicationCall()
        value.transactionId = try reader["TransactionId"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.SipRule {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.SipRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.SipRule()
        value.sipRuleId = try reader["SipRuleId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.disabled = try reader["Disabled"].readIfPresent()
        value.triggerType = try reader["TriggerType"].readIfPresent()
        value.triggerValue = try reader["TriggerValue"].readIfPresent()
        value.targetApplications = try reader["TargetApplications"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.SipRuleTargetApplication.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ChimeSDKVoiceClientTypes.SipRuleTargetApplication {

    static func write(value: ChimeSDKVoiceClientTypes.SipRuleTargetApplication?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AwsRegion"].write(value.awsRegion)
        try writer["Priority"].write(value.priority)
        try writer["SipMediaApplicationId"].write(value.sipMediaApplicationId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.SipRuleTargetApplication {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.SipRuleTargetApplication()
        value.sipMediaApplicationId = try reader["SipMediaApplicationId"].readIfPresent()
        value.priority = try reader["Priority"].readIfPresent()
        value.awsRegion = try reader["AwsRegion"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.VoiceConnector {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.VoiceConnector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.VoiceConnector()
        value.voiceConnectorId = try reader["VoiceConnectorId"].readIfPresent()
        value.awsRegion = try reader["AwsRegion"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.outboundHostName = try reader["OutboundHostName"].readIfPresent()
        value.requireEncryption = try reader["RequireEncryption"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.voiceConnectorArn = try reader["VoiceConnectorArn"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.VoiceConnectorGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.VoiceConnectorGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.VoiceConnectorGroup()
        value.voiceConnectorGroupId = try reader["VoiceConnectorGroupId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.voiceConnectorItems = try reader["VoiceConnectorItems"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.VoiceConnectorItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.voiceConnectorGroupArn = try reader["VoiceConnectorGroupArn"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.VoiceConnectorItem {

    static func write(value: ChimeSDKVoiceClientTypes.VoiceConnectorItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Priority"].write(value.priority)
        try writer["VoiceConnectorId"].write(value.voiceConnectorId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.VoiceConnectorItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.VoiceConnectorItem()
        value.voiceConnectorId = try reader["VoiceConnectorId"].readIfPresent() ?? ""
        value.priority = try reader["Priority"].readIfPresent() ?? 0
        return value
    }
}

extension ChimeSDKVoiceClientTypes.VoiceProfile {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.VoiceProfile {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.VoiceProfile()
        value.voiceProfileId = try reader["VoiceProfileId"].readIfPresent()
        value.voiceProfileArn = try reader["VoiceProfileArn"].readIfPresent()
        value.voiceProfileDomainId = try reader["VoiceProfileDomainId"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.expirationTimestamp = try reader["ExpirationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ChimeSDKVoiceClientTypes.VoiceProfileDomain {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.VoiceProfileDomain {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.VoiceProfileDomain()
        value.voiceProfileDomainId = try reader["VoiceProfileDomainId"].readIfPresent()
        value.voiceProfileDomainArn = try reader["VoiceProfileDomainArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.serverSideEncryptionConfiguration = try reader["ServerSideEncryptionConfiguration"].readIfPresent(with: ChimeSDKVoiceClientTypes.ServerSideEncryptionConfiguration.read(from:))
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ChimeSDKVoiceClientTypes.ServerSideEncryptionConfiguration {

    static func write(value: ChimeSDKVoiceClientTypes.ServerSideEncryptionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyArn"].write(value.kmsKeyArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.ServerSideEncryptionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.ServerSideEncryptionConfiguration()
        value.kmsKeyArn = try reader["KmsKeyArn"].readIfPresent() ?? ""
        return value
    }
}

extension ChimeSDKVoiceClientTypes.VoiceConnectorSettings {

    static func write(value: ChimeSDKVoiceClientTypes.VoiceConnectorSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CdrBucket"].write(value.cdrBucket)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.VoiceConnectorSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.VoiceConnectorSettings()
        value.cdrBucket = try reader["CdrBucket"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.PhoneNumber {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.PhoneNumber {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.PhoneNumber()
        value.phoneNumberId = try reader["PhoneNumberId"].readIfPresent()
        value.e164PhoneNumber = try reader["E164PhoneNumber"].readIfPresent()
        value.country = try reader["Country"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.productType = try reader["ProductType"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.capabilities = try reader["Capabilities"].readIfPresent(with: ChimeSDKVoiceClientTypes.PhoneNumberCapabilities.read(from:))
        value.associations = try reader["Associations"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.PhoneNumberAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.callingName = try reader["CallingName"].readIfPresent()
        value.callingNameStatus = try reader["CallingNameStatus"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.deletionTimestamp = try reader["DeletionTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.orderId = try reader["OrderId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.PhoneNumberAssociation {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.PhoneNumberAssociation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.PhoneNumberAssociation()
        value.value = try reader["Value"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.associatedTimestamp = try reader["AssociatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ChimeSDKVoiceClientTypes.PhoneNumberCapabilities {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.PhoneNumberCapabilities {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.PhoneNumberCapabilities()
        value.inboundCall = try reader["InboundCall"].readIfPresent()
        value.outboundCall = try reader["OutboundCall"].readIfPresent()
        value.inboundSMS = try reader["InboundSMS"].readIfPresent()
        value.outboundSMS = try reader["OutboundSMS"].readIfPresent()
        value.inboundMMS = try reader["InboundMMS"].readIfPresent()
        value.outboundMMS = try reader["OutboundMMS"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration {

    static func write(value: ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlexaSkillIds"].writeList(value.alexaSkillIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AlexaSkillStatus"].write(value.alexaSkillStatus)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.SipMediaApplicationAlexaSkillConfiguration()
        value.alexaSkillStatus = try reader["AlexaSkillStatus"].readIfPresent() ?? .sdkUnknown("")
        value.alexaSkillIds = try reader["AlexaSkillIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ChimeSDKVoiceClientTypes.SipMediaApplicationLoggingConfiguration {

    static func write(value: ChimeSDKVoiceClientTypes.SipMediaApplicationLoggingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableSipMediaApplicationMessageLogs"].write(value.enableSipMediaApplicationMessageLogs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.SipMediaApplicationLoggingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.SipMediaApplicationLoggingConfiguration()
        value.enableSipMediaApplicationMessageLogs = try reader["EnableSipMediaApplicationMessageLogs"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.SpeakerSearchTask {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.SpeakerSearchTask {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.SpeakerSearchTask()
        value.speakerSearchTaskId = try reader["SpeakerSearchTaskId"].readIfPresent()
        value.speakerSearchTaskStatus = try reader["SpeakerSearchTaskStatus"].readIfPresent()
        value.callDetails = try reader["CallDetails"].readIfPresent(with: ChimeSDKVoiceClientTypes.CallDetails.read(from:))
        value.speakerSearchDetails = try reader["SpeakerSearchDetails"].readIfPresent(with: ChimeSDKVoiceClientTypes.SpeakerSearchDetails.read(from:))
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.startedTimestamp = try reader["StartedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.SpeakerSearchDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.SpeakerSearchDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.SpeakerSearchDetails()
        value.results = try reader["Results"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.SpeakerSearchResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.voiceprintGenerationStatus = try reader["VoiceprintGenerationStatus"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.SpeakerSearchResult {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.SpeakerSearchResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.SpeakerSearchResult()
        value.confidenceScore = try reader["ConfidenceScore"].readIfPresent() ?? 0
        value.voiceProfileId = try reader["VoiceProfileId"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.CallDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.CallDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.CallDetails()
        value.voiceConnectorId = try reader["VoiceConnectorId"].readIfPresent()
        value.transactionId = try reader["TransactionId"].readIfPresent()
        value.isCaller = try reader["IsCaller"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.EmergencyCallingConfiguration {

    static func write(value: ChimeSDKVoiceClientTypes.EmergencyCallingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DNIS"].writeList(value.dnis, memberWritingClosure: ChimeSDKVoiceClientTypes.DNISEmergencyCallingConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.EmergencyCallingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.EmergencyCallingConfiguration()
        value.dnis = try reader["DNIS"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.DNISEmergencyCallingConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ChimeSDKVoiceClientTypes.DNISEmergencyCallingConfiguration {

    static func write(value: ChimeSDKVoiceClientTypes.DNISEmergencyCallingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CallingCountry"].write(value.callingCountry)
        try writer["EmergencyPhoneNumber"].write(value.emergencyPhoneNumber)
        try writer["TestPhoneNumber"].write(value.testPhoneNumber)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.DNISEmergencyCallingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.DNISEmergencyCallingConfiguration()
        value.emergencyPhoneNumber = try reader["EmergencyPhoneNumber"].readIfPresent() ?? ""
        value.testPhoneNumber = try reader["TestPhoneNumber"].readIfPresent()
        value.callingCountry = try reader["CallingCountry"].readIfPresent() ?? ""
        return value
    }
}

extension ChimeSDKVoiceClientTypes.LoggingConfiguration {

    static func write(value: ChimeSDKVoiceClientTypes.LoggingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableMediaMetricLogs"].write(value.enableMediaMetricLogs)
        try writer["EnableSIPLogs"].write(value.enableSIPLogs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.LoggingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.LoggingConfiguration()
        value.enableSIPLogs = try reader["EnableSIPLogs"].readIfPresent()
        value.enableMediaMetricLogs = try reader["EnableMediaMetricLogs"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.Origination {

    static func write(value: ChimeSDKVoiceClientTypes.Origination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Disabled"].write(value.disabled)
        try writer["Routes"].writeList(value.routes, memberWritingClosure: ChimeSDKVoiceClientTypes.OriginationRoute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.Origination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.Origination()
        value.routes = try reader["Routes"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.OriginationRoute.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.disabled = try reader["Disabled"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.OriginationRoute {

    static func write(value: ChimeSDKVoiceClientTypes.OriginationRoute?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Host"].write(value.host)
        try writer["Port"].write(value.port)
        try writer["Priority"].write(value.priority)
        try writer["Protocol"].write(value.`protocol`)
        try writer["Weight"].write(value.weight)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.OriginationRoute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.OriginationRoute()
        value.host = try reader["Host"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.`protocol` = try reader["Protocol"].readIfPresent()
        value.priority = try reader["Priority"].readIfPresent()
        value.weight = try reader["Weight"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.Proxy {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.Proxy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.Proxy()
        value.defaultSessionExpiryMinutes = try reader["DefaultSessionExpiryMinutes"].readIfPresent()
        value.disabled = try reader["Disabled"].readIfPresent()
        value.fallBackPhoneNumber = try reader["FallBackPhoneNumber"].readIfPresent()
        value.phoneNumberCountries = try reader["PhoneNumberCountries"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ChimeSDKVoiceClientTypes.StreamingConfiguration {

    static func write(value: ChimeSDKVoiceClientTypes.StreamingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataRetentionInHours"].write(value.dataRetentionInHours)
        try writer["Disabled"].write(value.disabled)
        try writer["MediaInsightsConfiguration"].write(value.mediaInsightsConfiguration, with: ChimeSDKVoiceClientTypes.MediaInsightsConfiguration.write(value:to:))
        try writer["StreamingNotificationTargets"].writeList(value.streamingNotificationTargets, memberWritingClosure: ChimeSDKVoiceClientTypes.StreamingNotificationTarget.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.StreamingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.StreamingConfiguration()
        value.dataRetentionInHours = try reader["DataRetentionInHours"].readIfPresent() ?? 0
        value.disabled = try reader["Disabled"].readIfPresent() ?? false
        value.streamingNotificationTargets = try reader["StreamingNotificationTargets"].readListIfPresent(memberReadingClosure: ChimeSDKVoiceClientTypes.StreamingNotificationTarget.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.mediaInsightsConfiguration = try reader["MediaInsightsConfiguration"].readIfPresent(with: ChimeSDKVoiceClientTypes.MediaInsightsConfiguration.read(from:))
        return value
    }
}

extension ChimeSDKVoiceClientTypes.MediaInsightsConfiguration {

    static func write(value: ChimeSDKVoiceClientTypes.MediaInsightsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationArn"].write(value.configurationArn)
        try writer["Disabled"].write(value.disabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.MediaInsightsConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.MediaInsightsConfiguration()
        value.disabled = try reader["Disabled"].readIfPresent()
        value.configurationArn = try reader["ConfigurationArn"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.StreamingNotificationTarget {

    static func write(value: ChimeSDKVoiceClientTypes.StreamingNotificationTarget?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotificationTarget"].write(value.notificationTarget)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.StreamingNotificationTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.StreamingNotificationTarget()
        value.notificationTarget = try reader["NotificationTarget"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.Termination {

    static func write(value: ChimeSDKVoiceClientTypes.Termination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CallingRegions"].writeList(value.callingRegions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CidrAllowedList"].writeList(value.cidrAllowedList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CpsLimit"].write(value.cpsLimit)
        try writer["DefaultPhoneNumber"].write(value.defaultPhoneNumber)
        try writer["Disabled"].write(value.disabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.Termination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.Termination()
        value.cpsLimit = try reader["CpsLimit"].readIfPresent()
        value.defaultPhoneNumber = try reader["DefaultPhoneNumber"].readIfPresent()
        value.callingRegions = try reader["CallingRegions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.cidrAllowedList = try reader["CidrAllowedList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.disabled = try reader["Disabled"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.TerminationHealth {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.TerminationHealth {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.TerminationHealth()
        value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.source = try reader["Source"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.VoiceToneAnalysisTask {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.VoiceToneAnalysisTask {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.VoiceToneAnalysisTask()
        value.voiceToneAnalysisTaskId = try reader["VoiceToneAnalysisTaskId"].readIfPresent()
        value.voiceToneAnalysisTaskStatus = try reader["VoiceToneAnalysisTaskStatus"].readIfPresent()
        value.callDetails = try reader["CallDetails"].readIfPresent(with: ChimeSDKVoiceClientTypes.CallDetails.read(from:))
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.startedTimestamp = try reader["StartedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.PhoneNumberCountry {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.PhoneNumberCountry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.PhoneNumberCountry()
        value.countryCode = try reader["CountryCode"].readIfPresent()
        value.supportedPhoneNumberTypes = try reader["SupportedPhoneNumberTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ChimeSDKVoiceClientTypes.PhoneNumberType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ChimeSDKVoiceClientTypes.Tag {

    static func write(value: ChimeSDKVoiceClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension ChimeSDKVoiceClientTypes.VoiceProfileDomainSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.VoiceProfileDomainSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.VoiceProfileDomainSummary()
        value.voiceProfileDomainId = try reader["VoiceProfileDomainId"].readIfPresent()
        value.voiceProfileDomainArn = try reader["VoiceProfileDomainArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ChimeSDKVoiceClientTypes.VoiceProfileSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.VoiceProfileSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.VoiceProfileSummary()
        value.voiceProfileId = try reader["VoiceProfileId"].readIfPresent()
        value.voiceProfileArn = try reader["VoiceProfileArn"].readIfPresent()
        value.voiceProfileDomainId = try reader["VoiceProfileDomainId"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.expirationTimestamp = try reader["ExpirationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ChimeSDKVoiceClientTypes.Address {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.Address {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.Address()
        value.streetName = try reader["streetName"].readIfPresent()
        value.streetSuffix = try reader["streetSuffix"].readIfPresent()
        value.postDirectional = try reader["postDirectional"].readIfPresent()
        value.preDirectional = try reader["preDirectional"].readIfPresent()
        value.streetNumber = try reader["streetNumber"].readIfPresent()
        value.city = try reader["city"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.postalCode = try reader["postalCode"].readIfPresent()
        value.postalCodePlus4 = try reader["postalCodePlus4"].readIfPresent()
        value.country = try reader["country"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.CandidateAddress {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKVoiceClientTypes.CandidateAddress {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKVoiceClientTypes.CandidateAddress()
        value.streetInfo = try reader["streetInfo"].readIfPresent()
        value.streetNumber = try reader["streetNumber"].readIfPresent()
        value.city = try reader["city"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.postalCode = try reader["postalCode"].readIfPresent()
        value.postalCodePlus4 = try reader["postalCodePlus4"].readIfPresent()
        value.country = try reader["country"].readIfPresent()
        return value
    }
}

extension ChimeSDKVoiceClientTypes.UpdatePhoneNumberRequestItem {

    static func write(value: ChimeSDKVoiceClientTypes.UpdatePhoneNumberRequestItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CallingName"].write(value.callingName)
        try writer["Name"].write(value.name)
        try writer["PhoneNumberId"].write(value.phoneNumberId)
        try writer["ProductType"].write(value.productType)
    }
}

extension ChimeSDKVoiceClientTypes.Credential {

    static func write(value: ChimeSDKVoiceClientTypes.Credential?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Password"].write(value.password)
        try writer["Username"].write(value.username)
    }
}

public enum ChimeSDKVoiceClientTypes {}
