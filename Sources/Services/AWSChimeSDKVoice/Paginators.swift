// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChimeSDKVoiceClient {
    /// Paginate over `[ListPhoneNumberOrdersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPhoneNumberOrdersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPhoneNumberOrdersOutput`
    public func listPhoneNumberOrdersPaginated(input: ListPhoneNumberOrdersInput) -> ClientRuntime.PaginatorSequence<ListPhoneNumberOrdersInput, ListPhoneNumberOrdersOutput> {
        return ClientRuntime.PaginatorSequence<ListPhoneNumberOrdersInput, ListPhoneNumberOrdersOutput>(input: input, inputKey: \ListPhoneNumberOrdersInput.nextToken, outputKey: \ListPhoneNumberOrdersOutput.nextToken, paginationFunction: self.listPhoneNumberOrders(input:))
    }
}

extension ListPhoneNumberOrdersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPhoneNumberOrdersInput {
        return ListPhoneNumberOrdersInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ChimeSDKVoiceClient {
    /// Paginate over `[ListPhoneNumbersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPhoneNumbersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPhoneNumbersOutput`
    public func listPhoneNumbersPaginated(input: ListPhoneNumbersInput) -> ClientRuntime.PaginatorSequence<ListPhoneNumbersInput, ListPhoneNumbersOutput> {
        return ClientRuntime.PaginatorSequence<ListPhoneNumbersInput, ListPhoneNumbersOutput>(input: input, inputKey: \ListPhoneNumbersInput.nextToken, outputKey: \ListPhoneNumbersOutput.nextToken, paginationFunction: self.listPhoneNumbers(input:))
    }
}

extension ListPhoneNumbersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPhoneNumbersInput {
        return ListPhoneNumbersInput(
            filterName: self.filterName,
            filterValue: self.filterValue,
            maxResults: self.maxResults,
            nextToken: token,
            productType: self.productType,
            status: self.status
        )}
}
extension ChimeSDKVoiceClient {
    /// Paginate over `[ListProxySessionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListProxySessionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListProxySessionsOutput`
    public func listProxySessionsPaginated(input: ListProxySessionsInput) -> ClientRuntime.PaginatorSequence<ListProxySessionsInput, ListProxySessionsOutput> {
        return ClientRuntime.PaginatorSequence<ListProxySessionsInput, ListProxySessionsOutput>(input: input, inputKey: \ListProxySessionsInput.nextToken, outputKey: \ListProxySessionsOutput.nextToken, paginationFunction: self.listProxySessions(input:))
    }
}

extension ListProxySessionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListProxySessionsInput {
        return ListProxySessionsInput(
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status,
            voiceConnectorId: self.voiceConnectorId
        )}
}
extension ChimeSDKVoiceClient {
    /// Paginate over `[ListSipMediaApplicationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSipMediaApplicationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSipMediaApplicationsOutput`
    public func listSipMediaApplicationsPaginated(input: ListSipMediaApplicationsInput) -> ClientRuntime.PaginatorSequence<ListSipMediaApplicationsInput, ListSipMediaApplicationsOutput> {
        return ClientRuntime.PaginatorSequence<ListSipMediaApplicationsInput, ListSipMediaApplicationsOutput>(input: input, inputKey: \ListSipMediaApplicationsInput.nextToken, outputKey: \ListSipMediaApplicationsOutput.nextToken, paginationFunction: self.listSipMediaApplications(input:))
    }
}

extension ListSipMediaApplicationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSipMediaApplicationsInput {
        return ListSipMediaApplicationsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListSipMediaApplicationsInput, Output == ListSipMediaApplicationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listSipMediaApplicationsPaginated`
    /// to access the nested member `[ChimeSDKVoiceClientTypes.SipMediaApplication]`
    /// - Returns: `[ChimeSDKVoiceClientTypes.SipMediaApplication]`
    public func sipMediaApplications() async throws -> [ChimeSDKVoiceClientTypes.SipMediaApplication] {
        return try await self.asyncCompactMap { item in item.sipMediaApplications }
    }
}
extension ChimeSDKVoiceClient {
    /// Paginate over `[ListSipRulesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSipRulesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSipRulesOutput`
    public func listSipRulesPaginated(input: ListSipRulesInput) -> ClientRuntime.PaginatorSequence<ListSipRulesInput, ListSipRulesOutput> {
        return ClientRuntime.PaginatorSequence<ListSipRulesInput, ListSipRulesOutput>(input: input, inputKey: \ListSipRulesInput.nextToken, outputKey: \ListSipRulesOutput.nextToken, paginationFunction: self.listSipRules(input:))
    }
}

extension ListSipRulesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSipRulesInput {
        return ListSipRulesInput(
            maxResults: self.maxResults,
            nextToken: token,
            sipMediaApplicationId: self.sipMediaApplicationId
        )}
}

extension PaginatorSequence where Input == ListSipRulesInput, Output == ListSipRulesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listSipRulesPaginated`
    /// to access the nested member `[ChimeSDKVoiceClientTypes.SipRule]`
    /// - Returns: `[ChimeSDKVoiceClientTypes.SipRule]`
    public func sipRules() async throws -> [ChimeSDKVoiceClientTypes.SipRule] {
        return try await self.asyncCompactMap { item in item.sipRules }
    }
}
extension ChimeSDKVoiceClient {
    /// Paginate over `[ListVoiceConnectorGroupsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListVoiceConnectorGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListVoiceConnectorGroupsOutput`
    public func listVoiceConnectorGroupsPaginated(input: ListVoiceConnectorGroupsInput) -> ClientRuntime.PaginatorSequence<ListVoiceConnectorGroupsInput, ListVoiceConnectorGroupsOutput> {
        return ClientRuntime.PaginatorSequence<ListVoiceConnectorGroupsInput, ListVoiceConnectorGroupsOutput>(input: input, inputKey: \ListVoiceConnectorGroupsInput.nextToken, outputKey: \ListVoiceConnectorGroupsOutput.nextToken, paginationFunction: self.listVoiceConnectorGroups(input:))
    }
}

extension ListVoiceConnectorGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListVoiceConnectorGroupsInput {
        return ListVoiceConnectorGroupsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ChimeSDKVoiceClient {
    /// Paginate over `[ListVoiceConnectorsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListVoiceConnectorsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListVoiceConnectorsOutput`
    public func listVoiceConnectorsPaginated(input: ListVoiceConnectorsInput) -> ClientRuntime.PaginatorSequence<ListVoiceConnectorsInput, ListVoiceConnectorsOutput> {
        return ClientRuntime.PaginatorSequence<ListVoiceConnectorsInput, ListVoiceConnectorsOutput>(input: input, inputKey: \ListVoiceConnectorsInput.nextToken, outputKey: \ListVoiceConnectorsOutput.nextToken, paginationFunction: self.listVoiceConnectors(input:))
    }
}

extension ListVoiceConnectorsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListVoiceConnectorsInput {
        return ListVoiceConnectorsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ChimeSDKVoiceClient {
    /// Paginate over `[ListVoiceProfileDomainsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListVoiceProfileDomainsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListVoiceProfileDomainsOutput`
    public func listVoiceProfileDomainsPaginated(input: ListVoiceProfileDomainsInput) -> ClientRuntime.PaginatorSequence<ListVoiceProfileDomainsInput, ListVoiceProfileDomainsOutput> {
        return ClientRuntime.PaginatorSequence<ListVoiceProfileDomainsInput, ListVoiceProfileDomainsOutput>(input: input, inputKey: \ListVoiceProfileDomainsInput.nextToken, outputKey: \ListVoiceProfileDomainsOutput.nextToken, paginationFunction: self.listVoiceProfileDomains(input:))
    }
}

extension ListVoiceProfileDomainsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListVoiceProfileDomainsInput {
        return ListVoiceProfileDomainsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ChimeSDKVoiceClient {
    /// Paginate over `[ListVoiceProfilesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListVoiceProfilesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListVoiceProfilesOutput`
    public func listVoiceProfilesPaginated(input: ListVoiceProfilesInput) -> ClientRuntime.PaginatorSequence<ListVoiceProfilesInput, ListVoiceProfilesOutput> {
        return ClientRuntime.PaginatorSequence<ListVoiceProfilesInput, ListVoiceProfilesOutput>(input: input, inputKey: \ListVoiceProfilesInput.nextToken, outputKey: \ListVoiceProfilesOutput.nextToken, paginationFunction: self.listVoiceProfiles(input:))
    }
}

extension ListVoiceProfilesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListVoiceProfilesInput {
        return ListVoiceProfilesInput(
            maxResults: self.maxResults,
            nextToken: token,
            voiceProfileDomainId: self.voiceProfileDomainId
        )}
}
extension ChimeSDKVoiceClient {
    /// Paginate over `[SearchAvailablePhoneNumbersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SearchAvailablePhoneNumbersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SearchAvailablePhoneNumbersOutput`
    public func searchAvailablePhoneNumbersPaginated(input: SearchAvailablePhoneNumbersInput) -> ClientRuntime.PaginatorSequence<SearchAvailablePhoneNumbersInput, SearchAvailablePhoneNumbersOutput> {
        return ClientRuntime.PaginatorSequence<SearchAvailablePhoneNumbersInput, SearchAvailablePhoneNumbersOutput>(input: input, inputKey: \SearchAvailablePhoneNumbersInput.nextToken, outputKey: \SearchAvailablePhoneNumbersOutput.nextToken, paginationFunction: self.searchAvailablePhoneNumbers(input:))
    }
}

extension SearchAvailablePhoneNumbersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchAvailablePhoneNumbersInput {
        return SearchAvailablePhoneNumbersInput(
            areaCode: self.areaCode,
            city: self.city,
            country: self.country,
            maxResults: self.maxResults,
            nextToken: token,
            phoneNumberType: self.phoneNumberType,
            state: self.state,
            tollFreePrefix: self.tollFreePrefix
        )}
}
