// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResiliencehubClient {
    /// Paginate over `[ListAlarmRecommendationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAlarmRecommendationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAlarmRecommendationsOutput`
    public func listAlarmRecommendationsPaginated(input: ListAlarmRecommendationsInput) -> ClientRuntime.PaginatorSequence<ListAlarmRecommendationsInput, ListAlarmRecommendationsOutput> {
        return ClientRuntime.PaginatorSequence<ListAlarmRecommendationsInput, ListAlarmRecommendationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAlarmRecommendations(input:))
    }
}

extension ListAlarmRecommendationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAlarmRecommendationsInput {
        return ListAlarmRecommendationsInput(
            assessmentArn: self.assessmentArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListAppAssessmentComplianceDriftsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppAssessmentComplianceDriftsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppAssessmentComplianceDriftsOutput`
    public func listAppAssessmentComplianceDriftsPaginated(input: ListAppAssessmentComplianceDriftsInput) -> ClientRuntime.PaginatorSequence<ListAppAssessmentComplianceDriftsInput, ListAppAssessmentComplianceDriftsOutput> {
        return ClientRuntime.PaginatorSequence<ListAppAssessmentComplianceDriftsInput, ListAppAssessmentComplianceDriftsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAppAssessmentComplianceDrifts(input:))
    }
}

extension ListAppAssessmentComplianceDriftsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppAssessmentComplianceDriftsInput {
        return ListAppAssessmentComplianceDriftsInput(
            assessmentArn: self.assessmentArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListAppAssessmentsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppAssessmentsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppAssessmentsOutput`
    public func listAppAssessmentsPaginated(input: ListAppAssessmentsInput) -> ClientRuntime.PaginatorSequence<ListAppAssessmentsInput, ListAppAssessmentsOutput> {
        return ClientRuntime.PaginatorSequence<ListAppAssessmentsInput, ListAppAssessmentsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAppAssessments(input:))
    }
}

extension ListAppAssessmentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppAssessmentsInput {
        return ListAppAssessmentsInput(
            appArn: self.appArn,
            assessmentName: self.assessmentName,
            assessmentStatus: self.assessmentStatus,
            complianceStatus: self.complianceStatus,
            invoker: self.invoker,
            maxResults: self.maxResults,
            nextToken: token,
            reverseOrder: self.reverseOrder
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListAppComponentCompliancesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppComponentCompliancesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppComponentCompliancesOutput`
    public func listAppComponentCompliancesPaginated(input: ListAppComponentCompliancesInput) -> ClientRuntime.PaginatorSequence<ListAppComponentCompliancesInput, ListAppComponentCompliancesOutput> {
        return ClientRuntime.PaginatorSequence<ListAppComponentCompliancesInput, ListAppComponentCompliancesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAppComponentCompliances(input:))
    }
}

extension ListAppComponentCompliancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppComponentCompliancesInput {
        return ListAppComponentCompliancesInput(
            assessmentArn: self.assessmentArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListAppComponentRecommendationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppComponentRecommendationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppComponentRecommendationsOutput`
    public func listAppComponentRecommendationsPaginated(input: ListAppComponentRecommendationsInput) -> ClientRuntime.PaginatorSequence<ListAppComponentRecommendationsInput, ListAppComponentRecommendationsOutput> {
        return ClientRuntime.PaginatorSequence<ListAppComponentRecommendationsInput, ListAppComponentRecommendationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAppComponentRecommendations(input:))
    }
}

extension ListAppComponentRecommendationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppComponentRecommendationsInput {
        return ListAppComponentRecommendationsInput(
            assessmentArn: self.assessmentArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListAppInputSourcesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppInputSourcesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppInputSourcesOutput`
    public func listAppInputSourcesPaginated(input: ListAppInputSourcesInput) -> ClientRuntime.PaginatorSequence<ListAppInputSourcesInput, ListAppInputSourcesOutput> {
        return ClientRuntime.PaginatorSequence<ListAppInputSourcesInput, ListAppInputSourcesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAppInputSources(input:))
    }
}

extension ListAppInputSourcesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppInputSourcesInput {
        return ListAppInputSourcesInput(
            appArn: self.appArn,
            appVersion: self.appVersion,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListAppsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppsOutput`
    public func listAppsPaginated(input: ListAppsInput) -> ClientRuntime.PaginatorSequence<ListAppsInput, ListAppsOutput> {
        return ClientRuntime.PaginatorSequence<ListAppsInput, ListAppsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listApps(input:))
    }
}

extension ListAppsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppsInput {
        return ListAppsInput(
            appArn: self.appArn,
            fromLastAssessmentTime: self.fromLastAssessmentTime,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            reverseOrder: self.reverseOrder,
            toLastAssessmentTime: self.toLastAssessmentTime
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListAppVersionAppComponentsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppVersionAppComponentsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppVersionAppComponentsOutput`
    public func listAppVersionAppComponentsPaginated(input: ListAppVersionAppComponentsInput) -> ClientRuntime.PaginatorSequence<ListAppVersionAppComponentsInput, ListAppVersionAppComponentsOutput> {
        return ClientRuntime.PaginatorSequence<ListAppVersionAppComponentsInput, ListAppVersionAppComponentsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAppVersionAppComponents(input:))
    }
}

extension ListAppVersionAppComponentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppVersionAppComponentsInput {
        return ListAppVersionAppComponentsInput(
            appArn: self.appArn,
            appVersion: self.appVersion,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListAppVersionResourceMappingsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppVersionResourceMappingsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppVersionResourceMappingsOutput`
    public func listAppVersionResourceMappingsPaginated(input: ListAppVersionResourceMappingsInput) -> ClientRuntime.PaginatorSequence<ListAppVersionResourceMappingsInput, ListAppVersionResourceMappingsOutput> {
        return ClientRuntime.PaginatorSequence<ListAppVersionResourceMappingsInput, ListAppVersionResourceMappingsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAppVersionResourceMappings(input:))
    }
}

extension ListAppVersionResourceMappingsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppVersionResourceMappingsInput {
        return ListAppVersionResourceMappingsInput(
            appArn: self.appArn,
            appVersion: self.appVersion,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListAppVersionResourcesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppVersionResourcesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppVersionResourcesOutput`
    public func listAppVersionResourcesPaginated(input: ListAppVersionResourcesInput) -> ClientRuntime.PaginatorSequence<ListAppVersionResourcesInput, ListAppVersionResourcesOutput> {
        return ClientRuntime.PaginatorSequence<ListAppVersionResourcesInput, ListAppVersionResourcesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAppVersionResources(input:))
    }
}

extension ListAppVersionResourcesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppVersionResourcesInput {
        return ListAppVersionResourcesInput(
            appArn: self.appArn,
            appVersion: self.appVersion,
            maxResults: self.maxResults,
            nextToken: token,
            resolutionId: self.resolutionId
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListAppVersionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppVersionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppVersionsOutput`
    public func listAppVersionsPaginated(input: ListAppVersionsInput) -> ClientRuntime.PaginatorSequence<ListAppVersionsInput, ListAppVersionsOutput> {
        return ClientRuntime.PaginatorSequence<ListAppVersionsInput, ListAppVersionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAppVersions(input:))
    }
}

extension ListAppVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppVersionsInput {
        return ListAppVersionsInput(
            appArn: self.appArn,
            endTime: self.endTime,
            maxResults: self.maxResults,
            nextToken: token,
            startTime: self.startTime
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListRecommendationTemplatesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRecommendationTemplatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRecommendationTemplatesOutput`
    public func listRecommendationTemplatesPaginated(input: ListRecommendationTemplatesInput) -> ClientRuntime.PaginatorSequence<ListRecommendationTemplatesInput, ListRecommendationTemplatesOutput> {
        return ClientRuntime.PaginatorSequence<ListRecommendationTemplatesInput, ListRecommendationTemplatesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listRecommendationTemplates(input:))
    }
}

extension ListRecommendationTemplatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRecommendationTemplatesInput {
        return ListRecommendationTemplatesInput(
            assessmentArn: self.assessmentArn,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            recommendationTemplateArn: self.recommendationTemplateArn,
            reverseOrder: self.reverseOrder,
            status: self.status
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListResiliencyPoliciesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListResiliencyPoliciesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListResiliencyPoliciesOutput`
    public func listResiliencyPoliciesPaginated(input: ListResiliencyPoliciesInput) -> ClientRuntime.PaginatorSequence<ListResiliencyPoliciesInput, ListResiliencyPoliciesOutput> {
        return ClientRuntime.PaginatorSequence<ListResiliencyPoliciesInput, ListResiliencyPoliciesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listResiliencyPolicies(input:))
    }
}

extension ListResiliencyPoliciesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListResiliencyPoliciesInput {
        return ListResiliencyPoliciesInput(
            maxResults: self.maxResults,
            nextToken: token,
            policyName: self.policyName
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListSopRecommendationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSopRecommendationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSopRecommendationsOutput`
    public func listSopRecommendationsPaginated(input: ListSopRecommendationsInput) -> ClientRuntime.PaginatorSequence<ListSopRecommendationsInput, ListSopRecommendationsOutput> {
        return ClientRuntime.PaginatorSequence<ListSopRecommendationsInput, ListSopRecommendationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listSopRecommendations(input:))
    }
}

extension ListSopRecommendationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSopRecommendationsInput {
        return ListSopRecommendationsInput(
            assessmentArn: self.assessmentArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListSuggestedResiliencyPoliciesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSuggestedResiliencyPoliciesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSuggestedResiliencyPoliciesOutput`
    public func listSuggestedResiliencyPoliciesPaginated(input: ListSuggestedResiliencyPoliciesInput) -> ClientRuntime.PaginatorSequence<ListSuggestedResiliencyPoliciesInput, ListSuggestedResiliencyPoliciesOutput> {
        return ClientRuntime.PaginatorSequence<ListSuggestedResiliencyPoliciesInput, ListSuggestedResiliencyPoliciesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listSuggestedResiliencyPolicies(input:))
    }
}

extension ListSuggestedResiliencyPoliciesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSuggestedResiliencyPoliciesInput {
        return ListSuggestedResiliencyPoliciesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListTestRecommendationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTestRecommendationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTestRecommendationsOutput`
    public func listTestRecommendationsPaginated(input: ListTestRecommendationsInput) -> ClientRuntime.PaginatorSequence<ListTestRecommendationsInput, ListTestRecommendationsOutput> {
        return ClientRuntime.PaginatorSequence<ListTestRecommendationsInput, ListTestRecommendationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTestRecommendations(input:))
    }
}

extension ListTestRecommendationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTestRecommendationsInput {
        return ListTestRecommendationsInput(
            assessmentArn: self.assessmentArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ResiliencehubClient {
    /// Paginate over `[ListUnsupportedAppVersionResourcesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListUnsupportedAppVersionResourcesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListUnsupportedAppVersionResourcesOutput`
    public func listUnsupportedAppVersionResourcesPaginated(input: ListUnsupportedAppVersionResourcesInput) -> ClientRuntime.PaginatorSequence<ListUnsupportedAppVersionResourcesInput, ListUnsupportedAppVersionResourcesOutput> {
        return ClientRuntime.PaginatorSequence<ListUnsupportedAppVersionResourcesInput, ListUnsupportedAppVersionResourcesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listUnsupportedAppVersionResources(input:))
    }
}

extension ListUnsupportedAppVersionResourcesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListUnsupportedAppVersionResourcesInput {
        return ListUnsupportedAppVersionResourcesInput(
            appArn: self.appArn,
            appVersion: self.appVersion,
            maxResults: self.maxResults,
            nextToken: token,
            resolutionId: self.resolutionId
        )}
}
