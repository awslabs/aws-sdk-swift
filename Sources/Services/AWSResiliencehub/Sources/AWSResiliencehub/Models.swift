//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.listWritingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

extension ResiliencehubClientTypes {
    /// Indicates the grouping recommendation you have accepted to include in your application.
    public struct AcceptGroupingRecommendationEntry {
        /// Indicates the identifier of the grouping recommendation.
        /// This member is required.
        public var groupingRecommendationId: Swift.String?

        public init(
            groupingRecommendationId: Swift.String? = nil
        )
        {
            self.groupingRecommendationId = groupingRecommendationId
        }
    }

}

/// You don't have permissions to perform the requested operation. The user or role that is making the request must have at least one IAM permissions policy attached that grants the required permissions.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception occurs when there is an internal failure in the Resilience Hub service.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception occurs when the specified resource could not be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The identifier of the resource that the exception applies to.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type of the resource that the exception applies to.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// This exception occurs when you have exceeded the limit on the number of requests per second.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The number of seconds to wait before retrying the operation.
        public internal(set) var retryAfterSeconds: Swift.Int? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.Int? = nil
    )
    {
        self.properties.message = message
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

/// This exception occurs when a request is not valid.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AcceptResourceGroupingRecommendationsInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Indicates the list of resource grouping recommendations you want to include in your application.
    /// This member is required.
    public var entries: [ResiliencehubClientTypes.AcceptGroupingRecommendationEntry]?

    public init(
        appArn: Swift.String? = nil,
        entries: [ResiliencehubClientTypes.AcceptGroupingRecommendationEntry]? = nil
    )
    {
        self.appArn = appArn
        self.entries = entries
    }
}

extension ResiliencehubClientTypes {
    /// Indicates the accepted grouping recommendation whose implementation failed.
    public struct FailedGroupingRecommendationEntry {
        /// Indicates the error that occurred while implementing a grouping recommendation.
        /// This member is required.
        public var errorMessage: Swift.String?
        /// Indicates the identifier of the grouping recommendation.
        /// This member is required.
        public var groupingRecommendationId: Swift.String?

        public init(
            errorMessage: Swift.String? = nil,
            groupingRecommendationId: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
            self.groupingRecommendationId = groupingRecommendationId
        }
    }

}

public struct AcceptResourceGroupingRecommendationsOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Indicates the list of resource grouping recommendations that could not be included in your application.
    /// This member is required.
    public var failedEntries: [ResiliencehubClientTypes.FailedGroupingRecommendationEntry]?

    public init(
        appArn: Swift.String? = nil,
        failedEntries: [ResiliencehubClientTypes.FailedGroupingRecommendationEntry]? = nil
    )
    {
        self.appArn = appArn
        self.failedEntries = failedEntries
    }
}

/// This exception occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The identifier of the resource that the exception applies to.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type of the resource that the exception applies to.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// This exception occurs when you have exceeded your service quota. To perform the requested action, remove some of the relevant resources, or use Service Quotas to request a service quota increase.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ResiliencehubClientTypes {

    public enum ResourceMappingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case appRegistryApp
        case cfnStack
        case eks
        case resource
        case resourceGroup
        case terraform
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceMappingType] {
            return [
                .appRegistryApp,
                .cfnStack,
                .eks,
                .resource,
                .resourceGroup,
                .terraform
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .appRegistryApp: return "AppRegistryApp"
            case .cfnStack: return "CfnStack"
            case .eks: return "EKS"
            case .resource: return "Resource"
            case .resourceGroup: return "ResourceGroup"
            case .terraform: return "Terraform"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum PhysicalIdentifierType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case arn
        case native
        case sdkUnknown(Swift.String)

        public static var allCases: [PhysicalIdentifierType] {
            return [
                .arn,
                .native
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .arn: return "Arn"
            case .native: return "Native"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines a physical resource identifier.
    public struct PhysicalResourceId {
        /// The Amazon Web Services account that owns the physical resource.
        public var awsAccountId: Swift.String?
        /// The Amazon Web Services Region that the physical resource is located in.
        public var awsRegion: Swift.String?
        /// Identifier of the physical resource.
        /// This member is required.
        public var identifier: Swift.String?
        /// Specifies the type of physical resource identifier. Arn The resource identifier is an Amazon Resource Name (ARN) and it can identify the following list of resources:
        ///
        /// * AWS::ECS::Service
        ///
        /// * AWS::EFS::FileSystem
        ///
        /// * AWS::ElasticLoadBalancingV2::LoadBalancer
        ///
        /// * AWS::Lambda::Function
        ///
        /// * AWS::SNS::Topic
        ///
        ///
        /// Native The resource identifier is an Resilience Hub-native identifier and it can identify the following list of resources:
        ///
        /// * AWS::ApiGateway::RestApi
        ///
        /// * AWS::ApiGatewayV2::Api
        ///
        /// * AWS::AutoScaling::AutoScalingGroup
        ///
        /// * AWS::DocDB::DBCluster
        ///
        /// * AWS::DocDB::DBGlobalCluster
        ///
        /// * AWS::DocDB::DBInstance
        ///
        /// * AWS::DynamoDB::GlobalTable
        ///
        /// * AWS::DynamoDB::Table
        ///
        /// * AWS::EC2::EC2Fleet
        ///
        /// * AWS::EC2::Instance
        ///
        /// * AWS::EC2::NatGateway
        ///
        /// * AWS::EC2::Volume
        ///
        /// * AWS::ElasticLoadBalancing::LoadBalancer
        ///
        /// * AWS::RDS::DBCluster
        ///
        /// * AWS::RDS::DBInstance
        ///
        /// * AWS::RDS::GlobalCluster
        ///
        /// * AWS::Route53::RecordSet
        ///
        /// * AWS::S3::Bucket
        ///
        /// * AWS::SQS::Queue
        /// This member is required.
        public var type: ResiliencehubClientTypes.PhysicalIdentifierType?

        public init(
            awsAccountId: Swift.String? = nil,
            awsRegion: Swift.String? = nil,
            identifier: Swift.String? = nil,
            type: ResiliencehubClientTypes.PhysicalIdentifierType? = nil
        )
        {
            self.awsAccountId = awsAccountId
            self.awsRegion = awsRegion
            self.identifier = identifier
            self.type = type
        }
    }

}

extension ResiliencehubClientTypes {
    /// Defines a resource mapping.
    public struct ResourceMapping {
        /// Name of the application this resource is mapped to when the mappingType is AppRegistryApp.
        public var appRegistryAppName: Swift.String?
        /// Name of the Amazon Elastic Kubernetes Service cluster and namespace that this resource is mapped to when the mappingType is EKS. This parameter accepts values in "eks-cluster/namespace" format.
        public var eksSourceName: Swift.String?
        /// Name of the CloudFormation stack this resource is mapped to when the mappingType is CfnStack.
        public var logicalStackName: Swift.String?
        /// Specifies the type of resource mapping.
        /// This member is required.
        public var mappingType: ResiliencehubClientTypes.ResourceMappingType?
        /// Identifier of the physical resource.
        /// This member is required.
        public var physicalResourceId: ResiliencehubClientTypes.PhysicalResourceId?
        /// Name of the Resource Groups that this resource is mapped to when the mappingType is ResourceGroup.
        public var resourceGroupName: Swift.String?
        /// Name of the resource that this resource is mapped to when the mappingType is Resource.
        public var resourceName: Swift.String?
        /// Name of the Terraform source that this resource is mapped to when the mappingType is Terraform.
        public var terraformSourceName: Swift.String?

        public init(
            appRegistryAppName: Swift.String? = nil,
            eksSourceName: Swift.String? = nil,
            logicalStackName: Swift.String? = nil,
            mappingType: ResiliencehubClientTypes.ResourceMappingType? = nil,
            physicalResourceId: ResiliencehubClientTypes.PhysicalResourceId? = nil,
            resourceGroupName: Swift.String? = nil,
            resourceName: Swift.String? = nil,
            terraformSourceName: Swift.String? = nil
        )
        {
            self.appRegistryAppName = appRegistryAppName
            self.eksSourceName = eksSourceName
            self.logicalStackName = logicalStackName
            self.mappingType = mappingType
            self.physicalResourceId = physicalResourceId
            self.resourceGroupName = resourceGroupName
            self.resourceName = resourceName
            self.terraformSourceName = terraformSourceName
        }
    }

}

public struct AddDraftAppVersionResourceMappingsInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Mappings used to map logical resources from the template to physical resources. You can use the mapping type CFN_STACK if the application template uses a logical stack name. Or you can map individual resources by using the mapping type RESOURCE. We recommend using the mapping type CFN_STACK if the application is backed by a CloudFormation stack.
    /// This member is required.
    public var resourceMappings: [ResiliencehubClientTypes.ResourceMapping]?

    public init(
        appArn: Swift.String? = nil,
        resourceMappings: [ResiliencehubClientTypes.ResourceMapping]? = nil
    )
    {
        self.appArn = appArn
        self.resourceMappings = resourceMappings
    }
}

public struct AddDraftAppVersionResourceMappingsOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The version of the application.
    /// This member is required.
    public var appVersion: Swift.String?
    /// List of sources that are used to map a logical resource from the template to a physical resource. You can use sources such as CloudFormation, Terraform state files, AppRegistry applications, or Amazon EKS.
    /// This member is required.
    public var resourceMappings: [ResiliencehubClientTypes.ResourceMapping]?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        resourceMappings: [ResiliencehubClientTypes.ResourceMapping]? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.resourceMappings = resourceMappings
    }
}

extension ResiliencehubClientTypes {

    public enum ExcludeRecommendationReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alreadyImplemented
        case complexityOfImplementation
        case notRelevant
        case sdkUnknown(Swift.String)

        public static var allCases: [ExcludeRecommendationReason] {
            return [
                .alreadyImplemented,
                .complexityOfImplementation,
                .notRelevant
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alreadyImplemented: return "AlreadyImplemented"
            case .complexityOfImplementation: return "ComplexityOfImplementation"
            case .notRelevant: return "NotRelevant"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines a recommendation.
    public struct RecommendationItem {
        /// Specifies if the recommendation has already been implemented.
        public var alreadyImplemented: Swift.Bool?
        /// Indicates the reason for excluding an operational recommendation.
        public var excludeReason: ResiliencehubClientTypes.ExcludeRecommendationReason?
        /// Indicates if an operational recommendation item is excluded.
        public var excluded: Swift.Bool?
        /// Identifier of the resource.
        public var resourceId: Swift.String?
        /// Identifier of the target account.
        public var targetAccountId: Swift.String?
        /// The target region.
        public var targetRegion: Swift.String?

        public init(
            alreadyImplemented: Swift.Bool? = nil,
            excludeReason: ResiliencehubClientTypes.ExcludeRecommendationReason? = nil,
            excluded: Swift.Bool? = nil,
            resourceId: Swift.String? = nil,
            targetAccountId: Swift.String? = nil,
            targetRegion: Swift.String? = nil
        )
        {
            self.alreadyImplemented = alreadyImplemented
            self.excludeReason = excludeReason
            self.excluded = excluded
            self.resourceId = resourceId
            self.targetAccountId = targetAccountId
            self.targetRegion = targetRegion
        }
    }

}

extension ResiliencehubClientTypes {

    public enum RecommendationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case excluded
        case implemented
        case inactive
        case notImplemented
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationStatus] {
            return [
                .excluded,
                .implemented,
                .inactive,
                .notImplemented
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .excluded: return "Excluded"
            case .implemented: return "Implemented"
            case .inactive: return "Inactive"
            case .notImplemented: return "NotImplemented"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum AlarmType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case canary
        case composite
        case event
        case logs
        case metric
        case sdkUnknown(Swift.String)

        public static var allCases: [AlarmType] {
            return [
                .canary,
                .composite,
                .event,
                .logs,
                .metric
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .canary: return "Canary"
            case .composite: return "Composite"
            case .event: return "Event"
            case .logs: return "Logs"
            case .metric: return "Metric"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines a recommendation for a CloudWatch alarm.
    public struct AlarmRecommendation {
        /// Application Component name for the CloudWatch alarm recommendation. This name is saved as the first item in the appComponentNames list.
        @available(*, deprecated, message: "An alarm recommendation can be attached to multiple Application Components, hence this property will be replaced by the new property 'appComponentNames'.")
        public var appComponentName: Swift.String?
        /// List of Application Component names for the CloudWatch alarm recommendation.
        public var appComponentNames: [Swift.String]?
        /// Description of the alarm recommendation.
        public var description: Swift.String?
        /// List of CloudWatch alarm recommendations.
        public var items: [ResiliencehubClientTypes.RecommendationItem]?
        /// Name of the alarm recommendation.
        /// This member is required.
        public var name: Swift.String?
        /// The prerequisite for the alarm recommendation.
        public var prerequisite: Swift.String?
        /// Identifier of the alarm recommendation.
        /// This member is required.
        public var recommendationId: Swift.String?
        /// Status of the recommended Amazon CloudWatch alarm.
        public var recommendationStatus: ResiliencehubClientTypes.RecommendationStatus?
        /// Reference identifier of the alarm recommendation.
        /// This member is required.
        public var referenceId: Swift.String?
        /// Type of alarm recommendation.
        /// This member is required.
        public var type: ResiliencehubClientTypes.AlarmType?

        public init(
            appComponentName: Swift.String? = nil,
            appComponentNames: [Swift.String]? = nil,
            description: Swift.String? = nil,
            items: [ResiliencehubClientTypes.RecommendationItem]? = nil,
            name: Swift.String? = nil,
            prerequisite: Swift.String? = nil,
            recommendationId: Swift.String? = nil,
            recommendationStatus: ResiliencehubClientTypes.RecommendationStatus? = nil,
            referenceId: Swift.String? = nil,
            type: ResiliencehubClientTypes.AlarmType? = nil
        )
        {
            self.appComponentName = appComponentName
            self.appComponentNames = appComponentNames
            self.description = description
            self.items = items
            self.name = name
            self.prerequisite = prerequisite
            self.recommendationId = recommendationId
            self.recommendationStatus = recommendationStatus
            self.referenceId = referenceId
            self.type = type
        }
    }

}

extension ResiliencehubClientTypes {

    public enum AppAssessmentScheduleType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case daily
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AppAssessmentScheduleType] {
            return [
                .daily,
                .disabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .daily: return "Daily"
            case .disabled: return "Disabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum AppComplianceStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case changesDetected
        case missingPolicy
        case notApplicable
        case notAssessed
        case policyBreached
        case policyMet
        case sdkUnknown(Swift.String)

        public static var allCases: [AppComplianceStatusType] {
            return [
                .changesDetected,
                .missingPolicy,
                .notApplicable,
                .notAssessed,
                .policyBreached,
                .policyMet
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .changesDetected: return "ChangesDetected"
            case .missingPolicy: return "MissingPolicy"
            case .notApplicable: return "NotApplicable"
            case .notAssessed: return "NotAssessed"
            case .policyBreached: return "PolicyBreached"
            case .policyMet: return "PolicyMet"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum AppDriftStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case detected
        case notChecked
        case notDetected
        case sdkUnknown(Swift.String)

        public static var allCases: [AppDriftStatusType] {
            return [
                .detected,
                .notChecked,
                .notDetected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .detected: return "Detected"
            case .notChecked: return "NotChecked"
            case .notDetected: return "NotDetected"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case driftDetected
        case scheduledAssessmentFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .driftDetected,
                .scheduledAssessmentFailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .driftDetected: return "DriftDetected"
            case .scheduledAssessmentFailure: return "ScheduledAssessmentFailure"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Indicates an event you would like to subscribe and get notification for. Currently, Resilience Hub supports notifications only for Drift detected and Scheduled assessment failure events.
    public struct EventSubscription {
        /// The type of event you would like to subscribe and get notification for. Currently, Resilience Hub supports notifications only for Drift detected (DriftDetected) and Scheduled assessment failure (ScheduledAssessmentFailure) events.
        /// This member is required.
        public var eventType: ResiliencehubClientTypes.EventType?
        /// Unique name to identify an event subscription.
        /// This member is required.
        public var name: Swift.String?
        /// Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic. The format for this ARN is: arn:partition:sns:region:account:topic-name. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        public var snsTopicArn: Swift.String?

        public init(
            eventType: ResiliencehubClientTypes.EventType? = nil,
            name: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil
        )
        {
            self.eventType = eventType
            self.name = name
            self.snsTopicArn = snsTopicArn
        }
    }

}

extension ResiliencehubClientTypes {

    public enum PermissionModelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case legacyIamUser
        case roleBased
        case sdkUnknown(Swift.String)

        public static var allCases: [PermissionModelType] {
            return [
                .legacyIamUser,
                .roleBased
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .legacyIamUser: return "LegacyIAMUser"
            case .roleBased: return "RoleBased"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines the roles and credentials that Resilience Hub would use while creating the application, importing its resources, and running an assessment.
    public struct PermissionModel {
        /// Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.
        ///
        /// * These ARNs are required only when your resources are in other accounts and you have different role name in these accounts. Else, the invoker role name will be used in the other accounts.
        ///
        /// * These roles must have a trust policy with iam:AssumeRole permission to the invoker role in the primary account.
        public var crossAccountRoleArns: [Swift.String]?
        /// Existing Amazon Web Services IAM role name in the primary Amazon Web Services account that will be assumed by Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.
        ///
        /// * You must have iam:passRole permission for this role while creating or updating the application.
        ///
        /// * Currently, invokerRoleName accepts only [A-Za-z0-9_+=,.@-] characters.
        public var invokerRoleName: Swift.String?
        /// Defines how Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your Amazon Web Services account, or by using the credentials of the current IAM user.
        /// This member is required.
        public var type: ResiliencehubClientTypes.PermissionModelType?

        public init(
            crossAccountRoleArns: [Swift.String]? = nil,
            invokerRoleName: Swift.String? = nil,
            type: ResiliencehubClientTypes.PermissionModelType? = nil
        )
        {
            self.crossAccountRoleArns = crossAccountRoleArns
            self.invokerRoleName = invokerRoleName
            self.type = type
        }
    }

}

extension ResiliencehubClientTypes {

    public enum AppStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [AppStatusType] {
            return [
                .active,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .deleting: return "Deleting"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines an Resilience Hub application.
    public struct App {
        /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        /// This member is required.
        public var appArn: Swift.String?
        /// Assessment execution schedule with 'Daily' or 'Disabled' values.
        public var assessmentSchedule: ResiliencehubClientTypes.AppAssessmentScheduleType?
        /// Current status of compliance for the resiliency policy.
        public var complianceStatus: ResiliencehubClientTypes.AppComplianceStatusType?
        /// Date and time when the app was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// Optional description for an application.
        public var description: Swift.String?
        /// Indicates if compliance drifts (deviations) were detected while running an assessment for your application.
        public var driftStatus: ResiliencehubClientTypes.AppDriftStatusType?
        /// The list of events you would like to subscribe and get notification for. Currently, Resilience Hub supports notifications only for Drift detected and Scheduled assessment failure events.
        public var eventSubscriptions: [ResiliencehubClientTypes.EventSubscription]?
        /// Date and time the most recent compliance evaluation.
        public var lastAppComplianceEvaluationTime: Foundation.Date?
        /// Indicates the last time that a drift was evaluated.
        public var lastDriftEvaluationTime: Foundation.Date?
        /// Date and time the most recent resiliency score evaluation.
        public var lastResiliencyScoreEvaluationTime: Foundation.Date?
        /// Name for the application.
        /// This member is required.
        public var name: Swift.String?
        /// Defines the roles and credentials that Resilience Hub would use while creating the application, importing its resources, and running an assessment.
        public var permissionModel: ResiliencehubClientTypes.PermissionModel?
        /// Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:partition:resiliencehub:region:account:resiliency-policy/policy-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        public var policyArn: Swift.String?
        /// Current resiliency score for the application.
        public var resiliencyScore: Swift.Double
        /// Recovery Point Objective (RPO) in seconds.
        public var rpoInSecs: Swift.Int?
        /// Recovery Time Objective (RTO) in seconds.
        public var rtoInSecs: Swift.Int?
        /// Status of the application.
        public var status: ResiliencehubClientTypes.AppStatusType?
        /// Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.
        public var tags: [Swift.String: Swift.String]?

        public init(
            appArn: Swift.String? = nil,
            assessmentSchedule: ResiliencehubClientTypes.AppAssessmentScheduleType? = nil,
            complianceStatus: ResiliencehubClientTypes.AppComplianceStatusType? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            driftStatus: ResiliencehubClientTypes.AppDriftStatusType? = nil,
            eventSubscriptions: [ResiliencehubClientTypes.EventSubscription]? = nil,
            lastAppComplianceEvaluationTime: Foundation.Date? = nil,
            lastDriftEvaluationTime: Foundation.Date? = nil,
            lastResiliencyScoreEvaluationTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            permissionModel: ResiliencehubClientTypes.PermissionModel? = nil,
            policyArn: Swift.String? = nil,
            resiliencyScore: Swift.Double = 0.0,
            rpoInSecs: Swift.Int? = nil,
            rtoInSecs: Swift.Int? = nil,
            status: ResiliencehubClientTypes.AppStatusType? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.appArn = appArn
            self.assessmentSchedule = assessmentSchedule
            self.complianceStatus = complianceStatus
            self.creationTime = creationTime
            self.description = description
            self.driftStatus = driftStatus
            self.eventSubscriptions = eventSubscriptions
            self.lastAppComplianceEvaluationTime = lastAppComplianceEvaluationTime
            self.lastDriftEvaluationTime = lastDriftEvaluationTime
            self.lastResiliencyScoreEvaluationTime = lastResiliencyScoreEvaluationTime
            self.name = name
            self.permissionModel = permissionModel
            self.policyArn = policyArn
            self.resiliencyScore = resiliencyScore
            self.rpoInSecs = rpoInSecs
            self.rtoInSecs = rtoInSecs
            self.status = status
            self.tags = tags
        }
    }

}

extension ResiliencehubClientTypes.App: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "App(appArn: \(Swift.String(describing: appArn)), assessmentSchedule: \(Swift.String(describing: assessmentSchedule)), complianceStatus: \(Swift.String(describing: complianceStatus)), creationTime: \(Swift.String(describing: creationTime)), description: \(Swift.String(describing: description)), driftStatus: \(Swift.String(describing: driftStatus)), eventSubscriptions: \(Swift.String(describing: eventSubscriptions)), lastAppComplianceEvaluationTime: \(Swift.String(describing: lastAppComplianceEvaluationTime)), lastDriftEvaluationTime: \(Swift.String(describing: lastDriftEvaluationTime)), lastResiliencyScoreEvaluationTime: \(Swift.String(describing: lastResiliencyScoreEvaluationTime)), name: \(Swift.String(describing: name)), permissionModel: \(Swift.String(describing: permissionModel)), policyArn: \(Swift.String(describing: policyArn)), resiliencyScore: \(Swift.String(describing: resiliencyScore)), rpoInSecs: \(Swift.String(describing: rpoInSecs)), rtoInSecs: \(Swift.String(describing: rtoInSecs)), status: \(Swift.String(describing: status)), tags: \"CONTENT_REDACTED\")"}
}

extension ResiliencehubClientTypes {

    public enum AssessmentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inprogress
        case pending
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [AssessmentStatus] {
            return [
                .failed,
                .inprogress,
                .pending,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .pending: return "Pending"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum DisruptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case az
        case hardware
        case region
        case software
        case sdkUnknown(Swift.String)

        public static var allCases: [DisruptionType] {
            return [
                .az,
                .hardware,
                .region,
                .software
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .az: return "AZ"
            case .hardware: return "Hardware"
            case .region: return "Region"
            case .software: return "Software"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum ComplianceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case missingPolicy
        case notApplicable
        case policyBreached
        case policyMet
        case sdkUnknown(Swift.String)

        public static var allCases: [ComplianceStatus] {
            return [
                .missingPolicy,
                .notApplicable,
                .policyBreached,
                .policyMet
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .missingPolicy: return "MissingPolicy"
            case .notApplicable: return "NotApplicable"
            case .policyBreached: return "PolicyBreached"
            case .policyMet: return "PolicyMet"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines the compliance against the resiliency policy for a disruption.
    public struct DisruptionCompliance {
        /// The Recovery Point Objective (RPO) that is achievable, in seconds.
        public var achievableRpoInSecs: Swift.Int
        /// The Recovery Time Objective (RTO) that is achievable, in seconds
        public var achievableRtoInSecs: Swift.Int
        /// The current status of compliance for the resiliency policy.
        /// This member is required.
        public var complianceStatus: ResiliencehubClientTypes.ComplianceStatus?
        /// The current RPO, in seconds.
        public var currentRpoInSecs: Swift.Int
        /// The current RTO, in seconds.
        public var currentRtoInSecs: Swift.Int
        /// The disruption compliance message.
        public var message: Swift.String?
        /// The RPO description.
        public var rpoDescription: Swift.String?
        /// Reference identifier of the RPO .
        public var rpoReferenceId: Swift.String?
        /// The RTO description.
        public var rtoDescription: Swift.String?
        /// Reference identifier of the RTO.
        public var rtoReferenceId: Swift.String?

        public init(
            achievableRpoInSecs: Swift.Int = 0,
            achievableRtoInSecs: Swift.Int = 0,
            complianceStatus: ResiliencehubClientTypes.ComplianceStatus? = nil,
            currentRpoInSecs: Swift.Int = 0,
            currentRtoInSecs: Swift.Int = 0,
            message: Swift.String? = nil,
            rpoDescription: Swift.String? = nil,
            rpoReferenceId: Swift.String? = nil,
            rtoDescription: Swift.String? = nil,
            rtoReferenceId: Swift.String? = nil
        )
        {
            self.achievableRpoInSecs = achievableRpoInSecs
            self.achievableRtoInSecs = achievableRtoInSecs
            self.complianceStatus = complianceStatus
            self.currentRpoInSecs = currentRpoInSecs
            self.currentRtoInSecs = currentRtoInSecs
            self.message = message
            self.rpoDescription = rpoDescription
            self.rpoReferenceId = rpoReferenceId
            self.rtoDescription = rtoDescription
            self.rtoReferenceId = rtoReferenceId
        }
    }

}

extension ResiliencehubClientTypes {

    public enum CostFrequency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case daily
        case hourly
        case monthly
        case yearly
        case sdkUnknown(Swift.String)

        public static var allCases: [CostFrequency] {
            return [
                .daily,
                .hourly,
                .monthly,
                .yearly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .daily: return "Daily"
            case .hourly: return "Hourly"
            case .monthly: return "Monthly"
            case .yearly: return "Yearly"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines a cost object.
    public struct Cost {
        /// The cost amount.
        /// This member is required.
        public var amount: Swift.Double
        /// The cost currency, for example USD.
        /// This member is required.
        public var currency: Swift.String?
        /// The cost frequency.
        /// This member is required.
        public var frequency: ResiliencehubClientTypes.CostFrequency?

        public init(
            amount: Swift.Double = 0.0,
            currency: Swift.String? = nil,
            frequency: ResiliencehubClientTypes.CostFrequency? = nil
        )
        {
            self.amount = amount
            self.currency = currency
            self.frequency = frequency
        }
    }

}

extension ResiliencehubClientTypes {

    public enum DriftStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case detected
        case notChecked
        case notDetected
        case sdkUnknown(Swift.String)

        public static var allCases: [DriftStatus] {
            return [
                .detected,
                .notChecked,
                .notDetected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .detected: return "Detected"
            case .notChecked: return "NotChecked"
            case .notDetected: return "NotDetected"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum AssessmentInvoker: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case system
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [AssessmentInvoker] {
            return [
                .system,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .system: return "System"
            case .user: return "User"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum DataLocationConstraint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case anyLocation
        case sameContinent
        case sameCountry
        case sdkUnknown(Swift.String)

        public static var allCases: [DataLocationConstraint] {
            return [
                .anyLocation,
                .sameContinent,
                .sameCountry
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .anyLocation: return "AnyLocation"
            case .sameContinent: return "SameContinent"
            case .sameCountry: return "SameCountry"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum EstimatedCostTier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case l1
        case l2
        case l3
        case l4
        case sdkUnknown(Swift.String)

        public static var allCases: [EstimatedCostTier] {
            return [
                .l1,
                .l2,
                .l3,
                .l4
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .l1: return "L1"
            case .l2: return "L2"
            case .l3: return "L3"
            case .l4: return "L4"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines a failure policy.
    public struct FailurePolicy {
        /// Recovery Point Objective (RPO) in seconds.
        /// This member is required.
        public var rpoInSecs: Swift.Int
        /// Recovery Time Objective (RTO) in seconds.
        /// This member is required.
        public var rtoInSecs: Swift.Int

        public init(
            rpoInSecs: Swift.Int = 0,
            rtoInSecs: Swift.Int = 0
        )
        {
            self.rpoInSecs = rpoInSecs
            self.rtoInSecs = rtoInSecs
        }
    }

}

extension ResiliencehubClientTypes {

    public enum ResiliencyPolicyTier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case coreServices
        case critical
        case important
        case missionCritical
        case nonCritical
        case notApplicable
        case sdkUnknown(Swift.String)

        public static var allCases: [ResiliencyPolicyTier] {
            return [
                .coreServices,
                .critical,
                .important,
                .missionCritical,
                .nonCritical,
                .notApplicable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .coreServices: return "CoreServices"
            case .critical: return "Critical"
            case .important: return "Important"
            case .missionCritical: return "MissionCritical"
            case .nonCritical: return "NonCritical"
            case .notApplicable: return "NotApplicable"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines a resiliency policy. Resilience Hub allows you to provide a value of zero for rtoInSecs and rpoInSecs of your resiliency policy. But, while assessing your application, the lowest possible assessment result is near zero. Hence, if you provide value zero for rtoInSecs and rpoInSecs, the estimated workload RTO and estimated workload RPO result will be near zero and the Compliance status for your application will be set to Policy breached.
    public struct ResiliencyPolicy {
        /// Date and time when the resiliency policy was created.
        public var creationTime: Foundation.Date?
        /// Specifies a high-level geographical location constraint for where your resilience policy data can be stored.
        public var dataLocationConstraint: ResiliencehubClientTypes.DataLocationConstraint?
        /// Specifies the estimated cost tier of the resiliency policy.
        public var estimatedCostTier: ResiliencehubClientTypes.EstimatedCostTier?
        /// The resiliency policy.
        public var policy: [Swift.String: ResiliencehubClientTypes.FailurePolicy]?
        /// Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:partition:resiliencehub:region:account:resiliency-policy/policy-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        public var policyArn: Swift.String?
        /// The description for the policy.
        public var policyDescription: Swift.String?
        /// The name of the policy
        public var policyName: Swift.String?
        /// Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.
        public var tags: [Swift.String: Swift.String]?
        /// The tier for this resiliency policy, ranging from the highest severity (MissionCritical) to lowest (NonCritical).
        public var tier: ResiliencehubClientTypes.ResiliencyPolicyTier?

        public init(
            creationTime: Foundation.Date? = nil,
            dataLocationConstraint: ResiliencehubClientTypes.DataLocationConstraint? = nil,
            estimatedCostTier: ResiliencehubClientTypes.EstimatedCostTier? = nil,
            policy: [Swift.String: ResiliencehubClientTypes.FailurePolicy]? = nil,
            policyArn: Swift.String? = nil,
            policyDescription: Swift.String? = nil,
            policyName: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            tier: ResiliencehubClientTypes.ResiliencyPolicyTier? = nil
        )
        {
            self.creationTime = creationTime
            self.dataLocationConstraint = dataLocationConstraint
            self.estimatedCostTier = estimatedCostTier
            self.policy = policy
            self.policyArn = policyArn
            self.policyDescription = policyDescription
            self.policyName = policyName
            self.tags = tags
            self.tier = tier
        }
    }

}

extension ResiliencehubClientTypes.ResiliencyPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResiliencyPolicy(creationTime: \(Swift.String(describing: creationTime)), dataLocationConstraint: \(Swift.String(describing: dataLocationConstraint)), estimatedCostTier: \(Swift.String(describing: estimatedCostTier)), policy: \(Swift.String(describing: policy)), policyArn: \(Swift.String(describing: policyArn)), policyDescription: \(Swift.String(describing: policyDescription)), policyName: \(Swift.String(describing: policyName)), tier: \(Swift.String(describing: tier)), tags: \"CONTENT_REDACTED\")"}
}

extension ResiliencehubClientTypes {

    public enum ResiliencyScoreType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alarm
        case compliance
        case sop
        case test
        case sdkUnknown(Swift.String)

        public static var allCases: [ResiliencyScoreType] {
            return [
                .alarm,
                .compliance,
                .sop,
                .test
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "Alarm"
            case .compliance: return "Compliance"
            case .sop: return "Sop"
            case .test: return "Test"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Resiliency score of each scoring component. For more information about scoring component, see [Calculating resiliency score](https://docs.aws.amazon.com/resilience-hub/latest/userguide/calculate-score.html).
    public struct ScoringComponentResiliencyScore {
        /// Number of recommendations that were excluded from the assessment. For example, if the excludedCount for Alarms coverage scoring component is 7, it indicates that 7 Amazon CloudWatch alarms are excluded from the assessment.
        public var excludedCount: Swift.Int
        /// Number of recommendations that must be implemented to obtain the maximum possible score for the scoring component. For SOPs, alarms, and tests, these are the number of recommendations that must be implemented. For compliance, these are the number of Application Components that have breached the resiliency policy. For example, if the outstandingCount for Alarms coverage scoring component is 5, it indicates that 5 Amazon CloudWatch alarms need to be implemented to achieve the maximum possible score.
        public var outstandingCount: Swift.Int
        /// Maximum possible score that can be obtained for the scoring component. For example, if the possibleScore is 20 points, it indicates the maximum possible score you can achieve for the scoring component when you run a new assessment after implementing all the Resilience Hub recommendations.
        public var possibleScore: Swift.Double
        /// Resiliency score points given for the scoring component. The score is always less than or equal to the possibleScore.
        public var score: Swift.Double

        public init(
            excludedCount: Swift.Int = 0,
            outstandingCount: Swift.Int = 0,
            possibleScore: Swift.Double = 0.0,
            score: Swift.Double = 0.0
        )
        {
            self.excludedCount = excludedCount
            self.outstandingCount = outstandingCount
            self.possibleScore = possibleScore
            self.score = score
        }
    }

}

extension ResiliencehubClientTypes {
    /// The overall resiliency score, returned as an object that includes the disruption score and outage score.
    public struct ResiliencyScore {
        /// The score generated by Resilience Hub for the scoring component after running an assessment. For example, if the score is 25 points, it indicates the overall score of your application generated by Resilience Hub after running an assessment.
        public var componentScore: [Swift.String: ResiliencehubClientTypes.ScoringComponentResiliencyScore]?
        /// The disruption score for a valid key.
        /// This member is required.
        public var disruptionScore: [Swift.String: Swift.Double]?
        /// The outage score for a valid key.
        /// This member is required.
        public var score: Swift.Double

        public init(
            componentScore: [Swift.String: ResiliencehubClientTypes.ScoringComponentResiliencyScore]? = nil,
            disruptionScore: [Swift.String: Swift.Double]? = nil,
            score: Swift.Double = 0.0
        )
        {
            self.componentScore = componentScore
            self.disruptionScore = disruptionScore
            self.score = score
        }
    }

}

extension ResiliencehubClientTypes {
    /// Defines application resource errors.
    public struct ResourceError {
        /// Identifier of the logical resource.
        public var logicalResourceId: Swift.String?
        /// Identifier of the physical resource.
        public var physicalResourceId: Swift.String?
        /// This is the error message.
        public var reason: Swift.String?

        public init(
            logicalResourceId: Swift.String? = nil,
            physicalResourceId: Swift.String? = nil,
            reason: Swift.String? = nil
        )
        {
            self.logicalResourceId = logicalResourceId
            self.physicalResourceId = physicalResourceId
            self.reason = reason
        }
    }

}

extension ResiliencehubClientTypes {
    /// A list of errors retrieving an application's resources.
    public struct ResourceErrorsDetails {
        /// This indicates if there are more errors not listed in the resourceErrors list.
        public var hasMoreErrors: Swift.Bool?
        /// A list of errors retrieving an application's resources.
        public var resourceErrors: [ResiliencehubClientTypes.ResourceError]?

        public init(
            hasMoreErrors: Swift.Bool? = nil,
            resourceErrors: [ResiliencehubClientTypes.ResourceError]? = nil
        )
        {
            self.hasMoreErrors = hasMoreErrors
            self.resourceErrors = resourceErrors
        }
    }

}

extension ResiliencehubClientTypes {
    /// Indicates a specific risk identified in the Resilience Hub assessment and the corresponding recommendation provided to address that risk. The assessment summary generated by large language models (LLMs) on Amazon Bedrock are only suggestions. The current level of generative AI technology is not perfect and LLMs are not infallible. Bias and incorrect answers, although rare, should be expected. Review each recommendation in the assessment summary before you use the output from an LLM. This property is available only in the US East (N. Virginia) Region.
    public struct AssessmentRiskRecommendation {
        /// Indicates the Application Components (AppComponents) that were assessed as part of the assessnent and are associated with the identified risk and recommendation. This property is available only in the US East (N. Virginia) Region.
        public var appComponents: [Swift.String]?
        /// Indicates the recommendation provided by the Resilience Hub to address the identified risks in the application. This property is available only in the US East (N. Virginia) Region.
        public var recommendation: Swift.String?
        /// Indicates the description of the potential risk identified in the application as part of the Resilience Hub assessment. This property is available only in the US East (N. Virginia) Region.
        public var risk: Swift.String?

        public init(
            appComponents: [Swift.String]? = nil,
            recommendation: Swift.String? = nil,
            risk: Swift.String? = nil
        )
        {
            self.appComponents = appComponents
            self.recommendation = recommendation
            self.risk = risk
        }
    }

}

extension ResiliencehubClientTypes {
    /// Indicates the AI-generated summary for the Resilience Hub assessment, providing a concise overview that highlights the top risks and recommendations. This property is available only in the US East (N. Virginia) Region.
    public struct AssessmentSummary {
        /// Indicates the top risks and recommendations identified by the Resilience Hub assessment, each representing a specific risk and the corresponding recommendation to address it. This property is available only in the US East (N. Virginia) Region.
        public var riskRecommendations: [ResiliencehubClientTypes.AssessmentRiskRecommendation]?
        /// Indicates a concise summary that provides an overview of the Resilience Hub assessment. This property is available only in the US East (N. Virginia) Region.
        public var summary: Swift.String?

        public init(
            riskRecommendations: [ResiliencehubClientTypes.AssessmentRiskRecommendation]? = nil,
            summary: Swift.String? = nil
        )
        {
            self.riskRecommendations = riskRecommendations
            self.summary = summary
        }
    }

}

extension ResiliencehubClientTypes {
    /// Defines an application assessment.
    public struct AppAssessment {
        /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        public var appArn: Swift.String?
        /// Version of an application.
        public var appVersion: Swift.String?
        /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        /// This member is required.
        public var assessmentArn: Swift.String?
        /// Name of the assessment.
        public var assessmentName: Swift.String?
        /// Current status of the assessment for the resiliency policy.
        /// This member is required.
        public var assessmentStatus: ResiliencehubClientTypes.AssessmentStatus?
        /// Application compliance against the resiliency policy.
        public var compliance: [Swift.String: ResiliencehubClientTypes.DisruptionCompliance]?
        /// Current status of the compliance for the resiliency policy.
        public var complianceStatus: ResiliencehubClientTypes.ComplianceStatus?
        /// Cost for the application.
        public var cost: ResiliencehubClientTypes.Cost?
        /// Indicates if compliance drifts (deviations) were detected while running an assessment for your application.
        public var driftStatus: ResiliencehubClientTypes.DriftStatus?
        /// End time for the action.
        public var endTime: Foundation.Date?
        /// The entity that invoked the assessment.
        /// This member is required.
        public var invoker: ResiliencehubClientTypes.AssessmentInvoker?
        /// Error or warning message from the assessment execution
        public var message: Swift.String?
        /// Resiliency policy of an application.
        public var policy: ResiliencehubClientTypes.ResiliencyPolicy?
        /// Current resiliency score for an application.
        public var resiliencyScore: ResiliencehubClientTypes.ResiliencyScore?
        /// A resource error object containing a list of errors retrieving an application's resources.
        public var resourceErrorsDetails: ResiliencehubClientTypes.ResourceErrorsDetails?
        /// Starting time for the action.
        public var startTime: Foundation.Date?
        /// Indicates a concise summary that provides an overview of the Resilience Hub assessment.
        public var summary: ResiliencehubClientTypes.AssessmentSummary?
        /// Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.
        public var tags: [Swift.String: Swift.String]?
        /// Version name of the published application.
        public var versionName: Swift.String?

        public init(
            appArn: Swift.String? = nil,
            appVersion: Swift.String? = nil,
            assessmentArn: Swift.String? = nil,
            assessmentName: Swift.String? = nil,
            assessmentStatus: ResiliencehubClientTypes.AssessmentStatus? = nil,
            compliance: [Swift.String: ResiliencehubClientTypes.DisruptionCompliance]? = nil,
            complianceStatus: ResiliencehubClientTypes.ComplianceStatus? = nil,
            cost: ResiliencehubClientTypes.Cost? = nil,
            driftStatus: ResiliencehubClientTypes.DriftStatus? = nil,
            endTime: Foundation.Date? = nil,
            invoker: ResiliencehubClientTypes.AssessmentInvoker? = nil,
            message: Swift.String? = nil,
            policy: ResiliencehubClientTypes.ResiliencyPolicy? = nil,
            resiliencyScore: ResiliencehubClientTypes.ResiliencyScore? = nil,
            resourceErrorsDetails: ResiliencehubClientTypes.ResourceErrorsDetails? = nil,
            startTime: Foundation.Date? = nil,
            summary: ResiliencehubClientTypes.AssessmentSummary? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            versionName: Swift.String? = nil
        )
        {
            self.appArn = appArn
            self.appVersion = appVersion
            self.assessmentArn = assessmentArn
            self.assessmentName = assessmentName
            self.assessmentStatus = assessmentStatus
            self.compliance = compliance
            self.complianceStatus = complianceStatus
            self.cost = cost
            self.driftStatus = driftStatus
            self.endTime = endTime
            self.invoker = invoker
            self.message = message
            self.policy = policy
            self.resiliencyScore = resiliencyScore
            self.resourceErrorsDetails = resourceErrorsDetails
            self.startTime = startTime
            self.summary = summary
            self.tags = tags
            self.versionName = versionName
        }
    }

}

extension ResiliencehubClientTypes.AppAssessment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AppAssessment(appArn: \(Swift.String(describing: appArn)), appVersion: \(Swift.String(describing: appVersion)), assessmentArn: \(Swift.String(describing: assessmentArn)), assessmentName: \(Swift.String(describing: assessmentName)), assessmentStatus: \(Swift.String(describing: assessmentStatus)), compliance: \(Swift.String(describing: compliance)), complianceStatus: \(Swift.String(describing: complianceStatus)), cost: \(Swift.String(describing: cost)), driftStatus: \(Swift.String(describing: driftStatus)), endTime: \(Swift.String(describing: endTime)), invoker: \(Swift.String(describing: invoker)), message: \(Swift.String(describing: message)), policy: \(Swift.String(describing: policy)), resiliencyScore: \(Swift.String(describing: resiliencyScore)), resourceErrorsDetails: \(Swift.String(describing: resourceErrorsDetails)), startTime: \(Swift.String(describing: startTime)), summary: \(Swift.String(describing: summary)), versionName: \(Swift.String(describing: versionName)), tags: \"CONTENT_REDACTED\")"}
}

extension ResiliencehubClientTypes {
    /// Defines an application assessment summary.
    public struct AppAssessmentSummary {
        /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        public var appArn: Swift.String?
        /// Version of an application.
        public var appVersion: Swift.String?
        /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        /// This member is required.
        public var assessmentArn: Swift.String?
        /// Name of the assessment.
        public var assessmentName: Swift.String?
        /// Current status of the assessment for the resiliency policy.
        /// This member is required.
        public var assessmentStatus: ResiliencehubClientTypes.AssessmentStatus?
        /// Current status of compliance for the resiliency policy.
        public var complianceStatus: ResiliencehubClientTypes.ComplianceStatus?
        /// Cost for an application.
        public var cost: ResiliencehubClientTypes.Cost?
        /// Indicates if compliance drifts (deviations) were detected while running an assessment for your application.
        public var driftStatus: ResiliencehubClientTypes.DriftStatus?
        /// End time for the action.
        public var endTime: Foundation.Date?
        /// Entity that invoked the assessment.
        public var invoker: ResiliencehubClientTypes.AssessmentInvoker?
        /// Message from the assessment run.
        public var message: Swift.String?
        /// Current resiliency score for the application.
        public var resiliencyScore: Swift.Double
        /// Starting time for the action.
        public var startTime: Foundation.Date?
        /// Name of an application version.
        public var versionName: Swift.String?

        public init(
            appArn: Swift.String? = nil,
            appVersion: Swift.String? = nil,
            assessmentArn: Swift.String? = nil,
            assessmentName: Swift.String? = nil,
            assessmentStatus: ResiliencehubClientTypes.AssessmentStatus? = nil,
            complianceStatus: ResiliencehubClientTypes.ComplianceStatus? = nil,
            cost: ResiliencehubClientTypes.Cost? = nil,
            driftStatus: ResiliencehubClientTypes.DriftStatus? = nil,
            endTime: Foundation.Date? = nil,
            invoker: ResiliencehubClientTypes.AssessmentInvoker? = nil,
            message: Swift.String? = nil,
            resiliencyScore: Swift.Double = 0.0,
            startTime: Foundation.Date? = nil,
            versionName: Swift.String? = nil
        )
        {
            self.appArn = appArn
            self.appVersion = appVersion
            self.assessmentArn = assessmentArn
            self.assessmentName = assessmentName
            self.assessmentStatus = assessmentStatus
            self.complianceStatus = complianceStatus
            self.cost = cost
            self.driftStatus = driftStatus
            self.endTime = endTime
            self.invoker = invoker
            self.message = message
            self.resiliencyScore = resiliencyScore
            self.startTime = startTime
            self.versionName = versionName
        }
    }

}

extension ResiliencehubClientTypes {
    /// Defines an Application Component.
    public struct AppComponent {
        /// Additional configuration parameters for an Resilience Hub application. If you want to implement additionalInfo through the Resilience Hub console rather than using an API call, see [Configure the application configuration parameters](https://docs.aws.amazon.com/resilience-hub/latest/userguide/app-config-param.html). Currently, this parameter accepts a key-value mapping (in a string format) of only one failover region and one associated account. Key: "failover-regions" Value: "[{"region":"<REGION>", "accounts":[{"id":"<ACCOUNT_ID>"}]}]"
        public var additionalInfo: [Swift.String: [Swift.String]]?
        /// Identifier of the Application Component.
        public var id: Swift.String?
        /// Name of the Application Component.
        /// This member is required.
        public var name: Swift.String?
        /// The type of Application Component.
        /// This member is required.
        public var type: Swift.String?

        public init(
            additionalInfo: [Swift.String: [Swift.String]]? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.additionalInfo = additionalInfo
            self.id = id
            self.name = name
            self.type = type
        }
    }

}

extension ResiliencehubClientTypes {
    /// Defines the compliance of an Application Component against the resiliency policy.
    public struct AppComponentCompliance {
        /// Name of the Application Component.
        public var appComponentName: Swift.String?
        /// The compliance of the Application Component against the resiliency policy.
        public var compliance: [Swift.String: ResiliencehubClientTypes.DisruptionCompliance]?
        /// The cost for the application.
        public var cost: ResiliencehubClientTypes.Cost?
        /// The compliance message.
        public var message: Swift.String?
        /// The current resiliency score for the application.
        public var resiliencyScore: ResiliencehubClientTypes.ResiliencyScore?
        /// Status of the action.
        public var status: ResiliencehubClientTypes.ComplianceStatus?

        public init(
            appComponentName: Swift.String? = nil,
            compliance: [Swift.String: ResiliencehubClientTypes.DisruptionCompliance]? = nil,
            cost: ResiliencehubClientTypes.Cost? = nil,
            message: Swift.String? = nil,
            resiliencyScore: ResiliencehubClientTypes.ResiliencyScore? = nil,
            status: ResiliencehubClientTypes.ComplianceStatus? = nil
        )
        {
            self.appComponentName = appComponentName
            self.compliance = compliance
            self.cost = cost
            self.message = message
            self.resiliencyScore = resiliencyScore
            self.status = status
        }
    }

}

extension ResiliencehubClientTypes {
    /// The input source of the namespace that is located on your Amazon Elastic Kubernetes Service cluster.
    public struct EksSourceClusterNamespace {
        /// Amazon Resource Name (ARN) of the Amazon Elastic Kubernetes Service cluster. The format for this ARN is: arn:aws:eks:region:account-id:cluster/cluster-name. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        /// This member is required.
        public var eksClusterArn: Swift.String?
        /// Name of the namespace that is located on your Amazon Elastic Kubernetes Service cluster.
        /// This member is required.
        public var namespace: Swift.String?

        public init(
            eksClusterArn: Swift.String? = nil,
            namespace: Swift.String? = nil
        )
        {
            self.eksClusterArn = eksClusterArn
            self.namespace = namespace
        }
    }

}

extension ResiliencehubClientTypes {
    /// The Terraform s3 state file you need to import.
    public struct TerraformSource {
        /// The URL of the Terraform s3 state file you need to import.
        /// This member is required.
        public var s3StateFileUrl: Swift.String?

        public init(
            s3StateFileUrl: Swift.String? = nil
        )
        {
            self.s3StateFileUrl = s3StateFileUrl
        }
    }

}

extension ResiliencehubClientTypes {
    /// The list of Resilience Hub application input sources.
    public struct AppInputSource {
        /// The namespace on your Amazon Elastic Kubernetes Service cluster.
        public var eksSourceClusterNamespace: ResiliencehubClientTypes.EksSourceClusterNamespace?
        /// The resource type of the input source.
        /// This member is required.
        public var importType: ResiliencehubClientTypes.ResourceMappingType?
        /// The number of resources.
        public var resourceCount: Swift.Int
        /// The Amazon Resource Name (ARN) of the input source. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        public var sourceArn: Swift.String?
        /// The name of the input source.
        public var sourceName: Swift.String?
        /// The name of the Terraform s3 state ﬁle.
        public var terraformSource: ResiliencehubClientTypes.TerraformSource?

        public init(
            eksSourceClusterNamespace: ResiliencehubClientTypes.EksSourceClusterNamespace? = nil,
            importType: ResiliencehubClientTypes.ResourceMappingType? = nil,
            resourceCount: Swift.Int = 0,
            sourceArn: Swift.String? = nil,
            sourceName: Swift.String? = nil,
            terraformSource: ResiliencehubClientTypes.TerraformSource? = nil
        )
        {
            self.eksSourceClusterNamespace = eksSourceClusterNamespace
            self.importType = importType
            self.resourceCount = resourceCount
            self.sourceArn = sourceArn
            self.sourceName = sourceName
            self.terraformSource = terraformSource
        }
    }

}

extension ResiliencehubClientTypes {
    /// Defines an application summary.
    public struct AppSummary {
        /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        /// This member is required.
        public var appArn: Swift.String?
        /// Assessment execution schedule with 'Daily' or 'Disabled' values.
        public var assessmentSchedule: ResiliencehubClientTypes.AppAssessmentScheduleType?
        /// The current status of compliance for the resiliency policy.
        public var complianceStatus: ResiliencehubClientTypes.AppComplianceStatusType?
        /// Date and time when the app was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The optional description for an app.
        public var description: Swift.String?
        /// Indicates if compliance drifts (deviations) were detected while running an assessment for your application.
        public var driftStatus: ResiliencehubClientTypes.AppDriftStatusType?
        /// Date and time of the most recent compliance evaluation.
        public var lastAppComplianceEvaluationTime: Foundation.Date?
        /// The name of the application.
        /// This member is required.
        public var name: Swift.String?
        /// The current resiliency score for the application.
        public var resiliencyScore: Swift.Double
        /// Recovery Point Objective (RPO) in seconds.
        public var rpoInSecs: Swift.Int?
        /// Recovery Time Objective (RTO) in seconds.
        public var rtoInSecs: Swift.Int?
        /// Status of the application.
        public var status: ResiliencehubClientTypes.AppStatusType?

        public init(
            appArn: Swift.String? = nil,
            assessmentSchedule: ResiliencehubClientTypes.AppAssessmentScheduleType? = nil,
            complianceStatus: ResiliencehubClientTypes.AppComplianceStatusType? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            driftStatus: ResiliencehubClientTypes.AppDriftStatusType? = nil,
            lastAppComplianceEvaluationTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            resiliencyScore: Swift.Double = 0.0,
            rpoInSecs: Swift.Int? = nil,
            rtoInSecs: Swift.Int? = nil,
            status: ResiliencehubClientTypes.AppStatusType? = nil
        )
        {
            self.appArn = appArn
            self.assessmentSchedule = assessmentSchedule
            self.complianceStatus = complianceStatus
            self.creationTime = creationTime
            self.description = description
            self.driftStatus = driftStatus
            self.lastAppComplianceEvaluationTime = lastAppComplianceEvaluationTime
            self.name = name
            self.resiliencyScore = resiliencyScore
            self.rpoInSecs = rpoInSecs
            self.rtoInSecs = rtoInSecs
            self.status = status
        }
    }

}

extension ResiliencehubClientTypes {
    /// Version of an application.
    public struct AppVersionSummary {
        /// Version of an application.
        /// This member is required.
        public var appVersion: Swift.String?
        /// Creation time of the application version.
        public var creationTime: Foundation.Date?
        /// Identifier of the application version.
        public var identifier: Swift.Int?
        /// Name of the application version.
        public var versionName: Swift.String?

        public init(
            appVersion: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            identifier: Swift.Int? = nil,
            versionName: Swift.String? = nil
        )
        {
            self.appVersion = appVersion
            self.creationTime = creationTime
            self.identifier = identifier
            self.versionName = versionName
        }
    }

}

extension ResiliencehubClientTypes {
    /// Defines the operational recommendation item that needs a status update.
    public struct UpdateRecommendationStatusItem {
        /// Resource identifier of the operational recommendation item.
        public var resourceId: Swift.String?
        /// Identifier of the target Amazon Web Services account.
        public var targetAccountId: Swift.String?
        /// Identifier of the target Amazon Web Services Region.
        public var targetRegion: Swift.String?

        public init(
            resourceId: Swift.String? = nil,
            targetAccountId: Swift.String? = nil,
            targetRegion: Swift.String? = nil
        )
        {
            self.resourceId = resourceId
            self.targetAccountId = targetAccountId
            self.targetRegion = targetRegion
        }
    }

}

extension ResiliencehubClientTypes {
    /// Defines the operational recommendation item that is to be included or excluded.
    public struct UpdateRecommendationStatusRequestEntry {
        /// An identifier for an entry in this batch that is used to communicate the result. The entryIds of a batch request need to be unique within a request.
        /// This member is required.
        public var entryId: Swift.String?
        /// Indicates the reason for excluding an operational recommendation.
        public var excludeReason: ResiliencehubClientTypes.ExcludeRecommendationReason?
        /// Indicates if the operational recommendation needs to be excluded. If set to True, the operational recommendation will be excluded.
        /// This member is required.
        public var excluded: Swift.Bool?
        /// The operational recommendation item.
        /// This member is required.
        public var item: ResiliencehubClientTypes.UpdateRecommendationStatusItem?
        /// Reference identifier of the operational recommendation item.
        /// This member is required.
        public var referenceId: Swift.String?

        public init(
            entryId: Swift.String? = nil,
            excludeReason: ResiliencehubClientTypes.ExcludeRecommendationReason? = nil,
            excluded: Swift.Bool? = nil,
            item: ResiliencehubClientTypes.UpdateRecommendationStatusItem? = nil,
            referenceId: Swift.String? = nil
        )
        {
            self.entryId = entryId
            self.excludeReason = excludeReason
            self.excluded = excluded
            self.item = item
            self.referenceId = referenceId
        }
    }

}

public struct BatchUpdateRecommendationStatusInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Defines the list of operational recommendations that need to be included or excluded.
    /// This member is required.
    public var requestEntries: [ResiliencehubClientTypes.UpdateRecommendationStatusRequestEntry]?

    public init(
        appArn: Swift.String? = nil,
        requestEntries: [ResiliencehubClientTypes.UpdateRecommendationStatusRequestEntry]? = nil
    )
    {
        self.appArn = appArn
        self.requestEntries = requestEntries
    }
}

extension ResiliencehubClientTypes {
    /// List of operational recommendations that did not get included or excluded.
    public struct BatchUpdateRecommendationStatusFailedEntry {
        /// An identifier of an entry in this batch that is used to communicate the result. The entryIds of a batch request need to be unique within a request.
        /// This member is required.
        public var entryId: Swift.String?
        /// Indicates the error that occurred while excluding an operational recommendation.
        /// This member is required.
        public var errorMessage: Swift.String?

        public init(
            entryId: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.entryId = entryId
            self.errorMessage = errorMessage
        }
    }

}

extension ResiliencehubClientTypes {
    /// List of operational recommendations that were successfully included or excluded.
    public struct BatchUpdateRecommendationStatusSuccessfulEntry {
        /// An identifier for an entry in this batch that is used to communicate the result. The entryIds of a batch request need to be unique within a request.
        /// This member is required.
        public var entryId: Swift.String?
        /// Indicates the reason for excluding an operational recommendation.
        public var excludeReason: ResiliencehubClientTypes.ExcludeRecommendationReason?
        /// Indicates if the operational recommendation was successfully excluded.
        /// This member is required.
        public var excluded: Swift.Bool?
        /// The operational recommendation item.
        /// This member is required.
        public var item: ResiliencehubClientTypes.UpdateRecommendationStatusItem?
        /// Reference identifier of the operational recommendation.
        /// This member is required.
        public var referenceId: Swift.String?

        public init(
            entryId: Swift.String? = nil,
            excludeReason: ResiliencehubClientTypes.ExcludeRecommendationReason? = nil,
            excluded: Swift.Bool? = nil,
            item: ResiliencehubClientTypes.UpdateRecommendationStatusItem? = nil,
            referenceId: Swift.String? = nil
        )
        {
            self.entryId = entryId
            self.excludeReason = excludeReason
            self.excluded = excluded
            self.item = item
            self.referenceId = referenceId
        }
    }

}

public struct BatchUpdateRecommendationStatusOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// A list of items with error details about each item, which could not be included or excluded.
    /// This member is required.
    public var failedEntries: [ResiliencehubClientTypes.BatchUpdateRecommendationStatusFailedEntry]?
    /// A list of items that were included or excluded.
    /// This member is required.
    public var successfulEntries: [ResiliencehubClientTypes.BatchUpdateRecommendationStatusSuccessfulEntry]?

    public init(
        appArn: Swift.String? = nil,
        failedEntries: [ResiliencehubClientTypes.BatchUpdateRecommendationStatusFailedEntry]? = nil,
        successfulEntries: [ResiliencehubClientTypes.BatchUpdateRecommendationStatusSuccessfulEntry]? = nil
    )
    {
        self.appArn = appArn
        self.failedEntries = failedEntries
        self.successfulEntries = successfulEntries
    }
}

public struct CreateAppInput {
    /// Assessment execution schedule with 'Daily' or 'Disabled' values.
    public var assessmentSchedule: ResiliencehubClientTypes.AppAssessmentScheduleType?
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?
    /// The optional description for an app.
    public var description: Swift.String?
    /// The list of events you would like to subscribe and get notification for. Currently, Resilience Hub supports only Drift detected and Scheduled assessment failure events notification.
    public var eventSubscriptions: [ResiliencehubClientTypes.EventSubscription]?
    /// Name of the application.
    /// This member is required.
    public var name: Swift.String?
    /// Defines the roles and credentials that Resilience Hub would use while creating the application, importing its resources, and running an assessment.
    public var permissionModel: ResiliencehubClientTypes.PermissionModel?
    /// Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:partition:resiliencehub:region:account:resiliency-policy/policy-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    public var policyArn: Swift.String?
    /// Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.
    public var tags: [Swift.String: Swift.String]?

    public init(
        assessmentSchedule: ResiliencehubClientTypes.AppAssessmentScheduleType? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        eventSubscriptions: [ResiliencehubClientTypes.EventSubscription]? = nil,
        name: Swift.String? = nil,
        permissionModel: ResiliencehubClientTypes.PermissionModel? = nil,
        policyArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.assessmentSchedule = assessmentSchedule
        self.clientToken = clientToken
        self.description = description
        self.eventSubscriptions = eventSubscriptions
        self.name = name
        self.permissionModel = permissionModel
        self.policyArn = policyArn
        self.tags = tags
    }
}

extension CreateAppInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAppInput(assessmentSchedule: \(Swift.String(describing: assessmentSchedule)), clientToken: \(Swift.String(describing: clientToken)), description: \(Swift.String(describing: description)), eventSubscriptions: \(Swift.String(describing: eventSubscriptions)), name: \(Swift.String(describing: name)), permissionModel: \(Swift.String(describing: permissionModel)), policyArn: \(Swift.String(describing: policyArn)), tags: \"CONTENT_REDACTED\")"}
}

public struct CreateAppOutput {
    /// The created application returned as an object with details including compliance status, creation time, description, resiliency score, and more.
    /// This member is required.
    public var app: ResiliencehubClientTypes.App?

    public init(
        app: ResiliencehubClientTypes.App? = nil
    )
    {
        self.app = app
    }
}

public struct CreateAppVersionAppComponentInput {
    /// Currently, there is no supported additional information for Application Components.
    public var additionalInfo: [Swift.String: [Swift.String]]?
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?
    /// Identifier of the Application Component.
    public var id: Swift.String?
    /// Name of the Application Component.
    /// This member is required.
    public var name: Swift.String?
    /// Type of Application Component. For more information about the types of Application Component, see [Grouping resources in an AppComponent](https://docs.aws.amazon.com/resilience-hub/latest/userguide/AppComponent.grouping.html).
    /// This member is required.
    public var type: Swift.String?

    public init(
        additionalInfo: [Swift.String: [Swift.String]]? = nil,
        appArn: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.appArn = appArn
        self.clientToken = clientToken
        self.id = id
        self.name = name
        self.type = type
    }
}

public struct CreateAppVersionAppComponentOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// List of Application Components that belong to this resource.
    public var appComponent: ResiliencehubClientTypes.AppComponent?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appComponent: ResiliencehubClientTypes.AppComponent? = nil,
        appVersion: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appComponent = appComponent
        self.appVersion = appVersion
    }
}

extension ResiliencehubClientTypes {
    /// Defines a logical resource identifier.
    public struct LogicalResourceId {
        /// Name of the Amazon Elastic Kubernetes Service cluster and namespace this resource belongs to. This parameter accepts values in "eks-cluster/namespace" format.
        public var eksSourceName: Swift.String?
        /// Identifier of the resource.
        /// This member is required.
        public var identifier: Swift.String?
        /// The name of the CloudFormation stack this resource belongs to.
        public var logicalStackName: Swift.String?
        /// The name of the resource group that this resource belongs to.
        public var resourceGroupName: Swift.String?
        /// The name of the Terraform S3 state file this resource belongs to.
        public var terraformSourceName: Swift.String?

        public init(
            eksSourceName: Swift.String? = nil,
            identifier: Swift.String? = nil,
            logicalStackName: Swift.String? = nil,
            resourceGroupName: Swift.String? = nil,
            terraformSourceName: Swift.String? = nil
        )
        {
            self.eksSourceName = eksSourceName
            self.identifier = identifier
            self.logicalStackName = logicalStackName
            self.resourceGroupName = resourceGroupName
            self.terraformSourceName = terraformSourceName
        }
    }

}

public struct CreateAppVersionResourceInput {
    /// Currently, there is no supported additional information for resources.
    public var additionalInfo: [Swift.String: [Swift.String]]?
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// List of Application Components that this resource belongs to. If an Application Component is not part of the Resilience Hub application, it will be added.
    /// This member is required.
    public var appComponents: [Swift.String]?
    /// Amazon Web Services account that owns the physical resource.
    public var awsAccountId: Swift.String?
    /// Amazon Web Services region that owns the physical resource.
    public var awsRegion: Swift.String?
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?
    /// Logical identifier of the resource.
    /// This member is required.
    public var logicalResourceId: ResiliencehubClientTypes.LogicalResourceId?
    /// Physical identifier of the resource.
    /// This member is required.
    public var physicalResourceId: Swift.String?
    /// Name of the resource.
    public var resourceName: Swift.String?
    /// Type of resource.
    /// This member is required.
    public var resourceType: Swift.String?

    public init(
        additionalInfo: [Swift.String: [Swift.String]]? = nil,
        appArn: Swift.String? = nil,
        appComponents: [Swift.String]? = nil,
        awsAccountId: Swift.String? = nil,
        awsRegion: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        logicalResourceId: ResiliencehubClientTypes.LogicalResourceId? = nil,
        physicalResourceId: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.appArn = appArn
        self.appComponents = appComponents
        self.awsAccountId = awsAccountId
        self.awsRegion = awsRegion
        self.clientToken = clientToken
        self.logicalResourceId = logicalResourceId
        self.physicalResourceId = physicalResourceId
        self.resourceName = resourceName
        self.resourceType = resourceType
    }
}

extension ResiliencehubClientTypes {

    public enum ResourceSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case appTemplate
        case discovered
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceSourceType] {
            return [
                .appTemplate,
                .discovered
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .appTemplate: return "AppTemplate"
            case .discovered: return "Discovered"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines a physical resource. A physical resource is a resource that exists in your account. It can be identified using an Amazon Resource Name (ARN) or an Resilience Hub-native identifier.
    public struct PhysicalResource {
        /// Additional configuration parameters for an Resilience Hub application. If you want to implement additionalInfo through the Resilience Hub console rather than using an API call, see [Configure the application configuration parameters](https://docs.aws.amazon.com/resilience-hub/latest/userguide/app-config-param.html). Currently, this parameter accepts a key-value mapping (in a string format) of only one failover region and one associated account. Key: "failover-regions" Value: "[{"region":"<REGION>", "accounts":[{"id":"<ACCOUNT_ID>"}]}]"
        public var additionalInfo: [Swift.String: [Swift.String]]?
        /// The application components that belong to this resource.
        public var appComponents: [ResiliencehubClientTypes.AppComponent]?
        /// Indicates if a resource is included or excluded from the assessment.
        public var excluded: Swift.Bool?
        /// Logical identifier of the resource.
        /// This member is required.
        public var logicalResourceId: ResiliencehubClientTypes.LogicalResourceId?
        /// Name of the parent resource.
        public var parentResourceName: Swift.String?
        /// Identifier of the physical resource.
        /// This member is required.
        public var physicalResourceId: ResiliencehubClientTypes.PhysicalResourceId?
        /// The name of the resource.
        public var resourceName: Swift.String?
        /// Type of resource.
        /// This member is required.
        public var resourceType: Swift.String?
        /// Type of input source.
        public var sourceType: ResiliencehubClientTypes.ResourceSourceType?

        public init(
            additionalInfo: [Swift.String: [Swift.String]]? = nil,
            appComponents: [ResiliencehubClientTypes.AppComponent]? = nil,
            excluded: Swift.Bool? = nil,
            logicalResourceId: ResiliencehubClientTypes.LogicalResourceId? = nil,
            parentResourceName: Swift.String? = nil,
            physicalResourceId: ResiliencehubClientTypes.PhysicalResourceId? = nil,
            resourceName: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            sourceType: ResiliencehubClientTypes.ResourceSourceType? = nil
        )
        {
            self.additionalInfo = additionalInfo
            self.appComponents = appComponents
            self.excluded = excluded
            self.logicalResourceId = logicalResourceId
            self.parentResourceName = parentResourceName
            self.physicalResourceId = physicalResourceId
            self.resourceName = resourceName
            self.resourceType = resourceType
            self.sourceType = sourceType
        }
    }

}

public struct CreateAppVersionResourceOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?
    /// Defines a physical resource. A physical resource is a resource that exists in your account. It can be identified using an Amazon Resource Name (ARN) or a Resilience Hub-native identifier.
    public var physicalResource: ResiliencehubClientTypes.PhysicalResource?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        physicalResource: ResiliencehubClientTypes.PhysicalResource? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.physicalResource = physicalResource
    }
}

extension ResiliencehubClientTypes {

    public enum TemplateFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cfnJson
        case cfnYaml
        case sdkUnknown(Swift.String)

        public static var allCases: [TemplateFormat] {
            return [
                .cfnJson,
                .cfnYaml
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cfnJson: return "CfnJson"
            case .cfnYaml: return "CfnYaml"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum RenderRecommendationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alarm
        case sop
        case test
        case sdkUnknown(Swift.String)

        public static var allCases: [RenderRecommendationType] {
            return [
                .alarm,
                .sop,
                .test
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "Alarm"
            case .sop: return "Sop"
            case .test: return "Test"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateRecommendationTemplateInput {
    /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var assessmentArn: Swift.String?
    /// The name of the Amazon S3 bucket that will contain the recommendation template.
    public var bucketName: Swift.String?
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?
    /// The format for the recommendation template. CfnJson The template is CloudFormation JSON. CfnYaml The template is CloudFormation YAML.
    public var format: ResiliencehubClientTypes.TemplateFormat?
    /// The name for the recommendation template.
    /// This member is required.
    public var name: Swift.String?
    /// Identifiers for the recommendations used to create a recommendation template.
    public var recommendationIds: [Swift.String]?
    /// An array of strings that specify the recommendation template type or types. Alarm The template is an [AlarmRecommendation] template. Sop The template is a [SopRecommendation] template. Test The template is a [TestRecommendation] template.
    public var recommendationTypes: [ResiliencehubClientTypes.RenderRecommendationType]?
    /// Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.
    public var tags: [Swift.String: Swift.String]?

    public init(
        assessmentArn: Swift.String? = nil,
        bucketName: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        format: ResiliencehubClientTypes.TemplateFormat? = nil,
        name: Swift.String? = nil,
        recommendationIds: [Swift.String]? = nil,
        recommendationTypes: [ResiliencehubClientTypes.RenderRecommendationType]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.assessmentArn = assessmentArn
        self.bucketName = bucketName
        self.clientToken = clientToken
        self.format = format
        self.name = name
        self.recommendationIds = recommendationIds
        self.recommendationTypes = recommendationTypes
        self.tags = tags
    }
}

extension CreateRecommendationTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRecommendationTemplateInput(assessmentArn: \(Swift.String(describing: assessmentArn)), bucketName: \(Swift.String(describing: bucketName)), clientToken: \(Swift.String(describing: clientToken)), format: \(Swift.String(describing: format)), name: \(Swift.String(describing: name)), recommendationIds: \(Swift.String(describing: recommendationIds)), recommendationTypes: \(Swift.String(describing: recommendationTypes)), tags: \"CONTENT_REDACTED\")"}
}

extension ResiliencehubClientTypes {

    public enum RecommendationTemplateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationTemplateStatus] {
            return [
                .failed,
                .inProgress,
                .pending,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// The location of the Amazon S3 bucket.
    public struct S3Location {
        /// The name of the Amazon S3 bucket.
        public var bucket: Swift.String?
        /// The prefix for the Amazon S3 bucket.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.`prefix` = `prefix`
        }
    }

}

extension ResiliencehubClientTypes {
    /// Defines a recommendation template created with the [CreateRecommendationTemplate] action.
    public struct RecommendationTemplate {
        /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        public var appArn: Swift.String?
        /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        /// This member is required.
        public var assessmentArn: Swift.String?
        /// The end time for the action.
        public var endTime: Foundation.Date?
        /// Format of the recommendation template. CfnJson The template is CloudFormation JSON. CfnYaml The template is CloudFormation YAML.
        /// This member is required.
        public var format: ResiliencehubClientTypes.TemplateFormat?
        /// Message for the recommendation template.
        public var message: Swift.String?
        /// Name for the recommendation template.
        /// This member is required.
        public var name: Swift.String?
        /// Indicates if replacements are needed.
        public var needsReplacements: Swift.Bool?
        /// Identifiers for the recommendations used in the recommendation template.
        public var recommendationIds: [Swift.String]?
        /// Amazon Resource Name (ARN) for the recommendation template.
        /// This member is required.
        public var recommendationTemplateArn: Swift.String?
        /// An array of strings that specify the recommendation template type or types. Alarm The template is an [AlarmRecommendation] template. Sop The template is a [SopRecommendation] template. Test The template is a [TestRecommendation] template.
        /// This member is required.
        public var recommendationTypes: [ResiliencehubClientTypes.RenderRecommendationType]?
        /// The start time for the action.
        public var startTime: Foundation.Date?
        /// Status of the action.
        /// This member is required.
        public var status: ResiliencehubClientTypes.RecommendationTemplateStatus?
        /// Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.
        public var tags: [Swift.String: Swift.String]?
        /// The file location of the template.
        public var templatesLocation: ResiliencehubClientTypes.S3Location?

        public init(
            appArn: Swift.String? = nil,
            assessmentArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            format: ResiliencehubClientTypes.TemplateFormat? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            needsReplacements: Swift.Bool? = nil,
            recommendationIds: [Swift.String]? = nil,
            recommendationTemplateArn: Swift.String? = nil,
            recommendationTypes: [ResiliencehubClientTypes.RenderRecommendationType]? = nil,
            startTime: Foundation.Date? = nil,
            status: ResiliencehubClientTypes.RecommendationTemplateStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            templatesLocation: ResiliencehubClientTypes.S3Location? = nil
        )
        {
            self.appArn = appArn
            self.assessmentArn = assessmentArn
            self.endTime = endTime
            self.format = format
            self.message = message
            self.name = name
            self.needsReplacements = needsReplacements
            self.recommendationIds = recommendationIds
            self.recommendationTemplateArn = recommendationTemplateArn
            self.recommendationTypes = recommendationTypes
            self.startTime = startTime
            self.status = status
            self.tags = tags
            self.templatesLocation = templatesLocation
        }
    }

}

extension ResiliencehubClientTypes.RecommendationTemplate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecommendationTemplate(appArn: \(Swift.String(describing: appArn)), assessmentArn: \(Swift.String(describing: assessmentArn)), endTime: \(Swift.String(describing: endTime)), format: \(Swift.String(describing: format)), message: \(Swift.String(describing: message)), name: \(Swift.String(describing: name)), needsReplacements: \(Swift.String(describing: needsReplacements)), recommendationIds: \(Swift.String(describing: recommendationIds)), recommendationTemplateArn: \(Swift.String(describing: recommendationTemplateArn)), recommendationTypes: \(Swift.String(describing: recommendationTypes)), startTime: \(Swift.String(describing: startTime)), status: \(Swift.String(describing: status)), templatesLocation: \(Swift.String(describing: templatesLocation)), tags: \"CONTENT_REDACTED\")"}
}

public struct CreateRecommendationTemplateOutput {
    /// The newly created recommendation template, returned as an object. This object includes the template's name, format, status, tags, Amazon S3 bucket location, and more.
    public var recommendationTemplate: ResiliencehubClientTypes.RecommendationTemplate?

    public init(
        recommendationTemplate: ResiliencehubClientTypes.RecommendationTemplate? = nil
    )
    {
        self.recommendationTemplate = recommendationTemplate
    }
}

public struct CreateResiliencyPolicyInput {
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?
    /// Specifies a high-level geographical location constraint for where your resilience policy data can be stored.
    public var dataLocationConstraint: ResiliencehubClientTypes.DataLocationConstraint?
    /// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds.
    /// This member is required.
    public var policy: [Swift.String: ResiliencehubClientTypes.FailurePolicy]?
    /// The description for the policy.
    public var policyDescription: Swift.String?
    /// The name of the policy
    /// This member is required.
    public var policyName: Swift.String?
    /// Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.
    public var tags: [Swift.String: Swift.String]?
    /// The tier for this resiliency policy, ranging from the highest severity (MissionCritical) to lowest (NonCritical).
    /// This member is required.
    public var tier: ResiliencehubClientTypes.ResiliencyPolicyTier?

    public init(
        clientToken: Swift.String? = nil,
        dataLocationConstraint: ResiliencehubClientTypes.DataLocationConstraint? = nil,
        policy: [Swift.String: ResiliencehubClientTypes.FailurePolicy]? = nil,
        policyDescription: Swift.String? = nil,
        policyName: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        tier: ResiliencehubClientTypes.ResiliencyPolicyTier? = nil
    )
    {
        self.clientToken = clientToken
        self.dataLocationConstraint = dataLocationConstraint
        self.policy = policy
        self.policyDescription = policyDescription
        self.policyName = policyName
        self.tags = tags
        self.tier = tier
    }
}

extension CreateResiliencyPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateResiliencyPolicyInput(clientToken: \(Swift.String(describing: clientToken)), dataLocationConstraint: \(Swift.String(describing: dataLocationConstraint)), policy: \(Swift.String(describing: policy)), policyDescription: \(Swift.String(describing: policyDescription)), policyName: \(Swift.String(describing: policyName)), tier: \(Swift.String(describing: tier)), tags: \"CONTENT_REDACTED\")"}
}

public struct CreateResiliencyPolicyOutput {
    /// The type of resiliency policy that was created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds.
    /// This member is required.
    public var policy: ResiliencehubClientTypes.ResiliencyPolicy?

    public init(
        policy: ResiliencehubClientTypes.ResiliencyPolicy? = nil
    )
    {
        self.policy = policy
    }
}

public struct DeleteAppInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?
    /// A boolean option to force the deletion of an Resilience Hub application.
    public var forceDelete: Swift.Bool?

    public init(
        appArn: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        forceDelete: Swift.Bool? = nil
    )
    {
        self.appArn = appArn
        self.clientToken = clientToken
        self.forceDelete = forceDelete
    }
}

public struct DeleteAppOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?

    public init(
        appArn: Swift.String? = nil
    )
    {
        self.appArn = appArn
    }
}

public struct DeleteAppAssessmentInput {
    /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var assessmentArn: Swift.String?
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?

    public init(
        assessmentArn: Swift.String? = nil,
        clientToken: Swift.String? = nil
    )
    {
        self.assessmentArn = assessmentArn
        self.clientToken = clientToken
    }
}

public struct DeleteAppAssessmentOutput {
    /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var assessmentArn: Swift.String?
    /// The current status of the assessment for the resiliency policy.
    /// This member is required.
    public var assessmentStatus: ResiliencehubClientTypes.AssessmentStatus?

    public init(
        assessmentArn: Swift.String? = nil,
        assessmentStatus: ResiliencehubClientTypes.AssessmentStatus? = nil
    )
    {
        self.assessmentArn = assessmentArn
        self.assessmentStatus = assessmentStatus
    }
}

public struct DeleteAppInputSourceInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?
    /// The namespace on your Amazon Elastic Kubernetes Service cluster that you want to delete from the Resilience Hub application.
    public var eksSourceClusterNamespace: ResiliencehubClientTypes.EksSourceClusterNamespace?
    /// The Amazon Resource Name (ARN) of the imported resource you want to remove from the Resilience Hub application. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    public var sourceArn: Swift.String?
    /// The imported Terraform s3 state ﬁle you want to remove from the Resilience Hub application.
    public var terraformSource: ResiliencehubClientTypes.TerraformSource?

    public init(
        appArn: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        eksSourceClusterNamespace: ResiliencehubClientTypes.EksSourceClusterNamespace? = nil,
        sourceArn: Swift.String? = nil,
        terraformSource: ResiliencehubClientTypes.TerraformSource? = nil
    )
    {
        self.appArn = appArn
        self.clientToken = clientToken
        self.eksSourceClusterNamespace = eksSourceClusterNamespace
        self.sourceArn = sourceArn
        self.terraformSource = terraformSource
    }
}

public struct DeleteAppInputSourceOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    public var appArn: Swift.String?
    /// Name of the input source from where the application resource is imported from.
    public var appInputSource: ResiliencehubClientTypes.AppInputSource?

    public init(
        appArn: Swift.String? = nil,
        appInputSource: ResiliencehubClientTypes.AppInputSource? = nil
    )
    {
        self.appArn = appArn
        self.appInputSource = appInputSource
    }
}

public struct DeleteAppVersionAppComponentInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?
    /// Identifier of the Application Component.
    /// This member is required.
    public var id: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.clientToken = clientToken
        self.id = id
    }
}

public struct DeleteAppVersionAppComponentOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// List of Application Components that belong to this resource.
    public var appComponent: ResiliencehubClientTypes.AppComponent?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appComponent: ResiliencehubClientTypes.AppComponent? = nil,
        appVersion: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appComponent = appComponent
        self.appVersion = appVersion
    }
}

public struct DeleteAppVersionResourceInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Amazon Web Services account that owns the physical resource.
    public var awsAccountId: Swift.String?
    /// Amazon Web Services region that owns the physical resource.
    public var awsRegion: Swift.String?
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?
    /// Logical identifier of the resource.
    public var logicalResourceId: ResiliencehubClientTypes.LogicalResourceId?
    /// Physical identifier of the resource.
    public var physicalResourceId: Swift.String?
    /// Name of the resource.
    public var resourceName: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        awsAccountId: Swift.String? = nil,
        awsRegion: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        logicalResourceId: ResiliencehubClientTypes.LogicalResourceId? = nil,
        physicalResourceId: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.awsAccountId = awsAccountId
        self.awsRegion = awsRegion
        self.clientToken = clientToken
        self.logicalResourceId = logicalResourceId
        self.physicalResourceId = physicalResourceId
        self.resourceName = resourceName
    }
}

public struct DeleteAppVersionResourceOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?
    /// Defines a physical resource. A physical resource is a resource that exists in your account. It can be identified using an Amazon Resource Name (ARN) or a Resilience Hub-native identifier.
    public var physicalResource: ResiliencehubClientTypes.PhysicalResource?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        physicalResource: ResiliencehubClientTypes.PhysicalResource? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.physicalResource = physicalResource
    }
}

public struct DeleteRecommendationTemplateInput {
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) for a recommendation template.
    /// This member is required.
    public var recommendationTemplateArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        recommendationTemplateArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.recommendationTemplateArn = recommendationTemplateArn
    }
}

public struct DeleteRecommendationTemplateOutput {
    /// The Amazon Resource Name (ARN) for a recommendation template.
    /// This member is required.
    public var recommendationTemplateArn: Swift.String?
    /// Status of the action.
    /// This member is required.
    public var status: ResiliencehubClientTypes.RecommendationTemplateStatus?

    public init(
        recommendationTemplateArn: Swift.String? = nil,
        status: ResiliencehubClientTypes.RecommendationTemplateStatus? = nil
    )
    {
        self.recommendationTemplateArn = recommendationTemplateArn
        self.status = status
    }
}

public struct DeleteResiliencyPolicyInput {
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?
    /// Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:partition:resiliencehub:region:account:resiliency-policy/policy-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var policyArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        policyArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.policyArn = policyArn
    }
}

public struct DeleteResiliencyPolicyOutput {
    /// Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:partition:resiliencehub:region:account:resiliency-policy/policy-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var policyArn: Swift.String?

    public init(
        policyArn: Swift.String? = nil
    )
    {
        self.policyArn = policyArn
    }
}

public struct DescribeAppInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?

    public init(
        appArn: Swift.String? = nil
    )
    {
        self.appArn = appArn
    }
}

public struct DescribeAppOutput {
    /// The specified application, returned as an object with details including compliance status, creation time, description, resiliency score, and more.
    /// This member is required.
    public var app: ResiliencehubClientTypes.App?

    public init(
        app: ResiliencehubClientTypes.App? = nil
    )
    {
        self.app = app
    }
}

public struct DescribeAppAssessmentInput {
    /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var assessmentArn: Swift.String?

    public init(
        assessmentArn: Swift.String? = nil
    )
    {
        self.assessmentArn = assessmentArn
    }
}

public struct DescribeAppAssessmentOutput {
    /// The assessment for an Resilience Hub application, returned as an object. This object includes Amazon Resource Names (ARNs), compliance information, compliance status, cost, messages, resiliency scores, and more.
    /// This member is required.
    public var assessment: ResiliencehubClientTypes.AppAssessment?

    public init(
        assessment: ResiliencehubClientTypes.AppAssessment? = nil
    )
    {
        self.assessment = assessment
    }
}

public struct DescribeAppVersionInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
    }
}

public struct DescribeAppVersionOutput {
    /// Additional configuration parameters for an Resilience Hub application. If you want to implement additionalInfo through the Resilience Hub console rather than using an API call, see [Configure the application configuration parameters](https://docs.aws.amazon.com/resilience-hub/latest/userguide/app-config-param.html). Currently, this parameter supports only failover region and account.
    public var additionalInfo: [Swift.String: [Swift.String]]?
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?

    public init(
        additionalInfo: [Swift.String: [Swift.String]]? = nil,
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.appArn = appArn
        self.appVersion = appVersion
    }
}

public struct DescribeAppVersionAppComponentInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?
    /// Identifier of the Application Component.
    /// This member is required.
    public var id: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.id = id
    }
}

public struct DescribeAppVersionAppComponentOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// List of Application Components that belong to this resource.
    public var appComponent: ResiliencehubClientTypes.AppComponent?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appComponent: ResiliencehubClientTypes.AppComponent? = nil,
        appVersion: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appComponent = appComponent
        self.appVersion = appVersion
    }
}

public struct DescribeAppVersionResourceInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?
    /// Amazon Web Services account that owns the physical resource.
    public var awsAccountId: Swift.String?
    /// Amazon Web Services region that owns the physical resource.
    public var awsRegion: Swift.String?
    /// Logical identifier of the resource.
    public var logicalResourceId: ResiliencehubClientTypes.LogicalResourceId?
    /// Physical identifier of the resource.
    public var physicalResourceId: Swift.String?
    /// Name of the resource.
    public var resourceName: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        awsAccountId: Swift.String? = nil,
        awsRegion: Swift.String? = nil,
        logicalResourceId: ResiliencehubClientTypes.LogicalResourceId? = nil,
        physicalResourceId: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.awsAccountId = awsAccountId
        self.awsRegion = awsRegion
        self.logicalResourceId = logicalResourceId
        self.physicalResourceId = physicalResourceId
        self.resourceName = resourceName
    }
}

public struct DescribeAppVersionResourceOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?
    /// Defines a physical resource. A physical resource is a resource that exists in your account. It can be identified using an Amazon Resource Name (ARN) or a Resilience Hub-native identifier.
    public var physicalResource: ResiliencehubClientTypes.PhysicalResource?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        physicalResource: ResiliencehubClientTypes.PhysicalResource? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.physicalResource = physicalResource
    }
}

public struct DescribeAppVersionResourcesResolutionStatusInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The version of the application.
    /// This member is required.
    public var appVersion: Swift.String?
    /// The identifier for a specific resolution.
    public var resolutionId: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        resolutionId: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.resolutionId = resolutionId
    }
}

extension ResiliencehubClientTypes {

    public enum ResourceResolutionStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceResolutionStatusType] {
            return [
                .failed,
                .inProgress,
                .pending,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeAppVersionResourcesResolutionStatusOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The version of the application.
    /// This member is required.
    public var appVersion: Swift.String?
    /// The returned error message for the request.
    public var errorMessage: Swift.String?
    /// The identifier for a specific resolution.
    /// This member is required.
    public var resolutionId: Swift.String?
    /// Status of the action.
    /// This member is required.
    public var status: ResiliencehubClientTypes.ResourceResolutionStatusType?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        resolutionId: Swift.String? = nil,
        status: ResiliencehubClientTypes.ResourceResolutionStatusType? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.errorMessage = errorMessage
        self.resolutionId = resolutionId
        self.status = status
    }
}

public struct DescribeAppVersionTemplateInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The version of the application.
    /// This member is required.
    public var appVersion: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
    }
}

public struct DescribeAppVersionTemplateOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// A JSON string that provides information about your application structure. To learn more about the appTemplateBody template, see the sample template provided in the Examples section. The appTemplateBody JSON string has the following structure:
    ///
    /// * resources The list of logical resources that must be included in the Resilience Hub application. Type: Array Don't add the resources that you want to exclude. Each resources array item includes the following fields:
    ///
    /// * logicalResourceId Logical identifier of the resource. Type: Object Each logicalResourceId object includes the following fields:
    ///
    /// * identifier Identifier of the resource. Type: String
    ///
    /// * logicalStackName The name of the CloudFormation stack this resource belongs to. Type: String
    ///
    /// * resourceGroupName The name of the resource group this resource belongs to. Type: String
    ///
    /// * terraformSourceName The name of the Terraform S3 state file this resource belongs to. Type: String
    ///
    /// * eksSourceName Name of the Amazon Elastic Kubernetes Service cluster and namespace this resource belongs to. This parameter accepts values in "eks-cluster/namespace" format. Type: String
    ///
    ///
    ///
    ///
    /// * type The type of resource. Type: string
    ///
    /// * name The name of the resource. Type: String
    ///
    /// * additionalInfo Additional configuration parameters for an Resilience Hub application. If you want to implement additionalInfo through the Resilience Hub console rather than using an API call, see [Configure the application configuration parameters](https://docs.aws.amazon.com/resilience-hub/latest/userguide/app-config-param.html). Currently, this parameter accepts a key-value mapping (in a string format) of only one failover region and one associated account. Key: "failover-regions" Value: "[{"region":"<REGION>", "accounts":[{"id":"<ACCOUNT_ID>"}]}]"
    ///
    ///
    ///
    ///
    /// * appComponents List of Application Components that this resource belongs to. If an Application Component is not part of the Resilience Hub application, it will be added. Type: Array Each appComponents array item includes the following fields:
    ///
    /// * name Name of the Application Component. Type: String
    ///
    /// * type Type of Application Component. For more information about the types of Application Component, see [Grouping resources in an AppComponent](https://docs.aws.amazon.com/resilience-hub/latest/userguide/AppComponent.grouping.html). Type: String
    ///
    /// * resourceNames The list of included resources that are assigned to the Application Component. Type: Array of strings
    ///
    /// * additionalInfo Additional configuration parameters for an Resilience Hub application. If you want to implement additionalInfo through the Resilience Hub console rather than using an API call, see [Configure the application configuration parameters](https://docs.aws.amazon.com/resilience-hub/latest/userguide/app-config-param.html). Currently, this parameter accepts a key-value mapping (in a string format) of only one failover region and one associated account. Key: "failover-regions" Value: "[{"region":"<REGION>", "accounts":[{"id":"<ACCOUNT_ID>"}]}]"
    ///
    ///
    ///
    ///
    /// * excludedResources The list of logical resource identifiers to be excluded from the application. Type: Array Don't add the resources that you want to include. Each excludedResources array item includes the following fields:
    ///
    /// * logicalResourceIds Logical identifier of the resource. Type: Object You can configure only one of the following fields:
    ///
    /// * logicalStackName
    ///
    /// * resourceGroupName
    ///
    /// * terraformSourceName
    ///
    /// * eksSourceName
    ///
    ///
    /// Each logicalResourceIds object includes the following fields:
    ///
    /// * identifier Identifier of the resource. Type: String
    ///
    /// * logicalStackName The name of the CloudFormation stack this resource belongs to. Type: String
    ///
    /// * resourceGroupName The name of the resource group this resource belongs to. Type: String
    ///
    /// * terraformSourceName The name of the Terraform S3 state file this resource belongs to. Type: String
    ///
    /// * eksSourceName Name of the Amazon Elastic Kubernetes Service cluster and namespace this resource belongs to. This parameter accepts values in "eks-cluster/namespace" format. Type: String
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    /// * version Resilience Hub application version.
    ///
    /// * additionalInfo Additional configuration parameters for an Resilience Hub application. If you want to implement additionalInfo through the Resilience Hub console rather than using an API call, see [Configure the application configuration parameters](https://docs.aws.amazon.com/resilience-hub/latest/userguide/app-config-param.html). Currently, this parameter accepts a key-value mapping (in a string format) of only one failover region and one associated account. Key: "failover-regions" Value: "[{"region":"<REGION>", "accounts":[{"id":"<ACCOUNT_ID>"}]}]"
    /// This member is required.
    public var appTemplateBody: Swift.String?
    /// The version of the application.
    /// This member is required.
    public var appVersion: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appTemplateBody: Swift.String? = nil,
        appVersion: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appTemplateBody = appTemplateBody
        self.appVersion = appVersion
    }
}

public struct DescribeDraftAppVersionResourcesImportStatusInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?

    public init(
        appArn: Swift.String? = nil
    )
    {
        self.appArn = appArn
    }
}

extension ResiliencehubClientTypes {

    public enum ResourceImportStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceImportStatusType] {
            return [
                .failed,
                .inProgress,
                .pending,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeDraftAppVersionResourcesImportStatusOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The version of the application.
    /// This member is required.
    public var appVersion: Swift.String?
    /// The returned error message for the request.
    public var errorMessage: Swift.String?
    /// Status of the action.
    /// This member is required.
    public var status: ResiliencehubClientTypes.ResourceImportStatusType?
    /// The time when the status last changed.
    /// This member is required.
    public var statusChangeTime: Foundation.Date?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        status: ResiliencehubClientTypes.ResourceImportStatusType? = nil,
        statusChangeTime: Foundation.Date? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.errorMessage = errorMessage
        self.status = status
        self.statusChangeTime = statusChangeTime
    }
}

public struct DescribeResiliencyPolicyInput {
    /// Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:partition:resiliencehub:region:account:resiliency-policy/policy-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var policyArn: Swift.String?

    public init(
        policyArn: Swift.String? = nil
    )
    {
        self.policyArn = policyArn
    }
}

public struct DescribeResiliencyPolicyOutput {
    /// Information about the specific resiliency policy, returned as an object. This object includes creation time, data location constraints, its name, description, tags, the recovery time objective (RTO) and recovery point objective (RPO) in seconds, and more.
    /// This member is required.
    public var policy: ResiliencehubClientTypes.ResiliencyPolicy?

    public init(
        policy: ResiliencehubClientTypes.ResiliencyPolicy? = nil
    )
    {
        self.policy = policy
    }
}

public struct DescribeResourceGroupingRecommendationTaskInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Indicates the identifier of the grouping recommendation task.
    public var groupingId: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        groupingId: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.groupingId = groupingId
    }
}

extension ResiliencehubClientTypes {

    public enum ResourcesGroupingRecGenStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourcesGroupingRecGenStatusType] {
            return [
                .failed,
                .inProgress,
                .pending,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeResourceGroupingRecommendationTaskOutput {
    /// Indicates the error that occurred while generating a grouping recommendation.
    public var errorMessage: Swift.String?
    /// Indicates the identifier of the grouping recommendation task.
    /// This member is required.
    public var groupingId: Swift.String?
    /// Status of the action.
    /// This member is required.
    public var status: ResiliencehubClientTypes.ResourcesGroupingRecGenStatusType?

    public init(
        errorMessage: Swift.String? = nil,
        groupingId: Swift.String? = nil,
        status: ResiliencehubClientTypes.ResourcesGroupingRecGenStatusType? = nil
    )
    {
        self.errorMessage = errorMessage
        self.groupingId = groupingId
        self.status = status
    }
}

extension ResiliencehubClientTypes {
    /// The input source of the Amazon Elastic Kubernetes Service cluster.
    public struct EksSource {
        /// Amazon Resource Name (ARN) of the Amazon Elastic Kubernetes Service cluster. The format for this ARN is: arn:aws:eks:region:account-id:cluster/cluster-name. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        /// This member is required.
        public var eksClusterArn: Swift.String?
        /// The list of namespaces located on your Amazon Elastic Kubernetes Service cluster.
        /// This member is required.
        public var namespaces: [Swift.String]?

        public init(
            eksClusterArn: Swift.String? = nil,
            namespaces: [Swift.String]? = nil
        )
        {
            self.eksClusterArn = eksClusterArn
            self.namespaces = namespaces
        }
    }

}

extension ResiliencehubClientTypes {

    public enum ResourceImportStrategyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case addOnly
        case replaceAll
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceImportStrategyType] {
            return [
                .addOnly,
                .replaceAll
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .addOnly: return "AddOnly"
            case .replaceAll: return "ReplaceAll"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ImportResourcesToDraftAppVersionInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The input sources of the Amazon Elastic Kubernetes Service resources you need to import.
    public var eksSources: [ResiliencehubClientTypes.EksSource]?
    /// The import strategy you would like to set to import resources into Resilience Hub application.
    public var importStrategy: ResiliencehubClientTypes.ResourceImportStrategyType?
    /// The Amazon Resource Names (ARNs) for the resources.
    public var sourceArns: [Swift.String]?
    /// A list of terraform file s3 URLs you need to import.
    public var terraformSources: [ResiliencehubClientTypes.TerraformSource]?

    public init(
        appArn: Swift.String? = nil,
        eksSources: [ResiliencehubClientTypes.EksSource]? = nil,
        importStrategy: ResiliencehubClientTypes.ResourceImportStrategyType? = nil,
        sourceArns: [Swift.String]? = nil,
        terraformSources: [ResiliencehubClientTypes.TerraformSource]? = nil
    )
    {
        self.appArn = appArn
        self.eksSources = eksSources
        self.importStrategy = importStrategy
        self.sourceArns = sourceArns
        self.terraformSources = terraformSources
    }
}

public struct ImportResourcesToDraftAppVersionOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The version of the application.
    /// This member is required.
    public var appVersion: Swift.String?
    /// The input sources of the Amazon Elastic Kubernetes Service resources you have imported.
    public var eksSources: [ResiliencehubClientTypes.EksSource]?
    /// The Amazon Resource Names (ARNs) for the resources you have imported.
    public var sourceArns: [Swift.String]?
    /// Status of the action.
    /// This member is required.
    public var status: ResiliencehubClientTypes.ResourceImportStatusType?
    /// A list of terraform file s3 URLs you have imported.
    public var terraformSources: [ResiliencehubClientTypes.TerraformSource]?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        eksSources: [ResiliencehubClientTypes.EksSource]? = nil,
        sourceArns: [Swift.String]? = nil,
        status: ResiliencehubClientTypes.ResourceImportStatusType? = nil,
        terraformSources: [ResiliencehubClientTypes.TerraformSource]? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.eksSources = eksSources
        self.sourceArns = sourceArns
        self.status = status
        self.terraformSources = terraformSources
    }
}

public struct ListAlarmRecommendationsInput {
    /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var assessmentArn: Swift.String?
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        assessmentArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assessmentArn = assessmentArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAlarmRecommendationsOutput {
    /// The alarm recommendations for an Resilience Hub application, returned as an object. This object includes Application Component names, descriptions, information about whether a recommendation has already been implemented or not, prerequisites, and more.
    /// This member is required.
    public var alarmRecommendations: [ResiliencehubClientTypes.AlarmRecommendation]?
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init(
        alarmRecommendations: [ResiliencehubClientTypes.AlarmRecommendation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.alarmRecommendations = alarmRecommendations
        self.nextToken = nextToken
    }
}

public struct ListAppAssessmentComplianceDriftsInput {
    /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var assessmentArn: Swift.String?
    /// Indicates the maximum number of compliance drifts requested.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        assessmentArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assessmentArn = assessmentArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ResiliencehubClientTypes {

    public enum DifferenceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case added
        case notEqual
        case removed
        case sdkUnknown(Swift.String)

        public static var allCases: [DifferenceType] {
            return [
                .added,
                .notEqual,
                .removed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .added: return "Added"
            case .notEqual: return "NotEqual"
            case .removed: return "Removed"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum DriftType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case applicationCompliance
        case appComponentResiliencyComplianceStatus
        case sdkUnknown(Swift.String)

        public static var allCases: [DriftType] {
            return [
                .applicationCompliance,
                .appComponentResiliencyComplianceStatus
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .applicationCompliance: return "ApplicationCompliance"
            case .appComponentResiliencyComplianceStatus: return "AppComponentResiliencyComplianceStatus"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Indicates the compliance drifts (recovery time objective (RTO) and recovery point objective (RPO)) that were detected for an assessed entity.
    public struct ComplianceDrift {
        /// Assessment identifier that is associated with this drift item.
        public var actualReferenceId: Swift.String?
        /// Actual compliance value of the entity.
        public var actualValue: [Swift.String: ResiliencehubClientTypes.DisruptionCompliance]?
        /// Identifier of your application.
        public var appId: Swift.String?
        /// Published version of your application on which drift was detected.
        public var appVersion: Swift.String?
        /// Difference type between actual and expected recovery point objective (RPO) and recovery time objective (RTO) values. Currently, Resilience Hub supports only NotEqual difference type.
        public var diffType: ResiliencehubClientTypes.DifferenceType?
        /// The type of drift detected. Currently, Resilience Hub supports only ApplicationCompliance drift type.
        public var driftType: ResiliencehubClientTypes.DriftType?
        /// Identifier of an entity in which drift was detected. For compliance drift, the entity ID can be either application ID or the AppComponent ID.
        public var entityId: Swift.String?
        /// The type of entity in which drift was detected. For compliance drifts, Resilience Hub supports AWS::ResilienceHub::AppComponent and AWS::ResilienceHub::Application.
        public var entityType: Swift.String?
        /// Assessment identifier of a previous assessment of the same application version. Resilience Hub uses the previous assessment (associated with the reference identifier) to compare the compliance with the current assessment to identify drifts.
        public var expectedReferenceId: Swift.String?
        /// The expected compliance value of an entity.
        public var expectedValue: [Swift.String: ResiliencehubClientTypes.DisruptionCompliance]?

        public init(
            actualReferenceId: Swift.String? = nil,
            actualValue: [Swift.String: ResiliencehubClientTypes.DisruptionCompliance]? = nil,
            appId: Swift.String? = nil,
            appVersion: Swift.String? = nil,
            diffType: ResiliencehubClientTypes.DifferenceType? = nil,
            driftType: ResiliencehubClientTypes.DriftType? = nil,
            entityId: Swift.String? = nil,
            entityType: Swift.String? = nil,
            expectedReferenceId: Swift.String? = nil,
            expectedValue: [Swift.String: ResiliencehubClientTypes.DisruptionCompliance]? = nil
        )
        {
            self.actualReferenceId = actualReferenceId
            self.actualValue = actualValue
            self.appId = appId
            self.appVersion = appVersion
            self.diffType = diffType
            self.driftType = driftType
            self.entityId = entityId
            self.entityType = entityType
            self.expectedReferenceId = expectedReferenceId
            self.expectedValue = expectedValue
        }
    }

}

public struct ListAppAssessmentComplianceDriftsOutput {
    /// Indicates compliance drifts (recovery time objective (RTO) and recovery point objective (RPO)) detected for an assessed entity.
    /// This member is required.
    public var complianceDrifts: [ResiliencehubClientTypes.ComplianceDrift]?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        complianceDrifts: [ResiliencehubClientTypes.ComplianceDrift]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.complianceDrifts = complianceDrifts
        self.nextToken = nextToken
    }
}

public struct ListAppAssessmentResourceDriftsInput {
    /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var assessmentArn: Swift.String?
    /// Indicates the maximum number of drift results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        assessmentArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assessmentArn = assessmentArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ResiliencehubClientTypes {
    /// Defines a resource identifier for the drifted resource.
    public struct ResourceIdentifier {
        /// Logical identifier of the drifted resource.
        public var logicalResourceId: ResiliencehubClientTypes.LogicalResourceId?
        /// Type of the drifted resource.
        public var resourceType: Swift.String?

        public init(
            logicalResourceId: ResiliencehubClientTypes.LogicalResourceId? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.logicalResourceId = logicalResourceId
            self.resourceType = resourceType
        }
    }

}

extension ResiliencehubClientTypes {
    /// Indicates the resources that have drifted in the current application version.
    public struct ResourceDrift {
        /// Amazon Resource Name (ARN) of the application whose resources have drifted. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
        public var appArn: Swift.String?
        /// Version of the application whose resources have drifted.
        public var appVersion: Swift.String?
        /// Indicates if the resource was added or removed.
        public var diffType: ResiliencehubClientTypes.DifferenceType?
        /// Reference identifier of the resource drift.
        public var referenceId: Swift.String?
        /// Identifier of the drifted resource.
        public var resourceIdentifier: ResiliencehubClientTypes.ResourceIdentifier?

        public init(
            appArn: Swift.String? = nil,
            appVersion: Swift.String? = nil,
            diffType: ResiliencehubClientTypes.DifferenceType? = nil,
            referenceId: Swift.String? = nil,
            resourceIdentifier: ResiliencehubClientTypes.ResourceIdentifier? = nil
        )
        {
            self.appArn = appArn
            self.appVersion = appVersion
            self.diffType = diffType
            self.referenceId = referenceId
            self.resourceIdentifier = resourceIdentifier
        }
    }

}

public struct ListAppAssessmentResourceDriftsOutput {
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?
    /// Indicates all the resource drifts detected for an assessed entity.
    /// This member is required.
    public var resourceDrifts: [ResiliencehubClientTypes.ResourceDrift]?

    public init(
        nextToken: Swift.String? = nil,
        resourceDrifts: [ResiliencehubClientTypes.ResourceDrift]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceDrifts = resourceDrifts
    }
}

public struct ListAppAssessmentsInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    public var appArn: Swift.String?
    /// The name for the assessment.
    public var assessmentName: Swift.String?
    /// The current status of the assessment for the resiliency policy.
    public var assessmentStatus: [ResiliencehubClientTypes.AssessmentStatus]?
    /// The current status of compliance for the resiliency policy.
    public var complianceStatus: ResiliencehubClientTypes.ComplianceStatus?
    /// Specifies the entity that invoked a specific assessment, either a User or the System.
    public var invoker: ResiliencehubClientTypes.AssessmentInvoker?
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?
    /// The default is to sort by ascending startTime. To sort by descending startTime, set reverseOrder to true.
    public var reverseOrder: Swift.Bool?

    public init(
        appArn: Swift.String? = nil,
        assessmentName: Swift.String? = nil,
        assessmentStatus: [ResiliencehubClientTypes.AssessmentStatus]? = nil,
        complianceStatus: ResiliencehubClientTypes.ComplianceStatus? = nil,
        invoker: ResiliencehubClientTypes.AssessmentInvoker? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        reverseOrder: Swift.Bool? = nil
    )
    {
        self.appArn = appArn
        self.assessmentName = assessmentName
        self.assessmentStatus = assessmentStatus
        self.complianceStatus = complianceStatus
        self.invoker = invoker
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reverseOrder = reverseOrder
    }
}

public struct ListAppAssessmentsOutput {
    /// The summaries for the specified assessments, returned as an object. This object includes application versions, associated Amazon Resource Numbers (ARNs), cost, messages, resiliency scores, and more.
    /// This member is required.
    public var assessmentSummaries: [ResiliencehubClientTypes.AppAssessmentSummary]?
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init(
        assessmentSummaries: [ResiliencehubClientTypes.AppAssessmentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assessmentSummaries = assessmentSummaries
        self.nextToken = nextToken
    }
}

public struct ListAppComponentCompliancesInput {
    /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var assessmentArn: Swift.String?
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        assessmentArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assessmentArn = assessmentArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAppComponentCompliancesOutput {
    /// The compliances for an Resilience Hub Application Component, returned as an object. This object contains the names of the Application Components, compliances, costs, resiliency scores, outage scores, and more.
    /// This member is required.
    public var componentCompliances: [ResiliencehubClientTypes.AppComponentCompliance]?
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init(
        componentCompliances: [ResiliencehubClientTypes.AppComponentCompliance]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.componentCompliances = componentCompliances
        self.nextToken = nextToken
    }
}

public struct ListAppComponentRecommendationsInput {
    /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var assessmentArn: Swift.String?
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        assessmentArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assessmentArn = assessmentArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ResiliencehubClientTypes {

    public enum HaArchitecture: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case backupAndRestore
        case multiSite
        case noRecoveryPlan
        case pilotLight
        case warmStandby
        case sdkUnknown(Swift.String)

        public static var allCases: [HaArchitecture] {
            return [
                .backupAndRestore,
                .multiSite,
                .noRecoveryPlan,
                .pilotLight,
                .warmStandby
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .backupAndRestore: return "BackupAndRestore"
            case .multiSite: return "MultiSite"
            case .noRecoveryPlan: return "NoRecoveryPlan"
            case .pilotLight: return "PilotLight"
            case .warmStandby: return "WarmStandby"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum ConfigRecommendationOptimizationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bestAttainable
        case bestAzRecovery
        case bestRegionRecovery
        case leastChange
        case leastCost
        case leastErrors
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigRecommendationOptimizationType] {
            return [
                .bestAttainable,
                .bestAzRecovery,
                .bestRegionRecovery,
                .leastChange,
                .leastCost,
                .leastErrors
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bestAttainable: return "BestAttainable"
            case .bestAzRecovery: return "BestAZRecovery"
            case .bestRegionRecovery: return "BestRegionRecovery"
            case .leastChange: return "LeastChange"
            case .leastCost: return "LeastCost"
            case .leastErrors: return "LeastErrors"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines a disruption compliance recommendation.
    public struct RecommendationDisruptionCompliance {
        /// The expected compliance status after applying the recommended configuration change.
        /// This member is required.
        public var expectedComplianceStatus: ResiliencehubClientTypes.ComplianceStatus?
        /// The expected Recovery Point Objective (RPO) description after applying the recommended configuration change.
        public var expectedRpoDescription: Swift.String?
        /// The expected RPO after applying the recommended configuration change.
        public var expectedRpoInSecs: Swift.Int
        /// The expected Recovery Time Objective (RTO) description after applying the recommended configuration change.
        public var expectedRtoDescription: Swift.String?
        /// The expected RTO after applying the recommended configuration change.
        public var expectedRtoInSecs: Swift.Int

        public init(
            expectedComplianceStatus: ResiliencehubClientTypes.ComplianceStatus? = nil,
            expectedRpoDescription: Swift.String? = nil,
            expectedRpoInSecs: Swift.Int = 0,
            expectedRtoDescription: Swift.String? = nil,
            expectedRtoInSecs: Swift.Int = 0
        )
        {
            self.expectedComplianceStatus = expectedComplianceStatus
            self.expectedRpoDescription = expectedRpoDescription
            self.expectedRpoInSecs = expectedRpoInSecs
            self.expectedRtoDescription = expectedRtoDescription
            self.expectedRtoInSecs = expectedRtoInSecs
        }
    }

}

extension ResiliencehubClientTypes {
    /// Defines a recommendation configuration.
    public struct ConfigRecommendation {
        /// Name of the Application Component.
        public var appComponentName: Swift.String?
        /// The current compliance against the resiliency policy before applying the configuration change.
        public var compliance: [Swift.String: ResiliencehubClientTypes.DisruptionCompliance]?
        /// The cost for the application.
        public var cost: ResiliencehubClientTypes.Cost?
        /// The optional description for an app.
        public var description: Swift.String?
        /// The architecture type.
        public var haArchitecture: ResiliencehubClientTypes.HaArchitecture?
        /// The name of the recommendation configuration.
        /// This member is required.
        public var name: Swift.String?
        /// The type of optimization.
        /// This member is required.
        public var optimizationType: ResiliencehubClientTypes.ConfigRecommendationOptimizationType?
        /// The expected compliance against the resiliency policy after applying the configuration change.
        public var recommendationCompliance: [Swift.String: ResiliencehubClientTypes.RecommendationDisruptionCompliance]?
        /// Reference identifier for the recommendation configuration.
        /// This member is required.
        public var referenceId: Swift.String?
        /// List of the suggested configuration changes.
        public var suggestedChanges: [Swift.String]?

        public init(
            appComponentName: Swift.String? = nil,
            compliance: [Swift.String: ResiliencehubClientTypes.DisruptionCompliance]? = nil,
            cost: ResiliencehubClientTypes.Cost? = nil,
            description: Swift.String? = nil,
            haArchitecture: ResiliencehubClientTypes.HaArchitecture? = nil,
            name: Swift.String? = nil,
            optimizationType: ResiliencehubClientTypes.ConfigRecommendationOptimizationType? = nil,
            recommendationCompliance: [Swift.String: ResiliencehubClientTypes.RecommendationDisruptionCompliance]? = nil,
            referenceId: Swift.String? = nil,
            suggestedChanges: [Swift.String]? = nil
        )
        {
            self.appComponentName = appComponentName
            self.compliance = compliance
            self.cost = cost
            self.description = description
            self.haArchitecture = haArchitecture
            self.name = name
            self.optimizationType = optimizationType
            self.recommendationCompliance = recommendationCompliance
            self.referenceId = referenceId
            self.suggestedChanges = suggestedChanges
        }
    }

}

extension ResiliencehubClientTypes {

    public enum RecommendationComplianceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case breachedCanMeet
        case breachedUnattainable
        case metCanImprove
        case missingPolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationComplianceStatus] {
            return [
                .breachedCanMeet,
                .breachedUnattainable,
                .metCanImprove,
                .missingPolicy
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .breachedCanMeet: return "BreachedCanMeet"
            case .breachedUnattainable: return "BreachedUnattainable"
            case .metCanImprove: return "MetCanImprove"
            case .missingPolicy: return "MissingPolicy"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines recommendations for an Resilience Hub Application Component, returned as an object. This object contains component names, configuration recommendations, and recommendation statuses.
    public struct ComponentRecommendation {
        /// Name of the Application Component.
        /// This member is required.
        public var appComponentName: Swift.String?
        /// List of recommendations.
        /// This member is required.
        public var configRecommendations: [ResiliencehubClientTypes.ConfigRecommendation]?
        /// Status of the recommendation.
        /// This member is required.
        public var recommendationStatus: ResiliencehubClientTypes.RecommendationComplianceStatus?

        public init(
            appComponentName: Swift.String? = nil,
            configRecommendations: [ResiliencehubClientTypes.ConfigRecommendation]? = nil,
            recommendationStatus: ResiliencehubClientTypes.RecommendationComplianceStatus? = nil
        )
        {
            self.appComponentName = appComponentName
            self.configRecommendations = configRecommendations
            self.recommendationStatus = recommendationStatus
        }
    }

}

public struct ListAppComponentRecommendationsOutput {
    /// The recommendations for an Resilience Hub Application Component, returned as an object. This object contains the names of the Application Components, configuration recommendations, and recommendation statuses.
    /// This member is required.
    public var componentRecommendations: [ResiliencehubClientTypes.ComponentRecommendation]?
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init(
        componentRecommendations: [ResiliencehubClientTypes.ComponentRecommendation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.componentRecommendations = componentRecommendations
        self.nextToken = nextToken
    }
}

public struct ListAppInputSourcesInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?
    /// Maximum number of input sources to be displayed per Resilience Hub application.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAppInputSourcesOutput {
    /// The list of Resilience Hub application input sources.
    /// This member is required.
    public var appInputSources: [ResiliencehubClientTypes.AppInputSource]?
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init(
        appInputSources: [ResiliencehubClientTypes.AppInputSource]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appInputSources = appInputSources
        self.nextToken = nextToken
    }
}

public struct ListAppsInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    public var appArn: Swift.String?
    /// Indicates the lower limit of the range that is used to filter applications based on their last assessment times.
    public var fromLastAssessmentTime: Foundation.Date?
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// The name for the one of the listed applications.
    public var name: Swift.String?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?
    /// The application list is sorted based on the values of lastAppComplianceEvaluationTime field. By default, application list is sorted in ascending order. To sort the application list in descending order, set this field to True.
    public var reverseOrder: Swift.Bool?
    /// Indicates the upper limit of the range that is used to filter the applications based on their last assessment times.
    public var toLastAssessmentTime: Foundation.Date?

    public init(
        appArn: Swift.String? = nil,
        fromLastAssessmentTime: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        reverseOrder: Swift.Bool? = nil,
        toLastAssessmentTime: Foundation.Date? = nil
    )
    {
        self.appArn = appArn
        self.fromLastAssessmentTime = fromLastAssessmentTime
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
        self.reverseOrder = reverseOrder
        self.toLastAssessmentTime = toLastAssessmentTime
    }
}

public struct ListAppsOutput {
    /// Summaries for the Resilience Hub application.
    /// This member is required.
    public var appSummaries: [ResiliencehubClientTypes.AppSummary]?
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init(
        appSummaries: [ResiliencehubClientTypes.AppSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appSummaries = appSummaries
        self.nextToken = nextToken
    }
}

public struct ListAppVersionAppComponentsInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Version of the Application Component.
    /// This member is required.
    public var appVersion: Swift.String?
    /// Maximum number of Application Components to be displayed per Resilience Hub application version.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAppVersionAppComponentsOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Defines an Application Component.
    public var appComponents: [ResiliencehubClientTypes.AppComponent]?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appComponents: [ResiliencehubClientTypes.AppComponent]? = nil,
        appVersion: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appComponents = appComponents
        self.appVersion = appVersion
        self.nextToken = nextToken
    }
}

public struct ListAppVersionResourceMappingsInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The version of the application.
    /// This member is required.
    public var appVersion: Swift.String?
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAppVersionResourceMappingsOutput {
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?
    /// Mappings used to map logical resources from the template to physical resources. You can use the mapping type CFN_STACK if the application template uses a logical stack name. Or you can map individual resources by using the mapping type RESOURCE. We recommend using the mapping type CFN_STACK if the application is backed by a CloudFormation stack.
    /// This member is required.
    public var resourceMappings: [ResiliencehubClientTypes.ResourceMapping]?

    public init(
        nextToken: Swift.String? = nil,
        resourceMappings: [ResiliencehubClientTypes.ResourceMapping]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceMappings = resourceMappings
    }
}

public struct ListAppVersionResourcesInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The version of the application.
    /// This member is required.
    public var appVersion: Swift.String?
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?
    /// The identifier for a specific resolution.
    public var resolutionId: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resolutionId: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resolutionId = resolutionId
    }
}

public struct ListAppVersionResourcesOutput {
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?
    /// The physical resources in the application version.
    /// This member is required.
    public var physicalResources: [ResiliencehubClientTypes.PhysicalResource]?
    /// The ID for a specific resolution.
    /// This member is required.
    public var resolutionId: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        physicalResources: [ResiliencehubClientTypes.PhysicalResource]? = nil,
        resolutionId: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.physicalResources = physicalResources
        self.resolutionId = resolutionId
    }
}

public struct ListAppVersionsInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Upper limit of the time range to filter the application versions.
    public var endTime: Foundation.Date?
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?
    /// Lower limit of the time range to filter the application versions.
    public var startTime: Foundation.Date?

    public init(
        appArn: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.appArn = appArn
        self.endTime = endTime
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.startTime = startTime
    }
}

public struct ListAppVersionsOutput {
    /// The version of the application.
    /// This member is required.
    public var appVersions: [ResiliencehubClientTypes.AppVersionSummary]?
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init(
        appVersions: [ResiliencehubClientTypes.AppVersionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appVersions = appVersions
        self.nextToken = nextToken
    }
}

public struct ListRecommendationTemplatesInput {
    /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    public var assessmentArn: Swift.String?
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// The name for one of the listed recommendation templates.
    public var name: Swift.String?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) for a recommendation template.
    public var recommendationTemplateArn: Swift.String?
    /// The default is to sort by ascending startTime. To sort by descending startTime, set reverseOrder to true.
    public var reverseOrder: Swift.Bool?
    /// Status of the action.
    public var status: [ResiliencehubClientTypes.RecommendationTemplateStatus]?

    public init(
        assessmentArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        recommendationTemplateArn: Swift.String? = nil,
        reverseOrder: Swift.Bool? = nil,
        status: [ResiliencehubClientTypes.RecommendationTemplateStatus]? = nil
    )
    {
        self.assessmentArn = assessmentArn
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
        self.recommendationTemplateArn = recommendationTemplateArn
        self.reverseOrder = reverseOrder
        self.status = status
    }
}

public struct ListRecommendationTemplatesOutput {
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?
    /// The recommendation templates for the Resilience Hub applications.
    public var recommendationTemplates: [ResiliencehubClientTypes.RecommendationTemplate]?

    public init(
        nextToken: Swift.String? = nil,
        recommendationTemplates: [ResiliencehubClientTypes.RecommendationTemplate]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendationTemplates = recommendationTemplates
    }
}

public struct ListResiliencyPoliciesInput {
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?
    /// The name of the policy
    public var policyName: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.policyName = policyName
    }
}

public struct ListResiliencyPoliciesOutput {
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?
    /// The resiliency policies for the Resilience Hub applications.
    /// This member is required.
    public var resiliencyPolicies: [ResiliencehubClientTypes.ResiliencyPolicy]?

    public init(
        nextToken: Swift.String? = nil,
        resiliencyPolicies: [ResiliencehubClientTypes.ResiliencyPolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.resiliencyPolicies = resiliencyPolicies
    }
}

public struct ListResourceGroupingRecommendationsInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    public var appArn: Swift.String?
    /// Maximum number of grouping recommendations to be displayed per Resilience Hub application.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ResiliencehubClientTypes {

    public enum GroupingRecommendationConfidenceLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupingRecommendationConfidenceLevel] {
            return [
                .high,
                .medium
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "High"
            case .medium: return "Medium"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Creates a new recommended Application Component (AppComponent).
    public struct GroupingAppComponent {
        /// Indicates the identifier of an AppComponent.
        /// This member is required.
        public var appComponentId: Swift.String?
        /// Indicates the name of an AppComponent.
        /// This member is required.
        public var appComponentName: Swift.String?
        /// Indicates the type of an AppComponent.
        /// This member is required.
        public var appComponentType: Swift.String?

        public init(
            appComponentId: Swift.String? = nil,
            appComponentName: Swift.String? = nil,
            appComponentType: Swift.String? = nil
        )
        {
            self.appComponentId = appComponentId
            self.appComponentName = appComponentName
            self.appComponentType = appComponentType
        }
    }

}

extension ResiliencehubClientTypes {

    public enum GroupingRecommendationRejectionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case distinctBusinessPurpose
        case distinctUserGroupHandling
        case other
        case separateDataConcern
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupingRecommendationRejectionReason] {
            return [
                .distinctBusinessPurpose,
                .distinctUserGroupHandling,
                .other,
                .separateDataConcern
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .distinctBusinessPurpose: return "DistinctBusinessPurpose"
            case .distinctUserGroupHandling: return "DistinctUserGroupHandling"
            case .other: return "Other"
            case .separateDataConcern: return "SeparateDataConcern"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Indicates the resource that will be grouped in the recommended Application Component (AppComponent).
    public struct GroupingResource {
        /// Indicates the logical identifier of the resource.
        /// This member is required.
        public var logicalResourceId: ResiliencehubClientTypes.LogicalResourceId?
        /// Indicates the physical identifier of the resource.
        /// This member is required.
        public var physicalResourceId: ResiliencehubClientTypes.PhysicalResourceId?
        /// Indicates the resource name.
        /// This member is required.
        public var resourceName: Swift.String?
        /// Indicates the resource type.
        /// This member is required.
        public var resourceType: Swift.String?
        /// Indicates the identifier of the source AppComponents in which the resources were previously grouped into.
        /// This member is required.
        public var sourceAppComponentIds: [Swift.String]?

        public init(
            logicalResourceId: ResiliencehubClientTypes.LogicalResourceId? = nil,
            physicalResourceId: ResiliencehubClientTypes.PhysicalResourceId? = nil,
            resourceName: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            sourceAppComponentIds: [Swift.String]? = nil
        )
        {
            self.logicalResourceId = logicalResourceId
            self.physicalResourceId = physicalResourceId
            self.resourceName = resourceName
            self.resourceType = resourceType
            self.sourceAppComponentIds = sourceAppComponentIds
        }
    }

}

extension ResiliencehubClientTypes {

    public enum GroupingRecommendationStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accepted
        case pendingDecision
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupingRecommendationStatusType] {
            return [
                .accepted,
                .pendingDecision,
                .rejected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accepted: return "Accepted"
            case .pendingDecision: return "PendingDecision"
            case .rejected: return "Rejected"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Creates a new grouping recommendation.
    public struct GroupingRecommendation {
        /// Indicates the confidence level of Resilience Hub on the grouping recommendation.
        /// This member is required.
        public var confidenceLevel: ResiliencehubClientTypes.GroupingRecommendationConfidenceLevel?
        /// Indicates the creation time of the grouping recommendation.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// Indicates the name of the recommended Application Component (AppComponent).
        /// This member is required.
        public var groupingAppComponent: ResiliencehubClientTypes.GroupingAppComponent?
        /// Indicates all the reasons available for rejecting a grouping recommendation.
        /// This member is required.
        public var groupingRecommendationId: Swift.String?
        /// Indicates all the reasons available for rejecting a grouping recommendation.
        /// This member is required.
        public var recommendationReasons: [Swift.String]?
        /// Indicates the reason you had selected while rejecting a grouping recommendation.
        public var rejectionReason: ResiliencehubClientTypes.GroupingRecommendationRejectionReason?
        /// Indicates the resources that are grouped in a recommended AppComponent.
        /// This member is required.
        public var resources: [ResiliencehubClientTypes.GroupingResource]?
        /// Indicates the confidence level of the grouping recommendation.
        /// This member is required.
        public var score: Swift.Double
        /// Indicates the status of grouping resources into AppComponents.
        /// This member is required.
        public var status: ResiliencehubClientTypes.GroupingRecommendationStatusType?

        public init(
            confidenceLevel: ResiliencehubClientTypes.GroupingRecommendationConfidenceLevel? = nil,
            creationTime: Foundation.Date? = nil,
            groupingAppComponent: ResiliencehubClientTypes.GroupingAppComponent? = nil,
            groupingRecommendationId: Swift.String? = nil,
            recommendationReasons: [Swift.String]? = nil,
            rejectionReason: ResiliencehubClientTypes.GroupingRecommendationRejectionReason? = nil,
            resources: [ResiliencehubClientTypes.GroupingResource]? = nil,
            score: Swift.Double = 0.0,
            status: ResiliencehubClientTypes.GroupingRecommendationStatusType? = nil
        )
        {
            self.confidenceLevel = confidenceLevel
            self.creationTime = creationTime
            self.groupingAppComponent = groupingAppComponent
            self.groupingRecommendationId = groupingRecommendationId
            self.recommendationReasons = recommendationReasons
            self.rejectionReason = rejectionReason
            self.resources = resources
            self.score = score
            self.status = status
        }
    }

}

public struct ListResourceGroupingRecommendationsOutput {
    /// List of resource grouping recommendations generated by Resilience Hub.
    /// This member is required.
    public var groupingRecommendations: [ResiliencehubClientTypes.GroupingRecommendation]?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        groupingRecommendations: [ResiliencehubClientTypes.GroupingRecommendation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groupingRecommendations = groupingRecommendations
        self.nextToken = nextToken
    }
}

public struct ListSopRecommendationsInput {
    /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var assessmentArn: Swift.String?
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        assessmentArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assessmentArn = assessmentArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ResiliencehubClientTypes {

    public enum SopServiceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ssm
        case sdkUnknown(Swift.String)

        public static var allCases: [SopServiceType] {
            return [
                .ssm
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ssm: return "SSM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines a standard operating procedure (SOP) recommendation.
    public struct SopRecommendation {
        /// Name of the Application Component.
        public var appComponentName: Swift.String?
        /// Description of the SOP recommendation.
        public var description: Swift.String?
        /// The recommendation items.
        public var items: [ResiliencehubClientTypes.RecommendationItem]?
        /// Name of the SOP recommendation.
        public var name: Swift.String?
        /// Prerequisite for the SOP recommendation.
        public var prerequisite: Swift.String?
        /// Identifier for the SOP recommendation.
        /// This member is required.
        public var recommendationId: Swift.String?
        /// Status of the recommended standard operating procedure.
        public var recommendationStatus: ResiliencehubClientTypes.RecommendationStatus?
        /// Reference identifier for the SOP recommendation.
        /// This member is required.
        public var referenceId: Swift.String?
        /// The service type.
        /// This member is required.
        public var serviceType: ResiliencehubClientTypes.SopServiceType?

        public init(
            appComponentName: Swift.String? = nil,
            description: Swift.String? = nil,
            items: [ResiliencehubClientTypes.RecommendationItem]? = nil,
            name: Swift.String? = nil,
            prerequisite: Swift.String? = nil,
            recommendationId: Swift.String? = nil,
            recommendationStatus: ResiliencehubClientTypes.RecommendationStatus? = nil,
            referenceId: Swift.String? = nil,
            serviceType: ResiliencehubClientTypes.SopServiceType? = nil
        )
        {
            self.appComponentName = appComponentName
            self.description = description
            self.items = items
            self.name = name
            self.prerequisite = prerequisite
            self.recommendationId = recommendationId
            self.recommendationStatus = recommendationStatus
            self.referenceId = referenceId
            self.serviceType = serviceType
        }
    }

}

public struct ListSopRecommendationsOutput {
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?
    /// The standard operating procedure (SOP) recommendations for the Resilience Hub applications.
    /// This member is required.
    public var sopRecommendations: [ResiliencehubClientTypes.SopRecommendation]?

    public init(
        nextToken: Swift.String? = nil,
        sopRecommendations: [ResiliencehubClientTypes.SopRecommendation]? = nil
    )
    {
        self.nextToken = nextToken
        self.sopRecommendations = sopRecommendations
    }
}

public struct ListSuggestedResiliencyPoliciesInput {
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListSuggestedResiliencyPoliciesOutput {
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?
    /// The suggested resiliency policies for the Resilience Hub applications.
    /// This member is required.
    public var resiliencyPolicies: [ResiliencehubClientTypes.ResiliencyPolicy]?

    public init(
        nextToken: Swift.String? = nil,
        resiliencyPolicies: [ResiliencehubClientTypes.ResiliencyPolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.resiliencyPolicies = resiliencyPolicies
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) for a specific resource in your Resilience Hub application.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

extension ListTagsForResourceOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutput(tags: \"CONTENT_REDACTED\")"}
}

public struct ListTestRecommendationsInput {
    /// Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:partition:resiliencehub:region:account:app-assessment/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var assessmentArn: Swift.String?
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        assessmentArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assessmentArn = assessmentArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ResiliencehubClientTypes {

    public enum TestRisk: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case medium
        case small
        case sdkUnknown(Swift.String)

        public static var allCases: [TestRisk] {
            return [
                .high,
                .medium,
                .small
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "High"
            case .medium: return "Medium"
            case .small: return "Small"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {

    public enum TestType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case az
        case hardware
        case region
        case software
        case sdkUnknown(Swift.String)

        public static var allCases: [TestType] {
            return [
                .az,
                .hardware,
                .region,
                .software
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .az: return "AZ"
            case .hardware: return "Hardware"
            case .region: return "Region"
            case .software: return "Software"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResiliencehubClientTypes {
    /// Defines a test recommendation.
    public struct TestRecommendation {
        /// Name of the Application Component.
        public var appComponentName: Swift.String?
        /// A list of recommended alarms that are used in the test and must be exported before or with the test.
        public var dependsOnAlarms: [Swift.String]?
        /// Description for the test recommendation.
        public var description: Swift.String?
        /// Intent of the test recommendation.
        public var intent: Swift.String?
        /// The test recommendation items.
        public var items: [ResiliencehubClientTypes.RecommendationItem]?
        /// Name of the test recommendation.
        public var name: Swift.String?
        /// Prerequisite of the test recommendation.
        public var prerequisite: Swift.String?
        /// Identifier for the test recommendation.
        public var recommendationId: Swift.String?
        /// Status of the recommended test.
        public var recommendationStatus: ResiliencehubClientTypes.RecommendationStatus?
        /// Reference identifier for the test recommendation.
        /// This member is required.
        public var referenceId: Swift.String?
        /// Level of risk for this test recommendation.
        public var risk: ResiliencehubClientTypes.TestRisk?
        /// Type of test recommendation.
        public var type: ResiliencehubClientTypes.TestType?

        public init(
            appComponentName: Swift.String? = nil,
            dependsOnAlarms: [Swift.String]? = nil,
            description: Swift.String? = nil,
            intent: Swift.String? = nil,
            items: [ResiliencehubClientTypes.RecommendationItem]? = nil,
            name: Swift.String? = nil,
            prerequisite: Swift.String? = nil,
            recommendationId: Swift.String? = nil,
            recommendationStatus: ResiliencehubClientTypes.RecommendationStatus? = nil,
            referenceId: Swift.String? = nil,
            risk: ResiliencehubClientTypes.TestRisk? = nil,
            type: ResiliencehubClientTypes.TestType? = nil
        )
        {
            self.appComponentName = appComponentName
            self.dependsOnAlarms = dependsOnAlarms
            self.description = description
            self.intent = intent
            self.items = items
            self.name = name
            self.prerequisite = prerequisite
            self.recommendationId = recommendationId
            self.recommendationStatus = recommendationStatus
            self.referenceId = referenceId
            self.risk = risk
            self.type = type
        }
    }

}

public struct ListTestRecommendationsOutput {
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?
    /// The test recommendations for the Resilience Hub application.
    /// This member is required.
    public var testRecommendations: [ResiliencehubClientTypes.TestRecommendation]?

    public init(
        nextToken: Swift.String? = nil,
        testRecommendations: [ResiliencehubClientTypes.TestRecommendation]? = nil
    )
    {
        self.nextToken = nextToken
        self.testRecommendations = testRecommendations
    }
}

public struct ListUnsupportedAppVersionResourcesInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The version of the application.
    /// This member is required.
    public var appVersion: Swift.String?
    /// Maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// Null, or the token from a previous call to get the next set of results.
    public var nextToken: Swift.String?
    /// The identifier for a specific resolution.
    public var resolutionId: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resolutionId: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resolutionId = resolutionId
    }
}

extension ResiliencehubClientTypes {
    /// Defines a resource that is not supported by Resilience Hub.
    public struct UnsupportedResource {
        /// Logical resource identifier for the unsupported resource.
        /// This member is required.
        public var logicalResourceId: ResiliencehubClientTypes.LogicalResourceId?
        /// Physical resource identifier for the unsupported resource.
        /// This member is required.
        public var physicalResourceId: ResiliencehubClientTypes.PhysicalResourceId?
        /// The type of resource.
        /// This member is required.
        public var resourceType: Swift.String?
        /// The status of the unsupported resource.
        public var unsupportedResourceStatus: Swift.String?

        public init(
            logicalResourceId: ResiliencehubClientTypes.LogicalResourceId? = nil,
            physicalResourceId: ResiliencehubClientTypes.PhysicalResourceId? = nil,
            resourceType: Swift.String? = nil,
            unsupportedResourceStatus: Swift.String? = nil
        )
        {
            self.logicalResourceId = logicalResourceId
            self.physicalResourceId = physicalResourceId
            self.resourceType = resourceType
            self.unsupportedResourceStatus = unsupportedResourceStatus
        }
    }

}

public struct ListUnsupportedAppVersionResourcesOutput {
    /// Token for the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?
    /// The identifier for a specific resolution.
    /// This member is required.
    public var resolutionId: Swift.String?
    /// The unsupported resources for the application.
    /// This member is required.
    public var unsupportedResources: [ResiliencehubClientTypes.UnsupportedResource]?

    public init(
        nextToken: Swift.String? = nil,
        resolutionId: Swift.String? = nil,
        unsupportedResources: [ResiliencehubClientTypes.UnsupportedResource]? = nil
    )
    {
        self.nextToken = nextToken
        self.resolutionId = resolutionId
        self.unsupportedResources = unsupportedResources
    }
}

public struct PublishAppVersionInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Name of the application version.
    public var versionName: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        versionName: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.versionName = versionName
    }
}

public struct PublishAppVersionOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The version of the application.
    public var appVersion: Swift.String?
    /// Identifier of the application version.
    public var identifier: Swift.Int?
    /// Name of the application version.
    public var versionName: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        identifier: Swift.Int? = nil,
        versionName: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.identifier = identifier
        self.versionName = versionName
    }
}

public struct PutDraftAppVersionTemplateInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// A JSON string that provides information about your application structure. To learn more about the appTemplateBody template, see the sample template provided in the Examples section. The appTemplateBody JSON string has the following structure:
    ///
    /// * resources The list of logical resources that must be included in the Resilience Hub application. Type: Array Don't add the resources that you want to exclude. Each resources array item includes the following fields:
    ///
    /// * logicalResourceId Logical identifier of the resource. Type: Object Each logicalResourceId object includes the following fields:
    ///
    /// * identifier Identifier of the resource. Type: String
    ///
    /// * logicalStackName The name of the CloudFormation stack this resource belongs to. Type: String
    ///
    /// * resourceGroupName The name of the resource group this resource belongs to. Type: String
    ///
    /// * terraformSourceName The name of the Terraform S3 state file this resource belongs to. Type: String
    ///
    /// * eksSourceName Name of the Amazon Elastic Kubernetes Service cluster and namespace this resource belongs to. This parameter accepts values in "eks-cluster/namespace" format. Type: String
    ///
    ///
    ///
    ///
    /// * type The type of resource. Type: string
    ///
    /// * name The name of the resource. Type: String
    ///
    /// * additionalInfo Additional configuration parameters for an Resilience Hub application. If you want to implement additionalInfo through the Resilience Hub console rather than using an API call, see [Configure the application configuration parameters](https://docs.aws.amazon.com/resilience-hub/latest/userguide/app-config-param.html). Currently, this parameter accepts a key-value mapping (in a string format) of only one failover region and one associated account. Key: "failover-regions" Value: "[{"region":"<REGION>", "accounts":[{"id":"<ACCOUNT_ID>"}]}]"
    ///
    ///
    ///
    ///
    /// * appComponents List of Application Components that this resource belongs to. If an Application Component is not part of the Resilience Hub application, it will be added. Type: Array Each appComponents array item includes the following fields:
    ///
    /// * name Name of the Application Component. Type: String
    ///
    /// * type Type of Application Component. For more information about the types of Application Component, see [Grouping resources in an AppComponent](https://docs.aws.amazon.com/resilience-hub/latest/userguide/AppComponent.grouping.html). Type: String
    ///
    /// * resourceNames The list of included resources that are assigned to the Application Component. Type: Array of strings
    ///
    /// * additionalInfo Additional configuration parameters for an Resilience Hub application. If you want to implement additionalInfo through the Resilience Hub console rather than using an API call, see [Configure the application configuration parameters](https://docs.aws.amazon.com/resilience-hub/latest/userguide/app-config-param.html). Currently, this parameter accepts a key-value mapping (in a string format) of only one failover region and one associated account. Key: "failover-regions" Value: "[{"region":"<REGION>", "accounts":[{"id":"<ACCOUNT_ID>"}]}]"
    ///
    ///
    ///
    ///
    /// * excludedResources The list of logical resource identifiers to be excluded from the application. Type: Array Don't add the resources that you want to include. Each excludedResources array item includes the following fields:
    ///
    /// * logicalResourceIds Logical identifier of the resource. Type: Object You can configure only one of the following fields:
    ///
    /// * logicalStackName
    ///
    /// * resourceGroupName
    ///
    /// * terraformSourceName
    ///
    /// * eksSourceName
    ///
    ///
    /// Each logicalResourceIds object includes the following fields:
    ///
    /// * identifier Identifier of the resource. Type: String
    ///
    /// * logicalStackName The name of the CloudFormation stack this resource belongs to. Type: String
    ///
    /// * resourceGroupName The name of the resource group this resource belongs to. Type: String
    ///
    /// * terraformSourceName The name of the Terraform S3 state file this resource belongs to. Type: String
    ///
    /// * eksSourceName Name of the Amazon Elastic Kubernetes Service cluster and namespace this resource belongs to. This parameter accepts values in "eks-cluster/namespace" format. Type: String
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    /// * version Resilience Hub application version.
    ///
    /// * additionalInfo Additional configuration parameters for an Resilience Hub application. If you want to implement additionalInfo through the Resilience Hub console rather than using an API call, see [Configure the application configuration parameters](https://docs.aws.amazon.com/resilience-hub/latest/userguide/app-config-param.html). Currently, this parameter accepts a key-value mapping (in a string format) of only one failover region and one associated account. Key: "failover-regions" Value: "[{"region":"<REGION>", "accounts":[{"id":"<ACCOUNT_ID>"}]}]"
    /// This member is required.
    public var appTemplateBody: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appTemplateBody: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appTemplateBody = appTemplateBody
    }
}

public struct PutDraftAppVersionTemplateOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    public var appArn: Swift.String?
    /// The version of the application.
    public var appVersion: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
    }
}

extension ResiliencehubClientTypes {
    /// Indicates the rejected grouping recommendation.
    public struct RejectGroupingRecommendationEntry {
        /// Indicates the identifier of the grouping recommendation.
        /// This member is required.
        public var groupingRecommendationId: Swift.String?
        /// Indicates the reason you had selected while rejecting a grouping recommendation.
        public var rejectionReason: ResiliencehubClientTypes.GroupingRecommendationRejectionReason?

        public init(
            groupingRecommendationId: Swift.String? = nil,
            rejectionReason: ResiliencehubClientTypes.GroupingRecommendationRejectionReason? = nil
        )
        {
            self.groupingRecommendationId = groupingRecommendationId
            self.rejectionReason = rejectionReason
        }
    }

}

public struct RejectResourceGroupingRecommendationsInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Indicates the list of resource grouping recommendations you have selected to exclude from your application.
    /// This member is required.
    public var entries: [ResiliencehubClientTypes.RejectGroupingRecommendationEntry]?

    public init(
        appArn: Swift.String? = nil,
        entries: [ResiliencehubClientTypes.RejectGroupingRecommendationEntry]? = nil
    )
    {
        self.appArn = appArn
        self.entries = entries
    }
}

public struct RejectResourceGroupingRecommendationsOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Indicates the list of resource grouping recommendations that failed to get excluded in your application.
    /// This member is required.
    public var failedEntries: [ResiliencehubClientTypes.FailedGroupingRecommendationEntry]?

    public init(
        appArn: Swift.String? = nil,
        failedEntries: [ResiliencehubClientTypes.FailedGroupingRecommendationEntry]? = nil
    )
    {
        self.appArn = appArn
        self.failedEntries = failedEntries
    }
}

public struct RemoveDraftAppVersionResourceMappingsInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The names of the registered applications you want to remove from the resource mappings.
    public var appRegistryAppNames: [Swift.String]?
    /// The names of the Amazon Elastic Kubernetes Service clusters and namespaces you want to remove from the resource mappings. This parameter accepts values in "eks-cluster/namespace" format.
    public var eksSourceNames: [Swift.String]?
    /// The names of the CloudFormation stacks you want to remove from the resource mappings.
    public var logicalStackNames: [Swift.String]?
    /// The names of the resource groups you want to remove from the resource mappings.
    public var resourceGroupNames: [Swift.String]?
    /// The names of the resources you want to remove from the resource mappings.
    public var resourceNames: [Swift.String]?
    /// The names of the Terraform sources you want to remove from the resource mappings.
    public var terraformSourceNames: [Swift.String]?

    public init(
        appArn: Swift.String? = nil,
        appRegistryAppNames: [Swift.String]? = nil,
        eksSourceNames: [Swift.String]? = nil,
        logicalStackNames: [Swift.String]? = nil,
        resourceGroupNames: [Swift.String]? = nil,
        resourceNames: [Swift.String]? = nil,
        terraformSourceNames: [Swift.String]? = nil
    )
    {
        self.appArn = appArn
        self.appRegistryAppNames = appRegistryAppNames
        self.eksSourceNames = eksSourceNames
        self.logicalStackNames = logicalStackNames
        self.resourceGroupNames = resourceGroupNames
        self.resourceNames = resourceNames
        self.terraformSourceNames = terraformSourceNames
    }
}

public struct RemoveDraftAppVersionResourceMappingsOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    public var appArn: Swift.String?
    /// The version of the application.
    public var appVersion: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
    }
}

public struct ResolveAppVersionResourcesInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The version of the application.
    /// This member is required.
    public var appVersion: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
    }
}

public struct ResolveAppVersionResourcesOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The version of the application.
    /// This member is required.
    public var appVersion: Swift.String?
    /// The identifier for a specific resolution.
    /// This member is required.
    public var resolutionId: Swift.String?
    /// Status of the action.
    /// This member is required.
    public var status: ResiliencehubClientTypes.ResourceResolutionStatusType?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        resolutionId: Swift.String? = nil,
        status: ResiliencehubClientTypes.ResourceResolutionStatusType? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.resolutionId = resolutionId
        self.status = status
    }
}

public struct StartAppAssessmentInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// The version of the application.
    /// This member is required.
    public var appVersion: Swift.String?
    /// The name for the assessment.
    /// This member is required.
    public var assessmentName: Swift.String?
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?
    /// Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.
    public var tags: [Swift.String: Swift.String]?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        assessmentName: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.assessmentName = assessmentName
        self.clientToken = clientToken
        self.tags = tags
    }
}

extension StartAppAssessmentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartAppAssessmentInput(appArn: \(Swift.String(describing: appArn)), appVersion: \(Swift.String(describing: appVersion)), assessmentName: \(Swift.String(describing: assessmentName)), clientToken: \(Swift.String(describing: clientToken)), tags: \"CONTENT_REDACTED\")"}
}

public struct StartAppAssessmentOutput {
    /// The assessment created.
    /// This member is required.
    public var assessment: ResiliencehubClientTypes.AppAssessment?

    public init(
        assessment: ResiliencehubClientTypes.AppAssessment? = nil
    )
    {
        self.assessment = assessment
    }
}

public struct StartResourceGroupingRecommendationTaskInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?

    public init(
        appArn: Swift.String? = nil
    )
    {
        self.appArn = appArn
    }
}

public struct StartResourceGroupingRecommendationTaskOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Indicates the error that occurred while executing a grouping recommendation task.
    public var errorMessage: Swift.String?
    /// Indicates the identifier of the grouping recommendation task.
    /// This member is required.
    public var groupingId: Swift.String?
    /// Status of the action.
    /// This member is required.
    public var status: ResiliencehubClientTypes.ResourcesGroupingRecGenStatusType?

    public init(
        appArn: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        groupingId: Swift.String? = nil,
        status: ResiliencehubClientTypes.ResourcesGroupingRecGenStatusType? = nil
    )
    {
        self.appArn = appArn
        self.errorMessage = errorMessage
        self.groupingId = groupingId
        self.status = status
    }
}

public struct TagResourceInput {
    /// Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags to assign to the resource. Each tag consists of a key/value pair.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \"CONTENT_REDACTED\")"}
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys of the tags you want to remove.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \"CONTENT_REDACTED\")"}
}

public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateAppInput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Assessment execution schedule with 'Daily' or 'Disabled' values.
    public var assessmentSchedule: ResiliencehubClientTypes.AppAssessmentScheduleType?
    /// Specifies if the resiliency policy ARN should be cleared.
    public var clearResiliencyPolicyArn: Swift.Bool?
    /// The optional description for an app.
    public var description: Swift.String?
    /// The list of events you would like to subscribe and get notification for. Currently, Resilience Hub supports notifications only for Drift detected and Scheduled assessment failure events.
    public var eventSubscriptions: [ResiliencehubClientTypes.EventSubscription]?
    /// Defines the roles and credentials that Resilience Hub would use while creating an application, importing its resources, and running an assessment.
    public var permissionModel: ResiliencehubClientTypes.PermissionModel?
    /// Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:partition:resiliencehub:region:account:resiliency-policy/policy-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    public var policyArn: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        assessmentSchedule: ResiliencehubClientTypes.AppAssessmentScheduleType? = nil,
        clearResiliencyPolicyArn: Swift.Bool? = nil,
        description: Swift.String? = nil,
        eventSubscriptions: [ResiliencehubClientTypes.EventSubscription]? = nil,
        permissionModel: ResiliencehubClientTypes.PermissionModel? = nil,
        policyArn: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.assessmentSchedule = assessmentSchedule
        self.clearResiliencyPolicyArn = clearResiliencyPolicyArn
        self.description = description
        self.eventSubscriptions = eventSubscriptions
        self.permissionModel = permissionModel
        self.policyArn = policyArn
    }
}

public struct UpdateAppOutput {
    /// The specified application, returned as an object with details including compliance status, creation time, description, resiliency score, and more.
    /// This member is required.
    public var app: ResiliencehubClientTypes.App?

    public init(
        app: ResiliencehubClientTypes.App? = nil
    )
    {
        self.app = app
    }
}

public struct UpdateAppVersionInput {
    /// Additional configuration parameters for an Resilience Hub application. If you want to implement additionalInfo through the Resilience Hub console rather than using an API call, see [Configure the application configuration parameters](https://docs.aws.amazon.com/resilience-hub/latest/userguide/app-config-param.html). Currently, this parameter accepts a key-value mapping (in a string format) of only one failover region and one associated account. Key: "failover-regions" Value: "[{"region":"<REGION>", "accounts":[{"id":"<ACCOUNT_ID>"}]}]"
    public var additionalInfo: [Swift.String: [Swift.String]]?
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?

    public init(
        additionalInfo: [Swift.String: [Swift.String]]? = nil,
        appArn: Swift.String? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.appArn = appArn
    }
}

public struct UpdateAppVersionOutput {
    /// Additional configuration parameters for an Resilience Hub application. If you want to implement additionalInfo through the Resilience Hub console rather than using an API call, see [Configure the application configuration parameters](https://docs.aws.amazon.com/resilience-hub/latest/userguide/app-config-param.html). Currently, this parameter supports only failover region and account.
    public var additionalInfo: [Swift.String: [Swift.String]]?
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?

    public init(
        additionalInfo: [Swift.String: [Swift.String]]? = nil,
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.appArn = appArn
        self.appVersion = appVersion
    }
}

public struct UpdateAppVersionAppComponentInput {
    /// Currently, there is no supported additional information for Application Components.
    public var additionalInfo: [Swift.String: [Swift.String]]?
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Identifier of the Application Component.
    /// This member is required.
    public var id: Swift.String?
    /// Name of the Application Component.
    public var name: Swift.String?
    /// Type of Application Component. For more information about the types of Application Component, see [Grouping resources in an AppComponent](https://docs.aws.amazon.com/resilience-hub/latest/userguide/AppComponent.grouping.html).
    public var type: Swift.String?

    public init(
        additionalInfo: [Swift.String: [Swift.String]]? = nil,
        appArn: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.appArn = appArn
        self.id = id
        self.name = name
        self.type = type
    }
}

public struct UpdateAppVersionAppComponentOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// List of Application Components that belong to this resource.
    public var appComponent: ResiliencehubClientTypes.AppComponent?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appComponent: ResiliencehubClientTypes.AppComponent? = nil,
        appVersion: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appComponent = appComponent
        self.appVersion = appVersion
    }
}

public struct UpdateAppVersionResourceInput {
    /// Currently, there is no supported additional information for resources.
    public var additionalInfo: [Swift.String: [Swift.String]]?
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// List of Application Components that this resource belongs to. If an Application Component is not part of the Resilience Hub application, it will be added.
    public var appComponents: [Swift.String]?
    /// Amazon Web Services account that owns the physical resource.
    public var awsAccountId: Swift.String?
    /// Amazon Web Services region that owns the physical resource.
    public var awsRegion: Swift.String?
    /// Indicates if a resource is excluded from an Resilience Hub application. You can exclude only imported resources from an Resilience Hub application.
    public var excluded: Swift.Bool?
    /// Logical identifier of the resource.
    public var logicalResourceId: ResiliencehubClientTypes.LogicalResourceId?
    /// Physical identifier of the resource.
    public var physicalResourceId: Swift.String?
    /// Name of the resource.
    public var resourceName: Swift.String?
    /// Type of resource.
    public var resourceType: Swift.String?

    public init(
        additionalInfo: [Swift.String: [Swift.String]]? = nil,
        appArn: Swift.String? = nil,
        appComponents: [Swift.String]? = nil,
        awsAccountId: Swift.String? = nil,
        awsRegion: Swift.String? = nil,
        excluded: Swift.Bool? = nil,
        logicalResourceId: ResiliencehubClientTypes.LogicalResourceId? = nil,
        physicalResourceId: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.appArn = appArn
        self.appComponents = appComponents
        self.awsAccountId = awsAccountId
        self.awsRegion = awsRegion
        self.excluded = excluded
        self.logicalResourceId = logicalResourceId
        self.physicalResourceId = physicalResourceId
        self.resourceName = resourceName
        self.resourceType = resourceType
    }
}

public struct UpdateAppVersionResourceOutput {
    /// Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:partition:resiliencehub:region:account:app/app-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var appArn: Swift.String?
    /// Resilience Hub application version.
    /// This member is required.
    public var appVersion: Swift.String?
    /// Defines a physical resource. A physical resource is a resource that exists in your account. It can be identified using an Amazon Resource Name (ARN) or a Resilience Hub-native identifier.
    public var physicalResource: ResiliencehubClientTypes.PhysicalResource?

    public init(
        appArn: Swift.String? = nil,
        appVersion: Swift.String? = nil,
        physicalResource: ResiliencehubClientTypes.PhysicalResource? = nil
    )
    {
        self.appArn = appArn
        self.appVersion = appVersion
        self.physicalResource = physicalResource
    }
}

public struct UpdateResiliencyPolicyInput {
    /// Specifies a high-level geographical location constraint for where your resilience policy data can be stored.
    public var dataLocationConstraint: ResiliencehubClientTypes.DataLocationConstraint?
    /// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds.
    public var policy: [Swift.String: ResiliencehubClientTypes.FailurePolicy]?
    /// Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:partition:resiliencehub:region:account:resiliency-policy/policy-id. For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference guide.
    /// This member is required.
    public var policyArn: Swift.String?
    /// The description for the policy.
    public var policyDescription: Swift.String?
    /// The name of the policy
    public var policyName: Swift.String?
    /// The tier for this resiliency policy, ranging from the highest severity (MissionCritical) to lowest (NonCritical).
    public var tier: ResiliencehubClientTypes.ResiliencyPolicyTier?

    public init(
        dataLocationConstraint: ResiliencehubClientTypes.DataLocationConstraint? = nil,
        policy: [Swift.String: ResiliencehubClientTypes.FailurePolicy]? = nil,
        policyArn: Swift.String? = nil,
        policyDescription: Swift.String? = nil,
        policyName: Swift.String? = nil,
        tier: ResiliencehubClientTypes.ResiliencyPolicyTier? = nil
    )
    {
        self.dataLocationConstraint = dataLocationConstraint
        self.policy = policy
        self.policyArn = policyArn
        self.policyDescription = policyDescription
        self.policyName = policyName
        self.tier = tier
    }
}

public struct UpdateResiliencyPolicyOutput {
    /// The type of resiliency policy that was updated, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds.
    /// This member is required.
    public var policy: ResiliencehubClientTypes.ResiliencyPolicy?

    public init(
        policy: ResiliencehubClientTypes.ResiliencyPolicy? = nil
    )
    {
        self.policy = policy
    }
}

extension AcceptResourceGroupingRecommendationsInput {

    static func urlPathProvider(_ value: AcceptResourceGroupingRecommendationsInput) -> Swift.String? {
        return "/accept-resource-grouping-recommendations"
    }
}

extension AddDraftAppVersionResourceMappingsInput {

    static func urlPathProvider(_ value: AddDraftAppVersionResourceMappingsInput) -> Swift.String? {
        return "/add-draft-app-version-resource-mappings"
    }
}

extension BatchUpdateRecommendationStatusInput {

    static func urlPathProvider(_ value: BatchUpdateRecommendationStatusInput) -> Swift.String? {
        return "/batch-update-recommendation-status"
    }
}

extension CreateAppInput {

    static func urlPathProvider(_ value: CreateAppInput) -> Swift.String? {
        return "/create-app"
    }
}

extension CreateAppVersionAppComponentInput {

    static func urlPathProvider(_ value: CreateAppVersionAppComponentInput) -> Swift.String? {
        return "/create-app-version-app-component"
    }
}

extension CreateAppVersionResourceInput {

    static func urlPathProvider(_ value: CreateAppVersionResourceInput) -> Swift.String? {
        return "/create-app-version-resource"
    }
}

extension CreateRecommendationTemplateInput {

    static func urlPathProvider(_ value: CreateRecommendationTemplateInput) -> Swift.String? {
        return "/create-recommendation-template"
    }
}

extension CreateResiliencyPolicyInput {

    static func urlPathProvider(_ value: CreateResiliencyPolicyInput) -> Swift.String? {
        return "/create-resiliency-policy"
    }
}

extension DeleteAppInput {

    static func urlPathProvider(_ value: DeleteAppInput) -> Swift.String? {
        return "/delete-app"
    }
}

extension DeleteAppAssessmentInput {

    static func urlPathProvider(_ value: DeleteAppAssessmentInput) -> Swift.String? {
        return "/delete-app-assessment"
    }
}

extension DeleteAppInputSourceInput {

    static func urlPathProvider(_ value: DeleteAppInputSourceInput) -> Swift.String? {
        return "/delete-app-input-source"
    }
}

extension DeleteAppVersionAppComponentInput {

    static func urlPathProvider(_ value: DeleteAppVersionAppComponentInput) -> Swift.String? {
        return "/delete-app-version-app-component"
    }
}

extension DeleteAppVersionResourceInput {

    static func urlPathProvider(_ value: DeleteAppVersionResourceInput) -> Swift.String? {
        return "/delete-app-version-resource"
    }
}

extension DeleteRecommendationTemplateInput {

    static func urlPathProvider(_ value: DeleteRecommendationTemplateInput) -> Swift.String? {
        return "/delete-recommendation-template"
    }
}

extension DeleteResiliencyPolicyInput {

    static func urlPathProvider(_ value: DeleteResiliencyPolicyInput) -> Swift.String? {
        return "/delete-resiliency-policy"
    }
}

extension DescribeAppInput {

    static func urlPathProvider(_ value: DescribeAppInput) -> Swift.String? {
        return "/describe-app"
    }
}

extension DescribeAppAssessmentInput {

    static func urlPathProvider(_ value: DescribeAppAssessmentInput) -> Swift.String? {
        return "/describe-app-assessment"
    }
}

extension DescribeAppVersionInput {

    static func urlPathProvider(_ value: DescribeAppVersionInput) -> Swift.String? {
        return "/describe-app-version"
    }
}

extension DescribeAppVersionAppComponentInput {

    static func urlPathProvider(_ value: DescribeAppVersionAppComponentInput) -> Swift.String? {
        return "/describe-app-version-app-component"
    }
}

extension DescribeAppVersionResourceInput {

    static func urlPathProvider(_ value: DescribeAppVersionResourceInput) -> Swift.String? {
        return "/describe-app-version-resource"
    }
}

extension DescribeAppVersionResourcesResolutionStatusInput {

    static func urlPathProvider(_ value: DescribeAppVersionResourcesResolutionStatusInput) -> Swift.String? {
        return "/describe-app-version-resources-resolution-status"
    }
}

extension DescribeAppVersionTemplateInput {

    static func urlPathProvider(_ value: DescribeAppVersionTemplateInput) -> Swift.String? {
        return "/describe-app-version-template"
    }
}

extension DescribeDraftAppVersionResourcesImportStatusInput {

    static func urlPathProvider(_ value: DescribeDraftAppVersionResourcesImportStatusInput) -> Swift.String? {
        return "/describe-draft-app-version-resources-import-status"
    }
}

extension DescribeResiliencyPolicyInput {

    static func urlPathProvider(_ value: DescribeResiliencyPolicyInput) -> Swift.String? {
        return "/describe-resiliency-policy"
    }
}

extension DescribeResourceGroupingRecommendationTaskInput {

    static func urlPathProvider(_ value: DescribeResourceGroupingRecommendationTaskInput) -> Swift.String? {
        return "/describe-resource-grouping-recommendation-task"
    }
}

extension ImportResourcesToDraftAppVersionInput {

    static func urlPathProvider(_ value: ImportResourcesToDraftAppVersionInput) -> Swift.String? {
        return "/import-resources-to-draft-app-version"
    }
}

extension ListAlarmRecommendationsInput {

    static func urlPathProvider(_ value: ListAlarmRecommendationsInput) -> Swift.String? {
        return "/list-alarm-recommendations"
    }
}

extension ListAppAssessmentComplianceDriftsInput {

    static func urlPathProvider(_ value: ListAppAssessmentComplianceDriftsInput) -> Swift.String? {
        return "/list-app-assessment-compliance-drifts"
    }
}

extension ListAppAssessmentResourceDriftsInput {

    static func urlPathProvider(_ value: ListAppAssessmentResourceDriftsInput) -> Swift.String? {
        return "/list-app-assessment-resource-drifts"
    }
}

extension ListAppAssessmentsInput {

    static func urlPathProvider(_ value: ListAppAssessmentsInput) -> Swift.String? {
        return "/list-app-assessments"
    }
}

extension ListAppAssessmentsInput {

    static func queryItemProvider(_ value: ListAppAssessmentsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let reverseOrder = value.reverseOrder {
            let reverseOrderQueryItem = Smithy.URIQueryItem(name: "reverseOrder".urlPercentEncoding(), value: Swift.String(reverseOrder).urlPercentEncoding())
            items.append(reverseOrderQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let assessmentName = value.assessmentName {
            let assessmentNameQueryItem = Smithy.URIQueryItem(name: "assessmentName".urlPercentEncoding(), value: Swift.String(assessmentName).urlPercentEncoding())
            items.append(assessmentNameQueryItem)
        }
        if let appArn = value.appArn {
            let appArnQueryItem = Smithy.URIQueryItem(name: "appArn".urlPercentEncoding(), value: Swift.String(appArn).urlPercentEncoding())
            items.append(appArnQueryItem)
        }
        if let complianceStatus = value.complianceStatus {
            let complianceStatusQueryItem = Smithy.URIQueryItem(name: "complianceStatus".urlPercentEncoding(), value: Swift.String(complianceStatus.rawValue).urlPercentEncoding())
            items.append(complianceStatusQueryItem)
        }
        if let assessmentStatus = value.assessmentStatus {
            assessmentStatus.forEach { queryItemValue in
                let queryItem = Smithy.URIQueryItem(name: "assessmentStatus".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                items.append(queryItem)
            }
        }
        if let invoker = value.invoker {
            let invokerQueryItem = Smithy.URIQueryItem(name: "invoker".urlPercentEncoding(), value: Swift.String(invoker.rawValue).urlPercentEncoding())
            items.append(invokerQueryItem)
        }
        return items
    }
}

extension ListAppComponentCompliancesInput {

    static func urlPathProvider(_ value: ListAppComponentCompliancesInput) -> Swift.String? {
        return "/list-app-component-compliances"
    }
}

extension ListAppComponentRecommendationsInput {

    static func urlPathProvider(_ value: ListAppComponentRecommendationsInput) -> Swift.String? {
        return "/list-app-component-recommendations"
    }
}

extension ListAppInputSourcesInput {

    static func urlPathProvider(_ value: ListAppInputSourcesInput) -> Swift.String? {
        return "/list-app-input-sources"
    }
}

extension ListAppsInput {

    static func urlPathProvider(_ value: ListAppsInput) -> Swift.String? {
        return "/list-apps"
    }
}

extension ListAppsInput {

    static func queryItemProvider(_ value: ListAppsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let reverseOrder = value.reverseOrder {
            let reverseOrderQueryItem = Smithy.URIQueryItem(name: "reverseOrder".urlPercentEncoding(), value: Swift.String(reverseOrder).urlPercentEncoding())
            items.append(reverseOrderQueryItem)
        }
        if let name = value.name {
            let nameQueryItem = Smithy.URIQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
            items.append(nameQueryItem)
        }
        if let appArn = value.appArn {
            let appArnQueryItem = Smithy.URIQueryItem(name: "appArn".urlPercentEncoding(), value: Swift.String(appArn).urlPercentEncoding())
            items.append(appArnQueryItem)
        }
        if let toLastAssessmentTime = value.toLastAssessmentTime {
            let toLastAssessmentTimeQueryItem = Smithy.URIQueryItem(name: "toLastAssessmentTime".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: toLastAssessmentTime)).urlPercentEncoding())
            items.append(toLastAssessmentTimeQueryItem)
        }
        if let fromLastAssessmentTime = value.fromLastAssessmentTime {
            let fromLastAssessmentTimeQueryItem = Smithy.URIQueryItem(name: "fromLastAssessmentTime".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: fromLastAssessmentTime)).urlPercentEncoding())
            items.append(fromLastAssessmentTimeQueryItem)
        }
        return items
    }
}

extension ListAppVersionAppComponentsInput {

    static func urlPathProvider(_ value: ListAppVersionAppComponentsInput) -> Swift.String? {
        return "/list-app-version-app-components"
    }
}

extension ListAppVersionResourceMappingsInput {

    static func urlPathProvider(_ value: ListAppVersionResourceMappingsInput) -> Swift.String? {
        return "/list-app-version-resource-mappings"
    }
}

extension ListAppVersionResourcesInput {

    static func urlPathProvider(_ value: ListAppVersionResourcesInput) -> Swift.String? {
        return "/list-app-version-resources"
    }
}

extension ListAppVersionsInput {

    static func urlPathProvider(_ value: ListAppVersionsInput) -> Swift.String? {
        return "/list-app-versions"
    }
}

extension ListRecommendationTemplatesInput {

    static func urlPathProvider(_ value: ListRecommendationTemplatesInput) -> Swift.String? {
        return "/list-recommendation-templates"
    }
}

extension ListRecommendationTemplatesInput {

    static func queryItemProvider(_ value: ListRecommendationTemplatesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let reverseOrder = value.reverseOrder {
            let reverseOrderQueryItem = Smithy.URIQueryItem(name: "reverseOrder".urlPercentEncoding(), value: Swift.String(reverseOrder).urlPercentEncoding())
            items.append(reverseOrderQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let name = value.name {
            let nameQueryItem = Smithy.URIQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
            items.append(nameQueryItem)
        }
        if let assessmentArn = value.assessmentArn {
            let assessmentArnQueryItem = Smithy.URIQueryItem(name: "assessmentArn".urlPercentEncoding(), value: Swift.String(assessmentArn).urlPercentEncoding())
            items.append(assessmentArnQueryItem)
        }
        if let recommendationTemplateArn = value.recommendationTemplateArn {
            let recommendationTemplateArnQueryItem = Smithy.URIQueryItem(name: "recommendationTemplateArn".urlPercentEncoding(), value: Swift.String(recommendationTemplateArn).urlPercentEncoding())
            items.append(recommendationTemplateArnQueryItem)
        }
        if let status = value.status {
            status.forEach { queryItemValue in
                let queryItem = Smithy.URIQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                items.append(queryItem)
            }
        }
        return items
    }
}

extension ListResiliencyPoliciesInput {

    static func urlPathProvider(_ value: ListResiliencyPoliciesInput) -> Swift.String? {
        return "/list-resiliency-policies"
    }
}

extension ListResiliencyPoliciesInput {

    static func queryItemProvider(_ value: ListResiliencyPoliciesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let policyName = value.policyName {
            let policyNameQueryItem = Smithy.URIQueryItem(name: "policyName".urlPercentEncoding(), value: Swift.String(policyName).urlPercentEncoding())
            items.append(policyNameQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListResourceGroupingRecommendationsInput {

    static func urlPathProvider(_ value: ListResourceGroupingRecommendationsInput) -> Swift.String? {
        return "/list-resource-grouping-recommendations"
    }
}

extension ListResourceGroupingRecommendationsInput {

    static func queryItemProvider(_ value: ListResourceGroupingRecommendationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let appArn = value.appArn {
            let appArnQueryItem = Smithy.URIQueryItem(name: "appArn".urlPercentEncoding(), value: Swift.String(appArn).urlPercentEncoding())
            items.append(appArnQueryItem)
        }
        return items
    }
}

extension ListSopRecommendationsInput {

    static func urlPathProvider(_ value: ListSopRecommendationsInput) -> Swift.String? {
        return "/list-sop-recommendations"
    }
}

extension ListSuggestedResiliencyPoliciesInput {

    static func urlPathProvider(_ value: ListSuggestedResiliencyPoliciesInput) -> Swift.String? {
        return "/list-suggested-resiliency-policies"
    }
}

extension ListSuggestedResiliencyPoliciesInput {

    static func queryItemProvider(_ value: ListSuggestedResiliencyPoliciesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension ListTestRecommendationsInput {

    static func urlPathProvider(_ value: ListTestRecommendationsInput) -> Swift.String? {
        return "/list-test-recommendations"
    }
}

extension ListUnsupportedAppVersionResourcesInput {

    static func urlPathProvider(_ value: ListUnsupportedAppVersionResourcesInput) -> Swift.String? {
        return "/list-unsupported-app-version-resources"
    }
}

extension PublishAppVersionInput {

    static func urlPathProvider(_ value: PublishAppVersionInput) -> Swift.String? {
        return "/publish-app-version"
    }
}

extension PutDraftAppVersionTemplateInput {

    static func urlPathProvider(_ value: PutDraftAppVersionTemplateInput) -> Swift.String? {
        return "/put-draft-app-version-template"
    }
}

extension RejectResourceGroupingRecommendationsInput {

    static func urlPathProvider(_ value: RejectResourceGroupingRecommendationsInput) -> Swift.String? {
        return "/reject-resource-grouping-recommendations"
    }
}

extension RemoveDraftAppVersionResourceMappingsInput {

    static func urlPathProvider(_ value: RemoveDraftAppVersionResourceMappingsInput) -> Swift.String? {
        return "/remove-draft-app-version-resource-mappings"
    }
}

extension ResolveAppVersionResourcesInput {

    static func urlPathProvider(_ value: ResolveAppVersionResourcesInput) -> Swift.String? {
        return "/resolve-app-version-resources"
    }
}

extension StartAppAssessmentInput {

    static func urlPathProvider(_ value: StartAppAssessmentInput) -> Swift.String? {
        return "/start-app-assessment"
    }
}

extension StartResourceGroupingRecommendationTaskInput {

    static func urlPathProvider(_ value: StartResourceGroupingRecommendationTaskInput) -> Swift.String? {
        return "/start-resource-grouping-recommendation-task"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateAppInput {

    static func urlPathProvider(_ value: UpdateAppInput) -> Swift.String? {
        return "/update-app"
    }
}

extension UpdateAppVersionInput {

    static func urlPathProvider(_ value: UpdateAppVersionInput) -> Swift.String? {
        return "/update-app-version"
    }
}

extension UpdateAppVersionAppComponentInput {

    static func urlPathProvider(_ value: UpdateAppVersionAppComponentInput) -> Swift.String? {
        return "/update-app-version-app-component"
    }
}

extension UpdateAppVersionResourceInput {

    static func urlPathProvider(_ value: UpdateAppVersionResourceInput) -> Swift.String? {
        return "/update-app-version-resource"
    }
}

extension UpdateResiliencyPolicyInput {

    static func urlPathProvider(_ value: UpdateResiliencyPolicyInput) -> Swift.String? {
        return "/update-resiliency-policy"
    }
}

extension AcceptResourceGroupingRecommendationsInput {

    static func write(value: AcceptResourceGroupingRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["entries"].writeList(value.entries, memberWritingClosure: ResiliencehubClientTypes.AcceptGroupingRecommendationEntry.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension AddDraftAppVersionResourceMappingsInput {

    static func write(value: AddDraftAppVersionResourceMappingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["resourceMappings"].writeList(value.resourceMappings, memberWritingClosure: ResiliencehubClientTypes.ResourceMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchUpdateRecommendationStatusInput {

    static func write(value: BatchUpdateRecommendationStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["requestEntries"].writeList(value.requestEntries, memberWritingClosure: ResiliencehubClientTypes.UpdateRecommendationStatusRequestEntry.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateAppInput {

    static func write(value: CreateAppInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["assessmentSchedule"].write(value.assessmentSchedule)
        try writer["clientToken"].write(value.clientToken)
        try writer["description"].write(value.description)
        try writer["eventSubscriptions"].writeList(value.eventSubscriptions, memberWritingClosure: ResiliencehubClientTypes.EventSubscription.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["permissionModel"].write(value.permissionModel, with: ResiliencehubClientTypes.PermissionModel.write(value:to:))
        try writer["policyArn"].write(value.policyArn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateAppVersionAppComponentInput {

    static func write(value: CreateAppVersionAppComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalInfo"].writeMap(value.additionalInfo, valueWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["appArn"].write(value.appArn)
        try writer["clientToken"].write(value.clientToken)
        try writer["id"].write(value.id)
        try writer["name"].write(value.name)
        try writer["type"].write(value.type)
    }
}

extension CreateAppVersionResourceInput {

    static func write(value: CreateAppVersionResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalInfo"].writeMap(value.additionalInfo, valueWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["appArn"].write(value.appArn)
        try writer["appComponents"].writeList(value.appComponents, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["awsAccountId"].write(value.awsAccountId)
        try writer["awsRegion"].write(value.awsRegion)
        try writer["clientToken"].write(value.clientToken)
        try writer["logicalResourceId"].write(value.logicalResourceId, with: ResiliencehubClientTypes.LogicalResourceId.write(value:to:))
        try writer["physicalResourceId"].write(value.physicalResourceId)
        try writer["resourceName"].write(value.resourceName)
        try writer["resourceType"].write(value.resourceType)
    }
}

extension CreateRecommendationTemplateInput {

    static func write(value: CreateRecommendationTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["assessmentArn"].write(value.assessmentArn)
        try writer["bucketName"].write(value.bucketName)
        try writer["clientToken"].write(value.clientToken)
        try writer["format"].write(value.format)
        try writer["name"].write(value.name)
        try writer["recommendationIds"].writeList(value.recommendationIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["recommendationTypes"].writeList(value.recommendationTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ResiliencehubClientTypes.RenderRecommendationType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateResiliencyPolicyInput {

    static func write(value: CreateResiliencyPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["dataLocationConstraint"].write(value.dataLocationConstraint)
        try writer["policy"].writeMap(value.policy, valueWritingClosure: ResiliencehubClientTypes.FailurePolicy.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["policyDescription"].write(value.policyDescription)
        try writer["policyName"].write(value.policyName)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["tier"].write(value.tier)
    }
}

extension DeleteAppInput {

    static func write(value: DeleteAppInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["clientToken"].write(value.clientToken)
        try writer["forceDelete"].write(value.forceDelete)
    }
}

extension DeleteAppAssessmentInput {

    static func write(value: DeleteAppAssessmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["assessmentArn"].write(value.assessmentArn)
        try writer["clientToken"].write(value.clientToken)
    }
}

extension DeleteAppInputSourceInput {

    static func write(value: DeleteAppInputSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["clientToken"].write(value.clientToken)
        try writer["eksSourceClusterNamespace"].write(value.eksSourceClusterNamespace, with: ResiliencehubClientTypes.EksSourceClusterNamespace.write(value:to:))
        try writer["sourceArn"].write(value.sourceArn)
        try writer["terraformSource"].write(value.terraformSource, with: ResiliencehubClientTypes.TerraformSource.write(value:to:))
    }
}

extension DeleteAppVersionAppComponentInput {

    static func write(value: DeleteAppVersionAppComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["clientToken"].write(value.clientToken)
        try writer["id"].write(value.id)
    }
}

extension DeleteAppVersionResourceInput {

    static func write(value: DeleteAppVersionResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["awsAccountId"].write(value.awsAccountId)
        try writer["awsRegion"].write(value.awsRegion)
        try writer["clientToken"].write(value.clientToken)
        try writer["logicalResourceId"].write(value.logicalResourceId, with: ResiliencehubClientTypes.LogicalResourceId.write(value:to:))
        try writer["physicalResourceId"].write(value.physicalResourceId)
        try writer["resourceName"].write(value.resourceName)
    }
}

extension DeleteRecommendationTemplateInput {

    static func write(value: DeleteRecommendationTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["recommendationTemplateArn"].write(value.recommendationTemplateArn)
    }
}

extension DeleteResiliencyPolicyInput {

    static func write(value: DeleteResiliencyPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["policyArn"].write(value.policyArn)
    }
}

extension DescribeAppInput {

    static func write(value: DescribeAppInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
    }
}

extension DescribeAppAssessmentInput {

    static func write(value: DescribeAppAssessmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["assessmentArn"].write(value.assessmentArn)
    }
}

extension DescribeAppVersionInput {

    static func write(value: DescribeAppVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appVersion"].write(value.appVersion)
    }
}

extension DescribeAppVersionAppComponentInput {

    static func write(value: DescribeAppVersionAppComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appVersion"].write(value.appVersion)
        try writer["id"].write(value.id)
    }
}

extension DescribeAppVersionResourceInput {

    static func write(value: DescribeAppVersionResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appVersion"].write(value.appVersion)
        try writer["awsAccountId"].write(value.awsAccountId)
        try writer["awsRegion"].write(value.awsRegion)
        try writer["logicalResourceId"].write(value.logicalResourceId, with: ResiliencehubClientTypes.LogicalResourceId.write(value:to:))
        try writer["physicalResourceId"].write(value.physicalResourceId)
        try writer["resourceName"].write(value.resourceName)
    }
}

extension DescribeAppVersionResourcesResolutionStatusInput {

    static func write(value: DescribeAppVersionResourcesResolutionStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appVersion"].write(value.appVersion)
        try writer["resolutionId"].write(value.resolutionId)
    }
}

extension DescribeAppVersionTemplateInput {

    static func write(value: DescribeAppVersionTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appVersion"].write(value.appVersion)
    }
}

extension DescribeDraftAppVersionResourcesImportStatusInput {

    static func write(value: DescribeDraftAppVersionResourcesImportStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
    }
}

extension DescribeResiliencyPolicyInput {

    static func write(value: DescribeResiliencyPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["policyArn"].write(value.policyArn)
    }
}

extension DescribeResourceGroupingRecommendationTaskInput {

    static func write(value: DescribeResourceGroupingRecommendationTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["groupingId"].write(value.groupingId)
    }
}

extension ImportResourcesToDraftAppVersionInput {

    static func write(value: ImportResourcesToDraftAppVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["eksSources"].writeList(value.eksSources, memberWritingClosure: ResiliencehubClientTypes.EksSource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["importStrategy"].write(value.importStrategy)
        try writer["sourceArns"].writeList(value.sourceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["terraformSources"].writeList(value.terraformSources, memberWritingClosure: ResiliencehubClientTypes.TerraformSource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListAlarmRecommendationsInput {

    static func write(value: ListAlarmRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["assessmentArn"].write(value.assessmentArn)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListAppAssessmentComplianceDriftsInput {

    static func write(value: ListAppAssessmentComplianceDriftsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["assessmentArn"].write(value.assessmentArn)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListAppAssessmentResourceDriftsInput {

    static func write(value: ListAppAssessmentResourceDriftsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["assessmentArn"].write(value.assessmentArn)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListAppComponentCompliancesInput {

    static func write(value: ListAppComponentCompliancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["assessmentArn"].write(value.assessmentArn)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListAppComponentRecommendationsInput {

    static func write(value: ListAppComponentRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["assessmentArn"].write(value.assessmentArn)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListAppInputSourcesInput {

    static func write(value: ListAppInputSourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appVersion"].write(value.appVersion)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListAppVersionAppComponentsInput {

    static func write(value: ListAppVersionAppComponentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appVersion"].write(value.appVersion)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListAppVersionResourceMappingsInput {

    static func write(value: ListAppVersionResourceMappingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appVersion"].write(value.appVersion)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListAppVersionResourcesInput {

    static func write(value: ListAppVersionResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appVersion"].write(value.appVersion)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["resolutionId"].write(value.resolutionId)
    }
}

extension ListAppVersionsInput {

    static func write(value: ListAppVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["endTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["startTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ListSopRecommendationsInput {

    static func write(value: ListSopRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["assessmentArn"].write(value.assessmentArn)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListTestRecommendationsInput {

    static func write(value: ListTestRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["assessmentArn"].write(value.assessmentArn)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListUnsupportedAppVersionResourcesInput {

    static func write(value: ListUnsupportedAppVersionResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appVersion"].write(value.appVersion)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["resolutionId"].write(value.resolutionId)
    }
}

extension PublishAppVersionInput {

    static func write(value: PublishAppVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["versionName"].write(value.versionName)
    }
}

extension PutDraftAppVersionTemplateInput {

    static func write(value: PutDraftAppVersionTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appTemplateBody"].write(value.appTemplateBody)
    }
}

extension RejectResourceGroupingRecommendationsInput {

    static func write(value: RejectResourceGroupingRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["entries"].writeList(value.entries, memberWritingClosure: ResiliencehubClientTypes.RejectGroupingRecommendationEntry.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RemoveDraftAppVersionResourceMappingsInput {

    static func write(value: RemoveDraftAppVersionResourceMappingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appRegistryAppNames"].writeList(value.appRegistryAppNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["eksSourceNames"].writeList(value.eksSourceNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["logicalStackNames"].writeList(value.logicalStackNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceGroupNames"].writeList(value.resourceGroupNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceNames"].writeList(value.resourceNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["terraformSourceNames"].writeList(value.terraformSourceNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ResolveAppVersionResourcesInput {

    static func write(value: ResolveAppVersionResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appVersion"].write(value.appVersion)
    }
}

extension StartAppAssessmentInput {

    static func write(value: StartAppAssessmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["appVersion"].write(value.appVersion)
        try writer["assessmentName"].write(value.assessmentName)
        try writer["clientToken"].write(value.clientToken)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension StartResourceGroupingRecommendationTaskInput {

    static func write(value: StartResourceGroupingRecommendationTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateAppInput {

    static func write(value: UpdateAppInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appArn"].write(value.appArn)
        try writer["assessmentSchedule"].write(value.assessmentSchedule)
        try writer["clearResiliencyPolicyArn"].write(value.clearResiliencyPolicyArn)
        try writer["description"].write(value.description)
        try writer["eventSubscriptions"].writeList(value.eventSubscriptions, memberWritingClosure: ResiliencehubClientTypes.EventSubscription.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["permissionModel"].write(value.permissionModel, with: ResiliencehubClientTypes.PermissionModel.write(value:to:))
        try writer["policyArn"].write(value.policyArn)
    }
}

extension UpdateAppVersionInput {

    static func write(value: UpdateAppVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalInfo"].writeMap(value.additionalInfo, valueWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["appArn"].write(value.appArn)
    }
}

extension UpdateAppVersionAppComponentInput {

    static func write(value: UpdateAppVersionAppComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalInfo"].writeMap(value.additionalInfo, valueWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["appArn"].write(value.appArn)
        try writer["id"].write(value.id)
        try writer["name"].write(value.name)
        try writer["type"].write(value.type)
    }
}

extension UpdateAppVersionResourceInput {

    static func write(value: UpdateAppVersionResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalInfo"].writeMap(value.additionalInfo, valueWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["appArn"].write(value.appArn)
        try writer["appComponents"].writeList(value.appComponents, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["awsAccountId"].write(value.awsAccountId)
        try writer["awsRegion"].write(value.awsRegion)
        try writer["excluded"].write(value.excluded)
        try writer["logicalResourceId"].write(value.logicalResourceId, with: ResiliencehubClientTypes.LogicalResourceId.write(value:to:))
        try writer["physicalResourceId"].write(value.physicalResourceId)
        try writer["resourceName"].write(value.resourceName)
        try writer["resourceType"].write(value.resourceType)
    }
}

extension UpdateResiliencyPolicyInput {

    static func write(value: UpdateResiliencyPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dataLocationConstraint"].write(value.dataLocationConstraint)
        try writer["policy"].writeMap(value.policy, valueWritingClosure: ResiliencehubClientTypes.FailurePolicy.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["policyArn"].write(value.policyArn)
        try writer["policyDescription"].write(value.policyDescription)
        try writer["policyName"].write(value.policyName)
        try writer["tier"].write(value.tier)
    }
}

extension AcceptResourceGroupingRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcceptResourceGroupingRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AcceptResourceGroupingRecommendationsOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.failedEntries = try reader["failedEntries"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.FailedGroupingRecommendationEntry.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension AddDraftAppVersionResourceMappingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddDraftAppVersionResourceMappingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AddDraftAppVersionResourceMappingsOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        value.resourceMappings = try reader["resourceMappings"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.ResourceMapping.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension BatchUpdateRecommendationStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchUpdateRecommendationStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchUpdateRecommendationStatusOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.failedEntries = try reader["failedEntries"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.BatchUpdateRecommendationStatusFailedEntry.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.successfulEntries = try reader["successfulEntries"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.BatchUpdateRecommendationStatusSuccessfulEntry.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension CreateAppOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAppOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAppOutput()
        value.app = try reader["app"].readIfPresent(with: ResiliencehubClientTypes.App.read(from:))
        return value
    }
}

extension CreateAppVersionAppComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAppVersionAppComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAppVersionAppComponentOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appComponent = try reader["appComponent"].readIfPresent(with: ResiliencehubClientTypes.AppComponent.read(from:))
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        return value
    }
}

extension CreateAppVersionResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAppVersionResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAppVersionResourceOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        value.physicalResource = try reader["physicalResource"].readIfPresent(with: ResiliencehubClientTypes.PhysicalResource.read(from:))
        return value
    }
}

extension CreateRecommendationTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRecommendationTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRecommendationTemplateOutput()
        value.recommendationTemplate = try reader["recommendationTemplate"].readIfPresent(with: ResiliencehubClientTypes.RecommendationTemplate.read(from:))
        return value
    }
}

extension CreateResiliencyPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateResiliencyPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateResiliencyPolicyOutput()
        value.policy = try reader["policy"].readIfPresent(with: ResiliencehubClientTypes.ResiliencyPolicy.read(from:))
        return value
    }
}

extension DeleteAppOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAppOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteAppOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteAppAssessmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAppAssessmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteAppAssessmentOutput()
        value.assessmentArn = try reader["assessmentArn"].readIfPresent() ?? ""
        value.assessmentStatus = try reader["assessmentStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension DeleteAppInputSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAppInputSourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteAppInputSourceOutput()
        value.appArn = try reader["appArn"].readIfPresent()
        value.appInputSource = try reader["appInputSource"].readIfPresent(with: ResiliencehubClientTypes.AppInputSource.read(from:))
        return value
    }
}

extension DeleteAppVersionAppComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAppVersionAppComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteAppVersionAppComponentOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appComponent = try reader["appComponent"].readIfPresent(with: ResiliencehubClientTypes.AppComponent.read(from:))
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteAppVersionResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAppVersionResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteAppVersionResourceOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        value.physicalResource = try reader["physicalResource"].readIfPresent(with: ResiliencehubClientTypes.PhysicalResource.read(from:))
        return value
    }
}

extension DeleteRecommendationTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRecommendationTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteRecommendationTemplateOutput()
        value.recommendationTemplateArn = try reader["recommendationTemplateArn"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension DeleteResiliencyPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResiliencyPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteResiliencyPolicyOutput()
        value.policyArn = try reader["policyArn"].readIfPresent() ?? ""
        return value
    }
}

extension DescribeAppOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppOutput()
        value.app = try reader["app"].readIfPresent(with: ResiliencehubClientTypes.App.read(from:))
        return value
    }
}

extension DescribeAppAssessmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppAssessmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppAssessmentOutput()
        value.assessment = try reader["assessment"].readIfPresent(with: ResiliencehubClientTypes.AppAssessment.read(from:))
        return value
    }
}

extension DescribeAppVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppVersionOutput()
        value.additionalInfo = try reader["additionalInfo"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        return value
    }
}

extension DescribeAppVersionAppComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppVersionAppComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppVersionAppComponentOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appComponent = try reader["appComponent"].readIfPresent(with: ResiliencehubClientTypes.AppComponent.read(from:))
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        return value
    }
}

extension DescribeAppVersionResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppVersionResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppVersionResourceOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        value.physicalResource = try reader["physicalResource"].readIfPresent(with: ResiliencehubClientTypes.PhysicalResource.read(from:))
        return value
    }
}

extension DescribeAppVersionResourcesResolutionStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppVersionResourcesResolutionStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppVersionResourcesResolutionStatusOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.resolutionId = try reader["resolutionId"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension DescribeAppVersionTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppVersionTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppVersionTemplateOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appTemplateBody = try reader["appTemplateBody"].readIfPresent() ?? ""
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        return value
    }
}

extension DescribeDraftAppVersionResourcesImportStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDraftAppVersionResourcesImportStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDraftAppVersionResourcesImportStatusOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.statusChangeTime = try reader["statusChangeTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension DescribeResiliencyPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeResiliencyPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeResiliencyPolicyOutput()
        value.policy = try reader["policy"].readIfPresent(with: ResiliencehubClientTypes.ResiliencyPolicy.read(from:))
        return value
    }
}

extension DescribeResourceGroupingRecommendationTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeResourceGroupingRecommendationTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeResourceGroupingRecommendationTaskOutput()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.groupingId = try reader["groupingId"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ImportResourcesToDraftAppVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportResourcesToDraftAppVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportResourcesToDraftAppVersionOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        value.eksSources = try reader["eksSources"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.EksSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sourceArns = try reader["sourceArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.terraformSources = try reader["terraformSources"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.TerraformSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListAlarmRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAlarmRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAlarmRecommendationsOutput()
        value.alarmRecommendations = try reader["alarmRecommendations"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.AlarmRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAppAssessmentComplianceDriftsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppAssessmentComplianceDriftsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppAssessmentComplianceDriftsOutput()
        value.complianceDrifts = try reader["complianceDrifts"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.ComplianceDrift.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAppAssessmentResourceDriftsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppAssessmentResourceDriftsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppAssessmentResourceDriftsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resourceDrifts = try reader["resourceDrifts"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.ResourceDrift.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListAppAssessmentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppAssessmentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppAssessmentsOutput()
        value.assessmentSummaries = try reader["assessmentSummaries"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.AppAssessmentSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAppComponentCompliancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppComponentCompliancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppComponentCompliancesOutput()
        value.componentCompliances = try reader["componentCompliances"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.AppComponentCompliance.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAppComponentRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppComponentRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppComponentRecommendationsOutput()
        value.componentRecommendations = try reader["componentRecommendations"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.ComponentRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAppInputSourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppInputSourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppInputSourcesOutput()
        value.appInputSources = try reader["appInputSources"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.AppInputSource.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAppsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppsOutput()
        value.appSummaries = try reader["appSummaries"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.AppSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAppVersionAppComponentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppVersionAppComponentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppVersionAppComponentsOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appComponents = try reader["appComponents"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.AppComponent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAppVersionResourceMappingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppVersionResourceMappingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppVersionResourceMappingsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resourceMappings = try reader["resourceMappings"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.ResourceMapping.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListAppVersionResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppVersionResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppVersionResourcesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.physicalResources = try reader["physicalResources"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.PhysicalResource.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.resolutionId = try reader["resolutionId"].readIfPresent() ?? ""
        return value
    }
}

extension ListAppVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppVersionsOutput()
        value.appVersions = try reader["appVersions"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.AppVersionSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListRecommendationTemplatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRecommendationTemplatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRecommendationTemplatesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.recommendationTemplates = try reader["recommendationTemplates"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.RecommendationTemplate.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListResiliencyPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResiliencyPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResiliencyPoliciesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resiliencyPolicies = try reader["resiliencyPolicies"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.ResiliencyPolicy.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListResourceGroupingRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourceGroupingRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourceGroupingRecommendationsOutput()
        value.groupingRecommendations = try reader["groupingRecommendations"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.GroupingRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListSopRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSopRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSopRecommendationsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.sopRecommendations = try reader["sopRecommendations"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.SopRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListSuggestedResiliencyPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSuggestedResiliencyPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSuggestedResiliencyPoliciesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resiliencyPolicies = try reader["resiliencyPolicies"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.ResiliencyPolicy.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListTestRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTestRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTestRecommendationsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.testRecommendations = try reader["testRecommendations"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.TestRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListUnsupportedAppVersionResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUnsupportedAppVersionResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUnsupportedAppVersionResourcesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resolutionId = try reader["resolutionId"].readIfPresent() ?? ""
        value.unsupportedResources = try reader["unsupportedResources"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.UnsupportedResource.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension PublishAppVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PublishAppVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PublishAppVersionOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appVersion = try reader["appVersion"].readIfPresent()
        value.identifier = try reader["identifier"].readIfPresent()
        value.versionName = try reader["versionName"].readIfPresent()
        return value
    }
}

extension PutDraftAppVersionTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDraftAppVersionTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutDraftAppVersionTemplateOutput()
        value.appArn = try reader["appArn"].readIfPresent()
        value.appVersion = try reader["appVersion"].readIfPresent()
        return value
    }
}

extension RejectResourceGroupingRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RejectResourceGroupingRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RejectResourceGroupingRecommendationsOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.failedEntries = try reader["failedEntries"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.FailedGroupingRecommendationEntry.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension RemoveDraftAppVersionResourceMappingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveDraftAppVersionResourceMappingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RemoveDraftAppVersionResourceMappingsOutput()
        value.appArn = try reader["appArn"].readIfPresent()
        value.appVersion = try reader["appVersion"].readIfPresent()
        return value
    }
}

extension ResolveAppVersionResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResolveAppVersionResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ResolveAppVersionResourcesOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        value.resolutionId = try reader["resolutionId"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension StartAppAssessmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartAppAssessmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartAppAssessmentOutput()
        value.assessment = try reader["assessment"].readIfPresent(with: ResiliencehubClientTypes.AppAssessment.read(from:))
        return value
    }
}

extension StartResourceGroupingRecommendationTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartResourceGroupingRecommendationTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartResourceGroupingRecommendationTaskOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.groupingId = try reader["groupingId"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAppOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAppOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAppOutput()
        value.app = try reader["app"].readIfPresent(with: ResiliencehubClientTypes.App.read(from:))
        return value
    }
}

extension UpdateAppVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAppVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAppVersionOutput()
        value.additionalInfo = try reader["additionalInfo"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateAppVersionAppComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAppVersionAppComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAppVersionAppComponentOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appComponent = try reader["appComponent"].readIfPresent(with: ResiliencehubClientTypes.AppComponent.read(from:))
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateAppVersionResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAppVersionResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAppVersionResourceOutput()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        value.physicalResource = try reader["physicalResource"].readIfPresent(with: ResiliencehubClientTypes.PhysicalResource.read(from:))
        return value
    }
}

extension UpdateResiliencyPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateResiliencyPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateResiliencyPolicyOutput()
        value.policy = try reader["policy"].readIfPresent(with: ResiliencehubClientTypes.ResiliencyPolicy.read(from:))
        return value
    }
}

enum AcceptResourceGroupingRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AddDraftAppVersionResourceMappingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchUpdateRecommendationStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAppOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAppVersionAppComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAppVersionResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRecommendationTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateResiliencyPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAppOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAppAssessmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAppInputSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAppVersionAppComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAppVersionResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRecommendationTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResiliencyPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppAssessmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppVersionAppComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppVersionResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppVersionResourcesResolutionStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppVersionTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDraftAppVersionResourcesImportStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeResiliencyPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeResourceGroupingRecommendationTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportResourcesToDraftAppVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAlarmRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppAssessmentComplianceDriftsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppAssessmentResourceDriftsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppAssessmentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppComponentCompliancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppComponentRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppInputSourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppVersionAppComponentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppVersionResourceMappingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppVersionResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRecommendationTemplatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResiliencyPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourceGroupingRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSopRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSuggestedResiliencyPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTestRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUnsupportedAppVersionResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PublishAppVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDraftAppVersionTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RejectResourceGroupingRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveDraftAppVersionResourceMappingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResolveAppVersionResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartAppAssessmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartResourceGroupingRecommendationTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAppOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAppVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAppVersionAppComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAppVersionResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateResiliencyPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.retryAfterSeconds = try reader["retryAfterSeconds"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.resourceId = try reader["resourceId"].readIfPresent()
        value.properties.resourceType = try reader["resourceType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.resourceId = try reader["resourceId"].readIfPresent()
        value.properties.resourceType = try reader["resourceType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResiliencehubClientTypes.FailedGroupingRecommendationEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.FailedGroupingRecommendationEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.FailedGroupingRecommendationEntry()
        value.groupingRecommendationId = try reader["groupingRecommendationId"].readIfPresent() ?? ""
        value.errorMessage = try reader["errorMessage"].readIfPresent() ?? ""
        return value
    }
}

extension ResiliencehubClientTypes.ResourceMapping {

    static func write(value: ResiliencehubClientTypes.ResourceMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appRegistryAppName"].write(value.appRegistryAppName)
        try writer["eksSourceName"].write(value.eksSourceName)
        try writer["logicalStackName"].write(value.logicalStackName)
        try writer["mappingType"].write(value.mappingType)
        try writer["physicalResourceId"].write(value.physicalResourceId, with: ResiliencehubClientTypes.PhysicalResourceId.write(value:to:))
        try writer["resourceGroupName"].write(value.resourceGroupName)
        try writer["resourceName"].write(value.resourceName)
        try writer["terraformSourceName"].write(value.terraformSourceName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.ResourceMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.ResourceMapping()
        value.resourceName = try reader["resourceName"].readIfPresent()
        value.logicalStackName = try reader["logicalStackName"].readIfPresent()
        value.appRegistryAppName = try reader["appRegistryAppName"].readIfPresent()
        value.resourceGroupName = try reader["resourceGroupName"].readIfPresent()
        value.mappingType = try reader["mappingType"].readIfPresent() ?? .sdkUnknown("")
        value.physicalResourceId = try reader["physicalResourceId"].readIfPresent(with: ResiliencehubClientTypes.PhysicalResourceId.read(from:))
        value.terraformSourceName = try reader["terraformSourceName"].readIfPresent()
        value.eksSourceName = try reader["eksSourceName"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.PhysicalResourceId {

    static func write(value: ResiliencehubClientTypes.PhysicalResourceId?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["awsAccountId"].write(value.awsAccountId)
        try writer["awsRegion"].write(value.awsRegion)
        try writer["identifier"].write(value.identifier)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.PhysicalResourceId {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.PhysicalResourceId()
        value.identifier = try reader["identifier"].readIfPresent() ?? ""
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.awsRegion = try reader["awsRegion"].readIfPresent()
        value.awsAccountId = try reader["awsAccountId"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.BatchUpdateRecommendationStatusSuccessfulEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.BatchUpdateRecommendationStatusSuccessfulEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.BatchUpdateRecommendationStatusSuccessfulEntry()
        value.entryId = try reader["entryId"].readIfPresent() ?? ""
        value.referenceId = try reader["referenceId"].readIfPresent() ?? ""
        value.item = try reader["item"].readIfPresent(with: ResiliencehubClientTypes.UpdateRecommendationStatusItem.read(from:))
        value.excluded = try reader["excluded"].readIfPresent() ?? false
        value.excludeReason = try reader["excludeReason"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.UpdateRecommendationStatusItem {

    static func write(value: ResiliencehubClientTypes.UpdateRecommendationStatusItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceId"].write(value.resourceId)
        try writer["targetAccountId"].write(value.targetAccountId)
        try writer["targetRegion"].write(value.targetRegion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.UpdateRecommendationStatusItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.UpdateRecommendationStatusItem()
        value.resourceId = try reader["resourceId"].readIfPresent()
        value.targetAccountId = try reader["targetAccountId"].readIfPresent()
        value.targetRegion = try reader["targetRegion"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.BatchUpdateRecommendationStatusFailedEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.BatchUpdateRecommendationStatusFailedEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.BatchUpdateRecommendationStatusFailedEntry()
        value.entryId = try reader["entryId"].readIfPresent() ?? ""
        value.errorMessage = try reader["errorMessage"].readIfPresent() ?? ""
        return value
    }
}

extension ResiliencehubClientTypes.App {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.App {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.App()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.policyArn = try reader["policyArn"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.status = try reader["status"].readIfPresent()
        value.complianceStatus = try reader["complianceStatus"].readIfPresent()
        value.lastAppComplianceEvaluationTime = try reader["lastAppComplianceEvaluationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.resiliencyScore = try reader["resiliencyScore"].readIfPresent() ?? 0
        value.lastResiliencyScoreEvaluationTime = try reader["lastResiliencyScoreEvaluationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.assessmentSchedule = try reader["assessmentSchedule"].readIfPresent()
        value.permissionModel = try reader["permissionModel"].readIfPresent(with: ResiliencehubClientTypes.PermissionModel.read(from:))
        value.eventSubscriptions = try reader["eventSubscriptions"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.EventSubscription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.driftStatus = try reader["driftStatus"].readIfPresent()
        value.lastDriftEvaluationTime = try reader["lastDriftEvaluationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.rtoInSecs = try reader["rtoInSecs"].readIfPresent()
        value.rpoInSecs = try reader["rpoInSecs"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.EventSubscription {

    static func write(value: ResiliencehubClientTypes.EventSubscription?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eventType"].write(value.eventType)
        try writer["name"].write(value.name)
        try writer["snsTopicArn"].write(value.snsTopicArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.EventSubscription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.EventSubscription()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.eventType = try reader["eventType"].readIfPresent() ?? .sdkUnknown("")
        value.snsTopicArn = try reader["snsTopicArn"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.PermissionModel {

    static func write(value: ResiliencehubClientTypes.PermissionModel?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["crossAccountRoleArns"].writeList(value.crossAccountRoleArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["invokerRoleName"].write(value.invokerRoleName)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.PermissionModel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.PermissionModel()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.invokerRoleName = try reader["invokerRoleName"].readIfPresent()
        value.crossAccountRoleArns = try reader["crossAccountRoleArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ResiliencehubClientTypes.AppComponent {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.AppComponent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.AppComponent()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.type = try reader["type"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent()
        value.additionalInfo = try reader["additionalInfo"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ResiliencehubClientTypes.PhysicalResource {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.PhysicalResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.PhysicalResource()
        value.resourceName = try reader["resourceName"].readIfPresent()
        value.logicalResourceId = try reader["logicalResourceId"].readIfPresent(with: ResiliencehubClientTypes.LogicalResourceId.read(from:))
        value.physicalResourceId = try reader["physicalResourceId"].readIfPresent(with: ResiliencehubClientTypes.PhysicalResourceId.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.appComponents = try reader["appComponents"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.AppComponent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.additionalInfo = try reader["additionalInfo"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.excluded = try reader["excluded"].readIfPresent()
        value.sourceType = try reader["sourceType"].readIfPresent()
        value.parentResourceName = try reader["parentResourceName"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.LogicalResourceId {

    static func write(value: ResiliencehubClientTypes.LogicalResourceId?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eksSourceName"].write(value.eksSourceName)
        try writer["identifier"].write(value.identifier)
        try writer["logicalStackName"].write(value.logicalStackName)
        try writer["resourceGroupName"].write(value.resourceGroupName)
        try writer["terraformSourceName"].write(value.terraformSourceName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.LogicalResourceId {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.LogicalResourceId()
        value.identifier = try reader["identifier"].readIfPresent() ?? ""
        value.logicalStackName = try reader["logicalStackName"].readIfPresent()
        value.resourceGroupName = try reader["resourceGroupName"].readIfPresent()
        value.terraformSourceName = try reader["terraformSourceName"].readIfPresent()
        value.eksSourceName = try reader["eksSourceName"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.RecommendationTemplate {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.RecommendationTemplate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.RecommendationTemplate()
        value.templatesLocation = try reader["templatesLocation"].readIfPresent(with: ResiliencehubClientTypes.S3Location.read(from:))
        value.assessmentArn = try reader["assessmentArn"].readIfPresent() ?? ""
        value.appArn = try reader["appArn"].readIfPresent()
        value.recommendationIds = try reader["recommendationIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.recommendationTypes = try reader["recommendationTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ResiliencehubClientTypes.RenderRecommendationType>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.format = try reader["format"].readIfPresent() ?? .sdkUnknown("")
        value.recommendationTemplateArn = try reader["recommendationTemplateArn"].readIfPresent() ?? ""
        value.message = try reader["message"].readIfPresent()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.name = try reader["name"].readIfPresent() ?? ""
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.needsReplacements = try reader["needsReplacements"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.S3Location {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.S3Location {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.S3Location()
        value.bucket = try reader["bucket"].readIfPresent()
        value.`prefix` = try reader["prefix"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.ResiliencyPolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.ResiliencyPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.ResiliencyPolicy()
        value.policyArn = try reader["policyArn"].readIfPresent()
        value.policyName = try reader["policyName"].readIfPresent()
        value.policyDescription = try reader["policyDescription"].readIfPresent()
        value.dataLocationConstraint = try reader["dataLocationConstraint"].readIfPresent()
        value.tier = try reader["tier"].readIfPresent()
        value.estimatedCostTier = try reader["estimatedCostTier"].readIfPresent()
        value.policy = try reader["policy"].readMapIfPresent(valueReadingClosure: ResiliencehubClientTypes.FailurePolicy.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ResiliencehubClientTypes.FailurePolicy {

    static func write(value: ResiliencehubClientTypes.FailurePolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["rpoInSecs"].write(value.rpoInSecs)
        try writer["rtoInSecs"].write(value.rtoInSecs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.FailurePolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.FailurePolicy()
        value.rtoInSecs = try reader["rtoInSecs"].readIfPresent() ?? 0
        value.rpoInSecs = try reader["rpoInSecs"].readIfPresent() ?? 0
        return value
    }
}

extension ResiliencehubClientTypes.AppInputSource {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.AppInputSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.AppInputSource()
        value.sourceName = try reader["sourceName"].readIfPresent()
        value.importType = try reader["importType"].readIfPresent() ?? .sdkUnknown("")
        value.sourceArn = try reader["sourceArn"].readIfPresent()
        value.terraformSource = try reader["terraformSource"].readIfPresent(with: ResiliencehubClientTypes.TerraformSource.read(from:))
        value.resourceCount = try reader["resourceCount"].readIfPresent() ?? 0
        value.eksSourceClusterNamespace = try reader["eksSourceClusterNamespace"].readIfPresent(with: ResiliencehubClientTypes.EksSourceClusterNamespace.read(from:))
        return value
    }
}

extension ResiliencehubClientTypes.EksSourceClusterNamespace {

    static func write(value: ResiliencehubClientTypes.EksSourceClusterNamespace?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eksClusterArn"].write(value.eksClusterArn)
        try writer["namespace"].write(value.namespace)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.EksSourceClusterNamespace {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.EksSourceClusterNamespace()
        value.eksClusterArn = try reader["eksClusterArn"].readIfPresent() ?? ""
        value.namespace = try reader["namespace"].readIfPresent() ?? ""
        return value
    }
}

extension ResiliencehubClientTypes.TerraformSource {

    static func write(value: ResiliencehubClientTypes.TerraformSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["s3StateFileUrl"].write(value.s3StateFileUrl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.TerraformSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.TerraformSource()
        value.s3StateFileUrl = try reader["s3StateFileUrl"].readIfPresent() ?? ""
        return value
    }
}

extension ResiliencehubClientTypes.AppAssessment {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.AppAssessment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.AppAssessment()
        value.appArn = try reader["appArn"].readIfPresent()
        value.appVersion = try reader["appVersion"].readIfPresent()
        value.invoker = try reader["invoker"].readIfPresent() ?? .sdkUnknown("")
        value.cost = try reader["cost"].readIfPresent(with: ResiliencehubClientTypes.Cost.read(from:))
        value.resiliencyScore = try reader["resiliencyScore"].readIfPresent(with: ResiliencehubClientTypes.ResiliencyScore.read(from:))
        value.compliance = try reader["compliance"].readMapIfPresent(valueReadingClosure: ResiliencehubClientTypes.DisruptionCompliance.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.complianceStatus = try reader["complianceStatus"].readIfPresent()
        value.assessmentStatus = try reader["assessmentStatus"].readIfPresent() ?? .sdkUnknown("")
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.message = try reader["message"].readIfPresent()
        value.assessmentName = try reader["assessmentName"].readIfPresent()
        value.assessmentArn = try reader["assessmentArn"].readIfPresent() ?? ""
        value.policy = try reader["policy"].readIfPresent(with: ResiliencehubClientTypes.ResiliencyPolicy.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.resourceErrorsDetails = try reader["resourceErrorsDetails"].readIfPresent(with: ResiliencehubClientTypes.ResourceErrorsDetails.read(from:))
        value.versionName = try reader["versionName"].readIfPresent()
        value.driftStatus = try reader["driftStatus"].readIfPresent()
        value.summary = try reader["summary"].readIfPresent(with: ResiliencehubClientTypes.AssessmentSummary.read(from:))
        return value
    }
}

extension ResiliencehubClientTypes.AssessmentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.AssessmentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.AssessmentSummary()
        value.summary = try reader["summary"].readIfPresent()
        value.riskRecommendations = try reader["riskRecommendations"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.AssessmentRiskRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ResiliencehubClientTypes.AssessmentRiskRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.AssessmentRiskRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.AssessmentRiskRecommendation()
        value.risk = try reader["risk"].readIfPresent()
        value.recommendation = try reader["recommendation"].readIfPresent()
        value.appComponents = try reader["appComponents"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ResiliencehubClientTypes.ResourceErrorsDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.ResourceErrorsDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.ResourceErrorsDetails()
        value.resourceErrors = try reader["resourceErrors"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.ResourceError.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.hasMoreErrors = try reader["hasMoreErrors"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.ResourceError {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.ResourceError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.ResourceError()
        value.logicalResourceId = try reader["logicalResourceId"].readIfPresent()
        value.physicalResourceId = try reader["physicalResourceId"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.DisruptionCompliance {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.DisruptionCompliance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.DisruptionCompliance()
        value.achievableRtoInSecs = try reader["achievableRtoInSecs"].readIfPresent() ?? 0
        value.currentRtoInSecs = try reader["currentRtoInSecs"].readIfPresent() ?? 0
        value.rtoReferenceId = try reader["rtoReferenceId"].readIfPresent()
        value.rtoDescription = try reader["rtoDescription"].readIfPresent()
        value.currentRpoInSecs = try reader["currentRpoInSecs"].readIfPresent() ?? 0
        value.rpoReferenceId = try reader["rpoReferenceId"].readIfPresent()
        value.rpoDescription = try reader["rpoDescription"].readIfPresent()
        value.complianceStatus = try reader["complianceStatus"].readIfPresent() ?? .sdkUnknown("")
        value.achievableRpoInSecs = try reader["achievableRpoInSecs"].readIfPresent() ?? 0
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.ResiliencyScore {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.ResiliencyScore {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.ResiliencyScore()
        value.score = try reader["score"].readIfPresent() ?? 0
        value.disruptionScore = try reader["disruptionScore"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.componentScore = try reader["componentScore"].readMapIfPresent(valueReadingClosure: ResiliencehubClientTypes.ScoringComponentResiliencyScore.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ResiliencehubClientTypes.ScoringComponentResiliencyScore {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.ScoringComponentResiliencyScore {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.ScoringComponentResiliencyScore()
        value.score = try reader["score"].readIfPresent() ?? 0
        value.possibleScore = try reader["possibleScore"].readIfPresent() ?? 0
        value.outstandingCount = try reader["outstandingCount"].readIfPresent() ?? 0
        value.excludedCount = try reader["excludedCount"].readIfPresent() ?? 0
        return value
    }
}

extension ResiliencehubClientTypes.Cost {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.Cost {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.Cost()
        value.amount = try reader["amount"].readIfPresent() ?? 0
        value.currency = try reader["currency"].readIfPresent() ?? ""
        value.frequency = try reader["frequency"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ResiliencehubClientTypes.EksSource {

    static func write(value: ResiliencehubClientTypes.EksSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eksClusterArn"].write(value.eksClusterArn)
        try writer["namespaces"].writeList(value.namespaces, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.EksSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.EksSource()
        value.eksClusterArn = try reader["eksClusterArn"].readIfPresent() ?? ""
        value.namespaces = try reader["namespaces"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ResiliencehubClientTypes.AlarmRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.AlarmRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.AlarmRecommendation()
        value.recommendationId = try reader["recommendationId"].readIfPresent() ?? ""
        value.referenceId = try reader["referenceId"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.appComponentName = try reader["appComponentName"].readIfPresent()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.RecommendationItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.prerequisite = try reader["prerequisite"].readIfPresent()
        value.appComponentNames = try reader["appComponentNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.recommendationStatus = try reader["recommendationStatus"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.RecommendationItem {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.RecommendationItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.RecommendationItem()
        value.resourceId = try reader["resourceId"].readIfPresent()
        value.targetAccountId = try reader["targetAccountId"].readIfPresent()
        value.targetRegion = try reader["targetRegion"].readIfPresent()
        value.alreadyImplemented = try reader["alreadyImplemented"].readIfPresent()
        value.excluded = try reader["excluded"].readIfPresent()
        value.excludeReason = try reader["excludeReason"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.ComplianceDrift {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.ComplianceDrift {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.ComplianceDrift()
        value.entityId = try reader["entityId"].readIfPresent()
        value.entityType = try reader["entityType"].readIfPresent()
        value.driftType = try reader["driftType"].readIfPresent()
        value.appId = try reader["appId"].readIfPresent()
        value.appVersion = try reader["appVersion"].readIfPresent()
        value.expectedReferenceId = try reader["expectedReferenceId"].readIfPresent()
        value.expectedValue = try reader["expectedValue"].readMapIfPresent(valueReadingClosure: ResiliencehubClientTypes.DisruptionCompliance.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.actualReferenceId = try reader["actualReferenceId"].readIfPresent()
        value.actualValue = try reader["actualValue"].readMapIfPresent(valueReadingClosure: ResiliencehubClientTypes.DisruptionCompliance.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.diffType = try reader["diffType"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.ResourceDrift {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.ResourceDrift {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.ResourceDrift()
        value.appArn = try reader["appArn"].readIfPresent()
        value.appVersion = try reader["appVersion"].readIfPresent()
        value.referenceId = try reader["referenceId"].readIfPresent()
        value.resourceIdentifier = try reader["resourceIdentifier"].readIfPresent(with: ResiliencehubClientTypes.ResourceIdentifier.read(from:))
        value.diffType = try reader["diffType"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.ResourceIdentifier {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.ResourceIdentifier {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.ResourceIdentifier()
        value.logicalResourceId = try reader["logicalResourceId"].readIfPresent(with: ResiliencehubClientTypes.LogicalResourceId.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.AppAssessmentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.AppAssessmentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.AppAssessmentSummary()
        value.appArn = try reader["appArn"].readIfPresent()
        value.appVersion = try reader["appVersion"].readIfPresent()
        value.assessmentStatus = try reader["assessmentStatus"].readIfPresent() ?? .sdkUnknown("")
        value.invoker = try reader["invoker"].readIfPresent()
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.message = try reader["message"].readIfPresent()
        value.assessmentName = try reader["assessmentName"].readIfPresent()
        value.assessmentArn = try reader["assessmentArn"].readIfPresent() ?? ""
        value.complianceStatus = try reader["complianceStatus"].readIfPresent()
        value.cost = try reader["cost"].readIfPresent(with: ResiliencehubClientTypes.Cost.read(from:))
        value.resiliencyScore = try reader["resiliencyScore"].readIfPresent() ?? 0
        value.versionName = try reader["versionName"].readIfPresent()
        value.driftStatus = try reader["driftStatus"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.AppComponentCompliance {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.AppComponentCompliance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.AppComponentCompliance()
        value.cost = try reader["cost"].readIfPresent(with: ResiliencehubClientTypes.Cost.read(from:))
        value.appComponentName = try reader["appComponentName"].readIfPresent()
        value.compliance = try reader["compliance"].readMapIfPresent(valueReadingClosure: ResiliencehubClientTypes.DisruptionCompliance.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.message = try reader["message"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.resiliencyScore = try reader["resiliencyScore"].readIfPresent(with: ResiliencehubClientTypes.ResiliencyScore.read(from:))
        return value
    }
}

extension ResiliencehubClientTypes.ComponentRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.ComponentRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.ComponentRecommendation()
        value.appComponentName = try reader["appComponentName"].readIfPresent() ?? ""
        value.recommendationStatus = try reader["recommendationStatus"].readIfPresent() ?? .sdkUnknown("")
        value.configRecommendations = try reader["configRecommendations"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.ConfigRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ResiliencehubClientTypes.ConfigRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.ConfigRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.ConfigRecommendation()
        value.cost = try reader["cost"].readIfPresent(with: ResiliencehubClientTypes.Cost.read(from:))
        value.appComponentName = try reader["appComponentName"].readIfPresent()
        value.compliance = try reader["compliance"].readMapIfPresent(valueReadingClosure: ResiliencehubClientTypes.DisruptionCompliance.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.recommendationCompliance = try reader["recommendationCompliance"].readMapIfPresent(valueReadingClosure: ResiliencehubClientTypes.RecommendationDisruptionCompliance.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.optimizationType = try reader["optimizationType"].readIfPresent() ?? .sdkUnknown("")
        value.name = try reader["name"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.suggestedChanges = try reader["suggestedChanges"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.haArchitecture = try reader["haArchitecture"].readIfPresent()
        value.referenceId = try reader["referenceId"].readIfPresent() ?? ""
        return value
    }
}

extension ResiliencehubClientTypes.RecommendationDisruptionCompliance {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.RecommendationDisruptionCompliance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.RecommendationDisruptionCompliance()
        value.expectedComplianceStatus = try reader["expectedComplianceStatus"].readIfPresent() ?? .sdkUnknown("")
        value.expectedRtoInSecs = try reader["expectedRtoInSecs"].readIfPresent() ?? 0
        value.expectedRtoDescription = try reader["expectedRtoDescription"].readIfPresent()
        value.expectedRpoInSecs = try reader["expectedRpoInSecs"].readIfPresent() ?? 0
        value.expectedRpoDescription = try reader["expectedRpoDescription"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.AppSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.AppSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.AppSummary()
        value.appArn = try reader["appArn"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.complianceStatus = try reader["complianceStatus"].readIfPresent()
        value.resiliencyScore = try reader["resiliencyScore"].readIfPresent() ?? 0
        value.assessmentSchedule = try reader["assessmentSchedule"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.driftStatus = try reader["driftStatus"].readIfPresent()
        value.lastAppComplianceEvaluationTime = try reader["lastAppComplianceEvaluationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.rtoInSecs = try reader["rtoInSecs"].readIfPresent()
        value.rpoInSecs = try reader["rpoInSecs"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.AppVersionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.AppVersionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.AppVersionSummary()
        value.appVersion = try reader["appVersion"].readIfPresent() ?? ""
        value.identifier = try reader["identifier"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.versionName = try reader["versionName"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.GroupingRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.GroupingRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.GroupingRecommendation()
        value.groupingRecommendationId = try reader["groupingRecommendationId"].readIfPresent() ?? ""
        value.groupingAppComponent = try reader["groupingAppComponent"].readIfPresent(with: ResiliencehubClientTypes.GroupingAppComponent.read(from:))
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.GroupingResource.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.score = try reader["score"].readIfPresent() ?? 0
        value.recommendationReasons = try reader["recommendationReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.confidenceLevel = try reader["confidenceLevel"].readIfPresent() ?? .sdkUnknown("")
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.rejectionReason = try reader["rejectionReason"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.GroupingResource {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.GroupingResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.GroupingResource()
        value.resourceName = try reader["resourceName"].readIfPresent() ?? ""
        value.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.physicalResourceId = try reader["physicalResourceId"].readIfPresent(with: ResiliencehubClientTypes.PhysicalResourceId.read(from:))
        value.logicalResourceId = try reader["logicalResourceId"].readIfPresent(with: ResiliencehubClientTypes.LogicalResourceId.read(from:))
        value.sourceAppComponentIds = try reader["sourceAppComponentIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ResiliencehubClientTypes.GroupingAppComponent {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.GroupingAppComponent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.GroupingAppComponent()
        value.appComponentId = try reader["appComponentId"].readIfPresent() ?? ""
        value.appComponentType = try reader["appComponentType"].readIfPresent() ?? ""
        value.appComponentName = try reader["appComponentName"].readIfPresent() ?? ""
        return value
    }
}

extension ResiliencehubClientTypes.SopRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.SopRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.SopRecommendation()
        value.serviceType = try reader["serviceType"].readIfPresent() ?? .sdkUnknown("")
        value.appComponentName = try reader["appComponentName"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.recommendationId = try reader["recommendationId"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.RecommendationItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.referenceId = try reader["referenceId"].readIfPresent() ?? ""
        value.prerequisite = try reader["prerequisite"].readIfPresent()
        value.recommendationStatus = try reader["recommendationStatus"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.TestRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.TestRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.TestRecommendation()
        value.recommendationId = try reader["recommendationId"].readIfPresent()
        value.referenceId = try reader["referenceId"].readIfPresent() ?? ""
        value.appComponentName = try reader["appComponentName"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.intent = try reader["intent"].readIfPresent()
        value.risk = try reader["risk"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: ResiliencehubClientTypes.RecommendationItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.prerequisite = try reader["prerequisite"].readIfPresent()
        value.dependsOnAlarms = try reader["dependsOnAlarms"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.recommendationStatus = try reader["recommendationStatus"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.UnsupportedResource {

    static func read(from reader: SmithyJSON.Reader) throws -> ResiliencehubClientTypes.UnsupportedResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResiliencehubClientTypes.UnsupportedResource()
        value.logicalResourceId = try reader["logicalResourceId"].readIfPresent(with: ResiliencehubClientTypes.LogicalResourceId.read(from:))
        value.physicalResourceId = try reader["physicalResourceId"].readIfPresent(with: ResiliencehubClientTypes.PhysicalResourceId.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.unsupportedResourceStatus = try reader["unsupportedResourceStatus"].readIfPresent()
        return value
    }
}

extension ResiliencehubClientTypes.AcceptGroupingRecommendationEntry {

    static func write(value: ResiliencehubClientTypes.AcceptGroupingRecommendationEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["groupingRecommendationId"].write(value.groupingRecommendationId)
    }
}

extension ResiliencehubClientTypes.UpdateRecommendationStatusRequestEntry {

    static func write(value: ResiliencehubClientTypes.UpdateRecommendationStatusRequestEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["entryId"].write(value.entryId)
        try writer["excludeReason"].write(value.excludeReason)
        try writer["excluded"].write(value.excluded)
        try writer["item"].write(value.item, with: ResiliencehubClientTypes.UpdateRecommendationStatusItem.write(value:to:))
        try writer["referenceId"].write(value.referenceId)
    }
}

extension ResiliencehubClientTypes.RejectGroupingRecommendationEntry {

    static func write(value: ResiliencehubClientTypes.RejectGroupingRecommendationEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["groupingRecommendationId"].write(value.groupingRecommendationId)
        try writer["rejectionReason"].write(value.rejectionReason)
    }
}

public enum ResiliencehubClientTypes {}
