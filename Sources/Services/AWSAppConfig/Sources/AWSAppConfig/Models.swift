//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.listWritingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
import struct SmithyHTTPAPI.Header
import struct SmithyHTTPAPI.Headers
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox

public struct DeleteApplicationOutput {

    public init() { }
}

public struct DeleteConfigurationProfileOutput {

    public init() { }
}

public struct DeleteDeploymentStrategyOutput {

    public init() { }
}

public struct DeleteEnvironmentOutput {

    public init() { }
}

public struct DeleteExtensionAssociationOutput {

    public init() { }
}

public struct DeleteExtensionOutput {

    public init() { }
}

public struct DeleteHostedConfigurationVersionOutput {

    public init() { }
}

public struct GetAccountSettingsInput {

    public init() { }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceOutput {

    public init() { }
}

public struct ValidateConfigurationOutput {

    public init() { }
}

extension AppConfigClientTypes {
    /// A parameter to configure deletion protection. If enabled, deletion protection prevents a user from deleting a configuration profile or an environment if AppConfig has called either [GetLatestConfiguration](https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/API_appconfigdata_GetLatestConfiguration.html) or for the configuration profile or from the environment during the specified interval. This setting uses the following default values:
    ///
    /// * Deletion protection is disabled by default.
    ///
    /// * The default interval specified by ProtectionPeriodInMinutes is 60.
    ///
    /// * DeletionProtectionCheck skips configuration profiles and environments that were created in the past hour.
    public struct DeletionProtectionSettings {
        /// A parameter that indicates if deletion protection is enabled or not.
        public var enabled: Swift.Bool?
        /// The time interval during which AppConfig monitors for calls to [GetLatestConfiguration](https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/API_appconfigdata_GetLatestConfiguration.html) or for a configuration profile or from an environment. AppConfig returns an error if a user calls or for the designated configuration profile or environment. To bypass the error and delete a configuration profile or an environment, specify BYPASS for the DeletionProtectionCheck parameter for either or .
        public var protectionPeriodInMinutes: Swift.Int?

        public init(
            enabled: Swift.Bool? = false,
            protectionPeriodInMinutes: Swift.Int? = nil
        )
        {
            self.enabled = enabled
            self.protectionPeriodInMinutes = protectionPeriodInMinutes
        }
    }

}

extension AppConfigClientTypes {
    /// An action defines the tasks that the extension performs during the AppConfig workflow. Each action includes an action point such as ON_CREATE_HOSTED_CONFIGURATION, PRE_DEPLOYMENT, or ON_DEPLOYMENT. Each action also includes a name, a URI to an Lambda function, and an Amazon Resource Name (ARN) for an Identity and Access Management assume role. You specify the name, URI, and ARN for each action point defined in the extension. You can specify the following actions for an extension:
    ///
    /// * PRE_CREATE_HOSTED_CONFIGURATION_VERSION
    ///
    /// * PRE_START_DEPLOYMENT
    ///
    /// * ON_DEPLOYMENT_START
    ///
    /// * ON_DEPLOYMENT_STEP
    ///
    /// * ON_DEPLOYMENT_BAKING
    ///
    /// * ON_DEPLOYMENT_COMPLETE
    ///
    /// * ON_DEPLOYMENT_ROLLED_BACK
    public struct Action {
        /// Information about the action.
        public var description: Swift.String?
        /// The action name.
        public var name: Swift.String?
        /// An Amazon Resource Name (ARN) for an Identity and Access Management assume role.
        public var roleArn: Swift.String?
        /// The extension URI associated to the action point in the extension definition. The URI can be an Amazon Resource Name (ARN) for one of the following: an Lambda function, an Amazon Simple Queue Service queue, an Amazon Simple Notification Service topic, or the Amazon EventBridge default event bus.
        public var uri: Swift.String?

        public init(
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            uri: Swift.String? = nil
        )
        {
            self.description = description
            self.name = name
            self.roleArn = roleArn
            self.uri = uri
        }
    }

}

extension AppConfigClientTypes {
    /// An extension that was invoked as part of a deployment event.
    public struct ActionInvocation {
        /// The name of the action.
        public var actionName: Swift.String?
        /// The error code when an extension invocation fails.
        public var errorCode: Swift.String?
        /// The error message when an extension invocation fails.
        public var errorMessage: Swift.String?
        /// The name, the ID, or the Amazon Resource Name (ARN) of the extension.
        public var extensionIdentifier: Swift.String?
        /// A system-generated ID for this invocation.
        public var invocationId: Swift.String?
        /// An Amazon Resource Name (ARN) for an Identity and Access Management assume role.
        public var roleArn: Swift.String?
        /// The extension URI associated to the action point in the extension definition. The URI can be an Amazon Resource Name (ARN) for one of the following: an Lambda function, an Amazon Simple Queue Service queue, an Amazon Simple Notification Service topic, or the Amazon EventBridge default event bus.
        public var uri: Swift.String?

        public init(
            actionName: Swift.String? = nil,
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            extensionIdentifier: Swift.String? = nil,
            invocationId: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            uri: Swift.String? = nil
        )
        {
            self.actionName = actionName
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.extensionIdentifier = extensionIdentifier
            self.invocationId = invocationId
            self.roleArn = roleArn
            self.uri = uri
        }
    }

}

extension AppConfigClientTypes {

    public enum ActionPoint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case onDeploymentBaking
        case onDeploymentComplete
        case onDeploymentRolledBack
        case onDeploymentStart
        case onDeploymentStep
        case preCreateHostedConfigurationVersion
        case preStartDeployment
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionPoint] {
            return [
                .onDeploymentBaking,
                .onDeploymentComplete,
                .onDeploymentRolledBack,
                .onDeploymentStart,
                .onDeploymentStep,
                .preCreateHostedConfigurationVersion,
                .preStartDeployment
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .onDeploymentBaking: return "ON_DEPLOYMENT_BAKING"
            case .onDeploymentComplete: return "ON_DEPLOYMENT_COMPLETE"
            case .onDeploymentRolledBack: return "ON_DEPLOYMENT_ROLLED_BACK"
            case .onDeploymentStart: return "ON_DEPLOYMENT_START"
            case .onDeploymentStep: return "ON_DEPLOYMENT_STEP"
            case .preCreateHostedConfigurationVersion: return "PRE_CREATE_HOSTED_CONFIGURATION_VERSION"
            case .preStartDeployment: return "PRE_START_DEPLOYMENT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AppConfigClientTypes {
    /// Detailed information about the bad request exception error when creating a hosted configuration version.
    public struct InvalidConfigurationDetail {
        /// The invalid or out-of-range validation constraint in your JSON schema that failed validation.
        public var constraint: Swift.String?
        /// Location of the validation constraint in the configuration JSON schema that failed validation.
        public var location: Swift.String?
        /// The reason for an invalid configuration error.
        public var reason: Swift.String?
        /// The type of error for an invalid configuration.
        public var type: Swift.String?
        /// Details about an error with Lambda when a synchronous extension experiences an error during an invocation.
        public var value: Swift.String?

        public init(
            constraint: Swift.String? = nil,
            location: Swift.String? = nil,
            reason: Swift.String? = nil,
            type: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.constraint = constraint
            self.location = location
            self.reason = reason
            self.type = type
            self.value = value
        }
    }

}

extension AppConfigClientTypes {
    /// Detailed information about the input that failed to satisfy the constraints specified by a call.
    public enum BadRequestDetails {
        /// Detailed information about the bad request exception error when creating a hosted configuration version.
        case invalidconfiguration([AppConfigClientTypes.InvalidConfigurationDetail])
        case sdkUnknown(Swift.String)
    }

}

extension AppConfigClientTypes {

    public enum BadRequestReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case invalidConfiguration
        case sdkUnknown(Swift.String)

        public static var allCases: [BadRequestReason] {
            return [
                .invalidConfiguration
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .invalidConfiguration: return "InvalidConfiguration"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The input fails to satisfy the constraints specified by an Amazon Web Services service.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Detailed information about the input that failed to satisfy the constraints specified by a call.
        public internal(set) var details: AppConfigClientTypes.BadRequestDetails? = nil
        public internal(set) var message: Swift.String? = nil
        public internal(set) var reason: AppConfigClientTypes.BadRequestReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        details: AppConfigClientTypes.BadRequestDetails? = nil,
        message: Swift.String? = nil,
        reason: AppConfigClientTypes.BadRequestReason? = nil
    )
    {
        self.properties.details = details
        self.properties.message = message
        self.properties.reason = reason
    }
}

/// There was an internal failure in the AppConfig service.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The number of one more AppConfig resources exceeds the maximum allowed. Verify that your environment doesn't exceed the following service quotas: Applications: 100 max Deployment strategies: 20 max Configuration profiles: 100 max per application Environments: 20 max per application To resolve this issue, you can delete one or more resources and try again. Or, you can request a quota increase. For more information about quotas and to request an increase, see [Service quotas for AppConfig](https://docs.aws.amazon.com/general/latest/gr/appconfig.html#limits_appconfig) in the Amazon Web Services General Reference.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateApplicationInput {
    /// A description of the application.
    public var description: Swift.String?
    /// A name for the application.
    /// This member is required.
    public var name: Swift.String?
    /// Metadata to assign to the application. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
    public var tags: [Swift.String: Swift.String]?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.description = description
        self.name = name
        self.tags = tags
    }
}

public struct CreateApplicationOutput {
    /// The description of the application.
    public var description: Swift.String?
    /// The application ID.
    public var id: Swift.String?
    /// The application name.
    public var name: Swift.String?

    public init(
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.description = description
        self.id = id
        self.name = name
    }
}

/// The requested resource could not be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var resourceName: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceName = resourceName
    }
}

extension AppConfigClientTypes {

    public enum ValidatorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case jsonSchema
        case lambda
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidatorType] {
            return [
                .jsonSchema,
                .lambda
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .jsonSchema: return "JSON_SCHEMA"
            case .lambda: return "LAMBDA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AppConfigClientTypes {
    /// A validator provides a syntactic or semantic check to ensure the configuration that you want to deploy functions as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid. For more information, see [About validators](https://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-creating-configuration-profile.html#appconfig-creating-configuration-and-profile-validators) in the AppConfig User Guide.
    public struct Validator {
        /// Either the JSON Schema content or the Amazon Resource Name (ARN) of an Lambda function.
        /// This member is required.
        public var content: Swift.String?
        /// AppConfig supports validators of type JSON_SCHEMA and LAMBDA
        /// This member is required.
        public var type: AppConfigClientTypes.ValidatorType?

        public init(
            content: Swift.String? = nil,
            type: AppConfigClientTypes.ValidatorType? = nil
        )
        {
            self.content = content
            self.type = type
        }
    }

}

extension AppConfigClientTypes.Validator: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Validator(type: \(Swift.String(describing: type)), content: \"CONTENT_REDACTED\")"}
}

public struct CreateConfigurationProfileInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// A description of the configuration profile.
    public var description: Swift.String?
    /// The identifier for an Key Management Service key to encrypt new configuration data versions in the AppConfig hosted configuration store. This attribute is only used for hosted configuration types. The identifier can be an KMS key ID, alias, or the Amazon Resource Name (ARN) of the key ID or alias. To encrypt data managed in other configuration stores, see the documentation for how to specify an KMS key for that particular service.
    public var kmsKeyIdentifier: Swift.String?
    /// A URI to locate the configuration. You can specify the following:
    ///
    /// * For the AppConfig hosted configuration store and for feature flags, specify hosted.
    ///
    /// * For an Amazon Web Services Systems Manager Parameter Store parameter, specify either the parameter name in the format ssm-parameter:// or the ARN.
    ///
    /// * For an Amazon Web Services CodePipeline pipeline, specify the URI in the following format: codepipeline://.
    ///
    /// * For an Secrets Manager secret, specify the URI in the following format: secretsmanager://.
    ///
    /// * For an Amazon S3 object, specify the URI in the following format: s3:/// . Here is an example: s3://my-bucket/my-app/us-east-1/my-config.json
    ///
    /// * For an SSM document, specify either the document name in the format ssm-document:// or the Amazon Resource Name (ARN).
    /// This member is required.
    public var locationUri: Swift.String?
    /// A name for the configuration profile.
    /// This member is required.
    public var name: Swift.String?
    /// The ARN of an IAM role with permission to access the configuration at the specified LocationUri. A retrieval role ARN is not required for configurations stored in the AppConfig hosted configuration store. It is required for all other sources that store your configuration.
    public var retrievalRoleArn: Swift.String?
    /// Metadata to assign to the configuration profile. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
    public var tags: [Swift.String: Swift.String]?
    /// The type of configurations contained in the profile. AppConfig supports feature flags and freeform configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for Type: AWS.AppConfig.FeatureFlags
    ///     AWS.Freeform
    public var type: Swift.String?
    /// A list of methods for validating the configuration.
    public var validators: [AppConfigClientTypes.Validator]?

    public init(
        applicationId: Swift.String? = nil,
        description: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        name: Swift.String? = nil,
        retrievalRoleArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        type: Swift.String? = nil,
        validators: [AppConfigClientTypes.Validator]? = nil
    )
    {
        self.applicationId = applicationId
        self.description = description
        self.kmsKeyIdentifier = kmsKeyIdentifier
        self.locationUri = locationUri
        self.name = name
        self.retrievalRoleArn = retrievalRoleArn
        self.tags = tags
        self.type = type
        self.validators = validators
    }
}

public struct CreateConfigurationProfileOutput {
    /// The application ID.
    public var applicationId: Swift.String?
    /// The configuration profile description.
    public var description: Swift.String?
    /// The configuration profile ID.
    public var id: Swift.String?
    /// The Amazon Resource Name of the Key Management Service key to encrypt new configuration data versions in the AppConfig hosted configuration store. This attribute is only used for hosted configuration types. To encrypt data managed in other configuration stores, see the documentation for how to specify an KMS key for that particular service.
    public var kmsKeyArn: Swift.String?
    /// The Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or updated.
    public var kmsKeyIdentifier: Swift.String?
    /// The URI location of the configuration.
    public var locationUri: Swift.String?
    /// The name of the configuration profile.
    public var name: Swift.String?
    /// The ARN of an IAM role with permission to access the configuration at the specified LocationUri.
    public var retrievalRoleArn: Swift.String?
    /// The type of configurations contained in the profile. AppConfig supports feature flags and freeform configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for Type: AWS.AppConfig.FeatureFlags
    ///     AWS.Freeform
    public var type: Swift.String?
    /// A list of methods for validating the configuration.
    public var validators: [AppConfigClientTypes.Validator]?

    public init(
        applicationId: Swift.String? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        kmsKeyArn: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        name: Swift.String? = nil,
        retrievalRoleArn: Swift.String? = nil,
        type: Swift.String? = nil,
        validators: [AppConfigClientTypes.Validator]? = nil
    )
    {
        self.applicationId = applicationId
        self.description = description
        self.id = id
        self.kmsKeyArn = kmsKeyArn
        self.kmsKeyIdentifier = kmsKeyIdentifier
        self.locationUri = locationUri
        self.name = name
        self.retrievalRoleArn = retrievalRoleArn
        self.type = type
        self.validators = validators
    }
}

extension AppConfigClientTypes {

    public enum GrowthType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exponential
        case linear
        case sdkUnknown(Swift.String)

        public static var allCases: [GrowthType] {
            return [
                .exponential,
                .linear
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exponential: return "EXPONENTIAL"
            case .linear: return "LINEAR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AppConfigClientTypes {

    public enum ReplicateTo: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case ssmDocument
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicateTo] {
            return [
                .none,
                .ssmDocument
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .ssmDocument: return "SSM_DOCUMENT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateDeploymentStrategyInput {
    /// Total amount of time for a deployment to last.
    /// This member is required.
    public var deploymentDurationInMinutes: Swift.Int?
    /// A description of the deployment strategy.
    public var description: Swift.String?
    /// Specifies the amount of time AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AppConfig rolls back the deployment. You must configure permissions for AppConfig to roll back based on CloudWatch alarms. For more information, see [Configuring permissions for rollback based on Amazon CloudWatch alarms](https://docs.aws.amazon.com/appconfig/latest/userguide/getting-started-with-appconfig-cloudwatch-alarms-permissions.html) in the AppConfig User Guide.
    public var finalBakeTimeInMinutes: Swift.Int?
    /// The percentage of targets to receive a deployed configuration during each interval.
    /// This member is required.
    public var growthFactor: Swift.Float?
    /// The algorithm used to define how percentage grows over time. AppConfig supports the following growth types: Linear: For this type, AppConfig processes the deployment by dividing the total number of targets by the value specified for Step percentage. For example, a linear deployment that uses a Step percentage of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration. Exponential: For this type, AppConfig processes the deployment exponentially using the following formula: G*(2^N). In this formula, G is the growth factor specified by the user and N is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows: 2*(2^0)
    ///     2*(2^1)
    ///
    /// 2*(2^2) Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.
    public var growthType: AppConfigClientTypes.GrowthType?
    /// A name for the deployment strategy.
    /// This member is required.
    public var name: Swift.String?
    /// Save the deployment strategy to a Systems Manager (SSM) document.
    public var replicateTo: AppConfigClientTypes.ReplicateTo?
    /// Metadata to assign to the deployment strategy. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
    public var tags: [Swift.String: Swift.String]?

    public init(
        deploymentDurationInMinutes: Swift.Int? = 0,
        description: Swift.String? = nil,
        finalBakeTimeInMinutes: Swift.Int? = 0,
        growthFactor: Swift.Float? = nil,
        growthType: AppConfigClientTypes.GrowthType? = nil,
        name: Swift.String? = nil,
        replicateTo: AppConfigClientTypes.ReplicateTo? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.deploymentDurationInMinutes = deploymentDurationInMinutes
        self.description = description
        self.finalBakeTimeInMinutes = finalBakeTimeInMinutes
        self.growthFactor = growthFactor
        self.growthType = growthType
        self.name = name
        self.replicateTo = replicateTo
        self.tags = tags
    }
}

public struct CreateDeploymentStrategyOutput {
    /// Total amount of time the deployment lasted.
    public var deploymentDurationInMinutes: Swift.Int
    /// The description of the deployment strategy.
    public var description: Swift.String?
    /// The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.
    public var finalBakeTimeInMinutes: Swift.Int
    /// The percentage of targets that received a deployed configuration during each interval.
    public var growthFactor: Swift.Float?
    /// The algorithm used to define how percentage grew over time.
    public var growthType: AppConfigClientTypes.GrowthType?
    /// The deployment strategy ID.
    public var id: Swift.String?
    /// The name of the deployment strategy.
    public var name: Swift.String?
    /// Save the deployment strategy to a Systems Manager (SSM) document.
    public var replicateTo: AppConfigClientTypes.ReplicateTo?

    public init(
        deploymentDurationInMinutes: Swift.Int = 0,
        description: Swift.String? = nil,
        finalBakeTimeInMinutes: Swift.Int = 0,
        growthFactor: Swift.Float? = nil,
        growthType: AppConfigClientTypes.GrowthType? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        replicateTo: AppConfigClientTypes.ReplicateTo? = nil
    )
    {
        self.deploymentDurationInMinutes = deploymentDurationInMinutes
        self.description = description
        self.finalBakeTimeInMinutes = finalBakeTimeInMinutes
        self.growthFactor = growthFactor
        self.growthType = growthType
        self.id = id
        self.name = name
        self.replicateTo = replicateTo
    }
}

extension AppConfigClientTypes {
    /// Amazon CloudWatch alarms to monitor during the deployment process.
    public struct Monitor {
        /// Amazon Resource Name (ARN) of the Amazon CloudWatch alarm.
        /// This member is required.
        public var alarmArn: Swift.String?
        /// ARN of an Identity and Access Management (IAM) role for AppConfig to monitor AlarmArn.
        public var alarmRoleArn: Swift.String?

        public init(
            alarmArn: Swift.String? = nil,
            alarmRoleArn: Swift.String? = nil
        )
        {
            self.alarmArn = alarmArn
            self.alarmRoleArn = alarmRoleArn
        }
    }

}

public struct CreateEnvironmentInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// A description of the environment.
    public var description: Swift.String?
    /// Amazon CloudWatch alarms to monitor during the deployment process.
    public var monitors: [AppConfigClientTypes.Monitor]?
    /// A name for the environment.
    /// This member is required.
    public var name: Swift.String?
    /// Metadata to assign to the environment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
    public var tags: [Swift.String: Swift.String]?

    public init(
        applicationId: Swift.String? = nil,
        description: Swift.String? = nil,
        monitors: [AppConfigClientTypes.Monitor]? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.applicationId = applicationId
        self.description = description
        self.monitors = monitors
        self.name = name
        self.tags = tags
    }
}

extension AppConfigClientTypes {

    public enum EnvironmentState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deploying
        case readyForDeployment
        case rolledBack
        case rollingBack
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentState] {
            return [
                .deploying,
                .readyForDeployment,
                .rolledBack,
                .rollingBack
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deploying: return "DEPLOYING"
            case .readyForDeployment: return "READY_FOR_DEPLOYMENT"
            case .rolledBack: return "ROLLED_BACK"
            case .rollingBack: return "ROLLING_BACK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateEnvironmentOutput {
    /// The application ID.
    public var applicationId: Swift.String?
    /// The description of the environment.
    public var description: Swift.String?
    /// The environment ID.
    public var id: Swift.String?
    /// Amazon CloudWatch alarms monitored during the deployment.
    public var monitors: [AppConfigClientTypes.Monitor]?
    /// The name of the environment.
    public var name: Swift.String?
    /// The state of the environment. An environment can be in one of the following states: READY_FOR_DEPLOYMENT, DEPLOYING, ROLLING_BACK, or ROLLED_BACK
    public var state: AppConfigClientTypes.EnvironmentState?

    public init(
        applicationId: Swift.String? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        monitors: [AppConfigClientTypes.Monitor]? = nil,
        name: Swift.String? = nil,
        state: AppConfigClientTypes.EnvironmentState? = nil
    )
    {
        self.applicationId = applicationId
        self.description = description
        self.id = id
        self.monitors = monitors
        self.name = name
        self.state = state
    }
}

/// The request could not be processed because of conflict in the current state of the resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AppConfigClientTypes {
    /// A value such as an Amazon Resource Name (ARN) or an Amazon Simple Notification Service topic entered in an extension when invoked. Parameter values are specified in an extension association. For more information about extensions, see [Extending workflows](https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html) in the AppConfig User Guide.
    public struct Parameter {
        /// Information about the parameter.
        public var description: Swift.String?
        /// Indicates whether this parameter's value can be supplied at the extension's action point instead of during extension association. Dynamic parameters can't be marked Required.
        public var `dynamic`: Swift.Bool
        /// A parameter value must be specified in the extension association.
        public var `required`: Swift.Bool

        public init(
            description: Swift.String? = nil,
            `dynamic`: Swift.Bool = false,
            `required`: Swift.Bool = false
        )
        {
            self.description = description
            self.`dynamic` = `dynamic`
            self.`required` = `required`
        }
    }

}

public struct CreateExtensionInput {
    /// The actions defined in the extension.
    /// This member is required.
    public var actions: [Swift.String: [AppConfigClientTypes.Action]]?
    /// Information about the extension.
    public var description: Swift.String?
    /// You can omit this field when you create an extension. When you create a new version, specify the most recent current version number. For example, you create version 3, enter 2 for this field.
    public var latestVersionNumber: Swift.Int?
    /// A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
    /// This member is required.
    public var name: Swift.String?
    /// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object.
    public var parameters: [Swift.String: AppConfigClientTypes.Parameter]?
    /// Adds one or more tags for the specified extension. Tags are metadata that help you categorize resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define.
    public var tags: [Swift.String: Swift.String]?

    public init(
        actions: [Swift.String: [AppConfigClientTypes.Action]]? = nil,
        description: Swift.String? = nil,
        latestVersionNumber: Swift.Int? = 0,
        name: Swift.String? = nil,
        parameters: [Swift.String: AppConfigClientTypes.Parameter]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.actions = actions
        self.description = description
        self.latestVersionNumber = latestVersionNumber
        self.name = name
        self.parameters = parameters
        self.tags = tags
    }
}

public struct CreateExtensionOutput {
    /// The actions defined in the extension.
    public var actions: [Swift.String: [AppConfigClientTypes.Action]]?
    /// The system-generated Amazon Resource Name (ARN) for the extension.
    public var arn: Swift.String?
    /// Information about the extension.
    public var description: Swift.String?
    /// The system-generated ID of the extension.
    public var id: Swift.String?
    /// The extension name.
    public var name: Swift.String?
    /// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object.
    public var parameters: [Swift.String: AppConfigClientTypes.Parameter]?
    /// The extension version number.
    public var versionNumber: Swift.Int

    public init(
        actions: [Swift.String: [AppConfigClientTypes.Action]]? = nil,
        arn: Swift.String? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        parameters: [Swift.String: AppConfigClientTypes.Parameter]? = nil,
        versionNumber: Swift.Int = 0
    )
    {
        self.actions = actions
        self.arn = arn
        self.description = description
        self.id = id
        self.name = name
        self.parameters = parameters
        self.versionNumber = versionNumber
    }
}

public struct CreateExtensionAssociationInput {
    /// The name, the ID, or the Amazon Resource Name (ARN) of the extension.
    /// This member is required.
    public var extensionIdentifier: Swift.String?
    /// The version number of the extension. If not specified, AppConfig uses the maximum version of the extension.
    public var extensionVersionNumber: Swift.Int?
    /// The parameter names and values defined in the extensions. Extension parameters marked Required must be entered for this field.
    public var parameters: [Swift.String: Swift.String]?
    /// The ARN of an application, configuration profile, or environment.
    /// This member is required.
    public var resourceIdentifier: Swift.String?
    /// Adds one or more tags for the specified extension association. Tags are metadata that help you categorize resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define.
    public var tags: [Swift.String: Swift.String]?

    public init(
        extensionIdentifier: Swift.String? = nil,
        extensionVersionNumber: Swift.Int? = 0,
        parameters: [Swift.String: Swift.String]? = nil,
        resourceIdentifier: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.extensionIdentifier = extensionIdentifier
        self.extensionVersionNumber = extensionVersionNumber
        self.parameters = parameters
        self.resourceIdentifier = resourceIdentifier
        self.tags = tags
    }
}

public struct CreateExtensionAssociationOutput {
    /// The system-generated Amazon Resource Name (ARN) for the extension.
    public var arn: Swift.String?
    /// The ARN of the extension defined in the association.
    public var extensionArn: Swift.String?
    /// The version number for the extension defined in the association.
    public var extensionVersionNumber: Swift.Int
    /// The system-generated ID for the association.
    public var id: Swift.String?
    /// The parameter names and values defined in the association.
    public var parameters: [Swift.String: Swift.String]?
    /// The ARNs of applications, configuration profiles, or environments defined in the association.
    public var resourceArn: Swift.String?

    public init(
        arn: Swift.String? = nil,
        extensionArn: Swift.String? = nil,
        extensionVersionNumber: Swift.Int = 0,
        id: Swift.String? = nil,
        parameters: [Swift.String: Swift.String]? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.arn = arn
        self.extensionArn = extensionArn
        self.extensionVersionNumber = extensionVersionNumber
        self.id = id
        self.parameters = parameters
        self.resourceArn = resourceArn
    }
}

extension AppConfigClientTypes {

    public enum BytesMeasure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case kilobytes
        case sdkUnknown(Swift.String)

        public static var allCases: [BytesMeasure] {
            return [
                .kilobytes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .kilobytes: return "KILOBYTES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The configuration size is too large.
public struct PayloadTooLargeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var limit: Swift.Float = 0.0
        public internal(set) var measure: AppConfigClientTypes.BytesMeasure? = nil
        public internal(set) var message: Swift.String? = nil
        public internal(set) var size: Swift.Float = 0.0
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PayloadTooLargeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        limit: Swift.Float = 0.0,
        measure: AppConfigClientTypes.BytesMeasure? = nil,
        message: Swift.String? = nil,
        size: Swift.Float = 0.0
    )
    {
        self.properties.limit = limit
        self.properties.measure = measure
        self.properties.message = message
        self.properties.size = size
    }
}

public struct CreateHostedConfigurationVersionInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The configuration profile ID.
    /// This member is required.
    public var configurationProfileId: Swift.String?
    /// The configuration data, as bytes. AppConfig accepts any type of data, including text formats like JSON or TOML, or binary formats like protocol buffers or compressed data.
    /// This member is required.
    public var content: Foundation.Data?
    /// A standard MIME type describing the format of the configuration content. For more information, see [Content-Type](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17).
    /// This member is required.
    public var contentType: Swift.String?
    /// A description of the configuration.
    public var description: Swift.String?
    /// An optional locking token used to prevent race conditions from overwriting configuration updates when creating a new version. To ensure your data is not overwritten when creating multiple hosted configuration versions in rapid succession, specify the version number of the latest hosted configuration version.
    public var latestVersionNumber: Swift.Int?
    /// An optional, user-defined label for the AppConfig hosted configuration version. This value must contain at least one non-numeric character. For example, "v2.2.0".
    public var versionLabel: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil,
        content: Foundation.Data? = nil,
        contentType: Swift.String? = nil,
        description: Swift.String? = nil,
        latestVersionNumber: Swift.Int? = 0,
        versionLabel: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.configurationProfileId = configurationProfileId
        self.content = content
        self.contentType = contentType
        self.description = description
        self.latestVersionNumber = latestVersionNumber
        self.versionLabel = versionLabel
    }
}

extension CreateHostedConfigurationVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateHostedConfigurationVersionInput(applicationId: \(Swift.String(describing: applicationId)), configurationProfileId: \(Swift.String(describing: configurationProfileId)), contentType: \(Swift.String(describing: contentType)), description: \(Swift.String(describing: description)), latestVersionNumber: \(Swift.String(describing: latestVersionNumber)), versionLabel: \(Swift.String(describing: versionLabel)), content: \"CONTENT_REDACTED\")"}
}

public struct CreateHostedConfigurationVersionOutput {
    /// The application ID.
    public var applicationId: Swift.String?
    /// The configuration profile ID.
    public var configurationProfileId: Swift.String?
    /// The content of the configuration or the configuration data.
    public var content: Foundation.Data?
    /// A standard MIME type describing the format of the configuration content. For more information, see [Content-Type](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17).
    public var contentType: Swift.String?
    /// A description of the configuration.
    public var description: Swift.String?
    /// The Amazon Resource Name of the Key Management Service key that was used to encrypt this specific version of the configuration data in the AppConfig hosted configuration store.
    public var kmsKeyArn: Swift.String?
    /// A user-defined label for an AppConfig hosted configuration version.
    public var versionLabel: Swift.String?
    /// The configuration version.
    public var versionNumber: Swift.Int

    public init(
        applicationId: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil,
        content: Foundation.Data? = nil,
        contentType: Swift.String? = nil,
        description: Swift.String? = nil,
        kmsKeyArn: Swift.String? = nil,
        versionLabel: Swift.String? = nil,
        versionNumber: Swift.Int = 0
    )
    {
        self.applicationId = applicationId
        self.configurationProfileId = configurationProfileId
        self.content = content
        self.contentType = contentType
        self.description = description
        self.kmsKeyArn = kmsKeyArn
        self.versionLabel = versionLabel
        self.versionNumber = versionNumber
    }
}

extension CreateHostedConfigurationVersionOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateHostedConfigurationVersionOutput(applicationId: \(Swift.String(describing: applicationId)), configurationProfileId: \(Swift.String(describing: configurationProfileId)), contentType: \(Swift.String(describing: contentType)), description: \(Swift.String(describing: description)), kmsKeyArn: \(Swift.String(describing: kmsKeyArn)), versionLabel: \(Swift.String(describing: versionLabel)), versionNumber: \(Swift.String(describing: versionNumber)), content: \"CONTENT_REDACTED\")"}
}

public struct DeleteApplicationInput {
    /// The ID of the application to delete.
    /// This member is required.
    public var applicationId: Swift.String?

    public init(
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

extension AppConfigClientTypes {

    public enum DeletionProtectionCheck: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountDefault
        case apply
        case bypass
        case sdkUnknown(Swift.String)

        public static var allCases: [DeletionProtectionCheck] {
            return [
                .accountDefault,
                .apply,
                .bypass
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountDefault: return "ACCOUNT_DEFAULT"
            case .apply: return "APPLY"
            case .bypass: return "BYPASS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DeleteConfigurationProfileInput {
    /// The application ID that includes the configuration profile you want to delete.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The ID of the configuration profile you want to delete.
    /// This member is required.
    public var configurationProfileId: Swift.String?
    /// A parameter to configure deletion protection. If enabled, deletion protection prevents a user from deleting a configuration profile if your application has called either [GetLatestConfiguration](https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/API_appconfigdata_GetLatestConfiguration.html) or for the configuration profile during the specified interval. This parameter supports the following values:
    ///
    /// * BYPASS: Instructs AppConfig to bypass the deletion protection check and delete a configuration profile even if deletion protection would have otherwise prevented it.
    ///
    /// * APPLY: Instructs the deletion protection check to run, even if deletion protection is disabled at the account level. APPLY also forces the deletion protection check to run against resources created in the past hour, which are normally excluded from deletion protection checks.
    ///
    /// * ACCOUNT_DEFAULT: The default setting, which instructs AppConfig to implement the deletion protection value specified in the UpdateAccountSettings API.
    public var deletionProtectionCheck: AppConfigClientTypes.DeletionProtectionCheck?

    public init(
        applicationId: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil,
        deletionProtectionCheck: AppConfigClientTypes.DeletionProtectionCheck? = nil
    )
    {
        self.applicationId = applicationId
        self.configurationProfileId = configurationProfileId
        self.deletionProtectionCheck = deletionProtectionCheck
    }
}

public struct DeleteDeploymentStrategyInput {
    /// The ID of the deployment strategy you want to delete.
    /// This member is required.
    public var deploymentStrategyId: Swift.String?

    public init(
        deploymentStrategyId: Swift.String? = nil
    )
    {
        self.deploymentStrategyId = deploymentStrategyId
    }
}

public struct DeleteEnvironmentInput {
    /// The application ID that includes the environment that you want to delete.
    /// This member is required.
    public var applicationId: Swift.String?
    /// A parameter to configure deletion protection. If enabled, deletion protection prevents a user from deleting an environment if your application called either [GetLatestConfiguration](https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/API_appconfigdata_GetLatestConfiguration.html) or in the environment during the specified interval. This parameter supports the following values:
    ///
    /// * BYPASS: Instructs AppConfig to bypass the deletion protection check and delete a configuration profile even if deletion protection would have otherwise prevented it.
    ///
    /// * APPLY: Instructs the deletion protection check to run, even if deletion protection is disabled at the account level. APPLY also forces the deletion protection check to run against resources created in the past hour, which are normally excluded from deletion protection checks.
    ///
    /// * ACCOUNT_DEFAULT: The default setting, which instructs AppConfig to implement the deletion protection value specified in the UpdateAccountSettings API.
    public var deletionProtectionCheck: AppConfigClientTypes.DeletionProtectionCheck?
    /// The ID of the environment that you want to delete.
    /// This member is required.
    public var environmentId: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        deletionProtectionCheck: AppConfigClientTypes.DeletionProtectionCheck? = nil,
        environmentId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.deletionProtectionCheck = deletionProtectionCheck
        self.environmentId = environmentId
    }
}

public struct DeleteExtensionInput {
    /// The name, ID, or Amazon Resource Name (ARN) of the extension you want to delete.
    /// This member is required.
    public var extensionIdentifier: Swift.String?
    /// A specific version of an extension to delete. If omitted, the highest version is deleted.
    public var versionNumber: Swift.Int?

    public init(
        extensionIdentifier: Swift.String? = nil,
        versionNumber: Swift.Int? = 0
    )
    {
        self.extensionIdentifier = extensionIdentifier
        self.versionNumber = versionNumber
    }
}

public struct DeleteExtensionAssociationInput {
    /// The ID of the extension association to delete.
    /// This member is required.
    public var extensionAssociationId: Swift.String?

    public init(
        extensionAssociationId: Swift.String? = nil
    )
    {
        self.extensionAssociationId = extensionAssociationId
    }
}

public struct DeleteHostedConfigurationVersionInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The configuration profile ID.
    /// This member is required.
    public var configurationProfileId: Swift.String?
    /// The versions number to delete.
    /// This member is required.
    public var versionNumber: Swift.Int?

    public init(
        applicationId: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil,
        versionNumber: Swift.Int? = 0
    )
    {
        self.applicationId = applicationId
        self.configurationProfileId = configurationProfileId
        self.versionNumber = versionNumber
    }
}

public struct GetAccountSettingsOutput {
    /// A parameter to configure deletion protection. If enabled, deletion protection prevents a user from deleting a configuration profile or an environment if AppConfig has called either [GetLatestConfiguration](https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/API_appconfigdata_GetLatestConfiguration.html) or for the configuration profile or from the environment during the specified interval. Deletion protection is disabled by default. The default interval for ProtectionPeriodInMinutes is 60.
    public var deletionProtection: AppConfigClientTypes.DeletionProtectionSettings?

    public init(
        deletionProtection: AppConfigClientTypes.DeletionProtectionSettings? = nil
    )
    {
        self.deletionProtection = deletionProtection
    }
}

public struct GetApplicationInput {
    /// The ID of the application you want to get.
    /// This member is required.
    public var applicationId: Swift.String?

    public init(
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

public struct GetApplicationOutput {
    /// The description of the application.
    public var description: Swift.String?
    /// The application ID.
    public var id: Swift.String?
    /// The application name.
    public var name: Swift.String?

    public init(
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.description = description
        self.id = id
        self.name = name
    }
}

public struct GetConfigurationInput {
    /// The application to get. Specify either the application name or the application ID.
    /// This member is required.
    public var application: Swift.String?
    /// The configuration version returned in the most recent [GetConfiguration] response. AppConfig uses the value of the ClientConfigurationVersion parameter to identify the configuration version on your clients. If you don’t send ClientConfigurationVersion with each call to [GetConfiguration], your clients receive the current configuration. You are charged each time your clients receive a configuration. To avoid excess charges, we recommend you use the [StartConfigurationSession](https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/StartConfigurationSession.html) and [GetLatestConfiguration](https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/GetLatestConfiguration.html) APIs, which track the client configuration version on your behalf. If you choose to continue using [GetConfiguration], we recommend that you include the ClientConfigurationVersion value with every call to [GetConfiguration]. The value to use for ClientConfigurationVersion comes from the ConfigurationVersion attribute returned by [GetConfiguration] when there is new or updated data, and should be saved for subsequent calls to [GetConfiguration]. For more information about working with configurations, see [Retrieving the Configuration](http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration.html) in the AppConfig User Guide.
    public var clientConfigurationVersion: Swift.String?
    /// The clientId parameter in the following command is a unique, user-specified ID to identify the client for the configuration. This ID enables AppConfig to deploy the configuration in intervals, as defined in the deployment strategy.
    /// This member is required.
    public var clientId: Swift.String?
    /// The configuration to get. Specify either the configuration name or the configuration ID.
    /// This member is required.
    public var configuration: Swift.String?
    /// The environment to get. Specify either the environment name or the environment ID.
    /// This member is required.
    public var environment: Swift.String?

    public init(
        application: Swift.String? = nil,
        clientConfigurationVersion: Swift.String? = nil,
        clientId: Swift.String? = nil,
        configuration: Swift.String? = nil,
        environment: Swift.String? = nil
    )
    {
        self.application = application
        self.clientConfigurationVersion = clientConfigurationVersion
        self.clientId = clientId
        self.configuration = configuration
        self.environment = environment
    }
}

public struct GetConfigurationOutput {
    /// The configuration version.
    public var configurationVersion: Swift.String?
    /// The content of the configuration or the configuration data. The Content attribute only contains data if the system finds new or updated configuration data. If there is no new or updated data and ClientConfigurationVersion matches the version of the current configuration, AppConfig returns a 204 No Content HTTP response code and the Content value will be empty.
    public var content: Foundation.Data?
    /// A standard MIME type describing the format of the configuration content. For more information, see [Content-Type](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17).
    public var contentType: Swift.String?

    public init(
        configurationVersion: Swift.String? = nil,
        content: Foundation.Data? = nil,
        contentType: Swift.String? = nil
    )
    {
        self.configurationVersion = configurationVersion
        self.content = content
        self.contentType = contentType
    }
}

extension GetConfigurationOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetConfigurationOutput(configurationVersion: \(Swift.String(describing: configurationVersion)), contentType: \(Swift.String(describing: contentType)), content: \"CONTENT_REDACTED\")"}
}

public struct GetConfigurationProfileInput {
    /// The ID of the application that includes the configuration profile you want to get.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The ID of the configuration profile that you want to get.
    /// This member is required.
    public var configurationProfileId: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.configurationProfileId = configurationProfileId
    }
}

public struct GetConfigurationProfileOutput {
    /// The application ID.
    public var applicationId: Swift.String?
    /// The configuration profile description.
    public var description: Swift.String?
    /// The configuration profile ID.
    public var id: Swift.String?
    /// The Amazon Resource Name of the Key Management Service key to encrypt new configuration data versions in the AppConfig hosted configuration store. This attribute is only used for hosted configuration types. To encrypt data managed in other configuration stores, see the documentation for how to specify an KMS key for that particular service.
    public var kmsKeyArn: Swift.String?
    /// The Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or updated.
    public var kmsKeyIdentifier: Swift.String?
    /// The URI location of the configuration.
    public var locationUri: Swift.String?
    /// The name of the configuration profile.
    public var name: Swift.String?
    /// The ARN of an IAM role with permission to access the configuration at the specified LocationUri.
    public var retrievalRoleArn: Swift.String?
    /// The type of configurations contained in the profile. AppConfig supports feature flags and freeform configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for Type: AWS.AppConfig.FeatureFlags
    ///     AWS.Freeform
    public var type: Swift.String?
    /// A list of methods for validating the configuration.
    public var validators: [AppConfigClientTypes.Validator]?

    public init(
        applicationId: Swift.String? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        kmsKeyArn: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        name: Swift.String? = nil,
        retrievalRoleArn: Swift.String? = nil,
        type: Swift.String? = nil,
        validators: [AppConfigClientTypes.Validator]? = nil
    )
    {
        self.applicationId = applicationId
        self.description = description
        self.id = id
        self.kmsKeyArn = kmsKeyArn
        self.kmsKeyIdentifier = kmsKeyIdentifier
        self.locationUri = locationUri
        self.name = name
        self.retrievalRoleArn = retrievalRoleArn
        self.type = type
        self.validators = validators
    }
}

public struct GetDeploymentInput {
    /// The ID of the application that includes the deployment you want to get.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The sequence number of the deployment.
    /// This member is required.
    public var deploymentNumber: Swift.Int?
    /// The ID of the environment that includes the deployment you want to get.
    /// This member is required.
    public var environmentId: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        deploymentNumber: Swift.Int? = 0,
        environmentId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.deploymentNumber = deploymentNumber
        self.environmentId = environmentId
    }
}

extension AppConfigClientTypes {
    /// An extension that was invoked during a deployment.
    public struct AppliedExtension {
        /// The system-generated ID for the association.
        public var extensionAssociationId: Swift.String?
        /// The system-generated ID of the extension.
        public var extensionId: Swift.String?
        /// One or more parameters for the actions called by the extension.
        public var parameters: [Swift.String: Swift.String]?
        /// The extension version number.
        public var versionNumber: Swift.Int

        public init(
            extensionAssociationId: Swift.String? = nil,
            extensionId: Swift.String? = nil,
            parameters: [Swift.String: Swift.String]? = nil,
            versionNumber: Swift.Int = 0
        )
        {
            self.extensionAssociationId = extensionAssociationId
            self.extensionId = extensionId
            self.parameters = parameters
            self.versionNumber = versionNumber
        }
    }

}

extension AppConfigClientTypes {

    public enum DeploymentEventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bakeTimeStarted
        case deploymentCompleted
        case deploymentStarted
        case percentageUpdated
        case rollbackCompleted
        case rollbackStarted
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentEventType] {
            return [
                .bakeTimeStarted,
                .deploymentCompleted,
                .deploymentStarted,
                .percentageUpdated,
                .rollbackCompleted,
                .rollbackStarted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bakeTimeStarted: return "BAKE_TIME_STARTED"
            case .deploymentCompleted: return "DEPLOYMENT_COMPLETED"
            case .deploymentStarted: return "DEPLOYMENT_STARTED"
            case .percentageUpdated: return "PERCENTAGE_UPDATED"
            case .rollbackCompleted: return "ROLLBACK_COMPLETED"
            case .rollbackStarted: return "ROLLBACK_STARTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AppConfigClientTypes {

    public enum TriggeredBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case appconfig
        case cloudwatchAlarm
        case internalError
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [TriggeredBy] {
            return [
                .appconfig,
                .cloudwatchAlarm,
                .internalError,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .appconfig: return "APPCONFIG"
            case .cloudwatchAlarm: return "CLOUDWATCH_ALARM"
            case .internalError: return "INTERNAL_ERROR"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AppConfigClientTypes {
    /// An object that describes a deployment event.
    public struct DeploymentEvent {
        /// The list of extensions that were invoked as part of the deployment.
        public var actionInvocations: [AppConfigClientTypes.ActionInvocation]?
        /// A description of the deployment event. Descriptions include, but are not limited to, the following:
        ///
        /// * The Amazon Web Services account or the Amazon CloudWatch alarm ARN that initiated a rollback.
        ///
        /// * The percentage of hosts that received the deployment.
        ///
        /// * A recommendation to attempt a new deployment (in the case of an internal error).
        public var description: Swift.String?
        /// The type of deployment event. Deployment event types include the start, stop, or completion of a deployment; a percentage update; the start or stop of a bake period; and the start or completion of a rollback.
        public var eventType: AppConfigClientTypes.DeploymentEventType?
        /// The date and time the event occurred.
        public var occurredAt: Foundation.Date?
        /// The entity that triggered the deployment event. Events can be triggered by a user, AppConfig, an Amazon CloudWatch alarm, or an internal error.
        public var triggeredBy: AppConfigClientTypes.TriggeredBy?

        public init(
            actionInvocations: [AppConfigClientTypes.ActionInvocation]? = nil,
            description: Swift.String? = nil,
            eventType: AppConfigClientTypes.DeploymentEventType? = nil,
            occurredAt: Foundation.Date? = nil,
            triggeredBy: AppConfigClientTypes.TriggeredBy? = nil
        )
        {
            self.actionInvocations = actionInvocations
            self.description = description
            self.eventType = eventType
            self.occurredAt = occurredAt
            self.triggeredBy = triggeredBy
        }
    }

}

extension AppConfigClientTypes {

    public enum DeploymentState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case baking
        case complete
        case deploying
        case rolledBack
        case rollingBack
        case validating
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentState] {
            return [
                .baking,
                .complete,
                .deploying,
                .rolledBack,
                .rollingBack,
                .validating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .baking: return "BAKING"
            case .complete: return "COMPLETE"
            case .deploying: return "DEPLOYING"
            case .rolledBack: return "ROLLED_BACK"
            case .rollingBack: return "ROLLING_BACK"
            case .validating: return "VALIDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetDeploymentOutput {
    /// The ID of the application that was deployed.
    public var applicationId: Swift.String?
    /// A list of extensions that were processed as part of the deployment. The extensions that were previously associated to the configuration profile, environment, or the application when StartDeployment was called.
    public var appliedExtensions: [AppConfigClientTypes.AppliedExtension]?
    /// The time the deployment completed.
    public var completedAt: Foundation.Date?
    /// Information about the source location of the configuration.
    public var configurationLocationUri: Swift.String?
    /// The name of the configuration.
    public var configurationName: Swift.String?
    /// The ID of the configuration profile that was deployed.
    public var configurationProfileId: Swift.String?
    /// The configuration version that was deployed.
    public var configurationVersion: Swift.String?
    /// Total amount of time the deployment lasted.
    public var deploymentDurationInMinutes: Swift.Int
    /// The sequence number of the deployment.
    public var deploymentNumber: Swift.Int
    /// The ID of the deployment strategy that was deployed.
    public var deploymentStrategyId: Swift.String?
    /// The description of the deployment.
    public var description: Swift.String?
    /// The ID of the environment that was deployed.
    public var environmentId: Swift.String?
    /// A list containing all events related to a deployment. The most recent events are displayed first.
    public var eventLog: [AppConfigClientTypes.DeploymentEvent]?
    /// The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.
    public var finalBakeTimeInMinutes: Swift.Int
    /// The percentage of targets to receive a deployed configuration during each interval.
    public var growthFactor: Swift.Float?
    /// The algorithm used to define how percentage grew over time.
    public var growthType: AppConfigClientTypes.GrowthType?
    /// The Amazon Resource Name of the Key Management Service key used to encrypt configuration data. You can encrypt secrets stored in Secrets Manager, Amazon Simple Storage Service (Amazon S3) objects encrypted with SSE-KMS, or secure string parameters stored in Amazon Web Services Systems Manager Parameter Store.
    public var kmsKeyArn: Swift.String?
    /// The Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or updated.
    public var kmsKeyIdentifier: Swift.String?
    /// The percentage of targets for which the deployment is available.
    public var percentageComplete: Swift.Float?
    /// The time the deployment started.
    public var startedAt: Foundation.Date?
    /// The state of the deployment.
    public var state: AppConfigClientTypes.DeploymentState?
    /// A user-defined label for an AppConfig hosted configuration version.
    public var versionLabel: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        appliedExtensions: [AppConfigClientTypes.AppliedExtension]? = nil,
        completedAt: Foundation.Date? = nil,
        configurationLocationUri: Swift.String? = nil,
        configurationName: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil,
        configurationVersion: Swift.String? = nil,
        deploymentDurationInMinutes: Swift.Int = 0,
        deploymentNumber: Swift.Int = 0,
        deploymentStrategyId: Swift.String? = nil,
        description: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        eventLog: [AppConfigClientTypes.DeploymentEvent]? = nil,
        finalBakeTimeInMinutes: Swift.Int = 0,
        growthFactor: Swift.Float? = nil,
        growthType: AppConfigClientTypes.GrowthType? = nil,
        kmsKeyArn: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil,
        percentageComplete: Swift.Float? = nil,
        startedAt: Foundation.Date? = nil,
        state: AppConfigClientTypes.DeploymentState? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.appliedExtensions = appliedExtensions
        self.completedAt = completedAt
        self.configurationLocationUri = configurationLocationUri
        self.configurationName = configurationName
        self.configurationProfileId = configurationProfileId
        self.configurationVersion = configurationVersion
        self.deploymentDurationInMinutes = deploymentDurationInMinutes
        self.deploymentNumber = deploymentNumber
        self.deploymentStrategyId = deploymentStrategyId
        self.description = description
        self.environmentId = environmentId
        self.eventLog = eventLog
        self.finalBakeTimeInMinutes = finalBakeTimeInMinutes
        self.growthFactor = growthFactor
        self.growthType = growthType
        self.kmsKeyArn = kmsKeyArn
        self.kmsKeyIdentifier = kmsKeyIdentifier
        self.percentageComplete = percentageComplete
        self.startedAt = startedAt
        self.state = state
        self.versionLabel = versionLabel
    }
}

public struct GetDeploymentStrategyInput {
    /// The ID of the deployment strategy to get.
    /// This member is required.
    public var deploymentStrategyId: Swift.String?

    public init(
        deploymentStrategyId: Swift.String? = nil
    )
    {
        self.deploymentStrategyId = deploymentStrategyId
    }
}

public struct GetDeploymentStrategyOutput {
    /// Total amount of time the deployment lasted.
    public var deploymentDurationInMinutes: Swift.Int
    /// The description of the deployment strategy.
    public var description: Swift.String?
    /// The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.
    public var finalBakeTimeInMinutes: Swift.Int
    /// The percentage of targets that received a deployed configuration during each interval.
    public var growthFactor: Swift.Float?
    /// The algorithm used to define how percentage grew over time.
    public var growthType: AppConfigClientTypes.GrowthType?
    /// The deployment strategy ID.
    public var id: Swift.String?
    /// The name of the deployment strategy.
    public var name: Swift.String?
    /// Save the deployment strategy to a Systems Manager (SSM) document.
    public var replicateTo: AppConfigClientTypes.ReplicateTo?

    public init(
        deploymentDurationInMinutes: Swift.Int = 0,
        description: Swift.String? = nil,
        finalBakeTimeInMinutes: Swift.Int = 0,
        growthFactor: Swift.Float? = nil,
        growthType: AppConfigClientTypes.GrowthType? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        replicateTo: AppConfigClientTypes.ReplicateTo? = nil
    )
    {
        self.deploymentDurationInMinutes = deploymentDurationInMinutes
        self.description = description
        self.finalBakeTimeInMinutes = finalBakeTimeInMinutes
        self.growthFactor = growthFactor
        self.growthType = growthType
        self.id = id
        self.name = name
        self.replicateTo = replicateTo
    }
}

public struct GetEnvironmentInput {
    /// The ID of the application that includes the environment you want to get.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The ID of the environment that you want to get.
    /// This member is required.
    public var environmentId: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        environmentId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.environmentId = environmentId
    }
}

public struct GetEnvironmentOutput {
    /// The application ID.
    public var applicationId: Swift.String?
    /// The description of the environment.
    public var description: Swift.String?
    /// The environment ID.
    public var id: Swift.String?
    /// Amazon CloudWatch alarms monitored during the deployment.
    public var monitors: [AppConfigClientTypes.Monitor]?
    /// The name of the environment.
    public var name: Swift.String?
    /// The state of the environment. An environment can be in one of the following states: READY_FOR_DEPLOYMENT, DEPLOYING, ROLLING_BACK, or ROLLED_BACK
    public var state: AppConfigClientTypes.EnvironmentState?

    public init(
        applicationId: Swift.String? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        monitors: [AppConfigClientTypes.Monitor]? = nil,
        name: Swift.String? = nil,
        state: AppConfigClientTypes.EnvironmentState? = nil
    )
    {
        self.applicationId = applicationId
        self.description = description
        self.id = id
        self.monitors = monitors
        self.name = name
        self.state = state
    }
}

public struct GetExtensionInput {
    /// The name, the ID, or the Amazon Resource Name (ARN) of the extension.
    /// This member is required.
    public var extensionIdentifier: Swift.String?
    /// The extension version number. If no version number was defined, AppConfig uses the highest version.
    public var versionNumber: Swift.Int?

    public init(
        extensionIdentifier: Swift.String? = nil,
        versionNumber: Swift.Int? = 0
    )
    {
        self.extensionIdentifier = extensionIdentifier
        self.versionNumber = versionNumber
    }
}

public struct GetExtensionOutput {
    /// The actions defined in the extension.
    public var actions: [Swift.String: [AppConfigClientTypes.Action]]?
    /// The system-generated Amazon Resource Name (ARN) for the extension.
    public var arn: Swift.String?
    /// Information about the extension.
    public var description: Swift.String?
    /// The system-generated ID of the extension.
    public var id: Swift.String?
    /// The extension name.
    public var name: Swift.String?
    /// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object.
    public var parameters: [Swift.String: AppConfigClientTypes.Parameter]?
    /// The extension version number.
    public var versionNumber: Swift.Int

    public init(
        actions: [Swift.String: [AppConfigClientTypes.Action]]? = nil,
        arn: Swift.String? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        parameters: [Swift.String: AppConfigClientTypes.Parameter]? = nil,
        versionNumber: Swift.Int = 0
    )
    {
        self.actions = actions
        self.arn = arn
        self.description = description
        self.id = id
        self.name = name
        self.parameters = parameters
        self.versionNumber = versionNumber
    }
}

public struct GetExtensionAssociationInput {
    /// The extension association ID to get.
    /// This member is required.
    public var extensionAssociationId: Swift.String?

    public init(
        extensionAssociationId: Swift.String? = nil
    )
    {
        self.extensionAssociationId = extensionAssociationId
    }
}

public struct GetExtensionAssociationOutput {
    /// The system-generated Amazon Resource Name (ARN) for the extension.
    public var arn: Swift.String?
    /// The ARN of the extension defined in the association.
    public var extensionArn: Swift.String?
    /// The version number for the extension defined in the association.
    public var extensionVersionNumber: Swift.Int
    /// The system-generated ID for the association.
    public var id: Swift.String?
    /// The parameter names and values defined in the association.
    public var parameters: [Swift.String: Swift.String]?
    /// The ARNs of applications, configuration profiles, or environments defined in the association.
    public var resourceArn: Swift.String?

    public init(
        arn: Swift.String? = nil,
        extensionArn: Swift.String? = nil,
        extensionVersionNumber: Swift.Int = 0,
        id: Swift.String? = nil,
        parameters: [Swift.String: Swift.String]? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.arn = arn
        self.extensionArn = extensionArn
        self.extensionVersionNumber = extensionVersionNumber
        self.id = id
        self.parameters = parameters
        self.resourceArn = resourceArn
    }
}

public struct GetHostedConfigurationVersionInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The configuration profile ID.
    /// This member is required.
    public var configurationProfileId: Swift.String?
    /// The version.
    /// This member is required.
    public var versionNumber: Swift.Int?

    public init(
        applicationId: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil,
        versionNumber: Swift.Int? = 0
    )
    {
        self.applicationId = applicationId
        self.configurationProfileId = configurationProfileId
        self.versionNumber = versionNumber
    }
}

public struct GetHostedConfigurationVersionOutput {
    /// The application ID.
    public var applicationId: Swift.String?
    /// The configuration profile ID.
    public var configurationProfileId: Swift.String?
    /// The content of the configuration or the configuration data.
    public var content: Foundation.Data?
    /// A standard MIME type describing the format of the configuration content. For more information, see [Content-Type](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17).
    public var contentType: Swift.String?
    /// A description of the configuration.
    public var description: Swift.String?
    /// The Amazon Resource Name of the Key Management Service key that was used to encrypt this specific version of the configuration data in the AppConfig hosted configuration store.
    public var kmsKeyArn: Swift.String?
    /// A user-defined label for an AppConfig hosted configuration version.
    public var versionLabel: Swift.String?
    /// The configuration version.
    public var versionNumber: Swift.Int

    public init(
        applicationId: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil,
        content: Foundation.Data? = nil,
        contentType: Swift.String? = nil,
        description: Swift.String? = nil,
        kmsKeyArn: Swift.String? = nil,
        versionLabel: Swift.String? = nil,
        versionNumber: Swift.Int = 0
    )
    {
        self.applicationId = applicationId
        self.configurationProfileId = configurationProfileId
        self.content = content
        self.contentType = contentType
        self.description = description
        self.kmsKeyArn = kmsKeyArn
        self.versionLabel = versionLabel
        self.versionNumber = versionNumber
    }
}

extension GetHostedConfigurationVersionOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHostedConfigurationVersionOutput(applicationId: \(Swift.String(describing: applicationId)), configurationProfileId: \(Swift.String(describing: configurationProfileId)), contentType: \(Swift.String(describing: contentType)), description: \(Swift.String(describing: description)), kmsKeyArn: \(Swift.String(describing: kmsKeyArn)), versionLabel: \(Swift.String(describing: versionLabel)), versionNumber: \(Swift.String(describing: versionNumber)), content: \"CONTENT_REDACTED\")"}
}

public struct ListApplicationsInput {
    /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    public var maxResults: Swift.Int?
    /// A token to start the list. Next token is a pagination token generated by AppConfig to describe what page the previous List call ended on. For the first List request, the nextToken should not be set. On subsequent calls, the nextToken parameter should be set to the previous responses nextToken value. Use this token to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension AppConfigClientTypes {
    public struct Application {
        /// The description of the application.
        public var description: Swift.String?
        /// The application ID.
        public var id: Swift.String?
        /// The application name.
        public var name: Swift.String?

        public init(
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.description = description
            self.id = id
            self.name = name
        }
    }

}

public struct ListApplicationsOutput {
    /// The elements from this collection.
    public var items: [AppConfigClientTypes.Application]?
    /// The token for the next set of items to return. Use this token to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        items: [AppConfigClientTypes.Application]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct ListConfigurationProfilesInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    public var maxResults: Swift.Int?
    /// A token to start the list. Use this token to get the next set of results.
    public var nextToken: Swift.String?
    /// A filter based on the type of configurations that the configuration profile contains. A configuration can be a feature flag or a freeform configuration.
    public var type: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.type = type
    }
}

extension AppConfigClientTypes {
    /// A summary of a configuration profile.
    public struct ConfigurationProfileSummary {
        /// The application ID.
        public var applicationId: Swift.String?
        /// The ID of the configuration profile.
        public var id: Swift.String?
        /// The URI location of the configuration.
        public var locationUri: Swift.String?
        /// The name of the configuration profile.
        public var name: Swift.String?
        /// The type of configurations contained in the profile. AppConfig supports feature flags and freeform configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for Type: AWS.AppConfig.FeatureFlags
        ///     AWS.Freeform
        public var type: Swift.String?
        /// The types of validators in the configuration profile.
        public var validatorTypes: [AppConfigClientTypes.ValidatorType]?

        public init(
            applicationId: Swift.String? = nil,
            id: Swift.String? = nil,
            locationUri: Swift.String? = nil,
            name: Swift.String? = nil,
            type: Swift.String? = nil,
            validatorTypes: [AppConfigClientTypes.ValidatorType]? = nil
        )
        {
            self.applicationId = applicationId
            self.id = id
            self.locationUri = locationUri
            self.name = name
            self.type = type
            self.validatorTypes = validatorTypes
        }
    }

}

public struct ListConfigurationProfilesOutput {
    /// The elements from this collection.
    public var items: [AppConfigClientTypes.ConfigurationProfileSummary]?
    /// The token for the next set of items to return. Use this token to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        items: [AppConfigClientTypes.ConfigurationProfileSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct ListDeploymentsInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The environment ID.
    /// This member is required.
    public var environmentId: Swift.String?
    /// The maximum number of items that may be returned for this call. If there are items that have not yet been returned, the response will include a non-null NextToken that you can provide in a subsequent call to get the next set of results.
    public var maxResults: Swift.Int?
    /// The token returned by a prior call to this operation indicating the next set of results to be returned. If not specified, the operation will return the first set of results.
    public var nextToken: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.environmentId = environmentId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension AppConfigClientTypes {
    /// Information about the deployment.
    public struct DeploymentSummary {
        /// Time the deployment completed.
        public var completedAt: Foundation.Date?
        /// The name of the configuration.
        public var configurationName: Swift.String?
        /// The version of the configuration.
        public var configurationVersion: Swift.String?
        /// Total amount of time the deployment lasted.
        public var deploymentDurationInMinutes: Swift.Int
        /// The sequence number of the deployment.
        public var deploymentNumber: Swift.Int
        /// The amount of time that AppConfig monitors for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.
        public var finalBakeTimeInMinutes: Swift.Int
        /// The percentage of targets to receive a deployed configuration during each interval.
        public var growthFactor: Swift.Float?
        /// The algorithm used to define how percentage grows over time.
        public var growthType: AppConfigClientTypes.GrowthType?
        /// The percentage of targets for which the deployment is available.
        public var percentageComplete: Swift.Float?
        /// Time the deployment started.
        public var startedAt: Foundation.Date?
        /// The state of the deployment.
        public var state: AppConfigClientTypes.DeploymentState?
        /// A user-defined label for an AppConfig hosted configuration version.
        public var versionLabel: Swift.String?

        public init(
            completedAt: Foundation.Date? = nil,
            configurationName: Swift.String? = nil,
            configurationVersion: Swift.String? = nil,
            deploymentDurationInMinutes: Swift.Int = 0,
            deploymentNumber: Swift.Int = 0,
            finalBakeTimeInMinutes: Swift.Int = 0,
            growthFactor: Swift.Float? = nil,
            growthType: AppConfigClientTypes.GrowthType? = nil,
            percentageComplete: Swift.Float? = nil,
            startedAt: Foundation.Date? = nil,
            state: AppConfigClientTypes.DeploymentState? = nil,
            versionLabel: Swift.String? = nil
        )
        {
            self.completedAt = completedAt
            self.configurationName = configurationName
            self.configurationVersion = configurationVersion
            self.deploymentDurationInMinutes = deploymentDurationInMinutes
            self.deploymentNumber = deploymentNumber
            self.finalBakeTimeInMinutes = finalBakeTimeInMinutes
            self.growthFactor = growthFactor
            self.growthType = growthType
            self.percentageComplete = percentageComplete
            self.startedAt = startedAt
            self.state = state
            self.versionLabel = versionLabel
        }
    }

}

public struct ListDeploymentsOutput {
    /// The elements from this collection.
    public var items: [AppConfigClientTypes.DeploymentSummary]?
    /// The token for the next set of items to return. Use this token to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        items: [AppConfigClientTypes.DeploymentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct ListDeploymentStrategiesInput {
    /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    public var maxResults: Swift.Int?
    /// A token to start the list. Use this token to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension AppConfigClientTypes {
    public struct DeploymentStrategy {
        /// Total amount of time the deployment lasted.
        public var deploymentDurationInMinutes: Swift.Int
        /// The description of the deployment strategy.
        public var description: Swift.String?
        /// The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.
        public var finalBakeTimeInMinutes: Swift.Int
        /// The percentage of targets that received a deployed configuration during each interval.
        public var growthFactor: Swift.Float?
        /// The algorithm used to define how percentage grew over time.
        public var growthType: AppConfigClientTypes.GrowthType?
        /// The deployment strategy ID.
        public var id: Swift.String?
        /// The name of the deployment strategy.
        public var name: Swift.String?
        /// Save the deployment strategy to a Systems Manager (SSM) document.
        public var replicateTo: AppConfigClientTypes.ReplicateTo?

        public init(
            deploymentDurationInMinutes: Swift.Int = 0,
            description: Swift.String? = nil,
            finalBakeTimeInMinutes: Swift.Int = 0,
            growthFactor: Swift.Float? = nil,
            growthType: AppConfigClientTypes.GrowthType? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            replicateTo: AppConfigClientTypes.ReplicateTo? = nil
        )
        {
            self.deploymentDurationInMinutes = deploymentDurationInMinutes
            self.description = description
            self.finalBakeTimeInMinutes = finalBakeTimeInMinutes
            self.growthFactor = growthFactor
            self.growthType = growthType
            self.id = id
            self.name = name
            self.replicateTo = replicateTo
        }
    }

}

public struct ListDeploymentStrategiesOutput {
    /// The elements from this collection.
    public var items: [AppConfigClientTypes.DeploymentStrategy]?
    /// The token for the next set of items to return. Use this token to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        items: [AppConfigClientTypes.DeploymentStrategy]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct ListEnvironmentsInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    public var maxResults: Swift.Int?
    /// A token to start the list. Use this token to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension AppConfigClientTypes {
    public struct Environment {
        /// The application ID.
        public var applicationId: Swift.String?
        /// The description of the environment.
        public var description: Swift.String?
        /// The environment ID.
        public var id: Swift.String?
        /// Amazon CloudWatch alarms monitored during the deployment.
        public var monitors: [AppConfigClientTypes.Monitor]?
        /// The name of the environment.
        public var name: Swift.String?
        /// The state of the environment. An environment can be in one of the following states: READY_FOR_DEPLOYMENT, DEPLOYING, ROLLING_BACK, or ROLLED_BACK
        public var state: AppConfigClientTypes.EnvironmentState?

        public init(
            applicationId: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            monitors: [AppConfigClientTypes.Monitor]? = nil,
            name: Swift.String? = nil,
            state: AppConfigClientTypes.EnvironmentState? = nil
        )
        {
            self.applicationId = applicationId
            self.description = description
            self.id = id
            self.monitors = monitors
            self.name = name
            self.state = state
        }
    }

}

public struct ListEnvironmentsOutput {
    /// The elements from this collection.
    public var items: [AppConfigClientTypes.Environment]?
    /// The token for the next set of items to return. Use this token to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        items: [AppConfigClientTypes.Environment]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct ListExtensionAssociationsInput {
    /// The name, the ID, or the Amazon Resource Name (ARN) of the extension.
    public var extensionIdentifier: Swift.String?
    /// The version number for the extension defined in the association.
    public var extensionVersionNumber: Swift.Int?
    /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    public var maxResults: Swift.Int?
    /// A token to start the list. Use this token to get the next set of results or pass null to get the first set of results.
    public var nextToken: Swift.String?
    /// The ARN of an application, configuration profile, or environment.
    public var resourceIdentifier: Swift.String?

    public init(
        extensionIdentifier: Swift.String? = nil,
        extensionVersionNumber: Swift.Int? = 0,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceIdentifier: Swift.String? = nil
    )
    {
        self.extensionIdentifier = extensionIdentifier
        self.extensionVersionNumber = extensionVersionNumber
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceIdentifier = resourceIdentifier
    }
}

extension AppConfigClientTypes {
    /// Information about an association between an extension and an AppConfig resource such as an application, environment, or configuration profile. Call GetExtensionAssociation to get more information about an association.
    public struct ExtensionAssociationSummary {
        /// The system-generated Amazon Resource Name (ARN) for the extension.
        public var extensionArn: Swift.String?
        /// The extension association ID. This ID is used to call other ExtensionAssociation API actions such as GetExtensionAssociation or DeleteExtensionAssociation.
        public var id: Swift.String?
        /// The ARNs of applications, configuration profiles, or environments defined in the association.
        public var resourceArn: Swift.String?

        public init(
            extensionArn: Swift.String? = nil,
            id: Swift.String? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.extensionArn = extensionArn
            self.id = id
            self.resourceArn = resourceArn
        }
    }

}

public struct ListExtensionAssociationsOutput {
    /// The list of extension associations. Each item represents an extension association to an application, environment, or configuration profile.
    public var items: [AppConfigClientTypes.ExtensionAssociationSummary]?
    /// The token for the next set of items to return. Use this token to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        items: [AppConfigClientTypes.ExtensionAssociationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct ListExtensionsInput {
    /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    public var maxResults: Swift.Int?
    /// The extension name.
    public var name: Swift.String?
    /// A token to start the list. Use this token to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
    }
}

extension AppConfigClientTypes {
    /// Information about an extension. Call GetExtension to get more information about an extension.
    public struct ExtensionSummary {
        /// The system-generated Amazon Resource Name (ARN) for the extension.
        public var arn: Swift.String?
        /// Information about the extension.
        public var description: Swift.String?
        /// The system-generated ID of the extension.
        public var id: Swift.String?
        /// The extension name.
        public var name: Swift.String?
        /// The extension version number.
        public var versionNumber: Swift.Int

        public init(
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            versionNumber: Swift.Int = 0
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.name = name
            self.versionNumber = versionNumber
        }
    }

}

public struct ListExtensionsOutput {
    /// The list of available extensions. The list includes Amazon Web Services authored and user-created extensions.
    public var items: [AppConfigClientTypes.ExtensionSummary]?
    /// The token for the next set of items to return. Use this token to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        items: [AppConfigClientTypes.ExtensionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct ListHostedConfigurationVersionsInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The configuration profile ID.
    /// This member is required.
    public var configurationProfileId: Swift.String?
    /// The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    public var maxResults: Swift.Int?
    /// A token to start the list. Use this token to get the next set of results.
    public var nextToken: Swift.String?
    /// An optional filter that can be used to specify the version label of an AppConfig hosted configuration version. This parameter supports filtering by prefix using a wildcard, for example "v2*". If you don't specify an asterisk at the end of the value, only an exact match is returned.
    public var versionLabel: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.configurationProfileId = configurationProfileId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.versionLabel = versionLabel
    }
}

extension AppConfigClientTypes {
    /// Information about the configuration.
    public struct HostedConfigurationVersionSummary {
        /// The application ID.
        public var applicationId: Swift.String?
        /// The configuration profile ID.
        public var configurationProfileId: Swift.String?
        /// A standard MIME type describing the format of the configuration content. For more information, see [Content-Type](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17).
        public var contentType: Swift.String?
        /// A description of the configuration.
        public var description: Swift.String?
        /// The Amazon Resource Name of the Key Management Service key that was used to encrypt this specific version of the configuration data in the AppConfig hosted configuration store.
        public var kmsKeyArn: Swift.String?
        /// A user-defined label for an AppConfig hosted configuration version.
        public var versionLabel: Swift.String?
        /// The configuration version.
        public var versionNumber: Swift.Int

        public init(
            applicationId: Swift.String? = nil,
            configurationProfileId: Swift.String? = nil,
            contentType: Swift.String? = nil,
            description: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil,
            versionLabel: Swift.String? = nil,
            versionNumber: Swift.Int = 0
        )
        {
            self.applicationId = applicationId
            self.configurationProfileId = configurationProfileId
            self.contentType = contentType
            self.description = description
            self.kmsKeyArn = kmsKeyArn
            self.versionLabel = versionLabel
            self.versionNumber = versionNumber
        }
    }

}

public struct ListHostedConfigurationVersionsOutput {
    /// The elements from this collection.
    public var items: [AppConfigClientTypes.HostedConfigurationVersionSummary]?
    /// The token for the next set of items to return. Use this token to get the next set of results.
    public var nextToken: Swift.String?

    public init(
        items: [AppConfigClientTypes.HostedConfigurationVersionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct ListTagsForResourceInput {
    /// The resource ARN.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// Metadata to assign to AppConfig resources. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct StartDeploymentInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The configuration profile ID.
    /// This member is required.
    public var configurationProfileId: Swift.String?
    /// The configuration version to deploy. If deploying an AppConfig hosted configuration version, you can specify either the version number or version label. For all other configurations, you must specify the version number.
    /// This member is required.
    public var configurationVersion: Swift.String?
    /// The deployment strategy ID.
    /// This member is required.
    public var deploymentStrategyId: Swift.String?
    /// A description of the deployment.
    public var description: Swift.String?
    /// A map of dynamic extension parameter names to values to pass to associated extensions with PRE_START_DEPLOYMENT actions.
    public var dynamicExtensionParameters: [Swift.String: Swift.String]?
    /// The environment ID.
    /// This member is required.
    public var environmentId: Swift.String?
    /// The KMS key identifier (key ID, key alias, or key ARN). AppConfig uses this ID to encrypt the configuration data using a customer managed key.
    public var kmsKeyIdentifier: Swift.String?
    /// Metadata to assign to the deployment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
    public var tags: [Swift.String: Swift.String]?

    public init(
        applicationId: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil,
        configurationVersion: Swift.String? = nil,
        deploymentStrategyId: Swift.String? = nil,
        description: Swift.String? = nil,
        dynamicExtensionParameters: [Swift.String: Swift.String]? = nil,
        environmentId: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.applicationId = applicationId
        self.configurationProfileId = configurationProfileId
        self.configurationVersion = configurationVersion
        self.deploymentStrategyId = deploymentStrategyId
        self.description = description
        self.dynamicExtensionParameters = dynamicExtensionParameters
        self.environmentId = environmentId
        self.kmsKeyIdentifier = kmsKeyIdentifier
        self.tags = tags
    }
}

public struct StartDeploymentOutput {
    /// The ID of the application that was deployed.
    public var applicationId: Swift.String?
    /// A list of extensions that were processed as part of the deployment. The extensions that were previously associated to the configuration profile, environment, or the application when StartDeployment was called.
    public var appliedExtensions: [AppConfigClientTypes.AppliedExtension]?
    /// The time the deployment completed.
    public var completedAt: Foundation.Date?
    /// Information about the source location of the configuration.
    public var configurationLocationUri: Swift.String?
    /// The name of the configuration.
    public var configurationName: Swift.String?
    /// The ID of the configuration profile that was deployed.
    public var configurationProfileId: Swift.String?
    /// The configuration version that was deployed.
    public var configurationVersion: Swift.String?
    /// Total amount of time the deployment lasted.
    public var deploymentDurationInMinutes: Swift.Int
    /// The sequence number of the deployment.
    public var deploymentNumber: Swift.Int
    /// The ID of the deployment strategy that was deployed.
    public var deploymentStrategyId: Swift.String?
    /// The description of the deployment.
    public var description: Swift.String?
    /// The ID of the environment that was deployed.
    public var environmentId: Swift.String?
    /// A list containing all events related to a deployment. The most recent events are displayed first.
    public var eventLog: [AppConfigClientTypes.DeploymentEvent]?
    /// The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.
    public var finalBakeTimeInMinutes: Swift.Int
    /// The percentage of targets to receive a deployed configuration during each interval.
    public var growthFactor: Swift.Float?
    /// The algorithm used to define how percentage grew over time.
    public var growthType: AppConfigClientTypes.GrowthType?
    /// The Amazon Resource Name of the Key Management Service key used to encrypt configuration data. You can encrypt secrets stored in Secrets Manager, Amazon Simple Storage Service (Amazon S3) objects encrypted with SSE-KMS, or secure string parameters stored in Amazon Web Services Systems Manager Parameter Store.
    public var kmsKeyArn: Swift.String?
    /// The Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or updated.
    public var kmsKeyIdentifier: Swift.String?
    /// The percentage of targets for which the deployment is available.
    public var percentageComplete: Swift.Float?
    /// The time the deployment started.
    public var startedAt: Foundation.Date?
    /// The state of the deployment.
    public var state: AppConfigClientTypes.DeploymentState?
    /// A user-defined label for an AppConfig hosted configuration version.
    public var versionLabel: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        appliedExtensions: [AppConfigClientTypes.AppliedExtension]? = nil,
        completedAt: Foundation.Date? = nil,
        configurationLocationUri: Swift.String? = nil,
        configurationName: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil,
        configurationVersion: Swift.String? = nil,
        deploymentDurationInMinutes: Swift.Int = 0,
        deploymentNumber: Swift.Int = 0,
        deploymentStrategyId: Swift.String? = nil,
        description: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        eventLog: [AppConfigClientTypes.DeploymentEvent]? = nil,
        finalBakeTimeInMinutes: Swift.Int = 0,
        growthFactor: Swift.Float? = nil,
        growthType: AppConfigClientTypes.GrowthType? = nil,
        kmsKeyArn: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil,
        percentageComplete: Swift.Float? = nil,
        startedAt: Foundation.Date? = nil,
        state: AppConfigClientTypes.DeploymentState? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.appliedExtensions = appliedExtensions
        self.completedAt = completedAt
        self.configurationLocationUri = configurationLocationUri
        self.configurationName = configurationName
        self.configurationProfileId = configurationProfileId
        self.configurationVersion = configurationVersion
        self.deploymentDurationInMinutes = deploymentDurationInMinutes
        self.deploymentNumber = deploymentNumber
        self.deploymentStrategyId = deploymentStrategyId
        self.description = description
        self.environmentId = environmentId
        self.eventLog = eventLog
        self.finalBakeTimeInMinutes = finalBakeTimeInMinutes
        self.growthFactor = growthFactor
        self.growthType = growthType
        self.kmsKeyArn = kmsKeyArn
        self.kmsKeyIdentifier = kmsKeyIdentifier
        self.percentageComplete = percentageComplete
        self.startedAt = startedAt
        self.state = state
        self.versionLabel = versionLabel
    }
}

public struct StopDeploymentInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The sequence number of the deployment.
    /// This member is required.
    public var deploymentNumber: Swift.Int?
    /// The environment ID.
    /// This member is required.
    public var environmentId: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        deploymentNumber: Swift.Int? = 0,
        environmentId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.deploymentNumber = deploymentNumber
        self.environmentId = environmentId
    }
}

public struct StopDeploymentOutput {
    /// The ID of the application that was deployed.
    public var applicationId: Swift.String?
    /// A list of extensions that were processed as part of the deployment. The extensions that were previously associated to the configuration profile, environment, or the application when StartDeployment was called.
    public var appliedExtensions: [AppConfigClientTypes.AppliedExtension]?
    /// The time the deployment completed.
    public var completedAt: Foundation.Date?
    /// Information about the source location of the configuration.
    public var configurationLocationUri: Swift.String?
    /// The name of the configuration.
    public var configurationName: Swift.String?
    /// The ID of the configuration profile that was deployed.
    public var configurationProfileId: Swift.String?
    /// The configuration version that was deployed.
    public var configurationVersion: Swift.String?
    /// Total amount of time the deployment lasted.
    public var deploymentDurationInMinutes: Swift.Int
    /// The sequence number of the deployment.
    public var deploymentNumber: Swift.Int
    /// The ID of the deployment strategy that was deployed.
    public var deploymentStrategyId: Swift.String?
    /// The description of the deployment.
    public var description: Swift.String?
    /// The ID of the environment that was deployed.
    public var environmentId: Swift.String?
    /// A list containing all events related to a deployment. The most recent events are displayed first.
    public var eventLog: [AppConfigClientTypes.DeploymentEvent]?
    /// The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.
    public var finalBakeTimeInMinutes: Swift.Int
    /// The percentage of targets to receive a deployed configuration during each interval.
    public var growthFactor: Swift.Float?
    /// The algorithm used to define how percentage grew over time.
    public var growthType: AppConfigClientTypes.GrowthType?
    /// The Amazon Resource Name of the Key Management Service key used to encrypt configuration data. You can encrypt secrets stored in Secrets Manager, Amazon Simple Storage Service (Amazon S3) objects encrypted with SSE-KMS, or secure string parameters stored in Amazon Web Services Systems Manager Parameter Store.
    public var kmsKeyArn: Swift.String?
    /// The Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or updated.
    public var kmsKeyIdentifier: Swift.String?
    /// The percentage of targets for which the deployment is available.
    public var percentageComplete: Swift.Float?
    /// The time the deployment started.
    public var startedAt: Foundation.Date?
    /// The state of the deployment.
    public var state: AppConfigClientTypes.DeploymentState?
    /// A user-defined label for an AppConfig hosted configuration version.
    public var versionLabel: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        appliedExtensions: [AppConfigClientTypes.AppliedExtension]? = nil,
        completedAt: Foundation.Date? = nil,
        configurationLocationUri: Swift.String? = nil,
        configurationName: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil,
        configurationVersion: Swift.String? = nil,
        deploymentDurationInMinutes: Swift.Int = 0,
        deploymentNumber: Swift.Int = 0,
        deploymentStrategyId: Swift.String? = nil,
        description: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        eventLog: [AppConfigClientTypes.DeploymentEvent]? = nil,
        finalBakeTimeInMinutes: Swift.Int = 0,
        growthFactor: Swift.Float? = nil,
        growthType: AppConfigClientTypes.GrowthType? = nil,
        kmsKeyArn: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil,
        percentageComplete: Swift.Float? = nil,
        startedAt: Foundation.Date? = nil,
        state: AppConfigClientTypes.DeploymentState? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.appliedExtensions = appliedExtensions
        self.completedAt = completedAt
        self.configurationLocationUri = configurationLocationUri
        self.configurationName = configurationName
        self.configurationProfileId = configurationProfileId
        self.configurationVersion = configurationVersion
        self.deploymentDurationInMinutes = deploymentDurationInMinutes
        self.deploymentNumber = deploymentNumber
        self.deploymentStrategyId = deploymentStrategyId
        self.description = description
        self.environmentId = environmentId
        self.eventLog = eventLog
        self.finalBakeTimeInMinutes = finalBakeTimeInMinutes
        self.growthFactor = growthFactor
        self.growthType = growthType
        self.kmsKeyArn = kmsKeyArn
        self.kmsKeyIdentifier = kmsKeyIdentifier
        self.percentageComplete = percentageComplete
        self.startedAt = startedAt
        self.state = state
        self.versionLabel = versionLabel
    }
}

public struct TagResourceInput {
    /// The ARN of the resource for which to retrieve tags.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The key-value string map. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct UntagResourceInput {
    /// The ARN of the resource for which to remove tags.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tag keys to delete.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UpdateAccountSettingsInput {
    /// A parameter to configure deletion protection. If enabled, deletion protection prevents a user from deleting a configuration profile or an environment if AppConfig has called either [GetLatestConfiguration](https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/API_appconfigdata_GetLatestConfiguration.html) or for the configuration profile or from the environment during the specified interval. Deletion protection is disabled by default. The default interval for ProtectionPeriodInMinutes is 60.
    public var deletionProtection: AppConfigClientTypes.DeletionProtectionSettings?

    public init(
        deletionProtection: AppConfigClientTypes.DeletionProtectionSettings? = nil
    )
    {
        self.deletionProtection = deletionProtection
    }
}

public struct UpdateAccountSettingsOutput {
    /// A parameter to configure deletion protection. If enabled, deletion protection prevents a user from deleting a configuration profile or an environment if AppConfig has called either [GetLatestConfiguration](https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/API_appconfigdata_GetLatestConfiguration.html) or for the configuration profile or from the environment during the specified interval. Deletion protection is disabled by default. The default interval for ProtectionPeriodInMinutes is 60.
    public var deletionProtection: AppConfigClientTypes.DeletionProtectionSettings?

    public init(
        deletionProtection: AppConfigClientTypes.DeletionProtectionSettings? = nil
    )
    {
        self.deletionProtection = deletionProtection
    }
}

public struct UpdateApplicationInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// A description of the application.
    public var description: Swift.String?
    /// The name of the application.
    public var name: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.description = description
        self.name = name
    }
}

public struct UpdateApplicationOutput {
    /// The description of the application.
    public var description: Swift.String?
    /// The application ID.
    public var id: Swift.String?
    /// The application name.
    public var name: Swift.String?

    public init(
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.description = description
        self.id = id
        self.name = name
    }
}

public struct UpdateConfigurationProfileInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The ID of the configuration profile.
    /// This member is required.
    public var configurationProfileId: Swift.String?
    /// A description of the configuration profile.
    public var description: Swift.String?
    /// The identifier for a Key Management Service key to encrypt new configuration data versions in the AppConfig hosted configuration store. This attribute is only used for hosted configuration types. The identifier can be an KMS key ID, alias, or the Amazon Resource Name (ARN) of the key ID or alias. To encrypt data managed in other configuration stores, see the documentation for how to specify an KMS key for that particular service.
    public var kmsKeyIdentifier: Swift.String?
    /// The name of the configuration profile.
    public var name: Swift.String?
    /// The ARN of an IAM role with permission to access the configuration at the specified LocationUri.
    public var retrievalRoleArn: Swift.String?
    /// A list of methods for validating the configuration.
    public var validators: [AppConfigClientTypes.Validator]?

    public init(
        applicationId: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil,
        description: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil,
        name: Swift.String? = nil,
        retrievalRoleArn: Swift.String? = nil,
        validators: [AppConfigClientTypes.Validator]? = nil
    )
    {
        self.applicationId = applicationId
        self.configurationProfileId = configurationProfileId
        self.description = description
        self.kmsKeyIdentifier = kmsKeyIdentifier
        self.name = name
        self.retrievalRoleArn = retrievalRoleArn
        self.validators = validators
    }
}

public struct UpdateConfigurationProfileOutput {
    /// The application ID.
    public var applicationId: Swift.String?
    /// The configuration profile description.
    public var description: Swift.String?
    /// The configuration profile ID.
    public var id: Swift.String?
    /// The Amazon Resource Name of the Key Management Service key to encrypt new configuration data versions in the AppConfig hosted configuration store. This attribute is only used for hosted configuration types. To encrypt data managed in other configuration stores, see the documentation for how to specify an KMS key for that particular service.
    public var kmsKeyArn: Swift.String?
    /// The Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or updated.
    public var kmsKeyIdentifier: Swift.String?
    /// The URI location of the configuration.
    public var locationUri: Swift.String?
    /// The name of the configuration profile.
    public var name: Swift.String?
    /// The ARN of an IAM role with permission to access the configuration at the specified LocationUri.
    public var retrievalRoleArn: Swift.String?
    /// The type of configurations contained in the profile. AppConfig supports feature flags and freeform configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for Type: AWS.AppConfig.FeatureFlags
    ///     AWS.Freeform
    public var type: Swift.String?
    /// A list of methods for validating the configuration.
    public var validators: [AppConfigClientTypes.Validator]?

    public init(
        applicationId: Swift.String? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        kmsKeyArn: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        name: Swift.String? = nil,
        retrievalRoleArn: Swift.String? = nil,
        type: Swift.String? = nil,
        validators: [AppConfigClientTypes.Validator]? = nil
    )
    {
        self.applicationId = applicationId
        self.description = description
        self.id = id
        self.kmsKeyArn = kmsKeyArn
        self.kmsKeyIdentifier = kmsKeyIdentifier
        self.locationUri = locationUri
        self.name = name
        self.retrievalRoleArn = retrievalRoleArn
        self.type = type
        self.validators = validators
    }
}

public struct UpdateDeploymentStrategyInput {
    /// Total amount of time for a deployment to last.
    public var deploymentDurationInMinutes: Swift.Int?
    /// The deployment strategy ID.
    /// This member is required.
    public var deploymentStrategyId: Swift.String?
    /// A description of the deployment strategy.
    public var description: Swift.String?
    /// The amount of time that AppConfig monitors for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.
    public var finalBakeTimeInMinutes: Swift.Int?
    /// The percentage of targets to receive a deployed configuration during each interval.
    public var growthFactor: Swift.Float?
    /// The algorithm used to define how percentage grows over time. AppConfig supports the following growth types: Linear: For this type, AppConfig processes the deployment by increments of the growth factor evenly distributed over the deployment time. For example, a linear deployment that uses a growth factor of 20 initially makes the configuration available to 20 percent of the targets. After 1/5th of the deployment time has passed, the system updates the percentage to 40 percent. This continues until 100% of the targets are set to receive the deployed configuration. Exponential: For this type, AppConfig processes the deployment exponentially using the following formula: G*(2^N). In this formula, G is the growth factor specified by the user and N is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows: 2*(2^0)
    ///     2*(2^1)
    ///
    /// 2*(2^2) Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.
    public var growthType: AppConfigClientTypes.GrowthType?

    public init(
        deploymentDurationInMinutes: Swift.Int? = 0,
        deploymentStrategyId: Swift.String? = nil,
        description: Swift.String? = nil,
        finalBakeTimeInMinutes: Swift.Int? = 0,
        growthFactor: Swift.Float? = nil,
        growthType: AppConfigClientTypes.GrowthType? = nil
    )
    {
        self.deploymentDurationInMinutes = deploymentDurationInMinutes
        self.deploymentStrategyId = deploymentStrategyId
        self.description = description
        self.finalBakeTimeInMinutes = finalBakeTimeInMinutes
        self.growthFactor = growthFactor
        self.growthType = growthType
    }
}

public struct UpdateDeploymentStrategyOutput {
    /// Total amount of time the deployment lasted.
    public var deploymentDurationInMinutes: Swift.Int
    /// The description of the deployment strategy.
    public var description: Swift.String?
    /// The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.
    public var finalBakeTimeInMinutes: Swift.Int
    /// The percentage of targets that received a deployed configuration during each interval.
    public var growthFactor: Swift.Float?
    /// The algorithm used to define how percentage grew over time.
    public var growthType: AppConfigClientTypes.GrowthType?
    /// The deployment strategy ID.
    public var id: Swift.String?
    /// The name of the deployment strategy.
    public var name: Swift.String?
    /// Save the deployment strategy to a Systems Manager (SSM) document.
    public var replicateTo: AppConfigClientTypes.ReplicateTo?

    public init(
        deploymentDurationInMinutes: Swift.Int = 0,
        description: Swift.String? = nil,
        finalBakeTimeInMinutes: Swift.Int = 0,
        growthFactor: Swift.Float? = nil,
        growthType: AppConfigClientTypes.GrowthType? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        replicateTo: AppConfigClientTypes.ReplicateTo? = nil
    )
    {
        self.deploymentDurationInMinutes = deploymentDurationInMinutes
        self.description = description
        self.finalBakeTimeInMinutes = finalBakeTimeInMinutes
        self.growthFactor = growthFactor
        self.growthType = growthType
        self.id = id
        self.name = name
        self.replicateTo = replicateTo
    }
}

public struct UpdateEnvironmentInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// A description of the environment.
    public var description: Swift.String?
    /// The environment ID.
    /// This member is required.
    public var environmentId: Swift.String?
    /// Amazon CloudWatch alarms to monitor during the deployment process.
    public var monitors: [AppConfigClientTypes.Monitor]?
    /// The name of the environment.
    public var name: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        description: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        monitors: [AppConfigClientTypes.Monitor]? = nil,
        name: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.description = description
        self.environmentId = environmentId
        self.monitors = monitors
        self.name = name
    }
}

public struct UpdateEnvironmentOutput {
    /// The application ID.
    public var applicationId: Swift.String?
    /// The description of the environment.
    public var description: Swift.String?
    /// The environment ID.
    public var id: Swift.String?
    /// Amazon CloudWatch alarms monitored during the deployment.
    public var monitors: [AppConfigClientTypes.Monitor]?
    /// The name of the environment.
    public var name: Swift.String?
    /// The state of the environment. An environment can be in one of the following states: READY_FOR_DEPLOYMENT, DEPLOYING, ROLLING_BACK, or ROLLED_BACK
    public var state: AppConfigClientTypes.EnvironmentState?

    public init(
        applicationId: Swift.String? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        monitors: [AppConfigClientTypes.Monitor]? = nil,
        name: Swift.String? = nil,
        state: AppConfigClientTypes.EnvironmentState? = nil
    )
    {
        self.applicationId = applicationId
        self.description = description
        self.id = id
        self.monitors = monitors
        self.name = name
        self.state = state
    }
}

public struct UpdateExtensionInput {
    /// The actions defined in the extension.
    public var actions: [Swift.String: [AppConfigClientTypes.Action]]?
    /// Information about the extension.
    public var description: Swift.String?
    /// The name, the ID, or the Amazon Resource Name (ARN) of the extension.
    /// This member is required.
    public var extensionIdentifier: Swift.String?
    /// One or more parameters for the actions called by the extension.
    public var parameters: [Swift.String: AppConfigClientTypes.Parameter]?
    /// The extension version number.
    public var versionNumber: Swift.Int?

    public init(
        actions: [Swift.String: [AppConfigClientTypes.Action]]? = nil,
        description: Swift.String? = nil,
        extensionIdentifier: Swift.String? = nil,
        parameters: [Swift.String: AppConfigClientTypes.Parameter]? = nil,
        versionNumber: Swift.Int? = 0
    )
    {
        self.actions = actions
        self.description = description
        self.extensionIdentifier = extensionIdentifier
        self.parameters = parameters
        self.versionNumber = versionNumber
    }
}

public struct UpdateExtensionOutput {
    /// The actions defined in the extension.
    public var actions: [Swift.String: [AppConfigClientTypes.Action]]?
    /// The system-generated Amazon Resource Name (ARN) for the extension.
    public var arn: Swift.String?
    /// Information about the extension.
    public var description: Swift.String?
    /// The system-generated ID of the extension.
    public var id: Swift.String?
    /// The extension name.
    public var name: Swift.String?
    /// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object.
    public var parameters: [Swift.String: AppConfigClientTypes.Parameter]?
    /// The extension version number.
    public var versionNumber: Swift.Int

    public init(
        actions: [Swift.String: [AppConfigClientTypes.Action]]? = nil,
        arn: Swift.String? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        parameters: [Swift.String: AppConfigClientTypes.Parameter]? = nil,
        versionNumber: Swift.Int = 0
    )
    {
        self.actions = actions
        self.arn = arn
        self.description = description
        self.id = id
        self.name = name
        self.parameters = parameters
        self.versionNumber = versionNumber
    }
}

public struct UpdateExtensionAssociationInput {
    /// The system-generated ID for the association.
    /// This member is required.
    public var extensionAssociationId: Swift.String?
    /// The parameter names and values defined in the extension.
    public var parameters: [Swift.String: Swift.String]?

    public init(
        extensionAssociationId: Swift.String? = nil,
        parameters: [Swift.String: Swift.String]? = nil
    )
    {
        self.extensionAssociationId = extensionAssociationId
        self.parameters = parameters
    }
}

public struct UpdateExtensionAssociationOutput {
    /// The system-generated Amazon Resource Name (ARN) for the extension.
    public var arn: Swift.String?
    /// The ARN of the extension defined in the association.
    public var extensionArn: Swift.String?
    /// The version number for the extension defined in the association.
    public var extensionVersionNumber: Swift.Int
    /// The system-generated ID for the association.
    public var id: Swift.String?
    /// The parameter names and values defined in the association.
    public var parameters: [Swift.String: Swift.String]?
    /// The ARNs of applications, configuration profiles, or environments defined in the association.
    public var resourceArn: Swift.String?

    public init(
        arn: Swift.String? = nil,
        extensionArn: Swift.String? = nil,
        extensionVersionNumber: Swift.Int = 0,
        id: Swift.String? = nil,
        parameters: [Swift.String: Swift.String]? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.arn = arn
        self.extensionArn = extensionArn
        self.extensionVersionNumber = extensionVersionNumber
        self.id = id
        self.parameters = parameters
        self.resourceArn = resourceArn
    }
}

public struct ValidateConfigurationInput {
    /// The application ID.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The configuration profile ID.
    /// This member is required.
    public var configurationProfileId: Swift.String?
    /// The version of the configuration to validate.
    /// This member is required.
    public var configurationVersion: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        configurationProfileId: Swift.String? = nil,
        configurationVersion: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.configurationProfileId = configurationProfileId
        self.configurationVersion = configurationVersion
    }
}

extension CreateApplicationInput {

    static func urlPathProvider(_ value: CreateApplicationInput) -> Swift.String? {
        return "/applications"
    }
}

extension CreateConfigurationProfileInput {

    static func urlPathProvider(_ value: CreateConfigurationProfileInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/configurationprofiles"
    }
}

extension CreateDeploymentStrategyInput {

    static func urlPathProvider(_ value: CreateDeploymentStrategyInput) -> Swift.String? {
        return "/deploymentstrategies"
    }
}

extension CreateEnvironmentInput {

    static func urlPathProvider(_ value: CreateEnvironmentInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/environments"
    }
}

extension CreateExtensionInput {

    static func urlPathProvider(_ value: CreateExtensionInput) -> Swift.String? {
        return "/extensions"
    }
}

extension CreateExtensionInput {

    static func headerProvider(_ value: CreateExtensionInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let latestVersionNumber = value.latestVersionNumber {
            items.add(SmithyHTTPAPI.Header(name: "Latest-Version-Number", value: Swift.String(latestVersionNumber)))
        }
        return items
    }
}

extension CreateExtensionAssociationInput {

    static func urlPathProvider(_ value: CreateExtensionAssociationInput) -> Swift.String? {
        return "/extensionassociations"
    }
}

extension CreateHostedConfigurationVersionInput {

    static func urlPathProvider(_ value: CreateHostedConfigurationVersionInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let configurationProfileId = value.configurationProfileId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/configurationprofiles/\(configurationProfileId.urlPercentEncoding())/hostedconfigurationversions"
    }
}

extension CreateHostedConfigurationVersionInput {

    static func headerProvider(_ value: CreateHostedConfigurationVersionInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let contentType = value.contentType {
            items.add(SmithyHTTPAPI.Header(name: "Content-Type", value: Swift.String(contentType)))
        }
        if let description = value.description {
            items.add(SmithyHTTPAPI.Header(name: "Description", value: Swift.String(description)))
        }
        if let latestVersionNumber = value.latestVersionNumber {
            items.add(SmithyHTTPAPI.Header(name: "Latest-Version-Number", value: Swift.String(latestVersionNumber)))
        }
        if let versionLabel = value.versionLabel {
            items.add(SmithyHTTPAPI.Header(name: "VersionLabel", value: Swift.String(versionLabel)))
        }
        return items
    }
}

extension DeleteApplicationInput {

    static func urlPathProvider(_ value: DeleteApplicationInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())"
    }
}

extension DeleteConfigurationProfileInput {

    static func urlPathProvider(_ value: DeleteConfigurationProfileInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let configurationProfileId = value.configurationProfileId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/configurationprofiles/\(configurationProfileId.urlPercentEncoding())"
    }
}

extension DeleteConfigurationProfileInput {

    static func headerProvider(_ value: DeleteConfigurationProfileInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let deletionProtectionCheck = value.deletionProtectionCheck {
            items.add(SmithyHTTPAPI.Header(name: "x-amzn-deletion-protection-check", value: Swift.String(deletionProtectionCheck.rawValue)))
        }
        return items
    }
}

extension DeleteDeploymentStrategyInput {

    static func urlPathProvider(_ value: DeleteDeploymentStrategyInput) -> Swift.String? {
        guard let deploymentStrategyId = value.deploymentStrategyId else {
            return nil
        }
        return "/deployementstrategies/\(deploymentStrategyId.urlPercentEncoding())"
    }
}

extension DeleteEnvironmentInput {

    static func urlPathProvider(_ value: DeleteEnvironmentInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let environmentId = value.environmentId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/environments/\(environmentId.urlPercentEncoding())"
    }
}

extension DeleteEnvironmentInput {

    static func headerProvider(_ value: DeleteEnvironmentInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let deletionProtectionCheck = value.deletionProtectionCheck {
            items.add(SmithyHTTPAPI.Header(name: "x-amzn-deletion-protection-check", value: Swift.String(deletionProtectionCheck.rawValue)))
        }
        return items
    }
}

extension DeleteExtensionInput {

    static func urlPathProvider(_ value: DeleteExtensionInput) -> Swift.String? {
        guard let extensionIdentifier = value.extensionIdentifier else {
            return nil
        }
        return "/extensions/\(extensionIdentifier.urlPercentEncoding())"
    }
}

extension DeleteExtensionInput {

    static func queryItemProvider(_ value: DeleteExtensionInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let versionNumber = value.versionNumber {
            let versionNumberQueryItem = Smithy.URIQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(versionNumber).urlPercentEncoding())
            items.append(versionNumberQueryItem)
        }
        return items
    }
}

extension DeleteExtensionAssociationInput {

    static func urlPathProvider(_ value: DeleteExtensionAssociationInput) -> Swift.String? {
        guard let extensionAssociationId = value.extensionAssociationId else {
            return nil
        }
        return "/extensionassociations/\(extensionAssociationId.urlPercentEncoding())"
    }
}

extension DeleteHostedConfigurationVersionInput {

    static func urlPathProvider(_ value: DeleteHostedConfigurationVersionInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let configurationProfileId = value.configurationProfileId else {
            return nil
        }
        guard let versionNumber = value.versionNumber else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/configurationprofiles/\(configurationProfileId.urlPercentEncoding())/hostedconfigurationversions/\(versionNumber)"
    }
}

extension GetAccountSettingsInput {

    static func urlPathProvider(_ value: GetAccountSettingsInput) -> Swift.String? {
        return "/settings"
    }
}

extension GetApplicationInput {

    static func urlPathProvider(_ value: GetApplicationInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())"
    }
}

extension GetConfigurationInput {

    static func urlPathProvider(_ value: GetConfigurationInput) -> Swift.String? {
        guard let application = value.application else {
            return nil
        }
        guard let environment = value.environment else {
            return nil
        }
        guard let configuration = value.configuration else {
            return nil
        }
        return "/applications/\(application.urlPercentEncoding())/environments/\(environment.urlPercentEncoding())/configurations/\(configuration.urlPercentEncoding())"
    }
}

extension GetConfigurationInput {

    static func queryItemProvider(_ value: GetConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let clientId = value.clientId else {
            let message = "Creating a URL Query Item failed. clientId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let clientIdQueryItem = Smithy.URIQueryItem(name: "client_id".urlPercentEncoding(), value: Swift.String(clientId).urlPercentEncoding())
        items.append(clientIdQueryItem)
        if let clientConfigurationVersion = value.clientConfigurationVersion {
            let clientConfigurationVersionQueryItem = Smithy.URIQueryItem(name: "client_configuration_version".urlPercentEncoding(), value: Swift.String(clientConfigurationVersion).urlPercentEncoding())
            items.append(clientConfigurationVersionQueryItem)
        }
        return items
    }
}

extension GetConfigurationProfileInput {

    static func urlPathProvider(_ value: GetConfigurationProfileInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let configurationProfileId = value.configurationProfileId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/configurationprofiles/\(configurationProfileId.urlPercentEncoding())"
    }
}

extension GetDeploymentInput {

    static func urlPathProvider(_ value: GetDeploymentInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let environmentId = value.environmentId else {
            return nil
        }
        guard let deploymentNumber = value.deploymentNumber else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/environments/\(environmentId.urlPercentEncoding())/deployments/\(deploymentNumber)"
    }
}

extension GetDeploymentStrategyInput {

    static func urlPathProvider(_ value: GetDeploymentStrategyInput) -> Swift.String? {
        guard let deploymentStrategyId = value.deploymentStrategyId else {
            return nil
        }
        return "/deploymentstrategies/\(deploymentStrategyId.urlPercentEncoding())"
    }
}

extension GetEnvironmentInput {

    static func urlPathProvider(_ value: GetEnvironmentInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let environmentId = value.environmentId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/environments/\(environmentId.urlPercentEncoding())"
    }
}

extension GetExtensionInput {

    static func urlPathProvider(_ value: GetExtensionInput) -> Swift.String? {
        guard let extensionIdentifier = value.extensionIdentifier else {
            return nil
        }
        return "/extensions/\(extensionIdentifier.urlPercentEncoding())"
    }
}

extension GetExtensionInput {

    static func queryItemProvider(_ value: GetExtensionInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let versionNumber = value.versionNumber {
            let versionNumberQueryItem = Smithy.URIQueryItem(name: "version_number".urlPercentEncoding(), value: Swift.String(versionNumber).urlPercentEncoding())
            items.append(versionNumberQueryItem)
        }
        return items
    }
}

extension GetExtensionAssociationInput {

    static func urlPathProvider(_ value: GetExtensionAssociationInput) -> Swift.String? {
        guard let extensionAssociationId = value.extensionAssociationId else {
            return nil
        }
        return "/extensionassociations/\(extensionAssociationId.urlPercentEncoding())"
    }
}

extension GetHostedConfigurationVersionInput {

    static func urlPathProvider(_ value: GetHostedConfigurationVersionInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let configurationProfileId = value.configurationProfileId else {
            return nil
        }
        guard let versionNumber = value.versionNumber else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/configurationprofiles/\(configurationProfileId.urlPercentEncoding())/hostedconfigurationversions/\(versionNumber)"
    }
}

extension ListApplicationsInput {

    static func urlPathProvider(_ value: ListApplicationsInput) -> Swift.String? {
        return "/applications"
    }
}

extension ListApplicationsInput {

    static func queryItemProvider(_ value: ListApplicationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next_token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max_results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListConfigurationProfilesInput {

    static func urlPathProvider(_ value: ListConfigurationProfilesInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/configurationprofiles"
    }
}

extension ListConfigurationProfilesInput {

    static func queryItemProvider(_ value: ListConfigurationProfilesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let type = value.type {
            let typeQueryItem = Smithy.URIQueryItem(name: "type".urlPercentEncoding(), value: Swift.String(type).urlPercentEncoding())
            items.append(typeQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next_token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max_results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListDeploymentsInput {

    static func urlPathProvider(_ value: ListDeploymentsInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let environmentId = value.environmentId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/environments/\(environmentId.urlPercentEncoding())/deployments"
    }
}

extension ListDeploymentsInput {

    static func queryItemProvider(_ value: ListDeploymentsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next_token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max_results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListDeploymentStrategiesInput {

    static func urlPathProvider(_ value: ListDeploymentStrategiesInput) -> Swift.String? {
        return "/deploymentstrategies"
    }
}

extension ListDeploymentStrategiesInput {

    static func queryItemProvider(_ value: ListDeploymentStrategiesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next_token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max_results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListEnvironmentsInput {

    static func urlPathProvider(_ value: ListEnvironmentsInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/environments"
    }
}

extension ListEnvironmentsInput {

    static func queryItemProvider(_ value: ListEnvironmentsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next_token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max_results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListExtensionAssociationsInput {

    static func urlPathProvider(_ value: ListExtensionAssociationsInput) -> Swift.String? {
        return "/extensionassociations"
    }
}

extension ListExtensionAssociationsInput {

    static func queryItemProvider(_ value: ListExtensionAssociationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let resourceIdentifier = value.resourceIdentifier {
            let resourceIdentifierQueryItem = Smithy.URIQueryItem(name: "resource_identifier".urlPercentEncoding(), value: Swift.String(resourceIdentifier).urlPercentEncoding())
            items.append(resourceIdentifierQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next_token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max_results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let extensionIdentifier = value.extensionIdentifier {
            let extensionIdentifierQueryItem = Smithy.URIQueryItem(name: "extension_identifier".urlPercentEncoding(), value: Swift.String(extensionIdentifier).urlPercentEncoding())
            items.append(extensionIdentifierQueryItem)
        }
        if let extensionVersionNumber = value.extensionVersionNumber {
            let extensionVersionNumberQueryItem = Smithy.URIQueryItem(name: "extension_version_number".urlPercentEncoding(), value: Swift.String(extensionVersionNumber).urlPercentEncoding())
            items.append(extensionVersionNumberQueryItem)
        }
        return items
    }
}

extension ListExtensionsInput {

    static func urlPathProvider(_ value: ListExtensionsInput) -> Swift.String? {
        return "/extensions"
    }
}

extension ListExtensionsInput {

    static func queryItemProvider(_ value: ListExtensionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next_token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max_results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let name = value.name {
            let nameQueryItem = Smithy.URIQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
            items.append(nameQueryItem)
        }
        return items
    }
}

extension ListHostedConfigurationVersionsInput {

    static func urlPathProvider(_ value: ListHostedConfigurationVersionsInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let configurationProfileId = value.configurationProfileId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/configurationprofiles/\(configurationProfileId.urlPercentEncoding())/hostedconfigurationversions"
    }
}

extension ListHostedConfigurationVersionsInput {

    static func queryItemProvider(_ value: ListHostedConfigurationVersionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next_token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max_results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let versionLabel = value.versionLabel {
            let versionLabelQueryItem = Smithy.URIQueryItem(name: "version_label".urlPercentEncoding(), value: Swift.String(versionLabel).urlPercentEncoding())
            items.append(versionLabelQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension StartDeploymentInput {

    static func urlPathProvider(_ value: StartDeploymentInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let environmentId = value.environmentId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/environments/\(environmentId.urlPercentEncoding())/deployments"
    }
}

extension StopDeploymentInput {

    static func urlPathProvider(_ value: StopDeploymentInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let environmentId = value.environmentId else {
            return nil
        }
        guard let deploymentNumber = value.deploymentNumber else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/environments/\(environmentId.urlPercentEncoding())/deployments/\(deploymentNumber)"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateAccountSettingsInput {

    static func urlPathProvider(_ value: UpdateAccountSettingsInput) -> Swift.String? {
        return "/settings"
    }
}

extension UpdateApplicationInput {

    static func urlPathProvider(_ value: UpdateApplicationInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())"
    }
}

extension UpdateConfigurationProfileInput {

    static func urlPathProvider(_ value: UpdateConfigurationProfileInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let configurationProfileId = value.configurationProfileId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/configurationprofiles/\(configurationProfileId.urlPercentEncoding())"
    }
}

extension UpdateDeploymentStrategyInput {

    static func urlPathProvider(_ value: UpdateDeploymentStrategyInput) -> Swift.String? {
        guard let deploymentStrategyId = value.deploymentStrategyId else {
            return nil
        }
        return "/deploymentstrategies/\(deploymentStrategyId.urlPercentEncoding())"
    }
}

extension UpdateEnvironmentInput {

    static func urlPathProvider(_ value: UpdateEnvironmentInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let environmentId = value.environmentId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/environments/\(environmentId.urlPercentEncoding())"
    }
}

extension UpdateExtensionInput {

    static func urlPathProvider(_ value: UpdateExtensionInput) -> Swift.String? {
        guard let extensionIdentifier = value.extensionIdentifier else {
            return nil
        }
        return "/extensions/\(extensionIdentifier.urlPercentEncoding())"
    }
}

extension UpdateExtensionAssociationInput {

    static func urlPathProvider(_ value: UpdateExtensionAssociationInput) -> Swift.String? {
        guard let extensionAssociationId = value.extensionAssociationId else {
            return nil
        }
        return "/extensionassociations/\(extensionAssociationId.urlPercentEncoding())"
    }
}

extension ValidateConfigurationInput {

    static func urlPathProvider(_ value: ValidateConfigurationInput) -> Swift.String? {
        guard let applicationId = value.applicationId else {
            return nil
        }
        guard let configurationProfileId = value.configurationProfileId else {
            return nil
        }
        return "/applications/\(applicationId.urlPercentEncoding())/configurationprofiles/\(configurationProfileId.urlPercentEncoding())/validators"
    }
}

extension ValidateConfigurationInput {

    static func queryItemProvider(_ value: ValidateConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let configurationVersion = value.configurationVersion else {
            let message = "Creating a URL Query Item failed. configurationVersion is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let configurationVersionQueryItem = Smithy.URIQueryItem(name: "configuration_version".urlPercentEncoding(), value: Swift.String(configurationVersion).urlPercentEncoding())
        items.append(configurationVersionQueryItem)
        return items
    }
}

extension CreateApplicationInput {

    static func write(value: CreateApplicationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateConfigurationProfileInput {

    static func write(value: CreateConfigurationProfileInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["KmsKeyIdentifier"].write(value.kmsKeyIdentifier)
        try writer["LocationUri"].write(value.locationUri)
        try writer["Name"].write(value.name)
        try writer["RetrievalRoleArn"].write(value.retrievalRoleArn)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Type"].write(value.type)
        try writer["Validators"].writeList(value.validators, memberWritingClosure: AppConfigClientTypes.Validator.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDeploymentStrategyInput {

    static func write(value: CreateDeploymentStrategyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeploymentDurationInMinutes"].write(value.deploymentDurationInMinutes)
        try writer["Description"].write(value.description)
        try writer["FinalBakeTimeInMinutes"].write(value.finalBakeTimeInMinutes)
        try writer["GrowthFactor"].write(value.growthFactor)
        try writer["GrowthType"].write(value.growthType)
        try writer["Name"].write(value.name)
        try writer["ReplicateTo"].write(value.replicateTo)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateEnvironmentInput {

    static func write(value: CreateEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Monitors"].writeList(value.monitors, memberWritingClosure: AppConfigClientTypes.Monitor.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateExtensionInput {

    static func write(value: CreateExtensionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Actions"].writeMap(value.actions, valueWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: AppConfigClientTypes.Action.write(value:to:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["Parameters"].writeMap(value.parameters, valueWritingClosure: AppConfigClientTypes.Parameter.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateExtensionAssociationInput {

    static func write(value: CreateExtensionAssociationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExtensionIdentifier"].write(value.extensionIdentifier)
        try writer["ExtensionVersionNumber"].write(value.extensionVersionNumber)
        try writer["Parameters"].writeMap(value.parameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ResourceIdentifier"].write(value.resourceIdentifier)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateHostedConfigurationVersionInput {

    static func write(value: CreateHostedConfigurationVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Content"].write(value.content)
    }
}

extension StartDeploymentInput {

    static func write(value: StartDeploymentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationProfileId"].write(value.configurationProfileId)
        try writer["ConfigurationVersion"].write(value.configurationVersion)
        try writer["DeploymentStrategyId"].write(value.deploymentStrategyId)
        try writer["Description"].write(value.description)
        try writer["DynamicExtensionParameters"].writeMap(value.dynamicExtensionParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["KmsKeyIdentifier"].write(value.kmsKeyIdentifier)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateAccountSettingsInput {

    static func write(value: UpdateAccountSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeletionProtection"].write(value.deletionProtection, with: AppConfigClientTypes.DeletionProtectionSettings.write(value:to:))
    }
}

extension UpdateApplicationInput {

    static func write(value: UpdateApplicationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
    }
}

extension UpdateConfigurationProfileInput {

    static func write(value: UpdateConfigurationProfileInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["KmsKeyIdentifier"].write(value.kmsKeyIdentifier)
        try writer["Name"].write(value.name)
        try writer["RetrievalRoleArn"].write(value.retrievalRoleArn)
        try writer["Validators"].writeList(value.validators, memberWritingClosure: AppConfigClientTypes.Validator.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateDeploymentStrategyInput {

    static func write(value: UpdateDeploymentStrategyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeploymentDurationInMinutes"].write(value.deploymentDurationInMinutes)
        try writer["Description"].write(value.description)
        try writer["FinalBakeTimeInMinutes"].write(value.finalBakeTimeInMinutes)
        try writer["GrowthFactor"].write(value.growthFactor)
        try writer["GrowthType"].write(value.growthType)
    }
}

extension UpdateEnvironmentInput {

    static func write(value: UpdateEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Monitors"].writeList(value.monitors, memberWritingClosure: AppConfigClientTypes.Monitor.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
    }
}

extension UpdateExtensionInput {

    static func write(value: UpdateExtensionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Actions"].writeMap(value.actions, valueWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: AppConfigClientTypes.Action.write(value:to:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Description"].write(value.description)
        try writer["Parameters"].writeMap(value.parameters, valueWritingClosure: AppConfigClientTypes.Parameter.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["VersionNumber"].write(value.versionNumber)
    }
}

extension UpdateExtensionAssociationInput {

    static func write(value: UpdateExtensionAssociationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Parameters"].writeMap(value.parameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateApplicationOutput()
        value.description = try reader["Description"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension CreateConfigurationProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateConfigurationProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateConfigurationProfileOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.kmsKeyArn = try reader["KmsKeyArn"].readIfPresent()
        value.kmsKeyIdentifier = try reader["KmsKeyIdentifier"].readIfPresent()
        value.locationUri = try reader["LocationUri"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.retrievalRoleArn = try reader["RetrievalRoleArn"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.validators = try reader["Validators"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.Validator.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateDeploymentStrategyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDeploymentStrategyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDeploymentStrategyOutput()
        value.deploymentDurationInMinutes = try reader["DeploymentDurationInMinutes"].readIfPresent() ?? 0
        value.description = try reader["Description"].readIfPresent()
        value.finalBakeTimeInMinutes = try reader["FinalBakeTimeInMinutes"].readIfPresent() ?? 0
        value.growthFactor = try reader["GrowthFactor"].readIfPresent()
        value.growthType = try reader["GrowthType"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.replicateTo = try reader["ReplicateTo"].readIfPresent()
        return value
    }
}

extension CreateEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEnvironmentOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.monitors = try reader["Monitors"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.Monitor.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["Name"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension CreateExtensionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateExtensionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateExtensionOutput()
        value.actions = try reader["Actions"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: AppConfigClientTypes.Action.read(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.arn = try reader["Arn"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.parameters = try reader["Parameters"].readMapIfPresent(valueReadingClosure: AppConfigClientTypes.Parameter.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.versionNumber = try reader["VersionNumber"].readIfPresent() ?? 0
        return value
    }
}

extension CreateExtensionAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateExtensionAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateExtensionAssociationOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.extensionArn = try reader["ExtensionArn"].readIfPresent()
        value.extensionVersionNumber = try reader["ExtensionVersionNumber"].readIfPresent() ?? 0
        value.id = try reader["Id"].readIfPresent()
        value.parameters = try reader["Parameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        return value
    }
}

extension CreateHostedConfigurationVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateHostedConfigurationVersionOutput {
        var value = CreateHostedConfigurationVersionOutput()
        if let applicationIdHeaderValue = httpResponse.headers.value(for: "Application-Id") {
            value.applicationId = applicationIdHeaderValue
        }
        if let configurationProfileIdHeaderValue = httpResponse.headers.value(for: "Configuration-Profile-Id") {
            value.configurationProfileId = configurationProfileIdHeaderValue
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            value.contentType = contentTypeHeaderValue
        }
        if let descriptionHeaderValue = httpResponse.headers.value(for: "Description") {
            value.description = descriptionHeaderValue
        }
        if let kmsKeyArnHeaderValue = httpResponse.headers.value(for: "KmsKeyArn") {
            value.kmsKeyArn = kmsKeyArnHeaderValue
        }
        if let versionLabelHeaderValue = httpResponse.headers.value(for: "VersionLabel") {
            value.versionLabel = versionLabelHeaderValue
        }
        if let versionNumberHeaderValue = httpResponse.headers.value(for: "Version-Number") {
            value.versionNumber = Swift.Int(versionNumberHeaderValue) ?? 0
        }
        switch httpResponse.body {
        case .data(let data):
            value.content = data
        case .stream(let stream):
            value.content = try stream.readToEnd()
        case .noStream:
            value.content = nil
        }
        return value
    }
}

extension DeleteApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteApplicationOutput {
        return DeleteApplicationOutput()
    }
}

extension DeleteConfigurationProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteConfigurationProfileOutput {
        return DeleteConfigurationProfileOutput()
    }
}

extension DeleteDeploymentStrategyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDeploymentStrategyOutput {
        return DeleteDeploymentStrategyOutput()
    }
}

extension DeleteEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEnvironmentOutput {
        return DeleteEnvironmentOutput()
    }
}

extension DeleteExtensionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteExtensionOutput {
        return DeleteExtensionOutput()
    }
}

extension DeleteExtensionAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteExtensionAssociationOutput {
        return DeleteExtensionAssociationOutput()
    }
}

extension DeleteHostedConfigurationVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteHostedConfigurationVersionOutput {
        return DeleteHostedConfigurationVersionOutput()
    }
}

extension GetAccountSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAccountSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAccountSettingsOutput()
        value.deletionProtection = try reader["DeletionProtection"].readIfPresent(with: AppConfigClientTypes.DeletionProtectionSettings.read(from:))
        return value
    }
}

extension GetApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetApplicationOutput()
        value.description = try reader["Description"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension GetConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConfigurationOutput {
        var value = GetConfigurationOutput()
        if let configurationVersionHeaderValue = httpResponse.headers.value(for: "Configuration-Version") {
            value.configurationVersion = configurationVersionHeaderValue
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            value.contentType = contentTypeHeaderValue
        }
        switch httpResponse.body {
        case .data(let data):
            value.content = data
        case .stream(let stream):
            value.content = try stream.readToEnd()
        case .noStream:
            value.content = nil
        }
        return value
    }
}

extension GetConfigurationProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConfigurationProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetConfigurationProfileOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.kmsKeyArn = try reader["KmsKeyArn"].readIfPresent()
        value.kmsKeyIdentifier = try reader["KmsKeyIdentifier"].readIfPresent()
        value.locationUri = try reader["LocationUri"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.retrievalRoleArn = try reader["RetrievalRoleArn"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.validators = try reader["Validators"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.Validator.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeploymentOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.appliedExtensions = try reader["AppliedExtensions"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.AppliedExtension.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.completedAt = try reader["CompletedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.configurationLocationUri = try reader["ConfigurationLocationUri"].readIfPresent()
        value.configurationName = try reader["ConfigurationName"].readIfPresent()
        value.configurationProfileId = try reader["ConfigurationProfileId"].readIfPresent()
        value.configurationVersion = try reader["ConfigurationVersion"].readIfPresent()
        value.deploymentDurationInMinutes = try reader["DeploymentDurationInMinutes"].readIfPresent() ?? 0
        value.deploymentNumber = try reader["DeploymentNumber"].readIfPresent() ?? 0
        value.deploymentStrategyId = try reader["DeploymentStrategyId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.eventLog = try reader["EventLog"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.DeploymentEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.finalBakeTimeInMinutes = try reader["FinalBakeTimeInMinutes"].readIfPresent() ?? 0
        value.growthFactor = try reader["GrowthFactor"].readIfPresent()
        value.growthType = try reader["GrowthType"].readIfPresent()
        value.kmsKeyArn = try reader["KmsKeyArn"].readIfPresent()
        value.kmsKeyIdentifier = try reader["KmsKeyIdentifier"].readIfPresent()
        value.percentageComplete = try reader["PercentageComplete"].readIfPresent()
        value.startedAt = try reader["StartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.state = try reader["State"].readIfPresent()
        value.versionLabel = try reader["VersionLabel"].readIfPresent()
        return value
    }
}

extension GetDeploymentStrategyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeploymentStrategyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeploymentStrategyOutput()
        value.deploymentDurationInMinutes = try reader["DeploymentDurationInMinutes"].readIfPresent() ?? 0
        value.description = try reader["Description"].readIfPresent()
        value.finalBakeTimeInMinutes = try reader["FinalBakeTimeInMinutes"].readIfPresent() ?? 0
        value.growthFactor = try reader["GrowthFactor"].readIfPresent()
        value.growthType = try reader["GrowthType"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.replicateTo = try reader["ReplicateTo"].readIfPresent()
        return value
    }
}

extension GetEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEnvironmentOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.monitors = try reader["Monitors"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.Monitor.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["Name"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension GetExtensionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetExtensionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetExtensionOutput()
        value.actions = try reader["Actions"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: AppConfigClientTypes.Action.read(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.arn = try reader["Arn"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.parameters = try reader["Parameters"].readMapIfPresent(valueReadingClosure: AppConfigClientTypes.Parameter.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.versionNumber = try reader["VersionNumber"].readIfPresent() ?? 0
        return value
    }
}

extension GetExtensionAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetExtensionAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetExtensionAssociationOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.extensionArn = try reader["ExtensionArn"].readIfPresent()
        value.extensionVersionNumber = try reader["ExtensionVersionNumber"].readIfPresent() ?? 0
        value.id = try reader["Id"].readIfPresent()
        value.parameters = try reader["Parameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        return value
    }
}

extension GetHostedConfigurationVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetHostedConfigurationVersionOutput {
        var value = GetHostedConfigurationVersionOutput()
        if let applicationIdHeaderValue = httpResponse.headers.value(for: "Application-Id") {
            value.applicationId = applicationIdHeaderValue
        }
        if let configurationProfileIdHeaderValue = httpResponse.headers.value(for: "Configuration-Profile-Id") {
            value.configurationProfileId = configurationProfileIdHeaderValue
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            value.contentType = contentTypeHeaderValue
        }
        if let descriptionHeaderValue = httpResponse.headers.value(for: "Description") {
            value.description = descriptionHeaderValue
        }
        if let kmsKeyArnHeaderValue = httpResponse.headers.value(for: "KmsKeyArn") {
            value.kmsKeyArn = kmsKeyArnHeaderValue
        }
        if let versionLabelHeaderValue = httpResponse.headers.value(for: "VersionLabel") {
            value.versionLabel = versionLabelHeaderValue
        }
        if let versionNumberHeaderValue = httpResponse.headers.value(for: "Version-Number") {
            value.versionNumber = Swift.Int(versionNumberHeaderValue) ?? 0
        }
        switch httpResponse.body {
        case .data(let data):
            value.content = data
        case .stream(let stream):
            value.content = try stream.readToEnd()
        case .noStream:
            value.content = nil
        }
        return value
    }
}

extension ListApplicationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListApplicationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListApplicationsOutput()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.Application.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListConfigurationProfilesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListConfigurationProfilesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListConfigurationProfilesOutput()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.ConfigurationProfileSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDeploymentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDeploymentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDeploymentsOutput()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.DeploymentSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDeploymentStrategiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDeploymentStrategiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDeploymentStrategiesOutput()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.DeploymentStrategy.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEnvironmentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEnvironmentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEnvironmentsOutput()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.Environment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListExtensionAssociationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListExtensionAssociationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListExtensionAssociationsOutput()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.ExtensionAssociationSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListExtensionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListExtensionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListExtensionsOutput()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.ExtensionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListHostedConfigurationVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListHostedConfigurationVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListHostedConfigurationVersionsOutput()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.HostedConfigurationVersionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension StartDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartDeploymentOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.appliedExtensions = try reader["AppliedExtensions"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.AppliedExtension.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.completedAt = try reader["CompletedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.configurationLocationUri = try reader["ConfigurationLocationUri"].readIfPresent()
        value.configurationName = try reader["ConfigurationName"].readIfPresent()
        value.configurationProfileId = try reader["ConfigurationProfileId"].readIfPresent()
        value.configurationVersion = try reader["ConfigurationVersion"].readIfPresent()
        value.deploymentDurationInMinutes = try reader["DeploymentDurationInMinutes"].readIfPresent() ?? 0
        value.deploymentNumber = try reader["DeploymentNumber"].readIfPresent() ?? 0
        value.deploymentStrategyId = try reader["DeploymentStrategyId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.eventLog = try reader["EventLog"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.DeploymentEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.finalBakeTimeInMinutes = try reader["FinalBakeTimeInMinutes"].readIfPresent() ?? 0
        value.growthFactor = try reader["GrowthFactor"].readIfPresent()
        value.growthType = try reader["GrowthType"].readIfPresent()
        value.kmsKeyArn = try reader["KmsKeyArn"].readIfPresent()
        value.kmsKeyIdentifier = try reader["KmsKeyIdentifier"].readIfPresent()
        value.percentageComplete = try reader["PercentageComplete"].readIfPresent()
        value.startedAt = try reader["StartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.state = try reader["State"].readIfPresent()
        value.versionLabel = try reader["VersionLabel"].readIfPresent()
        return value
    }
}

extension StopDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopDeploymentOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.appliedExtensions = try reader["AppliedExtensions"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.AppliedExtension.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.completedAt = try reader["CompletedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.configurationLocationUri = try reader["ConfigurationLocationUri"].readIfPresent()
        value.configurationName = try reader["ConfigurationName"].readIfPresent()
        value.configurationProfileId = try reader["ConfigurationProfileId"].readIfPresent()
        value.configurationVersion = try reader["ConfigurationVersion"].readIfPresent()
        value.deploymentDurationInMinutes = try reader["DeploymentDurationInMinutes"].readIfPresent() ?? 0
        value.deploymentNumber = try reader["DeploymentNumber"].readIfPresent() ?? 0
        value.deploymentStrategyId = try reader["DeploymentStrategyId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.eventLog = try reader["EventLog"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.DeploymentEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.finalBakeTimeInMinutes = try reader["FinalBakeTimeInMinutes"].readIfPresent() ?? 0
        value.growthFactor = try reader["GrowthFactor"].readIfPresent()
        value.growthType = try reader["GrowthType"].readIfPresent()
        value.kmsKeyArn = try reader["KmsKeyArn"].readIfPresent()
        value.kmsKeyIdentifier = try reader["KmsKeyIdentifier"].readIfPresent()
        value.percentageComplete = try reader["PercentageComplete"].readIfPresent()
        value.startedAt = try reader["StartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.state = try reader["State"].readIfPresent()
        value.versionLabel = try reader["VersionLabel"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAccountSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAccountSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAccountSettingsOutput()
        value.deletionProtection = try reader["DeletionProtection"].readIfPresent(with: AppConfigClientTypes.DeletionProtectionSettings.read(from:))
        return value
    }
}

extension UpdateApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateApplicationOutput()
        value.description = try reader["Description"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension UpdateConfigurationProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateConfigurationProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateConfigurationProfileOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.kmsKeyArn = try reader["KmsKeyArn"].readIfPresent()
        value.kmsKeyIdentifier = try reader["KmsKeyIdentifier"].readIfPresent()
        value.locationUri = try reader["LocationUri"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.retrievalRoleArn = try reader["RetrievalRoleArn"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.validators = try reader["Validators"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.Validator.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateDeploymentStrategyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDeploymentStrategyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateDeploymentStrategyOutput()
        value.deploymentDurationInMinutes = try reader["DeploymentDurationInMinutes"].readIfPresent() ?? 0
        value.description = try reader["Description"].readIfPresent()
        value.finalBakeTimeInMinutes = try reader["FinalBakeTimeInMinutes"].readIfPresent() ?? 0
        value.growthFactor = try reader["GrowthFactor"].readIfPresent()
        value.growthType = try reader["GrowthType"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.replicateTo = try reader["ReplicateTo"].readIfPresent()
        return value
    }
}

extension UpdateEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEnvironmentOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.monitors = try reader["Monitors"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.Monitor.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["Name"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension UpdateExtensionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateExtensionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateExtensionOutput()
        value.actions = try reader["Actions"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: AppConfigClientTypes.Action.read(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.arn = try reader["Arn"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.parameters = try reader["Parameters"].readMapIfPresent(valueReadingClosure: AppConfigClientTypes.Parameter.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.versionNumber = try reader["VersionNumber"].readIfPresent() ?? 0
        return value
    }
}

extension UpdateExtensionAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateExtensionAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateExtensionAssociationOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.extensionArn = try reader["ExtensionArn"].readIfPresent()
        value.extensionVersionNumber = try reader["ExtensionVersionNumber"].readIfPresent() ?? 0
        value.id = try reader["Id"].readIfPresent()
        value.parameters = try reader["Parameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        return value
    }
}

extension ValidateConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ValidateConfigurationOutput {
        return ValidateConfigurationOutput()
    }
}

enum CreateApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateConfigurationProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDeploymentStrategyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateExtensionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateExtensionAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateHostedConfigurationVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PayloadTooLargeException": return try PayloadTooLargeException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteConfigurationProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDeploymentStrategyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteExtensionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteExtensionAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteHostedConfigurationVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAccountSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConfigurationProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeploymentStrategyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetExtensionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetExtensionAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetHostedConfigurationVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListApplicationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListConfigurationProfilesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDeploymentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDeploymentStrategiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEnvironmentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListExtensionAssociationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListExtensionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListHostedConfigurationVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAccountSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateConfigurationProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDeploymentStrategyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateExtensionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateExtensionAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ValidateConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.details = try reader["Details"].readIfPresent(with: AppConfigClientTypes.BadRequestDetails.read(from:))
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.reason = try reader["Reason"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.resourceName = try reader["ResourceName"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PayloadTooLargeException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> PayloadTooLargeException {
        let reader = baseError.errorBodyReader
        var value = PayloadTooLargeException()
        value.properties.limit = try reader["Limit"].readIfPresent() ?? 0
        value.properties.measure = try reader["Measure"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.size = try reader["Size"].readIfPresent() ?? 0
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AppConfigClientTypes.Validator {

    static func write(value: AppConfigClientTypes.Validator?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Content"].write(value.content)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.Validator {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.Validator()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.content = try reader["Content"].readIfPresent() ?? ""
        return value
    }
}

extension AppConfigClientTypes.Monitor {

    static func write(value: AppConfigClientTypes.Monitor?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlarmArn"].write(value.alarmArn)
        try writer["AlarmRoleArn"].write(value.alarmRoleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.Monitor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.Monitor()
        value.alarmArn = try reader["AlarmArn"].readIfPresent() ?? ""
        value.alarmRoleArn = try reader["AlarmRoleArn"].readIfPresent()
        return value
    }
}

extension AppConfigClientTypes.Action {

    static func write(value: AppConfigClientTypes.Action?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Uri"].write(value.uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.Action {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.Action()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.uri = try reader["Uri"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        return value
    }
}

extension AppConfigClientTypes.Parameter {

    static func write(value: AppConfigClientTypes.Parameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Dynamic"].write(value.`dynamic`)
        try writer["Required"].write(value.`required`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.Parameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.Parameter()
        value.description = try reader["Description"].readIfPresent()
        value.`required` = try reader["Required"].readIfPresent() ?? false
        value.`dynamic` = try reader["Dynamic"].readIfPresent() ?? false
        return value
    }
}

extension AppConfigClientTypes.DeletionProtectionSettings {

    static func write(value: AppConfigClientTypes.DeletionProtectionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["ProtectionPeriodInMinutes"].write(value.protectionPeriodInMinutes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.DeletionProtectionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.DeletionProtectionSettings()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.protectionPeriodInMinutes = try reader["ProtectionPeriodInMinutes"].readIfPresent()
        return value
    }
}

extension AppConfigClientTypes.DeploymentEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.DeploymentEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.DeploymentEvent()
        value.eventType = try reader["EventType"].readIfPresent()
        value.triggeredBy = try reader["TriggeredBy"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.actionInvocations = try reader["ActionInvocations"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.ActionInvocation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.occurredAt = try reader["OccurredAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension AppConfigClientTypes.ActionInvocation {

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.ActionInvocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.ActionInvocation()
        value.extensionIdentifier = try reader["ExtensionIdentifier"].readIfPresent()
        value.actionName = try reader["ActionName"].readIfPresent()
        value.uri = try reader["Uri"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.invocationId = try reader["InvocationId"].readIfPresent()
        return value
    }
}

extension AppConfigClientTypes.AppliedExtension {

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.AppliedExtension {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.AppliedExtension()
        value.extensionId = try reader["ExtensionId"].readIfPresent()
        value.extensionAssociationId = try reader["ExtensionAssociationId"].readIfPresent()
        value.versionNumber = try reader["VersionNumber"].readIfPresent() ?? 0
        value.parameters = try reader["Parameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension AppConfigClientTypes.Application {

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.Application {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.Application()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        return value
    }
}

extension AppConfigClientTypes.ConfigurationProfileSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.ConfigurationProfileSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.ConfigurationProfileSummary()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.locationUri = try reader["LocationUri"].readIfPresent()
        value.validatorTypes = try reader["ValidatorTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<AppConfigClientTypes.ValidatorType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension AppConfigClientTypes.DeploymentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.DeploymentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.DeploymentSummary()
        value.deploymentNumber = try reader["DeploymentNumber"].readIfPresent() ?? 0
        value.configurationName = try reader["ConfigurationName"].readIfPresent()
        value.configurationVersion = try reader["ConfigurationVersion"].readIfPresent()
        value.deploymentDurationInMinutes = try reader["DeploymentDurationInMinutes"].readIfPresent() ?? 0
        value.growthType = try reader["GrowthType"].readIfPresent()
        value.growthFactor = try reader["GrowthFactor"].readIfPresent()
        value.finalBakeTimeInMinutes = try reader["FinalBakeTimeInMinutes"].readIfPresent() ?? 0
        value.state = try reader["State"].readIfPresent()
        value.percentageComplete = try reader["PercentageComplete"].readIfPresent()
        value.startedAt = try reader["StartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.completedAt = try reader["CompletedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.versionLabel = try reader["VersionLabel"].readIfPresent()
        return value
    }
}

extension AppConfigClientTypes.DeploymentStrategy {

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.DeploymentStrategy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.DeploymentStrategy()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.deploymentDurationInMinutes = try reader["DeploymentDurationInMinutes"].readIfPresent() ?? 0
        value.growthType = try reader["GrowthType"].readIfPresent()
        value.growthFactor = try reader["GrowthFactor"].readIfPresent()
        value.finalBakeTimeInMinutes = try reader["FinalBakeTimeInMinutes"].readIfPresent() ?? 0
        value.replicateTo = try reader["ReplicateTo"].readIfPresent()
        return value
    }
}

extension AppConfigClientTypes.Environment {

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.Environment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.Environment()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.monitors = try reader["Monitors"].readListIfPresent(memberReadingClosure: AppConfigClientTypes.Monitor.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AppConfigClientTypes.ExtensionAssociationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.ExtensionAssociationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.ExtensionAssociationSummary()
        value.id = try reader["Id"].readIfPresent()
        value.extensionArn = try reader["ExtensionArn"].readIfPresent()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        return value
    }
}

extension AppConfigClientTypes.ExtensionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.ExtensionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.ExtensionSummary()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.versionNumber = try reader["VersionNumber"].readIfPresent() ?? 0
        value.arn = try reader["Arn"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        return value
    }
}

extension AppConfigClientTypes.HostedConfigurationVersionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.HostedConfigurationVersionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.HostedConfigurationVersionSummary()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.configurationProfileId = try reader["ConfigurationProfileId"].readIfPresent()
        value.versionNumber = try reader["VersionNumber"].readIfPresent() ?? 0
        value.description = try reader["Description"].readIfPresent()
        value.contentType = try reader["ContentType"].readIfPresent()
        value.versionLabel = try reader["VersionLabel"].readIfPresent()
        value.kmsKeyArn = try reader["KmsKeyArn"].readIfPresent()
        return value
    }
}

extension AppConfigClientTypes.BadRequestDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.BadRequestDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "InvalidConfiguration":
                return .invalidconfiguration(try reader["InvalidConfiguration"].readList(memberReadingClosure: AppConfigClientTypes.InvalidConfigurationDetail.read(from:), memberNodeInfo: "member", isFlattened: false))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension AppConfigClientTypes.InvalidConfigurationDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> AppConfigClientTypes.InvalidConfigurationDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AppConfigClientTypes.InvalidConfigurationDetail()
        value.constraint = try reader["Constraint"].readIfPresent()
        value.location = try reader["Location"].readIfPresent()
        value.reason = try reader["Reason"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

public enum AppConfigClientTypes {}
