//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem


public struct DeleteEndpointOutput: Swift.Sendable {

    public init() { }
}

/// Access was denied for this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There was a conflict with this action, and it could not be completed.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There was an exception with the internal server.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service link connection to your Outposts home Region is down. Check your connection and try again.
public struct OutpostOfflineException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OutpostOfflineException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested resource was not found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There was an exception validating this data.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension S3OutpostsClientTypes {

    public enum EndpointAccessType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case customerOwnedIp
        case `private`
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointAccessType] {
            return [
                .customerOwnedIp,
                .private
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .customerOwnedIp: return "CustomerOwnedIp"
            case .private: return "Private"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateEndpointInput: Swift.Sendable {
    /// The type of access for the network connectivity for the Amazon S3 on Outposts endpoint. To use the Amazon Web Services VPC, choose Private. To use the endpoint with an on-premises network, choose CustomerOwnedIp. If you choose CustomerOwnedIp, you must also provide the customer-owned IP address pool (CoIP pool). Private is the default access type value.
    public var accessType: S3OutpostsClientTypes.EndpointAccessType?
    /// The ID of the customer-owned IPv4 address pool (CoIP pool) for the endpoint. IP addresses are allocated from this pool for the endpoint.
    public var customerOwnedIpv4Pool: Swift.String?
    /// The ID of the Outposts.
    /// This member is required.
    public var outpostId: Swift.String?
    /// The ID of the security group to use with the endpoint.
    /// This member is required.
    public var securityGroupId: Swift.String?
    /// The ID of the subnet in the selected VPC. The endpoint subnet must belong to the Outpost that has Amazon S3 on Outposts provisioned.
    /// This member is required.
    public var subnetId: Swift.String?

    public init(
        accessType: S3OutpostsClientTypes.EndpointAccessType? = nil,
        customerOwnedIpv4Pool: Swift.String? = nil,
        outpostId: Swift.String? = nil,
        securityGroupId: Swift.String? = nil,
        subnetId: Swift.String? = nil
    )
    {
        self.accessType = accessType
        self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
        self.outpostId = outpostId
        self.securityGroupId = securityGroupId
        self.subnetId = subnetId
    }
}

public struct CreateEndpointOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the endpoint.
    public var endpointArn: Swift.String?

    public init(
        endpointArn: Swift.String? = nil
    )
    {
        self.endpointArn = endpointArn
    }
}

public struct DeleteEndpointInput: Swift.Sendable {
    /// The ID of the endpoint.
    /// This member is required.
    public var endpointId: Swift.String?
    /// The ID of the Outposts.
    /// This member is required.
    public var outpostId: Swift.String?

    public init(
        endpointId: Swift.String? = nil,
        outpostId: Swift.String? = nil
    )
    {
        self.endpointId = endpointId
        self.outpostId = outpostId
    }
}

extension S3OutpostsClientTypes {

    /// The failure reason, if any, for a create or delete endpoint operation.
    public struct FailedReason: Swift.Sendable {
        /// The failure code, if any, for a create or delete endpoint operation.
        public var errorCode: Swift.String?
        /// Additional error details describing the endpoint failure and recommended action.
        public var message: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.message = message
        }
    }
}

extension S3OutpostsClientTypes {

    /// The container for the network interface.
    public struct NetworkInterface: Swift.Sendable {
        /// The ID for the network interface.
        public var networkInterfaceId: Swift.String?

        public init(
            networkInterfaceId: Swift.String? = nil
        )
        {
            self.networkInterfaceId = networkInterfaceId
        }
    }
}

extension S3OutpostsClientTypes {

    public enum EndpointStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case createFailed
        case deleteFailed
        case deleting
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointStatus] {
            return [
                .available,
                .createFailed,
                .deleteFailed,
                .deleting,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "Available"
            case .createFailed: return "Create_Failed"
            case .deleteFailed: return "Delete_Failed"
            case .deleting: return "Deleting"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3OutpostsClientTypes {

    /// Amazon S3 on Outposts Access Points simplify managing data access at scale for shared datasets in S3 on Outposts. S3 on Outposts uses endpoints to connect to Outposts buckets so that you can perform actions within your virtual private cloud (VPC). For more information, see [ Accessing S3 on Outposts using VPC-only access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/WorkingWithS3Outposts.html) in the Amazon Simple Storage Service User Guide.
    public struct Endpoint: Swift.Sendable {
        /// The type of connectivity used to access the Amazon S3 on Outposts endpoint.
        public var accessType: S3OutpostsClientTypes.EndpointAccessType?
        /// The VPC CIDR committed by this endpoint.
        public var cidrBlock: Swift.String?
        /// The time the endpoint was created.
        public var creationTime: Foundation.Date?
        /// The ID of the customer-owned IPv4 address pool used for the endpoint.
        public var customerOwnedIpv4Pool: Swift.String?
        /// The Amazon Resource Name (ARN) of the endpoint.
        public var endpointArn: Swift.String?
        /// The failure reason, if any, for a create or delete endpoint operation.
        public var failedReason: S3OutpostsClientTypes.FailedReason?
        /// The network interface of the endpoint.
        public var networkInterfaces: [S3OutpostsClientTypes.NetworkInterface]?
        /// The ID of the Outposts.
        public var outpostsId: Swift.String?
        /// The ID of the security group used for the endpoint.
        public var securityGroupId: Swift.String?
        /// The status of the endpoint.
        public var status: S3OutpostsClientTypes.EndpointStatus?
        /// The ID of the subnet used for the endpoint.
        public var subnetId: Swift.String?
        /// The ID of the VPC used for the endpoint.
        public var vpcId: Swift.String?

        public init(
            accessType: S3OutpostsClientTypes.EndpointAccessType? = nil,
            cidrBlock: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            customerOwnedIpv4Pool: Swift.String? = nil,
            endpointArn: Swift.String? = nil,
            failedReason: S3OutpostsClientTypes.FailedReason? = nil,
            networkInterfaces: [S3OutpostsClientTypes.NetworkInterface]? = nil,
            outpostsId: Swift.String? = nil,
            securityGroupId: Swift.String? = nil,
            status: S3OutpostsClientTypes.EndpointStatus? = nil,
            subnetId: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.accessType = accessType
            self.cidrBlock = cidrBlock
            self.creationTime = creationTime
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.endpointArn = endpointArn
            self.failedReason = failedReason
            self.networkInterfaces = networkInterfaces
            self.outpostsId = outpostsId
            self.securityGroupId = securityGroupId
            self.status = status
            self.subnetId = subnetId
            self.vpcId = vpcId
        }
    }
}

public struct ListEndpointsInput: Swift.Sendable {
    /// The maximum number of endpoints that will be returned in the response.
    public var maxResults: Swift.Int?
    /// If a previous response from this operation included a NextToken value, provide that value here to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListEndpointsOutput: Swift.Sendable {
    /// The list of endpoints associated with the specified Outpost.
    public var endpoints: [S3OutpostsClientTypes.Endpoint]?
    /// If the number of endpoints associated with the specified Outpost exceeds MaxResults, you can include this value in subsequent calls to this operation to retrieve more results.
    public var nextToken: Swift.String?

    public init(
        endpoints: [S3OutpostsClientTypes.Endpoint]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.endpoints = endpoints
        self.nextToken = nextToken
    }
}

public struct ListOutpostsWithS3Input: Swift.Sendable {
    /// The maximum number of Outposts to return. The limit is 100.
    public var maxResults: Swift.Int?
    /// When you can get additional results from the ListOutpostsWithS3 call, a NextToken parameter is returned in the output. You can then pass in a subsequent command to the NextToken parameter to continue listing additional Outposts.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension S3OutpostsClientTypes {

    /// Contains the details for the Outpost object.
    public struct Outpost: Swift.Sendable {
        /// The Amazon S3 capacity of the outpost in bytes.
        public var capacityInBytes: Swift.Int
        /// Specifies the unique Amazon Resource Name (ARN) for the outpost.
        public var outpostArn: Swift.String?
        /// Specifies the unique identifier for the outpost.
        public var outpostId: Swift.String?
        /// Returns the Amazon Web Services account ID of the outpost owner. Useful for comparing owned versus shared outposts.
        public var ownerId: Swift.String?
        /// Specifies the unique S3 on Outposts ARN for use with Resource Access Manager (RAM).
        public var s3OutpostArn: Swift.String?

        public init(
            capacityInBytes: Swift.Int = 0,
            outpostArn: Swift.String? = nil,
            outpostId: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            s3OutpostArn: Swift.String? = nil
        )
        {
            self.capacityInBytes = capacityInBytes
            self.outpostArn = outpostArn
            self.outpostId = outpostId
            self.ownerId = ownerId
            self.s3OutpostArn = s3OutpostArn
        }
    }
}

public struct ListOutpostsWithS3Output: Swift.Sendable {
    /// Returns a token that you can use to call ListOutpostsWithS3 again and receive additional results, if there are any.
    public var nextToken: Swift.String?
    /// Returns the list of Outposts that have the following characteristics:
    ///
    /// * outposts that have S3 provisioned
    ///
    /// * outposts that are Active (not pending any provisioning nor decommissioned)
    ///
    /// * outposts to which the the calling Amazon Web Services account has access
    public var outposts: [S3OutpostsClientTypes.Outpost]?

    public init(
        nextToken: Swift.String? = nil,
        outposts: [S3OutpostsClientTypes.Outpost]? = nil
    )
    {
        self.nextToken = nextToken
        self.outposts = outposts
    }
}

public struct ListSharedEndpointsInput: Swift.Sendable {
    /// The maximum number of endpoints that will be returned in the response.
    public var maxResults: Swift.Int?
    /// If a previous response from this operation included a NextToken value, you can provide that value here to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The ID of the Amazon Web Services Outpost.
    /// This member is required.
    public var outpostId: Swift.String?

    public init(
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil,
        outpostId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.outpostId = outpostId
    }
}

public struct ListSharedEndpointsOutput: Swift.Sendable {
    /// The list of endpoints associated with the specified Outpost that have been shared by Amazon Web Services Resource Access Manager (RAM).
    public var endpoints: [S3OutpostsClientTypes.Endpoint]?
    /// If the number of endpoints associated with the specified Outpost exceeds MaxResults, you can include this value in subsequent calls to this operation to retrieve more results.
    public var nextToken: Swift.String?

    public init(
        endpoints: [S3OutpostsClientTypes.Endpoint]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.endpoints = endpoints
        self.nextToken = nextToken
    }
}

extension CreateEndpointInput {

    static func urlPathProvider(_ value: CreateEndpointInput) -> Swift.String? {
        return "/S3Outposts/CreateEndpoint"
    }
}

extension DeleteEndpointInput {

    static func urlPathProvider(_ value: DeleteEndpointInput) -> Swift.String? {
        return "/S3Outposts/DeleteEndpoint"
    }
}

extension DeleteEndpointInput {

    static func queryItemProvider(_ value: DeleteEndpointInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let outpostId = value.outpostId else {
            let message = "Creating a URL Query Item failed. outpostId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let outpostIdQueryItem = Smithy.URIQueryItem(name: "outpostId".urlPercentEncoding(), value: Swift.String(outpostId).urlPercentEncoding())
        items.append(outpostIdQueryItem)
        guard let endpointId = value.endpointId else {
            let message = "Creating a URL Query Item failed. endpointId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let endpointIdQueryItem = Smithy.URIQueryItem(name: "endpointId".urlPercentEncoding(), value: Swift.String(endpointId).urlPercentEncoding())
        items.append(endpointIdQueryItem)
        return items
    }
}

extension ListEndpointsInput {

    static func urlPathProvider(_ value: ListEndpointsInput) -> Swift.String? {
        return "/S3Outposts/ListEndpoints"
    }
}

extension ListEndpointsInput {

    static func queryItemProvider(_ value: ListEndpointsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListOutpostsWithS3Input {

    static func urlPathProvider(_ value: ListOutpostsWithS3Input) -> Swift.String? {
        return "/S3Outposts/ListOutpostsWithS3"
    }
}

extension ListOutpostsWithS3Input {

    static func queryItemProvider(_ value: ListOutpostsWithS3Input) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListSharedEndpointsInput {

    static func urlPathProvider(_ value: ListSharedEndpointsInput) -> Swift.String? {
        return "/S3Outposts/ListSharedEndpoints"
    }
}

extension ListSharedEndpointsInput {

    static func queryItemProvider(_ value: ListSharedEndpointsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let outpostId = value.outpostId else {
            let message = "Creating a URL Query Item failed. outpostId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let outpostIdQueryItem = Smithy.URIQueryItem(name: "outpostId".urlPercentEncoding(), value: Swift.String(outpostId).urlPercentEncoding())
        items.append(outpostIdQueryItem)
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension CreateEndpointInput {

    static func write(value: CreateEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessType"].write(value.accessType)
        try writer["CustomerOwnedIpv4Pool"].write(value.customerOwnedIpv4Pool)
        try writer["OutpostId"].write(value.outpostId)
        try writer["SecurityGroupId"].write(value.securityGroupId)
        try writer["SubnetId"].write(value.subnetId)
    }
}

extension CreateEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEndpointOutput()
        value.endpointArn = try reader["EndpointArn"].readIfPresent()
        return value
    }
}

extension DeleteEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEndpointOutput {
        return DeleteEndpointOutput()
    }
}

extension ListEndpointsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEndpointsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEndpointsOutput()
        value.endpoints = try reader["Endpoints"].readListIfPresent(memberReadingClosure: S3OutpostsClientTypes.Endpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListOutpostsWithS3Output {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListOutpostsWithS3Output {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListOutpostsWithS3Output()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.outposts = try reader["Outposts"].readListIfPresent(memberReadingClosure: S3OutpostsClientTypes.Outpost.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSharedEndpointsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSharedEndpointsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSharedEndpointsOutput()
        value.endpoints = try reader["Endpoints"].readListIfPresent(memberReadingClosure: S3OutpostsClientTypes.Endpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

enum CreateEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "OutpostOfflineException": return try OutpostOfflineException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "OutpostOfflineException": return try OutpostOfflineException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEndpointsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListOutpostsWithS3OutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSharedEndpointsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension OutpostOfflineException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> OutpostOfflineException {
        let reader = baseError.errorBodyReader
        var value = OutpostOfflineException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension S3OutpostsClientTypes.Endpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> S3OutpostsClientTypes.Endpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3OutpostsClientTypes.Endpoint()
        value.endpointArn = try reader["EndpointArn"].readIfPresent()
        value.outpostsId = try reader["OutpostsId"].readIfPresent()
        value.cidrBlock = try reader["CidrBlock"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.networkInterfaces = try reader["NetworkInterfaces"].readListIfPresent(memberReadingClosure: S3OutpostsClientTypes.NetworkInterface.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.subnetId = try reader["SubnetId"].readIfPresent()
        value.securityGroupId = try reader["SecurityGroupId"].readIfPresent()
        value.accessType = try reader["AccessType"].readIfPresent()
        value.customerOwnedIpv4Pool = try reader["CustomerOwnedIpv4Pool"].readIfPresent()
        value.failedReason = try reader["FailedReason"].readIfPresent(with: S3OutpostsClientTypes.FailedReason.read(from:))
        return value
    }
}

extension S3OutpostsClientTypes.FailedReason {

    static func read(from reader: SmithyJSON.Reader) throws -> S3OutpostsClientTypes.FailedReason {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3OutpostsClientTypes.FailedReason()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension S3OutpostsClientTypes.NetworkInterface {

    static func read(from reader: SmithyJSON.Reader) throws -> S3OutpostsClientTypes.NetworkInterface {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3OutpostsClientTypes.NetworkInterface()
        value.networkInterfaceId = try reader["NetworkInterfaceId"].readIfPresent()
        return value
    }
}

extension S3OutpostsClientTypes.Outpost {

    static func read(from reader: SmithyJSON.Reader) throws -> S3OutpostsClientTypes.Outpost {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3OutpostsClientTypes.Outpost()
        value.outpostArn = try reader["OutpostArn"].readIfPresent()
        value.s3OutpostArn = try reader["S3OutpostArn"].readIfPresent()
        value.outpostId = try reader["OutpostId"].readIfPresent()
        value.ownerId = try reader["OwnerId"].readIfPresent()
        value.capacityInBytes = try reader["CapacityInBytes"].readIfPresent() ?? 0
        return value
    }
}

public enum S3OutpostsClientTypes {}
