//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.listWritingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

/// Lightsail throws this exception when the user cannot be authenticated or uses invalid credentials to access a resource.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var docs: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
        public internal(set) var tip: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.docs = docs
        self.properties.message = message
        self.properties.tip = tip
    }
}

extension LightsailClientTypes {

    public enum AccessDirection: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case inbound
        case outbound
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessDirection] {
            return [
                .inbound,
                .outbound
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .inbound: return "inbound"
            case .outbound: return "outbound"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the last time an access key was used. This object does not include data in the response of a [CreateBucketAccessKey](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html) action.
    public struct AccessKeyLastUsed: Swift.Sendable {
        /// The date and time when the access key was most recently used. This value is null if the access key has not been used.
        public var lastUsedDate: Foundation.Date?
        /// The Amazon Web Services Region where this access key was most recently used. This value is N/A if the access key has not been used.
        public var region: Swift.String?
        /// The name of the Amazon Web Services service with which this access key was most recently used. This value is N/A if the access key has not been used.
        public var serviceName: Swift.String?

        public init(
            lastUsedDate: Foundation.Date? = nil,
            region: Swift.String? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.lastUsedDate = lastUsedDate
            self.region = region
            self.serviceName = serviceName
        }
    }
}

extension LightsailClientTypes {

    public enum StatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusType] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .inactive: return "Inactive"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes an access key for an Amazon Lightsail bucket. Access keys grant full programmatic access to the specified bucket and its objects. You can have a maximum of two access keys per bucket. Use the [CreateBucketAccessKey](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html) action to create an access key for a specific bucket. For more information about access keys, see [Creating access keys for a bucket in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys) in the Amazon Lightsail Developer Guide. The secretAccessKey value is returned only in response to the CreateBucketAccessKey action. You can get a secret access key only when you first create an access key; you cannot get the secret access key later. If you lose the secret access key, you must create a new access key.
    public struct AccessKey: Swift.Sendable {
        /// The ID of the access key.
        public var accessKeyId: Swift.String?
        /// The timestamp when the access key was created.
        public var createdAt: Foundation.Date?
        /// An object that describes the last time the access key was used. This object does not include data in the response of a [CreateBucketAccessKey](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html) action. If the access key has not been used, the region and serviceName values are N/A, and the lastUsedDate value is null.
        public var lastUsed: LightsailClientTypes.AccessKeyLastUsed?
        /// The secret access key used to sign requests. You should store the secret access key in a safe location. We recommend that you delete the access key if the secret access key is compromised.
        public var secretAccessKey: Swift.String?
        /// The status of the access key. A status of Active means that the key is valid, while Inactive means it is not.
        public var status: LightsailClientTypes.StatusType?

        public init(
            accessKeyId: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            lastUsed: LightsailClientTypes.AccessKeyLastUsed? = nil,
            secretAccessKey: Swift.String? = nil,
            status: LightsailClientTypes.StatusType? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.createdAt = createdAt
            self.lastUsed = lastUsed
            self.secretAccessKey = secretAccessKey
            self.status = status
        }
    }
}

extension LightsailClientTypes.AccessKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessKey(createdAt: \(Swift.String(describing: createdAt)), lastUsed: \(Swift.String(describing: lastUsed)), secretAccessKey: \(Swift.String(describing: secretAccessKey)), status: \(Swift.String(describing: status)), accessKeyId: \"CONTENT_REDACTED\")"}
}

extension LightsailClientTypes {

    /// Describes an Amazon Lightsail instance that has access to a Lightsail bucket.
    public struct ResourceReceivingAccess: Swift.Sendable {
        /// The name of the Lightsail instance.
        public var name: Swift.String?
        /// The Lightsail resource type (for example, Instance).
        public var resourceType: Swift.String?

        public init(
            name: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.name = name
            self.resourceType = resourceType
        }
    }
}

extension LightsailClientTypes {

    public enum AccessType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `private`
        case `public`
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessType] {
            return [
                .private,
                .public
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .private: return "private"
            case .public: return "public"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the anonymous access permissions for an Amazon Lightsail bucket and its objects. For more information about bucket access permissions, see [Understanding bucket permissions in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-understanding-bucket-permissions) in the Amazon Lightsail Developer Guide.
    public struct AccessRules: Swift.Sendable {
        /// A Boolean value that indicates whether the access control list (ACL) permissions that are applied to individual objects override the getObject option that is currently specified. When this is true, you can use the [PutObjectAcl](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectAcl.html) Amazon S3 API action to set individual objects to public (read-only) using the public-read ACL, or to private using the private ACL.
        public var allowPublicOverrides: Swift.Bool?
        /// Specifies the anonymous access to all objects in a bucket. The following options can be specified:
        ///
        /// * public - Sets all objects in the bucket to public (read-only), making them readable by anyone in the world. If the getObject value is set to public, then all objects in the bucket default to public regardless of the allowPublicOverrides value.
        ///
        /// * private - Sets all objects in the bucket to private, making them readable only by you or anyone you give access to. If the getObject value is set to private, and the allowPublicOverrides value is set to true, then all objects in the bucket default to private unless they are configured with a public-read ACL. Individual objects with a public-read ACL are readable by anyone in the world.
        public var getObject: LightsailClientTypes.AccessType?

        public init(
            allowPublicOverrides: Swift.Bool? = nil,
            getObject: LightsailClientTypes.AccessType? = nil
        )
        {
            self.allowPublicOverrides = allowPublicOverrides
            self.getObject = getObject
        }
    }
}

extension LightsailClientTypes {

    public enum BPAStatusMessage: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case defaultedForSlrMissing
        case defaultedForSlrMissingOnHold
        case syncOnHold
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [BPAStatusMessage] {
            return [
                .defaultedForSlrMissing,
                .defaultedForSlrMissingOnHold,
                .syncOnHold,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .defaultedForSlrMissing: return "DEFAULTED_FOR_SLR_MISSING"
            case .defaultedForSlrMissingOnHold: return "DEFAULTED_FOR_SLR_MISSING_ON_HOLD"
            case .syncOnHold: return "SYNC_ON_HOLD"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum AccountLevelBpaSyncStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case defaulted
        case failed
        case insync
        case neversynced
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountLevelBpaSyncStatus] {
            return [
                .defaulted,
                .failed,
                .insync,
                .neversynced
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .defaulted: return "Defaulted"
            case .failed: return "Failed"
            case .insync: return "InSync"
            case .neversynced: return "NeverSynced"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the synchronization status of the Amazon Simple Storage Service (Amazon S3) account-level block public access (BPA) feature for your Lightsail buckets. The account-level BPA feature of Amazon S3 provides centralized controls to limit public access to all Amazon S3 buckets in an account. BPA can make all Amazon S3 buckets in an Amazon Web Services account private regardless of the individual bucket and object permissions that are configured. Lightsail buckets take into account the Amazon S3 account-level BPA configuration when allowing or denying public access. To do this, Lightsail periodically fetches the account-level BPA configuration from Amazon S3. When the account-level BPA status is InSync, the Amazon S3 account-level BPA configuration is synchronized and it applies to your Lightsail buckets. For more information about Amazon Simple Storage Service account-level BPA and how it affects Lightsail buckets, see [Block public access for buckets in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-block-public-access-for-buckets) in the Amazon Lightsail Developer Guide.
    public struct AccountLevelBpaSync: Swift.Sendable {
        /// A Boolean value that indicates whether account-level block public access is affecting your Lightsail buckets.
        public var bpaImpactsLightsail: Swift.Bool?
        /// The timestamp of when the account-level BPA configuration was last synchronized. This value is null when the account-level BPA configuration has not been synchronized.
        public var lastSyncedAt: Foundation.Date?
        /// A message that provides a reason for a Failed or Defaulted synchronization status. The following messages are possible:
        ///
        /// * SYNC_ON_HOLD - The synchronization has not yet happened. This status message occurs immediately after you create your first Lightsail bucket. This status message should change after the first synchronization happens, approximately 1 hour after the first bucket is created.
        ///
        /// * DEFAULTED_FOR_SLR_MISSING - The synchronization failed because the required service-linked role is missing from your Amazon Web Services account. The account-level BPA configuration for your Lightsail buckets is defaulted to active until the synchronization can occur. This means that all your buckets are private and not publicly accessible. For more information about how to create the required service-linked role to allow synchronization, see [Using Service-Linked Roles for Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-using-service-linked-roles) in the Amazon Lightsail Developer Guide.
        ///
        /// * DEFAULTED_FOR_SLR_MISSING_ON_HOLD - The synchronization failed because the required service-linked role is missing from your Amazon Web Services account. Account-level BPA is not yet configured for your Lightsail buckets. Therefore, only the bucket access permissions and individual object access permissions apply to your Lightsail buckets. For more information about how to create the required service-linked role to allow synchronization, see [Using Service-Linked Roles for Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-using-service-linked-roles) in the Amazon Lightsail Developer Guide.
        ///
        /// * Unknown - The reason that synchronization failed is unknown. Contact Amazon Web Services Support for more information.
        public var message: LightsailClientTypes.BPAStatusMessage?
        /// The status of the account-level BPA synchronization. The following statuses are possible:
        ///
        /// * InSync - Account-level BPA is synchronized. The Amazon S3 account-level BPA configuration applies to your Lightsail buckets.
        ///
        /// * NeverSynced - Synchronization has not yet happened. The Amazon S3 account-level BPA configuration does not apply to your Lightsail buckets.
        ///
        /// * Failed - Synchronization failed. The Amazon S3 account-level BPA configuration does not apply to your Lightsail buckets.
        ///
        /// * Defaulted - Synchronization failed and account-level BPA for your Lightsail buckets is defaulted to active.
        ///
        ///
        /// You might need to complete further actions if the status is Failed or Defaulted. The message parameter provides more information for those statuses.
        public var status: LightsailClientTypes.AccountLevelBpaSyncStatus?

        public init(
            bpaImpactsLightsail: Swift.Bool? = nil,
            lastSyncedAt: Foundation.Date? = nil,
            message: LightsailClientTypes.BPAStatusMessage? = nil,
            status: LightsailClientTypes.AccountLevelBpaSyncStatus? = nil
        )
        {
            self.bpaImpactsLightsail = bpaImpactsLightsail
            self.lastSyncedAt = lastSyncedAt
            self.message = message
            self.status = status
        }
    }
}

/// Lightsail throws this exception when an account is still in the setup in progress state.
public struct AccountSetupInProgressException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var docs: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
        public internal(set) var tip: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccountSetupInProgressException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.docs = docs
        self.properties.message = message
        self.properties.tip = tip
    }
}

extension LightsailClientTypes {

    /// Describes an add-on that is enabled for an Amazon Lightsail resource.
    public struct AddOn: Swift.Sendable {
        /// The amount of idle time in minutes after which your virtual computer will automatically stop. This add-on only applies to Lightsail for Research resources.
        public var duration: Swift.String?
        /// The name of the add-on.
        public var name: Swift.String?
        /// The next daily time an automatic snapshot will be created. The time shown is in HH:00 format, and in Coordinated Universal Time (UTC). The snapshot is automatically created between the time shown and up to 45 minutes after.
        public var nextSnapshotTimeOfDay: Swift.String?
        /// The daily time when an automatic snapshot is created. The time shown is in HH:00 format, and in Coordinated Universal Time (UTC). The snapshot is automatically created between the time shown and up to 45 minutes after.
        public var snapshotTimeOfDay: Swift.String?
        /// The status of the add-on.
        public var status: Swift.String?
        /// The trigger threshold of the action. This add-on only applies to Lightsail for Research resources.
        public var threshold: Swift.String?

        public init(
            duration: Swift.String? = nil,
            name: Swift.String? = nil,
            nextSnapshotTimeOfDay: Swift.String? = nil,
            snapshotTimeOfDay: Swift.String? = nil,
            status: Swift.String? = nil,
            threshold: Swift.String? = nil
        )
        {
            self.duration = duration
            self.name = name
            self.nextSnapshotTimeOfDay = nextSnapshotTimeOfDay
            self.snapshotTimeOfDay = snapshotTimeOfDay
            self.status = status
            self.threshold = threshold
        }
    }
}

extension LightsailClientTypes {

    public enum AddOnType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case autosnapshot
        case stopinstanceonidle
        case sdkUnknown(Swift.String)

        public static var allCases: [AddOnType] {
            return [
                .autosnapshot,
                .stopinstanceonidle
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .autosnapshot: return "AutoSnapshot"
            case .stopinstanceonidle: return "StopInstanceOnIdle"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes a request to enable or modify the automatic snapshot add-on for an Amazon Lightsail instance or disk. When you modify the automatic snapshot time for a resource, it is typically effective immediately except under the following conditions:
    ///
    /// * If an automatic snapshot has been created for the current day, and you change the snapshot time to a later time of day, then the new snapshot time will be effective the following day. This ensures that two snapshots are not created for the current day.
    ///
    /// * If an automatic snapshot has not yet been created for the current day, and you change the snapshot time to an earlier time of day, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day.
    ///
    /// * If an automatic snapshot has not yet been created for the current day, and you change the snapshot time to a time that is within 30 minutes from your current time, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day, because 30 minutes is required between your current time and the new snapshot time that you specify.
    ///
    /// * If an automatic snapshot is scheduled to be created within 30 minutes from your current time and you change the snapshot time, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day, because 30 minutes is required between your current time and the new snapshot time that you specify.
    public struct AutoSnapshotAddOnRequest: Swift.Sendable {
        /// The daily time when an automatic snapshot will be created. Constraints:
        ///
        /// * Must be in HH:00 format, and in an hourly increment.
        ///
        /// * Specified in Coordinated Universal Time (UTC).
        ///
        /// * The snapshot will be automatically created between the time specified and up to 45 minutes after.
        public var snapshotTimeOfDay: Swift.String?

        public init(
            snapshotTimeOfDay: Swift.String? = nil
        )
        {
            self.snapshotTimeOfDay = snapshotTimeOfDay
        }
    }
}

extension LightsailClientTypes {

    /// Describes a request to create or edit the StopInstanceOnIdle add-on. This add-on only applies to Lightsail for Research resources.
    public struct StopInstanceOnIdleRequest: Swift.Sendable {
        /// The amount of idle time in minutes after which your virtual computer will automatically stop.
        public var duration: Swift.String?
        /// The value to compare with the duration.
        public var threshold: Swift.String?

        public init(
            duration: Swift.String? = nil,
            threshold: Swift.String? = nil
        )
        {
            self.duration = duration
            self.threshold = threshold
        }
    }
}

extension LightsailClientTypes {

    /// Describes a request to enable, modify, or disable an add-on for an Amazon Lightsail resource. An additional cost may be associated with enabling add-ons. For more information, see the [Lightsail pricing page](https://aws.amazon.com/lightsail/pricing/).
    public struct AddOnRequest: Swift.Sendable {
        /// The add-on type.
        /// This member is required.
        public var addOnType: LightsailClientTypes.AddOnType?
        /// An object that represents additional parameters when enabling or modifying the automatic snapshot add-on.
        public var autoSnapshotAddOnRequest: LightsailClientTypes.AutoSnapshotAddOnRequest?
        /// An object that represents additional parameters when enabling or modifying the StopInstanceOnIdle add-on. This object only applies to Lightsail for Research resources.
        public var stopInstanceOnIdleRequest: LightsailClientTypes.StopInstanceOnIdleRequest?

        public init(
            addOnType: LightsailClientTypes.AddOnType? = nil,
            autoSnapshotAddOnRequest: LightsailClientTypes.AutoSnapshotAddOnRequest? = nil,
            stopInstanceOnIdleRequest: LightsailClientTypes.StopInstanceOnIdleRequest? = nil
        )
        {
            self.addOnType = addOnType
            self.autoSnapshotAddOnRequest = autoSnapshotAddOnRequest
            self.stopInstanceOnIdleRequest = stopInstanceOnIdleRequest
        }
    }
}

extension LightsailClientTypes {

    public enum ComparisonOperator: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case greaterthanorequaltothreshold
        case greaterthanthreshold
        case lessthanorequaltothreshold
        case lessthanthreshold
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .greaterthanorequaltothreshold,
                .greaterthanthreshold,
                .lessthanorequaltothreshold,
                .lessthanthreshold
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .greaterthanorequaltothreshold: return "GreaterThanOrEqualToThreshold"
            case .greaterthanthreshold: return "GreaterThanThreshold"
            case .lessthanorequaltothreshold: return "LessThanOrEqualToThreshold"
            case .lessthanthreshold: return "LessThanThreshold"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum ContactProtocol: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case email
        case sms
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactProtocol] {
            return [
                .email,
                .sms
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .email: return "Email"
            case .sms: return "SMS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum RegionName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case apNortheast1
        case apNortheast2
        case apSoutheast1
        case apSoutheast2
        case apSouth1
        case caCentral1
        case euCentral1
        case euNorth1
        case euWest1
        case euWest2
        case euWest3
        case usEast1
        case usEast2
        case usWest1
        case usWest2
        case sdkUnknown(Swift.String)

        public static var allCases: [RegionName] {
            return [
                .apNortheast1,
                .apNortheast2,
                .apSoutheast1,
                .apSoutheast2,
                .apSouth1,
                .caCentral1,
                .euCentral1,
                .euNorth1,
                .euWest1,
                .euWest2,
                .euWest3,
                .usEast1,
                .usEast2,
                .usWest1,
                .usWest2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .apNortheast1: return "ap-northeast-1"
            case .apNortheast2: return "ap-northeast-2"
            case .apSoutheast1: return "ap-southeast-1"
            case .apSoutheast2: return "ap-southeast-2"
            case .apSouth1: return "ap-south-1"
            case .caCentral1: return "ca-central-1"
            case .euCentral1: return "eu-central-1"
            case .euNorth1: return "eu-north-1"
            case .euWest1: return "eu-west-1"
            case .euWest2: return "eu-west-2"
            case .euWest3: return "eu-west-3"
            case .usEast1: return "us-east-1"
            case .usEast2: return "us-east-2"
            case .usWest1: return "us-west-1"
            case .usWest2: return "us-west-2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the resource location.
    public struct ResourceLocation: Swift.Sendable {
        /// The Availability Zone. Follows the format us-east-2a (case-sensitive).
        public var availabilityZone: Swift.String?
        /// The Amazon Web Services Region name.
        public var regionName: LightsailClientTypes.RegionName?

        public init(
            availabilityZone: Swift.String? = nil,
            regionName: LightsailClientTypes.RegionName? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.regionName = regionName
        }
    }
}

extension LightsailClientTypes {

    public enum MetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case burstcapacitypercentage
        case burstcapacitytime
        case cpuutilization
        case clienttlsnegotiationerrorcount
        case databaseconnections
        case diskqueuedepth
        case freestoragespace
        case httpcodeInstance2xxCount
        case httpcodeInstance3xxCount
        case httpcodeInstance4xxCount
        case httpcodeInstance5xxCount
        case httpcodeLb4xxCount
        case httpcodeLb5xxCount
        case healthyhostcount
        case instanceresponsetime
        case networkin
        case networkout
        case networkreceivethroughput
        case networktransmitthroughput
        case rejectedconnectioncount
        case requestcount
        case statuscheckfailed
        case statuscheckfailedInstance
        case statuscheckfailedSystem
        case unhealthyhostcount
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricName] {
            return [
                .burstcapacitypercentage,
                .burstcapacitytime,
                .cpuutilization,
                .clienttlsnegotiationerrorcount,
                .databaseconnections,
                .diskqueuedepth,
                .freestoragespace,
                .httpcodeInstance2xxCount,
                .httpcodeInstance3xxCount,
                .httpcodeInstance4xxCount,
                .httpcodeInstance5xxCount,
                .httpcodeLb4xxCount,
                .httpcodeLb5xxCount,
                .healthyhostcount,
                .instanceresponsetime,
                .networkin,
                .networkout,
                .networkreceivethroughput,
                .networktransmitthroughput,
                .rejectedconnectioncount,
                .requestcount,
                .statuscheckfailed,
                .statuscheckfailedInstance,
                .statuscheckfailedSystem,
                .unhealthyhostcount
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .burstcapacitypercentage: return "BurstCapacityPercentage"
            case .burstcapacitytime: return "BurstCapacityTime"
            case .cpuutilization: return "CPUUtilization"
            case .clienttlsnegotiationerrorcount: return "ClientTLSNegotiationErrorCount"
            case .databaseconnections: return "DatabaseConnections"
            case .diskqueuedepth: return "DiskQueueDepth"
            case .freestoragespace: return "FreeStorageSpace"
            case .httpcodeInstance2xxCount: return "HTTPCode_Instance_2XX_Count"
            case .httpcodeInstance3xxCount: return "HTTPCode_Instance_3XX_Count"
            case .httpcodeInstance4xxCount: return "HTTPCode_Instance_4XX_Count"
            case .httpcodeInstance5xxCount: return "HTTPCode_Instance_5XX_Count"
            case .httpcodeLb4xxCount: return "HTTPCode_LB_4XX_Count"
            case .httpcodeLb5xxCount: return "HTTPCode_LB_5XX_Count"
            case .healthyhostcount: return "HealthyHostCount"
            case .instanceresponsetime: return "InstanceResponseTime"
            case .networkin: return "NetworkIn"
            case .networkout: return "NetworkOut"
            case .networkreceivethroughput: return "NetworkReceiveThroughput"
            case .networktransmitthroughput: return "NetworkTransmitThroughput"
            case .rejectedconnectioncount: return "RejectedConnectionCount"
            case .requestcount: return "RequestCount"
            case .statuscheckfailed: return "StatusCheckFailed"
            case .statuscheckfailedInstance: return "StatusCheckFailed_Instance"
            case .statuscheckfailedSystem: return "StatusCheckFailed_System"
            case .unhealthyhostcount: return "UnhealthyHostCount"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum ResourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alarm
        case bucket
        case certificate
        case cloudformationstackrecord
        case contactmethod
        case containerservice
        case disk
        case disksnapshot
        case distribution
        case domain
        case exportsnapshotrecord
        case instance
        case instancesnapshot
        case keypair
        case loadbalancer
        case loadbalancertlscertificate
        case peeredvpc
        case relationaldatabase
        case relationaldatabasesnapshot
        case staticip
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .alarm,
                .bucket,
                .certificate,
                .cloudformationstackrecord,
                .contactmethod,
                .containerservice,
                .disk,
                .disksnapshot,
                .distribution,
                .domain,
                .exportsnapshotrecord,
                .instance,
                .instancesnapshot,
                .keypair,
                .loadbalancer,
                .loadbalancertlscertificate,
                .peeredvpc,
                .relationaldatabase,
                .relationaldatabasesnapshot,
                .staticip
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "Alarm"
            case .bucket: return "Bucket"
            case .certificate: return "Certificate"
            case .cloudformationstackrecord: return "CloudFormationStackRecord"
            case .contactmethod: return "ContactMethod"
            case .containerservice: return "ContainerService"
            case .disk: return "Disk"
            case .disksnapshot: return "DiskSnapshot"
            case .distribution: return "Distribution"
            case .domain: return "Domain"
            case .exportsnapshotrecord: return "ExportSnapshotRecord"
            case .instance: return "Instance"
            case .instancesnapshot: return "InstanceSnapshot"
            case .keypair: return "KeyPair"
            case .loadbalancer: return "LoadBalancer"
            case .loadbalancertlscertificate: return "LoadBalancerTlsCertificate"
            case .peeredvpc: return "PeeredVpc"
            case .relationaldatabase: return "RelationalDatabase"
            case .relationaldatabasesnapshot: return "RelationalDatabaseSnapshot"
            case .staticip: return "StaticIp"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes resource being monitored by an alarm. An alarm is a way to monitor your Amazon Lightsail resource metrics. For more information, see [Alarms in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms).
    public struct MonitoredResourceInfo: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the resource being monitored.
        public var arn: Swift.String?
        /// The name of the Lightsail resource being monitored.
        public var name: Swift.String?
        /// The Lightsail resource type of the resource being monitored. Instances, load balancers, and relational databases are the only Lightsail resources that can currently be monitored by alarms.
        public var resourceType: LightsailClientTypes.ResourceType?

        public init(
            arn: Swift.String? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil
        )
        {
            self.arn = arn
            self.name = name
            self.resourceType = resourceType
        }
    }
}

extension LightsailClientTypes {

    public enum AlarmState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alarm
        case insufficientData
        case ok
        case sdkUnknown(Swift.String)

        public static var allCases: [AlarmState] {
            return [
                .alarm,
                .insufficientData,
                .ok
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "ALARM"
            case .insufficientData: return "INSUFFICIENT_DATA"
            case .ok: return "OK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum MetricStatistic: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStatistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum TreatMissingData: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case breaching
        case ignore
        case missing
        case notbreaching
        case sdkUnknown(Swift.String)

        public static var allCases: [TreatMissingData] {
            return [
                .breaching,
                .ignore,
                .missing,
                .notbreaching
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .breaching: return "breaching"
            case .ignore: return "ignore"
            case .missing: return "missing"
            case .notbreaching: return "notBreaching"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum MetricUnit: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bits
        case bitssecond
        case bytes
        case bytessecond
        case count
        case countsecond
        case gigabits
        case gigabitssecond
        case gigabytes
        case gigabytessecond
        case kilobits
        case kilobitssecond
        case kilobytes
        case kilobytessecond
        case megabits
        case megabitssecond
        case megabytes
        case megabytessecond
        case microseconds
        case milliseconds
        case `none`
        case percent
        case seconds
        case terabits
        case terabitssecond
        case terabytes
        case terabytessecond
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricUnit] {
            return [
                .bits,
                .bitssecond,
                .bytes,
                .bytessecond,
                .count,
                .countsecond,
                .gigabits,
                .gigabitssecond,
                .gigabytes,
                .gigabytessecond,
                .kilobits,
                .kilobitssecond,
                .kilobytes,
                .kilobytessecond,
                .megabits,
                .megabitssecond,
                .megabytes,
                .megabytessecond,
                .microseconds,
                .milliseconds,
                .none,
                .percent,
                .seconds,
                .terabits,
                .terabitssecond,
                .terabytes,
                .terabytessecond
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bits: return "Bits"
            case .bitssecond: return "Bits/Second"
            case .bytes: return "Bytes"
            case .bytessecond: return "Bytes/Second"
            case .count: return "Count"
            case .countsecond: return "Count/Second"
            case .gigabits: return "Gigabits"
            case .gigabitssecond: return "Gigabits/Second"
            case .gigabytes: return "Gigabytes"
            case .gigabytessecond: return "Gigabytes/Second"
            case .kilobits: return "Kilobits"
            case .kilobitssecond: return "Kilobits/Second"
            case .kilobytes: return "Kilobytes"
            case .kilobytessecond: return "Kilobytes/Second"
            case .megabits: return "Megabits"
            case .megabitssecond: return "Megabits/Second"
            case .megabytes: return "Megabytes"
            case .megabytessecond: return "Megabytes/Second"
            case .microseconds: return "Microseconds"
            case .milliseconds: return "Milliseconds"
            case .none: return "None"
            case .percent: return "Percent"
            case .seconds: return "Seconds"
            case .terabits: return "Terabits"
            case .terabitssecond: return "Terabits/Second"
            case .terabytes: return "Terabytes"
            case .terabytessecond: return "Terabytes/Second"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes an alarm. An alarm is a way to monitor your Lightsail resource metrics. For more information, see [Alarms in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms).
    public struct Alarm: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the alarm.
        public var arn: Swift.String?
        /// The arithmetic operation used when comparing the specified statistic and threshold.
        public var comparisonOperator: LightsailClientTypes.ComparisonOperator?
        /// The contact protocols for the alarm, such as Email, SMS (text messaging), or both.
        public var contactProtocols: [LightsailClientTypes.ContactProtocol]?
        /// The timestamp when the alarm was created.
        public var createdAt: Foundation.Date?
        /// The number of data points that must not within the specified threshold to trigger the alarm.
        public var datapointsToAlarm: Swift.Int?
        /// The number of periods over which data is compared to the specified threshold.
        public var evaluationPeriods: Swift.Int?
        /// An object that lists information about the location of the alarm.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the metric associated with the alarm.
        public var metricName: LightsailClientTypes.MetricName?
        /// An object that lists information about the resource monitored by the alarm.
        public var monitoredResourceInfo: LightsailClientTypes.MonitoredResourceInfo?
        /// The name of the alarm.
        public var name: Swift.String?
        /// Indicates whether the alarm is enabled.
        public var notificationEnabled: Swift.Bool?
        /// The alarm states that trigger a notification.
        public var notificationTriggers: [LightsailClientTypes.AlarmState]?
        /// The period, in seconds, over which the statistic is applied.
        public var period: Swift.Int?
        /// The Lightsail resource type of the alarm.
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The current state of the alarm. An alarm has the following possible states:
        ///
        /// * ALARM - The metric is outside of the defined threshold.
        ///
        /// * INSUFFICIENT_DATA - The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.
        ///
        /// * OK - The metric is within the defined threshold.
        public var state: LightsailClientTypes.AlarmState?
        /// The statistic for the metric associated with the alarm. The following statistics are available:
        ///
        /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
        ///
        /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
        ///
        /// * Sum - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
        ///
        /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
        ///
        /// * SampleCount - The count, or number, of data points used for the statistical calculation.
        public var statistic: LightsailClientTypes.MetricStatistic?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail alarm. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The value against which the specified statistic is compared.
        public var threshold: Swift.Double?
        /// Specifies how the alarm handles missing data points. An alarm can treat missing data in the following ways:
        ///
        /// * breaching - Assume the missing data is not within the threshold. Missing data counts towards the number of times the metric is not within the threshold.
        ///
        /// * notBreaching - Assume the missing data is within the threshold. Missing data does not count towards the number of times the metric is not within the threshold.
        ///
        /// * ignore - Ignore the missing data. Maintains the current alarm state.
        ///
        /// * missing - Missing data is treated as missing.
        public var treatMissingData: LightsailClientTypes.TreatMissingData?
        /// The unit of the metric associated with the alarm.
        public var unit: LightsailClientTypes.MetricUnit?

        public init(
            arn: Swift.String? = nil,
            comparisonOperator: LightsailClientTypes.ComparisonOperator? = nil,
            contactProtocols: [LightsailClientTypes.ContactProtocol]? = nil,
            createdAt: Foundation.Date? = nil,
            datapointsToAlarm: Swift.Int? = nil,
            evaluationPeriods: Swift.Int? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            metricName: LightsailClientTypes.MetricName? = nil,
            monitoredResourceInfo: LightsailClientTypes.MonitoredResourceInfo? = nil,
            name: Swift.String? = nil,
            notificationEnabled: Swift.Bool? = nil,
            notificationTriggers: [LightsailClientTypes.AlarmState]? = nil,
            period: Swift.Int? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            state: LightsailClientTypes.AlarmState? = nil,
            statistic: LightsailClientTypes.MetricStatistic? = nil,
            supportCode: Swift.String? = nil,
            threshold: Swift.Double? = nil,
            treatMissingData: LightsailClientTypes.TreatMissingData? = nil,
            unit: LightsailClientTypes.MetricUnit? = nil
        )
        {
            self.arn = arn
            self.comparisonOperator = comparisonOperator
            self.contactProtocols = contactProtocols
            self.createdAt = createdAt
            self.datapointsToAlarm = datapointsToAlarm
            self.evaluationPeriods = evaluationPeriods
            self.location = location
            self.metricName = metricName
            self.monitoredResourceInfo = monitoredResourceInfo
            self.name = name
            self.notificationEnabled = notificationEnabled
            self.notificationTriggers = notificationTriggers
            self.period = period
            self.resourceType = resourceType
            self.state = state
            self.statistic = statistic
            self.supportCode = supportCode
            self.threshold = threshold
            self.treatMissingData = treatMissingData
            self.unit = unit
        }
    }
}

/// Lightsail throws this exception when user input does not conform to the validation rules of an input field. Domain and distribution APIs are only available in the N. Virginia (us-east-1) Amazon Web Services Region. Please set your Amazon Web Services Region configuration to us-east-1 to create, view, or edit these resources.
public struct InvalidInputException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var docs: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
        public internal(set) var tip: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidInputException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.docs = docs
        self.properties.message = message
        self.properties.tip = tip
    }
}

/// Lightsail throws this exception when it cannot find a resource.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var docs: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
        public internal(set) var tip: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.docs = docs
        self.properties.message = message
        self.properties.tip = tip
    }
}

/// Lightsail throws this exception when an operation fails to execute.
public struct OperationFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var docs: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
        public internal(set) var tip: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OperationFailureException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.docs = docs
        self.properties.message = message
        self.properties.tip = tip
    }
}

/// A general service exception.
public struct ServiceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var docs: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
        public internal(set) var tip: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.docs = docs
        self.properties.message = message
        self.properties.tip = tip
    }
}

/// Lightsail throws this exception when the user has not been authenticated.
public struct UnauthenticatedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var docs: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
        public internal(set) var tip: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthenticatedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.docs = docs
        self.properties.message = message
        self.properties.tip = tip
    }
}

public struct AllocateStaticIpInput: Swift.Sendable {
    /// The name of the static IP address.
    /// This member is required.
    public var staticIpName: Swift.String?

    public init(
        staticIpName: Swift.String? = nil
    )
    {
        self.staticIpName = staticIpName
    }
}

extension LightsailClientTypes {

    public enum OperationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allocatestaticip
        case attachcertificatetodistribution
        case attachdisk
        case attachinstancestoloadbalancer
        case attachloadbalancertlscertificate
        case attachstaticip
        case closeinstancepublicports
        case createbucket
        case createbucketaccesskey
        case createcertificate
        case createcontactmethod
        case createcontainerservice
        case createcontainerservicedeployment
        case createcontainerserviceregistrylogin
        case createdisk
        case creatediskfromsnapshot
        case createdisksnapshot
        case createdistribution
        case createdomain
        case createinstance
        case createinstancesnapshot
        case createinstancesfromsnapshot
        case createloadbalancer
        case createloadbalancertlscertificate
        case createrelationaldatabase
        case createrelationaldatabasefromsnapshot
        case createrelationaldatabasesnapshot
        case deletealarm
        case deletebucket
        case deletebucketaccesskey
        case deletecertificate
        case deletecontactmethod
        case deletecontainerimage
        case deletecontainerservice
        case deletedisk
        case deletedisksnapshot
        case deletedistribution
        case deletedomain
        case deletedomainentry
        case deleteinstance
        case deleteinstancesnapshot
        case deleteknownhostkeys
        case deleteloadbalancer
        case deleteloadbalancertlscertificate
        case deleterelationaldatabase
        case deleterelationaldatabasesnapshot
        case detachcertificatefromdistribution
        case detachdisk
        case detachinstancesfromloadbalancer
        case detachstaticip
        case disableaddon
        case enableaddon
        case getalarms
        case getcontactmethods
        case openinstancepublicports
        case putalarm
        case putinstancepublicports
        case rebootinstance
        case rebootrelationaldatabase
        case registercontainerimage
        case releasestaticip
        case resetdistributioncache
        case sendcontactmethodverification
        case setipaddresstype
        case setresourceaccessforbucket
        case setupinstancehttps
        case startguisession
        case startinstance
        case startrelationaldatabase
        case stopguisession
        case stopinstance
        case stoprelationaldatabase
        case testalarm
        case updatebucket
        case updatebucketbundle
        case updatecontainerservice
        case updatedistribution
        case updatedistributionbundle
        case updatedomainentry
        case updateinstancemetadataoptions
        case updateloadbalancerattribute
        case updaterelationaldatabase
        case updaterelationaldatabaseparameters
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationType] {
            return [
                .allocatestaticip,
                .attachcertificatetodistribution,
                .attachdisk,
                .attachinstancestoloadbalancer,
                .attachloadbalancertlscertificate,
                .attachstaticip,
                .closeinstancepublicports,
                .createbucket,
                .createbucketaccesskey,
                .createcertificate,
                .createcontactmethod,
                .createcontainerservice,
                .createcontainerservicedeployment,
                .createcontainerserviceregistrylogin,
                .createdisk,
                .creatediskfromsnapshot,
                .createdisksnapshot,
                .createdistribution,
                .createdomain,
                .createinstance,
                .createinstancesnapshot,
                .createinstancesfromsnapshot,
                .createloadbalancer,
                .createloadbalancertlscertificate,
                .createrelationaldatabase,
                .createrelationaldatabasefromsnapshot,
                .createrelationaldatabasesnapshot,
                .deletealarm,
                .deletebucket,
                .deletebucketaccesskey,
                .deletecertificate,
                .deletecontactmethod,
                .deletecontainerimage,
                .deletecontainerservice,
                .deletedisk,
                .deletedisksnapshot,
                .deletedistribution,
                .deletedomain,
                .deletedomainentry,
                .deleteinstance,
                .deleteinstancesnapshot,
                .deleteknownhostkeys,
                .deleteloadbalancer,
                .deleteloadbalancertlscertificate,
                .deleterelationaldatabase,
                .deleterelationaldatabasesnapshot,
                .detachcertificatefromdistribution,
                .detachdisk,
                .detachinstancesfromloadbalancer,
                .detachstaticip,
                .disableaddon,
                .enableaddon,
                .getalarms,
                .getcontactmethods,
                .openinstancepublicports,
                .putalarm,
                .putinstancepublicports,
                .rebootinstance,
                .rebootrelationaldatabase,
                .registercontainerimage,
                .releasestaticip,
                .resetdistributioncache,
                .sendcontactmethodverification,
                .setipaddresstype,
                .setresourceaccessforbucket,
                .setupinstancehttps,
                .startguisession,
                .startinstance,
                .startrelationaldatabase,
                .stopguisession,
                .stopinstance,
                .stoprelationaldatabase,
                .testalarm,
                .updatebucket,
                .updatebucketbundle,
                .updatecontainerservice,
                .updatedistribution,
                .updatedistributionbundle,
                .updatedomainentry,
                .updateinstancemetadataoptions,
                .updateloadbalancerattribute,
                .updaterelationaldatabase,
                .updaterelationaldatabaseparameters
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allocatestaticip: return "AllocateStaticIp"
            case .attachcertificatetodistribution: return "AttachCertificateToDistribution"
            case .attachdisk: return "AttachDisk"
            case .attachinstancestoloadbalancer: return "AttachInstancesToLoadBalancer"
            case .attachloadbalancertlscertificate: return "AttachLoadBalancerTlsCertificate"
            case .attachstaticip: return "AttachStaticIp"
            case .closeinstancepublicports: return "CloseInstancePublicPorts"
            case .createbucket: return "CreateBucket"
            case .createbucketaccesskey: return "CreateBucketAccessKey"
            case .createcertificate: return "CreateCertificate"
            case .createcontactmethod: return "CreateContactMethod"
            case .createcontainerservice: return "CreateContainerService"
            case .createcontainerservicedeployment: return "CreateContainerServiceDeployment"
            case .createcontainerserviceregistrylogin: return "CreateContainerServiceRegistryLogin"
            case .createdisk: return "CreateDisk"
            case .creatediskfromsnapshot: return "CreateDiskFromSnapshot"
            case .createdisksnapshot: return "CreateDiskSnapshot"
            case .createdistribution: return "CreateDistribution"
            case .createdomain: return "CreateDomain"
            case .createinstance: return "CreateInstance"
            case .createinstancesnapshot: return "CreateInstanceSnapshot"
            case .createinstancesfromsnapshot: return "CreateInstancesFromSnapshot"
            case .createloadbalancer: return "CreateLoadBalancer"
            case .createloadbalancertlscertificate: return "CreateLoadBalancerTlsCertificate"
            case .createrelationaldatabase: return "CreateRelationalDatabase"
            case .createrelationaldatabasefromsnapshot: return "CreateRelationalDatabaseFromSnapshot"
            case .createrelationaldatabasesnapshot: return "CreateRelationalDatabaseSnapshot"
            case .deletealarm: return "DeleteAlarm"
            case .deletebucket: return "DeleteBucket"
            case .deletebucketaccesskey: return "DeleteBucketAccessKey"
            case .deletecertificate: return "DeleteCertificate"
            case .deletecontactmethod: return "DeleteContactMethod"
            case .deletecontainerimage: return "DeleteContainerImage"
            case .deletecontainerservice: return "DeleteContainerService"
            case .deletedisk: return "DeleteDisk"
            case .deletedisksnapshot: return "DeleteDiskSnapshot"
            case .deletedistribution: return "DeleteDistribution"
            case .deletedomain: return "DeleteDomain"
            case .deletedomainentry: return "DeleteDomainEntry"
            case .deleteinstance: return "DeleteInstance"
            case .deleteinstancesnapshot: return "DeleteInstanceSnapshot"
            case .deleteknownhostkeys: return "DeleteKnownHostKeys"
            case .deleteloadbalancer: return "DeleteLoadBalancer"
            case .deleteloadbalancertlscertificate: return "DeleteLoadBalancerTlsCertificate"
            case .deleterelationaldatabase: return "DeleteRelationalDatabase"
            case .deleterelationaldatabasesnapshot: return "DeleteRelationalDatabaseSnapshot"
            case .detachcertificatefromdistribution: return "DetachCertificateFromDistribution"
            case .detachdisk: return "DetachDisk"
            case .detachinstancesfromloadbalancer: return "DetachInstancesFromLoadBalancer"
            case .detachstaticip: return "DetachStaticIp"
            case .disableaddon: return "DisableAddOn"
            case .enableaddon: return "EnableAddOn"
            case .getalarms: return "GetAlarms"
            case .getcontactmethods: return "GetContactMethods"
            case .openinstancepublicports: return "OpenInstancePublicPorts"
            case .putalarm: return "PutAlarm"
            case .putinstancepublicports: return "PutInstancePublicPorts"
            case .rebootinstance: return "RebootInstance"
            case .rebootrelationaldatabase: return "RebootRelationalDatabase"
            case .registercontainerimage: return "RegisterContainerImage"
            case .releasestaticip: return "ReleaseStaticIp"
            case .resetdistributioncache: return "ResetDistributionCache"
            case .sendcontactmethodverification: return "SendContactMethodVerification"
            case .setipaddresstype: return "SetIpAddressType"
            case .setresourceaccessforbucket: return "SetResourceAccessForBucket"
            case .setupinstancehttps: return "SetupInstanceHttps"
            case .startguisession: return "StartGUISession"
            case .startinstance: return "StartInstance"
            case .startrelationaldatabase: return "StartRelationalDatabase"
            case .stopguisession: return "StopGUISession"
            case .stopinstance: return "StopInstance"
            case .stoprelationaldatabase: return "StopRelationalDatabase"
            case .testalarm: return "TestAlarm"
            case .updatebucket: return "UpdateBucket"
            case .updatebucketbundle: return "UpdateBucketBundle"
            case .updatecontainerservice: return "UpdateContainerService"
            case .updatedistribution: return "UpdateDistribution"
            case .updatedistributionbundle: return "UpdateDistributionBundle"
            case .updatedomainentry: return "UpdateDomainEntry"
            case .updateinstancemetadataoptions: return "UpdateInstanceMetadataOptions"
            case .updateloadbalancerattribute: return "UpdateLoadBalancerAttribute"
            case .updaterelationaldatabase: return "UpdateRelationalDatabase"
            case .updaterelationaldatabaseparameters: return "UpdateRelationalDatabaseParameters"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum OperationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case notstarted
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationStatus] {
            return [
                .completed,
                .failed,
                .notstarted,
                .started,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .notstarted: return "NotStarted"
            case .started: return "Started"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the API operation.
    public struct Operation: Swift.Sendable {
        /// The timestamp when the operation was initialized (1479816991.349).
        public var createdAt: Foundation.Date?
        /// The error code.
        public var errorCode: Swift.String?
        /// The error details.
        public var errorDetails: Swift.String?
        /// The ID of the operation.
        public var id: Swift.String?
        /// A Boolean value indicating whether the operation is terminal.
        public var isTerminal: Swift.Bool?
        /// The Amazon Web Services Region and Availability Zone.
        public var location: LightsailClientTypes.ResourceLocation?
        /// Details about the operation (Debian-1GB-Ohio-1).
        public var operationDetails: Swift.String?
        /// The type of operation.
        public var operationType: LightsailClientTypes.OperationType?
        /// The resource name.
        public var resourceName: Swift.String?
        /// The resource type.
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The status of the operation.
        public var status: LightsailClientTypes.OperationStatus?
        /// The timestamp when the status was changed (1479816991.349).
        public var statusChangedAt: Foundation.Date?

        public init(
            createdAt: Foundation.Date? = nil,
            errorCode: Swift.String? = nil,
            errorDetails: Swift.String? = nil,
            id: Swift.String? = nil,
            isTerminal: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            operationDetails: Swift.String? = nil,
            operationType: LightsailClientTypes.OperationType? = nil,
            resourceName: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            status: LightsailClientTypes.OperationStatus? = nil,
            statusChangedAt: Foundation.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.errorCode = errorCode
            self.errorDetails = errorDetails
            self.id = id
            self.isTerminal = isTerminal
            self.location = location
            self.operationDetails = operationDetails
            self.operationType = operationType
            self.resourceName = resourceName
            self.resourceType = resourceType
            self.status = status
            self.statusChangedAt = statusChangedAt
        }
    }
}

public struct AllocateStaticIpOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

extension LightsailClientTypes {

    public enum AppCategory: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lfr
        case sdkUnknown(Swift.String)

        public static var allCases: [AppCategory] {
            return [
                .lfr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lfr: return "LfR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct AttachCertificateToDistributionInput: Swift.Sendable {
    /// The name of the certificate to attach to a distribution. Only certificates with a status of ISSUED can be attached to a distribution. Use the GetCertificates action to get a list of certificate names that you can specify. This is the name of the certificate resource type and is used only to reference the certificate in other API actions. It can be different than the domain name of the certificate. For example, your certificate name might be WordPress-Blog-Certificate and the domain name of the certificate might be example.com.
    /// This member is required.
    public var certificateName: Swift.String?
    /// The name of the distribution that the certificate will be attached to. Use the GetDistributions action to get a list of distribution names that you can specify.
    /// This member is required.
    public var distributionName: Swift.String?

    public init(
        certificateName: Swift.String? = nil,
        distributionName: Swift.String? = nil
    )
    {
        self.certificateName = certificateName
        self.distributionName = distributionName
    }
}

public struct AttachCertificateToDistributionOutput: Swift.Sendable {
    /// An object that describes the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct AttachDiskInput: Swift.Sendable {
    /// A Boolean value used to determine the automatic mounting of a storage volume to a virtual computer. The default value is False. This value only applies to Lightsail for Research resources.
    public var autoMounting: Swift.Bool?
    /// The unique Lightsail disk name (my-disk).
    /// This member is required.
    public var diskName: Swift.String?
    /// The disk path to expose to the instance (/dev/xvdf).
    /// This member is required.
    public var diskPath: Swift.String?
    /// The name of the Lightsail instance where you want to utilize the storage disk.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        autoMounting: Swift.Bool? = nil,
        diskName: Swift.String? = nil,
        diskPath: Swift.String? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.autoMounting = autoMounting
        self.diskName = diskName
        self.diskPath = diskPath
        self.instanceName = instanceName
    }
}

public struct AttachDiskOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

extension LightsailClientTypes {

    /// Describes a block storage disk that is attached to an instance, and is included in an automatic snapshot.
    public struct AttachedDisk: Swift.Sendable {
        /// The path of the disk (/dev/xvdf).
        public var path: Swift.String?
        /// The size of the disk in GB.
        public var sizeInGb: Swift.Int?

        public init(
            path: Swift.String? = nil,
            sizeInGb: Swift.Int? = nil
        )
        {
            self.path = path
            self.sizeInGb = sizeInGb
        }
    }
}

extension LightsailClientTypes {

    /// Describes a block storage disk mapping.
    public struct DiskMap: Swift.Sendable {
        /// The new disk name (my-new-disk).
        public var newDiskName: Swift.String?
        /// The original disk path exposed to the instance (for example, /dev/sdh).
        public var originalDiskPath: Swift.String?

        public init(
            newDiskName: Swift.String? = nil,
            originalDiskPath: Swift.String? = nil
        )
        {
            self.newDiskName = newDiskName
            self.originalDiskPath = originalDiskPath
        }
    }
}

public struct AttachInstancesToLoadBalancerInput: Swift.Sendable {
    /// An array of strings representing the instance name(s) you want to attach to your load balancer. An instance must be running before you can attach it to your load balancer. There are no additional limits on the number of instances you can attach to your load balancer, aside from the limit of Lightsail instances you can create in your account (20).
    /// This member is required.
    public var instanceNames: [Swift.String]?
    /// The name of the load balancer.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init(
        instanceNames: [Swift.String]? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.instanceNames = instanceNames
        self.loadBalancerName = loadBalancerName
    }
}

public struct AttachInstancesToLoadBalancerOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct AttachLoadBalancerTlsCertificateInput: Swift.Sendable {
    /// The name of your SSL/TLS certificate.
    /// This member is required.
    public var certificateName: Swift.String?
    /// The name of the load balancer to which you want to associate the SSL/TLS certificate.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init(
        certificateName: Swift.String? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.certificateName = certificateName
        self.loadBalancerName = loadBalancerName
    }
}

public struct AttachLoadBalancerTlsCertificateOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request. These SSL/TLS certificates are only usable by Lightsail load balancers. You can't get the certificate and use it for another purpose.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct AttachStaticIpInput: Swift.Sendable {
    /// The instance name to which you want to attach the static IP address.
    /// This member is required.
    public var instanceName: Swift.String?
    /// The name of the static IP.
    /// This member is required.
    public var staticIpName: Swift.String?

    public init(
        instanceName: Swift.String? = nil,
        staticIpName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
        self.staticIpName = staticIpName
    }
}

public struct AttachStaticIpOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

extension LightsailClientTypes {

    public enum AutoMountStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case mounted
        case notmounted
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMountStatus] {
            return [
                .failed,
                .mounted,
                .notmounted,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .mounted: return "Mounted"
            case .notmounted: return "NotMounted"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum AutoSnapshotStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case notFound
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoSnapshotStatus] {
            return [
                .failed,
                .inProgress,
                .notFound,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .notFound: return "NotFound"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes an automatic snapshot.
    public struct AutoSnapshotDetails: Swift.Sendable {
        /// The timestamp when the automatic snapshot was created.
        public var createdAt: Foundation.Date?
        /// The date of the automatic snapshot in YYYY-MM-DD format.
        public var date: Swift.String?
        /// An array of objects that describe the block storage disks attached to the instance when the automatic snapshot was created.
        public var fromAttachedDisks: [LightsailClientTypes.AttachedDisk]?
        /// The status of the automatic snapshot.
        public var status: LightsailClientTypes.AutoSnapshotStatus?

        public init(
            createdAt: Foundation.Date? = nil,
            date: Swift.String? = nil,
            fromAttachedDisks: [LightsailClientTypes.AttachedDisk]? = nil,
            status: LightsailClientTypes.AutoSnapshotStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.date = date
            self.fromAttachedDisks = fromAttachedDisks
            self.status = status
        }
    }
}

extension LightsailClientTypes {

    /// Describes an Availability Zone. This is returned only as part of a GetRegions request.
    public struct AvailabilityZone: Swift.Sendable {
        /// The state of the Availability Zone.
        public var state: Swift.String?
        /// The name of the Availability Zone. The format is us-east-2a (case-sensitive).
        public var zoneName: Swift.String?

        public init(
            state: Swift.String? = nil,
            zoneName: Swift.String? = nil
        )
        {
            self.state = state
            self.zoneName = zoneName
        }
    }
}

extension LightsailClientTypes {

    public enum BehaviorEnum: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cachesetting
        case dontcachesetting
        case sdkUnknown(Swift.String)

        public static var allCases: [BehaviorEnum] {
            return [
                .cachesetting,
                .dontcachesetting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cachesetting: return "cache"
            case .dontcachesetting: return "dont-cache"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum InstancePlatform: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case linuxunix
        case windows
        case sdkUnknown(Swift.String)

        public static var allCases: [InstancePlatform] {
            return [
                .linuxunix,
                .windows
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .linuxunix: return "LINUX_UNIX"
            case .windows: return "WINDOWS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum BlueprintType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case app
        case os
        case sdkUnknown(Swift.String)

        public static var allCases: [BlueprintType] {
            return [
                .app,
                .os
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .app: return "app"
            case .os: return "os"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes a blueprint (a virtual private server image).
    public struct Blueprint: Swift.Sendable {
        /// Virtual computer blueprints that are supported by Lightsail for Research. This parameter only applies to Lightsail for Research resources.
        public var appCategory: LightsailClientTypes.AppCategory?
        /// The ID for the virtual private server image (app_wordpress_x_x or app_lamp_x_x).
        public var blueprintId: Swift.String?
        /// The description of the blueprint.
        public var description: Swift.String?
        /// The group name of the blueprint (amazon-linux).
        public var group: Swift.String?
        /// A Boolean value indicating whether the blueprint is active. Inactive blueprints are listed to support customers with existing instances but are not necessarily available for launch of new instances. Blueprints are marked inactive when they become outdated due to operating system updates or new application releases.
        public var isActive: Swift.Bool?
        /// The end-user license agreement URL for the image or blueprint.
        public var licenseUrl: Swift.String?
        /// The minimum bundle power required to run this blueprint. For example, you need a bundle with a power value of 500 or more to create an instance that uses a blueprint with a minimum power value of 500. 0 indicates that the blueprint runs on all instance sizes.
        public var minPower: Swift.Int?
        /// The friendly name of the blueprint (Amazon Linux).
        public var name: Swift.String?
        /// The operating system platform (either Linux/Unix-based or Windows Server-based) of the blueprint.
        public var platform: LightsailClientTypes.InstancePlatform?
        /// The product URL to learn more about the image or blueprint.
        public var productUrl: Swift.String?
        /// The type of the blueprint (os or app).
        public var type: LightsailClientTypes.BlueprintType?
        /// The version number of the operating system, application, or stack ( 2016.03.0).
        public var version: Swift.String?
        /// The version code.
        public var versionCode: Swift.String?

        public init(
            appCategory: LightsailClientTypes.AppCategory? = nil,
            blueprintId: Swift.String? = nil,
            description: Swift.String? = nil,
            group: Swift.String? = nil,
            isActive: Swift.Bool? = nil,
            licenseUrl: Swift.String? = nil,
            minPower: Swift.Int? = nil,
            name: Swift.String? = nil,
            platform: LightsailClientTypes.InstancePlatform? = nil,
            productUrl: Swift.String? = nil,
            type: LightsailClientTypes.BlueprintType? = nil,
            version: Swift.String? = nil,
            versionCode: Swift.String? = nil
        )
        {
            self.appCategory = appCategory
            self.blueprintId = blueprintId
            self.description = description
            self.group = group
            self.isActive = isActive
            self.licenseUrl = licenseUrl
            self.minPower = minPower
            self.name = name
            self.platform = platform
            self.productUrl = productUrl
            self.type = type
            self.version = version
            self.versionCode = versionCode
        }
    }
}

extension LightsailClientTypes {

    /// Describes the access log configuration for a bucket in the Amazon Lightsail object storage service. For more information about bucket access logs, see [Logging bucket requests using access logging in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-bucket-access-logs) in the Amazon Lightsail Developer Guide.
    public struct BucketAccessLogConfig: Swift.Sendable {
        /// The name of the bucket where the access logs are saved. The destination can be a Lightsail bucket in the same account, and in the same Amazon Web Services Region as the source bucket. This parameter is required when enabling the access log for a bucket, and should be omitted when disabling the access log.
        public var destination: Swift.String?
        /// A Boolean value that indicates whether bucket access logging is enabled for the bucket.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// The optional object prefix for the bucket access log. The prefix is an optional addition to the object key that organizes your access log files in the destination bucket. For example, if you specify a logs/ prefix, then each log object will begin with the logs/ prefix in its key (for example, logs/2021-11-01-21-32-16-E568B2907131C0C0). This parameter can be optionally specified when enabling the access log for a bucket, and should be omitted when disabling the access log.
        public var `prefix`: Swift.String?

        public init(
            destination: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.destination = destination
            self.enabled = enabled
            self.`prefix` = `prefix`
        }
    }
}

extension LightsailClientTypes {

    /// Describes the state of an Amazon Lightsail bucket.
    public struct BucketState: Swift.Sendable {
        /// The state code of the bucket. The following codes are possible:
        ///
        /// * OK - The bucket is in a running state.
        ///
        /// * Unknown - Creation of the bucket might have timed-out. You might want to delete the bucket and create a new one.
        public var code: Swift.String?
        /// A message that describes the state of the bucket.
        public var message: Swift.String?

        public init(
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }
}

extension LightsailClientTypes {

    /// Describes a tag key and optional value assigned to an Amazon Lightsail resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
    public struct Tag: Swift.Sendable {
        /// The key of the tag. Constraints: Tag keys accept a maximum of 128 letters, numbers, spaces in UTF-8, or the following characters: + - = . _ : / @
        public var key: Swift.String?
        /// The value of the tag. Constraints: Tag values accept a maximum of 256 letters, numbers, spaces in UTF-8, or the following characters: + - = . _ : / @
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

extension LightsailClientTypes {

    /// Describes an Amazon Lightsail bucket.
    public struct Bucket: Swift.Sendable {
        /// Indicates whether the bundle that is currently applied to a bucket can be changed to another bundle. You can update a bucket's bundle only one time within a monthly Amazon Web Services billing cycle. Use the [UpdateBucketBundle](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html) action to change a bucket's bundle.
        public var ableToUpdateBundle: Swift.Bool?
        /// An object that describes the access log configuration for the bucket.
        public var accessLogConfig: LightsailClientTypes.BucketAccessLogConfig?
        /// An object that describes the access rules of the bucket.
        public var accessRules: LightsailClientTypes.AccessRules?
        /// The Amazon Resource Name (ARN) of the bucket.
        public var arn: Swift.String?
        /// The ID of the bundle currently applied to the bucket. A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a bucket. Use the [UpdateBucketBundle](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html) action to change the bundle of a bucket.
        public var bundleId: Swift.String?
        /// The timestamp when the distribution was created.
        public var createdAt: Foundation.Date?
        /// An object that describes the location of the bucket, such as the Amazon Web Services Region and Availability Zone.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the bucket.
        public var name: Swift.String?
        /// Indicates whether object versioning is enabled for the bucket. The following options can be configured:
        ///
        /// * Enabled - Object versioning is enabled.
        ///
        /// * Suspended - Object versioning was previously enabled but is currently suspended. Existing object versions are retained.
        ///
        /// * NeverEnabled - Object versioning has never been enabled.
        public var objectVersioning: Swift.String?
        /// An array of strings that specify the Amazon Web Services account IDs that have read-only access to the bucket.
        public var readonlyAccessAccounts: [Swift.String]?
        /// The Lightsail resource type of the bucket.
        public var resourceType: Swift.String?
        /// An array of objects that describe Lightsail instances that have access to the bucket. Use the [SetResourceAccessForBucket](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html) action to update the instances that have access to a bucket.
        public var resourcesReceivingAccess: [LightsailClientTypes.ResourceReceivingAccess]?
        /// An object that describes the state of the bucket.
        public var state: LightsailClientTypes.BucketState?
        /// The support code for a bucket. Include this code in your email to support when you have questions about a Lightsail bucket. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the bucket. For more information, see [Tags in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags) in the Amazon Lightsail Developer Guide.
        public var tags: [LightsailClientTypes.Tag]?
        /// The URL of the bucket.
        public var url: Swift.String?

        public init(
            ableToUpdateBundle: Swift.Bool? = nil,
            accessLogConfig: LightsailClientTypes.BucketAccessLogConfig? = nil,
            accessRules: LightsailClientTypes.AccessRules? = nil,
            arn: Swift.String? = nil,
            bundleId: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            objectVersioning: Swift.String? = nil,
            readonlyAccessAccounts: [Swift.String]? = nil,
            resourceType: Swift.String? = nil,
            resourcesReceivingAccess: [LightsailClientTypes.ResourceReceivingAccess]? = nil,
            state: LightsailClientTypes.BucketState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            url: Swift.String? = nil
        )
        {
            self.ableToUpdateBundle = ableToUpdateBundle
            self.accessLogConfig = accessLogConfig
            self.accessRules = accessRules
            self.arn = arn
            self.bundleId = bundleId
            self.createdAt = createdAt
            self.location = location
            self.name = name
            self.objectVersioning = objectVersioning
            self.readonlyAccessAccounts = readonlyAccessAccounts
            self.resourceType = resourceType
            self.resourcesReceivingAccess = resourcesReceivingAccess
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
            self.url = url
        }
    }
}

extension LightsailClientTypes {

    /// Describes the specifications of a bundle that can be applied to an Amazon Lightsail bucket. A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a bucket.
    public struct BucketBundle: Swift.Sendable {
        /// The ID of the bundle.
        public var bundleId: Swift.String?
        /// Indicates whether the bundle is active. Use for a new or existing bucket.
        public var isActive: Swift.Bool?
        /// The name of the bundle.
        public var name: Swift.String?
        /// The monthly price of the bundle, in US dollars.
        public var price: Swift.Float?
        /// The storage size of the bundle, in GB.
        public var storagePerMonthInGb: Swift.Int?
        /// The monthly network transfer quota of the bundle.
        public var transferPerMonthInGb: Swift.Int?

        public init(
            bundleId: Swift.String? = nil,
            isActive: Swift.Bool? = nil,
            name: Swift.String? = nil,
            price: Swift.Float? = nil,
            storagePerMonthInGb: Swift.Int? = nil,
            transferPerMonthInGb: Swift.Int? = nil
        )
        {
            self.bundleId = bundleId
            self.isActive = isActive
            self.name = name
            self.price = price
            self.storagePerMonthInGb = storagePerMonthInGb
            self.transferPerMonthInGb = transferPerMonthInGb
        }
    }
}

extension LightsailClientTypes {

    public enum BucketMetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bucketsizebytes
        case numberofobjects
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketMetricName] {
            return [
                .bucketsizebytes,
                .numberofobjects
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bucketsizebytes: return "BucketSizeBytes"
            case .numberofobjects: return "NumberOfObjects"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes a bundle, which is a set of specs describing your virtual private server (or instance).
    public struct Bundle: Swift.Sendable {
        /// The bundle ID (micro_x_x).
        public var bundleId: Swift.String?
        /// The number of vCPUs included in the bundle (2).
        public var cpuCount: Swift.Int?
        /// The size of the SSD (30).
        public var diskSizeInGb: Swift.Int?
        /// The instance type (micro).
        public var instanceType: Swift.String?
        /// A Boolean value indicating whether the bundle is active.
        public var isActive: Swift.Bool?
        /// A friendly name for the bundle (Micro).
        public var name: Swift.String?
        /// A numeric value that represents the power of the bundle (500). You can use the bundle's power value in conjunction with a blueprint's minimum power value to determine whether the blueprint will run on the bundle. For example, you need a bundle with a power value of 500 or more to create an instance that uses a blueprint with a minimum power value of 500.
        public var power: Swift.Int?
        /// The price in US dollars (5.0) of the bundle.
        public var price: Swift.Float?
        /// An integer that indicates the public ipv4 address count included in the bundle, the value is either 0 or 1.
        public var publicIpv4AddressCount: Swift.Int?
        /// The amount of RAM in GB (2.0).
        public var ramSizeInGb: Swift.Float?
        /// Virtual computer blueprints that are supported by a Lightsail for Research bundle. This parameter only applies to Lightsail for Research resources.
        public var supportedAppCategories: [LightsailClientTypes.AppCategory]?
        /// The operating system platform (Linux/Unix-based or Windows Server-based) that the bundle supports. You can only launch a WINDOWS bundle on a blueprint that supports the WINDOWS platform. LINUX_UNIX blueprints require a LINUX_UNIX bundle.
        public var supportedPlatforms: [LightsailClientTypes.InstancePlatform]?
        /// The data transfer rate per month in GB (2000).
        public var transferPerMonthInGb: Swift.Int?

        public init(
            bundleId: Swift.String? = nil,
            cpuCount: Swift.Int? = nil,
            diskSizeInGb: Swift.Int? = nil,
            instanceType: Swift.String? = nil,
            isActive: Swift.Bool? = nil,
            name: Swift.String? = nil,
            power: Swift.Int? = nil,
            price: Swift.Float? = nil,
            publicIpv4AddressCount: Swift.Int? = nil,
            ramSizeInGb: Swift.Float? = nil,
            supportedAppCategories: [LightsailClientTypes.AppCategory]? = nil,
            supportedPlatforms: [LightsailClientTypes.InstancePlatform]? = nil,
            transferPerMonthInGb: Swift.Int? = nil
        )
        {
            self.bundleId = bundleId
            self.cpuCount = cpuCount
            self.diskSizeInGb = diskSizeInGb
            self.instanceType = instanceType
            self.isActive = isActive
            self.name = name
            self.power = power
            self.price = price
            self.publicIpv4AddressCount = publicIpv4AddressCount
            self.ramSizeInGb = ramSizeInGb
            self.supportedAppCategories = supportedAppCategories
            self.supportedPlatforms = supportedPlatforms
            self.transferPerMonthInGb = transferPerMonthInGb
        }
    }
}

extension LightsailClientTypes {

    /// Describes the default cache behavior of an Amazon Lightsail content delivery network (CDN) distribution.
    public struct CacheBehavior: Swift.Sendable {
        /// The cache behavior of the distribution. The following cache behaviors can be specified:
        ///
        /// * cache - This option is best for static sites. When specified, your distribution caches and serves your entire website as static content. This behavior is ideal for websites with static content that doesn't change depending on who views it, or for websites that don't use cookies, headers, or query strings to personalize content.
        ///
        /// * dont-cache - This option is best for sites that serve a mix of static and dynamic content. When specified, your distribution caches and serve only the content that is specified in the distribution's CacheBehaviorPerPath parameter. This behavior is ideal for websites or web applications that use cookies, headers, and query strings to personalize content for individual users.
        public var behavior: LightsailClientTypes.BehaviorEnum?

        public init(
            behavior: LightsailClientTypes.BehaviorEnum? = nil
        )
        {
            self.behavior = behavior
        }
    }
}

extension LightsailClientTypes {

    /// Describes the per-path cache behavior of an Amazon Lightsail content delivery network (CDN) distribution. A per-path cache behavior is used to override, or add an exception to, the default cache behavior of a distribution. For example, if the cacheBehavior is set to cache, then a per-path cache behavior can be used to specify a directory, file, or file type that your distribution will cache. Alternately, if the distribution's cacheBehavior is dont-cache, then a per-path cache behavior can be used to specify a directory, file, or file type that your distribution will not cache.
    public struct CacheBehaviorPerPath: Swift.Sendable {
        /// The cache behavior for the specified path. You can specify one of the following per-path cache behaviors:
        ///
        /// * cache - This behavior caches the specified path.
        ///
        /// * dont-cache - This behavior doesn't cache the specified path.
        public var behavior: LightsailClientTypes.BehaviorEnum?
        /// The path to a directory or file to cached, or not cache. Use an asterisk symbol to specify wildcard directories (path/to/assets/*), and file types (*.html, *jpg, *js). Directories and file paths are case-sensitive. Examples:
        ///
        /// * Specify the following to cache all files in the document root of an Apache web server running on a Lightsail instance. var/www/html/
        ///
        /// * Specify the following file to cache only the index page in the document root of an Apache web server. var/www/html/index.html
        ///
        /// * Specify the following to cache only the .html files in the document root of an Apache web server. var/www/html/*.html
        ///
        /// * Specify the following to cache only the .jpg, .png, and .gif files in the images sub-directory of the document root of an Apache web server. var/www/html/images/*.jpgvar/www/html/images/*.pngvar/www/html/images/*.gif Specify the following to cache all files in the images sub-directory of the document root of an Apache web server. var/www/html/images/
        public var path: Swift.String?

        public init(
            behavior: LightsailClientTypes.BehaviorEnum? = nil,
            path: Swift.String? = nil
        )
        {
            self.behavior = behavior
            self.path = path
        }
    }
}

extension LightsailClientTypes {

    public enum ForwardValues: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case allowlist
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ForwardValues] {
            return [
                .all,
                .allowlist,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "all"
            case .allowlist: return "allow-list"
            case .none: return "none"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes whether an Amazon Lightsail content delivery network (CDN) distribution forwards cookies to the origin and, if so, which ones. For the cookies that you specify, your distribution caches separate versions of the specified content based on the cookie values in viewer requests.
    public struct CookieObject: Swift.Sendable {
        /// The specific cookies to forward to your distribution's origin.
        public var cookiesAllowList: [Swift.String]?
        /// Specifies which cookies to forward to the distribution's origin for a cache behavior: all, none, or allow-list to forward only the cookies specified in the cookiesAllowList parameter.
        public var option: LightsailClientTypes.ForwardValues?

        public init(
            cookiesAllowList: [Swift.String]? = nil,
            option: LightsailClientTypes.ForwardValues? = nil
        )
        {
            self.cookiesAllowList = cookiesAllowList
            self.option = option
        }
    }
}

extension LightsailClientTypes {

    public enum HeaderEnum: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accept
        case acceptcharset
        case acceptdatetime
        case acceptencoding
        case acceptlanguage
        case authorization
        case cloudfrontforwardedproto
        case cloudfrontisdesktopviewer
        case cloudfrontismobileviewer
        case cloudfrontissmarttvviewer
        case cloudfrontistabletviewer
        case cloudfrontviewercountry
        case host
        case origin
        case referer
        case sdkUnknown(Swift.String)

        public static var allCases: [HeaderEnum] {
            return [
                .accept,
                .acceptcharset,
                .acceptdatetime,
                .acceptencoding,
                .acceptlanguage,
                .authorization,
                .cloudfrontforwardedproto,
                .cloudfrontisdesktopviewer,
                .cloudfrontismobileviewer,
                .cloudfrontissmarttvviewer,
                .cloudfrontistabletviewer,
                .cloudfrontviewercountry,
                .host,
                .origin,
                .referer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accept: return "Accept"
            case .acceptcharset: return "Accept-Charset"
            case .acceptdatetime: return "Accept-Datetime"
            case .acceptencoding: return "Accept-Encoding"
            case .acceptlanguage: return "Accept-Language"
            case .authorization: return "Authorization"
            case .cloudfrontforwardedproto: return "CloudFront-Forwarded-Proto"
            case .cloudfrontisdesktopviewer: return "CloudFront-Is-Desktop-Viewer"
            case .cloudfrontismobileviewer: return "CloudFront-Is-Mobile-Viewer"
            case .cloudfrontissmarttvviewer: return "CloudFront-Is-SmartTV-Viewer"
            case .cloudfrontistabletviewer: return "CloudFront-Is-Tablet-Viewer"
            case .cloudfrontviewercountry: return "CloudFront-Viewer-Country"
            case .host: return "Host"
            case .origin: return "Origin"
            case .referer: return "Referer"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the request headers that a Lightsail distribution bases caching on. For the headers that you specify, your distribution caches separate versions of the specified content based on the header values in viewer requests. For example, suppose viewer requests for logo.jpg contain a custom product header that has a value of either acme or apex, and you configure your distribution to cache your content based on values in the product header. Your distribution forwards the product header to the origin and caches the response from the origin once for each header value.
    public struct HeaderObject: Swift.Sendable {
        /// The specific headers to forward to your distribution's origin.
        public var headersAllowList: [LightsailClientTypes.HeaderEnum]?
        /// The headers that you want your distribution to forward to your origin and base caching on. You can configure your distribution to do one of the following:
        ///
        /// * all - Forward all headers to your origin.
        ///
        /// * none - Forward only the default headers.
        ///
        /// * allow-list - Forward only the headers you specify using the headersAllowList parameter.
        public var option: LightsailClientTypes.ForwardValues?

        public init(
            headersAllowList: [LightsailClientTypes.HeaderEnum]? = nil,
            option: LightsailClientTypes.ForwardValues? = nil
        )
        {
            self.headersAllowList = headersAllowList
            self.option = option
        }
    }
}

extension LightsailClientTypes {

    /// Describes the query string parameters that an Amazon Lightsail content delivery network (CDN) distribution to bases caching on. For the query strings that you specify, your distribution caches separate versions of the specified content based on the query string values in viewer requests.
    public struct QueryStringObject: Swift.Sendable {
        /// Indicates whether the distribution forwards and caches based on query strings.
        public var option: Swift.Bool?
        /// The specific query strings that the distribution forwards to the origin. Your distribution will cache content based on the specified query strings. If the option parameter is true, then your distribution forwards all query strings, regardless of what you specify using the queryStringsAllowList parameter.
        public var queryStringsAllowList: [Swift.String]?

        public init(
            option: Swift.Bool? = nil,
            queryStringsAllowList: [Swift.String]? = nil
        )
        {
            self.option = option
            self.queryStringsAllowList = queryStringsAllowList
        }
    }
}

extension LightsailClientTypes {

    /// Describes the cache settings of an Amazon Lightsail content delivery network (CDN) distribution. These settings apply only to your distribution's cacheBehaviors (including the defaultCacheBehavior) that have a behavior of cache.
    public struct CacheSettings: Swift.Sendable {
        /// The HTTP methods that are processed and forwarded to the distribution's origin. You can specify the following options:
        ///
        /// * GET,HEAD - The distribution forwards the GET and HEAD methods.
        ///
        /// * GET,HEAD,OPTIONS - The distribution forwards the GET, HEAD, and OPTIONS methods.
        ///
        /// * GET,HEAD,OPTIONS,PUT,PATCH,POST,DELETE - The distribution forwards the GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE methods.
        ///
        ///
        /// If you specify the third option, you might need to restrict access to your distribution's origin so users can't perform operations that you don't want them to. For example, you might not want users to have permission to delete objects from your origin.
        public var allowedHTTPMethods: Swift.String?
        /// The HTTP method responses that are cached by your distribution. You can specify the following options:
        ///
        /// * GET,HEAD - The distribution caches responses to the GET and HEAD methods.
        ///
        /// * GET,HEAD,OPTIONS - The distribution caches responses to the GET, HEAD, and OPTIONS methods.
        public var cachedHTTPMethods: Swift.String?
        /// The default amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the content has been updated. The value specified applies only when the origin does not add HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects.
        public var defaultTTL: Swift.Int?
        /// An object that describes the cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded.
        public var forwardedCookies: LightsailClientTypes.CookieObject?
        /// An object that describes the headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded.
        public var forwardedHeaders: LightsailClientTypes.HeaderObject?
        /// An object that describes the query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded.
        public var forwardedQueryStrings: LightsailClientTypes.QueryStringObject?
        /// The maximum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated. The value specified applies only when the origin adds HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects.
        public var maximumTTL: Swift.Int?
        /// The minimum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated. A value of 0 must be specified for minimumTTL if the distribution is configured to forward all headers to the origin.
        public var minimumTTL: Swift.Int?

        public init(
            allowedHTTPMethods: Swift.String? = nil,
            cachedHTTPMethods: Swift.String? = nil,
            defaultTTL: Swift.Int? = nil,
            forwardedCookies: LightsailClientTypes.CookieObject? = nil,
            forwardedHeaders: LightsailClientTypes.HeaderObject? = nil,
            forwardedQueryStrings: LightsailClientTypes.QueryStringObject? = nil,
            maximumTTL: Swift.Int? = nil,
            minimumTTL: Swift.Int? = nil
        )
        {
            self.allowedHTTPMethods = allowedHTTPMethods
            self.cachedHTTPMethods = cachedHTTPMethods
            self.defaultTTL = defaultTTL
            self.forwardedCookies = forwardedCookies
            self.forwardedHeaders = forwardedHeaders
            self.forwardedQueryStrings = forwardedQueryStrings
            self.maximumTTL = maximumTTL
            self.minimumTTL = minimumTTL
        }
    }
}

extension LightsailClientTypes {

    public enum DnsRecordCreationStateCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [DnsRecordCreationStateCode] {
            return [
                .failed,
                .started,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .started: return "STARTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the creation state of the canonical name (CNAME) records that are automatically added by Amazon Lightsail to the DNS of a domain to validate domain ownership for an SSL/TLS certificate. When you create an SSL/TLS certificate for a Lightsail resource, you must add a set of CNAME records to the DNS of the domains for the certificate to validate that you own the domains. Lightsail can automatically add the CNAME records to the DNS of the domain if the DNS zone for the domain exists within your Lightsail account. If automatic record addition fails, or if you manage the DNS of your domain using a third-party service, then you must manually add the CNAME records to the DNS of your domain. For more information, see [Verify an SSL/TLS certificate in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/verify-tls-ssl-certificate-using-dns-cname-https) in the Amazon Lightsail Developer Guide.
    public struct DnsRecordCreationState: Swift.Sendable {
        /// The status code for the automated DNS record creation. Following are the possible values:
        ///
        /// * SUCCEEDED - The validation records were successfully added to the domain.
        ///
        /// * STARTED - The automatic DNS record creation has started.
        ///
        /// * FAILED - The validation records failed to be added to the domain.
        public var code: LightsailClientTypes.DnsRecordCreationStateCode?
        /// The message that describes the reason for the status code.
        public var message: Swift.String?

        public init(
            code: LightsailClientTypes.DnsRecordCreationStateCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }
}

extension LightsailClientTypes {

    /// Describes the domain name system (DNS) records to add to your domain's DNS to validate it for an Amazon Lightsail certificate.
    public struct ResourceRecord: Swift.Sendable {
        /// The name of the record.
        public var name: Swift.String?
        /// The DNS record type.
        public var type: Swift.String?
        /// The value for the DNS record.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            type: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
            self.value = value
        }
    }
}

extension LightsailClientTypes {

    public enum CertificateDomainValidationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pendingvalidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateDomainValidationStatus] {
            return [
                .failed,
                .pendingvalidation,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the domain name system (DNS) records that you must add to the DNS of your registered domain to validate ownership for an Amazon Lightsail SSL/TLS certificate.
    public struct DomainValidationRecord: Swift.Sendable {
        /// An object that describes the state of the canonical name (CNAME) records that are automatically added by Lightsail to the DNS of the domain to validate domain ownership.
        public var dnsRecordCreationState: LightsailClientTypes.DnsRecordCreationState?
        /// The domain name of the certificate validation record. For example, example.com or www.example.com.
        public var domainName: Swift.String?
        /// An object that describes the DNS records to add to your domain's DNS to validate it for the certificate.
        public var resourceRecord: LightsailClientTypes.ResourceRecord?
        /// The validation status of the record.
        public var validationStatus: LightsailClientTypes.CertificateDomainValidationStatus?

        public init(
            dnsRecordCreationState: LightsailClientTypes.DnsRecordCreationState? = nil,
            domainName: Swift.String? = nil,
            resourceRecord: LightsailClientTypes.ResourceRecord? = nil,
            validationStatus: LightsailClientTypes.CertificateDomainValidationStatus? = nil
        )
        {
            self.dnsRecordCreationState = dnsRecordCreationState
            self.domainName = domainName
            self.resourceRecord = resourceRecord
            self.validationStatus = validationStatus
        }
    }
}

extension LightsailClientTypes {

    public enum RenewalStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pendingautorenewal
        case pendingvalidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [RenewalStatus] {
            return [
                .failed,
                .pendingautorenewal,
                .pendingvalidation,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .pendingautorenewal: return "PendingAutoRenewal"
            case .pendingvalidation: return "PendingValidation"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the status of a SSL/TLS certificate renewal managed by Amazon Lightsail.
    public struct RenewalSummary: Swift.Sendable {
        /// An array of objects that describe the domain validation records of the certificate.
        public var domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]?
        /// The renewal status of the certificate. The following renewal status are possible:
        ///
        /// * PendingAutoRenewal - Lightsail is attempting to automatically validate the domain names of the certificate. No further action is required.
        ///
        /// * PendingValidation - Lightsail couldn't automatically validate one or more domain names of the certificate. You must take action to validate these domain names or the certificate won't be renewed. Check to make sure your certificate's domain validation records exist in your domain's DNS, and that your certificate remains in use.
        ///
        /// * Success - All domain names in the certificate are validated, and Lightsail renewed the certificate. No further action is required.
        ///
        /// * Failed - One or more domain names were not validated before the certificate expired, and Lightsail did not renew the certificate. You can request a new certificate using the CreateCertificate action.
        public var renewalStatus: LightsailClientTypes.RenewalStatus?
        /// The reason for the renewal status of the certificate.
        public var renewalStatusReason: Swift.String?
        /// The timestamp when the certificate was last updated.
        public var updatedAt: Foundation.Date?

        public init(
            domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]? = nil,
            renewalStatus: LightsailClientTypes.RenewalStatus? = nil,
            renewalStatusReason: Swift.String? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.domainValidationRecords = domainValidationRecords
            self.renewalStatus = renewalStatus
            self.renewalStatusReason = renewalStatusReason
            self.updatedAt = updatedAt
        }
    }
}

extension LightsailClientTypes {

    public enum CertificateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case expired
        case failed
        case inactive
        case issued
        case pendingvalidation
        case revoked
        case validationtimedout
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateStatus] {
            return [
                .expired,
                .failed,
                .inactive,
                .issued,
                .pendingvalidation,
                .revoked,
                .validationtimedout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .expired: return "EXPIRED"
            case .failed: return "FAILED"
            case .inactive: return "INACTIVE"
            case .issued: return "ISSUED"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .revoked: return "REVOKED"
            case .validationtimedout: return "VALIDATION_TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the full details of an Amazon Lightsail SSL/TLS certificate. To get a summary of a certificate, use the GetCertificates action and omit includeCertificateDetails from your request. The response will include only the certificate Amazon Resource Name (ARN), certificate name, domain name, and tags.
    public struct Certificate: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the certificate.
        public var arn: Swift.String?
        /// The timestamp when the certificate was created.
        public var createdAt: Foundation.Date?
        /// The domain name of the certificate.
        public var domainName: Swift.String?
        /// An array of objects that describe the domain validation records of the certificate.
        public var domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]?
        /// The renewal eligibility of the certificate.
        public var eligibleToRenew: Swift.String?
        /// The number of Lightsail resources that the certificate is attached to.
        public var inUseResourceCount: Swift.Int
        /// The timestamp when the certificate was issued.
        public var issuedAt: Foundation.Date?
        /// The certificate authority that issued the certificate.
        public var issuerCA: Swift.String?
        /// The algorithm used to generate the key pair (the public and private key) of the certificate.
        public var keyAlgorithm: Swift.String?
        /// The name of the certificate (my-certificate).
        public var name: Swift.String?
        /// The timestamp when the certificate expires.
        public var notAfter: Foundation.Date?
        /// The timestamp when the certificate is first valid.
        public var notBefore: Foundation.Date?
        /// An object that describes the status of the certificate renewal managed by Lightsail.
        public var renewalSummary: LightsailClientTypes.RenewalSummary?
        /// The validation failure reason, if any, of the certificate. The following failure reasons are possible:
        ///
        /// * NO_AVAILABLE_CONTACTS - This failure applies to email validation, which is not available for Lightsail certificates.
        ///
        /// * ADDITIONAL_VERIFICATION_REQUIRED - Lightsail requires additional information to process this certificate request. This can happen as a fraud-protection measure, such as when the domain ranks within the Alexa top 1000 websites. To provide the required information, use the [Amazon Web Services Support Center](https://console.aws.amazon.com/support/home) to contact Amazon Web Services Support. You cannot request a certificate for Amazon-owned domain names such as those ending in amazonaws.com, cloudfront.net, or elasticbeanstalk.com.
        ///
        /// * DOMAIN_NOT_ALLOWED - One or more of the domain names in the certificate request was reported as an unsafe domain by [VirusTotal](https://www.virustotal.com/gui/home/url). To correct the problem, search for your domain name on the [VirusTotal](https://www.virustotal.com/gui/home/url) website. If your domain is reported as suspicious, see [Google Help for Hacked Websites](https://developers.google.com/web/fundamentals/security/hacked) to learn what you can do. If you believe that the result is a false positive, notify the organization that is reporting the domain. VirusTotal is an aggregate of several antivirus and URL scanners and cannot remove your domain from a block list itself. After you correct the problem and the VirusTotal registry has been updated, request a new certificate. If you see this error and your domain is not included in the VirusTotal list, visit the [Amazon Web Services Support Center](https://console.aws.amazon.com/support/home) and create a case.
        ///
        /// * INVALID_PUBLIC_DOMAIN - One or more of the domain names in the certificate request is not valid. Typically, this is because a domain name in the request is not a valid top-level domain. Try to request a certificate again, correcting any spelling errors or typos that were in the failed request, and ensure that all domain names in the request are for valid top-level domains. For example, you cannot request a certificate for example.invalidpublicdomain because invalidpublicdomain is not a valid top-level domain.
        ///
        /// * OTHER - Typically, this failure occurs when there is a typographical error in one or more of the domain names in the certificate request. Try to request a certificate again, correcting any spelling errors or typos that were in the failed request.
        public var requestFailureReason: Swift.String?
        /// The reason the certificate was revoked. This value is present only when the certificate status is REVOKED.
        public var revocationReason: Swift.String?
        /// The timestamp when the certificate was revoked. This value is present only when the certificate status is REVOKED.
        public var revokedAt: Foundation.Date?
        /// The serial number of the certificate.
        public var serialNumber: Swift.String?
        /// The validation status of the certificate.
        public var status: LightsailClientTypes.CertificateStatus?
        /// An array of strings that specify the alternate domains (example2.com) and subdomains (blog.example.com) of the certificate.
        public var subjectAlternativeNames: [Swift.String]?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail certificate. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            domainName: Swift.String? = nil,
            domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]? = nil,
            eligibleToRenew: Swift.String? = nil,
            inUseResourceCount: Swift.Int = 0,
            issuedAt: Foundation.Date? = nil,
            issuerCA: Swift.String? = nil,
            keyAlgorithm: Swift.String? = nil,
            name: Swift.String? = nil,
            notAfter: Foundation.Date? = nil,
            notBefore: Foundation.Date? = nil,
            renewalSummary: LightsailClientTypes.RenewalSummary? = nil,
            requestFailureReason: Swift.String? = nil,
            revocationReason: Swift.String? = nil,
            revokedAt: Foundation.Date? = nil,
            serialNumber: Swift.String? = nil,
            status: LightsailClientTypes.CertificateStatus? = nil,
            subjectAlternativeNames: [Swift.String]? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.domainName = domainName
            self.domainValidationRecords = domainValidationRecords
            self.eligibleToRenew = eligibleToRenew
            self.inUseResourceCount = inUseResourceCount
            self.issuedAt = issuedAt
            self.issuerCA = issuerCA
            self.keyAlgorithm = keyAlgorithm
            self.name = name
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.renewalSummary = renewalSummary
            self.requestFailureReason = requestFailureReason
            self.revocationReason = revocationReason
            self.revokedAt = revokedAt
            self.serialNumber = serialNumber
            self.status = status
            self.subjectAlternativeNames = subjectAlternativeNames
            self.supportCode = supportCode
            self.tags = tags
        }
    }
}

extension LightsailClientTypes {

    public enum CertificateProvider: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case letsencrypt
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateProvider] {
            return [
                .letsencrypt
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .letsencrypt: return "LetsEncrypt"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes an Amazon Lightsail SSL/TLS certificate.
    public struct CertificateSummary: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the certificate.
        public var certificateArn: Swift.String?
        /// An object that describes a certificate in detail.
        public var certificateDetail: LightsailClientTypes.Certificate?
        /// The name of the certificate.
        public var certificateName: Swift.String?
        /// The domain name of the certificate.
        public var domainName: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init(
            certificateArn: Swift.String? = nil,
            certificateDetail: LightsailClientTypes.Certificate? = nil,
            certificateName: Swift.String? = nil,
            domainName: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificateDetail = certificateDetail
            self.certificateName = certificateName
            self.domainName = domainName
            self.tags = tags
        }
    }
}

extension LightsailClientTypes {

    public enum NetworkProtocol: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case icmp
        case icmpv6
        case tcp
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkProtocol] {
            return [
                .all,
                .icmp,
                .icmpv6,
                .tcp,
                .udp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "all"
            case .icmp: return "icmp"
            case .icmpv6: return "icmpv6"
            case .tcp: return "tcp"
            case .udp: return "udp"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes ports to open on an instance, the IP addresses allowed to connect to the instance through the ports, and the protocol.
    public struct PortInfo: Swift.Sendable {
        /// An alias that defines access for a preconfigured range of IP addresses. The only alias currently supported is lightsail-connect, which allows IP addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your instance.
        public var cidrListAliases: [Swift.String]?
        /// The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. The ipv6Cidrs parameter lists the IPv6 addresses that are allowed to connect to an instance. Examples:
        ///
        /// * To allow the IP address 192.0.2.44, specify 192.0.2.44 or 192.0.2.44/32.
        ///
        /// * To allow the IP addresses 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
        ///
        ///
        /// For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on Wikipedia.
        public var cidrs: [Swift.String]?
        /// The first port in a range of open ports on an instance. Allowed ports:
        ///
        /// * TCP and UDP - 0 to 65535
        ///
        /// * ICMP - The ICMP type for IPv4 addresses. For example, specify 8 as the fromPort (ICMP type), and -1 as the toPort (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on Wikipedia.
        ///
        /// * ICMPv6 - The ICMP type for IPv6 addresses. For example, specify 128 as the fromPort (ICMPv6 type), and 0 as toPort (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).
        public var fromPort: Swift.Int
        /// The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. Only devices with an IPv6 address can connect to an instance through IPv6; otherwise, IPv4 should be used. The cidrs parameter lists the IPv4 addresses that are allowed to connect to an instance. For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on Wikipedia.
        public var ipv6Cidrs: [Swift.String]?
        /// The IP protocol name. The name can be one of the following:
        ///
        /// * tcp - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.
        ///
        /// * all - All transport layer protocol types. For more general information, see [Transport layer](https://en.wikipedia.org/wiki/Transport_layer) on Wikipedia.
        ///
        /// * udp - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.
        ///
        /// * icmp - Internet Control Message Protocol (ICMP) is used to send error messages and operational information indicating success or failure when communicating with an instance. For example, an error is indicated when an instance could not be reached. When you specify icmp as the protocol, you must specify the ICMP type using the fromPort parameter, and ICMP code using the toPort parameter.
        ///
        /// * icmp6 - Internet Control Message Protocol (ICMP) for IPv6. When you specify icmp6 as the protocol, you must specify the ICMP type using the fromPort parameter, and ICMP code using the toPort parameter.
        public var `protocol`: LightsailClientTypes.NetworkProtocol?
        /// The last port in a range of open ports on an instance. Allowed ports:
        ///
        /// * TCP and UDP - 0 to 65535
        ///
        /// * ICMP - The ICMP code for IPv4 addresses. For example, specify 8 as the fromPort (ICMP type), and -1 as the toPort (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on Wikipedia.
        ///
        /// * ICMPv6 - The ICMP code for IPv6 addresses. For example, specify 128 as the fromPort (ICMPv6 type), and 0 as toPort (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).
        public var toPort: Swift.Int

        public init(
            cidrListAliases: [Swift.String]? = nil,
            cidrs: [Swift.String]? = nil,
            fromPort: Swift.Int = 0,
            ipv6Cidrs: [Swift.String]? = nil,
            `protocol`: LightsailClientTypes.NetworkProtocol? = nil,
            toPort: Swift.Int = 0
        )
        {
            self.cidrListAliases = cidrListAliases
            self.cidrs = cidrs
            self.fromPort = fromPort
            self.ipv6Cidrs = ipv6Cidrs
            self.`protocol` = `protocol`
            self.toPort = toPort
        }
    }
}

public struct CloseInstancePublicPortsInput: Swift.Sendable {
    /// The name of the instance for which to close ports.
    /// This member is required.
    public var instanceName: Swift.String?
    /// An object to describe the ports to close for the specified instance.
    /// This member is required.
    public var portInfo: LightsailClientTypes.PortInfo?

    public init(
        instanceName: Swift.String? = nil,
        portInfo: LightsailClientTypes.PortInfo? = nil
    )
    {
        self.instanceName = instanceName
        self.portInfo = portInfo
    }
}

public struct CloseInstancePublicPortsOutput: Swift.Sendable {
    /// An object that describes the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

extension LightsailClientTypes {

    /// Describes the destination of a record.
    public struct DestinationInfo: Swift.Sendable {
        /// The ID of the resource created at the destination.
        public var id: Swift.String?
        /// The destination service of the record.
        public var service: Swift.String?

        public init(
            id: Swift.String? = nil,
            service: Swift.String? = nil
        )
        {
            self.id = id
            self.service = service
        }
    }
}

extension LightsailClientTypes {

    public enum CloudFormationStackRecordSourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exportsnapshotrecord
        case sdkUnknown(Swift.String)

        public static var allCases: [CloudFormationStackRecordSourceType] {
            return [
                .exportsnapshotrecord
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exportsnapshotrecord: return "ExportSnapshotRecord"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the source of a CloudFormation stack record (i.e., the export snapshot record).
    public struct CloudFormationStackRecordSourceInfo: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the export snapshot record.
        public var arn: Swift.String?
        /// The name of the record.
        public var name: Swift.String?
        /// The Lightsail resource type (ExportSnapshotRecord).
        public var resourceType: LightsailClientTypes.CloudFormationStackRecordSourceType?

        public init(
            arn: Swift.String? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.CloudFormationStackRecordSourceType? = nil
        )
        {
            self.arn = arn
            self.name = name
            self.resourceType = resourceType
        }
    }
}

extension LightsailClientTypes {

    public enum RecordState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [RecordState] {
            return [
                .failed,
                .started,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .started: return "Started"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes a CloudFormation stack record created as a result of the create cloud formation stack action. A CloudFormation stack record provides information about the AWS CloudFormation stack used to create a new Amazon Elastic Compute Cloud instance from an exported Lightsail instance snapshot.
    public struct CloudFormationStackRecord: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the CloudFormation stack record.
        public var arn: Swift.String?
        /// The date when the CloudFormation stack record was created.
        public var createdAt: Foundation.Date?
        /// A list of objects describing the destination service, which is AWS CloudFormation, and the Amazon Resource Name (ARN) of the AWS CloudFormation stack.
        public var destinationInfo: LightsailClientTypes.DestinationInfo?
        /// A list of objects describing the Availability Zone and Amazon Web Services Region of the CloudFormation stack record.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the CloudFormation stack record. It starts with CloudFormationStackRecord followed by a GUID.
        public var name: Swift.String?
        /// The Lightsail resource type (CloudFormationStackRecord).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// A list of objects describing the source of the CloudFormation stack record.
        public var sourceInfo: [LightsailClientTypes.CloudFormationStackRecordSourceInfo]?
        /// The current state of the CloudFormation stack record.
        public var state: LightsailClientTypes.RecordState?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            destinationInfo: LightsailClientTypes.DestinationInfo? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sourceInfo: [LightsailClientTypes.CloudFormationStackRecordSourceInfo]? = nil,
            state: LightsailClientTypes.RecordState? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.destinationInfo = destinationInfo
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.sourceInfo = sourceInfo
            self.state = state
        }
    }
}

extension LightsailClientTypes {

    public enum ContactMethodStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case invalid
        case pendingverification
        case valid
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactMethodStatus] {
            return [
                .invalid,
                .pendingverification,
                .valid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .invalid: return "Invalid"
            case .pendingverification: return "PendingVerification"
            case .valid: return "Valid"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes a contact method. A contact method is a way to send you notifications. For more information, see [Notifications in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications).
    public struct ContactMethod: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the contact method.
        public var arn: Swift.String?
        /// The destination of the contact method, such as an email address or a mobile phone number.
        public var contactEndpoint: Swift.String?
        /// The timestamp when the contact method was created.
        public var createdAt: Foundation.Date?
        /// An object that describes the location of the contact method, such as the Amazon Web Services Region and Availability Zone.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the contact method.
        public var name: Swift.String?
        /// The protocol of the contact method, such as email or SMS (text messaging).
        public var `protocol`: LightsailClientTypes.ContactProtocol?
        /// The Lightsail resource type of the contact method.
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The current status of the contact method. A contact method has the following possible status:
        ///
        /// * PendingVerification - The contact method has not yet been verified, and the verification has not yet expired.
        ///
        /// * Valid - The contact method has been verified.
        ///
        /// * InValid - An attempt was made to verify the contact method, but the verification has expired.
        public var status: LightsailClientTypes.ContactMethodStatus?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail contact method. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?

        public init(
            arn: Swift.String? = nil,
            contactEndpoint: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            `protocol`: LightsailClientTypes.ContactProtocol? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            status: LightsailClientTypes.ContactMethodStatus? = nil,
            supportCode: Swift.String? = nil
        )
        {
            self.arn = arn
            self.contactEndpoint = contactEndpoint
            self.createdAt = createdAt
            self.location = location
            self.name = name
            self.`protocol` = `protocol`
            self.resourceType = resourceType
            self.status = status
            self.supportCode = supportCode
        }
    }
}

extension LightsailClientTypes {

    public enum ContactMethodVerificationProtocol: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case email
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactMethodVerificationProtocol] {
            return [
                .email
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .email: return "Email"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum ContainerServiceProtocol: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case http
        case https
        case tcp
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceProtocol] {
            return [
                .http,
                .https,
                .tcp,
                .udp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .http: return "HTTP"
            case .https: return "HTTPS"
            case .tcp: return "TCP"
            case .udp: return "UDP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the settings of a container that will be launched, or that is launched, to an Amazon Lightsail container service.
    public struct Container: Swift.Sendable {
        /// The launch command for the container.
        public var command: [Swift.String]?
        /// The environment variables of the container.
        public var environment: [Swift.String: Swift.String]?
        /// The name of the image used for the container. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (:). For example, if your container service name is container-service-1, the container image label is mystaticsite, and you want to use the third (3) version of the registered container image, then you should specify :container-service-1.mystaticsite.3. To use the latest version of a container image, specify latest instead of a version number (for example, :container-service-1.mystaticsite.latest). Lightsail will automatically use the highest numbered version of the registered container image. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, nginx:latest or nginx.
        public var image: Swift.String?
        /// The open firewall ports of the container.
        public var ports: [Swift.String: LightsailClientTypes.ContainerServiceProtocol]?

        public init(
            command: [Swift.String]? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            image: Swift.String? = nil,
            ports: [Swift.String: LightsailClientTypes.ContainerServiceProtocol]? = nil
        )
        {
            self.command = command
            self.environment = environment
            self.image = image
            self.ports = ports
        }
    }
}

extension LightsailClientTypes {

    /// Describes a container image that is registered to an Amazon Lightsail container service.
    public struct ContainerImage: Swift.Sendable {
        /// The timestamp when the container image was created.
        public var createdAt: Foundation.Date?
        /// The digest of the container image.
        public var digest: Swift.String?
        /// The name of the container image.
        public var image: Swift.String?

        public init(
            createdAt: Foundation.Date? = nil,
            digest: Swift.String? = nil,
            image: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.digest = digest
            self.image = image
        }
    }
}

extension LightsailClientTypes {

    /// Describes the health check configuration of an Amazon Lightsail container service.
    public struct ContainerServiceHealthCheckConfig: Swift.Sendable {
        /// The number of consecutive health checks successes required before moving the container to the Healthy state. The default value is 2.
        public var healthyThreshold: Swift.Int?
        /// The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. The default value is 5.
        public var intervalSeconds: Swift.Int?
        /// The path on the container on which to perform the health check. The default value is /.
        public var path: Swift.String?
        /// The HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. You can specify multiple values (for example, 200,202) or a range of values (for example, 200-299).
        public var successCodes: Swift.String?
        /// The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. The default value is 2.
        public var timeoutSeconds: Swift.Int?
        /// The number of consecutive health check failures required before moving the container to the Unhealthy state. The default value is 2.
        public var unhealthyThreshold: Swift.Int?

        public init(
            healthyThreshold: Swift.Int? = nil,
            intervalSeconds: Swift.Int? = nil,
            path: Swift.String? = nil,
            successCodes: Swift.String? = nil,
            timeoutSeconds: Swift.Int? = nil,
            unhealthyThreshold: Swift.Int? = nil
        )
        {
            self.healthyThreshold = healthyThreshold
            self.intervalSeconds = intervalSeconds
            self.path = path
            self.successCodes = successCodes
            self.timeoutSeconds = timeoutSeconds
            self.unhealthyThreshold = unhealthyThreshold
        }
    }
}

extension LightsailClientTypes {

    /// Describes the public endpoint configuration of a deployment of an Amazon Lightsail container service.
    public struct ContainerServiceEndpoint: Swift.Sendable {
        /// The name of the container entry of the deployment that the endpoint configuration applies to.
        public var containerName: Swift.String?
        /// The port of the specified container to which traffic is forwarded to.
        public var containerPort: Swift.Int?
        /// An object that describes the health check configuration of the container.
        public var healthCheck: LightsailClientTypes.ContainerServiceHealthCheckConfig?

        public init(
            containerName: Swift.String? = nil,
            containerPort: Swift.Int? = nil,
            healthCheck: LightsailClientTypes.ContainerServiceHealthCheckConfig? = nil
        )
        {
            self.containerName = containerName
            self.containerPort = containerPort
            self.healthCheck = healthCheck
        }
    }
}

extension LightsailClientTypes {

    public enum ContainerServiceDeploymentState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case activating
        case active
        case failed
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceDeploymentState] {
            return [
                .activating,
                .active,
                .failed,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .activating: return "ACTIVATING"
            case .active: return "ACTIVE"
            case .failed: return "FAILED"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes a container deployment configuration of an Amazon Lightsail container service. A deployment specifies the settings, such as the ports and launch command, of containers that are deployed to your container service.
    public struct ContainerServiceDeployment: Swift.Sendable {
        /// An object that describes the configuration for the containers of the deployment.
        public var containers: [Swift.String: LightsailClientTypes.Container]?
        /// The timestamp when the deployment was created.
        public var createdAt: Foundation.Date?
        /// An object that describes the endpoint of the deployment.
        public var publicEndpoint: LightsailClientTypes.ContainerServiceEndpoint?
        /// The state of the deployment. A deployment can be in one of the following states:
        ///
        /// * ACTIVATING - The deployment is being created.
        ///
        /// * ACTIVE - The deployment was successfully created, and it's currently running on the container service. The container service can have only one deployment in an active state at a time.
        ///
        /// * INACTIVE - The deployment was previously successfully created, but it is not currently running on the container service.
        ///
        /// * FAILED - The deployment failed. Use the GetContainerLog action to view the log events for the containers in the deployment to try to determine the reason for the failure.
        public var state: LightsailClientTypes.ContainerServiceDeploymentState?
        /// The version number of the deployment.
        public var version: Swift.Int?

        public init(
            containers: [Swift.String: LightsailClientTypes.Container]? = nil,
            createdAt: Foundation.Date? = nil,
            publicEndpoint: LightsailClientTypes.ContainerServiceEndpoint? = nil,
            state: LightsailClientTypes.ContainerServiceDeploymentState? = nil,
            version: Swift.Int? = nil
        )
        {
            self.containers = containers
            self.createdAt = createdAt
            self.publicEndpoint = publicEndpoint
            self.state = state
            self.version = version
        }
    }
}

extension LightsailClientTypes {

    public enum ContainerServicePowerName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case large
        case medium
        case micro
        case nano
        case small
        case xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServicePowerName] {
            return [
                .large,
                .medium,
                .micro,
                .nano,
                .small,
                .xlarge
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .large: return "large"
            case .medium: return "medium"
            case .micro: return "micro"
            case .nano: return "nano"
            case .small: return "small"
            case .xlarge: return "xlarge"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the activation status of the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories. When activated, Lightsail creates an Identity and Access Management (IAM) role for the specified Lightsail container service. You can use the ARN of the role to create a trust relationship between your Lightsail container service and an Amazon ECR private repository in your Amazon Web Services account. This allows your container service to pull images from Amazon ECR private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
    public struct ContainerServiceECRImagePullerRole: Swift.Sendable {
        /// A Boolean value that indicates whether the role is activated.
        public var isActive: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the role, if it is activated.
        public var principalArn: Swift.String?

        public init(
            isActive: Swift.Bool? = nil,
            principalArn: Swift.String? = nil
        )
        {
            self.isActive = isActive
            self.principalArn = principalArn
        }
    }
}

extension LightsailClientTypes {

    /// Describes the configuration for an Amazon Lightsail container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
    public struct PrivateRegistryAccess: Swift.Sendable {
        /// An object that describes the activation status of the role that you can use to grant a Lightsail container service access to Amazon ECR private repositories. If the role is activated, the Amazon Resource Name (ARN) of the role is also listed.
        public var ecrImagePullerRole: LightsailClientTypes.ContainerServiceECRImagePullerRole?

        public init(
            ecrImagePullerRole: LightsailClientTypes.ContainerServiceECRImagePullerRole? = nil
        )
        {
            self.ecrImagePullerRole = ecrImagePullerRole
        }
    }
}

extension LightsailClientTypes {

    public enum ContainerServiceState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleting
        case deploying
        case disabled
        case pending
        case ready
        case running
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceState] {
            return [
                .deleting,
                .deploying,
                .disabled,
                .pending,
                .ready,
                .running,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "DELETING"
            case .deploying: return "DEPLOYING"
            case .disabled: return "DISABLED"
            case .pending: return "PENDING"
            case .ready: return "READY"
            case .running: return "RUNNING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum ContainerServiceStateDetailCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case activatingDeployment
        case certificateLimitExceeded
        case creatingDeployment
        case creatingNetworkInfrastructure
        case creatingSystemResources
        case evaluatingHealthCheck
        case provisioningCertificate
        case provisioningService
        case unknownError
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceStateDetailCode] {
            return [
                .activatingDeployment,
                .certificateLimitExceeded,
                .creatingDeployment,
                .creatingNetworkInfrastructure,
                .creatingSystemResources,
                .evaluatingHealthCheck,
                .provisioningCertificate,
                .provisioningService,
                .unknownError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .activatingDeployment: return "ACTIVATING_DEPLOYMENT"
            case .certificateLimitExceeded: return "CERTIFICATE_LIMIT_EXCEEDED"
            case .creatingDeployment: return "CREATING_DEPLOYMENT"
            case .creatingNetworkInfrastructure: return "CREATING_NETWORK_INFRASTRUCTURE"
            case .creatingSystemResources: return "CREATING_SYSTEM_RESOURCES"
            case .evaluatingHealthCheck: return "EVALUATING_HEALTH_CHECK"
            case .provisioningCertificate: return "PROVISIONING_CERTIFICATE"
            case .provisioningService: return "PROVISIONING_SERVICE"
            case .unknownError: return "UNKNOWN_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the current state of a container service.
    public struct ContainerServiceStateDetail: Swift.Sendable {
        /// The state code of the container service. The following state codes are possible:
        ///
        /// * The following state codes are possible if your container service is in a DEPLOYING or UPDATING state:
        ///
        /// * CREATING_SYSTEM_RESOURCES - The system resources for your container service are being created.
        ///
        /// * CREATING_NETWORK_INFRASTRUCTURE - The network infrastructure for your container service are being created.
        ///
        /// * PROVISIONING_CERTIFICATE - The SSL/TLS certificate for your container service is being created.
        ///
        /// * PROVISIONING_SERVICE - Your container service is being provisioned.
        ///
        /// * CREATING_DEPLOYMENT - Your deployment is being created on your container service.
        ///
        /// * EVALUATING_HEALTH_CHECK - The health of your deployment is being evaluated.
        ///
        /// * ACTIVATING_DEPLOYMENT - Your deployment is being activated.
        ///
        ///
        ///
        ///
        /// * The following state codes are possible if your container service is in a PENDING state:
        ///
        /// * CERTIFICATE_LIMIT_EXCEEDED - The SSL/TLS certificate required for your container service exceeds the maximum number of certificates allowed for your account.
        ///
        /// * UNKNOWN_ERROR - An error was experienced when your container service was being created.
        public var code: LightsailClientTypes.ContainerServiceStateDetailCode?
        /// A message that provides more information for the state code. The state detail is populated only when a container service is in a PENDING, DEPLOYING, or UPDATING state.
        public var message: Swift.String?

        public init(
            code: LightsailClientTypes.ContainerServiceStateDetailCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }
}

extension LightsailClientTypes {

    /// Describes an Amazon Lightsail container service.
    public struct ContainerService: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the container service.
        public var arn: Swift.String?
        /// The name of the container service.
        public var containerServiceName: Swift.String?
        /// The timestamp when the container service was created.
        public var createdAt: Foundation.Date?
        /// An object that describes the current container deployment of the container service.
        public var currentDeployment: LightsailClientTypes.ContainerServiceDeployment?
        /// A Boolean value indicating whether the container service is disabled.
        public var isDisabled: Swift.Bool?
        /// An object that describes the location of the container service, such as the Amazon Web Services Region and Availability Zone.
        public var location: LightsailClientTypes.ResourceLocation?
        /// An object that describes the next deployment of the container service. This value is null when there is no deployment in a pending state.
        public var nextDeployment: LightsailClientTypes.ContainerServiceDeployment?
        /// The power specification of the container service. The power specifies the amount of RAM, the number of vCPUs, and the base price of the container service.
        public var power: LightsailClientTypes.ContainerServicePowerName?
        /// The ID of the power of the container service.
        public var powerId: Swift.String?
        /// The principal ARN of the container service. The principal ARN can be used to create a trust relationship between your standard Amazon Web Services account and your Lightsail container service. This allows you to give your service permission to access resources in your standard Amazon Web Services account.
        public var principalArn: Swift.String?
        /// The private domain name of the container service. The private domain name is accessible only by other resources within the default virtual private cloud (VPC) of your Lightsail account.
        public var privateDomainName: Swift.String?
        /// An object that describes the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
        public var privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccess?
        /// The public domain name of the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the CreateCertificate action to create a certificate for the public domain names you want to use with your container service. See CreateContainerService or UpdateContainerService for information about how to specify public domain names for your Lightsail container service.
        public var publicDomainNames: [Swift.String: [Swift.String]]?
        /// The Lightsail resource type of the container service.
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The scale specification of the container service. The scale specifies the allocated compute nodes of the container service.
        public var scale: Swift.Int?
        /// The current state of the container service. The following container service states are possible:
        ///
        /// * PENDING - The container service is being created.
        ///
        /// * READY - The container service is running but it does not have an active container deployment.
        ///
        /// * DEPLOYING - The container service is launching a container deployment.
        ///
        /// * RUNNING - The container service is running and it has an active container deployment.
        ///
        /// * UPDATING - The container service capacity or its custom domains are being updated.
        ///
        /// * DELETING - The container service is being deleted.
        ///
        /// * DISABLED - The container service is disabled, and its active deployment and containers, if any, are shut down.
        public var state: LightsailClientTypes.ContainerServiceState?
        /// An object that describes the current state of the container service. The state detail is populated only when a container service is in a PENDING, DEPLOYING, or UPDATING state.
        public var stateDetail: LightsailClientTypes.ContainerServiceStateDetail?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?
        /// The publicly accessible URL of the container service. If no public endpoint is specified in the currentDeployment, this URL returns a 404 response.
        public var url: Swift.String?

        public init(
            arn: Swift.String? = nil,
            containerServiceName: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            currentDeployment: LightsailClientTypes.ContainerServiceDeployment? = nil,
            isDisabled: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            nextDeployment: LightsailClientTypes.ContainerServiceDeployment? = nil,
            power: LightsailClientTypes.ContainerServicePowerName? = nil,
            powerId: Swift.String? = nil,
            principalArn: Swift.String? = nil,
            privateDomainName: Swift.String? = nil,
            privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccess? = nil,
            publicDomainNames: [Swift.String: [Swift.String]]? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            scale: Swift.Int? = nil,
            state: LightsailClientTypes.ContainerServiceState? = nil,
            stateDetail: LightsailClientTypes.ContainerServiceStateDetail? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            url: Swift.String? = nil
        )
        {
            self.arn = arn
            self.containerServiceName = containerServiceName
            self.createdAt = createdAt
            self.currentDeployment = currentDeployment
            self.isDisabled = isDisabled
            self.location = location
            self.nextDeployment = nextDeployment
            self.power = power
            self.powerId = powerId
            self.principalArn = principalArn
            self.privateDomainName = privateDomainName
            self.privateRegistryAccess = privateRegistryAccess
            self.publicDomainNames = publicDomainNames
            self.resourceType = resourceType
            self.scale = scale
            self.state = state
            self.stateDetail = stateDetail
            self.tags = tags
            self.url = url
        }
    }
}

extension LightsailClientTypes {

    /// Describes the settings of a public endpoint for an Amazon Lightsail container service.
    public struct EndpointRequest: Swift.Sendable {
        /// The name of the container for the endpoint.
        /// This member is required.
        public var containerName: Swift.String?
        /// The port of the container to which traffic is forwarded to.
        /// This member is required.
        public var containerPort: Swift.Int?
        /// An object that describes the health check configuration of the container.
        public var healthCheck: LightsailClientTypes.ContainerServiceHealthCheckConfig?

        public init(
            containerName: Swift.String? = nil,
            containerPort: Swift.Int? = nil,
            healthCheck: LightsailClientTypes.ContainerServiceHealthCheckConfig? = nil
        )
        {
            self.containerName = containerName
            self.containerPort = containerPort
            self.healthCheck = healthCheck
        }
    }
}

extension LightsailClientTypes {

    /// Describes a container deployment configuration of an Amazon Lightsail container service. A deployment specifies the settings, such as the ports and launch command, of containers that are deployed to your container service.
    public struct ContainerServiceDeploymentRequest: Swift.Sendable {
        /// An object that describes the configuration for the containers of the deployment.
        public var containers: [Swift.String: LightsailClientTypes.Container]?
        /// An object that describes the endpoint of the deployment.
        public var publicEndpoint: LightsailClientTypes.EndpointRequest?

        public init(
            containers: [Swift.String: LightsailClientTypes.Container]? = nil,
            publicEndpoint: LightsailClientTypes.EndpointRequest? = nil
        )
        {
            self.containers = containers
            self.publicEndpoint = publicEndpoint
        }
    }
}

extension LightsailClientTypes {

    /// Describes a request to activate or deactivate the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories. When activated, Lightsail creates an Identity and Access Management (IAM) role for the specified Lightsail container service. You can use the ARN of the role to create a trust relationship between your Lightsail container service and an Amazon ECR private repository in your Amazon Web Services account. This allows your container service to pull images from Amazon ECR private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
    public struct ContainerServiceECRImagePullerRoleRequest: Swift.Sendable {
        /// A Boolean value that indicates whether to activate the role.
        public var isActive: Swift.Bool?

        public init(
            isActive: Swift.Bool? = nil
        )
        {
            self.isActive = isActive
        }
    }
}

extension LightsailClientTypes {

    /// Describes the log events of a container of an Amazon Lightsail container service.
    public struct ContainerServiceLogEvent: Swift.Sendable {
        /// The timestamp when the container service log event was created.
        public var createdAt: Foundation.Date?
        /// The message of the container service log event.
        public var message: Swift.String?

        public init(
            createdAt: Foundation.Date? = nil,
            message: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.message = message
        }
    }
}

extension LightsailClientTypes {

    public enum ContainerServiceMetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cpuutilization
        case memoryutilization
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceMetricName] {
            return [
                .cpuutilization,
                .memoryutilization
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cpuutilization: return "CPUUtilization"
            case .memoryutilization: return "MemoryUtilization"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the powers that can be specified for an Amazon Lightsail container service. The power specifies the amount of RAM, the number of vCPUs, and the base price of the container service.
    public struct ContainerServicePower: Swift.Sendable {
        /// The number of vCPUs included in the power.
        public var cpuCount: Swift.Float?
        /// A Boolean value indicating whether the power is active and can be specified for container services.
        public var isActive: Swift.Bool?
        /// The friendly name of the power (nano).
        public var name: Swift.String?
        /// The ID of the power (nano-1).
        public var powerId: Swift.String?
        /// The monthly price of the power in USD.
        public var price: Swift.Float?
        /// The amount of RAM (in GB) of the power.
        public var ramSizeInGb: Swift.Float?

        public init(
            cpuCount: Swift.Float? = nil,
            isActive: Swift.Bool? = nil,
            name: Swift.String? = nil,
            powerId: Swift.String? = nil,
            price: Swift.Float? = nil,
            ramSizeInGb: Swift.Float? = nil
        )
        {
            self.cpuCount = cpuCount
            self.isActive = isActive
            self.name = name
            self.powerId = powerId
            self.price = price
            self.ramSizeInGb = ramSizeInGb
        }
    }
}

extension LightsailClientTypes {

    /// Describes the sign-in credentials for the container image registry of an Amazon Lightsail account.
    public struct ContainerServiceRegistryLogin: Swift.Sendable {
        /// The timestamp of when the container image registry sign-in credentials expire. The log in credentials expire 12 hours after they are created, at which point you will need to create a new set of log in credentials using the CreateContainerServiceRegistryLogin action.
        public var expiresAt: Foundation.Date?
        /// The container service registry password to use to push container images to the container image registry of a Lightsail account
        public var password: Swift.String?
        /// The address to use to push container images to the container image registry of a Lightsail account.
        public var registry: Swift.String?
        /// The container service registry username to use to push container images to the container image registry of a Lightsail account.
        public var username: Swift.String?

        public init(
            expiresAt: Foundation.Date? = nil,
            password: Swift.String? = nil,
            registry: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.expiresAt = expiresAt
            self.password = password
            self.registry = registry
            self.username = username
        }
    }
}

public struct CopySnapshotInput: Swift.Sendable {
    /// The date of the source automatic snapshot to copy. Use the get auto snapshots operation to identify the dates of the available automatic snapshots. Constraints:
    ///
    /// * Must be specified in YYYY-MM-DD format.
    ///
    /// * This parameter cannot be defined together with the use latest restorable auto snapshot parameter. The restore date and use latest restorable auto snapshot parameters are mutually exclusive.
    ///
    /// * Define this parameter only when copying an automatic snapshot as a manual snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots).
    public var restoreDate: Swift.String?
    /// The Amazon Web Services Region where the source manual or automatic snapshot is located.
    /// This member is required.
    public var sourceRegion: LightsailClientTypes.RegionName?
    /// The name of the source instance or disk from which the source automatic snapshot was created. Constraint:
    ///
    /// * Define this parameter only when copying an automatic snapshot as a manual snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots).
    public var sourceResourceName: Swift.String?
    /// The name of the source manual snapshot to copy. Constraint:
    ///
    /// * Define this parameter only when copying a manual snapshot as another manual snapshot.
    public var sourceSnapshotName: Swift.String?
    /// The name of the new manual snapshot to be created as a copy.
    /// This member is required.
    public var targetSnapshotName: Swift.String?
    /// A Boolean value to indicate whether to use the latest available automatic snapshot of the specified source instance or disk. Constraints:
    ///
    /// * This parameter cannot be defined together with the restore date parameter. The use latest restorable auto snapshot and restore date parameters are mutually exclusive.
    ///
    /// * Define this parameter only when copying an automatic snapshot as a manual snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots).
    public var useLatestRestorableAutoSnapshot: Swift.Bool?

    public init(
        restoreDate: Swift.String? = nil,
        sourceRegion: LightsailClientTypes.RegionName? = nil,
        sourceResourceName: Swift.String? = nil,
        sourceSnapshotName: Swift.String? = nil,
        targetSnapshotName: Swift.String? = nil,
        useLatestRestorableAutoSnapshot: Swift.Bool? = nil
    )
    {
        self.restoreDate = restoreDate
        self.sourceRegion = sourceRegion
        self.sourceResourceName = sourceResourceName
        self.sourceSnapshotName = sourceSnapshotName
        self.targetSnapshotName = targetSnapshotName
        self.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot
    }
}

public struct CopySnapshotOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

extension LightsailClientTypes {

    public enum Currency: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case usd
        case sdkUnknown(Swift.String)

        public static var allCases: [Currency] {
            return [
                .usd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .usd: return "USD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum PricingUnit: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bundles
        case gb
        case gbmo
        case hrs
        case queries
        case sdkUnknown(Swift.String)

        public static var allCases: [PricingUnit] {
            return [
                .bundles,
                .gb,
                .gbmo,
                .hrs,
                .queries
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bundles: return "Bundles"
            case .gb: return "GB"
            case .gbmo: return "GB-Mo"
            case .hrs: return "Hrs"
            case .queries: return "Queries"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Sets the start date and end date for retrieving a cost estimate. The start date is inclusive, but the end date is exclusive. For example, if start is 2017-01-01 and end is 2017-05-01, then the cost and usage data is retrieved from 2017-01-01 up to and including 2017-04-30 but not including 2017-05-01.
    public struct TimePeriod: Swift.Sendable {
        /// The end of the time period. The end date is exclusive. For example, if end is 2017-05-01, Lightsail for Research retrieves cost and usage data from the start date up to, but not including, 2017-05-01.
        public var end: Foundation.Date?
        /// The beginning of the time period. The start date is inclusive. For example, if start is 2017-01-01, Lightsail for Research retrieves cost and usage data starting at 2017-01-01 up to the end date. The start date must be equal to or no later than the current date to avoid a validation error.
        public var start: Foundation.Date?

        public init(
            end: Foundation.Date? = nil,
            start: Foundation.Date? = nil
        )
        {
            self.end = end
            self.start = start
        }
    }
}

extension LightsailClientTypes {

    /// An estimate that's associated with a time period.
    public struct EstimateByTime: Swift.Sendable {
        /// The currency of the estimate in USD.
        public var currency: LightsailClientTypes.Currency?
        /// The unit of measurement that's used for the cost estimate.
        public var pricingUnit: LightsailClientTypes.PricingUnit?
        /// The period of time, in days, that an estimate covers. The period has a start date and an end date. The start date must come before the end date.
        public var timePeriod: LightsailClientTypes.TimePeriod?
        /// The number of pricing units used to calculate the total number of hours. For example, 1 unit equals 1 hour.
        public var unit: Swift.Double?
        /// The amount of cost or usage that's measured for the cost estimate.
        public var usageCost: Swift.Double?

        public init(
            currency: LightsailClientTypes.Currency? = nil,
            pricingUnit: LightsailClientTypes.PricingUnit? = nil,
            timePeriod: LightsailClientTypes.TimePeriod? = nil,
            unit: Swift.Double? = nil,
            usageCost: Swift.Double? = nil
        )
        {
            self.currency = currency
            self.pricingUnit = pricingUnit
            self.timePeriod = timePeriod
            self.unit = unit
            self.usageCost = usageCost
        }
    }
}

extension LightsailClientTypes {

    /// Describes the estimated cost for resources in your Lightsail for Research account.
    public struct CostEstimate: Swift.Sendable {
        /// The cost estimate result that's associated with a time period.
        public var resultsByTime: [LightsailClientTypes.EstimateByTime]?
        /// The types of usage that are included in the estimate, such as costs, usage, or data transfer.
        public var usageType: Swift.String?

        public init(
            resultsByTime: [LightsailClientTypes.EstimateByTime]? = nil,
            usageType: Swift.String? = nil
        )
        {
            self.resultsByTime = resultsByTime
            self.usageType = usageType
        }
    }
}

public struct CreateBucketInput: Swift.Sendable {
    /// The name for the bucket. For more information about bucket names, see [Bucket naming rules in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/bucket-naming-rules-in-amazon-lightsail) in the Amazon Lightsail Developer Guide.
    /// This member is required.
    public var bucketName: Swift.String?
    /// The ID of the bundle to use for the bucket. A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a bucket. Use the [GetBucketBundles](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketBundles.html) action to get a list of bundle IDs that you can specify. Use the [UpdateBucketBundle](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html) action to change the bundle after the bucket is created.
    /// This member is required.
    public var bundleId: Swift.String?
    /// A Boolean value that indicates whether to enable versioning of objects in the bucket. For more information about versioning, see [Enabling and suspending object versioning in a bucket in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-managing-bucket-object-versioning) in the Amazon Lightsail Developer Guide.
    public var enableObjectVersioning: Swift.Bool?
    /// The tag keys and optional values to add to the bucket during creation. Use the [TagResource](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_TagResource.html) action to tag the bucket after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init(
        bucketName: Swift.String? = nil,
        bundleId: Swift.String? = nil,
        enableObjectVersioning: Swift.Bool? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.bucketName = bucketName
        self.bundleId = bundleId
        self.enableObjectVersioning = enableObjectVersioning
        self.tags = tags
    }
}

public struct CreateBucketOutput: Swift.Sendable {
    /// An object that describes the bucket that is created.
    public var bucket: LightsailClientTypes.Bucket?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        bucket: LightsailClientTypes.Bucket? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.bucket = bucket
        self.operations = operations
    }
}

public struct CreateBucketAccessKeyInput: Swift.Sendable {
    /// The name of the bucket that the new access key will belong to, and grant access to.
    /// This member is required.
    public var bucketName: Swift.String?

    public init(
        bucketName: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
    }
}

public struct CreateBucketAccessKeyOutput: Swift.Sendable {
    /// An object that describes the access key that is created.
    public var accessKey: LightsailClientTypes.AccessKey?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        accessKey: LightsailClientTypes.AccessKey? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.accessKey = accessKey
        self.operations = operations
    }
}

public struct CreateCertificateInput: Swift.Sendable {
    /// The name for the certificate.
    /// This member is required.
    public var certificateName: Swift.String?
    /// The domain name (example.com) for the certificate.
    /// This member is required.
    public var domainName: Swift.String?
    /// An array of strings that specify the alternate domains (example2.com) and subdomains (blog.example.com) for the certificate. You can specify a maximum of nine alternate domains (in addition to the primary domain name). Wildcard domain entries (*.example.com) are not supported.
    public var subjectAlternativeNames: [Swift.String]?
    /// The tag keys and optional values to add to the certificate during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init(
        certificateName: Swift.String? = nil,
        domainName: Swift.String? = nil,
        subjectAlternativeNames: [Swift.String]? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.certificateName = certificateName
        self.domainName = domainName
        self.subjectAlternativeNames = subjectAlternativeNames
        self.tags = tags
    }
}

public struct CreateCertificateOutput: Swift.Sendable {
    /// An object that describes the certificate created.
    public var certificate: LightsailClientTypes.CertificateSummary?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        certificate: LightsailClientTypes.CertificateSummary? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.certificate = certificate
        self.operations = operations
    }
}

extension LightsailClientTypes {

    public enum PortInfoSourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case closed
        case `default`
        case instance
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [PortInfoSourceType] {
            return [
                .closed,
                .default,
                .instance,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .closed: return "CLOSED"
            case .default: return "DEFAULT"
            case .instance: return "INSTANCE"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the Amazon Elastic Compute Cloud instance and related resources to be created using the create cloud formation stack operation.
    public struct InstanceEntry: Swift.Sendable {
        /// The Availability Zone for the new Amazon EC2 instance.
        /// This member is required.
        public var availabilityZone: Swift.String?
        /// The instance type (t2.micro) to use for the new Amazon EC2 instance.
        /// This member is required.
        public var instanceType: Swift.String?
        /// The port configuration to use for the new Amazon EC2 instance. The following configuration options are available:
        ///
        /// * DEFAULT - Use the default firewall settings from the Lightsail instance blueprint. If this is specified, then IPv4 and IPv6 will be configured for the new instance that is created in Amazon EC2.
        ///
        /// * INSTANCE - Use the configured firewall settings from the source Lightsail instance. If this is specified, the new instance that is created in Amazon EC2 will be configured to match the configuration of the source Lightsail instance. For example, if the source instance is configured for dual-stack (IPv4 and IPv6), then IPv4 and IPv6 will be configured for the new instance that is created in Amazon EC2. If the source instance is configured for IPv4 only, then only IPv4 will be configured for the new instance that is created in Amazon EC2.
        ///
        /// * NONE - Use the default Amazon EC2 security group. If this is specified, then only IPv4 will be configured for the new instance that is created in Amazon EC2.
        ///
        /// * CLOSED - All ports closed. If this is specified, then only IPv4 will be configured for the new instance that is created in Amazon EC2.
        ///
        ///
        /// If you configured lightsail-connect as a cidrListAliases on your instance, or if you chose to allow the Lightsail browser-based SSH or RDP clients to connect to your instance, that configuration is not carried over to your new Amazon EC2 instance.
        /// This member is required.
        public var portInfoSource: LightsailClientTypes.PortInfoSourceType?
        /// The name of the export snapshot record, which contains the exported Lightsail instance snapshot that will be used as the source of the new Amazon EC2 instance. Use the get export snapshot records operation to get a list of export snapshot records that you can use to create a CloudFormation stack.
        /// This member is required.
        public var sourceName: Swift.String?
        /// A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update. Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg.
        public var userData: Swift.String?

        public init(
            availabilityZone: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            portInfoSource: LightsailClientTypes.PortInfoSourceType? = nil,
            sourceName: Swift.String? = nil,
            userData: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.portInfoSource = portInfoSource
            self.sourceName = sourceName
            self.userData = userData
        }
    }
}

public struct CreateCloudFormationStackInput: Swift.Sendable {
    /// An array of parameters that will be used to create the new Amazon EC2 instance. You can only pass one instance entry at a time in this array. You will get an invalid parameter error if you pass more than one instance entry in this array.
    /// This member is required.
    public var instances: [LightsailClientTypes.InstanceEntry]?

    public init(
        instances: [LightsailClientTypes.InstanceEntry]? = nil
    )
    {
        self.instances = instances
    }
}

public struct CreateCloudFormationStackOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct CreateContactMethodInput: Swift.Sendable {
    /// The destination of the contact method, such as an email address or a mobile phone number. Use the E.164 format when specifying a mobile phone number. E.164 is a standard for the phone number structure used for international telecommunication. Phone numbers that follow this format can have a maximum of 15 digits, and they are prefixed with the plus character (+) and the country code. For example, a U.S. phone number in E.164 format would be specified as +1XXX5550100. For more information, see [E.164](https://en.wikipedia.org/wiki/E.164) on Wikipedia.
    /// This member is required.
    public var contactEndpoint: Swift.String?
    /// The protocol of the contact method, such as Email or SMS (text messaging). The SMS protocol is supported only in the following Amazon Web Services Regions.
    ///
    /// * US East (N. Virginia) (us-east-1)
    ///
    /// * US West (Oregon) (us-west-2)
    ///
    /// * Europe (Ireland) (eu-west-1)
    ///
    /// * Asia Pacific (Tokyo) (ap-northeast-1)
    ///
    /// * Asia Pacific (Singapore) (ap-southeast-1)
    ///
    /// * Asia Pacific (Sydney) (ap-southeast-2)
    ///
    ///
    /// For a list of countries/regions where SMS text messages can be sent, and the latest Amazon Web Services Regions where SMS text messaging is supported, see [Supported Regions and Countries](https://docs.aws.amazon.com/sns/latest/dg/sns-supported-regions-countries.html) in the Amazon SNS Developer Guide. For more information about notifications in Amazon Lightsail, see [Notifications in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications).
    /// This member is required.
    public var `protocol`: LightsailClientTypes.ContactProtocol?

    public init(
        contactEndpoint: Swift.String? = nil,
        `protocol`: LightsailClientTypes.ContactProtocol? = nil
    )
    {
        self.contactEndpoint = contactEndpoint
        self.`protocol` = `protocol`
    }
}

public struct CreateContactMethodOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

extension LightsailClientTypes {

    /// Describes a request to configure an Amazon Lightsail container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
    public struct PrivateRegistryAccessRequest: Swift.Sendable {
        /// An object to describe a request to activate or deactivate the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories.
        public var ecrImagePullerRole: LightsailClientTypes.ContainerServiceECRImagePullerRoleRequest?

        public init(
            ecrImagePullerRole: LightsailClientTypes.ContainerServiceECRImagePullerRoleRequest? = nil
        )
        {
            self.ecrImagePullerRole = ecrImagePullerRole
        }
    }
}

public struct CreateContainerServiceInput: Swift.Sendable {
    /// An object that describes a deployment for the container service. A deployment specifies the containers that will be launched on the container service and their settings, such as the ports to open, the environment variables to apply, and the launch command to run. It also specifies the container that will serve as the public endpoint of the deployment and its settings, such as the HTTP or HTTPS port to use, and the health check configuration.
    public var deployment: LightsailClientTypes.ContainerServiceDeploymentRequest?
    /// The power specification for the container service. The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the container service. The power and scale of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the power with the scale (the number of nodes) of the service. Use the GetContainerServicePowers action to get a list of power options that you can specify using this parameter, and their base monthly cost.
    /// This member is required.
    public var power: LightsailClientTypes.ContainerServicePowerName?
    /// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
    public var privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccessRequest?
    /// The public domain names to use with the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the CreateCertificate action to create a certificate for the public domain names you want to use with your container service. You can specify public domain names using a string to array map as shown in the example later on this page.
    public var publicDomainNames: [Swift.String: [Swift.String]]?
    /// The scale specification for the container service. The scale specifies the allocated compute nodes of the container service. The power and scale of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the power with the scale (the number of nodes) of the service.
    /// This member is required.
    public var scale: Swift.Int?
    /// The name for the container service. The name that you specify for your container service will make up part of its default domain. The default domain of a container service is typically https://...cs.amazonlightsail.com. If the name of your container service is container-service-1, and it's located in the US East (Ohio) Amazon Web Services Region (us-east-2), then the domain for your container service will be like the following example: https://container-service-1.ur4EXAMPLE2uq.us-east-2.cs.amazonlightsail.com The following are the requirements for container service names:
    ///
    /// * Must be unique within each Amazon Web Services Region in your Lightsail account.
    ///
    /// * Must contain 1 to 63 characters.
    ///
    /// * Must contain only alphanumeric characters and hyphens.
    ///
    /// * A hyphen (-) can separate words but cannot be at the start or end of the name.
    /// This member is required.
    public var serviceName: Swift.String?
    /// The tag keys and optional values to add to the container service during create. Use the TagResource action to tag a resource after it's created. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
    public var tags: [LightsailClientTypes.Tag]?

    public init(
        deployment: LightsailClientTypes.ContainerServiceDeploymentRequest? = nil,
        power: LightsailClientTypes.ContainerServicePowerName? = nil,
        privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccessRequest? = nil,
        publicDomainNames: [Swift.String: [Swift.String]]? = nil,
        scale: Swift.Int? = nil,
        serviceName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.deployment = deployment
        self.power = power
        self.privateRegistryAccess = privateRegistryAccess
        self.publicDomainNames = publicDomainNames
        self.scale = scale
        self.serviceName = serviceName
        self.tags = tags
    }
}

public struct CreateContainerServiceOutput: Swift.Sendable {
    /// An object that describes a container service.
    public var containerService: LightsailClientTypes.ContainerService?

    public init(
        containerService: LightsailClientTypes.ContainerService? = nil
    )
    {
        self.containerService = containerService
    }
}

public struct CreateContainerServiceDeploymentInput: Swift.Sendable {
    /// An object that describes the settings of the containers that will be launched on the container service.
    public var containers: [Swift.String: LightsailClientTypes.Container]?
    /// An object that describes the settings of the public endpoint for the container service.
    public var publicEndpoint: LightsailClientTypes.EndpointRequest?
    /// The name of the container service for which to create the deployment.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        containers: [Swift.String: LightsailClientTypes.Container]? = nil,
        publicEndpoint: LightsailClientTypes.EndpointRequest? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.containers = containers
        self.publicEndpoint = publicEndpoint
        self.serviceName = serviceName
    }
}

public struct CreateContainerServiceDeploymentOutput: Swift.Sendable {
    /// An object that describes a container service.
    public var containerService: LightsailClientTypes.ContainerService?

    public init(
        containerService: LightsailClientTypes.ContainerService? = nil
    )
    {
        self.containerService = containerService
    }
}

public struct CreateContainerServiceRegistryLoginInput: Swift.Sendable {

    public init() { }
}

public struct CreateContainerServiceRegistryLoginOutput: Swift.Sendable {
    /// An object that describes the log in information for the container service registry of your Lightsail account.
    public var registryLogin: LightsailClientTypes.ContainerServiceRegistryLogin?

    public init(
        registryLogin: LightsailClientTypes.ContainerServiceRegistryLogin? = nil
    )
    {
        self.registryLogin = registryLogin
    }
}

public struct CreateDiskInput: Swift.Sendable {
    /// An array of objects that represent the add-ons to enable for the new disk.
    public var addOns: [LightsailClientTypes.AddOnRequest]?
    /// The Availability Zone where you want to create the disk (us-east-2a). Use the same Availability Zone as the Lightsail instance to which you want to attach the disk. Use the get regions operation to list the Availability Zones where Lightsail is currently available.
    /// This member is required.
    public var availabilityZone: Swift.String?
    /// The unique Lightsail disk name (my-disk).
    /// This member is required.
    public var diskName: Swift.String?
    /// The size of the disk in GB (32).
    /// This member is required.
    public var sizeInGb: Swift.Int?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init(
        addOns: [LightsailClientTypes.AddOnRequest]? = nil,
        availabilityZone: Swift.String? = nil,
        diskName: Swift.String? = nil,
        sizeInGb: Swift.Int? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.addOns = addOns
        self.availabilityZone = availabilityZone
        self.diskName = diskName
        self.sizeInGb = sizeInGb
        self.tags = tags
    }
}

public struct CreateDiskOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct CreateDiskFromSnapshotInput: Swift.Sendable {
    /// An array of objects that represent the add-ons to enable for the new disk.
    public var addOns: [LightsailClientTypes.AddOnRequest]?
    /// The Availability Zone where you want to create the disk (us-east-2a). Choose the same Availability Zone as the Lightsail instance where you want to create the disk. Use the GetRegions operation to list the Availability Zones where Lightsail is currently available.
    /// This member is required.
    public var availabilityZone: Swift.String?
    /// The unique Lightsail disk name (my-disk).
    /// This member is required.
    public var diskName: Swift.String?
    /// The name of the disk snapshot (my-snapshot) from which to create the new storage disk. Constraint:
    ///
    /// * This parameter cannot be defined together with the source disk name parameter. The disk snapshot name and source disk name parameters are mutually exclusive.
    public var diskSnapshotName: Swift.String?
    /// The date of the automatic snapshot to use for the new disk. Use the get auto snapshots operation to identify the dates of the available automatic snapshots. Constraints:
    ///
    /// * Must be specified in YYYY-MM-DD format.
    ///
    /// * This parameter cannot be defined together with the use latest restorable auto snapshot parameter. The restore date and use latest restorable auto snapshot parameters are mutually exclusive.
    ///
    /// * Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots).
    public var restoreDate: Swift.String?
    /// The size of the disk in GB (32).
    /// This member is required.
    public var sizeInGb: Swift.Int?
    /// The name of the source disk from which the source automatic snapshot was created. Constraints:
    ///
    /// * This parameter cannot be defined together with the disk snapshot name parameter. The source disk name and disk snapshot name parameters are mutually exclusive.
    ///
    /// * Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots).
    public var sourceDiskName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?
    /// A Boolean value to indicate whether to use the latest available automatic snapshot. Constraints:
    ///
    /// * This parameter cannot be defined together with the restore date parameter. The use latest restorable auto snapshot and restore date parameters are mutually exclusive.
    ///
    /// * Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots).
    public var useLatestRestorableAutoSnapshot: Swift.Bool?

    public init(
        addOns: [LightsailClientTypes.AddOnRequest]? = nil,
        availabilityZone: Swift.String? = nil,
        diskName: Swift.String? = nil,
        diskSnapshotName: Swift.String? = nil,
        restoreDate: Swift.String? = nil,
        sizeInGb: Swift.Int? = nil,
        sourceDiskName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        useLatestRestorableAutoSnapshot: Swift.Bool? = nil
    )
    {
        self.addOns = addOns
        self.availabilityZone = availabilityZone
        self.diskName = diskName
        self.diskSnapshotName = diskSnapshotName
        self.restoreDate = restoreDate
        self.sizeInGb = sizeInGb
        self.sourceDiskName = sourceDiskName
        self.tags = tags
        self.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot
    }
}

public struct CreateDiskFromSnapshotOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct CreateDiskSnapshotInput: Swift.Sendable {
    /// The unique name of the source disk (Disk-Virginia-1). This parameter cannot be defined together with the instance name parameter. The disk name and instance name parameters are mutually exclusive.
    public var diskName: Swift.String?
    /// The name of the destination disk snapshot (my-disk-snapshot) based on the source disk.
    /// This member is required.
    public var diskSnapshotName: Swift.String?
    /// The unique name of the source instance (Amazon_Linux-512MB-Virginia-1). When this is defined, a snapshot of the instance's system volume is created. This parameter cannot be defined together with the disk name parameter. The instance name and disk name parameters are mutually exclusive.
    public var instanceName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init(
        diskName: Swift.String? = nil,
        diskSnapshotName: Swift.String? = nil,
        instanceName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.diskName = diskName
        self.diskSnapshotName = diskSnapshotName
        self.instanceName = instanceName
        self.tags = tags
    }
}

public struct CreateDiskSnapshotOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

extension LightsailClientTypes {

    public enum IpAddressType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dualstack
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [IpAddressType] {
            return [
                .dualstack,
                .ipv4,
                .ipv6
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dualstack: return "dualstack"
            case .ipv4: return "ipv4"
            case .ipv6: return "ipv6"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum OriginProtocolPolicyEnum: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case httponly
        case httpsonly
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginProtocolPolicyEnum] {
            return [
                .httponly,
                .httpsonly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .httponly: return "http-only"
            case .httpsonly: return "https-only"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the origin resource of an Amazon Lightsail content delivery network (CDN) distribution. An origin can be a Lightsail instance, bucket, container service, or load balancer. A distribution pulls content from an origin, caches it, and serves it to viewers via a worldwide network of edge servers.
    public struct InputOrigin: Swift.Sendable {
        /// The name of the origin resource.
        public var name: Swift.String?
        /// The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
        public var protocolPolicy: LightsailClientTypes.OriginProtocolPolicyEnum?
        /// The AWS Region name of the origin resource.
        public var regionName: LightsailClientTypes.RegionName?
        /// The amount of time, in seconds, that the distribution waits for a response after forwarding a request to the origin. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 30 seconds.
        public var responseTimeout: Swift.Int?

        public init(
            name: Swift.String? = nil,
            protocolPolicy: LightsailClientTypes.OriginProtocolPolicyEnum? = nil,
            regionName: LightsailClientTypes.RegionName? = nil,
            responseTimeout: Swift.Int? = nil
        )
        {
            self.name = name
            self.protocolPolicy = protocolPolicy
            self.regionName = regionName
            self.responseTimeout = responseTimeout
        }
    }
}

extension LightsailClientTypes {

    public enum ViewerMinimumTlsProtocolVersionEnum: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case tlsv112016
        case tlsv122018
        case tlsv122019
        case tlsv122021
        case sdkUnknown(Swift.String)

        public static var allCases: [ViewerMinimumTlsProtocolVersionEnum] {
            return [
                .tlsv112016,
                .tlsv122018,
                .tlsv122019,
                .tlsv122021
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .tlsv112016: return "TLSv1.1_2016"
            case .tlsv122018: return "TLSv1.2_2018"
            case .tlsv122019: return "TLSv1.2_2019"
            case .tlsv122021: return "TLSv1.2_2021"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateDistributionInput: Swift.Sendable {
    /// The bundle ID to use for the distribution. A distribution bundle describes the specifications of your distribution, such as the monthly cost and monthly network transfer quota. Use the GetDistributionBundles action to get a list of distribution bundle IDs that you can specify.
    /// This member is required.
    public var bundleId: Swift.String?
    /// An object that describes the cache behavior settings for the distribution.
    public var cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
    /// An array of objects that describe the per-path cache behavior for the distribution.
    public var cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
    /// The name of the SSL/TLS certificate that you want to attach to the distribution. Use the [GetCertificates](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetCertificates.html) action to get a list of certificate names that you can specify.
    public var certificateName: Swift.String?
    /// An object that describes the default cache behavior for the distribution.
    /// This member is required.
    public var defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
    /// The name for the distribution.
    /// This member is required.
    public var distributionName: Swift.String?
    /// The IP address type for the distribution. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
    public var ipAddressType: LightsailClientTypes.IpAddressType?
    /// An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer. The distribution pulls, caches, and serves content from the origin.
    /// This member is required.
    public var origin: LightsailClientTypes.InputOrigin?
    /// The tag keys and optional values to add to the distribution during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?
    /// The minimum TLS protocol version for the SSL/TLS certificate.
    public var viewerMinimumTlsProtocolVersion: LightsailClientTypes.ViewerMinimumTlsProtocolVersionEnum?

    public init(
        bundleId: Swift.String? = nil,
        cacheBehaviorSettings: LightsailClientTypes.CacheSettings? = nil,
        cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]? = nil,
        certificateName: Swift.String? = nil,
        defaultCacheBehavior: LightsailClientTypes.CacheBehavior? = nil,
        distributionName: Swift.String? = nil,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        origin: LightsailClientTypes.InputOrigin? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        viewerMinimumTlsProtocolVersion: LightsailClientTypes.ViewerMinimumTlsProtocolVersionEnum? = nil
    )
    {
        self.bundleId = bundleId
        self.cacheBehaviorSettings = cacheBehaviorSettings
        self.cacheBehaviors = cacheBehaviors
        self.certificateName = certificateName
        self.defaultCacheBehavior = defaultCacheBehavior
        self.distributionName = distributionName
        self.ipAddressType = ipAddressType
        self.origin = origin
        self.tags = tags
        self.viewerMinimumTlsProtocolVersion = viewerMinimumTlsProtocolVersion
    }
}

extension LightsailClientTypes {

    /// Describes the origin resource of an Amazon Lightsail content delivery network (CDN) distribution. An origin can be a Lightsail instance, bucket, or load balancer. A distribution pulls content from an origin, caches it, and serves it to viewers via a worldwide network of edge servers.
    public struct Origin: Swift.Sendable {
        /// The name of the origin resource.
        public var name: Swift.String?
        /// The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
        public var protocolPolicy: LightsailClientTypes.OriginProtocolPolicyEnum?
        /// The AWS Region name of the origin resource.
        public var regionName: LightsailClientTypes.RegionName?
        /// The resource type of the origin resource (Instance).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The amount of time, in seconds, that the distribution waits for a response after forwarding a request to the origin. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 30 seconds.
        public var responseTimeout: Swift.Int?

        public init(
            name: Swift.String? = nil,
            protocolPolicy: LightsailClientTypes.OriginProtocolPolicyEnum? = nil,
            regionName: LightsailClientTypes.RegionName? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            responseTimeout: Swift.Int? = nil
        )
        {
            self.name = name
            self.protocolPolicy = protocolPolicy
            self.regionName = regionName
            self.resourceType = resourceType
            self.responseTimeout = responseTimeout
        }
    }
}

extension LightsailClientTypes {

    /// Describes an Amazon Lightsail content delivery network (CDN) distribution.
    public struct LightsailDistribution: Swift.Sendable {
        /// Indicates whether the bundle that is currently applied to your distribution, specified using the distributionName parameter, can be changed to another bundle. Use the UpdateDistributionBundle action to change your distribution's bundle.
        public var ableToUpdateBundle: Swift.Bool?
        /// The alternate domain names of the distribution.
        public var alternativeDomainNames: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the distribution.
        public var arn: Swift.String?
        /// The ID of the bundle currently applied to the distribution.
        public var bundleId: Swift.String?
        /// An object that describes the cache behavior settings of the distribution.
        public var cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
        /// An array of objects that describe the per-path cache behavior of the distribution.
        public var cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
        /// The name of the SSL/TLS certificate attached to the distribution, if any.
        public var certificateName: Swift.String?
        /// The timestamp when the distribution was created.
        public var createdAt: Foundation.Date?
        /// An object that describes the default cache behavior of the distribution.
        public var defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
        /// The domain name of the distribution.
        public var domainName: Swift.String?
        /// The IP address type of the distribution. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6.
        public var ipAddressType: LightsailClientTypes.IpAddressType?
        /// Indicates whether the distribution is enabled.
        public var isEnabled: Swift.Bool?
        /// An object that describes the location of the distribution, such as the Amazon Web Services Region and Availability Zone. Lightsail distributions are global resources that can reference an origin in any Amazon Web Services Region, and distribute its content globally. However, all distributions are located in the us-east-1 Region.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the distribution.
        public var name: Swift.String?
        /// An object that describes the origin resource of the distribution, such as a Lightsail instance, bucket, or load balancer. The distribution pulls, caches, and serves content from the origin.
        public var origin: LightsailClientTypes.Origin?
        /// The public DNS of the origin.
        public var originPublicDNS: Swift.String?
        /// The Lightsail resource type (Distribution).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The status of the distribution.
        public var status: Swift.String?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail distribution. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?
        /// The minimum TLS protocol version that the distribution can use to communicate with viewers.
        public var viewerMinimumTlsProtocolVersion: Swift.String?

        public init(
            ableToUpdateBundle: Swift.Bool? = nil,
            alternativeDomainNames: [Swift.String]? = nil,
            arn: Swift.String? = nil,
            bundleId: Swift.String? = nil,
            cacheBehaviorSettings: LightsailClientTypes.CacheSettings? = nil,
            cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]? = nil,
            certificateName: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            defaultCacheBehavior: LightsailClientTypes.CacheBehavior? = nil,
            domainName: Swift.String? = nil,
            ipAddressType: LightsailClientTypes.IpAddressType? = nil,
            isEnabled: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            origin: LightsailClientTypes.Origin? = nil,
            originPublicDNS: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            status: Swift.String? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            viewerMinimumTlsProtocolVersion: Swift.String? = nil
        )
        {
            self.ableToUpdateBundle = ableToUpdateBundle
            self.alternativeDomainNames = alternativeDomainNames
            self.arn = arn
            self.bundleId = bundleId
            self.cacheBehaviorSettings = cacheBehaviorSettings
            self.cacheBehaviors = cacheBehaviors
            self.certificateName = certificateName
            self.createdAt = createdAt
            self.defaultCacheBehavior = defaultCacheBehavior
            self.domainName = domainName
            self.ipAddressType = ipAddressType
            self.isEnabled = isEnabled
            self.location = location
            self.name = name
            self.origin = origin
            self.originPublicDNS = originPublicDNS
            self.resourceType = resourceType
            self.status = status
            self.supportCode = supportCode
            self.tags = tags
            self.viewerMinimumTlsProtocolVersion = viewerMinimumTlsProtocolVersion
        }
    }
}

public struct CreateDistributionOutput: Swift.Sendable {
    /// An object that describes the distribution created.
    public var distribution: LightsailClientTypes.LightsailDistribution?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        distribution: LightsailClientTypes.LightsailDistribution? = nil,
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.distribution = distribution
        self.operation = operation
    }
}

public struct CreateDomainInput: Swift.Sendable {
    /// The domain name to manage (example.com).
    /// This member is required.
    public var domainName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init(
        domainName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.domainName = domainName
        self.tags = tags
    }
}

public struct CreateDomainOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

extension LightsailClientTypes {

    /// Describes a domain recordset entry.
    public struct DomainEntry: Swift.Sendable {
        /// The ID of the domain recordset entry.
        public var id: Swift.String?
        /// When true, specifies whether the domain entry is an alias used by the Lightsail load balancer, Lightsail container service, Lightsail content delivery network (CDN) distribution, or another Amazon Web Services resource. You can include an alias (A type) record in your request, which points to the DNS name of a load balancer, container service, CDN distribution, or other Amazon Web Services resource and routes traffic to that resource.
        public var isAlias: Swift.Bool?
        /// The name of the domain.
        public var name: Swift.String?
        /// (Discontinued) The options for the domain entry. In releases prior to November 29, 2017, this parameter was not included in the API response. It is now discontinued.
        @available(*, deprecated)
        public var options: [Swift.String: Swift.String]?
        /// The target IP address (192.0.2.0), or AWS name server (ns-111.awsdns-22.com.). For Lightsail load balancers, the value looks like ab1234c56789c6b86aba6fb203d443bc-123456789.us-east-2.elb.amazonaws.com. For Lightsail distributions, the value looks like exampled1182ne.cloudfront.net. For Lightsail container services, the value looks like container-service-1.example23scljs.us-west-2.cs.amazonlightsail.com. Be sure to also set isAlias to true when setting up an A record for a Lightsail load balancer, distribution, or container service.
        public var target: Swift.String?
        /// The type of domain entry, such as address for IPv4 (A), address for IPv6 (AAAA), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority (SOA), service locator (SRV), or text (TXT). The following domain entry types can be used:
        ///
        /// * A
        ///
        /// * AAAA
        ///
        /// * CNAME
        ///
        /// * MX
        ///
        /// * NS
        ///
        /// * SOA
        ///
        /// * SRV
        ///
        /// * TXT
        public var type: Swift.String?

        public init(
            id: Swift.String? = nil,
            isAlias: Swift.Bool? = nil,
            name: Swift.String? = nil,
            options: [Swift.String: Swift.String]? = nil,
            target: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.id = id
            self.isAlias = isAlias
            self.name = name
            self.options = options
            self.target = target
            self.type = type
        }
    }
}

public struct CreateDomainEntryInput: Swift.Sendable {
    /// An array of key-value pairs containing information about the domain entry request.
    /// This member is required.
    public var domainEntry: LightsailClientTypes.DomainEntry?
    /// The domain name (example.com) for which you want to create the domain entry.
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        domainEntry: LightsailClientTypes.DomainEntry? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.domainEntry = domainEntry
        self.domainName = domainName
    }
}

public struct CreateDomainEntryOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct CreateGUISessionAccessDetailsInput: Swift.Sendable {
    /// The resource name.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        resourceName: Swift.String? = nil
    )
    {
        self.resourceName = resourceName
    }
}

extension LightsailClientTypes {

    /// Describes a web-based, remote graphical user interface (GUI), NICE DCV session. The session is used to access a virtual computer’s operating system or application.
    public struct Session: Swift.Sendable {
        /// When true, this Boolean value indicates the primary session for the specified resource.
        public var isPrimary: Swift.Bool?
        /// The session name.
        public var name: Swift.String?
        /// The session URL.
        public var url: Swift.String?

        public init(
            isPrimary: Swift.Bool? = nil,
            name: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.isPrimary = isPrimary
            self.name = name
            self.url = url
        }
    }
}

extension LightsailClientTypes.Session: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Session(isPrimary: \(Swift.String(describing: isPrimary)), name: \(Swift.String(describing: name)), url: \"CONTENT_REDACTED\")"}
}

extension LightsailClientTypes {

    public enum Status: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failedinstancecreation
        case failedstartingguisession
        case failedstoppingguisession
        case notstarted
        case settingupinstance
        case startexpired
        case started
        case starting
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .failedinstancecreation,
                .failedstartingguisession,
                .failedstoppingguisession,
                .notstarted,
                .settingupinstance,
                .startexpired,
                .started,
                .starting,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failedinstancecreation: return "failedInstanceCreation"
            case .failedstartingguisession: return "failedStartingGUISession"
            case .failedstoppingguisession: return "failedStoppingGUISession"
            case .notstarted: return "notStarted"
            case .settingupinstance: return "settingUpInstance"
            case .startexpired: return "startExpired"
            case .started: return "started"
            case .starting: return "starting"
            case .stopped: return "stopped"
            case .stopping: return "stopping"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateGUISessionAccessDetailsOutput: Swift.Sendable {
    /// The reason the operation failed.
    public var failureReason: Swift.String?
    /// The percentage of completion for the operation.
    public var percentageComplete: Swift.Int?
    /// The resource name.
    public var resourceName: Swift.String?
    /// Returns information about the specified NICE DCV GUI session.
    public var sessions: [LightsailClientTypes.Session]?
    /// The status of the operation.
    public var status: LightsailClientTypes.Status?

    public init(
        failureReason: Swift.String? = nil,
        percentageComplete: Swift.Int? = nil,
        resourceName: Swift.String? = nil,
        sessions: [LightsailClientTypes.Session]? = nil,
        status: LightsailClientTypes.Status? = nil
    )
    {
        self.failureReason = failureReason
        self.percentageComplete = percentageComplete
        self.resourceName = resourceName
        self.sessions = sessions
        self.status = status
    }
}

public struct CreateInstancesInput: Swift.Sendable {
    /// An array of objects representing the add-ons to enable for the new instance.
    public var addOns: [LightsailClientTypes.AddOnRequest]?
    /// The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). You can get a list of Availability Zones by using the [get regions](http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html) operation. Be sure to add the include Availability Zones parameter to your request.
    /// This member is required.
    public var availabilityZone: Swift.String?
    /// The ID for a virtual private server image (app_wordpress_x_x or app_lamp_x_x). Use the get blueprints operation to return a list of available images (or blueprints). Use active blueprints when creating new instances. Inactive blueprints are listed to support customers with existing instances and are not necessarily available to create new instances. Blueprints are marked inactive when they become outdated due to operating system updates or new application releases.
    /// This member is required.
    public var blueprintId: Swift.String?
    /// The bundle of specification information for your virtual private server (or instance), including the pricing plan (medium_x_x).
    /// This member is required.
    public var bundleId: Swift.String?
    /// (Discontinued) The name for your custom image. In releases prior to June 12, 2017, this parameter was ignored by the API. It is now discontinued.
    @available(*, deprecated)
    public var customImageName: Swift.String?
    /// The names to use for your new Lightsail instances. Separate multiple values using quotation marks and commas, for example: ["MyFirstInstance","MySecondInstance"]
    /// This member is required.
    public var instanceNames: [Swift.String]?
    /// The IP address type for the instance. The possible values are ipv4 for IPv4 only, ipv6 for IPv6 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
    public var ipAddressType: LightsailClientTypes.IpAddressType?
    /// The name of your key pair.
    public var keyPairName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?
    /// A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update. Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg. For a complete list, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/compare-options-choose-lightsail-instance-image).
    public var userData: Swift.String?

    public init(
        addOns: [LightsailClientTypes.AddOnRequest]? = nil,
        availabilityZone: Swift.String? = nil,
        blueprintId: Swift.String? = nil,
        bundleId: Swift.String? = nil,
        customImageName: Swift.String? = nil,
        instanceNames: [Swift.String]? = nil,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        keyPairName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        userData: Swift.String? = nil
    )
    {
        self.addOns = addOns
        self.availabilityZone = availabilityZone
        self.blueprintId = blueprintId
        self.bundleId = bundleId
        self.customImageName = customImageName
        self.instanceNames = instanceNames
        self.ipAddressType = ipAddressType
        self.keyPairName = keyPairName
        self.tags = tags
        self.userData = userData
    }
}

public struct CreateInstancesOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct CreateInstancesFromSnapshotInput: Swift.Sendable {
    /// An array of objects representing the add-ons to enable for the new instance.
    public var addOns: [LightsailClientTypes.AddOnRequest]?
    /// An object containing information about one or more disk mappings.
    public var attachedDiskMapping: [Swift.String: [LightsailClientTypes.DiskMap]]?
    /// The Availability Zone where you want to create your instances. Use the following formatting: us-east-2a (case sensitive). You can get a list of Availability Zones by using the [get regions](http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html) operation. Be sure to add the include Availability Zones parameter to your request.
    /// This member is required.
    public var availabilityZone: Swift.String?
    /// The bundle of specification information for your virtual private server (or instance), including the pricing plan (micro_x_x).
    /// This member is required.
    public var bundleId: Swift.String?
    /// The names for your new instances.
    /// This member is required.
    public var instanceNames: [Swift.String]?
    /// The name of the instance snapshot on which you are basing your new instances. Use the get instance snapshots operation to return information about your existing snapshots. Constraint:
    ///
    /// * This parameter cannot be defined together with the source instance name parameter. The instance snapshot name and source instance name parameters are mutually exclusive.
    public var instanceSnapshotName: Swift.String?
    /// The IP address type for the instance. The possible values are ipv4 for IPv4 only, ipv6 for IPv6 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
    public var ipAddressType: LightsailClientTypes.IpAddressType?
    /// The name for your key pair.
    public var keyPairName: Swift.String?
    /// The date of the automatic snapshot to use for the new instance. Use the get auto snapshots operation to identify the dates of the available automatic snapshots. Constraints:
    ///
    /// * Must be specified in YYYY-MM-DD format.
    ///
    /// * This parameter cannot be defined together with the use latest restorable auto snapshot parameter. The restore date and use latest restorable auto snapshot parameters are mutually exclusive.
    ///
    /// * Define this parameter only when creating a new instance from an automatic snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots).
    public var restoreDate: Swift.String?
    /// The name of the source instance from which the source automatic snapshot was created. Constraints:
    ///
    /// * This parameter cannot be defined together with the instance snapshot name parameter. The source instance name and instance snapshot name parameters are mutually exclusive.
    ///
    /// * Define this parameter only when creating a new instance from an automatic snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots).
    public var sourceInstanceName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?
    /// A Boolean value to indicate whether to use the latest available automatic snapshot. Constraints:
    ///
    /// * This parameter cannot be defined together with the restore date parameter. The use latest restorable auto snapshot and restore date parameters are mutually exclusive.
    ///
    /// * Define this parameter only when creating a new instance from an automatic snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots).
    public var useLatestRestorableAutoSnapshot: Swift.Bool?
    /// You can create a launch script that configures a server with additional user data. For example, apt-get -y update. Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg. For a complete list, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/compare-options-choose-lightsail-instance-image).
    public var userData: Swift.String?

    public init(
        addOns: [LightsailClientTypes.AddOnRequest]? = nil,
        attachedDiskMapping: [Swift.String: [LightsailClientTypes.DiskMap]]? = nil,
        availabilityZone: Swift.String? = nil,
        bundleId: Swift.String? = nil,
        instanceNames: [Swift.String]? = nil,
        instanceSnapshotName: Swift.String? = nil,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        keyPairName: Swift.String? = nil,
        restoreDate: Swift.String? = nil,
        sourceInstanceName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        useLatestRestorableAutoSnapshot: Swift.Bool? = nil,
        userData: Swift.String? = nil
    )
    {
        self.addOns = addOns
        self.attachedDiskMapping = attachedDiskMapping
        self.availabilityZone = availabilityZone
        self.bundleId = bundleId
        self.instanceNames = instanceNames
        self.instanceSnapshotName = instanceSnapshotName
        self.ipAddressType = ipAddressType
        self.keyPairName = keyPairName
        self.restoreDate = restoreDate
        self.sourceInstanceName = sourceInstanceName
        self.tags = tags
        self.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot
        self.userData = userData
    }
}

public struct CreateInstancesFromSnapshotOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct CreateInstanceSnapshotInput: Swift.Sendable {
    /// The Lightsail instance on which to base your snapshot.
    /// This member is required.
    public var instanceName: Swift.String?
    /// The name for your new snapshot.
    /// This member is required.
    public var instanceSnapshotName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init(
        instanceName: Swift.String? = nil,
        instanceSnapshotName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.instanceName = instanceName
        self.instanceSnapshotName = instanceSnapshotName
        self.tags = tags
    }
}

public struct CreateInstanceSnapshotOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct CreateKeyPairInput: Swift.Sendable {
    /// The name for your new key pair.
    /// This member is required.
    public var keyPairName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init(
        keyPairName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.keyPairName = keyPairName
        self.tags = tags
    }
}

extension LightsailClientTypes {

    /// Describes an SSH key pair.
    public struct KeyPair: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the key pair (arn:aws:lightsail:us-east-2:123456789101:KeyPair/05859e3d-331d-48ba-9034-12345EXAMPLE).
        public var arn: Swift.String?
        /// The timestamp when the key pair was created (1479816991.349).
        public var createdAt: Foundation.Date?
        /// The RSA fingerprint of the key pair.
        public var fingerprint: Swift.String?
        /// The region name and Availability Zone where the key pair was created.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The friendly name of the SSH key pair.
        public var name: Swift.String?
        /// The resource type (usually KeyPair).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            fingerprint: Swift.String? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.fingerprint = fingerprint
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.supportCode = supportCode
            self.tags = tags
        }
    }
}

public struct CreateKeyPairOutput: Swift.Sendable {
    /// An array of key-value pairs containing information about the new key pair you just created.
    public var keyPair: LightsailClientTypes.KeyPair?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?
    /// A base64-encoded RSA private key.
    public var privateKeyBase64: Swift.String?
    /// A base64-encoded public key of the ssh-rsa type.
    public var publicKeyBase64: Swift.String?

    public init(
        keyPair: LightsailClientTypes.KeyPair? = nil,
        operation: LightsailClientTypes.Operation? = nil,
        privateKeyBase64: Swift.String? = nil,
        publicKeyBase64: Swift.String? = nil
    )
    {
        self.keyPair = keyPair
        self.operation = operation
        self.privateKeyBase64 = privateKeyBase64
        self.publicKeyBase64 = publicKeyBase64
    }
}

public struct CreateLoadBalancerInput: Swift.Sendable {
    /// The optional alternative domains and subdomains to use with your SSL/TLS certificate (www.example.com, example.com, m.example.com, blog.example.com).
    public var certificateAlternativeNames: [Swift.String]?
    /// The domain name with which your certificate is associated (example.com). If you specify certificateDomainName, then certificateName is required (and vice-versa).
    public var certificateDomainName: Swift.String?
    /// The name of the SSL/TLS certificate. If you specify certificateName, then certificateDomainName is required (and vice-versa).
    public var certificateName: Swift.String?
    /// The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail uses the root path of your website ("/"). You may want to specify a custom health check path other than the root of your application if your home page loads slowly or has a lot of media or scripting on it.
    public var healthCheckPath: Swift.String?
    /// The instance port where you're creating your load balancer.
    /// This member is required.
    public var instancePort: Swift.Int?
    /// The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, ipv6 for IPv6 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
    public var ipAddressType: LightsailClientTypes.IpAddressType?
    /// The name of your load balancer.
    /// This member is required.
    public var loadBalancerName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?
    /// The name of the TLS policy to apply to the load balancer. Use the [GetLoadBalancerTlsPolicies](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html) action to get a list of TLS policy names that you can specify. For more information about load balancer TLS policies, see [Configuring TLS security policies on your Amazon Lightsail load balancers](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy) in the Amazon Lightsail Developer Guide.
    public var tlsPolicyName: Swift.String?

    public init(
        certificateAlternativeNames: [Swift.String]? = nil,
        certificateDomainName: Swift.String? = nil,
        certificateName: Swift.String? = nil,
        healthCheckPath: Swift.String? = nil,
        instancePort: Swift.Int? = 0,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        loadBalancerName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        tlsPolicyName: Swift.String? = nil
    )
    {
        self.certificateAlternativeNames = certificateAlternativeNames
        self.certificateDomainName = certificateDomainName
        self.certificateName = certificateName
        self.healthCheckPath = healthCheckPath
        self.instancePort = instancePort
        self.ipAddressType = ipAddressType
        self.loadBalancerName = loadBalancerName
        self.tags = tags
        self.tlsPolicyName = tlsPolicyName
    }
}

public struct CreateLoadBalancerOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct CreateLoadBalancerTlsCertificateInput: Swift.Sendable {
    /// An array of strings listing alternative domains and subdomains for your SSL/TLS certificate. Lightsail will de-dupe the names for you. You can have a maximum of 9 alternative names (in addition to the 1 primary domain). We do not support wildcards (*.example.com).
    public var certificateAlternativeNames: [Swift.String]?
    /// The domain name (example.com) for your SSL/TLS certificate.
    /// This member is required.
    public var certificateDomainName: Swift.String?
    /// The SSL/TLS certificate name. You can have up to 10 certificates in your account at one time. Each Lightsail load balancer can have up to 2 certificates associated with it at one time. There is also an overall limit to the number of certificates that can be issue in a 365-day period. For more information, see [Limits](http://docs.aws.amazon.com/acm/latest/userguide/acm-limits.html).
    /// This member is required.
    public var certificateName: Swift.String?
    /// The load balancer name where you want to create the SSL/TLS certificate.
    /// This member is required.
    public var loadBalancerName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init(
        certificateAlternativeNames: [Swift.String]? = nil,
        certificateDomainName: Swift.String? = nil,
        certificateName: Swift.String? = nil,
        loadBalancerName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.certificateAlternativeNames = certificateAlternativeNames
        self.certificateDomainName = certificateDomainName
        self.certificateName = certificateName
        self.loadBalancerName = loadBalancerName
        self.tags = tags
    }
}

public struct CreateLoadBalancerTlsCertificateOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct CreateRelationalDatabaseInput: Swift.Sendable {
    /// The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format. You can get a list of Availability Zones by using the get regions operation. Be sure to add the include relational database Availability Zones parameter to your request.
    public var availabilityZone: Swift.String?
    /// The meaning of this parameter differs according to the database engine you use. MySQL The name of the database to create when the Lightsail database resource is created. If this parameter isn't specified, no database is created in the database resource. Constraints:
    ///
    /// * Must contain 1 to 64 letters or numbers.
    ///
    /// * Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0- 9).
    ///
    /// * Can't be a word reserved by the specified database engine. For more information about reserved words in MySQL, see the Keywords and Reserved Words articles for [MySQL 5.6](https://dev.mysql.com/doc/refman/5.6/en/keywords.html), [MySQL 5.7](https://dev.mysql.com/doc/refman/5.7/en/keywords.html), and [MySQL 8.0](https://dev.mysql.com/doc/refman/8.0/en/keywords.html).
    ///
    ///
    /// PostgreSQL The name of the database to create when the Lightsail database resource is created. If this parameter isn't specified, a database named postgres is created in the database resource. Constraints:
    ///
    /// * Must contain 1 to 63 letters or numbers.
    ///
    /// * Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0- 9).
    ///
    /// * Can't be a word reserved by the specified database engine. For more information about reserved words in PostgreSQL, see the SQL Key Words articles for [PostgreSQL 9.6](https://www.postgresql.org/docs/9.6/sql-keywords-appendix.html), [PostgreSQL 10](https://www.postgresql.org/docs/10/sql-keywords-appendix.html), [PostgreSQL 11](https://www.postgresql.org/docs/11/sql-keywords-appendix.html), and [PostgreSQL 12](https://www.postgresql.org/docs/12/sql-keywords-appendix.html).
    /// This member is required.
    public var masterDatabaseName: Swift.String?
    /// The password for the master user. The password can include any printable ASCII character except "/", """, or "@". It cannot contain spaces. MySQL Constraints: Must contain from 8 to 41 characters. PostgreSQL Constraints: Must contain from 8 to 128 characters.
    public var masterUserPassword: Swift.String?
    /// The name for the master user. MySQL Constraints:
    ///
    /// * Required for MySQL.
    ///
    /// * Must be 1 to 16 letters or numbers. Can contain underscores.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't be a reserved word for the chosen database engine. For more information about reserved words in MySQL 5.6 or 5.7, see the Keywords and Reserved Words articles for [MySQL 5.6](https://dev.mysql.com/doc/refman/5.6/en/keywords.html), [MySQL 5.7](https://dev.mysql.com/doc/refman/5.7/en/keywords.html), or [MySQL 8.0](https://dev.mysql.com/doc/refman/8.0/en/keywords.html).
    ///
    ///
    /// PostgreSQL Constraints:
    ///
    /// * Required for PostgreSQL.
    ///
    /// * Must be 1 to 63 letters or numbers. Can contain underscores.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't be a reserved word for the chosen database engine. For more information about reserved words in MySQL 5.6 or 5.7, see the Keywords and Reserved Words articles for [PostgreSQL 9.6](https://www.postgresql.org/docs/9.6/sql-keywords-appendix.html), [PostgreSQL 10](https://www.postgresql.org/docs/10/sql-keywords-appendix.html), [PostgreSQL 11](https://www.postgresql.org/docs/11/sql-keywords-appendix.html), and [PostgreSQL 12](https://www.postgresql.org/docs/12/sql-keywords-appendix.html).
    /// This member is required.
    public var masterUsername: Swift.String?
    /// The daily time range during which automated backups are created for your new database if automated backups are enabled. The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. For more information about the preferred backup window time blocks for each region, see the [Working With Backups](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow) guide in the Amazon Relational Database Service documentation. Constraints:
    ///
    /// * Must be in the hh24:mi-hh24:mi format. Example: 16:00-16:30
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?
    /// The weekly time range during which system maintenance can occur on your new database. The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. Constraints:
    ///
    /// * Must be in the ddd:hh24:mi-ddd:hh24:mi format.
    ///
    /// * Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
    ///
    /// * Must be at least 30 minutes.
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Example: Tue:17:00-Tue:17:30
    public var preferredMaintenanceWindow: Swift.String?
    /// Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
    public var publiclyAccessible: Swift.Bool?
    /// The blueprint ID for your new database. A blueprint describes the major engine version of a database. You can get a list of database blueprints IDs by using the get relational database blueprints operation.
    /// This member is required.
    public var relationalDatabaseBlueprintId: Swift.String?
    /// The bundle ID for your new database. A bundle describes the performance specifications for your database. You can get a list of database bundle IDs by using the get relational database bundles operation.
    /// This member is required.
    public var relationalDatabaseBundleId: Swift.String?
    /// The name to use for your new Lightsail database resource. Constraints:
    ///
    /// * Must contain from 2 to 255 alphanumeric characters, or hyphens.
    ///
    /// * The first and last character must be a letter or number.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init(
        availabilityZone: Swift.String? = nil,
        masterDatabaseName: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        relationalDatabaseBlueprintId: Swift.String? = nil,
        relationalDatabaseBundleId: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.masterDatabaseName = masterDatabaseName
        self.masterUserPassword = masterUserPassword
        self.masterUsername = masterUsername
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId
        self.relationalDatabaseBundleId = relationalDatabaseBundleId
        self.relationalDatabaseName = relationalDatabaseName
        self.tags = tags
    }
}

extension CreateRelationalDatabaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRelationalDatabaseInput(availabilityZone: \(Swift.String(describing: availabilityZone)), masterDatabaseName: \(Swift.String(describing: masterDatabaseName)), masterUsername: \(Swift.String(describing: masterUsername)), preferredBackupWindow: \(Swift.String(describing: preferredBackupWindow)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), relationalDatabaseBlueprintId: \(Swift.String(describing: relationalDatabaseBlueprintId)), relationalDatabaseBundleId: \(Swift.String(describing: relationalDatabaseBundleId)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)), tags: \(Swift.String(describing: tags)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

public struct CreateRelationalDatabaseOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct CreateRelationalDatabaseFromSnapshotInput: Swift.Sendable {
    /// The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format. You can get a list of Availability Zones by using the get regions operation. Be sure to add the include relational database Availability Zones parameter to your request.
    public var availabilityZone: Swift.String?
    /// Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
    public var publiclyAccessible: Swift.Bool?
    /// The bundle ID for your new database. A bundle describes the performance specifications for your database. You can get a list of database bundle IDs by using the get relational database bundles operation. When creating a new database from a snapshot, you cannot choose a bundle that is smaller than the bundle of the source database.
    public var relationalDatabaseBundleId: Swift.String?
    /// The name to use for your new Lightsail database resource. Constraints:
    ///
    /// * Must contain from 2 to 255 alphanumeric characters, or hyphens.
    ///
    /// * The first and last character must be a letter or number.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// The name of the database snapshot from which to create your new database.
    public var relationalDatabaseSnapshotName: Swift.String?
    /// The date and time to restore your database from. Constraints:
    ///
    /// * Must be before the latest restorable time for the database.
    ///
    /// * Cannot be specified if the use latest restorable time parameter is true.
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use a restore time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the restore time.
    public var restoreTime: Foundation.Date?
    /// The name of the source database.
    public var sourceRelationalDatabaseName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?
    /// Specifies whether your database is restored from the latest backup time. A value of true restores from the latest backup time. Default: false Constraints: Cannot be specified if the restore time parameter is provided.
    public var useLatestRestorableTime: Swift.Bool?

    public init(
        availabilityZone: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        relationalDatabaseBundleId: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil,
        relationalDatabaseSnapshotName: Swift.String? = nil,
        restoreTime: Foundation.Date? = nil,
        sourceRelationalDatabaseName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        useLatestRestorableTime: Swift.Bool? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.publiclyAccessible = publiclyAccessible
        self.relationalDatabaseBundleId = relationalDatabaseBundleId
        self.relationalDatabaseName = relationalDatabaseName
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
        self.restoreTime = restoreTime
        self.sourceRelationalDatabaseName = sourceRelationalDatabaseName
        self.tags = tags
        self.useLatestRestorableTime = useLatestRestorableTime
    }
}

public struct CreateRelationalDatabaseFromSnapshotOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct CreateRelationalDatabaseSnapshotInput: Swift.Sendable {
    /// The name of the database on which to base your new snapshot.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// The name for your new database snapshot. Constraints:
    ///
    /// * Must contain from 2 to 255 alphanumeric characters, or hyphens.
    ///
    /// * The first and last character must be a letter or number.
    /// This member is required.
    public var relationalDatabaseSnapshotName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init(
        relationalDatabaseName: Swift.String? = nil,
        relationalDatabaseSnapshotName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
        self.tags = tags
    }
}

public struct CreateRelationalDatabaseSnapshotOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteAlarmInput: Swift.Sendable {
    /// The name of the alarm to delete.
    /// This member is required.
    public var alarmName: Swift.String?

    public init(
        alarmName: Swift.String? = nil
    )
    {
        self.alarmName = alarmName
    }
}

public struct DeleteAlarmOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteAutoSnapshotInput: Swift.Sendable {
    /// The date of the automatic snapshot to delete in YYYY-MM-DD format. Use the get auto snapshots operation to get the available automatic snapshots for a resource.
    /// This member is required.
    public var date: Swift.String?
    /// The name of the source instance or disk from which to delete the automatic snapshot.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        date: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.date = date
        self.resourceName = resourceName
    }
}

public struct DeleteAutoSnapshotOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteBucketInput: Swift.Sendable {
    /// The name of the bucket to delete. Use the [GetBuckets](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBuckets.html) action to get a list of bucket names that you can specify.
    /// This member is required.
    public var bucketName: Swift.String?
    /// A Boolean value that indicates whether to force delete the bucket. You must force delete the bucket if it has one of the following conditions:
    ///
    /// * The bucket is the origin of a distribution.
    ///
    /// * The bucket has instances that were granted access to it using the [SetResourceAccessForBucket](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html) action.
    ///
    /// * The bucket has objects.
    ///
    /// * The bucket has access keys.
    ///
    ///
    /// Force deleting a bucket might impact other resources that rely on the bucket, such as instances, distributions, or software that use the issued access keys.
    public var forceDelete: Swift.Bool?

    public init(
        bucketName: Swift.String? = nil,
        forceDelete: Swift.Bool? = nil
    )
    {
        self.bucketName = bucketName
        self.forceDelete = forceDelete
    }
}

public struct DeleteBucketOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteBucketAccessKeyInput: Swift.Sendable {
    /// The ID of the access key to delete. Use the [GetBucketAccessKeys](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketAccessKeys.html) action to get a list of access key IDs that you can specify.
    /// This member is required.
    public var accessKeyId: Swift.String?
    /// The name of the bucket that the access key belongs to.
    /// This member is required.
    public var bucketName: Swift.String?

    public init(
        accessKeyId: Swift.String? = nil,
        bucketName: Swift.String? = nil
    )
    {
        self.accessKeyId = accessKeyId
        self.bucketName = bucketName
    }
}

public struct DeleteBucketAccessKeyOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteCertificateInput: Swift.Sendable {
    /// The name of the certificate to delete. Use the GetCertificates action to get a list of certificate names that you can specify.
    /// This member is required.
    public var certificateName: Swift.String?

    public init(
        certificateName: Swift.String? = nil
    )
    {
        self.certificateName = certificateName
    }
}

public struct DeleteCertificateOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteContactMethodInput: Swift.Sendable {
    /// The protocol that will be deleted, such as Email or SMS (text messaging). To delete an Email and an SMS contact method if you added both, you must run separate DeleteContactMethod actions to delete each protocol.
    /// This member is required.
    public var `protocol`: LightsailClientTypes.ContactProtocol?

    public init(
        `protocol`: LightsailClientTypes.ContactProtocol? = nil
    )
    {
        self.`protocol` = `protocol`
    }
}

public struct DeleteContactMethodOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteContainerImageInput: Swift.Sendable {
    /// The name of the container image to delete from the container service. Use the GetContainerImages action to get the name of the container images that are registered to a container service. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (:). For example, :container-service-1.mystaticwebsite.1. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, nginx:latest or nginx.
    /// This member is required.
    public var image: Swift.String?
    /// The name of the container service for which to delete a registered container image.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        image: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.image = image
        self.serviceName = serviceName
    }
}

public struct DeleteContainerImageOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteContainerServiceInput: Swift.Sendable {
    /// The name of the container service to delete.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

public struct DeleteContainerServiceOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteDiskInput: Swift.Sendable {
    /// The unique name of the disk you want to delete (my-disk).
    /// This member is required.
    public var diskName: Swift.String?
    /// A Boolean value to indicate whether to delete all add-ons for the disk.
    public var forceDeleteAddOns: Swift.Bool?

    public init(
        diskName: Swift.String? = nil,
        forceDeleteAddOns: Swift.Bool? = nil
    )
    {
        self.diskName = diskName
        self.forceDeleteAddOns = forceDeleteAddOns
    }
}

public struct DeleteDiskOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteDiskSnapshotInput: Swift.Sendable {
    /// The name of the disk snapshot you want to delete (my-disk-snapshot).
    /// This member is required.
    public var diskSnapshotName: Swift.String?

    public init(
        diskSnapshotName: Swift.String? = nil
    )
    {
        self.diskSnapshotName = diskSnapshotName
    }
}

public struct DeleteDiskSnapshotOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteDistributionInput: Swift.Sendable {
    /// The name of the distribution to delete. Use the GetDistributions action to get a list of distribution names that you can specify.
    public var distributionName: Swift.String?

    public init(
        distributionName: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
    }
}

public struct DeleteDistributionOutput: Swift.Sendable {
    /// An object that describes the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct DeleteDomainInput: Swift.Sendable {
    /// The specific domain name to delete.
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

public struct DeleteDomainOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct DeleteDomainEntryInput: Swift.Sendable {
    /// An array of key-value pairs containing information about your domain entries.
    /// This member is required.
    public var domainEntry: LightsailClientTypes.DomainEntry?
    /// The name of the domain entry to delete.
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        domainEntry: LightsailClientTypes.DomainEntry? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.domainEntry = domainEntry
        self.domainName = domainName
    }
}

public struct DeleteDomainEntryOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct DeleteInstanceInput: Swift.Sendable {
    /// A Boolean value to indicate whether to delete all add-ons for the instance.
    public var forceDeleteAddOns: Swift.Bool?
    /// The name of the instance to delete.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        forceDeleteAddOns: Swift.Bool? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.forceDeleteAddOns = forceDeleteAddOns
        self.instanceName = instanceName
    }
}

public struct DeleteInstanceOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteInstanceSnapshotInput: Swift.Sendable {
    /// The name of the snapshot to delete.
    /// This member is required.
    public var instanceSnapshotName: Swift.String?

    public init(
        instanceSnapshotName: Swift.String? = nil
    )
    {
        self.instanceSnapshotName = instanceSnapshotName
    }
}

public struct DeleteInstanceSnapshotOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteKeyPairInput: Swift.Sendable {
    /// The RSA fingerprint of the Lightsail default key pair to delete. The expectedFingerprint parameter is required only when specifying to delete a Lightsail default key pair.
    public var expectedFingerprint: Swift.String?
    /// The name of the key pair to delete.
    /// This member is required.
    public var keyPairName: Swift.String?

    public init(
        expectedFingerprint: Swift.String? = nil,
        keyPairName: Swift.String? = nil
    )
    {
        self.expectedFingerprint = expectedFingerprint
        self.keyPairName = keyPairName
    }
}

public struct DeleteKeyPairOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct DeleteKnownHostKeysInput: Swift.Sendable {
    /// The name of the instance for which you want to reset the host key or certificate.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

public struct DeleteKnownHostKeysOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteLoadBalancerInput: Swift.Sendable {
    /// The name of the load balancer you want to delete.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init(
        loadBalancerName: Swift.String? = nil
    )
    {
        self.loadBalancerName = loadBalancerName
    }
}

public struct DeleteLoadBalancerOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteLoadBalancerTlsCertificateInput: Swift.Sendable {
    /// The SSL/TLS certificate name.
    /// This member is required.
    public var certificateName: Swift.String?
    /// When true, forces the deletion of an SSL/TLS certificate. There can be two certificates associated with a Lightsail load balancer: the primary and the backup. The force parameter is required when the primary SSL/TLS certificate is in use by an instance attached to the load balancer.
    public var force: Swift.Bool?
    /// The load balancer name.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init(
        certificateName: Swift.String? = nil,
        force: Swift.Bool? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.certificateName = certificateName
        self.force = force
        self.loadBalancerName = loadBalancerName
    }
}

public struct DeleteLoadBalancerTlsCertificateOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteRelationalDatabaseInput: Swift.Sendable {
    /// The name of the database snapshot created if skip final snapshot is false, which is the default value for that parameter. Specifying this parameter and also specifying the skip final snapshot parameter to true results in an error. Constraints:
    ///
    /// * Must contain from 2 to 255 alphanumeric characters, or hyphens.
    ///
    /// * The first and last character must be a letter or number.
    public var finalRelationalDatabaseSnapshotName: Swift.String?
    /// The name of the database that you are deleting.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// Determines whether a final database snapshot is created before your database is deleted. If true is specified, no database snapshot is created. If false is specified, a database snapshot is created before your database is deleted. You must specify the final relational database snapshot name parameter if the skip final snapshot parameter is false. Default: false
    public var skipFinalSnapshot: Swift.Bool?

    public init(
        finalRelationalDatabaseSnapshotName: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil,
        skipFinalSnapshot: Swift.Bool? = nil
    )
    {
        self.finalRelationalDatabaseSnapshotName = finalRelationalDatabaseSnapshotName
        self.relationalDatabaseName = relationalDatabaseName
        self.skipFinalSnapshot = skipFinalSnapshot
    }
}

public struct DeleteRelationalDatabaseOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DeleteRelationalDatabaseSnapshotInput: Swift.Sendable {
    /// The name of the database snapshot that you are deleting.
    /// This member is required.
    public var relationalDatabaseSnapshotName: Swift.String?

    public init(
        relationalDatabaseSnapshotName: Swift.String? = nil
    )
    {
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
    }
}

public struct DeleteRelationalDatabaseSnapshotOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DetachCertificateFromDistributionInput: Swift.Sendable {
    /// The name of the distribution from which to detach the certificate. Use the GetDistributions action to get a list of distribution names that you can specify.
    /// This member is required.
    public var distributionName: Swift.String?

    public init(
        distributionName: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
    }
}

public struct DetachCertificateFromDistributionOutput: Swift.Sendable {
    /// An object that describes the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct DetachDiskInput: Swift.Sendable {
    /// The unique name of the disk you want to detach from your instance (my-disk).
    /// This member is required.
    public var diskName: Swift.String?

    public init(
        diskName: Swift.String? = nil
    )
    {
        self.diskName = diskName
    }
}

public struct DetachDiskOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DetachInstancesFromLoadBalancerInput: Swift.Sendable {
    /// An array of strings containing the names of the instances you want to detach from the load balancer.
    /// This member is required.
    public var instanceNames: [Swift.String]?
    /// The name of the Lightsail load balancer.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init(
        instanceNames: [Swift.String]? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.instanceNames = instanceNames
        self.loadBalancerName = loadBalancerName
    }
}

public struct DetachInstancesFromLoadBalancerOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DetachStaticIpInput: Swift.Sendable {
    /// The name of the static IP to detach from the instance.
    /// This member is required.
    public var staticIpName: Swift.String?

    public init(
        staticIpName: Swift.String? = nil
    )
    {
        self.staticIpName = staticIpName
    }
}

public struct DetachStaticIpOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct DisableAddOnInput: Swift.Sendable {
    /// The add-on type to disable.
    /// This member is required.
    public var addOnType: LightsailClientTypes.AddOnType?
    /// The name of the source resource for which to disable the add-on.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        addOnType: LightsailClientTypes.AddOnType? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.addOnType = addOnType
        self.resourceName = resourceName
    }
}

public struct DisableAddOnOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

extension LightsailClientTypes {

    public enum DiskState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case error
        case inuse
        case pending
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [DiskState] {
            return [
                .available,
                .error,
                .inuse,
                .pending,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .error: return "error"
            case .inuse: return "in-use"
            case .pending: return "pending"
            case .unknown: return "unknown"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes a block storage disk.
    public struct Disk: Swift.Sendable {
        /// An array of objects representing the add-ons enabled on the disk.
        public var addOns: [LightsailClientTypes.AddOn]?
        /// The Amazon Resource Name (ARN) of the disk.
        public var arn: Swift.String?
        /// The resources to which the disk is attached.
        public var attachedTo: Swift.String?
        /// (Discontinued) The attachment state of the disk. In releases prior to November 14, 2017, this parameter returned attached for system disks in the API response. It is now discontinued, but still included in the response. Use isAttached instead.
        @available(*, deprecated)
        public var attachmentState: Swift.String?
        /// The status of automatically mounting a storage disk to a virtual computer. This parameter only applies to Lightsail for Research resources.
        public var autoMountStatus: LightsailClientTypes.AutoMountStatus?
        /// The date when the disk was created.
        public var createdAt: Foundation.Date?
        /// (Discontinued) The number of GB in use by the disk. In releases prior to November 14, 2017, this parameter was not included in the API response. It is now discontinued.
        @available(*, deprecated)
        public var gbInUse: Swift.Int?
        /// The input/output operations per second (IOPS) of the disk.
        public var iops: Swift.Int?
        /// A Boolean value indicating whether the disk is attached.
        public var isAttached: Swift.Bool?
        /// A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).
        public var isSystemDisk: Swift.Bool?
        /// The AWS Region and Availability Zone where the disk is located.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The unique name of the disk.
        public var name: Swift.String?
        /// The disk path.
        public var path: Swift.String?
        /// The Lightsail resource type (Disk).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The size of the disk in GB.
        public var sizeInGb: Swift.Int?
        /// Describes the status of the disk.
        public var state: LightsailClientTypes.DiskState?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init(
            addOns: [LightsailClientTypes.AddOn]? = nil,
            arn: Swift.String? = nil,
            attachedTo: Swift.String? = nil,
            attachmentState: Swift.String? = nil,
            autoMountStatus: LightsailClientTypes.AutoMountStatus? = nil,
            createdAt: Foundation.Date? = nil,
            gbInUse: Swift.Int? = nil,
            iops: Swift.Int? = nil,
            isAttached: Swift.Bool? = nil,
            isSystemDisk: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            path: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sizeInGb: Swift.Int? = nil,
            state: LightsailClientTypes.DiskState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.addOns = addOns
            self.arn = arn
            self.attachedTo = attachedTo
            self.attachmentState = attachmentState
            self.autoMountStatus = autoMountStatus
            self.createdAt = createdAt
            self.gbInUse = gbInUse
            self.iops = iops
            self.isAttached = isAttached
            self.isSystemDisk = isSystemDisk
            self.location = location
            self.name = name
            self.path = path
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }
}

extension LightsailClientTypes {

    /// Describes a disk.
    public struct DiskInfo: Swift.Sendable {
        /// A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).
        public var isSystemDisk: Swift.Bool?
        /// The disk name.
        public var name: Swift.String?
        /// The disk path.
        public var path: Swift.String?
        /// The size of the disk in GB (32).
        public var sizeInGb: Swift.Int?

        public init(
            isSystemDisk: Swift.Bool? = nil,
            name: Swift.String? = nil,
            path: Swift.String? = nil,
            sizeInGb: Swift.Int? = nil
        )
        {
            self.isSystemDisk = isSystemDisk
            self.name = name
            self.path = path
            self.sizeInGb = sizeInGb
        }
    }
}

extension LightsailClientTypes {

    public enum DiskSnapshotState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case error
        case pending
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [DiskSnapshotState] {
            return [
                .completed,
                .error,
                .pending,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "completed"
            case .error: return "error"
            case .pending: return "pending"
            case .unknown: return "unknown"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes a block storage disk snapshot.
    public struct DiskSnapshot: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the disk snapshot.
        public var arn: Swift.String?
        /// The date when the disk snapshot was created.
        public var createdAt: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the source disk from which the disk snapshot was created.
        public var fromDiskArn: Swift.String?
        /// The unique name of the source disk from which the disk snapshot was created.
        public var fromDiskName: Swift.String?
        /// The Amazon Resource Name (ARN) of the source instance from which the disk (system volume) snapshot was created.
        public var fromInstanceArn: Swift.String?
        /// The unique name of the source instance from which the disk (system volume) snapshot was created.
        public var fromInstanceName: Swift.String?
        /// A Boolean value indicating whether the snapshot was created from an automatic snapshot.
        public var isFromAutoSnapshot: Swift.Bool?
        /// The AWS Region and Availability Zone where the disk snapshot was created.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the disk snapshot (my-disk-snapshot).
        public var name: Swift.String?
        /// The progress of the snapshot.
        public var progress: Swift.String?
        /// The Lightsail resource type (DiskSnapshot).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The size of the disk in GB.
        public var sizeInGb: Swift.Int?
        /// The status of the disk snapshot operation.
        public var state: LightsailClientTypes.DiskSnapshotState?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            fromDiskArn: Swift.String? = nil,
            fromDiskName: Swift.String? = nil,
            fromInstanceArn: Swift.String? = nil,
            fromInstanceName: Swift.String? = nil,
            isFromAutoSnapshot: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            progress: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sizeInGb: Swift.Int? = nil,
            state: LightsailClientTypes.DiskSnapshotState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.fromDiskArn = fromDiskArn
            self.fromDiskName = fromDiskName
            self.fromInstanceArn = fromInstanceArn
            self.fromInstanceName = fromInstanceName
            self.isFromAutoSnapshot = isFromAutoSnapshot
            self.location = location
            self.name = name
            self.progress = progress
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }
}

extension LightsailClientTypes {

    /// Describes a disk snapshot.
    public struct DiskSnapshotInfo: Swift.Sendable {
        /// The size of the disk in GB (32).
        public var sizeInGb: Swift.Int?

        public init(
            sizeInGb: Swift.Int? = nil
        )
        {
            self.sizeInGb = sizeInGb
        }
    }
}

extension LightsailClientTypes {

    /// Describes the specifications of a distribution bundle.
    public struct DistributionBundle: Swift.Sendable {
        /// The ID of the bundle.
        public var bundleId: Swift.String?
        /// Indicates whether the bundle is active, and can be specified for a new or existing distribution.
        public var isActive: Swift.Bool?
        /// The name of the distribution bundle.
        public var name: Swift.String?
        /// The monthly price, in US dollars, of the bundle.
        public var price: Swift.Float?
        /// The monthly network transfer quota of the bundle.
        public var transferPerMonthInGb: Swift.Int?

        public init(
            bundleId: Swift.String? = nil,
            isActive: Swift.Bool? = nil,
            name: Swift.String? = nil,
            price: Swift.Float? = nil,
            transferPerMonthInGb: Swift.Int? = nil
        )
        {
            self.bundleId = bundleId
            self.isActive = isActive
            self.name = name
            self.price = price
            self.transferPerMonthInGb = transferPerMonthInGb
        }
    }
}

extension LightsailClientTypes {

    public enum DistributionMetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bytesdownloaded
        case bytesuploaded
        case http4xxerrorrate
        case http5xxerrorrate
        case requests
        case totalerrorrate
        case sdkUnknown(Swift.String)

        public static var allCases: [DistributionMetricName] {
            return [
                .bytesdownloaded,
                .bytesuploaded,
                .http4xxerrorrate,
                .http5xxerrorrate,
                .requests,
                .totalerrorrate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bytesdownloaded: return "BytesDownloaded"
            case .bytesuploaded: return "BytesUploaded"
            case .http4xxerrorrate: return "Http4xxErrorRate"
            case .http5xxerrorrate: return "Http5xxErrorRate"
            case .requests: return "Requests"
            case .totalerrorrate: return "TotalErrorRate"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum NameServersUpdateStateCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pending
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [NameServersUpdateStateCode] {
            return [
                .failed,
                .pending,
                .started,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .started: return "STARTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the state of the name server records update made by Amazon Lightsail to an Amazon Route 53 registered domain. For more information, see [DNS in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/understanding-dns-in-amazon-lightsail) in the Amazon Lightsail Developer Guide.
    public struct NameServersUpdateState: Swift.Sendable {
        /// The status code for the name servers update. Following are the possible values:
        ///
        /// * SUCCEEDED - The name server records were successfully updated.
        ///
        /// * PENDING - The name server record update is in progress.
        ///
        /// * FAILED - The name server record update failed.
        ///
        /// * STARTED - The automatic name server record update started.
        public var code: LightsailClientTypes.NameServersUpdateStateCode?
        /// The message that describes the reason for the status code.
        public var message: Swift.String?

        public init(
            code: LightsailClientTypes.NameServersUpdateStateCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }
}

extension LightsailClientTypes {

    public enum R53HostedZoneDeletionStateCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pending
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [R53HostedZoneDeletionStateCode] {
            return [
                .failed,
                .pending,
                .started,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .started: return "STARTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the deletion state of an Amazon Route 53 hosted zone for a domain that is being automatically delegated to an Amazon Lightsail DNS zone.
    public struct R53HostedZoneDeletionState: Swift.Sendable {
        /// The status code for the deletion state. Following are the possible values:
        ///
        /// * SUCCEEDED - The hosted zone was successfully deleted.
        ///
        /// * PENDING - The hosted zone deletion is in progress.
        ///
        /// * FAILED - The hosted zone deletion failed.
        ///
        /// * STARTED - The hosted zone deletion started.
        public var code: LightsailClientTypes.R53HostedZoneDeletionStateCode?
        /// The message that describes the reason for the status code.
        public var message: Swift.String?

        public init(
            code: LightsailClientTypes.R53HostedZoneDeletionStateCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }
}

extension LightsailClientTypes {

    /// Describes the delegation state of an Amazon Route 53 registered domain to Amazon Lightsail. When you delegate an Amazon Route 53 registered domain to Lightsail, you can manage the DNS of the domain using a Lightsail DNS zone. You no longer use the Route 53 hosted zone to manage the DNS of the domain. To delegate the domain, Lightsail automatically updates the domain's name servers in Route 53 to the name servers of the Lightsail DNS zone. Then, Lightsail automatically deletes the Route 53 hosted zone for the domain. All of the following conditions must be true for automatic domain delegation to be successful:
    ///
    /// * The registered domain must be in the same Amazon Web Services account as the Lightsail account making the request.
    ///
    /// * The user or entity making the request must have permission to manage domains in Route 53.
    ///
    /// * The Route 53 hosted zone for the domain must be empty. It cannot contain DNS records other than start of authority (SOA) and name server records.
    ///
    ///
    /// If automatic domain delegation fails, or if you manage the DNS of your domain using a service other than Route 53, then you must manually add the Lightsail DNS zone name servers to your domain in order to delegate management of its DNS to Lightsail. For more information, see [Creating a DNS zone to manage your domain’s records in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-create-dns-entry) in the Amazon Lightsail Developer Guide.
    public struct RegisteredDomainDelegationInfo: Swift.Sendable {
        /// An object that describes the state of the name server records that are automatically added to the Route 53 domain by Lightsail.
        public var nameServersUpdateState: LightsailClientTypes.NameServersUpdateState?
        /// Describes the deletion state of an Amazon Route 53 hosted zone for a domain that is being automatically delegated to an Amazon Lightsail DNS zone.
        public var r53HostedZoneDeletionState: LightsailClientTypes.R53HostedZoneDeletionState?

        public init(
            nameServersUpdateState: LightsailClientTypes.NameServersUpdateState? = nil,
            r53HostedZoneDeletionState: LightsailClientTypes.R53HostedZoneDeletionState? = nil
        )
        {
            self.nameServersUpdateState = nameServersUpdateState
            self.r53HostedZoneDeletionState = r53HostedZoneDeletionState
        }
    }
}

extension LightsailClientTypes {

    /// Describes a domain where you are storing recordsets.
    public struct Domain: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the domain recordset (arn:aws:lightsail:global:123456789101:Domain/824cede0-abc7-4f84-8dbc-12345EXAMPLE).
        public var arn: Swift.String?
        /// The date when the domain recordset was created.
        public var createdAt: Foundation.Date?
        /// An array of key-value pairs containing information about the domain entries.
        public var domainEntries: [LightsailClientTypes.DomainEntry]?
        /// The AWS Region and Availability Zones where the domain recordset was created.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the domain.
        public var name: Swift.String?
        /// An object that describes the state of the Route 53 domain delegation to a Lightsail DNS zone.
        public var registeredDomainDelegationInfo: LightsailClientTypes.RegisteredDomainDelegationInfo?
        /// The resource type.
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            domainEntries: [LightsailClientTypes.DomainEntry]? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            registeredDomainDelegationInfo: LightsailClientTypes.RegisteredDomainDelegationInfo? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.domainEntries = domainEntries
            self.location = location
            self.name = name
            self.registeredDomainDelegationInfo = registeredDomainDelegationInfo
            self.resourceType = resourceType
            self.supportCode = supportCode
            self.tags = tags
        }
    }
}

public struct DownloadDefaultKeyPairInput: Swift.Sendable {

    public init() { }
}

public struct DownloadDefaultKeyPairOutput: Swift.Sendable {
    /// The timestamp when the default key pair was created.
    public var createdAt: Foundation.Date?
    /// A base64-encoded RSA private key.
    public var privateKeyBase64: Swift.String?
    /// A base64-encoded public key of the ssh-rsa type.
    public var publicKeyBase64: Swift.String?

    public init(
        createdAt: Foundation.Date? = nil,
        privateKeyBase64: Swift.String? = nil,
        publicKeyBase64: Swift.String? = nil
    )
    {
        self.createdAt = createdAt
        self.privateKeyBase64 = privateKeyBase64
        self.publicKeyBase64 = publicKeyBase64
    }
}

public struct EnableAddOnInput: Swift.Sendable {
    /// An array of strings representing the add-on to enable or modify.
    /// This member is required.
    public var addOnRequest: LightsailClientTypes.AddOnRequest?
    /// The name of the source resource for which to enable or modify the add-on.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        addOnRequest: LightsailClientTypes.AddOnRequest? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.addOnRequest = addOnRequest
        self.resourceName = resourceName
    }
}

public struct EnableAddOnOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct ExportSnapshotInput: Swift.Sendable {
    /// The name of the instance or disk snapshot to be exported to Amazon EC2.
    /// This member is required.
    public var sourceSnapshotName: Swift.String?

    public init(
        sourceSnapshotName: Swift.String? = nil
    )
    {
        self.sourceSnapshotName = sourceSnapshotName
    }
}

public struct ExportSnapshotOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

extension LightsailClientTypes {

    /// Describes an instance snapshot.
    public struct InstanceSnapshotInfo: Swift.Sendable {
        /// The blueprint ID from which the source instance (amazon_linux_2023).
        public var fromBlueprintId: Swift.String?
        /// The bundle ID from which the source instance was created (micro_x_x).
        public var fromBundleId: Swift.String?
        /// A list of objects describing the disks that were attached to the source instance.
        public var fromDiskInfo: [LightsailClientTypes.DiskInfo]?

        public init(
            fromBlueprintId: Swift.String? = nil,
            fromBundleId: Swift.String? = nil,
            fromDiskInfo: [LightsailClientTypes.DiskInfo]? = nil
        )
        {
            self.fromBlueprintId = fromBlueprintId
            self.fromBundleId = fromBundleId
            self.fromDiskInfo = fromDiskInfo
        }
    }
}

extension LightsailClientTypes {

    public enum ExportSnapshotRecordSourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disksnapshot
        case instancesnapshot
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportSnapshotRecordSourceType] {
            return [
                .disksnapshot,
                .instancesnapshot
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disksnapshot: return "DiskSnapshot"
            case .instancesnapshot: return "InstanceSnapshot"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the source of an export snapshot record.
    public struct ExportSnapshotRecordSourceInfo: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the source instance or disk snapshot.
        public var arn: Swift.String?
        /// The date when the source instance or disk snapshot was created.
        public var createdAt: Foundation.Date?
        /// A list of objects describing a disk snapshot.
        public var diskSnapshotInfo: LightsailClientTypes.DiskSnapshotInfo?
        /// The Amazon Resource Name (ARN) of the snapshot's source instance or disk.
        public var fromResourceArn: Swift.String?
        /// The name of the snapshot's source instance or disk.
        public var fromResourceName: Swift.String?
        /// A list of objects describing an instance snapshot.
        public var instanceSnapshotInfo: LightsailClientTypes.InstanceSnapshotInfo?
        /// The name of the source instance or disk snapshot.
        public var name: Swift.String?
        /// The Lightsail resource type (InstanceSnapshot or DiskSnapshot).
        public var resourceType: LightsailClientTypes.ExportSnapshotRecordSourceType?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            diskSnapshotInfo: LightsailClientTypes.DiskSnapshotInfo? = nil,
            fromResourceArn: Swift.String? = nil,
            fromResourceName: Swift.String? = nil,
            instanceSnapshotInfo: LightsailClientTypes.InstanceSnapshotInfo? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ExportSnapshotRecordSourceType? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.diskSnapshotInfo = diskSnapshotInfo
            self.fromResourceArn = fromResourceArn
            self.fromResourceName = fromResourceName
            self.instanceSnapshotInfo = instanceSnapshotInfo
            self.name = name
            self.resourceType = resourceType
        }
    }
}

extension LightsailClientTypes {

    /// Describes an export snapshot record.
    public struct ExportSnapshotRecord: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the export snapshot record.
        public var arn: Swift.String?
        /// The date when the export snapshot record was created.
        public var createdAt: Foundation.Date?
        /// A list of objects describing the destination of the export snapshot record.
        public var destinationInfo: LightsailClientTypes.DestinationInfo?
        /// The AWS Region and Availability Zone where the export snapshot record is located.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The export snapshot record name.
        public var name: Swift.String?
        /// The Lightsail resource type (ExportSnapshotRecord).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// A list of objects describing the source of the export snapshot record.
        public var sourceInfo: LightsailClientTypes.ExportSnapshotRecordSourceInfo?
        /// The state of the export snapshot record.
        public var state: LightsailClientTypes.RecordState?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            destinationInfo: LightsailClientTypes.DestinationInfo? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sourceInfo: LightsailClientTypes.ExportSnapshotRecordSourceInfo? = nil,
            state: LightsailClientTypes.RecordState? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.destinationInfo = destinationInfo
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.sourceInfo = sourceInfo
            self.state = state
        }
    }
}

public struct GetActiveNamesInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetActiveNames request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

public struct GetActiveNamesOutput: Swift.Sendable {
    /// The list of active names returned by the get active names request.
    public var activeNames: [Swift.String]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetActiveNames request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        activeNames: [Swift.String]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.activeNames = activeNames
        self.nextPageToken = nextPageToken
    }
}

public struct GetAlarmsInput: Swift.Sendable {
    /// The name of the alarm. Specify an alarm name to return information about a specific alarm.
    public var alarmName: Swift.String?
    /// The name of the Lightsail resource being monitored by the alarm. Specify a monitored resource name to return information about all alarms for a specific resource.
    public var monitoredResourceName: Swift.String?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetAlarms request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        alarmName: Swift.String? = nil,
        monitoredResourceName: Swift.String? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.alarmName = alarmName
        self.monitoredResourceName = monitoredResourceName
        self.pageToken = pageToken
    }
}

public struct GetAlarmsOutput: Swift.Sendable {
    /// An array of objects that describe the alarms.
    public var alarms: [LightsailClientTypes.Alarm]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetAlarms request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        alarms: [LightsailClientTypes.Alarm]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.alarms = alarms
        self.nextPageToken = nextPageToken
    }
}

public struct GetAutoSnapshotsInput: Swift.Sendable {
    /// The name of the source instance or disk from which to get automatic snapshot information.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        resourceName: Swift.String? = nil
    )
    {
        self.resourceName = resourceName
    }
}

public struct GetAutoSnapshotsOutput: Swift.Sendable {
    /// An array of objects that describe the automatic snapshots that are available for the specified source instance or disk.
    public var autoSnapshots: [LightsailClientTypes.AutoSnapshotDetails]?
    /// The name of the source instance or disk for the automatic snapshots.
    public var resourceName: Swift.String?
    /// The resource type of the automatic snapshot. The possible values are Instance, and Disk.
    public var resourceType: LightsailClientTypes.ResourceType?

    public init(
        autoSnapshots: [LightsailClientTypes.AutoSnapshotDetails]? = nil,
        resourceName: Swift.String? = nil,
        resourceType: LightsailClientTypes.ResourceType? = nil
    )
    {
        self.autoSnapshots = autoSnapshots
        self.resourceName = resourceName
        self.resourceType = resourceType
    }
}

public struct GetBlueprintsInput: Swift.Sendable {
    /// Returns a list of blueprints that are specific to Lightsail for Research. You must use this parameter to view Lightsail for Research blueprints.
    public var appCategory: LightsailClientTypes.AppCategory?
    /// A Boolean value that indicates whether to include inactive (unavailable) blueprints in the response of your request.
    public var includeInactive: Swift.Bool?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetBlueprints request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        appCategory: LightsailClientTypes.AppCategory? = nil,
        includeInactive: Swift.Bool? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.appCategory = appCategory
        self.includeInactive = includeInactive
        self.pageToken = pageToken
    }
}

public struct GetBlueprintsOutput: Swift.Sendable {
    /// An array of key-value pairs that contains information about the available blueprints.
    public var blueprints: [LightsailClientTypes.Blueprint]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetBlueprints request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        blueprints: [LightsailClientTypes.Blueprint]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.blueprints = blueprints
        self.nextPageToken = nextPageToken
    }
}

public struct GetBucketAccessKeysInput: Swift.Sendable {
    /// The name of the bucket for which to return access keys.
    /// This member is required.
    public var bucketName: Swift.String?

    public init(
        bucketName: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
    }
}

public struct GetBucketAccessKeysOutput: Swift.Sendable {
    /// An object that describes the access keys for the specified bucket.
    public var accessKeys: [LightsailClientTypes.AccessKey]?

    public init(
        accessKeys: [LightsailClientTypes.AccessKey]? = nil
    )
    {
        self.accessKeys = accessKeys
    }
}

public struct GetBucketBundlesInput: Swift.Sendable {
    /// A Boolean value that indicates whether to include inactive (unavailable) bundles in the response of your request.
    public var includeInactive: Swift.Bool?

    public init(
        includeInactive: Swift.Bool? = nil
    )
    {
        self.includeInactive = includeInactive
    }
}

public struct GetBucketBundlesOutput: Swift.Sendable {
    /// An object that describes bucket bundles.
    public var bundles: [LightsailClientTypes.BucketBundle]?

    public init(
        bundles: [LightsailClientTypes.BucketBundle]? = nil
    )
    {
        self.bundles = bundles
    }
}

public struct GetBucketMetricDataInput: Swift.Sendable {
    /// The name of the bucket for which to get metric data.
    /// This member is required.
    public var bucketName: Swift.String?
    /// The timestamp indicating the latest data to be returned.
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The metric for which you want to return information. Valid bucket metric names are listed below, along with the most useful statistics to include in your request, and the published unit value. These bucket metrics are reported once per day.
    ///
    /// * BucketSizeBytes - The amount of data in bytes stored in a bucket. This value is calculated by summing the size of all objects in the bucket (including object versions), including the size of all parts for all incomplete multipart uploads to the bucket. Statistics: The most useful statistic is Maximum. Unit: The published unit is Bytes.
    ///
    /// * NumberOfObjects - The total number of objects stored in a bucket. This value is calculated by counting all objects in the bucket (including object versions) and the total number of parts for all incomplete multipart uploads to the bucket. Statistics: The most useful statistic is Average. Unit: The published unit is Count.
    /// This member is required.
    public var metricName: LightsailClientTypes.BucketMetricName?
    /// The granularity, in seconds, of the returned data points. Bucket storage metrics are reported once per day. Therefore, you should specify a period of 86400 seconds, which is the number of seconds in a day.
    /// This member is required.
    public var period: Swift.Int?
    /// The timestamp indicating the earliest data to be returned.
    /// This member is required.
    public var startTime: Foundation.Date?
    /// The statistic for the metric. The following statistics are available:
    ///
    /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
    ///
    /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
    ///
    /// * Sum - The sum of all values submitted for the matching metric. You can use this statistic to determine the total volume of a metric.
    ///
    /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
    ///
    /// * SampleCount - The count, or number, of data points used for the statistical calculation.
    /// This member is required.
    public var statistics: [LightsailClientTypes.MetricStatistic]?
    /// The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units with each available metric, see the metricName parameter.
    /// This member is required.
    public var unit: LightsailClientTypes.MetricUnit?

    public init(
        bucketName: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        metricName: LightsailClientTypes.BucketMetricName? = nil,
        period: Swift.Int? = nil,
        startTime: Foundation.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.bucketName = bucketName
        self.endTime = endTime
        self.metricName = metricName
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

extension LightsailClientTypes {

    /// Describes the metric data point.
    public struct MetricDatapoint: Swift.Sendable {
        /// The average.
        public var average: Swift.Double?
        /// The maximum.
        public var maximum: Swift.Double?
        /// The minimum.
        public var minimum: Swift.Double?
        /// The sample count.
        public var sampleCount: Swift.Double?
        /// The sum.
        public var sum: Swift.Double?
        /// The timestamp (1479816991.349).
        public var timestamp: Foundation.Date?
        /// The unit.
        public var unit: LightsailClientTypes.MetricUnit?

        public init(
            average: Swift.Double? = nil,
            maximum: Swift.Double? = nil,
            minimum: Swift.Double? = nil,
            sampleCount: Swift.Double? = nil,
            sum: Swift.Double? = nil,
            timestamp: Foundation.Date? = nil,
            unit: LightsailClientTypes.MetricUnit? = nil
        )
        {
            self.average = average
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
            self.timestamp = timestamp
            self.unit = unit
        }
    }
}

public struct GetBucketMetricDataOutput: Swift.Sendable {
    /// An array of objects that describe the metric data returned.
    public var metricData: [LightsailClientTypes.MetricDatapoint]?
    /// The name of the metric returned.
    public var metricName: LightsailClientTypes.BucketMetricName?

    public init(
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.BucketMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

public struct GetBucketsInput: Swift.Sendable {
    /// The name of the bucket for which to return information. When omitted, the response includes all of your buckets in the Amazon Web Services Region where the request is made.
    public var bucketName: Swift.String?
    /// A Boolean value that indicates whether to include Lightsail instances that were given access to the bucket using the [SetResourceAccessForBucket](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html) action.
    public var includeConnectedResources: Swift.Bool?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetBuckets request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        includeConnectedResources: Swift.Bool? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.includeConnectedResources = includeConnectedResources
        self.pageToken = pageToken
    }
}

public struct GetBucketsOutput: Swift.Sendable {
    /// An object that describes the synchronization status of the Amazon S3 account-level block public access feature for your Lightsail buckets. For more information about this feature and how it affects Lightsail buckets, see [Block public access for buckets in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-block-public-access-for-buckets).
    public var accountLevelBpaSync: LightsailClientTypes.AccountLevelBpaSync?
    /// An array of objects that describe buckets.
    public var buckets: [LightsailClientTypes.Bucket]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetBuckets request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        accountLevelBpaSync: LightsailClientTypes.AccountLevelBpaSync? = nil,
        buckets: [LightsailClientTypes.Bucket]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.accountLevelBpaSync = accountLevelBpaSync
        self.buckets = buckets
        self.nextPageToken = nextPageToken
    }
}

public struct GetBundlesInput: Swift.Sendable {
    /// Returns a list of bundles that are specific to Lightsail for Research. You must use this parameter to view Lightsail for Research bundles.
    public var appCategory: LightsailClientTypes.AppCategory?
    /// A Boolean value that indicates whether to include inactive (unavailable) bundles in the response of your request.
    public var includeInactive: Swift.Bool?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetBundles request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        appCategory: LightsailClientTypes.AppCategory? = nil,
        includeInactive: Swift.Bool? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.appCategory = appCategory
        self.includeInactive = includeInactive
        self.pageToken = pageToken
    }
}

public struct GetBundlesOutput: Swift.Sendable {
    /// An array of key-value pairs that contains information about the available bundles.
    public var bundles: [LightsailClientTypes.Bundle]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetBundles request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        bundles: [LightsailClientTypes.Bundle]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.bundles = bundles
        self.nextPageToken = nextPageToken
    }
}

public struct GetCertificatesInput: Swift.Sendable {
    /// The name for the certificate for which to return information. When omitted, the response includes all of your certificates in the Amazon Web Services Region where the request is made.
    public var certificateName: Swift.String?
    /// The status of the certificates for which to return information. For example, specify ISSUED to return only certificates with an ISSUED status. When omitted, the response includes all of your certificates in the Amazon Web Services Region where the request is made, regardless of their current status.
    public var certificateStatuses: [LightsailClientTypes.CertificateStatus]?
    /// Indicates whether to include detailed information about the certificates in the response. When omitted, the response includes only the certificate names, Amazon Resource Names (ARNs), domain names, and tags.
    public var includeCertificateDetails: Swift.Bool?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetCertificates request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        certificateName: Swift.String? = nil,
        certificateStatuses: [LightsailClientTypes.CertificateStatus]? = nil,
        includeCertificateDetails: Swift.Bool? = false,
        pageToken: Swift.String? = nil
    )
    {
        self.certificateName = certificateName
        self.certificateStatuses = certificateStatuses
        self.includeCertificateDetails = includeCertificateDetails
        self.pageToken = pageToken
    }
}

public struct GetCertificatesOutput: Swift.Sendable {
    /// An object that describes certificates.
    public var certificates: [LightsailClientTypes.CertificateSummary]?
    /// If NextPageToken is returned there are more results available. The value of NextPageToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged.
    public var nextPageToken: Swift.String?

    public init(
        certificates: [LightsailClientTypes.CertificateSummary]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.certificates = certificates
        self.nextPageToken = nextPageToken
    }
}

public struct GetCloudFormationStackRecordsInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetClouFormationStackRecords request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

public struct GetCloudFormationStackRecordsOutput: Swift.Sendable {
    /// A list of objects describing the CloudFormation stack records.
    public var cloudFormationStackRecords: [LightsailClientTypes.CloudFormationStackRecord]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetCloudFormationStackRecords request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        cloudFormationStackRecords: [LightsailClientTypes.CloudFormationStackRecord]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.cloudFormationStackRecords = cloudFormationStackRecords
        self.nextPageToken = nextPageToken
    }
}

public struct GetContactMethodsInput: Swift.Sendable {
    /// The protocols used to send notifications, such as Email, or SMS (text messaging). Specify a protocol in your request to return information about a specific contact method protocol.
    public var protocols: [LightsailClientTypes.ContactProtocol]?

    public init(
        protocols: [LightsailClientTypes.ContactProtocol]? = nil
    )
    {
        self.protocols = protocols
    }
}

public struct GetContactMethodsOutput: Swift.Sendable {
    /// An array of objects that describe the contact methods.
    public var contactMethods: [LightsailClientTypes.ContactMethod]?

    public init(
        contactMethods: [LightsailClientTypes.ContactMethod]? = nil
    )
    {
        self.contactMethods = contactMethods
    }
}

public struct GetContainerAPIMetadataInput: Swift.Sendable {

    public init() { }
}

public struct GetContainerAPIMetadataOutput: Swift.Sendable {
    /// Metadata about Lightsail containers, such as the current version of the Lightsail Control (lightsailctl) plugin.
    public var metadata: [[Swift.String: Swift.String]]?

    public init(
        metadata: [[Swift.String: Swift.String]]? = nil
    )
    {
        self.metadata = metadata
    }
}

public struct GetContainerImagesInput: Swift.Sendable {
    /// The name of the container service for which to return registered container images.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

public struct GetContainerImagesOutput: Swift.Sendable {
    /// An array of objects that describe container images that are registered to the container service.
    public var containerImages: [LightsailClientTypes.ContainerImage]?

    public init(
        containerImages: [LightsailClientTypes.ContainerImage]? = nil
    )
    {
        self.containerImages = containerImages
    }
}

public struct GetContainerLogInput: Swift.Sendable {
    /// The name of the container that is either running or previously ran on the container service for which to return a log.
    /// This member is required.
    public var containerName: Swift.String?
    /// The end of the time interval for which to get log data. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify 1538427600 as the end time.
    ///
    ///
    /// You can convert a human-friendly time to Unix time format using a converter like [Epoch converter](https://www.epochconverter.com/).
    public var endTime: Foundation.Date?
    /// The pattern to use to filter the returned log events to a specific term. The following are a few examples of filter patterns that you can specify:
    ///
    /// * To return all log events, specify a filter pattern of "".
    ///
    /// * To exclude log events that contain the ERROR term, and return all other log events, specify a filter pattern of "-ERROR".
    ///
    /// * To return log events that contain the ERROR term, specify a filter pattern of "ERROR".
    ///
    /// * To return log events that contain both the ERROR and Exception terms, specify a filter pattern of "ERROR Exception".
    ///
    /// * To return log events that contain the ERROR or the Exception term, specify a filter pattern of "?ERROR ?Exception".
    public var filterPattern: Swift.String?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetContainerLog request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?
    /// The name of the container service for which to get a container log.
    /// This member is required.
    public var serviceName: Swift.String?
    /// The start of the time interval for which to get log data. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify 1538424000 as the start time.
    ///
    ///
    /// You can convert a human-friendly time to Unix time format using a converter like [Epoch converter](https://www.epochconverter.com/).
    public var startTime: Foundation.Date?

    public init(
        containerName: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        filterPattern: Swift.String? = nil,
        pageToken: Swift.String? = nil,
        serviceName: Swift.String? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.containerName = containerName
        self.endTime = endTime
        self.filterPattern = filterPattern
        self.pageToken = pageToken
        self.serviceName = serviceName
        self.startTime = startTime
    }
}

public struct GetContainerLogOutput: Swift.Sendable {
    /// An array of objects that describe the log events of a container.
    public var logEvents: [LightsailClientTypes.ContainerServiceLogEvent]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetContainerLog request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        logEvents: [LightsailClientTypes.ContainerServiceLogEvent]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.logEvents = logEvents
        self.nextPageToken = nextPageToken
    }
}

public struct GetContainerServiceDeploymentsInput: Swift.Sendable {
    /// The name of the container service for which to return deployments.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

public struct GetContainerServiceDeploymentsOutput: Swift.Sendable {
    /// An array of objects that describe deployments for a container service.
    public var deployments: [LightsailClientTypes.ContainerServiceDeployment]?

    public init(
        deployments: [LightsailClientTypes.ContainerServiceDeployment]? = nil
    )
    {
        self.deployments = deployments
    }
}

public struct GetContainerServiceMetricDataInput: Swift.Sendable {
    /// The end time of the time period.
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The metric for which you want to return information. Valid container service metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.
    ///
    /// * CPUUtilization - The average percentage of compute units that are currently in use across all nodes of the container service. This metric identifies the processing power required to run containers on each node of the container service. Statistics: The most useful statistics are Maximum and Average. Unit: The published unit is Percent.
    ///
    /// * MemoryUtilization - The average percentage of available memory that is currently in use across all nodes of the container service. This metric identifies the memory required to run containers on each node of the container service. Statistics: The most useful statistics are Maximum and Average. Unit: The published unit is Percent.
    /// This member is required.
    public var metricName: LightsailClientTypes.ContainerServiceMetricName?
    /// The granularity, in seconds, of the returned data points. All container service metric data is available in 5-minute (300 seconds) granularity.
    /// This member is required.
    public var period: Swift.Int?
    /// The name of the container service for which to get metric data.
    /// This member is required.
    public var serviceName: Swift.String?
    /// The start time of the time period.
    /// This member is required.
    public var startTime: Foundation.Date?
    /// The statistic for the metric. The following statistics are available:
    ///
    /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
    ///
    /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
    ///
    /// * Sum - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
    ///
    /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
    ///
    /// * SampleCount - The count, or number, of data points used for the statistical calculation.
    /// This member is required.
    public var statistics: [LightsailClientTypes.MetricStatistic]?

    public init(
        endTime: Foundation.Date? = nil,
        metricName: LightsailClientTypes.ContainerServiceMetricName? = nil,
        period: Swift.Int? = nil,
        serviceName: Swift.String? = nil,
        startTime: Foundation.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil
    )
    {
        self.endTime = endTime
        self.metricName = metricName
        self.period = period
        self.serviceName = serviceName
        self.startTime = startTime
        self.statistics = statistics
    }
}

public struct GetContainerServiceMetricDataOutput: Swift.Sendable {
    /// An array of objects that describe the metric data returned.
    public var metricData: [LightsailClientTypes.MetricDatapoint]?
    /// The name of the metric returned.
    public var metricName: LightsailClientTypes.ContainerServiceMetricName?

    public init(
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.ContainerServiceMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

public struct GetContainerServicePowersInput: Swift.Sendable {

    public init() { }
}

public struct GetContainerServicePowersOutput: Swift.Sendable {
    /// An array of objects that describe the powers that can be specified for a container service.
    public var powers: [LightsailClientTypes.ContainerServicePower]?

    public init(
        powers: [LightsailClientTypes.ContainerServicePower]? = nil
    )
    {
        self.powers = powers
    }
}

public struct GetContainerServicesInput: Swift.Sendable {
    /// The name of the container service for which to return information. When omitted, the response includes all of your container services in the Amazon Web Services Region where the request is made.
    public var serviceName: Swift.String?

    public init(
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

public struct GetContainerServicesOutput: Swift.Sendable {
    /// An array of objects that describe one or more container services.
    public var containerServices: [LightsailClientTypes.ContainerService]?

    public init(
        containerServices: [LightsailClientTypes.ContainerService]? = nil
    )
    {
        self.containerServices = containerServices
    }
}

public struct GetCostEstimateInput: Swift.Sendable {
    /// The cost estimate end time. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you want to use an end time of October 1, 2018, at 9 PM UTC, specify 1538427600 as the end time.
    ///
    ///
    /// You can convert a human-friendly time to Unix time format using a converter like [Epoch converter](https://www.epochconverter.com/).
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The resource name.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The cost estimate start time. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you want to use a start time of October 1, 2018, at 8 PM UTC, specify 1538424000 as the start time.
    ///
    ///
    /// You can convert a human-friendly time to Unix time format using a converter like [Epoch converter](https://www.epochconverter.com/).
    /// This member is required.
    public var startTime: Foundation.Date?

    public init(
        endTime: Foundation.Date? = nil,
        resourceName: Swift.String? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.endTime = endTime
        self.resourceName = resourceName
        self.startTime = startTime
    }
}

extension LightsailClientTypes {

    /// Describes the estimated cost or usage that a budget tracks.
    public struct ResourceBudgetEstimate: Swift.Sendable {
        /// The cost estimate for the specified budget.
        public var costEstimates: [LightsailClientTypes.CostEstimate]?
        /// The estimate end time.
        public var endTime: Foundation.Date?
        /// The resource name.
        public var resourceName: Swift.String?
        /// The type of resource the budget will track.
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The estimate start time.
        public var startTime: Foundation.Date?

        public init(
            costEstimates: [LightsailClientTypes.CostEstimate]? = nil,
            endTime: Foundation.Date? = nil,
            resourceName: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.costEstimates = costEstimates
            self.endTime = endTime
            self.resourceName = resourceName
            self.resourceType = resourceType
            self.startTime = startTime
        }
    }
}

public struct GetCostEstimateOutput: Swift.Sendable {
    /// Returns the estimate's forecasted cost or usage.
    public var resourcesBudgetEstimate: [LightsailClientTypes.ResourceBudgetEstimate]?

    public init(
        resourcesBudgetEstimate: [LightsailClientTypes.ResourceBudgetEstimate]? = nil
    )
    {
        self.resourcesBudgetEstimate = resourcesBudgetEstimate
    }
}

public struct GetDiskInput: Swift.Sendable {
    /// The name of the disk (my-disk).
    /// This member is required.
    public var diskName: Swift.String?

    public init(
        diskName: Swift.String? = nil
    )
    {
        self.diskName = diskName
    }
}

public struct GetDiskOutput: Swift.Sendable {
    /// An object containing information about the disk.
    public var disk: LightsailClientTypes.Disk?

    public init(
        disk: LightsailClientTypes.Disk? = nil
    )
    {
        self.disk = disk
    }
}

public struct GetDisksInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetDisks request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

public struct GetDisksOutput: Swift.Sendable {
    /// An array of objects containing information about all block storage disks.
    public var disks: [LightsailClientTypes.Disk]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetDisks request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        disks: [LightsailClientTypes.Disk]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.disks = disks
        self.nextPageToken = nextPageToken
    }
}

public struct GetDiskSnapshotInput: Swift.Sendable {
    /// The name of the disk snapshot (my-disk-snapshot).
    /// This member is required.
    public var diskSnapshotName: Swift.String?

    public init(
        diskSnapshotName: Swift.String? = nil
    )
    {
        self.diskSnapshotName = diskSnapshotName
    }
}

public struct GetDiskSnapshotOutput: Swift.Sendable {
    /// An object containing information about the disk snapshot.
    public var diskSnapshot: LightsailClientTypes.DiskSnapshot?

    public init(
        diskSnapshot: LightsailClientTypes.DiskSnapshot? = nil
    )
    {
        self.diskSnapshot = diskSnapshot
    }
}

public struct GetDiskSnapshotsInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetDiskSnapshots request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

public struct GetDiskSnapshotsOutput: Swift.Sendable {
    /// An array of objects containing information about all block storage disk snapshots.
    public var diskSnapshots: [LightsailClientTypes.DiskSnapshot]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetDiskSnapshots request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        diskSnapshots: [LightsailClientTypes.DiskSnapshot]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.diskSnapshots = diskSnapshots
        self.nextPageToken = nextPageToken
    }
}

public struct GetDistributionBundlesInput: Swift.Sendable {

    public init() { }
}

public struct GetDistributionBundlesOutput: Swift.Sendable {
    /// An object that describes a distribution bundle.
    public var bundles: [LightsailClientTypes.DistributionBundle]?

    public init(
        bundles: [LightsailClientTypes.DistributionBundle]? = nil
    )
    {
        self.bundles = bundles
    }
}

public struct GetDistributionLatestCacheResetInput: Swift.Sendable {
    /// The name of the distribution for which to return the timestamp of the last cache reset. Use the GetDistributions action to get a list of distribution names that you can specify. When omitted, the response includes the latest cache reset timestamp of all your distributions.
    public var distributionName: Swift.String?

    public init(
        distributionName: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
    }
}

public struct GetDistributionLatestCacheResetOutput: Swift.Sendable {
    /// The timestamp of the last cache reset (1479734909.17) in Unix time format.
    public var createTime: Foundation.Date?
    /// The status of the last cache reset.
    public var status: Swift.String?

    public init(
        createTime: Foundation.Date? = nil,
        status: Swift.String? = nil
    )
    {
        self.createTime = createTime
        self.status = status
    }
}

public struct GetDistributionMetricDataInput: Swift.Sendable {
    /// The name of the distribution for which to get metric data. Use the GetDistributions action to get a list of distribution names that you can specify.
    /// This member is required.
    public var distributionName: Swift.String?
    /// The end of the time interval for which to get metric data. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify 1538427600 as the end time.
    ///
    ///
    /// You can convert a human-friendly time to Unix time format using a converter like [Epoch converter](https://www.epochconverter.com/).
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The metric for which you want to return information. Valid distribution metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.
    ///
    /// * Requests - The total number of viewer requests received by your Lightsail distribution, for all HTTP methods, and for both HTTP and HTTPS requests. Statistics: The most useful statistic is Sum. Unit: The published unit is None.
    ///
    /// * BytesDownloaded - The number of bytes downloaded by viewers for GET, HEAD, and OPTIONS requests. Statistics: The most useful statistic is Sum. Unit: The published unit is None.
    ///
    /// * BytesUploaded  - The number of bytes uploaded to your origin by your Lightsail distribution, using POST and PUT requests. Statistics: The most useful statistic is Sum. Unit: The published unit is None.
    ///
    /// * TotalErrorRate - The percentage of all viewer requests for which the response's HTTP status code was 4xx or 5xx. Statistics: The most useful statistic is Average. Unit: The published unit is Percent.
    ///
    /// * 4xxErrorRate - The percentage of all viewer requests for which the response's HTTP status cod was 4xx. In these cases, the client or client viewer may have made an error. For example, a status code of 404 (Not Found) means that the client requested an object that could not be found. Statistics: The most useful statistic is Average. Unit: The published unit is Percent.
    ///
    /// * 5xxErrorRate - The percentage of all viewer requests for which the response's HTTP status code was 5xx. In these cases, the origin server did not satisfy the requests. For example, a status code of 503 (Service Unavailable) means that the origin server is currently unavailable. Statistics: The most useful statistic is Average. Unit: The published unit is Percent.
    /// This member is required.
    public var metricName: LightsailClientTypes.DistributionMetricName?
    /// The granularity, in seconds, for the metric data points that will be returned.
    /// This member is required.
    public var period: Swift.Int?
    /// The start of the time interval for which to get metric data. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify 1538424000 as the start time.
    ///
    ///
    /// You can convert a human-friendly time to Unix time format using a converter like [Epoch converter](https://www.epochconverter.com/).
    /// This member is required.
    public var startTime: Foundation.Date?
    /// The statistic for the metric. The following statistics are available:
    ///
    /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
    ///
    /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
    ///
    /// * Sum - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
    ///
    /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
    ///
    /// * SampleCount - The count, or number, of data points used for the statistical calculation.
    /// This member is required.
    public var statistics: [LightsailClientTypes.MetricStatistic]?
    /// The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units with each available metric, see the metricName parameter.
    /// This member is required.
    public var unit: LightsailClientTypes.MetricUnit?

    public init(
        distributionName: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        metricName: LightsailClientTypes.DistributionMetricName? = nil,
        period: Swift.Int? = nil,
        startTime: Foundation.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.distributionName = distributionName
        self.endTime = endTime
        self.metricName = metricName
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

public struct GetDistributionMetricDataOutput: Swift.Sendable {
    /// An array of objects that describe the metric data returned.
    public var metricData: [LightsailClientTypes.MetricDatapoint]?
    /// The name of the metric returned.
    public var metricName: LightsailClientTypes.DistributionMetricName?

    public init(
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.DistributionMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

public struct GetDistributionsInput: Swift.Sendable {
    /// The name of the distribution for which to return information. When omitted, the response includes all of your distributions in the Amazon Web Services Region where the request is made.
    public var distributionName: Swift.String?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetDistributions request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        distributionName: Swift.String? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
        self.pageToken = pageToken
    }
}

public struct GetDistributionsOutput: Swift.Sendable {
    /// An array of objects that describe your distributions.
    public var distributions: [LightsailClientTypes.LightsailDistribution]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetDistributions request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        distributions: [LightsailClientTypes.LightsailDistribution]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.distributions = distributions
        self.nextPageToken = nextPageToken
    }
}

public struct GetDomainInput: Swift.Sendable {
    /// The domain name for which your want to return information about.
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

public struct GetDomainOutput: Swift.Sendable {
    /// An array of key-value pairs containing information about your get domain request.
    public var domain: LightsailClientTypes.Domain?

    public init(
        domain: LightsailClientTypes.Domain? = nil
    )
    {
        self.domain = domain
    }
}

public struct GetDomainsInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetDomains request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

public struct GetDomainsOutput: Swift.Sendable {
    /// An array of key-value pairs containing information about each of the domain entries in the user's account.
    public var domains: [LightsailClientTypes.Domain]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetDomains request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        domains: [LightsailClientTypes.Domain]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.domains = domains
        self.nextPageToken = nextPageToken
    }
}

public struct GetExportSnapshotRecordsInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetExportSnapshotRecords request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

public struct GetExportSnapshotRecordsOutput: Swift.Sendable {
    /// A list of objects describing the export snapshot records.
    public var exportSnapshotRecords: [LightsailClientTypes.ExportSnapshotRecord]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetExportSnapshotRecords request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        exportSnapshotRecords: [LightsailClientTypes.ExportSnapshotRecord]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.exportSnapshotRecords = exportSnapshotRecords
        self.nextPageToken = nextPageToken
    }
}

public struct GetInstanceInput: Swift.Sendable {
    /// The name of the instance.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

extension LightsailClientTypes {

    /// Describes the hardware for the instance.
    public struct InstanceHardware: Swift.Sendable {
        /// The number of vCPUs the instance has.
        public var cpuCount: Swift.Int?
        /// The disks attached to the instance.
        public var disks: [LightsailClientTypes.Disk]?
        /// The amount of RAM in GB on the instance (1.0).
        public var ramSizeInGb: Swift.Float?

        public init(
            cpuCount: Swift.Int? = nil,
            disks: [LightsailClientTypes.Disk]? = nil,
            ramSizeInGb: Swift.Float? = nil
        )
        {
            self.cpuCount = cpuCount
            self.disks = disks
            self.ramSizeInGb = ramSizeInGb
        }
    }
}

extension LightsailClientTypes {

    public enum HttpEndpoint: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [HttpEndpoint] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum HttpProtocolIpv6: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [HttpProtocolIpv6] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum HttpTokens: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `optional`
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [HttpTokens] {
            return [
                .optional,
                .required
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .optional: return "optional"
            case .required: return "required"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum InstanceMetadataState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case applied
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceMetadataState] {
            return [
                .applied,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .applied: return "applied"
            case .pending: return "pending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// The metadata options for the instance.
    public struct InstanceMetadataOptions: Swift.Sendable {
        /// Indicates whether the HTTP metadata endpoint on your instances is enabled or disabled. If the value is disabled, you cannot access your instance metadata.
        public var httpEndpoint: LightsailClientTypes.HttpEndpoint?
        /// Indicates whether the IPv6 endpoint for the instance metadata service is enabled or disabled.
        public var httpProtocolIpv6: LightsailClientTypes.HttpProtocolIpv6?
        /// The desired HTTP PUT response hop limit for instance metadata requests. A larger number means that the instance metadata requests can travel farther.
        public var httpPutResponseHopLimit: Swift.Int?
        /// The state of token usage for your instance metadata requests. If the state is optional, you can choose whether to retrieve instance metadata with a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials by using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with all instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials. The version 1.0 credentials are not available. Not all instance blueprints in Lightsail support version 2.0 credentials. Use the MetadataNoToken instance metric to track the number of calls to the instance metadata service that are using version 1.0 credentials. For more information, see [Viewing instance metrics in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-health-metrics) in the Amazon Lightsail Developer Guide.
        public var httpTokens: LightsailClientTypes.HttpTokens?
        /// The state of the metadata option changes. The following states are possible:
        ///
        /// * pending - The metadata options are being updated. The instance is not yet ready to process metadata traffic with the new selection.
        ///
        /// * applied - The metadata options have been successfully applied to the instance.
        public var state: LightsailClientTypes.InstanceMetadataState?

        public init(
            httpEndpoint: LightsailClientTypes.HttpEndpoint? = nil,
            httpProtocolIpv6: LightsailClientTypes.HttpProtocolIpv6? = nil,
            httpPutResponseHopLimit: Swift.Int? = nil,
            httpTokens: LightsailClientTypes.HttpTokens? = nil,
            state: LightsailClientTypes.InstanceMetadataState? = nil
        )
        {
            self.httpEndpoint = httpEndpoint
            self.httpProtocolIpv6 = httpProtocolIpv6
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.state = state
        }
    }
}

extension LightsailClientTypes {

    /// Describes the monthly data transfer in and out of your virtual private server (or instance).
    public struct MonthlyTransfer: Swift.Sendable {
        /// The amount allocated per month (in GB).
        public var gbPerMonthAllocated: Swift.Int?

        public init(
            gbPerMonthAllocated: Swift.Int? = nil
        )
        {
            self.gbPerMonthAllocated = gbPerMonthAllocated
        }
    }
}

extension LightsailClientTypes {

    public enum PortAccessType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `private`
        case `public`
        case sdkUnknown(Swift.String)

        public static var allCases: [PortAccessType] {
            return [
                .private,
                .public
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .private: return "Private"
            case .public: return "Public"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes information about ports for an Amazon Lightsail instance.
    public struct InstancePortInfo: Swift.Sendable {
        /// The access direction (inbound or outbound). Lightsail currently supports only inbound access direction.
        public var accessDirection: LightsailClientTypes.AccessDirection?
        /// The location from which access is allowed. For example, Anywhere (0.0.0.0/0), or Custom if a specific IP address or range of IP addresses is allowed.
        public var accessFrom: Swift.String?
        /// The type of access (Public or Private).
        public var accessType: LightsailClientTypes.PortAccessType?
        /// An alias that defines access for a preconfigured range of IP addresses. The only alias currently supported is lightsail-connect, which allows IP addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your instance.
        public var cidrListAliases: [Swift.String]?
        /// The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. The ipv6Cidrs parameter lists the IPv6 addresses that are allowed to connect to an instance. For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on Wikipedia.
        public var cidrs: [Swift.String]?
        /// The common name of the port information.
        public var commonName: Swift.String?
        /// The first port in a range of open ports on an instance. Allowed ports:
        ///
        /// * TCP and UDP - 0 to 65535
        ///
        /// * ICMP - The ICMP type for IPv4 addresses. For example, specify 8 as the fromPort (ICMP type), and -1 as the toPort (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on Wikipedia.
        ///
        /// * ICMPv6 - The ICMP type for IPv6 addresses. For example, specify 128 as the fromPort (ICMPv6 type), and 0 as toPort (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).
        public var fromPort: Swift.Int
        /// The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. Only devices with an IPv6 address can connect to an instance through IPv6; otherwise, IPv4 should be used. The cidrs parameter lists the IPv4 addresses that are allowed to connect to an instance. For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on Wikipedia.
        public var ipv6Cidrs: [Swift.String]?
        /// The IP protocol name. The name can be one of the following:
        ///
        /// * tcp - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.
        ///
        /// * all - All transport layer protocol types. For more general information, see [Transport layer](https://en.wikipedia.org/wiki/Transport_layer) on Wikipedia.
        ///
        /// * udp - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.
        ///
        /// * icmp - Internet Control Message Protocol (ICMP) is used to send error messages and operational information indicating success or failure when communicating with an instance. For example, an error is indicated when an instance could not be reached. When you specify icmp as the protocol, you must specify the ICMP type using the fromPort parameter, and ICMP code using the toPort parameter.
        ///
        /// * icmp6 - Internet Control Message Protocol (ICMP) for IPv6. When you specify icmp6 as the protocol, you must specify the ICMP type using the fromPort parameter, and ICMP code using the toPort parameter.
        public var `protocol`: LightsailClientTypes.NetworkProtocol?
        /// The last port in a range of open ports on an instance. Allowed ports:
        ///
        /// * TCP and UDP - 0 to 65535
        ///
        /// * ICMP - The ICMP code for IPv4 addresses. For example, specify 8 as the fromPort (ICMP type), and -1 as the toPort (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on Wikipedia.
        ///
        /// * ICMPv6 - The ICMP code for IPv6 addresses. For example, specify 128 as the fromPort (ICMPv6 type), and 0 as toPort (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).
        public var toPort: Swift.Int

        public init(
            accessDirection: LightsailClientTypes.AccessDirection? = nil,
            accessFrom: Swift.String? = nil,
            accessType: LightsailClientTypes.PortAccessType? = nil,
            cidrListAliases: [Swift.String]? = nil,
            cidrs: [Swift.String]? = nil,
            commonName: Swift.String? = nil,
            fromPort: Swift.Int = 0,
            ipv6Cidrs: [Swift.String]? = nil,
            `protocol`: LightsailClientTypes.NetworkProtocol? = nil,
            toPort: Swift.Int = 0
        )
        {
            self.accessDirection = accessDirection
            self.accessFrom = accessFrom
            self.accessType = accessType
            self.cidrListAliases = cidrListAliases
            self.cidrs = cidrs
            self.commonName = commonName
            self.fromPort = fromPort
            self.ipv6Cidrs = ipv6Cidrs
            self.`protocol` = `protocol`
            self.toPort = toPort
        }
    }
}

extension LightsailClientTypes {

    /// Describes monthly data transfer rates and port information for an instance.
    public struct InstanceNetworking: Swift.Sendable {
        /// The amount of data in GB allocated for monthly data transfers.
        public var monthlyTransfer: LightsailClientTypes.MonthlyTransfer?
        /// An array of key-value pairs containing information about the ports on the instance.
        public var ports: [LightsailClientTypes.InstancePortInfo]?

        public init(
            monthlyTransfer: LightsailClientTypes.MonthlyTransfer? = nil,
            ports: [LightsailClientTypes.InstancePortInfo]? = nil
        )
        {
            self.monthlyTransfer = monthlyTransfer
            self.ports = ports
        }
    }
}

extension LightsailClientTypes {

    /// Describes the virtual private server (or instance) status.
    public struct InstanceState: Swift.Sendable {
        /// The status code for the instance.
        public var code: Swift.Int?
        /// The state of the instance (running or pending).
        public var name: Swift.String?

        public init(
            code: Swift.Int? = nil,
            name: Swift.String? = nil
        )
        {
            self.code = code
            self.name = name
        }
    }
}

extension LightsailClientTypes {

    /// Describes an instance (a virtual private server).
    public struct Instance: Swift.Sendable {
        /// An array of objects representing the add-ons enabled on the instance.
        public var addOns: [LightsailClientTypes.AddOn]?
        /// The Amazon Resource Name (ARN) of the instance (arn:aws:lightsail:us-east-2:123456789101:Instance/244ad76f-8aad-4741-809f-12345EXAMPLE).
        public var arn: Swift.String?
        /// The blueprint ID (amazon_linux_2023).
        public var blueprintId: Swift.String?
        /// The friendly name of the blueprint (Amazon Linux 2023).
        public var blueprintName: Swift.String?
        /// The bundle for the instance (micro_x_x).
        public var bundleId: Swift.String?
        /// The timestamp when the instance was created (1479734909.17) in Unix time format.
        public var createdAt: Foundation.Date?
        /// The size of the vCPU and the amount of RAM for the instance.
        public var hardware: LightsailClientTypes.InstanceHardware?
        /// The IP address type of the instance. The possible values are ipv4 for IPv4 only, ipv6 for IPv6 only, and dualstack for IPv4 and IPv6.
        public var ipAddressType: LightsailClientTypes.IpAddressType?
        /// The IPv6 addresses of the instance.
        public var ipv6Addresses: [Swift.String]?
        /// A Boolean value indicating whether this instance has a static IP assigned to it.
        public var isStaticIp: Swift.Bool?
        /// The region name and Availability Zone where the instance is located.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The metadata options for the Amazon Lightsail instance.
        public var metadataOptions: LightsailClientTypes.InstanceMetadataOptions?
        /// The name the user gave the instance (Amazon_Linux_2023-1).
        public var name: Swift.String?
        /// Information about the public ports and monthly data transfer rates for the instance.
        public var networking: LightsailClientTypes.InstanceNetworking?
        /// The private IP address of the instance.
        public var privateIpAddress: Swift.String?
        /// The public IP address of the instance.
        public var publicIpAddress: Swift.String?
        /// The type of resource (usually Instance).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The name of the SSH key being used to connect to the instance (LightsailDefaultKeyPair).
        public var sshKeyName: Swift.String?
        /// The status code and the state (running) for the instance.
        public var state: LightsailClientTypes.InstanceState?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?
        /// The user name for connecting to the instance (ec2-user).
        public var username: Swift.String?

        public init(
            addOns: [LightsailClientTypes.AddOn]? = nil,
            arn: Swift.String? = nil,
            blueprintId: Swift.String? = nil,
            blueprintName: Swift.String? = nil,
            bundleId: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            hardware: LightsailClientTypes.InstanceHardware? = nil,
            ipAddressType: LightsailClientTypes.IpAddressType? = nil,
            ipv6Addresses: [Swift.String]? = nil,
            isStaticIp: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            metadataOptions: LightsailClientTypes.InstanceMetadataOptions? = nil,
            name: Swift.String? = nil,
            networking: LightsailClientTypes.InstanceNetworking? = nil,
            privateIpAddress: Swift.String? = nil,
            publicIpAddress: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sshKeyName: Swift.String? = nil,
            state: LightsailClientTypes.InstanceState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            username: Swift.String? = nil
        )
        {
            self.addOns = addOns
            self.arn = arn
            self.blueprintId = blueprintId
            self.blueprintName = blueprintName
            self.bundleId = bundleId
            self.createdAt = createdAt
            self.hardware = hardware
            self.ipAddressType = ipAddressType
            self.ipv6Addresses = ipv6Addresses
            self.isStaticIp = isStaticIp
            self.location = location
            self.metadataOptions = metadataOptions
            self.name = name
            self.networking = networking
            self.privateIpAddress = privateIpAddress
            self.publicIpAddress = publicIpAddress
            self.resourceType = resourceType
            self.sshKeyName = sshKeyName
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
            self.username = username
        }
    }
}

public struct GetInstanceOutput: Swift.Sendable {
    /// An array of key-value pairs containing information about the specified instance.
    public var instance: LightsailClientTypes.Instance?

    public init(
        instance: LightsailClientTypes.Instance? = nil
    )
    {
        self.instance = instance
    }
}

extension LightsailClientTypes {

    public enum InstanceAccessProtocol: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rdp
        case ssh
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceAccessProtocol] {
            return [
                .rdp,
                .ssh
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rdp: return "rdp"
            case .ssh: return "ssh"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetInstanceAccessDetailsInput: Swift.Sendable {
    /// The name of the instance to access.
    /// This member is required.
    public var instanceName: Swift.String?
    /// The protocol to use to connect to your instance. Defaults to ssh.
    public var `protocol`: LightsailClientTypes.InstanceAccessProtocol?

    public init(
        instanceName: Swift.String? = nil,
        `protocol`: LightsailClientTypes.InstanceAccessProtocol? = nil
    )
    {
        self.instanceName = instanceName
        self.`protocol` = `protocol`
    }
}

extension LightsailClientTypes {

    /// Describes the public SSH host keys or the RDP certificate.
    public struct HostKeyAttributes: Swift.Sendable {
        /// The SSH host key algorithm or the RDP certificate format. For SSH host keys, the algorithm may be ssh-rsa, ecdsa-sha2-nistp256, ssh-ed25519, etc. For RDP certificates, the algorithm is always x509-cert.
        public var algorithm: Swift.String?
        /// The SHA-1 fingerprint of the returned SSH host key or RDP certificate.
        ///
        /// * Example of an SHA-1 SSH fingerprint: SHA1:1CHH6FaAaXjtFOsR/t83vf91SR0
        ///
        /// * Example of an SHA-1 RDP fingerprint: af:34:51:fe:09:f0:e0:da:b8:4e:56:ca:60:c2:10:ff:38:06:db:45
        public var fingerprintSHA1: Swift.String?
        /// The SHA-256 fingerprint of the returned SSH host key or RDP certificate.
        ///
        /// * Example of an SHA-256 SSH fingerprint: SHA256:KTsMnRBh1IhD17HpdfsbzeGA4jOijm5tyXsMjKVbB8o
        ///
        /// * Example of an SHA-256 RDP fingerprint: 03:9b:36:9f:4b:de:4e:61:70:fc:7c:c9:78:e7:d2:1a:1c:25:a8:0c:91:f6:7c:e4:d6:a0:85:c8:b4:53:99:68
        public var fingerprintSHA256: Swift.String?
        /// The returned RDP certificate is not valid after this point in time. This value is listed only for RDP certificates.
        public var notValidAfter: Foundation.Date?
        /// The returned RDP certificate is valid after this point in time. This value is listed only for RDP certificates.
        public var notValidBefore: Foundation.Date?
        /// The public SSH host key or the RDP certificate.
        public var publicKey: Swift.String?
        /// The time that the SSH host key or RDP certificate was recorded by Lightsail.
        public var witnessedAt: Foundation.Date?

        public init(
            algorithm: Swift.String? = nil,
            fingerprintSHA1: Swift.String? = nil,
            fingerprintSHA256: Swift.String? = nil,
            notValidAfter: Foundation.Date? = nil,
            notValidBefore: Foundation.Date? = nil,
            publicKey: Swift.String? = nil,
            witnessedAt: Foundation.Date? = nil
        )
        {
            self.algorithm = algorithm
            self.fingerprintSHA1 = fingerprintSHA1
            self.fingerprintSHA256 = fingerprintSHA256
            self.notValidAfter = notValidAfter
            self.notValidBefore = notValidBefore
            self.publicKey = publicKey
            self.witnessedAt = witnessedAt
        }
    }
}

extension LightsailClientTypes {

    /// The password data for the Windows Server-based instance, including the ciphertext and the key pair name.
    public struct PasswordData: Swift.Sendable {
        /// The encrypted password. Ciphertext will be an empty string if access to your new instance is not ready yet. When you create an instance, it can take up to 15 minutes for the instance to be ready. If you use the default key pair (LightsailDefaultKeyPair), the decrypted password will be available in the password field. If you are using a custom key pair, you need to use your own means of decryption. If you change the Administrator password on the instance, Lightsail will continue to return the original ciphertext value. When accessing the instance using RDP, you need to manually enter the Administrator password after changing it from the default.
        public var ciphertext: Swift.String?
        /// The name of the key pair that you used when creating your instance. If no key pair name was specified when creating the instance, Lightsail uses the default key pair (LightsailDefaultKeyPair). If you are using a custom key pair, you need to use your own means of decrypting your password using the ciphertext. Lightsail creates the ciphertext by encrypting your password with the public key part of this key pair.
        public var keyPairName: Swift.String?

        public init(
            ciphertext: Swift.String? = nil,
            keyPairName: Swift.String? = nil
        )
        {
            self.ciphertext = ciphertext
            self.keyPairName = keyPairName
        }
    }
}

extension LightsailClientTypes {

    /// The parameters for gaining temporary access to one of your Amazon Lightsail instances.
    public struct InstanceAccessDetails: Swift.Sendable {
        /// For SSH access, the public key to use when accessing your instance For OpenSSH clients (command line SSH), you should save this value to tempkey-cert.pub.
        public var certKey: Swift.String?
        /// For SSH access, the date on which the temporary keys expire.
        public var expiresAt: Foundation.Date?
        /// Describes the public SSH host keys or the RDP certificate.
        public var hostKeys: [LightsailClientTypes.HostKeyAttributes]?
        /// The name of this Amazon Lightsail instance.
        public var instanceName: Swift.String?
        /// The public IP address of the Amazon Lightsail instance.
        public var ipAddress: Swift.String?
        /// The IPv6 address of the Amazon Lightsail instance.
        public var ipv6Addresses: [Swift.String]?
        /// For RDP access, the password for your Amazon Lightsail instance. Password will be an empty string if the password for your new instance is not ready yet. When you create an instance, it can take up to 15 minutes for the instance to be ready. If you create an instance using any key pair other than the default (LightsailDefaultKeyPair), password will always be an empty string. If you change the Administrator password on the instance, Lightsail will continue to return the original password value. When accessing the instance using RDP, you need to manually enter the Administrator password after changing it from the default.
        public var password: Swift.String?
        /// For a Windows Server-based instance, an object with the data you can use to retrieve your password. This is only needed if password is empty and the instance is not new (and therefore the password is not ready yet). When you create an instance, it can take up to 15 minutes for the instance to be ready.
        public var passwordData: LightsailClientTypes.PasswordData?
        /// For SSH access, the temporary private key. For OpenSSH clients (command line SSH), you should save this value to tempkey).
        public var privateKey: Swift.String?
        /// The protocol for these Amazon Lightsail instance access details.
        public var `protocol`: LightsailClientTypes.InstanceAccessProtocol?
        /// The user name to use when logging in to the Amazon Lightsail instance.
        public var username: Swift.String?

        public init(
            certKey: Swift.String? = nil,
            expiresAt: Foundation.Date? = nil,
            hostKeys: [LightsailClientTypes.HostKeyAttributes]? = nil,
            instanceName: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            ipv6Addresses: [Swift.String]? = nil,
            password: Swift.String? = nil,
            passwordData: LightsailClientTypes.PasswordData? = nil,
            privateKey: Swift.String? = nil,
            `protocol`: LightsailClientTypes.InstanceAccessProtocol? = nil,
            username: Swift.String? = nil
        )
        {
            self.certKey = certKey
            self.expiresAt = expiresAt
            self.hostKeys = hostKeys
            self.instanceName = instanceName
            self.ipAddress = ipAddress
            self.ipv6Addresses = ipv6Addresses
            self.password = password
            self.passwordData = passwordData
            self.privateKey = privateKey
            self.`protocol` = `protocol`
            self.username = username
        }
    }
}

public struct GetInstanceAccessDetailsOutput: Swift.Sendable {
    /// An array of key-value pairs containing information about a get instance access request.
    public var accessDetails: LightsailClientTypes.InstanceAccessDetails?

    public init(
        accessDetails: LightsailClientTypes.InstanceAccessDetails? = nil
    )
    {
        self.accessDetails = accessDetails
    }
}

extension LightsailClientTypes {

    public enum InstanceMetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case burstcapacitypercentage
        case burstcapacitytime
        case cpuutilization
        case metadatanotoken
        case networkin
        case networkout
        case statuscheckfailed
        case statuscheckfailedInstance
        case statuscheckfailedSystem
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceMetricName] {
            return [
                .burstcapacitypercentage,
                .burstcapacitytime,
                .cpuutilization,
                .metadatanotoken,
                .networkin,
                .networkout,
                .statuscheckfailed,
                .statuscheckfailedInstance,
                .statuscheckfailedSystem
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .burstcapacitypercentage: return "BurstCapacityPercentage"
            case .burstcapacitytime: return "BurstCapacityTime"
            case .cpuutilization: return "CPUUtilization"
            case .metadatanotoken: return "MetadataNoToken"
            case .networkin: return "NetworkIn"
            case .networkout: return "NetworkOut"
            case .statuscheckfailed: return "StatusCheckFailed"
            case .statuscheckfailedInstance: return "StatusCheckFailed_Instance"
            case .statuscheckfailedSystem: return "StatusCheckFailed_System"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetInstanceMetricDataInput: Swift.Sendable {
    /// The end time of the time period.
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The name of the instance for which you want to get metrics data.
    /// This member is required.
    public var instanceName: Swift.String?
    /// The metric for which you want to return information. Valid instance metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.
    ///
    /// * BurstCapacityPercentage - The percentage of CPU performance available for your instance to burst above its baseline. Your instance continuously accrues and consumes burst capacity. Burst capacity stops accruing when your instance's BurstCapacityPercentage reaches 100%. For more information, see [Viewing instance burst capacity in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-burst-capacity). Statistics: The most useful statistics are Maximum and Average. Unit: The published unit is Percent.
    ///
    /// * BurstCapacityTime - The available amount of time for your instance to burst at 100% CPU utilization. Your instance continuously accrues and consumes burst capacity. Burst capacity time stops accruing when your instance's BurstCapacityPercentage metric reaches 100%. Burst capacity time is consumed at the full rate only when your instance operates at 100% CPU utilization. For example, if your instance operates at 50% CPU utilization in the burstable zone for a 5-minute period, then it consumes CPU burst capacity minutes at a 50% rate in that period. Your instance consumed 2 minutes and 30 seconds of CPU burst capacity minutes in the 5-minute period. For more information, see [Viewing instance burst capacity in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-burst-capacity). Statistics: The most useful statistics are Maximum and Average. Unit: The published unit is Seconds.
    ///
    /// * CPUUtilization - The percentage of allocated compute units that are currently in use on the instance. This metric identifies the processing power to run the applications on the instance. Tools in your operating system can show a lower percentage than Lightsail when the instance is not allocated a full processor core. Statistics: The most useful statistics are Maximum and Average. Unit: The published unit is Percent.
    ///
    /// * NetworkIn - The number of bytes received on all network interfaces by the instance. This metric identifies the volume of incoming network traffic to the instance. The number reported is the number of bytes received during the period. Because this metric is reported in 5-minute intervals, divide the reported number by 300 to find Bytes/second. Statistics: The most useful statistic is Sum. Unit: The published unit is Bytes.
    ///
    /// * NetworkOut - The number of bytes sent out on all network interfaces by the instance. This metric identifies the volume of outgoing network traffic from the instance. The number reported is the number of bytes sent during the period. Because this metric is reported in 5-minute intervals, divide the reported number by 300 to find Bytes/second. Statistics: The most useful statistic is Sum. Unit: The published unit is Bytes.
    ///
    /// * StatusCheckFailed - Reports whether the instance passed or failed both the instance status check and the system status check. This metric can be either 0 (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds) granularity. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    ///
    /// * StatusCheckFailed_Instance - Reports whether the instance passed or failed the instance status check. This metric can be either 0 (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds) granularity. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    ///
    /// * StatusCheckFailed_System - Reports whether the instance passed or failed the system status check. This metric can be either 0 (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds) granularity. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    ///
    /// * MetadataNoToken - Reports the number of times that the instance metadata service was successfully accessed without a token. This metric determines if there are any processes accessing instance metadata by using Instance Metadata Service Version 1, which doesn't use a token. If all requests use token-backed sessions, such as Instance Metadata Service Version 2, then the value is 0. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    /// This member is required.
    public var metricName: LightsailClientTypes.InstanceMetricName?
    /// The granularity, in seconds, of the returned data points. The StatusCheckFailed, StatusCheckFailed_Instance, and StatusCheckFailed_System instance metric data is available in 1-minute (60 seconds) granularity. All other instance metric data is available in 5-minute (300 seconds) granularity.
    /// This member is required.
    public var period: Swift.Int?
    /// The start time of the time period.
    /// This member is required.
    public var startTime: Foundation.Date?
    /// The statistic for the metric. The following statistics are available:
    ///
    /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
    ///
    /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
    ///
    /// * Sum - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
    ///
    /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
    ///
    /// * SampleCount - The count, or number, of data points used for the statistical calculation.
    /// This member is required.
    public var statistics: [LightsailClientTypes.MetricStatistic]?
    /// The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units to specify with each available metric, see the metricName parameter.
    /// This member is required.
    public var unit: LightsailClientTypes.MetricUnit?

    public init(
        endTime: Foundation.Date? = nil,
        instanceName: Swift.String? = nil,
        metricName: LightsailClientTypes.InstanceMetricName? = nil,
        period: Swift.Int? = nil,
        startTime: Foundation.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.endTime = endTime
        self.instanceName = instanceName
        self.metricName = metricName
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

public struct GetInstanceMetricDataOutput: Swift.Sendable {
    /// An array of objects that describe the metric data returned.
    public var metricData: [LightsailClientTypes.MetricDatapoint]?
    /// The name of the metric returned.
    public var metricName: LightsailClientTypes.InstanceMetricName?

    public init(
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.InstanceMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

public struct GetInstancePortStatesInput: Swift.Sendable {
    /// The name of the instance for which to return firewall port states.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

extension LightsailClientTypes {

    public enum PortState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case closed
        case `open`
        case sdkUnknown(Swift.String)

        public static var allCases: [PortState] {
            return [
                .closed,
                .open
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .closed: return "closed"
            case .open: return "open"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes open ports on an instance, the IP addresses allowed to connect to the instance through the ports, and the protocol.
    public struct InstancePortState: Swift.Sendable {
        /// An alias that defines access for a preconfigured range of IP addresses. The only alias currently supported is lightsail-connect, which allows IP addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your instance.
        public var cidrListAliases: [Swift.String]?
        /// The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. The ipv6Cidrs parameter lists the IPv6 addresses that are allowed to connect to an instance. For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on Wikipedia.
        public var cidrs: [Swift.String]?
        /// The first port in a range of open ports on an instance. Allowed ports:
        ///
        /// * TCP and UDP - 0 to 65535
        ///
        /// * ICMP - The ICMP type for IPv4 addresses. For example, specify 8 as the fromPort (ICMP type), and -1 as the toPort (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on Wikipedia.
        ///
        /// * ICMPv6 - The ICMP type for IPv6 addresses. For example, specify 128 as the fromPort (ICMPv6 type), and 0 as toPort (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).
        public var fromPort: Swift.Int
        /// The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. Only devices with an IPv6 address can connect to an instance through IPv6; otherwise, IPv4 should be used. The cidrs parameter lists the IPv4 addresses that are allowed to connect to an instance. For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on Wikipedia.
        public var ipv6Cidrs: [Swift.String]?
        /// The IP protocol name. The name can be one of the following:
        ///
        /// * tcp - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.
        ///
        /// * all - All transport layer protocol types. For more general information, see [Transport layer](https://en.wikipedia.org/wiki/Transport_layer) on Wikipedia.
        ///
        /// * udp - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.
        ///
        /// * icmp - Internet Control Message Protocol (ICMP) is used to send error messages and operational information indicating success or failure when communicating with an instance. For example, an error is indicated when an instance could not be reached. When you specify icmp as the protocol, you must specify the ICMP type using the fromPort parameter, and ICMP code using the toPort parameter.
        ///
        /// * icmp6 - Internet Control Message Protocol (ICMP) for IPv6. When you specify icmp6 as the protocol, you must specify the ICMP type using the fromPort parameter, and ICMP code using the toPort parameter.
        public var `protocol`: LightsailClientTypes.NetworkProtocol?
        /// Specifies whether the instance port is open or closed. The port state for Lightsail instances is always open.
        public var state: LightsailClientTypes.PortState?
        /// The last port in a range of open ports on an instance. Allowed ports:
        ///
        /// * TCP and UDP - 0 to 65535
        ///
        /// * ICMP - The ICMP code for IPv4 addresses. For example, specify 8 as the fromPort (ICMP type), and -1 as the toPort (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on Wikipedia.
        ///
        /// * ICMPv6 - The ICMP code for IPv6 addresses. For example, specify 128 as the fromPort (ICMPv6 type), and 0 as toPort (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).
        public var toPort: Swift.Int

        public init(
            cidrListAliases: [Swift.String]? = nil,
            cidrs: [Swift.String]? = nil,
            fromPort: Swift.Int = 0,
            ipv6Cidrs: [Swift.String]? = nil,
            `protocol`: LightsailClientTypes.NetworkProtocol? = nil,
            state: LightsailClientTypes.PortState? = nil,
            toPort: Swift.Int = 0
        )
        {
            self.cidrListAliases = cidrListAliases
            self.cidrs = cidrs
            self.fromPort = fromPort
            self.ipv6Cidrs = ipv6Cidrs
            self.`protocol` = `protocol`
            self.state = state
            self.toPort = toPort
        }
    }
}

public struct GetInstancePortStatesOutput: Swift.Sendable {
    /// An array of objects that describe the firewall port states for the specified instance.
    public var portStates: [LightsailClientTypes.InstancePortState]?

    public init(
        portStates: [LightsailClientTypes.InstancePortState]? = nil
    )
    {
        self.portStates = portStates
    }
}

public struct GetInstancesInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetInstances request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

public struct GetInstancesOutput: Swift.Sendable {
    /// An array of key-value pairs containing information about your instances.
    public var instances: [LightsailClientTypes.Instance]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetInstances request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        instances: [LightsailClientTypes.Instance]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.instances = instances
        self.nextPageToken = nextPageToken
    }
}

public struct GetInstanceSnapshotInput: Swift.Sendable {
    /// The name of the snapshot for which you are requesting information.
    /// This member is required.
    public var instanceSnapshotName: Swift.String?

    public init(
        instanceSnapshotName: Swift.String? = nil
    )
    {
        self.instanceSnapshotName = instanceSnapshotName
    }
}

extension LightsailClientTypes {

    public enum InstanceSnapshotState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case error
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceSnapshotState] {
            return [
                .available,
                .error,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .error: return "error"
            case .pending: return "pending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes an instance snapshot.
    public struct InstanceSnapshot: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the snapshot (arn:aws:lightsail:us-east-2:123456789101:InstanceSnapshot/d23b5706-3322-4d83-81e5-12345EXAMPLE).
        public var arn: Swift.String?
        /// The timestamp when the snapshot was created (1479907467.024).
        public var createdAt: Foundation.Date?
        /// An array of disk objects containing information about all block storage disks.
        public var fromAttachedDisks: [LightsailClientTypes.Disk]?
        /// The blueprint ID from which you created the snapshot (amazon_linux_2023). A blueprint is a virtual private server (or instance) image used to create instances quickly.
        public var fromBlueprintId: Swift.String?
        /// The bundle ID from which you created the snapshot (micro_x_x).
        public var fromBundleId: Swift.String?
        /// The Amazon Resource Name (ARN) of the instance from which the snapshot was created (arn:aws:lightsail:us-east-2:123456789101:Instance/64b8404c-ccb1-430b-8daf-12345EXAMPLE).
        public var fromInstanceArn: Swift.String?
        /// The instance from which the snapshot was created.
        public var fromInstanceName: Swift.String?
        /// A Boolean value indicating whether the snapshot was created from an automatic snapshot.
        public var isFromAutoSnapshot: Swift.Bool?
        /// The region name and Availability Zone where you created the snapshot.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the snapshot.
        public var name: Swift.String?
        /// The progress of the snapshot. This is populated only for disk snapshots, and is null for instance snapshots.
        public var progress: Swift.String?
        /// The type of resource (usually InstanceSnapshot).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The size in GB of the SSD.
        public var sizeInGb: Swift.Int?
        /// The state the snapshot is in.
        public var state: LightsailClientTypes.InstanceSnapshotState?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            fromAttachedDisks: [LightsailClientTypes.Disk]? = nil,
            fromBlueprintId: Swift.String? = nil,
            fromBundleId: Swift.String? = nil,
            fromInstanceArn: Swift.String? = nil,
            fromInstanceName: Swift.String? = nil,
            isFromAutoSnapshot: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            progress: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sizeInGb: Swift.Int? = nil,
            state: LightsailClientTypes.InstanceSnapshotState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.fromAttachedDisks = fromAttachedDisks
            self.fromBlueprintId = fromBlueprintId
            self.fromBundleId = fromBundleId
            self.fromInstanceArn = fromInstanceArn
            self.fromInstanceName = fromInstanceName
            self.isFromAutoSnapshot = isFromAutoSnapshot
            self.location = location
            self.name = name
            self.progress = progress
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }
}

public struct GetInstanceSnapshotOutput: Swift.Sendable {
    /// An array of key-value pairs containing information about the results of your get instance snapshot request.
    public var instanceSnapshot: LightsailClientTypes.InstanceSnapshot?

    public init(
        instanceSnapshot: LightsailClientTypes.InstanceSnapshot? = nil
    )
    {
        self.instanceSnapshot = instanceSnapshot
    }
}

public struct GetInstanceSnapshotsInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetInstanceSnapshots request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

public struct GetInstanceSnapshotsOutput: Swift.Sendable {
    /// An array of key-value pairs containing information about the results of your get instance snapshots request.
    public var instanceSnapshots: [LightsailClientTypes.InstanceSnapshot]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetInstanceSnapshots request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        instanceSnapshots: [LightsailClientTypes.InstanceSnapshot]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.instanceSnapshots = instanceSnapshots
        self.nextPageToken = nextPageToken
    }
}

public struct GetInstanceStateInput: Swift.Sendable {
    /// The name of the instance to get state information about.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

public struct GetInstanceStateOutput: Swift.Sendable {
    /// The state of the instance.
    public var state: LightsailClientTypes.InstanceState?

    public init(
        state: LightsailClientTypes.InstanceState? = nil
    )
    {
        self.state = state
    }
}

public struct GetKeyPairInput: Swift.Sendable {
    /// The name of the key pair for which you are requesting information.
    /// This member is required.
    public var keyPairName: Swift.String?

    public init(
        keyPairName: Swift.String? = nil
    )
    {
        self.keyPairName = keyPairName
    }
}

public struct GetKeyPairOutput: Swift.Sendable {
    /// An array of key-value pairs containing information about the key pair.
    public var keyPair: LightsailClientTypes.KeyPair?

    public init(
        keyPair: LightsailClientTypes.KeyPair? = nil
    )
    {
        self.keyPair = keyPair
    }
}

public struct GetKeyPairsInput: Swift.Sendable {
    /// A Boolean value that indicates whether to include the default key pair in the response of your request.
    public var includeDefaultKeyPair: Swift.Bool?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetKeyPairs request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        includeDefaultKeyPair: Swift.Bool? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.includeDefaultKeyPair = includeDefaultKeyPair
        self.pageToken = pageToken
    }
}

public struct GetKeyPairsOutput: Swift.Sendable {
    /// An array of key-value pairs containing information about the key pairs.
    public var keyPairs: [LightsailClientTypes.KeyPair]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetKeyPairs request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        keyPairs: [LightsailClientTypes.KeyPair]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.keyPairs = keyPairs
        self.nextPageToken = nextPageToken
    }
}

public struct GetLoadBalancerInput: Swift.Sendable {
    /// The name of the load balancer.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init(
        loadBalancerName: Swift.String? = nil
    )
    {
        self.loadBalancerName = loadBalancerName
    }
}

extension LightsailClientTypes {

    public enum LoadBalancerAttributeName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case healthcheckpath
        case httpsredirectionenabled
        case sessionstickinessenabled
        case sessionstickinessLbCookiedurationseconds
        case tlspolicyname
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerAttributeName] {
            return [
                .healthcheckpath,
                .httpsredirectionenabled,
                .sessionstickinessenabled,
                .sessionstickinessLbCookiedurationseconds,
                .tlspolicyname
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .healthcheckpath: return "HealthCheckPath"
            case .httpsredirectionenabled: return "HttpsRedirectionEnabled"
            case .sessionstickinessenabled: return "SessionStickinessEnabled"
            case .sessionstickinessLbCookiedurationseconds: return "SessionStickiness_LB_CookieDurationSeconds"
            case .tlspolicyname: return "TlsPolicyName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum InstanceHealthState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case draining
        case healthy
        case initial
        case unavailable
        case unhealthy
        case unused
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceHealthState] {
            return [
                .draining,
                .healthy,
                .initial,
                .unavailable,
                .unhealthy,
                .unused
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .draining: return "draining"
            case .healthy: return "healthy"
            case .initial: return "initial"
            case .unavailable: return "unavailable"
            case .unhealthy: return "unhealthy"
            case .unused: return "unused"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum InstanceHealthReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case instancederegistrationinprogress
        case instancefailedhealthchecks
        case instanceinvalidstate
        case instanceipunusable
        case instancenotinuse
        case instancenotregistered
        case instanceresponsecodemismatch
        case instancetimeout
        case lbinitialhealthchecking
        case lbinternalerror
        case lbregistrationinprogress
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceHealthReason] {
            return [
                .instancederegistrationinprogress,
                .instancefailedhealthchecks,
                .instanceinvalidstate,
                .instanceipunusable,
                .instancenotinuse,
                .instancenotregistered,
                .instanceresponsecodemismatch,
                .instancetimeout,
                .lbinitialhealthchecking,
                .lbinternalerror,
                .lbregistrationinprogress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .instancederegistrationinprogress: return "Instance.DeregistrationInProgress"
            case .instancefailedhealthchecks: return "Instance.FailedHealthChecks"
            case .instanceinvalidstate: return "Instance.InvalidState"
            case .instanceipunusable: return "Instance.IpUnusable"
            case .instancenotinuse: return "Instance.NotInUse"
            case .instancenotregistered: return "Instance.NotRegistered"
            case .instanceresponsecodemismatch: return "Instance.ResponseCodeMismatch"
            case .instancetimeout: return "Instance.Timeout"
            case .lbinitialhealthchecking: return "Lb.InitialHealthChecking"
            case .lbinternalerror: return "Lb.InternalError"
            case .lbregistrationinprogress: return "Lb.RegistrationInProgress"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes information about the health of the instance.
    public struct InstanceHealthSummary: Swift.Sendable {
        /// Describes the overall instance health. Valid values are below.
        public var instanceHealth: LightsailClientTypes.InstanceHealthState?
        /// More information about the instance health. If the instanceHealth is healthy, then an instanceHealthReason value is not provided. If instanceHealth is initial, the instanceHealthReason value can be one of the following:
        ///
        /// * Lb.RegistrationInProgress - The target instance is in the process of being registered with the load balancer.
        ///
        /// * Lb.InitialHealthChecking - The Lightsail load balancer is still sending the target instance the minimum number of health checks required to determine its health status.
        ///
        ///
        /// If instanceHealth is unhealthy, the instanceHealthReason value can be one of the following:
        ///
        /// * Instance.ResponseCodeMismatch - The health checks did not return an expected HTTP code.
        ///
        /// * Instance.Timeout - The health check requests timed out.
        ///
        /// * Instance.FailedHealthChecks - The health checks failed because the connection to the target instance timed out, the target instance response was malformed, or the target instance failed the health check for an unknown reason.
        ///
        /// * Lb.InternalError - The health checks failed due to an internal error.
        ///
        ///
        /// If instanceHealth is unused, the instanceHealthReason value can be one of the following:
        ///
        /// * Instance.NotRegistered - The target instance is not registered with the target group.
        ///
        /// * Instance.NotInUse - The target group is not used by any load balancer, or the target instance is in an Availability Zone that is not enabled for its load balancer.
        ///
        /// * Instance.IpUnusable - The target IP address is reserved for use by a Lightsail load balancer.
        ///
        /// * Instance.InvalidState - The target is in the stopped or terminated state.
        ///
        ///
        /// If instanceHealth is draining, the instanceHealthReason value can be one of the following:
        ///
        /// * Instance.DeregistrationInProgress - The target instance is in the process of being deregistered and the deregistration delay period has not expired.
        public var instanceHealthReason: LightsailClientTypes.InstanceHealthReason?
        /// The name of the Lightsail instance for which you are requesting health check data.
        public var instanceName: Swift.String?

        public init(
            instanceHealth: LightsailClientTypes.InstanceHealthState? = nil,
            instanceHealthReason: LightsailClientTypes.InstanceHealthReason? = nil,
            instanceName: Swift.String? = nil
        )
        {
            self.instanceHealth = instanceHealth
            self.instanceHealthReason = instanceHealthReason
            self.instanceName = instanceName
        }
    }
}

extension LightsailClientTypes {

    public enum LoadBalancerProtocol: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case http
        case httpHttps
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerProtocol] {
            return [
                .http,
                .httpHttps
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .http: return "HTTP"
            case .httpHttps: return "HTTP_HTTPS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum LoadBalancerState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case activeimpaired
        case failed
        case provisioning
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerState] {
            return [
                .active,
                .activeimpaired,
                .failed,
                .provisioning,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .activeimpaired: return "active_impaired"
            case .failed: return "failed"
            case .provisioning: return "provisioning"
            case .unknown: return "unknown"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Provides a summary of SSL/TLS certificate metadata.
    public struct LoadBalancerTlsCertificateSummary: Swift.Sendable {
        /// When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
        public var isAttached: Swift.Bool?
        /// The name of the SSL/TLS certificate.
        public var name: Swift.String?

        public init(
            isAttached: Swift.Bool? = nil,
            name: Swift.String? = nil
        )
        {
            self.isAttached = isAttached
            self.name = name
        }
    }
}

extension LightsailClientTypes {

    /// Describes a load balancer.
    public struct LoadBalancer: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the load balancer.
        public var arn: Swift.String?
        /// A string to string map of the configuration options for your load balancer. Valid values are listed below.
        public var configurationOptions: [Swift.String: Swift.String]?
        /// The date when your load balancer was created.
        public var createdAt: Foundation.Date?
        /// The DNS name of your Lightsail load balancer.
        public var dnsName: Swift.String?
        /// The path you specified to perform your health checks. If no path is specified, the load balancer tries to make a request to the default (root) page.
        public var healthCheckPath: Swift.String?
        /// A Boolean value that indicates whether HTTPS redirection is enabled for the load balancer.
        public var httpsRedirectionEnabled: Swift.Bool?
        /// An array of InstanceHealthSummary objects describing the health of the load balancer.
        public var instanceHealthSummary: [LightsailClientTypes.InstanceHealthSummary]?
        /// The port where the load balancer will direct traffic to your Lightsail instances. For HTTP traffic, it's port 80. For HTTPS traffic, it's port 443.
        public var instancePort: Swift.Int?
        /// The IP address type of the load balancer. The possible values are ipv4 for IPv4 only, ipv6 for IPv6 only, and dualstack for IPv4 and IPv6.
        public var ipAddressType: LightsailClientTypes.IpAddressType?
        /// The AWS Region where your load balancer was created (us-east-2a). Lightsail automatically creates your load balancer across Availability Zones.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the load balancer (my-load-balancer).
        public var name: Swift.String?
        /// The protocol you have enabled for your load balancer. Valid values are below. You can't just have HTTP_HTTPS, but you can have just HTTP.
        public var `protocol`: LightsailClientTypes.LoadBalancerProtocol?
        /// An array of public port settings for your load balancer. For HTTP, use port 80. For HTTPS, use port 443.
        public var publicPorts: [Swift.Int]?
        /// The resource type (LoadBalancer.
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The status of your load balancer. Valid values are below.
        public var state: LightsailClientTypes.LoadBalancerState?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail load balancer. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?
        /// An array of LoadBalancerTlsCertificateSummary objects that provide additional information about the SSL/TLS certificates. For example, if true, the certificate is attached to the load balancer.
        public var tlsCertificateSummaries: [LightsailClientTypes.LoadBalancerTlsCertificateSummary]?
        /// The name of the TLS security policy for the load balancer.
        public var tlsPolicyName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            configurationOptions: [Swift.String: Swift.String]? = nil,
            createdAt: Foundation.Date? = nil,
            dnsName: Swift.String? = nil,
            healthCheckPath: Swift.String? = nil,
            httpsRedirectionEnabled: Swift.Bool? = nil,
            instanceHealthSummary: [LightsailClientTypes.InstanceHealthSummary]? = nil,
            instancePort: Swift.Int? = nil,
            ipAddressType: LightsailClientTypes.IpAddressType? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            `protocol`: LightsailClientTypes.LoadBalancerProtocol? = nil,
            publicPorts: [Swift.Int]? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            state: LightsailClientTypes.LoadBalancerState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            tlsCertificateSummaries: [LightsailClientTypes.LoadBalancerTlsCertificateSummary]? = nil,
            tlsPolicyName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.configurationOptions = configurationOptions
            self.createdAt = createdAt
            self.dnsName = dnsName
            self.healthCheckPath = healthCheckPath
            self.httpsRedirectionEnabled = httpsRedirectionEnabled
            self.instanceHealthSummary = instanceHealthSummary
            self.instancePort = instancePort
            self.ipAddressType = ipAddressType
            self.location = location
            self.name = name
            self.`protocol` = `protocol`
            self.publicPorts = publicPorts
            self.resourceType = resourceType
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
            self.tlsCertificateSummaries = tlsCertificateSummaries
            self.tlsPolicyName = tlsPolicyName
        }
    }
}

public struct GetLoadBalancerOutput: Swift.Sendable {
    /// An object containing information about your load balancer.
    public var loadBalancer: LightsailClientTypes.LoadBalancer?

    public init(
        loadBalancer: LightsailClientTypes.LoadBalancer? = nil
    )
    {
        self.loadBalancer = loadBalancer
    }
}

extension LightsailClientTypes {

    public enum LoadBalancerMetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case clienttlsnegotiationerrorcount
        case httpcodeInstance2xxCount
        case httpcodeInstance3xxCount
        case httpcodeInstance4xxCount
        case httpcodeInstance5xxCount
        case httpcodeLb4xxCount
        case httpcodeLb5xxCount
        case healthyhostcount
        case instanceresponsetime
        case rejectedconnectioncount
        case requestcount
        case unhealthyhostcount
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerMetricName] {
            return [
                .clienttlsnegotiationerrorcount,
                .httpcodeInstance2xxCount,
                .httpcodeInstance3xxCount,
                .httpcodeInstance4xxCount,
                .httpcodeInstance5xxCount,
                .httpcodeLb4xxCount,
                .httpcodeLb5xxCount,
                .healthyhostcount,
                .instanceresponsetime,
                .rejectedconnectioncount,
                .requestcount,
                .unhealthyhostcount
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clienttlsnegotiationerrorcount: return "ClientTLSNegotiationErrorCount"
            case .httpcodeInstance2xxCount: return "HTTPCode_Instance_2XX_Count"
            case .httpcodeInstance3xxCount: return "HTTPCode_Instance_3XX_Count"
            case .httpcodeInstance4xxCount: return "HTTPCode_Instance_4XX_Count"
            case .httpcodeInstance5xxCount: return "HTTPCode_Instance_5XX_Count"
            case .httpcodeLb4xxCount: return "HTTPCode_LB_4XX_Count"
            case .httpcodeLb5xxCount: return "HTTPCode_LB_5XX_Count"
            case .healthyhostcount: return "HealthyHostCount"
            case .instanceresponsetime: return "InstanceResponseTime"
            case .rejectedconnectioncount: return "RejectedConnectionCount"
            case .requestcount: return "RequestCount"
            case .unhealthyhostcount: return "UnhealthyHostCount"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetLoadBalancerMetricDataInput: Swift.Sendable {
    /// The end time of the period.
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The name of the load balancer.
    /// This member is required.
    public var loadBalancerName: Swift.String?
    /// The metric for which you want to return information. Valid load balancer metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.
    ///
    /// * ClientTLSNegotiationErrorCount - The number of TLS connections initiated by the client that did not establish a session with the load balancer due to a TLS error generated by the load balancer. Possible causes include a mismatch of ciphers or protocols. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    ///
    /// * HealthyHostCount - The number of target instances that are considered healthy. Statistics: The most useful statistic are Average, Minimum, and Maximum. Unit: The published unit is Count.
    ///
    /// * HTTPCode_Instance_2XX_Count - The number of HTTP 2XX response codes generated by the target instances. This does not include any response codes generated by the load balancer. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * HTTPCode_Instance_3XX_Count - The number of HTTP 3XX response codes generated by the target instances. This does not include any response codes generated by the load balancer. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * HTTPCode_Instance_4XX_Count - The number of HTTP 4XX response codes generated by the target instances. This does not include any response codes generated by the load balancer. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * HTTPCode_Instance_5XX_Count - The number of HTTP 5XX response codes generated by the target instances. This does not include any response codes generated by the load balancer. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * HTTPCode_LB_4XX_Count - The number of HTTP 4XX client error codes that originated from the load balancer. Client errors are generated when requests are malformed or incomplete. These requests were not received by the target instance. This count does not include response codes generated by the target instances. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * HTTPCode_LB_5XX_Count - The number of HTTP 5XX server error codes that originated from the load balancer. This does not include any response codes generated by the target instance. This metric is reported if there are no healthy instances attached to the load balancer, or if the request rate exceeds the capacity of the instances (spillover) or the load balancer. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * InstanceResponseTime - The time elapsed, in seconds, after the request leaves the load balancer until a response from the target instance is received. Statistics: The most useful statistic is Average. Unit: The published unit is Seconds.
    ///
    /// * RejectedConnectionCount - The number of connections that were rejected because the load balancer had reached its maximum number of connections. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    ///
    /// * RequestCount - The number of requests processed over IPv4. This count includes only the requests with a response generated by a target instance of the load balancer. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * UnhealthyHostCount - The number of target instances that are considered unhealthy. Statistics: The most useful statistic are Average, Minimum, and Maximum. Unit: The published unit is Count.
    /// This member is required.
    public var metricName: LightsailClientTypes.LoadBalancerMetricName?
    /// The granularity, in seconds, of the returned data points.
    /// This member is required.
    public var period: Swift.Int?
    /// The start time of the period.
    /// This member is required.
    public var startTime: Foundation.Date?
    /// The statistic for the metric. The following statistics are available:
    ///
    /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
    ///
    /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
    ///
    /// * Sum - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
    ///
    /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
    ///
    /// * SampleCount - The count, or number, of data points used for the statistical calculation.
    /// This member is required.
    public var statistics: [LightsailClientTypes.MetricStatistic]?
    /// The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units with each available metric, see the metricName parameter.
    /// This member is required.
    public var unit: LightsailClientTypes.MetricUnit?

    public init(
        endTime: Foundation.Date? = nil,
        loadBalancerName: Swift.String? = nil,
        metricName: LightsailClientTypes.LoadBalancerMetricName? = nil,
        period: Swift.Int? = nil,
        startTime: Foundation.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.endTime = endTime
        self.loadBalancerName = loadBalancerName
        self.metricName = metricName
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

public struct GetLoadBalancerMetricDataOutput: Swift.Sendable {
    /// An array of objects that describe the metric data returned.
    public var metricData: [LightsailClientTypes.MetricDatapoint]?
    /// The name of the metric returned.
    public var metricName: LightsailClientTypes.LoadBalancerMetricName?

    public init(
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.LoadBalancerMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

public struct GetLoadBalancersInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetLoadBalancers request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

public struct GetLoadBalancersOutput: Swift.Sendable {
    /// An array of LoadBalancer objects describing your load balancers.
    public var loadBalancers: [LightsailClientTypes.LoadBalancer]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetLoadBalancers request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        loadBalancers: [LightsailClientTypes.LoadBalancer]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.loadBalancers = loadBalancers
        self.nextPageToken = nextPageToken
    }
}

public struct GetLoadBalancerTlsCertificatesInput: Swift.Sendable {
    /// The name of the load balancer you associated with your SSL/TLS certificate.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init(
        loadBalancerName: Swift.String? = nil
    )
    {
        self.loadBalancerName = loadBalancerName
    }
}

extension LightsailClientTypes {

    public enum LoadBalancerTlsCertificateDnsRecordCreationStateCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateDnsRecordCreationStateCode] {
            return [
                .failed,
                .started,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .started: return "STARTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// An object that describes the state of the canonical name (CNAME) records that are automatically added by Lightsail to the DNS of the domain to validate domain ownership.
    public struct LoadBalancerTlsCertificateDnsRecordCreationState: Swift.Sendable {
        /// The status code for the automated DNS record creation. Following are the possible values:
        ///
        /// * SUCCEEDED - The validation records were successfully added.
        ///
        /// * STARTED - The automatic DNS record creation has started.
        ///
        /// * FAILED - The validation record addition failed.
        public var code: LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationStateCode?
        /// The message that describes the reason for the status code.
        public var message: Swift.String?

        public init(
            code: LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationStateCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }
}

extension LightsailClientTypes {

    public enum LoadBalancerTlsCertificateDomainStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pendingvalidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateDomainStatus] {
            return [
                .failed,
                .pendingvalidation,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes the validation record of each domain name in the SSL/TLS certificate.
    public struct LoadBalancerTlsCertificateDomainValidationRecord: Swift.Sendable {
        /// An object that describes the state of the canonical name (CNAME) records that are automatically added by Lightsail to the DNS of a domain to validate domain ownership.
        public var dnsRecordCreationState: LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationState?
        /// The domain name against which your SSL/TLS certificate was validated.
        public var domainName: Swift.String?
        /// A fully qualified domain name in the certificate. For example, example.com.
        public var name: Swift.String?
        /// The type of validation record. For example, CNAME for domain validation.
        public var type: Swift.String?
        /// The validation status. Valid values are listed below.
        public var validationStatus: LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus?
        /// The value for that type.
        public var value: Swift.String?

        public init(
            dnsRecordCreationState: LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationState? = nil,
            domainName: Swift.String? = nil,
            name: Swift.String? = nil,
            type: Swift.String? = nil,
            validationStatus: LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus? = nil,
            value: Swift.String? = nil
        )
        {
            self.dnsRecordCreationState = dnsRecordCreationState
            self.domainName = domainName
            self.name = name
            self.type = type
            self.validationStatus = validationStatus
            self.value = value
        }
    }
}

extension LightsailClientTypes {

    public enum LoadBalancerTlsCertificateFailureReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case additionalverificationrequired
        case domainnotallowed
        case invalidpublicdomain
        case noavailablecontacts
        case other
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateFailureReason] {
            return [
                .additionalverificationrequired,
                .domainnotallowed,
                .invalidpublicdomain,
                .noavailablecontacts,
                .other
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .additionalverificationrequired: return "ADDITIONAL_VERIFICATION_REQUIRED"
            case .domainnotallowed: return "DOMAIN_NOT_ALLOWED"
            case .invalidpublicdomain: return "INVALID_PUBLIC_DOMAIN"
            case .noavailablecontacts: return "NO_AVAILABLE_CONTACTS"
            case .other: return "OTHER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Contains information about the domain names on an SSL/TLS certificate that you will use to validate domain ownership.
    public struct LoadBalancerTlsCertificateDomainValidationOption: Swift.Sendable {
        /// The fully qualified domain name in the certificate request.
        public var domainName: Swift.String?
        /// The status of the domain validation. Valid values are listed below.
        public var validationStatus: LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus?

        public init(
            domainName: Swift.String? = nil,
            validationStatus: LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus? = nil
        )
        {
            self.domainName = domainName
            self.validationStatus = validationStatus
        }
    }
}

extension LightsailClientTypes {

    public enum LoadBalancerTlsCertificateRenewalStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pendingautorenewal
        case pendingvalidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateRenewalStatus] {
            return [
                .failed,
                .pendingautorenewal,
                .pendingvalidation,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pendingautorenewal: return "PENDING_AUTO_RENEWAL"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Contains information about the status of Lightsail's managed renewal for the certificate. The renewal status of the certificate. The following renewal status are possible:
    ///
    /// * PendingAutoRenewal - Lightsail is attempting to automatically validate the domain names in the certificate. No further action is required.
    ///
    /// * PendingValidation - Lightsail couldn't automatically validate one or more domain names in the certificate. You must take action to validate these domain names or the certificate won't be renewed. If you used DNS validation, check to make sure your certificate's domain validation records exist in your domain's DNS, and that your certificate remains in use.
    ///
    /// * Success - All domain names in the certificate are validated, and Lightsail renewed the certificate. No further action is required.
    ///
    /// * Failed - One or more domain names were not validated before the certificate expired, and Lightsail did not renew the certificate. You can request a new certificate using the CreateCertificate action.
    public struct LoadBalancerTlsCertificateRenewalSummary: Swift.Sendable {
        /// Contains information about the validation of each domain name in the certificate, as it pertains to Lightsail's managed renewal. This is different from the initial validation that occurs as a result of the RequestCertificate request.
        public var domainValidationOptions: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption]?
        /// The renewal status of the certificate. The following renewal status are possible:
        ///
        /// * PendingAutoRenewal - Lightsail is attempting to automatically validate the domain names of the certificate. No further action is required.
        ///
        /// * PendingValidation - Lightsail couldn't automatically validate one or more domain names of the certificate. You must take action to validate these domain names or the certificate won't be renewed. Check to make sure your certificate's domain validation records exist in your domain's DNS, and that your certificate remains in use.
        ///
        /// * Success - All domain names in the certificate are validated, and Lightsail renewed the certificate. No further action is required.
        ///
        /// * Failed - One or more domain names were not validated before the certificate expired, and Lightsail did not renew the certificate. You can request a new certificate using the CreateCertificate action.
        public var renewalStatus: LightsailClientTypes.LoadBalancerTlsCertificateRenewalStatus?

        public init(
            domainValidationOptions: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption]? = nil,
            renewalStatus: LightsailClientTypes.LoadBalancerTlsCertificateRenewalStatus? = nil
        )
        {
            self.domainValidationOptions = domainValidationOptions
            self.renewalStatus = renewalStatus
        }
    }
}

extension LightsailClientTypes {

    public enum LoadBalancerTlsCertificateRevocationReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aacompromise
        case affiliationchanged
        case cacompromise
        case certificatehold
        case cessationofoperation
        case keycompromise
        case privilegewithdrawn
        case removefromcrl
        case superceded
        case unspecified
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateRevocationReason] {
            return [
                .aacompromise,
                .affiliationchanged,
                .cacompromise,
                .certificatehold,
                .cessationofoperation,
                .keycompromise,
                .privilegewithdrawn,
                .removefromcrl,
                .superceded,
                .unspecified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aacompromise: return "A_A_COMPROMISE"
            case .affiliationchanged: return "AFFILIATION_CHANGED"
            case .cacompromise: return "CA_COMPROMISE"
            case .certificatehold: return "CERTIFICATE_HOLD"
            case .cessationofoperation: return "CESSATION_OF_OPERATION"
            case .keycompromise: return "KEY_COMPROMISE"
            case .privilegewithdrawn: return "PRIVILEGE_WITHDRAWN"
            case .removefromcrl: return "REMOVE_FROM_CRL"
            case .superceded: return "SUPERCEDED"
            case .unspecified: return "UNSPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    public enum LoadBalancerTlsCertificateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case expired
        case failed
        case inactive
        case issued
        case pendingvalidation
        case revoked
        case unknown
        case validationtimedout
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateStatus] {
            return [
                .expired,
                .failed,
                .inactive,
                .issued,
                .pendingvalidation,
                .revoked,
                .unknown,
                .validationtimedout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .expired: return "EXPIRED"
            case .failed: return "FAILED"
            case .inactive: return "INACTIVE"
            case .issued: return "ISSUED"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .revoked: return "REVOKED"
            case .unknown: return "UNKNOWN"
            case .validationtimedout: return "VALIDATION_TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes a load balancer SSL/TLS certificate. TLS is just an updated, more secure version of Secure Socket Layer (SSL).
    public struct LoadBalancerTlsCertificate: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the SSL/TLS certificate.
        public var arn: Swift.String?
        /// The time when you created your SSL/TLS certificate.
        public var createdAt: Foundation.Date?
        /// The domain name for your SSL/TLS certificate.
        public var domainName: Swift.String?
        /// An array of LoadBalancerTlsCertificateDomainValidationRecord objects describing the records.
        public var domainValidationRecords: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord]?
        /// The validation failure reason, if any, of the certificate. The following failure reasons are possible:
        ///
        /// * NO_AVAILABLE_CONTACTS - This failure applies to email validation, which is not available for Lightsail certificates.
        ///
        /// * ADDITIONAL_VERIFICATION_REQUIRED - Lightsail requires additional information to process this certificate request. This can happen as a fraud-protection measure, such as when the domain ranks within the Alexa top 1000 websites. To provide the required information, use the [AWS Support Center](https://console.aws.amazon.com/support/home) to contact AWS Support. You cannot request a certificate for Amazon-owned domain names such as those ending in amazonaws.com, cloudfront.net, or elasticbeanstalk.com.
        ///
        /// * DOMAIN_NOT_ALLOWED - One or more of the domain names in the certificate request was reported as an unsafe domain by [VirusTotal](https://www.virustotal.com/gui/home/url). To correct the problem, search for your domain name on the [VirusTotal](https://www.virustotal.com/gui/home/url) website. If your domain is reported as suspicious, see [Google Help for Hacked Websites](https://developers.google.com/web/fundamentals/security/hacked) to learn what you can do. If you believe that the result is a false positive, notify the organization that is reporting the domain. VirusTotal is an aggregate of several antivirus and URL scanners and cannot remove your domain from a block list itself. After you correct the problem and the VirusTotal registry has been updated, request a new certificate. If you see this error and your domain is not included in the VirusTotal list, visit the [AWS Support Center](https://console.aws.amazon.com/support/home) and create a case.
        ///
        /// * INVALID_PUBLIC_DOMAIN - One or more of the domain names in the certificate request is not valid. Typically, this is because a domain name in the request is not a valid top-level domain. Try to request a certificate again, correcting any spelling errors or typos that were in the failed request, and ensure that all domain names in the request are for valid top-level domains. For example, you cannot request a certificate for example.invalidpublicdomain because invalidpublicdomain is not a valid top-level domain.
        ///
        /// * OTHER - Typically, this failure occurs when there is a typographical error in one or more of the domain names in the certificate request. Try to request a certificate again, correcting any spelling errors or typos that were in the failed request.
        public var failureReason: LightsailClientTypes.LoadBalancerTlsCertificateFailureReason?
        /// When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
        public var isAttached: Swift.Bool?
        /// The time when the SSL/TLS certificate was issued.
        public var issuedAt: Foundation.Date?
        /// The issuer of the certificate.
        public var issuer: Swift.String?
        /// The algorithm used to generate the key pair (the public and private key).
        public var keyAlgorithm: Swift.String?
        /// The load balancer name where your SSL/TLS certificate is attached.
        public var loadBalancerName: Swift.String?
        /// The Amazon Web Services Region and Availability Zone where you created your certificate.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the SSL/TLS certificate (my-certificate).
        public var name: Swift.String?
        /// The timestamp when the SSL/TLS certificate expires.
        public var notAfter: Foundation.Date?
        /// The timestamp when the SSL/TLS certificate is first valid.
        public var notBefore: Foundation.Date?
        /// An object that describes the status of the certificate renewal managed by Lightsail.
        public var renewalSummary: LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary?
        /// The resource type (LoadBalancerTlsCertificate).
        ///
        /// * Instance - A Lightsail instance (a virtual private server)
        ///
        /// * StaticIp - A static IP address
        ///
        /// * KeyPair - The key pair used to connect to a Lightsail instance
        ///
        /// * InstanceSnapshot - A Lightsail instance snapshot
        ///
        /// * Domain - A DNS zone
        ///
        /// * PeeredVpc - A peered VPC
        ///
        /// * LoadBalancer - A Lightsail load balancer
        ///
        /// * LoadBalancerTlsCertificate - An SSL/TLS certificate associated with a Lightsail load balancer
        ///
        /// * Disk - A Lightsail block storage disk
        ///
        /// * DiskSnapshot - A block storage disk snapshot
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The reason the certificate was revoked. This value is present only when the certificate status is REVOKED.
        public var revocationReason: LightsailClientTypes.LoadBalancerTlsCertificateRevocationReason?
        /// The timestamp when the certificate was revoked. This value is present only when the certificate status is REVOKED.
        public var revokedAt: Foundation.Date?
        /// The serial number of the certificate.
        public var serial: Swift.String?
        /// The algorithm that was used to sign the certificate.
        public var signatureAlgorithm: Swift.String?
        /// The validation status of the SSL/TLS certificate. Valid values are below.
        public var status: LightsailClientTypes.LoadBalancerTlsCertificateStatus?
        /// The name of the entity that is associated with the public key contained in the certificate.
        public var subject: Swift.String?
        /// An array of strings that specify the alternate domains (example2.com) and subdomains (blog.example.com) for the certificate.
        public var subjectAlternativeNames: [Swift.String]?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail load balancer or SSL/TLS certificate. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            domainName: Swift.String? = nil,
            domainValidationRecords: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord]? = nil,
            failureReason: LightsailClientTypes.LoadBalancerTlsCertificateFailureReason? = nil,
            isAttached: Swift.Bool? = nil,
            issuedAt: Foundation.Date? = nil,
            issuer: Swift.String? = nil,
            keyAlgorithm: Swift.String? = nil,
            loadBalancerName: Swift.String? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            notAfter: Foundation.Date? = nil,
            notBefore: Foundation.Date? = nil,
            renewalSummary: LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            revocationReason: LightsailClientTypes.LoadBalancerTlsCertificateRevocationReason? = nil,
            revokedAt: Foundation.Date? = nil,
            serial: Swift.String? = nil,
            signatureAlgorithm: Swift.String? = nil,
            status: LightsailClientTypes.LoadBalancerTlsCertificateStatus? = nil,
            subject: Swift.String? = nil,
            subjectAlternativeNames: [Swift.String]? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.domainName = domainName
            self.domainValidationRecords = domainValidationRecords
            self.failureReason = failureReason
            self.isAttached = isAttached
            self.issuedAt = issuedAt
            self.issuer = issuer
            self.keyAlgorithm = keyAlgorithm
            self.loadBalancerName = loadBalancerName
            self.location = location
            self.name = name
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.renewalSummary = renewalSummary
            self.resourceType = resourceType
            self.revocationReason = revocationReason
            self.revokedAt = revokedAt
            self.serial = serial
            self.signatureAlgorithm = signatureAlgorithm
            self.status = status
            self.subject = subject
            self.subjectAlternativeNames = subjectAlternativeNames
            self.supportCode = supportCode
            self.tags = tags
        }
    }
}

public struct GetLoadBalancerTlsCertificatesOutput: Swift.Sendable {
    /// An array of LoadBalancerTlsCertificate objects describing your SSL/TLS certificates.
    public var tlsCertificates: [LightsailClientTypes.LoadBalancerTlsCertificate]?

    public init(
        tlsCertificates: [LightsailClientTypes.LoadBalancerTlsCertificate]? = nil
    )
    {
        self.tlsCertificates = tlsCertificates
    }
}

public struct GetLoadBalancerTlsPoliciesInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetLoadBalancerTlsPolicies request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

extension LightsailClientTypes {

    /// Describes the TLS security policies that are available for Lightsail load balancers. For more information about load balancer TLS security policies, see [Configuring TLS security policies on your Amazon Lightsail load balancers](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy) in the Amazon Lightsail Developer Guide.
    public struct LoadBalancerTlsPolicy: Swift.Sendable {
        /// The ciphers used by the TLS security policy. The ciphers are listed in order of preference.
        public var ciphers: [Swift.String]?
        /// The description of the TLS security policy.
        public var description: Swift.String?
        /// A Boolean value that indicates whether the TLS security policy is the default.
        public var isDefault: Swift.Bool?
        /// The name of the TLS security policy.
        public var name: Swift.String?
        /// The protocols used in a given TLS security policy.
        public var protocols: [Swift.String]?

        public init(
            ciphers: [Swift.String]? = nil,
            description: Swift.String? = nil,
            isDefault: Swift.Bool? = nil,
            name: Swift.String? = nil,
            protocols: [Swift.String]? = nil
        )
        {
            self.ciphers = ciphers
            self.description = description
            self.isDefault = isDefault
            self.name = name
            self.protocols = protocols
        }
    }
}

public struct GetLoadBalancerTlsPoliciesOutput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetLoadBalancerTlsPolicies request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An array of objects that describe the TLS security policies that are available.
    public var tlsPolicies: [LightsailClientTypes.LoadBalancerTlsPolicy]?

    public init(
        nextPageToken: Swift.String? = nil,
        tlsPolicies: [LightsailClientTypes.LoadBalancerTlsPolicy]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.tlsPolicies = tlsPolicies
    }
}

public struct GetOperationInput: Swift.Sendable {
    /// A GUID used to identify the operation.
    /// This member is required.
    public var operationId: Swift.String?

    public init(
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

public struct GetOperationOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct GetOperationsInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetOperations request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

public struct GetOperationsOutput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetOperations request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        nextPageToken: Swift.String? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.operations = operations
    }
}

public struct GetOperationsForResourceInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetOperationsForResource request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?
    /// The name of the resource for which you are requesting information.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        pageToken: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
        self.resourceName = resourceName
    }
}

public struct GetOperationsForResourceOutput: Swift.Sendable {
    /// (Discontinued) Returns the number of pages of results that remain. In releases prior to June 12, 2017, this parameter returned null by the API. It is now discontinued, and the API returns the next page token parameter instead.
    @available(*, deprecated)
    public var nextPageCount: Swift.String?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetOperationsForResource request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        nextPageCount: Swift.String? = nil,
        nextPageToken: Swift.String? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.nextPageCount = nextPageCount
        self.nextPageToken = nextPageToken
        self.operations = operations
    }
}

public struct GetRegionsInput: Swift.Sendable {
    /// A Boolean value indicating whether to also include Availability Zones in your get regions request. Availability Zones are indicated with a letter: us-east-2a.
    public var includeAvailabilityZones: Swift.Bool?
    /// A Boolean value indicating whether to also include Availability Zones for databases in your get regions request. Availability Zones are indicated with a letter (us-east-2a).
    public var includeRelationalDatabaseAvailabilityZones: Swift.Bool?

    public init(
        includeAvailabilityZones: Swift.Bool? = nil,
        includeRelationalDatabaseAvailabilityZones: Swift.Bool? = nil
    )
    {
        self.includeAvailabilityZones = includeAvailabilityZones
        self.includeRelationalDatabaseAvailabilityZones = includeRelationalDatabaseAvailabilityZones
    }
}

extension LightsailClientTypes {

    /// Describes the Amazon Web Services Region.
    public struct Region: Swift.Sendable {
        /// The Availability Zones. Follows the format us-east-2a (case-sensitive).
        public var availabilityZones: [LightsailClientTypes.AvailabilityZone]?
        /// The continent code (NA, meaning North America).
        public var continentCode: Swift.String?
        /// The description of the Amazon Web Services Region (This region is recommended to serve users in the eastern United States and eastern Canada).
        public var description: Swift.String?
        /// The display name (Ohio).
        public var displayName: Swift.String?
        /// The region name (us-east-2).
        public var name: LightsailClientTypes.RegionName?
        /// The Availability Zones for databases. Follows the format us-east-2a (case-sensitive).
        public var relationalDatabaseAvailabilityZones: [LightsailClientTypes.AvailabilityZone]?

        public init(
            availabilityZones: [LightsailClientTypes.AvailabilityZone]? = nil,
            continentCode: Swift.String? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            name: LightsailClientTypes.RegionName? = nil,
            relationalDatabaseAvailabilityZones: [LightsailClientTypes.AvailabilityZone]? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.continentCode = continentCode
            self.description = description
            self.displayName = displayName
            self.name = name
            self.relationalDatabaseAvailabilityZones = relationalDatabaseAvailabilityZones
        }
    }
}

public struct GetRegionsOutput: Swift.Sendable {
    /// An array of key-value pairs containing information about your get regions request.
    public var regions: [LightsailClientTypes.Region]?

    public init(
        regions: [LightsailClientTypes.Region]? = nil
    )
    {
        self.regions = regions
    }
}

public struct GetRelationalDatabaseInput: Swift.Sendable {
    /// The name of the database that you are looking up.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init(
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
    }
}

extension LightsailClientTypes {

    /// Describes the hardware of a database.
    public struct RelationalDatabaseHardware: Swift.Sendable {
        /// The number of vCPUs for the database.
        public var cpuCount: Swift.Int?
        /// The size of the disk for the database.
        public var diskSizeInGb: Swift.Int?
        /// The amount of RAM in GB for the database.
        public var ramSizeInGb: Swift.Float?

        public init(
            cpuCount: Swift.Int? = nil,
            diskSizeInGb: Swift.Int? = nil,
            ramSizeInGb: Swift.Float? = nil
        )
        {
            self.cpuCount = cpuCount
            self.diskSizeInGb = diskSizeInGb
            self.ramSizeInGb = ramSizeInGb
        }
    }
}

extension LightsailClientTypes {

    /// Describes an endpoint for a database.
    public struct RelationalDatabaseEndpoint: Swift.Sendable {
        /// Specifies the DNS address of the database.
        public var address: Swift.String?
        /// Specifies the port that the database is listening on.
        public var port: Swift.Int?

        public init(
            address: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.address = address
            self.port = port
        }
    }
}

extension LightsailClientTypes {

    /// Describes a pending database maintenance action.
    public struct PendingMaintenanceAction: Swift.Sendable {
        /// The type of pending database maintenance action.
        public var action: Swift.String?
        /// The effective date of the pending database maintenance action.
        public var currentApplyDate: Foundation.Date?
        /// Additional detail about the pending database maintenance action.
        public var description: Swift.String?

        public init(
            action: Swift.String? = nil,
            currentApplyDate: Foundation.Date? = nil,
            description: Swift.String? = nil
        )
        {
            self.action = action
            self.currentApplyDate = currentApplyDate
            self.description = description
        }
    }
}

extension LightsailClientTypes {

    /// Describes a pending database value modification.
    public struct PendingModifiedRelationalDatabaseValues: Swift.Sendable {
        /// A Boolean value indicating whether automated backup retention is enabled.
        public var backupRetentionEnabled: Swift.Bool?
        /// The database engine version.
        public var engineVersion: Swift.String?
        /// The password for the master user of the database.
        public var masterUserPassword: Swift.String?

        public init(
            backupRetentionEnabled: Swift.Bool? = nil,
            engineVersion: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil
        )
        {
            self.backupRetentionEnabled = backupRetentionEnabled
            self.engineVersion = engineVersion
            self.masterUserPassword = masterUserPassword
        }
    }
}

extension LightsailClientTypes {

    /// Describes a database.
    public struct RelationalDatabase: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the database.
        public var arn: Swift.String?
        /// A Boolean value indicating whether automated backup retention is enabled for the database.
        public var backupRetentionEnabled: Swift.Bool?
        /// The certificate associated with the database.
        public var caCertificateIdentifier: Swift.String?
        /// The timestamp when the database was created. Formatted in Unix time.
        public var createdAt: Foundation.Date?
        /// The database software (for example, MySQL).
        public var engine: Swift.String?
        /// The database engine version (for example, 5.7.23).
        public var engineVersion: Swift.String?
        /// Describes the hardware of the database.
        public var hardware: LightsailClientTypes.RelationalDatabaseHardware?
        /// The latest point in time to which the database can be restored. Formatted in Unix time.
        public var latestRestorableTime: Foundation.Date?
        /// The Region name and Availability Zone where the database is located.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the master database created when the Lightsail database resource is created.
        public var masterDatabaseName: Swift.String?
        /// The master endpoint for the database.
        public var masterEndpoint: LightsailClientTypes.RelationalDatabaseEndpoint?
        /// The master user name of the database.
        public var masterUsername: Swift.String?
        /// The unique name of the database resource in Lightsail.
        public var name: Swift.String?
        /// The status of parameter updates for the database.
        public var parameterApplyStatus: Swift.String?
        /// Describes the pending maintenance actions for the database.
        public var pendingMaintenanceActions: [LightsailClientTypes.PendingMaintenanceAction]?
        /// Describes pending database value modifications.
        public var pendingModifiedValues: LightsailClientTypes.PendingModifiedRelationalDatabaseValues?
        /// The daily time range during which automated backups are created for the database (for example, 16:00-16:30).
        public var preferredBackupWindow: Swift.String?
        /// The weekly time range during which system maintenance can occur on the database. In the format ddd:hh24:mi-ddd:hh24:mi. For example, Tue:17:00-Tue:17:30.
        public var preferredMaintenanceWindow: Swift.String?
        /// A Boolean value indicating whether the database is publicly accessible.
        public var publiclyAccessible: Swift.Bool?
        /// The blueprint ID for the database. A blueprint describes the major engine version of a database.
        public var relationalDatabaseBlueprintId: Swift.String?
        /// The bundle ID for the database. A bundle describes the performance specifications for your database.
        public var relationalDatabaseBundleId: Swift.String?
        /// The Lightsail resource type for the database (for example, RelationalDatabase).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// Describes the secondary Availability Zone of a high availability database. The secondary database is used for failover support of a high availability database.
        public var secondaryAvailabilityZone: Swift.String?
        /// Describes the current state of the database.
        public var state: Swift.String?
        /// The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init(
            arn: Swift.String? = nil,
            backupRetentionEnabled: Swift.Bool? = nil,
            caCertificateIdentifier: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            hardware: LightsailClientTypes.RelationalDatabaseHardware? = nil,
            latestRestorableTime: Foundation.Date? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            masterDatabaseName: Swift.String? = nil,
            masterEndpoint: LightsailClientTypes.RelationalDatabaseEndpoint? = nil,
            masterUsername: Swift.String? = nil,
            name: Swift.String? = nil,
            parameterApplyStatus: Swift.String? = nil,
            pendingMaintenanceActions: [LightsailClientTypes.PendingMaintenanceAction]? = nil,
            pendingModifiedValues: LightsailClientTypes.PendingModifiedRelationalDatabaseValues? = nil,
            preferredBackupWindow: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            publiclyAccessible: Swift.Bool? = nil,
            relationalDatabaseBlueprintId: Swift.String? = nil,
            relationalDatabaseBundleId: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            secondaryAvailabilityZone: Swift.String? = nil,
            state: Swift.String? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.backupRetentionEnabled = backupRetentionEnabled
            self.caCertificateIdentifier = caCertificateIdentifier
            self.createdAt = createdAt
            self.engine = engine
            self.engineVersion = engineVersion
            self.hardware = hardware
            self.latestRestorableTime = latestRestorableTime
            self.location = location
            self.masterDatabaseName = masterDatabaseName
            self.masterEndpoint = masterEndpoint
            self.masterUsername = masterUsername
            self.name = name
            self.parameterApplyStatus = parameterApplyStatus
            self.pendingMaintenanceActions = pendingMaintenanceActions
            self.pendingModifiedValues = pendingModifiedValues
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.publiclyAccessible = publiclyAccessible
            self.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId
            self.relationalDatabaseBundleId = relationalDatabaseBundleId
            self.resourceType = resourceType
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }
}

public struct GetRelationalDatabaseOutput: Swift.Sendable {
    /// An object describing the specified database.
    public var relationalDatabase: LightsailClientTypes.RelationalDatabase?

    public init(
        relationalDatabase: LightsailClientTypes.RelationalDatabase? = nil
    )
    {
        self.relationalDatabase = relationalDatabase
    }
}

public struct GetRelationalDatabaseBlueprintsInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseBlueprints request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

extension LightsailClientTypes {

    public enum RelationalDatabaseEngine: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mysql
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationalDatabaseEngine] {
            return [
                .mysql
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mysql: return "mysql"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Describes a database image, or blueprint. A blueprint describes the major engine version of a database.
    public struct RelationalDatabaseBlueprint: Swift.Sendable {
        /// The ID for the database blueprint.
        public var blueprintId: Swift.String?
        /// The database software of the database blueprint (for example, MySQL).
        public var engine: LightsailClientTypes.RelationalDatabaseEngine?
        /// The description of the database engine for the database blueprint.
        public var engineDescription: Swift.String?
        /// The database engine version for the database blueprint (for example, 5.7.23).
        public var engineVersion: Swift.String?
        /// The description of the database engine version for the database blueprint.
        public var engineVersionDescription: Swift.String?
        /// A Boolean value indicating whether the engine version is the default for the database blueprint.
        public var isEngineDefault: Swift.Bool?

        public init(
            blueprintId: Swift.String? = nil,
            engine: LightsailClientTypes.RelationalDatabaseEngine? = nil,
            engineDescription: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            engineVersionDescription: Swift.String? = nil,
            isEngineDefault: Swift.Bool? = nil
        )
        {
            self.blueprintId = blueprintId
            self.engine = engine
            self.engineDescription = engineDescription
            self.engineVersion = engineVersion
            self.engineVersionDescription = engineVersionDescription
            self.isEngineDefault = isEngineDefault
        }
    }
}

public struct GetRelationalDatabaseBlueprintsOutput: Swift.Sendable {
    /// An object describing the result of your get relational database blueprints request.
    public var blueprints: [LightsailClientTypes.RelationalDatabaseBlueprint]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseBlueprints request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        blueprints: [LightsailClientTypes.RelationalDatabaseBlueprint]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.blueprints = blueprints
        self.nextPageToken = nextPageToken
    }
}

public struct GetRelationalDatabaseBundlesInput: Swift.Sendable {
    /// A Boolean value that indicates whether to include inactive (unavailable) bundles in the response of your request.
    public var includeInactive: Swift.Bool?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseBundles request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        includeInactive: Swift.Bool? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.includeInactive = includeInactive
        self.pageToken = pageToken
    }
}

extension LightsailClientTypes {

    /// Describes a database bundle. A bundle describes the performance specifications of the database.
    public struct RelationalDatabaseBundle: Swift.Sendable {
        /// The ID for the database bundle.
        public var bundleId: Swift.String?
        /// The number of virtual CPUs (vCPUs) for the database bundle.
        public var cpuCount: Swift.Int?
        /// The size of the disk for the database bundle.
        public var diskSizeInGb: Swift.Int?
        /// A Boolean value indicating whether the database bundle is active.
        public var isActive: Swift.Bool?
        /// A Boolean value indicating whether the database bundle is encrypted.
        public var isEncrypted: Swift.Bool?
        /// The name for the database bundle.
        public var name: Swift.String?
        /// The cost of the database bundle in US currency.
        public var price: Swift.Float?
        /// The amount of RAM in GB (for example, 2.0) for the database bundle.
        public var ramSizeInGb: Swift.Float?
        /// The data transfer rate per month in GB for the database bundle.
        public var transferPerMonthInGb: Swift.Int?

        public init(
            bundleId: Swift.String? = nil,
            cpuCount: Swift.Int? = nil,
            diskSizeInGb: Swift.Int? = nil,
            isActive: Swift.Bool? = nil,
            isEncrypted: Swift.Bool? = nil,
            name: Swift.String? = nil,
            price: Swift.Float? = nil,
            ramSizeInGb: Swift.Float? = nil,
            transferPerMonthInGb: Swift.Int? = nil
        )
        {
            self.bundleId = bundleId
            self.cpuCount = cpuCount
            self.diskSizeInGb = diskSizeInGb
            self.isActive = isActive
            self.isEncrypted = isEncrypted
            self.name = name
            self.price = price
            self.ramSizeInGb = ramSizeInGb
            self.transferPerMonthInGb = transferPerMonthInGb
        }
    }
}

public struct GetRelationalDatabaseBundlesOutput: Swift.Sendable {
    /// An object describing the result of your get relational database bundles request.
    public var bundles: [LightsailClientTypes.RelationalDatabaseBundle]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseBundles request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init(
        bundles: [LightsailClientTypes.RelationalDatabaseBundle]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.bundles = bundles
        self.nextPageToken = nextPageToken
    }
}

public struct GetRelationalDatabaseEventsInput: Swift.Sendable {
    /// The number of minutes in the past from which to retrieve events. For example, to get all events from the past 2 hours, enter 120. Default: 60 The minimum is 1 and the maximum is 14 days (20160 minutes).
    public var durationInMinutes: Swift.Int?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseEvents request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?
    /// The name of the database from which to get events.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init(
        durationInMinutes: Swift.Int? = nil,
        pageToken: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.durationInMinutes = durationInMinutes
        self.pageToken = pageToken
        self.relationalDatabaseName = relationalDatabaseName
    }
}

extension LightsailClientTypes {

    /// Describes an event for a database.
    public struct RelationalDatabaseEvent: Swift.Sendable {
        /// The timestamp when the database event was created.
        public var createdAt: Foundation.Date?
        /// The category that the database event belongs to.
        public var eventCategories: [Swift.String]?
        /// The message of the database event.
        public var message: Swift.String?
        /// The database that the database event relates to.
        public var resource: Swift.String?

        public init(
            createdAt: Foundation.Date? = nil,
            eventCategories: [Swift.String]? = nil,
            message: Swift.String? = nil,
            resource: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.eventCategories = eventCategories
            self.message = message
            self.resource = resource
        }
    }
}

public struct GetRelationalDatabaseEventsOutput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseEvents request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An object describing the result of your get relational database events request.
    public var relationalDatabaseEvents: [LightsailClientTypes.RelationalDatabaseEvent]?

    public init(
        nextPageToken: Swift.String? = nil,
        relationalDatabaseEvents: [LightsailClientTypes.RelationalDatabaseEvent]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.relationalDatabaseEvents = relationalDatabaseEvents
    }
}

public struct GetRelationalDatabaseLogEventsInput: Swift.Sendable {
    /// The end of the time interval from which to get log events. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the end time.
    public var endTime: Foundation.Date?
    /// The name of the log stream. Use the get relational database log streams operation to get a list of available log streams.
    /// This member is required.
    public var logStreamName: Swift.String?
    /// The token to advance to the next or previous page of results from your request. To get a page token, perform an initial GetRelationalDatabaseLogEvents request. If your results are paginated, the response will return a next forward token and/or next backward token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?
    /// The name of your database for which to get log events.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// Parameter to specify if the log should start from head or tail. If true is specified, the log event starts from the head of the log. If false is specified, the log event starts from the tail of the log. For PostgreSQL, the default value of false is the only option available.
    public var startFromHead: Swift.Bool?
    /// The start of the time interval from which to get log events. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the start time.
    public var startTime: Foundation.Date?

    public init(
        endTime: Foundation.Date? = nil,
        logStreamName: Swift.String? = nil,
        pageToken: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil,
        startFromHead: Swift.Bool? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.endTime = endTime
        self.logStreamName = logStreamName
        self.pageToken = pageToken
        self.relationalDatabaseName = relationalDatabaseName
        self.startFromHead = startFromHead
        self.startTime = startTime
    }
}

extension LightsailClientTypes {

    /// Describes a database log event.
    public struct LogEvent: Swift.Sendable {
        /// The timestamp when the database log event was created.
        public var createdAt: Foundation.Date?
        /// The message of the database log event.
        public var message: Swift.String?

        public init(
            createdAt: Foundation.Date? = nil,
            message: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.message = message
        }
    }
}

public struct GetRelationalDatabaseLogEventsOutput: Swift.Sendable {
    /// A token used for advancing to the previous page of results from your get relational database log events request.
    public var nextBackwardToken: Swift.String?
    /// A token used for advancing to the next page of results from your get relational database log events request.
    public var nextForwardToken: Swift.String?
    /// An object describing the result of your get relational database log events request.
    public var resourceLogEvents: [LightsailClientTypes.LogEvent]?

    public init(
        nextBackwardToken: Swift.String? = nil,
        nextForwardToken: Swift.String? = nil,
        resourceLogEvents: [LightsailClientTypes.LogEvent]? = nil
    )
    {
        self.nextBackwardToken = nextBackwardToken
        self.nextForwardToken = nextForwardToken
        self.resourceLogEvents = resourceLogEvents
    }
}

public struct GetRelationalDatabaseLogStreamsInput: Swift.Sendable {
    /// The name of your database for which to get log streams.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init(
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
    }
}

public struct GetRelationalDatabaseLogStreamsOutput: Swift.Sendable {
    /// An object describing the result of your get relational database log streams request.
    public var logStreams: [Swift.String]?

    public init(
        logStreams: [Swift.String]? = nil
    )
    {
        self.logStreams = logStreams
    }
}

extension LightsailClientTypes {

    public enum RelationalDatabasePasswordVersion: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case current
        case pending
        case previous
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationalDatabasePasswordVersion] {
            return [
                .current,
                .pending,
                .previous
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .current: return "CURRENT"
            case .pending: return "PENDING"
            case .previous: return "PREVIOUS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetRelationalDatabaseMasterUserPasswordInput: Swift.Sendable {
    /// The password version to return. Specifying CURRENT or PREVIOUS returns the current or previous passwords respectively. Specifying PENDING returns the newest version of the password that will rotate to CURRENT. After the PENDING password rotates to CURRENT, the PENDING password is no longer available. Default: CURRENT
    public var passwordVersion: LightsailClientTypes.RelationalDatabasePasswordVersion?
    /// The name of your database for which to get the master user password.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init(
        passwordVersion: LightsailClientTypes.RelationalDatabasePasswordVersion? = nil,
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.passwordVersion = passwordVersion
        self.relationalDatabaseName = relationalDatabaseName
    }
}

public struct GetRelationalDatabaseMasterUserPasswordOutput: Swift.Sendable {
    /// The timestamp when the specified version of the master user password was created.
    public var createdAt: Foundation.Date?
    /// The master user password for the password version specified.
    public var masterUserPassword: Swift.String?

    public init(
        createdAt: Foundation.Date? = nil,
        masterUserPassword: Swift.String? = nil
    )
    {
        self.createdAt = createdAt
        self.masterUserPassword = masterUserPassword
    }
}

extension GetRelationalDatabaseMasterUserPasswordOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseMasterUserPasswordOutput(createdAt: \(Swift.String(describing: createdAt)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension LightsailClientTypes {

    public enum RelationalDatabaseMetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cpuutilization
        case databaseconnections
        case diskqueuedepth
        case freestoragespace
        case networkreceivethroughput
        case networktransmitthroughput
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationalDatabaseMetricName] {
            return [
                .cpuutilization,
                .databaseconnections,
                .diskqueuedepth,
                .freestoragespace,
                .networkreceivethroughput,
                .networktransmitthroughput
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cpuutilization: return "CPUUtilization"
            case .databaseconnections: return "DatabaseConnections"
            case .diskqueuedepth: return "DiskQueueDepth"
            case .freestoragespace: return "FreeStorageSpace"
            case .networkreceivethroughput: return "NetworkReceiveThroughput"
            case .networktransmitthroughput: return "NetworkTransmitThroughput"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetRelationalDatabaseMetricDataInput: Swift.Sendable {
    /// The end of the time interval from which to get metric data. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the end time.
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The metric for which you want to return information. Valid relational database metric names are listed below, along with the most useful statistics to include in your request, and the published unit value. All relational database metric data is available in 1-minute (60 seconds) granularity.
    ///
    /// * CPUUtilization - The percentage of CPU utilization currently in use on the database. Statistics: The most useful statistics are Maximum and Average. Unit: The published unit is Percent.
    ///
    /// * DatabaseConnections - The number of database connections in use. Statistics: The most useful statistics are Maximum and Sum. Unit: The published unit is Count.
    ///
    /// * DiskQueueDepth - The number of outstanding IOs (read/write requests) that are waiting to access the disk. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    ///
    /// * FreeStorageSpace - The amount of available storage space. Statistics: The most useful statistic is Sum. Unit: The published unit is Bytes.
    ///
    /// * NetworkReceiveThroughput - The incoming (Receive) network traffic on the database, including both customer database traffic and AWS traffic used for monitoring and replication. Statistics: The most useful statistic is Average. Unit: The published unit is Bytes/Second.
    ///
    /// * NetworkTransmitThroughput - The outgoing (Transmit) network traffic on the database, including both customer database traffic and AWS traffic used for monitoring and replication. Statistics: The most useful statistic is Average. Unit: The published unit is Bytes/Second.
    /// This member is required.
    public var metricName: LightsailClientTypes.RelationalDatabaseMetricName?
    /// The granularity, in seconds, of the returned data points. All relational database metric data is available in 1-minute (60 seconds) granularity.
    /// This member is required.
    public var period: Swift.Int?
    /// The name of your database from which to get metric data.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// The start of the time interval from which to get metric data. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the start time.
    /// This member is required.
    public var startTime: Foundation.Date?
    /// The statistic for the metric. The following statistics are available:
    ///
    /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
    ///
    /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
    ///
    /// * Sum - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
    ///
    /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
    ///
    /// * SampleCount - The count, or number, of data points used for the statistical calculation.
    /// This member is required.
    public var statistics: [LightsailClientTypes.MetricStatistic]?
    /// The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units with each available metric, see the metricName parameter.
    /// This member is required.
    public var unit: LightsailClientTypes.MetricUnit?

    public init(
        endTime: Foundation.Date? = nil,
        metricName: LightsailClientTypes.RelationalDatabaseMetricName? = nil,
        period: Swift.Int? = nil,
        relationalDatabaseName: Swift.String? = nil,
        startTime: Foundation.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.endTime = endTime
        self.metricName = metricName
        self.period = period
        self.relationalDatabaseName = relationalDatabaseName
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

public struct GetRelationalDatabaseMetricDataOutput: Swift.Sendable {
    /// An array of objects that describe the metric data returned.
    public var metricData: [LightsailClientTypes.MetricDatapoint]?
    /// The name of the metric returned.
    public var metricName: LightsailClientTypes.RelationalDatabaseMetricName?

    public init(
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.RelationalDatabaseMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

public struct GetRelationalDatabaseParametersInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseParameters request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?
    /// The name of your database for which to get parameters.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init(
        pageToken: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
        self.relationalDatabaseName = relationalDatabaseName
    }
}

extension LightsailClientTypes {

    /// Describes the parameters of a database.
    public struct RelationalDatabaseParameter: Swift.Sendable {
        /// Specifies the valid range of values for the parameter.
        public var allowedValues: Swift.String?
        /// Indicates when parameter updates are applied. Can be immediate or pending-reboot.
        public var applyMethod: Swift.String?
        /// Specifies the engine-specific parameter type.
        public var applyType: Swift.String?
        /// Specifies the valid data type for the parameter.
        public var dataType: Swift.String?
        /// Provides a description of the parameter.
        public var description: Swift.String?
        /// A Boolean value indicating whether the parameter can be modified.
        public var isModifiable: Swift.Bool?
        /// Specifies the name of the parameter.
        public var parameterName: Swift.String?
        /// Specifies the value of the parameter.
        public var parameterValue: Swift.String?

        public init(
            allowedValues: Swift.String? = nil,
            applyMethod: Swift.String? = nil,
            applyType: Swift.String? = nil,
            dataType: Swift.String? = nil,
            description: Swift.String? = nil,
            isModifiable: Swift.Bool? = nil,
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.applyMethod = applyMethod
            self.applyType = applyType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }
    }
}

public struct GetRelationalDatabaseParametersOutput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseParameters request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An object describing the result of your get relational database parameters request.
    public var parameters: [LightsailClientTypes.RelationalDatabaseParameter]?

    public init(
        nextPageToken: Swift.String? = nil,
        parameters: [LightsailClientTypes.RelationalDatabaseParameter]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.parameters = parameters
    }
}

public struct GetRelationalDatabasesInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabases request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

public struct GetRelationalDatabasesOutput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabases request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An object describing the result of your get relational databases request.
    public var relationalDatabases: [LightsailClientTypes.RelationalDatabase]?

    public init(
        nextPageToken: Swift.String? = nil,
        relationalDatabases: [LightsailClientTypes.RelationalDatabase]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.relationalDatabases = relationalDatabases
    }
}

public struct GetRelationalDatabaseSnapshotInput: Swift.Sendable {
    /// The name of the database snapshot for which to get information.
    /// This member is required.
    public var relationalDatabaseSnapshotName: Swift.String?

    public init(
        relationalDatabaseSnapshotName: Swift.String? = nil
    )
    {
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
    }
}

extension LightsailClientTypes {

    /// Describes a database snapshot.
    public struct RelationalDatabaseSnapshot: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the database snapshot.
        public var arn: Swift.String?
        /// The timestamp when the database snapshot was created.
        public var createdAt: Foundation.Date?
        /// The software of the database snapshot (for example, MySQL)
        public var engine: Swift.String?
        /// The database engine version for the database snapshot (for example, 5.7.23).
        public var engineVersion: Swift.String?
        /// The Amazon Resource Name (ARN) of the database from which the database snapshot was created.
        public var fromRelationalDatabaseArn: Swift.String?
        /// The blueprint ID of the database from which the database snapshot was created. A blueprint describes the major engine version of a database.
        public var fromRelationalDatabaseBlueprintId: Swift.String?
        /// The bundle ID of the database from which the database snapshot was created.
        public var fromRelationalDatabaseBundleId: Swift.String?
        /// The name of the source database from which the database snapshot was created.
        public var fromRelationalDatabaseName: Swift.String?
        /// The Region name and Availability Zone where the database snapshot is located.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the database snapshot.
        public var name: Swift.String?
        /// The Lightsail resource type.
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The size of the disk in GB (for example, 32) for the database snapshot.
        public var sizeInGb: Swift.Int?
        /// The state of the database snapshot.
        public var state: Swift.String?
        /// The support code for the database snapshot. Include this code in your email to support when you have questions about a database snapshot in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            fromRelationalDatabaseArn: Swift.String? = nil,
            fromRelationalDatabaseBlueprintId: Swift.String? = nil,
            fromRelationalDatabaseBundleId: Swift.String? = nil,
            fromRelationalDatabaseName: Swift.String? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sizeInGb: Swift.Int? = nil,
            state: Swift.String? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.engine = engine
            self.engineVersion = engineVersion
            self.fromRelationalDatabaseArn = fromRelationalDatabaseArn
            self.fromRelationalDatabaseBlueprintId = fromRelationalDatabaseBlueprintId
            self.fromRelationalDatabaseBundleId = fromRelationalDatabaseBundleId
            self.fromRelationalDatabaseName = fromRelationalDatabaseName
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }
}

public struct GetRelationalDatabaseSnapshotOutput: Swift.Sendable {
    /// An object describing the specified database snapshot.
    public var relationalDatabaseSnapshot: LightsailClientTypes.RelationalDatabaseSnapshot?

    public init(
        relationalDatabaseSnapshot: LightsailClientTypes.RelationalDatabaseSnapshot? = nil
    )
    {
        self.relationalDatabaseSnapshot = relationalDatabaseSnapshot
    }
}

public struct GetRelationalDatabaseSnapshotsInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseSnapshots request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

public struct GetRelationalDatabaseSnapshotsOutput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseSnapshots request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An object describing the result of your get relational database snapshots request.
    public var relationalDatabaseSnapshots: [LightsailClientTypes.RelationalDatabaseSnapshot]?

    public init(
        nextPageToken: Swift.String? = nil,
        relationalDatabaseSnapshots: [LightsailClientTypes.RelationalDatabaseSnapshot]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.relationalDatabaseSnapshots = relationalDatabaseSnapshots
    }
}

public struct GetSetupHistoryInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetSetupHistory request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?
    /// The name of the resource for which you are requesting information.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        pageToken: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
        self.resourceName = resourceName
    }
}

extension LightsailClientTypes {

    public enum SetupStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inprogress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [SetupStatus] {
            return [
                .failed,
                .inprogress,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "failed"
            case .inprogress: return "inProgress"
            case .succeeded: return "succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LightsailClientTypes {

    /// Returns details about the commands that were run.
    public struct SetupExecutionDetails: Swift.Sendable {
        /// The command that was executed.
        public var command: Swift.String?
        /// The timestamp for when the request was run.
        public var dateTime: Foundation.Date?
        /// The name of the target resource.
        public var name: Swift.String?
        /// The text written by the command to stderr.
        public var standardError: Swift.String?
        /// The text written by the command to stdout.
        public var standardOutput: Swift.String?
        /// The status of the SetupInstanceHttps request.
        public var status: LightsailClientTypes.SetupStatus?
        /// The current version of the script..
        public var version: Swift.String?

        public init(
            command: Swift.String? = nil,
            dateTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            standardError: Swift.String? = nil,
            standardOutput: Swift.String? = nil,
            status: LightsailClientTypes.SetupStatus? = nil,
            version: Swift.String? = nil
        )
        {
            self.command = command
            self.dateTime = dateTime
            self.name = name
            self.standardError = standardError
            self.standardOutput = standardOutput
            self.status = status
            self.version = version
        }
    }
}

extension LightsailClientTypes {

    /// Returns information that was submitted during the SetupInstanceHttps request. Email information is redacted for privacy.
    public struct SetupRequest: Swift.Sendable {
        /// The Certificate Authority (CA) that issues the SSL/TLS certificate.
        public var certificateProvider: LightsailClientTypes.CertificateProvider?
        /// The name of the domain and subdomains that the SSL/TLS certificate secures.
        public var domainNames: [Swift.String]?
        /// The name of the Lightsail instance.
        public var instanceName: Swift.String?

        public init(
            certificateProvider: LightsailClientTypes.CertificateProvider? = nil,
            domainNames: [Swift.String]? = nil,
            instanceName: Swift.String? = nil
        )
        {
            self.certificateProvider = certificateProvider
            self.domainNames = domainNames
            self.instanceName = instanceName
        }
    }
}

extension LightsailClientTypes {

    /// The Lightsail resource that SetupHistory was ran on.
    public struct SetupHistoryResource: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the Lightsail resource.
        public var arn: Swift.String?
        /// The timestamp for when the resource was created.
        public var createdAt: Foundation.Date?
        /// Describes the resource location.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the Lightsail resource.
        public var name: Swift.String?
        /// The Lightsail resource type. For example, Instance.
        public var resourceType: LightsailClientTypes.ResourceType?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.location = location
            self.name = name
            self.resourceType = resourceType
        }
    }
}

extension LightsailClientTypes {

    /// Returns a list of the commands that were ran on the target resource. The status of each command is also returned.
    public struct SetupHistory: Swift.Sendable {
        /// Describes the full details of the request.
        public var executionDetails: [LightsailClientTypes.SetupExecutionDetails]?
        /// A GUID that's used to identify the operation.
        public var operationId: Swift.String?
        /// Information about the specified request.
        public var request: LightsailClientTypes.SetupRequest?
        /// The target resource name for the request.
        public var resource: LightsailClientTypes.SetupHistoryResource?
        /// The status of the request.
        public var status: LightsailClientTypes.SetupStatus?

        public init(
            executionDetails: [LightsailClientTypes.SetupExecutionDetails]? = nil,
            operationId: Swift.String? = nil,
            request: LightsailClientTypes.SetupRequest? = nil,
            resource: LightsailClientTypes.SetupHistoryResource? = nil,
            status: LightsailClientTypes.SetupStatus? = nil
        )
        {
            self.executionDetails = executionDetails
            self.operationId = operationId
            self.request = request
            self.resource = resource
            self.status = status
        }
    }
}

public struct GetSetupHistoryOutput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetSetupHistory request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// The historical information that's returned.
    public var setupHistory: [LightsailClientTypes.SetupHistory]?

    public init(
        nextPageToken: Swift.String? = nil,
        setupHistory: [LightsailClientTypes.SetupHistory]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.setupHistory = setupHistory
    }
}

public struct GetStaticIpInput: Swift.Sendable {
    /// The name of the static IP in Lightsail.
    /// This member is required.
    public var staticIpName: Swift.String?

    public init(
        staticIpName: Swift.String? = nil
    )
    {
        self.staticIpName = staticIpName
    }
}

extension LightsailClientTypes {

    /// Describes a static IP.
    public struct StaticIp: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the static IP (arn:aws:lightsail:us-east-2:123456789101:StaticIp/9cbb4a9e-f8e3-4dfe-b57e-12345EXAMPLE).
        public var arn: Swift.String?
        /// The instance where the static IP is attached (Amazon_Linux-1GB-Ohio-1).
        public var attachedTo: Swift.String?
        /// The timestamp when the static IP was created (1479735304.222).
        public var createdAt: Foundation.Date?
        /// The static IP address.
        public var ipAddress: Swift.String?
        /// A Boolean value indicating whether the static IP is attached.
        public var isAttached: Swift.Bool?
        /// The region and Availability Zone where the static IP was created.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the static IP (StaticIP-Ohio-EXAMPLE).
        public var name: Swift.String?
        /// The resource type (usually StaticIp).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?

        public init(
            arn: Swift.String? = nil,
            attachedTo: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            ipAddress: Swift.String? = nil,
            isAttached: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            supportCode: Swift.String? = nil
        )
        {
            self.arn = arn
            self.attachedTo = attachedTo
            self.createdAt = createdAt
            self.ipAddress = ipAddress
            self.isAttached = isAttached
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.supportCode = supportCode
        }
    }
}

public struct GetStaticIpOutput: Swift.Sendable {
    /// An array of key-value pairs containing information about the requested static IP.
    public var staticIp: LightsailClientTypes.StaticIp?

    public init(
        staticIp: LightsailClientTypes.StaticIp? = nil
    )
    {
        self.staticIp = staticIp
    }
}

public struct GetStaticIpsInput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetStaticIps request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init(
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

public struct GetStaticIpsOutput: Swift.Sendable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetStaticIps request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An array of key-value pairs containing information about your get static IPs request.
    public var staticIps: [LightsailClientTypes.StaticIp]?

    public init(
        nextPageToken: Swift.String? = nil,
        staticIps: [LightsailClientTypes.StaticIp]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.staticIps = staticIps
    }
}

public struct ImportKeyPairInput: Swift.Sendable {
    /// The name of the key pair for which you want to import the public key.
    /// This member is required.
    public var keyPairName: Swift.String?
    /// A base64-encoded public key of the ssh-rsa type.
    /// This member is required.
    public var publicKeyBase64: Swift.String?

    public init(
        keyPairName: Swift.String? = nil,
        publicKeyBase64: Swift.String? = nil
    )
    {
        self.keyPairName = keyPairName
        self.publicKeyBase64 = publicKeyBase64
    }
}

public struct ImportKeyPairOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct IsVpcPeeredInput: Swift.Sendable {

    public init() { }
}

public struct IsVpcPeeredOutput: Swift.Sendable {
    /// Returns true if the Lightsail VPC is peered; otherwise, false.
    public var isPeered: Swift.Bool?

    public init(
        isPeered: Swift.Bool? = nil
    )
    {
        self.isPeered = isPeered
    }
}

public struct OpenInstancePublicPortsInput: Swift.Sendable {
    /// The name of the instance for which to open ports.
    /// This member is required.
    public var instanceName: Swift.String?
    /// An object to describe the ports to open for the specified instance.
    /// This member is required.
    public var portInfo: LightsailClientTypes.PortInfo?

    public init(
        instanceName: Swift.String? = nil,
        portInfo: LightsailClientTypes.PortInfo? = nil
    )
    {
        self.instanceName = instanceName
        self.portInfo = portInfo
    }
}

public struct OpenInstancePublicPortsOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct PeerVpcInput: Swift.Sendable {

    public init() { }
}

public struct PeerVpcOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct PutAlarmInput: Swift.Sendable {
    /// The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
    /// This member is required.
    public var alarmName: Swift.String?
    /// The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
    /// This member is required.
    public var comparisonOperator: LightsailClientTypes.ComparisonOperator?
    /// The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both. A notification is sent via the specified contact protocol if notifications are enabled for the alarm, and when the alarm is triggered. A notification is not sent if a contact protocol is not specified, if the specified contact protocol is not configured in the Amazon Web Services Region, or if notifications are not enabled for the alarm using the notificationEnabled paramater. Use the CreateContactMethod action to configure a contact protocol in an Amazon Web Services Region.
    public var contactProtocols: [LightsailClientTypes.ContactProtocol]?
    /// The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an "M out of N" alarm, this value (datapointsToAlarm) is the M.
    public var datapointsToAlarm: Swift.Int?
    /// The number of most recent periods over which data is compared to the specified threshold. If you are setting an "M out of N" alarm, this value (evaluationPeriods) is the N. If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies the rolling period of time in which data points are evaluated. Each evaluation period is five minutes long. For example, specify an evaluation period of 24 to evaluate a metric over a rolling period of two hours. You can specify a minimum valuation period of 1 (5 minutes), and a maximum evaluation period of 288 (24 hours).
    /// This member is required.
    public var evaluationPeriods: Swift.Int?
    /// The name of the metric to associate with the alarm. You can configure up to two alarms per metric. The following metrics are available for each resource type:
    ///
    /// * Instances: BurstCapacityPercentage, BurstCapacityTime, CPUUtilization, NetworkIn, NetworkOut, StatusCheckFailed, StatusCheckFailed_Instance, and StatusCheckFailed_System.
    ///
    /// * Load balancers: ClientTLSNegotiationErrorCount, HealthyHostCount, UnhealthyHostCount, HTTPCode_LB_4XX_Count, HTTPCode_LB_5XX_Count, HTTPCode_Instance_2XX_Count, HTTPCode_Instance_3XX_Count, HTTPCode_Instance_4XX_Count, HTTPCode_Instance_5XX_Count, InstanceResponseTime, RejectedConnectionCount, and RequestCount.
    ///
    /// * Relational databases: CPUUtilization, DatabaseConnections, DiskQueueDepth, FreeStorageSpace, NetworkReceiveThroughput, and NetworkTransmitThroughput.
    ///
    ///
    /// For more information about these metrics, see [Metrics available in Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-resource-health-metrics#available-metrics).
    /// This member is required.
    public var metricName: LightsailClientTypes.MetricName?
    /// The name of the Lightsail resource that will be monitored. Instances, load balancers, and relational databases are the only Lightsail resources that can currently be monitored by alarms.
    /// This member is required.
    public var monitoredResourceName: Swift.String?
    /// Indicates whether the alarm is enabled. Notifications are enabled by default if you don't specify this parameter.
    public var notificationEnabled: Swift.Bool?
    /// The alarm states that trigger a notification. An alarm has the following possible states:
    ///
    /// * ALARM - The metric is outside of the defined threshold.
    ///
    /// * INSUFFICIENT_DATA - The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.
    ///
    /// * OK - The metric is within the defined threshold.
    ///
    ///
    /// When you specify a notification trigger, the ALARM state must be specified. The INSUFFICIENT_DATA and OK states can be specified in addition to the ALARM state.
    ///
    /// * If you specify OK as an alarm trigger, a notification is sent when the alarm switches from an ALARM or INSUFFICIENT_DATA alarm state to an OK state. This can be thought of as an all clear alarm notification.
    ///
    /// * If you specify INSUFFICIENT_DATA as the alarm trigger, a notification is sent when the alarm switches from an OK or ALARM alarm state to an INSUFFICIENT_DATA state.
    ///
    ///
    /// The notification trigger defaults to ALARM if you don't specify this parameter.
    public var notificationTriggers: [LightsailClientTypes.AlarmState]?
    /// The value against which the specified statistic is compared.
    /// This member is required.
    public var threshold: Swift.Double?
    /// Sets how this alarm will handle missing data points. An alarm can treat missing data in the following ways:
    ///
    /// * breaching - Assume the missing data is not within the threshold. Missing data counts towards the number of times the metric is not within the threshold.
    ///
    /// * notBreaching - Assume the missing data is within the threshold. Missing data does not count towards the number of times the metric is not within the threshold.
    ///
    /// * ignore - Ignore the missing data. Maintains the current alarm state.
    ///
    /// * missing - Missing data is treated as missing.
    ///
    ///
    /// If treatMissingData is not specified, the default behavior of missing is used.
    public var treatMissingData: LightsailClientTypes.TreatMissingData?

    public init(
        alarmName: Swift.String? = nil,
        comparisonOperator: LightsailClientTypes.ComparisonOperator? = nil,
        contactProtocols: [LightsailClientTypes.ContactProtocol]? = nil,
        datapointsToAlarm: Swift.Int? = nil,
        evaluationPeriods: Swift.Int? = nil,
        metricName: LightsailClientTypes.MetricName? = nil,
        monitoredResourceName: Swift.String? = nil,
        notificationEnabled: Swift.Bool? = nil,
        notificationTriggers: [LightsailClientTypes.AlarmState]? = nil,
        threshold: Swift.Double? = nil,
        treatMissingData: LightsailClientTypes.TreatMissingData? = nil
    )
    {
        self.alarmName = alarmName
        self.comparisonOperator = comparisonOperator
        self.contactProtocols = contactProtocols
        self.datapointsToAlarm = datapointsToAlarm
        self.evaluationPeriods = evaluationPeriods
        self.metricName = metricName
        self.monitoredResourceName = monitoredResourceName
        self.notificationEnabled = notificationEnabled
        self.notificationTriggers = notificationTriggers
        self.threshold = threshold
        self.treatMissingData = treatMissingData
    }
}

public struct PutAlarmOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct PutInstancePublicPortsInput: Swift.Sendable {
    /// The name of the instance for which to open ports.
    /// This member is required.
    public var instanceName: Swift.String?
    /// An array of objects to describe the ports to open for the specified instance.
    /// This member is required.
    public var portInfos: [LightsailClientTypes.PortInfo]?

    public init(
        instanceName: Swift.String? = nil,
        portInfos: [LightsailClientTypes.PortInfo]? = nil
    )
    {
        self.instanceName = instanceName
        self.portInfos = portInfos
    }
}

public struct PutInstancePublicPortsOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct RebootInstanceInput: Swift.Sendable {
    /// The name of the instance to reboot.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

public struct RebootInstanceOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct RebootRelationalDatabaseInput: Swift.Sendable {
    /// The name of your database to reboot.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init(
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
    }
}

public struct RebootRelationalDatabaseOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct RegisterContainerImageInput: Swift.Sendable {
    /// The digest of the container image to be registered.
    /// This member is required.
    public var digest: Swift.String?
    /// The label for the container image when it's registered to the container service. Use a descriptive label that you can use to track the different versions of your registered container images. Use the GetContainerImages action to return the container images registered to a Lightsail container service. The label is the  portion of the following image name example:
    ///
    /// * :container-service-1..1
    ///
    ///
    /// If the name of your container service is mycontainerservice, and the label that you specify is mystaticwebsite, then the name of the registered container image will be :mycontainerservice.mystaticwebsite.1. The number at the end of these image name examples represents the version of the registered container image. If you push and register another container image to the same Lightsail container service, with the same label, then the version number for the new registered container image will be 2. If you push and register another container image, the version number will be 3, and so on.
    /// This member is required.
    public var label: Swift.String?
    /// The name of the container service for which to register a container image.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        digest: Swift.String? = nil,
        label: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.digest = digest
        self.label = label
        self.serviceName = serviceName
    }
}

public struct RegisterContainerImageOutput: Swift.Sendable {
    /// An object that describes a container image that is registered to a Lightsail container service
    public var containerImage: LightsailClientTypes.ContainerImage?

    public init(
        containerImage: LightsailClientTypes.ContainerImage? = nil
    )
    {
        self.containerImage = containerImage
    }
}

public struct ReleaseStaticIpInput: Swift.Sendable {
    /// The name of the static IP to delete.
    /// This member is required.
    public var staticIpName: Swift.String?

    public init(
        staticIpName: Swift.String? = nil
    )
    {
        self.staticIpName = staticIpName
    }
}

public struct ReleaseStaticIpOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct ResetDistributionCacheInput: Swift.Sendable {
    /// The name of the distribution for which to reset cache. Use the GetDistributions action to get a list of distribution names that you can specify.
    public var distributionName: Swift.String?

    public init(
        distributionName: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
    }
}

public struct ResetDistributionCacheOutput: Swift.Sendable {
    /// The timestamp of the reset cache request (1479734909.17) in Unix time format.
    public var createTime: Foundation.Date?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?
    /// The status of the reset cache request.
    public var status: Swift.String?

    public init(
        createTime: Foundation.Date? = nil,
        operation: LightsailClientTypes.Operation? = nil,
        status: Swift.String? = nil
    )
    {
        self.createTime = createTime
        self.operation = operation
        self.status = status
    }
}

public struct SendContactMethodVerificationInput: Swift.Sendable {
    /// The protocol to verify, such as Email or SMS (text messaging).
    /// This member is required.
    public var `protocol`: LightsailClientTypes.ContactMethodVerificationProtocol?

    public init(
        `protocol`: LightsailClientTypes.ContactMethodVerificationProtocol? = nil
    )
    {
        self.`protocol` = `protocol`
    }
}

public struct SendContactMethodVerificationOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct SetIpAddressTypeInput: Swift.Sendable {
    /// Required parameter to accept the instance bundle update when changing to, and from, IPv6-only. An instance bundle will change when switching from dual-stack or ipv4, to ipv6. It also changes when switching from ipv6, to dual-stack or ipv4. You must include this parameter in the command to update the bundle. For example, if you switch from dual-stack to ipv6, the bundle will be updated, and billing for the IPv6-only instance bundle begins immediately.
    public var acceptBundleUpdate: Swift.Bool?
    /// The IP address type to set for the specified resource. The possible values are ipv4 for IPv4 only, ipv6 for IPv6 only, and dualstack for IPv4 and IPv6.
    /// This member is required.
    public var ipAddressType: LightsailClientTypes.IpAddressType?
    /// The name of the resource for which to set the IP address type.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The resource type. The resource values are Distribution, Instance, and LoadBalancer. Distribution-related APIs are available only in the N. Virginia (us-east-1) Amazon Web Services Region. Set your Amazon Web Services Region configuration to us-east-1 to create, view, or edit distributions.
    /// This member is required.
    public var resourceType: LightsailClientTypes.ResourceType?

    public init(
        acceptBundleUpdate: Swift.Bool? = nil,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        resourceName: Swift.String? = nil,
        resourceType: LightsailClientTypes.ResourceType? = nil
    )
    {
        self.acceptBundleUpdate = acceptBundleUpdate
        self.ipAddressType = ipAddressType
        self.resourceName = resourceName
        self.resourceType = resourceType
    }
}

public struct SetIpAddressTypeOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

extension LightsailClientTypes {

    public enum ResourceBucketAccess: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allow
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceBucketAccess] {
            return [
                .allow,
                .deny
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allow: return "allow"
            case .deny: return "deny"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct SetResourceAccessForBucketInput: Swift.Sendable {
    /// The access setting. The following access settings are available:
    ///
    /// * allow - Allows access to the bucket and its objects.
    ///
    /// * deny - Denies access to the bucket and its objects. Use this setting to remove access for a resource previously set to allow.
    /// This member is required.
    public var access: LightsailClientTypes.ResourceBucketAccess?
    /// The name of the bucket for which to set access to another Lightsail resource.
    /// This member is required.
    public var bucketName: Swift.String?
    /// The name of the Lightsail instance for which to set bucket access. The instance must be in a running or stopped state.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        access: LightsailClientTypes.ResourceBucketAccess? = nil,
        bucketName: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.access = access
        self.bucketName = bucketName
        self.resourceName = resourceName
    }
}

public struct SetResourceAccessForBucketOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct SetupInstanceHttpsInput: Swift.Sendable {
    /// The certificate authority that issues the SSL/TLS certificate.
    /// This member is required.
    public var certificateProvider: LightsailClientTypes.CertificateProvider?
    /// The name of the domain and subdomains that were specified for the SSL/TLS certificate.
    /// This member is required.
    public var domainNames: [Swift.String]?
    /// The contact method for SSL/TLS certificate renewal alerts. You can enter one email address.
    /// This member is required.
    public var emailAddress: Swift.String?
    /// The name of the Lightsail instance.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        certificateProvider: LightsailClientTypes.CertificateProvider? = nil,
        domainNames: [Swift.String]? = nil,
        emailAddress: Swift.String? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.certificateProvider = certificateProvider
        self.domainNames = domainNames
        self.emailAddress = emailAddress
        self.instanceName = instanceName
    }
}

extension SetupInstanceHttpsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetupInstanceHttpsInput(certificateProvider: \(Swift.String(describing: certificateProvider)), domainNames: \(Swift.String(describing: domainNames)), instanceName: \(Swift.String(describing: instanceName)), emailAddress: \"CONTENT_REDACTED\")"}
}

public struct SetupInstanceHttpsOutput: Swift.Sendable {
    /// The available API operations for SetupInstanceHttps.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct StartGUISessionInput: Swift.Sendable {
    /// The resource name.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        resourceName: Swift.String? = nil
    )
    {
        self.resourceName = resourceName
    }
}

public struct StartGUISessionOutput: Swift.Sendable {
    /// The available API operations.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct StartInstanceInput: Swift.Sendable {
    /// The name of the instance (a virtual private server) to start.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

public struct StartInstanceOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct StartRelationalDatabaseInput: Swift.Sendable {
    /// The name of your database to start.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init(
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
    }
}

public struct StartRelationalDatabaseOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct StopGUISessionInput: Swift.Sendable {
    /// The resource name.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        resourceName: Swift.String? = nil
    )
    {
        self.resourceName = resourceName
    }
}

public struct StopGUISessionOutput: Swift.Sendable {
    /// The available API operations.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct StopInstanceInput: Swift.Sendable {
    /// When set to True, forces a Lightsail instance that is stuck in a stopping state to stop. Only use the force parameter if your instance is stuck in the stopping state. In any other state, your instance should stop normally without adding this parameter to your API request.
    public var force: Swift.Bool?
    /// The name of the instance (a virtual private server) to stop.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        force: Swift.Bool? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.force = force
        self.instanceName = instanceName
    }
}

public struct StopInstanceOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct StopRelationalDatabaseInput: Swift.Sendable {
    /// The name of your database to stop.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// The name of your new database snapshot to be created before stopping your database.
    public var relationalDatabaseSnapshotName: Swift.String?

    public init(
        relationalDatabaseName: Swift.String? = nil,
        relationalDatabaseSnapshotName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
    }
}

public struct StopRelationalDatabaseOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource to which you want to add a tag.
    public var resourceArn: Swift.String?
    /// The name of the resource to which you are adding tags.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The tag key and optional value.
    /// This member is required.
    public var tags: [LightsailClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.resourceName = resourceName
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct TestAlarmInput: Swift.Sendable {
    /// The name of the alarm to test.
    /// This member is required.
    public var alarmName: Swift.String?
    /// The alarm state to test. An alarm has the following possible states that can be tested:
    ///
    /// * ALARM - The metric is outside of the defined threshold.
    ///
    /// * INSUFFICIENT_DATA - The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.
    ///
    /// * OK - The metric is within the defined threshold.
    /// This member is required.
    public var state: LightsailClientTypes.AlarmState?

    public init(
        alarmName: Swift.String? = nil,
        state: LightsailClientTypes.AlarmState? = nil
    )
    {
        self.alarmName = alarmName
        self.state = state
    }
}

public struct TestAlarmOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct UnpeerVpcInput: Swift.Sendable {

    public init() { }
}

public struct UnpeerVpcOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource from which you want to remove a tag.
    public var resourceArn: Swift.String?
    /// The name of the resource from which you are removing a tag.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The tag keys to delete from the specified resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.resourceName = resourceName
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct UpdateBucketInput: Swift.Sendable {
    /// An object that describes the access log configuration for the bucket.
    public var accessLogConfig: LightsailClientTypes.BucketAccessLogConfig?
    /// An object that sets the public accessibility of objects in the specified bucket.
    public var accessRules: LightsailClientTypes.AccessRules?
    /// The name of the bucket to update.
    /// This member is required.
    public var bucketName: Swift.String?
    /// An array of strings to specify the Amazon Web Services account IDs that can access the bucket. You can give a maximum of 10 Amazon Web Services accounts access to a bucket.
    public var readonlyAccessAccounts: [Swift.String]?
    /// Specifies whether to enable or suspend versioning of objects in the bucket. The following options can be specified:
    ///
    /// * Enabled - Enables versioning of objects in the specified bucket.
    ///
    /// * Suspended - Suspends versioning of objects in the specified bucket. Existing object versions are retained.
    public var versioning: Swift.String?

    public init(
        accessLogConfig: LightsailClientTypes.BucketAccessLogConfig? = nil,
        accessRules: LightsailClientTypes.AccessRules? = nil,
        bucketName: Swift.String? = nil,
        readonlyAccessAccounts: [Swift.String]? = nil,
        versioning: Swift.String? = nil
    )
    {
        self.accessLogConfig = accessLogConfig
        self.accessRules = accessRules
        self.bucketName = bucketName
        self.readonlyAccessAccounts = readonlyAccessAccounts
        self.versioning = versioning
    }
}

public struct UpdateBucketOutput: Swift.Sendable {
    /// An object that describes the bucket that is updated.
    public var bucket: LightsailClientTypes.Bucket?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        bucket: LightsailClientTypes.Bucket? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.bucket = bucket
        self.operations = operations
    }
}

public struct UpdateBucketBundleInput: Swift.Sendable {
    /// The name of the bucket for which to update the bundle.
    /// This member is required.
    public var bucketName: Swift.String?
    /// The ID of the new bundle to apply to the bucket. Use the [GetBucketBundles](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketBundles.html) action to get a list of bundle IDs that you can specify.
    /// This member is required.
    public var bundleId: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        bundleId: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.bundleId = bundleId
    }
}

public struct UpdateBucketBundleOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct UpdateContainerServiceInput: Swift.Sendable {
    /// A Boolean value to indicate whether the container service is disabled.
    public var isDisabled: Swift.Bool?
    /// The power for the container service. The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the container service. The power and scale of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the power with the scale (the number of nodes) of the service. Use the GetContainerServicePowers action to view the specifications of each power option.
    public var power: LightsailClientTypes.ContainerServicePowerName?
    /// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
    public var privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccessRequest?
    /// The public domain names to use with the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the CreateCertificate action to create a certificate for the public domain names you want to use with your container service. You can specify public domain names using a string to array map as shown in the example later on this page.
    public var publicDomainNames: [Swift.String: [Swift.String]]?
    /// The scale for the container service. The scale specifies the allocated compute nodes of the container service. The power and scale of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the power with the scale (the number of nodes) of the service.
    public var scale: Swift.Int?
    /// The name of the container service to update.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        isDisabled: Swift.Bool? = nil,
        power: LightsailClientTypes.ContainerServicePowerName? = nil,
        privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccessRequest? = nil,
        publicDomainNames: [Swift.String: [Swift.String]]? = nil,
        scale: Swift.Int? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.isDisabled = isDisabled
        self.power = power
        self.privateRegistryAccess = privateRegistryAccess
        self.publicDomainNames = publicDomainNames
        self.scale = scale
        self.serviceName = serviceName
    }
}

public struct UpdateContainerServiceOutput: Swift.Sendable {
    /// An object that describes a container service.
    public var containerService: LightsailClientTypes.ContainerService?

    public init(
        containerService: LightsailClientTypes.ContainerService? = nil
    )
    {
        self.containerService = containerService
    }
}

public struct UpdateDistributionInput: Swift.Sendable {
    /// An object that describes the cache behavior settings for the distribution. The cacheBehaviorSettings specified in your UpdateDistributionRequest will replace your distribution's existing settings.
    public var cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
    /// An array of objects that describe the per-path cache behavior for the distribution.
    public var cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
    /// The name of the SSL/TLS certificate that you want to attach to the distribution. Only certificates with a status of ISSUED can be attached to a distribution. Use the [GetCertificates](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetCertificates.html) action to get a list of certificate names that you can specify.
    public var certificateName: Swift.String?
    /// An object that describes the default cache behavior for the distribution.
    public var defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
    /// The name of the distribution to update. Use the GetDistributions action to get a list of distribution names that you can specify.
    /// This member is required.
    public var distributionName: Swift.String?
    /// Indicates whether to enable the distribution.
    public var isEnabled: Swift.Bool?
    /// An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer. The distribution pulls, caches, and serves content from the origin.
    public var origin: LightsailClientTypes.InputOrigin?
    /// Indicates whether the default SSL/TLS certificate is attached to the distribution. The default value is true. When true, the distribution uses the default domain name such as d111111abcdef8.cloudfront.net. Set this value to false to attach a new certificate to the distribution.
    public var useDefaultCertificate: Swift.Bool?
    /// Use this parameter to update the minimum TLS protocol version for the SSL/TLS certificate that's attached to the distribution.
    public var viewerMinimumTlsProtocolVersion: LightsailClientTypes.ViewerMinimumTlsProtocolVersionEnum?

    public init(
        cacheBehaviorSettings: LightsailClientTypes.CacheSettings? = nil,
        cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]? = nil,
        certificateName: Swift.String? = nil,
        defaultCacheBehavior: LightsailClientTypes.CacheBehavior? = nil,
        distributionName: Swift.String? = nil,
        isEnabled: Swift.Bool? = nil,
        origin: LightsailClientTypes.InputOrigin? = nil,
        useDefaultCertificate: Swift.Bool? = nil,
        viewerMinimumTlsProtocolVersion: LightsailClientTypes.ViewerMinimumTlsProtocolVersionEnum? = nil
    )
    {
        self.cacheBehaviorSettings = cacheBehaviorSettings
        self.cacheBehaviors = cacheBehaviors
        self.certificateName = certificateName
        self.defaultCacheBehavior = defaultCacheBehavior
        self.distributionName = distributionName
        self.isEnabled = isEnabled
        self.origin = origin
        self.useDefaultCertificate = useDefaultCertificate
        self.viewerMinimumTlsProtocolVersion = viewerMinimumTlsProtocolVersion
    }
}

public struct UpdateDistributionOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct UpdateDistributionBundleInput: Swift.Sendable {
    /// The bundle ID of the new bundle to apply to your distribution. Use the GetDistributionBundles action to get a list of distribution bundle IDs that you can specify.
    public var bundleId: Swift.String?
    /// The name of the distribution for which to update the bundle. Use the GetDistributions action to get a list of distribution names that you can specify.
    public var distributionName: Swift.String?

    public init(
        bundleId: Swift.String? = nil,
        distributionName: Swift.String? = nil
    )
    {
        self.bundleId = bundleId
        self.distributionName = distributionName
    }
}

public struct UpdateDistributionBundleOutput: Swift.Sendable {
    /// An object that describes the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct UpdateDomainEntryInput: Swift.Sendable {
    /// An array of key-value pairs containing information about the domain entry.
    /// This member is required.
    public var domainEntry: LightsailClientTypes.DomainEntry?
    /// The name of the domain recordset to update.
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        domainEntry: LightsailClientTypes.DomainEntry? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.domainEntry = domainEntry
        self.domainName = domainName
    }
}

public struct UpdateDomainEntryOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct UpdateInstanceMetadataOptionsInput: Swift.Sendable {
    /// Enables or disables the HTTP metadata endpoint on your instances. If this parameter is not specified, the existing state is maintained. If you specify a value of disabled, you cannot access your instance metadata.
    public var httpEndpoint: LightsailClientTypes.HttpEndpoint?
    /// Enables or disables the IPv6 endpoint for the instance metadata service. This setting applies only when the HTTP metadata endpoint is enabled. This parameter is available only for instances in the Europe (Stockholm) Amazon Web Services Region (eu-north-1).
    public var httpProtocolIpv6: LightsailClientTypes.HttpProtocolIpv6?
    /// The desired HTTP PUT response hop limit for instance metadata requests. A larger number means that the instance metadata requests can travel farther. If no parameter is specified, the existing state is maintained.
    public var httpPutResponseHopLimit: Swift.Int?
    /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose whether to retrieve instance metadata with a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials by using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with all instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials. The version 1.0 credentials are not available.
    public var httpTokens: LightsailClientTypes.HttpTokens?
    /// The name of the instance for which to update metadata parameters.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        httpEndpoint: LightsailClientTypes.HttpEndpoint? = nil,
        httpProtocolIpv6: LightsailClientTypes.HttpProtocolIpv6? = nil,
        httpPutResponseHopLimit: Swift.Int? = nil,
        httpTokens: LightsailClientTypes.HttpTokens? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.httpEndpoint = httpEndpoint
        self.httpProtocolIpv6 = httpProtocolIpv6
        self.httpPutResponseHopLimit = httpPutResponseHopLimit
        self.httpTokens = httpTokens
        self.instanceName = instanceName
    }
}

public struct UpdateInstanceMetadataOptionsOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init(
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

public struct UpdateLoadBalancerAttributeInput: Swift.Sendable {
    /// The name of the attribute you want to update.
    /// This member is required.
    public var attributeName: LightsailClientTypes.LoadBalancerAttributeName?
    /// The value that you want to specify for the attribute name. The following values are supported depending on what you specify for the attributeName request parameter:
    ///
    /// * If you specify HealthCheckPath for the attributeName request parameter, then the attributeValue request parameter must be the path to ping on the target (for example, /weather/us/wa/seattle).
    ///
    /// * If you specify SessionStickinessEnabled for the attributeName request parameter, then the attributeValue request parameter must be true to activate session stickiness or false to deactivate session stickiness.
    ///
    /// * If you specify SessionStickiness_LB_CookieDurationSeconds for the attributeName request parameter, then the attributeValue request parameter must be an interger that represents the cookie duration in seconds.
    ///
    /// * If you specify HttpsRedirectionEnabled for the attributeName request parameter, then the attributeValue request parameter must be true to activate HTTP to HTTPS redirection or false to deactivate HTTP to HTTPS redirection.
    ///
    /// * If you specify TlsPolicyName for the attributeName request parameter, then the attributeValue request parameter must be the name of the TLS policy. Use the [GetLoadBalancerTlsPolicies](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html) action to get a list of TLS policy names that you can specify.
    /// This member is required.
    public var attributeValue: Swift.String?
    /// The name of the load balancer that you want to modify (my-load-balancer.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init(
        attributeName: LightsailClientTypes.LoadBalancerAttributeName? = nil,
        attributeValue: Swift.String? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.attributeName = attributeName
        self.attributeValue = attributeValue
        self.loadBalancerName = loadBalancerName
    }
}

public struct UpdateLoadBalancerAttributeOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct UpdateRelationalDatabaseInput: Swift.Sendable {
    /// When true, applies changes immediately. When false, applies changes during the preferred maintenance window. Some changes may cause an outage. Default: false
    public var applyImmediately: Swift.Bool?
    /// Indicates the certificate that needs to be associated with the database.
    public var caCertificateIdentifier: Swift.String?
    /// When true, disables automated backup retention for your database. Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database using the create relational database snapshot operation. Updates are applied during the next maintenance window because this can result in an outage.
    public var disableBackupRetention: Swift.Bool?
    /// When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
    public var enableBackupRetention: Swift.Bool?
    /// The password for the master user. The password can include any printable ASCII character except "/", """, or "@". MySQL Constraints: Must contain from 8 to 41 characters. PostgreSQL Constraints: Must contain from 8 to 128 characters.
    public var masterUserPassword: Swift.String?
    /// The daily time range during which automated backups are created for your database if automated backups are enabled. Constraints:
    ///
    /// * Must be in the hh24:mi-hh24:mi format. Example: 16:00-16:30
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?
    /// The weekly time range during which system maintenance can occur on your database. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. Constraints:
    ///
    /// * Must be in the ddd:hh24:mi-ddd:hh24:mi format.
    ///
    /// * Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
    ///
    /// * Must be at least 30 minutes.
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Example: Tue:17:00-Tue:17:30
    public var preferredMaintenanceWindow: Swift.String?
    /// Specifies the accessibility options for your database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
    public var publiclyAccessible: Swift.Bool?
    /// This parameter is used to update the major version of the database. Enter the blueprintId for the major version that you want to update to. Use the [GetRelationalDatabaseBlueprints](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRelationalDatabaseBlueprints.html) action to get a list of available blueprint IDs.
    public var relationalDatabaseBlueprintId: Swift.String?
    /// The name of your Lightsail database resource to update.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// When true, the master user password is changed to a new strong password generated by Lightsail. Use the get relational database master user password operation to get the new password.
    public var rotateMasterUserPassword: Swift.Bool?

    public init(
        applyImmediately: Swift.Bool? = nil,
        caCertificateIdentifier: Swift.String? = nil,
        disableBackupRetention: Swift.Bool? = nil,
        enableBackupRetention: Swift.Bool? = nil,
        masterUserPassword: Swift.String? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        relationalDatabaseBlueprintId: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil,
        rotateMasterUserPassword: Swift.Bool? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.caCertificateIdentifier = caCertificateIdentifier
        self.disableBackupRetention = disableBackupRetention
        self.enableBackupRetention = enableBackupRetention
        self.masterUserPassword = masterUserPassword
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId
        self.relationalDatabaseName = relationalDatabaseName
        self.rotateMasterUserPassword = rotateMasterUserPassword
    }
}

extension UpdateRelationalDatabaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRelationalDatabaseInput(applyImmediately: \(Swift.String(describing: applyImmediately)), caCertificateIdentifier: \(Swift.String(describing: caCertificateIdentifier)), disableBackupRetention: \(Swift.String(describing: disableBackupRetention)), enableBackupRetention: \(Swift.String(describing: enableBackupRetention)), preferredBackupWindow: \(Swift.String(describing: preferredBackupWindow)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), relationalDatabaseBlueprintId: \(Swift.String(describing: relationalDatabaseBlueprintId)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)), rotateMasterUserPassword: \(Swift.String(describing: rotateMasterUserPassword)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

public struct UpdateRelationalDatabaseOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

public struct UpdateRelationalDatabaseParametersInput: Swift.Sendable {
    /// The database parameters to update.
    /// This member is required.
    public var parameters: [LightsailClientTypes.RelationalDatabaseParameter]?
    /// The name of your database for which to update parameters.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init(
        parameters: [LightsailClientTypes.RelationalDatabaseParameter]? = nil,
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.parameters = parameters
        self.relationalDatabaseName = relationalDatabaseName
    }
}

public struct UpdateRelationalDatabaseParametersOutput: Swift.Sendable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init(
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

extension AllocateStaticIpInput {

    static func urlPathProvider(_ value: AllocateStaticIpInput) -> Swift.String? {
        return "/"
    }
}

extension AttachCertificateToDistributionInput {

    static func urlPathProvider(_ value: AttachCertificateToDistributionInput) -> Swift.String? {
        return "/"
    }
}

extension AttachDiskInput {

    static func urlPathProvider(_ value: AttachDiskInput) -> Swift.String? {
        return "/"
    }
}

extension AttachInstancesToLoadBalancerInput {

    static func urlPathProvider(_ value: AttachInstancesToLoadBalancerInput) -> Swift.String? {
        return "/"
    }
}

extension AttachLoadBalancerTlsCertificateInput {

    static func urlPathProvider(_ value: AttachLoadBalancerTlsCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension AttachStaticIpInput {

    static func urlPathProvider(_ value: AttachStaticIpInput) -> Swift.String? {
        return "/"
    }
}

extension CloseInstancePublicPortsInput {

    static func urlPathProvider(_ value: CloseInstancePublicPortsInput) -> Swift.String? {
        return "/"
    }
}

extension CopySnapshotInput {

    static func urlPathProvider(_ value: CopySnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CreateBucketInput {

    static func urlPathProvider(_ value: CreateBucketInput) -> Swift.String? {
        return "/"
    }
}

extension CreateBucketAccessKeyInput {

    static func urlPathProvider(_ value: CreateBucketAccessKeyInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCertificateInput {

    static func urlPathProvider(_ value: CreateCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCloudFormationStackInput {

    static func urlPathProvider(_ value: CreateCloudFormationStackInput) -> Swift.String? {
        return "/"
    }
}

extension CreateContactMethodInput {

    static func urlPathProvider(_ value: CreateContactMethodInput) -> Swift.String? {
        return "/"
    }
}

extension CreateContainerServiceInput {

    static func urlPathProvider(_ value: CreateContainerServiceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateContainerServiceDeploymentInput {

    static func urlPathProvider(_ value: CreateContainerServiceDeploymentInput) -> Swift.String? {
        return "/"
    }
}

extension CreateContainerServiceRegistryLoginInput {

    static func urlPathProvider(_ value: CreateContainerServiceRegistryLoginInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDiskInput {

    static func urlPathProvider(_ value: CreateDiskInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDiskFromSnapshotInput {

    static func urlPathProvider(_ value: CreateDiskFromSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDiskSnapshotInput {

    static func urlPathProvider(_ value: CreateDiskSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDistributionInput {

    static func urlPathProvider(_ value: CreateDistributionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDomainInput {

    static func urlPathProvider(_ value: CreateDomainInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDomainEntryInput {

    static func urlPathProvider(_ value: CreateDomainEntryInput) -> Swift.String? {
        return "/"
    }
}

extension CreateGUISessionAccessDetailsInput {

    static func urlPathProvider(_ value: CreateGUISessionAccessDetailsInput) -> Swift.String? {
        return "/"
    }
}

extension CreateInstancesInput {

    static func urlPathProvider(_ value: CreateInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension CreateInstancesFromSnapshotInput {

    static func urlPathProvider(_ value: CreateInstancesFromSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CreateInstanceSnapshotInput {

    static func urlPathProvider(_ value: CreateInstanceSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CreateKeyPairInput {

    static func urlPathProvider(_ value: CreateKeyPairInput) -> Swift.String? {
        return "/"
    }
}

extension CreateLoadBalancerInput {

    static func urlPathProvider(_ value: CreateLoadBalancerInput) -> Swift.String? {
        return "/"
    }
}

extension CreateLoadBalancerTlsCertificateInput {

    static func urlPathProvider(_ value: CreateLoadBalancerTlsCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRelationalDatabaseInput {

    static func urlPathProvider(_ value: CreateRelationalDatabaseInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRelationalDatabaseFromSnapshotInput {

    static func urlPathProvider(_ value: CreateRelationalDatabaseFromSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRelationalDatabaseSnapshotInput {

    static func urlPathProvider(_ value: CreateRelationalDatabaseSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAlarmInput {

    static func urlPathProvider(_ value: DeleteAlarmInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAutoSnapshotInput {

    static func urlPathProvider(_ value: DeleteAutoSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketInput {

    static func urlPathProvider(_ value: DeleteBucketInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketAccessKeyInput {

    static func urlPathProvider(_ value: DeleteBucketAccessKeyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCertificateInput {

    static func urlPathProvider(_ value: DeleteCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteContactMethodInput {

    static func urlPathProvider(_ value: DeleteContactMethodInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteContainerImageInput {

    static func urlPathProvider(_ value: DeleteContainerImageInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteContainerServiceInput {

    static func urlPathProvider(_ value: DeleteContainerServiceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDiskInput {

    static func urlPathProvider(_ value: DeleteDiskInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDiskSnapshotInput {

    static func urlPathProvider(_ value: DeleteDiskSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDistributionInput {

    static func urlPathProvider(_ value: DeleteDistributionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDomainInput {

    static func urlPathProvider(_ value: DeleteDomainInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDomainEntryInput {

    static func urlPathProvider(_ value: DeleteDomainEntryInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteInstanceInput {

    static func urlPathProvider(_ value: DeleteInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteInstanceSnapshotInput {

    static func urlPathProvider(_ value: DeleteInstanceSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteKeyPairInput {

    static func urlPathProvider(_ value: DeleteKeyPairInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteKnownHostKeysInput {

    static func urlPathProvider(_ value: DeleteKnownHostKeysInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLoadBalancerInput {

    static func urlPathProvider(_ value: DeleteLoadBalancerInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLoadBalancerTlsCertificateInput {

    static func urlPathProvider(_ value: DeleteLoadBalancerTlsCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRelationalDatabaseInput {

    static func urlPathProvider(_ value: DeleteRelationalDatabaseInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRelationalDatabaseSnapshotInput {

    static func urlPathProvider(_ value: DeleteRelationalDatabaseSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension DetachCertificateFromDistributionInput {

    static func urlPathProvider(_ value: DetachCertificateFromDistributionInput) -> Swift.String? {
        return "/"
    }
}

extension DetachDiskInput {

    static func urlPathProvider(_ value: DetachDiskInput) -> Swift.String? {
        return "/"
    }
}

extension DetachInstancesFromLoadBalancerInput {

    static func urlPathProvider(_ value: DetachInstancesFromLoadBalancerInput) -> Swift.String? {
        return "/"
    }
}

extension DetachStaticIpInput {

    static func urlPathProvider(_ value: DetachStaticIpInput) -> Swift.String? {
        return "/"
    }
}

extension DisableAddOnInput {

    static func urlPathProvider(_ value: DisableAddOnInput) -> Swift.String? {
        return "/"
    }
}

extension DownloadDefaultKeyPairInput {

    static func urlPathProvider(_ value: DownloadDefaultKeyPairInput) -> Swift.String? {
        return "/"
    }
}

extension EnableAddOnInput {

    static func urlPathProvider(_ value: EnableAddOnInput) -> Swift.String? {
        return "/"
    }
}

extension ExportSnapshotInput {

    static func urlPathProvider(_ value: ExportSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension GetActiveNamesInput {

    static func urlPathProvider(_ value: GetActiveNamesInput) -> Swift.String? {
        return "/"
    }
}

extension GetAlarmsInput {

    static func urlPathProvider(_ value: GetAlarmsInput) -> Swift.String? {
        return "/"
    }
}

extension GetAutoSnapshotsInput {

    static func urlPathProvider(_ value: GetAutoSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

extension GetBlueprintsInput {

    static func urlPathProvider(_ value: GetBlueprintsInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketAccessKeysInput {

    static func urlPathProvider(_ value: GetBucketAccessKeysInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketBundlesInput {

    static func urlPathProvider(_ value: GetBucketBundlesInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketMetricDataInput {

    static func urlPathProvider(_ value: GetBucketMetricDataInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketsInput {

    static func urlPathProvider(_ value: GetBucketsInput) -> Swift.String? {
        return "/"
    }
}

extension GetBundlesInput {

    static func urlPathProvider(_ value: GetBundlesInput) -> Swift.String? {
        return "/"
    }
}

extension GetCertificatesInput {

    static func urlPathProvider(_ value: GetCertificatesInput) -> Swift.String? {
        return "/"
    }
}

extension GetCloudFormationStackRecordsInput {

    static func urlPathProvider(_ value: GetCloudFormationStackRecordsInput) -> Swift.String? {
        return "/"
    }
}

extension GetContactMethodsInput {

    static func urlPathProvider(_ value: GetContactMethodsInput) -> Swift.String? {
        return "/"
    }
}

extension GetContainerAPIMetadataInput {

    static func urlPathProvider(_ value: GetContainerAPIMetadataInput) -> Swift.String? {
        return "/"
    }
}

extension GetContainerImagesInput {

    static func urlPathProvider(_ value: GetContainerImagesInput) -> Swift.String? {
        return "/"
    }
}

extension GetContainerLogInput {

    static func urlPathProvider(_ value: GetContainerLogInput) -> Swift.String? {
        return "/"
    }
}

extension GetContainerLogInput {

    static func queryItemProvider(_ value: GetContainerLogInput) throws -> [Smithy.URIQueryItem] {
        return []
    }
}

extension GetContainerServiceDeploymentsInput {

    static func urlPathProvider(_ value: GetContainerServiceDeploymentsInput) -> Swift.String? {
        return "/"
    }
}

extension GetContainerServiceMetricDataInput {

    static func urlPathProvider(_ value: GetContainerServiceMetricDataInput) -> Swift.String? {
        return "/"
    }
}

extension GetContainerServiceMetricDataInput {

    static func queryItemProvider(_ value: GetContainerServiceMetricDataInput) throws -> [Smithy.URIQueryItem] {
        return []
    }
}

extension GetContainerServicePowersInput {

    static func urlPathProvider(_ value: GetContainerServicePowersInput) -> Swift.String? {
        return "/"
    }
}

extension GetContainerServicesInput {

    static func urlPathProvider(_ value: GetContainerServicesInput) -> Swift.String? {
        return "/"
    }
}

extension GetContainerServicesInput {

    static func queryItemProvider(_ value: GetContainerServicesInput) throws -> [Smithy.URIQueryItem] {
        return []
    }
}

extension GetCostEstimateInput {

    static func urlPathProvider(_ value: GetCostEstimateInput) -> Swift.String? {
        return "/"
    }
}

extension GetDiskInput {

    static func urlPathProvider(_ value: GetDiskInput) -> Swift.String? {
        return "/"
    }
}

extension GetDisksInput {

    static func urlPathProvider(_ value: GetDisksInput) -> Swift.String? {
        return "/"
    }
}

extension GetDiskSnapshotInput {

    static func urlPathProvider(_ value: GetDiskSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension GetDiskSnapshotsInput {

    static func urlPathProvider(_ value: GetDiskSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

extension GetDistributionBundlesInput {

    static func urlPathProvider(_ value: GetDistributionBundlesInput) -> Swift.String? {
        return "/"
    }
}

extension GetDistributionLatestCacheResetInput {

    static func urlPathProvider(_ value: GetDistributionLatestCacheResetInput) -> Swift.String? {
        return "/"
    }
}

extension GetDistributionMetricDataInput {

    static func urlPathProvider(_ value: GetDistributionMetricDataInput) -> Swift.String? {
        return "/"
    }
}

extension GetDistributionsInput {

    static func urlPathProvider(_ value: GetDistributionsInput) -> Swift.String? {
        return "/"
    }
}

extension GetDomainInput {

    static func urlPathProvider(_ value: GetDomainInput) -> Swift.String? {
        return "/"
    }
}

extension GetDomainsInput {

    static func urlPathProvider(_ value: GetDomainsInput) -> Swift.String? {
        return "/"
    }
}

extension GetExportSnapshotRecordsInput {

    static func urlPathProvider(_ value: GetExportSnapshotRecordsInput) -> Swift.String? {
        return "/"
    }
}

extension GetInstanceInput {

    static func urlPathProvider(_ value: GetInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension GetInstanceAccessDetailsInput {

    static func urlPathProvider(_ value: GetInstanceAccessDetailsInput) -> Swift.String? {
        return "/"
    }
}

extension GetInstanceMetricDataInput {

    static func urlPathProvider(_ value: GetInstanceMetricDataInput) -> Swift.String? {
        return "/"
    }
}

extension GetInstancePortStatesInput {

    static func urlPathProvider(_ value: GetInstancePortStatesInput) -> Swift.String? {
        return "/"
    }
}

extension GetInstancesInput {

    static func urlPathProvider(_ value: GetInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension GetInstanceSnapshotInput {

    static func urlPathProvider(_ value: GetInstanceSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension GetInstanceSnapshotsInput {

    static func urlPathProvider(_ value: GetInstanceSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

extension GetInstanceStateInput {

    static func urlPathProvider(_ value: GetInstanceStateInput) -> Swift.String? {
        return "/"
    }
}

extension GetKeyPairInput {

    static func urlPathProvider(_ value: GetKeyPairInput) -> Swift.String? {
        return "/"
    }
}

extension GetKeyPairsInput {

    static func urlPathProvider(_ value: GetKeyPairsInput) -> Swift.String? {
        return "/"
    }
}

extension GetLoadBalancerInput {

    static func urlPathProvider(_ value: GetLoadBalancerInput) -> Swift.String? {
        return "/"
    }
}

extension GetLoadBalancerMetricDataInput {

    static func urlPathProvider(_ value: GetLoadBalancerMetricDataInput) -> Swift.String? {
        return "/"
    }
}

extension GetLoadBalancersInput {

    static func urlPathProvider(_ value: GetLoadBalancersInput) -> Swift.String? {
        return "/"
    }
}

extension GetLoadBalancerTlsCertificatesInput {

    static func urlPathProvider(_ value: GetLoadBalancerTlsCertificatesInput) -> Swift.String? {
        return "/"
    }
}

extension GetLoadBalancerTlsPoliciesInput {

    static func urlPathProvider(_ value: GetLoadBalancerTlsPoliciesInput) -> Swift.String? {
        return "/"
    }
}

extension GetOperationInput {

    static func urlPathProvider(_ value: GetOperationInput) -> Swift.String? {
        return "/"
    }
}

extension GetOperationsInput {

    static func urlPathProvider(_ value: GetOperationsInput) -> Swift.String? {
        return "/"
    }
}

extension GetOperationsForResourceInput {

    static func urlPathProvider(_ value: GetOperationsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension GetRegionsInput {

    static func urlPathProvider(_ value: GetRegionsInput) -> Swift.String? {
        return "/"
    }
}

extension GetRelationalDatabaseInput {

    static func urlPathProvider(_ value: GetRelationalDatabaseInput) -> Swift.String? {
        return "/"
    }
}

extension GetRelationalDatabaseBlueprintsInput {

    static func urlPathProvider(_ value: GetRelationalDatabaseBlueprintsInput) -> Swift.String? {
        return "/"
    }
}

extension GetRelationalDatabaseBundlesInput {

    static func urlPathProvider(_ value: GetRelationalDatabaseBundlesInput) -> Swift.String? {
        return "/"
    }
}

extension GetRelationalDatabaseEventsInput {

    static func urlPathProvider(_ value: GetRelationalDatabaseEventsInput) -> Swift.String? {
        return "/"
    }
}

extension GetRelationalDatabaseLogEventsInput {

    static func urlPathProvider(_ value: GetRelationalDatabaseLogEventsInput) -> Swift.String? {
        return "/"
    }
}

extension GetRelationalDatabaseLogStreamsInput {

    static func urlPathProvider(_ value: GetRelationalDatabaseLogStreamsInput) -> Swift.String? {
        return "/"
    }
}

extension GetRelationalDatabaseMasterUserPasswordInput {

    static func urlPathProvider(_ value: GetRelationalDatabaseMasterUserPasswordInput) -> Swift.String? {
        return "/"
    }
}

extension GetRelationalDatabaseMetricDataInput {

    static func urlPathProvider(_ value: GetRelationalDatabaseMetricDataInput) -> Swift.String? {
        return "/"
    }
}

extension GetRelationalDatabaseParametersInput {

    static func urlPathProvider(_ value: GetRelationalDatabaseParametersInput) -> Swift.String? {
        return "/"
    }
}

extension GetRelationalDatabasesInput {

    static func urlPathProvider(_ value: GetRelationalDatabasesInput) -> Swift.String? {
        return "/"
    }
}

extension GetRelationalDatabaseSnapshotInput {

    static func urlPathProvider(_ value: GetRelationalDatabaseSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension GetRelationalDatabaseSnapshotsInput {

    static func urlPathProvider(_ value: GetRelationalDatabaseSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

extension GetSetupHistoryInput {

    static func urlPathProvider(_ value: GetSetupHistoryInput) -> Swift.String? {
        return "/"
    }
}

extension GetStaticIpInput {

    static func urlPathProvider(_ value: GetStaticIpInput) -> Swift.String? {
        return "/"
    }
}

extension GetStaticIpsInput {

    static func urlPathProvider(_ value: GetStaticIpsInput) -> Swift.String? {
        return "/"
    }
}

extension ImportKeyPairInput {

    static func urlPathProvider(_ value: ImportKeyPairInput) -> Swift.String? {
        return "/"
    }
}

extension IsVpcPeeredInput {

    static func urlPathProvider(_ value: IsVpcPeeredInput) -> Swift.String? {
        return "/"
    }
}

extension OpenInstancePublicPortsInput {

    static func urlPathProvider(_ value: OpenInstancePublicPortsInput) -> Swift.String? {
        return "/"
    }
}

extension PeerVpcInput {

    static func urlPathProvider(_ value: PeerVpcInput) -> Swift.String? {
        return "/"
    }
}

extension PutAlarmInput {

    static func urlPathProvider(_ value: PutAlarmInput) -> Swift.String? {
        return "/"
    }
}

extension PutInstancePublicPortsInput {

    static func urlPathProvider(_ value: PutInstancePublicPortsInput) -> Swift.String? {
        return "/"
    }
}

extension RebootInstanceInput {

    static func urlPathProvider(_ value: RebootInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension RebootRelationalDatabaseInput {

    static func urlPathProvider(_ value: RebootRelationalDatabaseInput) -> Swift.String? {
        return "/"
    }
}

extension RegisterContainerImageInput {

    static func urlPathProvider(_ value: RegisterContainerImageInput) -> Swift.String? {
        return "/"
    }
}

extension ReleaseStaticIpInput {

    static func urlPathProvider(_ value: ReleaseStaticIpInput) -> Swift.String? {
        return "/"
    }
}

extension ResetDistributionCacheInput {

    static func urlPathProvider(_ value: ResetDistributionCacheInput) -> Swift.String? {
        return "/"
    }
}

extension SendContactMethodVerificationInput {

    static func urlPathProvider(_ value: SendContactMethodVerificationInput) -> Swift.String? {
        return "/"
    }
}

extension SetIpAddressTypeInput {

    static func urlPathProvider(_ value: SetIpAddressTypeInput) -> Swift.String? {
        return "/"
    }
}

extension SetResourceAccessForBucketInput {

    static func urlPathProvider(_ value: SetResourceAccessForBucketInput) -> Swift.String? {
        return "/"
    }
}

extension SetupInstanceHttpsInput {

    static func urlPathProvider(_ value: SetupInstanceHttpsInput) -> Swift.String? {
        return "/"
    }
}

extension StartGUISessionInput {

    static func urlPathProvider(_ value: StartGUISessionInput) -> Swift.String? {
        return "/"
    }
}

extension StartInstanceInput {

    static func urlPathProvider(_ value: StartInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension StartRelationalDatabaseInput {

    static func urlPathProvider(_ value: StartRelationalDatabaseInput) -> Swift.String? {
        return "/"
    }
}

extension StopGUISessionInput {

    static func urlPathProvider(_ value: StopGUISessionInput) -> Swift.String? {
        return "/"
    }
}

extension StopInstanceInput {

    static func urlPathProvider(_ value: StopInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension StopRelationalDatabaseInput {

    static func urlPathProvider(_ value: StopRelationalDatabaseInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension TestAlarmInput {

    static func urlPathProvider(_ value: TestAlarmInput) -> Swift.String? {
        return "/"
    }
}

extension UnpeerVpcInput {

    static func urlPathProvider(_ value: UnpeerVpcInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateBucketInput {

    static func urlPathProvider(_ value: UpdateBucketInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateBucketBundleInput {

    static func urlPathProvider(_ value: UpdateBucketBundleInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateContainerServiceInput {

    static func urlPathProvider(_ value: UpdateContainerServiceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDistributionInput {

    static func urlPathProvider(_ value: UpdateDistributionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDistributionBundleInput {

    static func urlPathProvider(_ value: UpdateDistributionBundleInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDomainEntryInput {

    static func urlPathProvider(_ value: UpdateDomainEntryInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateInstanceMetadataOptionsInput {

    static func urlPathProvider(_ value: UpdateInstanceMetadataOptionsInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateLoadBalancerAttributeInput {

    static func urlPathProvider(_ value: UpdateLoadBalancerAttributeInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateRelationalDatabaseInput {

    static func urlPathProvider(_ value: UpdateRelationalDatabaseInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateRelationalDatabaseParametersInput {

    static func urlPathProvider(_ value: UpdateRelationalDatabaseParametersInput) -> Swift.String? {
        return "/"
    }
}

extension AllocateStaticIpInput {

    static func write(value: AllocateStaticIpInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["staticIpName"].write(value.staticIpName)
    }
}

extension AttachCertificateToDistributionInput {

    static func write(value: AttachCertificateToDistributionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["certificateName"].write(value.certificateName)
        try writer["distributionName"].write(value.distributionName)
    }
}

extension AttachDiskInput {

    static func write(value: AttachDiskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoMounting"].write(value.autoMounting)
        try writer["diskName"].write(value.diskName)
        try writer["diskPath"].write(value.diskPath)
        try writer["instanceName"].write(value.instanceName)
    }
}

extension AttachInstancesToLoadBalancerInput {

    static func write(value: AttachInstancesToLoadBalancerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceNames"].writeList(value.instanceNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["loadBalancerName"].write(value.loadBalancerName)
    }
}

extension AttachLoadBalancerTlsCertificateInput {

    static func write(value: AttachLoadBalancerTlsCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["certificateName"].write(value.certificateName)
        try writer["loadBalancerName"].write(value.loadBalancerName)
    }
}

extension AttachStaticIpInput {

    static func write(value: AttachStaticIpInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
        try writer["staticIpName"].write(value.staticIpName)
    }
}

extension CloseInstancePublicPortsInput {

    static func write(value: CloseInstancePublicPortsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
        try writer["portInfo"].write(value.portInfo, with: LightsailClientTypes.PortInfo.write(value:to:))
    }
}

extension CopySnapshotInput {

    static func write(value: CopySnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["restoreDate"].write(value.restoreDate)
        try writer["sourceRegion"].write(value.sourceRegion)
        try writer["sourceResourceName"].write(value.sourceResourceName)
        try writer["sourceSnapshotName"].write(value.sourceSnapshotName)
        try writer["targetSnapshotName"].write(value.targetSnapshotName)
        try writer["useLatestRestorableAutoSnapshot"].write(value.useLatestRestorableAutoSnapshot)
    }
}

extension CreateBucketInput {

    static func write(value: CreateBucketInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
        try writer["bundleId"].write(value.bundleId)
        try writer["enableObjectVersioning"].write(value.enableObjectVersioning)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateBucketAccessKeyInput {

    static func write(value: CreateBucketAccessKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
    }
}

extension CreateCertificateInput {

    static func write(value: CreateCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["certificateName"].write(value.certificateName)
        try writer["domainName"].write(value.domainName)
        try writer["subjectAlternativeNames"].writeList(value.subjectAlternativeNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateCloudFormationStackInput {

    static func write(value: CreateCloudFormationStackInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instances"].writeList(value.instances, memberWritingClosure: LightsailClientTypes.InstanceEntry.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateContactMethodInput {

    static func write(value: CreateContactMethodInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["contactEndpoint"].write(value.contactEndpoint)
        try writer["protocol"].write(value.`protocol`)
    }
}

extension CreateContainerServiceInput {

    static func write(value: CreateContainerServiceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deployment"].write(value.deployment, with: LightsailClientTypes.ContainerServiceDeploymentRequest.write(value:to:))
        try writer["power"].write(value.power)
        try writer["privateRegistryAccess"].write(value.privateRegistryAccess, with: LightsailClientTypes.PrivateRegistryAccessRequest.write(value:to:))
        try writer["publicDomainNames"].writeMap(value.publicDomainNames, valueWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["scale"].write(value.scale)
        try writer["serviceName"].write(value.serviceName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateContainerServiceDeploymentInput {

    static func write(value: CreateContainerServiceDeploymentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containers"].writeMap(value.containers, valueWritingClosure: LightsailClientTypes.Container.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["publicEndpoint"].write(value.publicEndpoint, with: LightsailClientTypes.EndpointRequest.write(value:to:))
    }
}

extension CreateContainerServiceRegistryLoginInput {

    static func write(value: CreateContainerServiceRegistryLoginInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension CreateDiskInput {

    static func write(value: CreateDiskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addOns"].writeList(value.addOns, memberWritingClosure: LightsailClientTypes.AddOnRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["availabilityZone"].write(value.availabilityZone)
        try writer["diskName"].write(value.diskName)
        try writer["sizeInGb"].write(value.sizeInGb)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDiskFromSnapshotInput {

    static func write(value: CreateDiskFromSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addOns"].writeList(value.addOns, memberWritingClosure: LightsailClientTypes.AddOnRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["availabilityZone"].write(value.availabilityZone)
        try writer["diskName"].write(value.diskName)
        try writer["diskSnapshotName"].write(value.diskSnapshotName)
        try writer["restoreDate"].write(value.restoreDate)
        try writer["sizeInGb"].write(value.sizeInGb)
        try writer["sourceDiskName"].write(value.sourceDiskName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["useLatestRestorableAutoSnapshot"].write(value.useLatestRestorableAutoSnapshot)
    }
}

extension CreateDiskSnapshotInput {

    static func write(value: CreateDiskSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["diskName"].write(value.diskName)
        try writer["diskSnapshotName"].write(value.diskSnapshotName)
        try writer["instanceName"].write(value.instanceName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDistributionInput {

    static func write(value: CreateDistributionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bundleId"].write(value.bundleId)
        try writer["cacheBehaviorSettings"].write(value.cacheBehaviorSettings, with: LightsailClientTypes.CacheSettings.write(value:to:))
        try writer["cacheBehaviors"].writeList(value.cacheBehaviors, memberWritingClosure: LightsailClientTypes.CacheBehaviorPerPath.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["certificateName"].write(value.certificateName)
        try writer["defaultCacheBehavior"].write(value.defaultCacheBehavior, with: LightsailClientTypes.CacheBehavior.write(value:to:))
        try writer["distributionName"].write(value.distributionName)
        try writer["ipAddressType"].write(value.ipAddressType)
        try writer["origin"].write(value.origin, with: LightsailClientTypes.InputOrigin.write(value:to:))
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["viewerMinimumTlsProtocolVersion"].write(value.viewerMinimumTlsProtocolVersion)
    }
}

extension CreateDomainInput {

    static func write(value: CreateDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["domainName"].write(value.domainName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDomainEntryInput {

    static func write(value: CreateDomainEntryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["domainEntry"].write(value.domainEntry, with: LightsailClientTypes.DomainEntry.write(value:to:))
        try writer["domainName"].write(value.domainName)
    }
}

extension CreateGUISessionAccessDetailsInput {

    static func write(value: CreateGUISessionAccessDetailsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceName"].write(value.resourceName)
    }
}

extension CreateInstancesInput {

    static func write(value: CreateInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addOns"].writeList(value.addOns, memberWritingClosure: LightsailClientTypes.AddOnRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["availabilityZone"].write(value.availabilityZone)
        try writer["blueprintId"].write(value.blueprintId)
        try writer["bundleId"].write(value.bundleId)
        try writer["customImageName"].write(value.customImageName)
        try writer["instanceNames"].writeList(value.instanceNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ipAddressType"].write(value.ipAddressType)
        try writer["keyPairName"].write(value.keyPairName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["userData"].write(value.userData)
    }
}

extension CreateInstancesFromSnapshotInput {

    static func write(value: CreateInstancesFromSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addOns"].writeList(value.addOns, memberWritingClosure: LightsailClientTypes.AddOnRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["attachedDiskMapping"].writeMap(value.attachedDiskMapping, valueWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: LightsailClientTypes.DiskMap.write(value:to:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["availabilityZone"].write(value.availabilityZone)
        try writer["bundleId"].write(value.bundleId)
        try writer["instanceNames"].writeList(value.instanceNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["instanceSnapshotName"].write(value.instanceSnapshotName)
        try writer["ipAddressType"].write(value.ipAddressType)
        try writer["keyPairName"].write(value.keyPairName)
        try writer["restoreDate"].write(value.restoreDate)
        try writer["sourceInstanceName"].write(value.sourceInstanceName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["useLatestRestorableAutoSnapshot"].write(value.useLatestRestorableAutoSnapshot)
        try writer["userData"].write(value.userData)
    }
}

extension CreateInstanceSnapshotInput {

    static func write(value: CreateInstanceSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
        try writer["instanceSnapshotName"].write(value.instanceSnapshotName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateKeyPairInput {

    static func write(value: CreateKeyPairInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["keyPairName"].write(value.keyPairName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateLoadBalancerInput {

    static func write(value: CreateLoadBalancerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["certificateAlternativeNames"].writeList(value.certificateAlternativeNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["certificateDomainName"].write(value.certificateDomainName)
        try writer["certificateName"].write(value.certificateName)
        try writer["healthCheckPath"].write(value.healthCheckPath)
        try writer["instancePort"].write(value.instancePort)
        try writer["ipAddressType"].write(value.ipAddressType)
        try writer["loadBalancerName"].write(value.loadBalancerName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tlsPolicyName"].write(value.tlsPolicyName)
    }
}

extension CreateLoadBalancerTlsCertificateInput {

    static func write(value: CreateLoadBalancerTlsCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["certificateAlternativeNames"].writeList(value.certificateAlternativeNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["certificateDomainName"].write(value.certificateDomainName)
        try writer["certificateName"].write(value.certificateName)
        try writer["loadBalancerName"].write(value.loadBalancerName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateRelationalDatabaseInput {

    static func write(value: CreateRelationalDatabaseInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["availabilityZone"].write(value.availabilityZone)
        try writer["masterDatabaseName"].write(value.masterDatabaseName)
        try writer["masterUserPassword"].write(value.masterUserPassword)
        try writer["masterUsername"].write(value.masterUsername)
        try writer["preferredBackupWindow"].write(value.preferredBackupWindow)
        try writer["preferredMaintenanceWindow"].write(value.preferredMaintenanceWindow)
        try writer["publiclyAccessible"].write(value.publiclyAccessible)
        try writer["relationalDatabaseBlueprintId"].write(value.relationalDatabaseBlueprintId)
        try writer["relationalDatabaseBundleId"].write(value.relationalDatabaseBundleId)
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateRelationalDatabaseFromSnapshotInput {

    static func write(value: CreateRelationalDatabaseFromSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["availabilityZone"].write(value.availabilityZone)
        try writer["publiclyAccessible"].write(value.publiclyAccessible)
        try writer["relationalDatabaseBundleId"].write(value.relationalDatabaseBundleId)
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
        try writer["relationalDatabaseSnapshotName"].write(value.relationalDatabaseSnapshotName)
        try writer["restoreTime"].writeTimestamp(value.restoreTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["sourceRelationalDatabaseName"].write(value.sourceRelationalDatabaseName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["useLatestRestorableTime"].write(value.useLatestRestorableTime)
    }
}

extension CreateRelationalDatabaseSnapshotInput {

    static func write(value: CreateRelationalDatabaseSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
        try writer["relationalDatabaseSnapshotName"].write(value.relationalDatabaseSnapshotName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteAlarmInput {

    static func write(value: DeleteAlarmInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alarmName"].write(value.alarmName)
    }
}

extension DeleteAutoSnapshotInput {

    static func write(value: DeleteAutoSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["date"].write(value.date)
        try writer["resourceName"].write(value.resourceName)
    }
}

extension DeleteBucketInput {

    static func write(value: DeleteBucketInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
        try writer["forceDelete"].write(value.forceDelete)
    }
}

extension DeleteBucketAccessKeyInput {

    static func write(value: DeleteBucketAccessKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessKeyId"].write(value.accessKeyId)
        try writer["bucketName"].write(value.bucketName)
    }
}

extension DeleteCertificateInput {

    static func write(value: DeleteCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["certificateName"].write(value.certificateName)
    }
}

extension DeleteContactMethodInput {

    static func write(value: DeleteContactMethodInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["protocol"].write(value.`protocol`)
    }
}

extension DeleteContainerImageInput {

    static func write(value: DeleteContainerImageInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DeleteContainerServiceInput {

    static func write(value: DeleteContainerServiceInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DeleteDiskInput {

    static func write(value: DeleteDiskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["diskName"].write(value.diskName)
        try writer["forceDeleteAddOns"].write(value.forceDeleteAddOns)
    }
}

extension DeleteDiskSnapshotInput {

    static func write(value: DeleteDiskSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["diskSnapshotName"].write(value.diskSnapshotName)
    }
}

extension DeleteDistributionInput {

    static func write(value: DeleteDistributionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["distributionName"].write(value.distributionName)
    }
}

extension DeleteDomainInput {

    static func write(value: DeleteDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["domainName"].write(value.domainName)
    }
}

extension DeleteDomainEntryInput {

    static func write(value: DeleteDomainEntryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["domainEntry"].write(value.domainEntry, with: LightsailClientTypes.DomainEntry.write(value:to:))
        try writer["domainName"].write(value.domainName)
    }
}

extension DeleteInstanceInput {

    static func write(value: DeleteInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["forceDeleteAddOns"].write(value.forceDeleteAddOns)
        try writer["instanceName"].write(value.instanceName)
    }
}

extension DeleteInstanceSnapshotInput {

    static func write(value: DeleteInstanceSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceSnapshotName"].write(value.instanceSnapshotName)
    }
}

extension DeleteKeyPairInput {

    static func write(value: DeleteKeyPairInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["expectedFingerprint"].write(value.expectedFingerprint)
        try writer["keyPairName"].write(value.keyPairName)
    }
}

extension DeleteKnownHostKeysInput {

    static func write(value: DeleteKnownHostKeysInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
    }
}

extension DeleteLoadBalancerInput {

    static func write(value: DeleteLoadBalancerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["loadBalancerName"].write(value.loadBalancerName)
    }
}

extension DeleteLoadBalancerTlsCertificateInput {

    static func write(value: DeleteLoadBalancerTlsCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["certificateName"].write(value.certificateName)
        try writer["force"].write(value.force)
        try writer["loadBalancerName"].write(value.loadBalancerName)
    }
}

extension DeleteRelationalDatabaseInput {

    static func write(value: DeleteRelationalDatabaseInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["finalRelationalDatabaseSnapshotName"].write(value.finalRelationalDatabaseSnapshotName)
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
        try writer["skipFinalSnapshot"].write(value.skipFinalSnapshot)
    }
}

extension DeleteRelationalDatabaseSnapshotInput {

    static func write(value: DeleteRelationalDatabaseSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["relationalDatabaseSnapshotName"].write(value.relationalDatabaseSnapshotName)
    }
}

extension DetachCertificateFromDistributionInput {

    static func write(value: DetachCertificateFromDistributionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["distributionName"].write(value.distributionName)
    }
}

extension DetachDiskInput {

    static func write(value: DetachDiskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["diskName"].write(value.diskName)
    }
}

extension DetachInstancesFromLoadBalancerInput {

    static func write(value: DetachInstancesFromLoadBalancerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceNames"].writeList(value.instanceNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["loadBalancerName"].write(value.loadBalancerName)
    }
}

extension DetachStaticIpInput {

    static func write(value: DetachStaticIpInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["staticIpName"].write(value.staticIpName)
    }
}

extension DisableAddOnInput {

    static func write(value: DisableAddOnInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addOnType"].write(value.addOnType)
        try writer["resourceName"].write(value.resourceName)
    }
}

extension DownloadDefaultKeyPairInput {

    static func write(value: DownloadDefaultKeyPairInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension EnableAddOnInput {

    static func write(value: EnableAddOnInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addOnRequest"].write(value.addOnRequest, with: LightsailClientTypes.AddOnRequest.write(value:to:))
        try writer["resourceName"].write(value.resourceName)
    }
}

extension ExportSnapshotInput {

    static func write(value: ExportSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sourceSnapshotName"].write(value.sourceSnapshotName)
    }
}

extension GetActiveNamesInput {

    static func write(value: GetActiveNamesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetAlarmsInput {

    static func write(value: GetAlarmsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alarmName"].write(value.alarmName)
        try writer["monitoredResourceName"].write(value.monitoredResourceName)
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetAutoSnapshotsInput {

    static func write(value: GetAutoSnapshotsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceName"].write(value.resourceName)
    }
}

extension GetBlueprintsInput {

    static func write(value: GetBlueprintsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appCategory"].write(value.appCategory)
        try writer["includeInactive"].write(value.includeInactive)
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetBucketAccessKeysInput {

    static func write(value: GetBucketAccessKeysInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
    }
}

extension GetBucketBundlesInput {

    static func write(value: GetBucketBundlesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["includeInactive"].write(value.includeInactive)
    }
}

extension GetBucketMetricDataInput {

    static func write(value: GetBucketMetricDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
        try writer["endTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["metricName"].write(value.metricName)
        try writer["period"].write(value.period)
        try writer["startTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["statistics"].writeList(value.statistics, memberWritingClosure: SmithyReadWrite.WritingClosureBox<LightsailClientTypes.MetricStatistic>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["unit"].write(value.unit)
    }
}

extension GetBucketsInput {

    static func write(value: GetBucketsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
        try writer["includeConnectedResources"].write(value.includeConnectedResources)
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetBundlesInput {

    static func write(value: GetBundlesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appCategory"].write(value.appCategory)
        try writer["includeInactive"].write(value.includeInactive)
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetCertificatesInput {

    static func write(value: GetCertificatesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["certificateName"].write(value.certificateName)
        try writer["certificateStatuses"].writeList(value.certificateStatuses, memberWritingClosure: SmithyReadWrite.WritingClosureBox<LightsailClientTypes.CertificateStatus>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includeCertificateDetails"].write(value.includeCertificateDetails)
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetCloudFormationStackRecordsInput {

    static func write(value: GetCloudFormationStackRecordsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetContactMethodsInput {

    static func write(value: GetContactMethodsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["protocols"].writeList(value.protocols, memberWritingClosure: SmithyReadWrite.WritingClosureBox<LightsailClientTypes.ContactProtocol>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetContainerAPIMetadataInput {

    static func write(value: GetContainerAPIMetadataInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetContainerImagesInput {

    static func write(value: GetContainerImagesInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetContainerLogInput {

    static func write(value: GetContainerLogInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetContainerServiceDeploymentsInput {

    static func write(value: GetContainerServiceDeploymentsInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetContainerServiceMetricDataInput {

    static func write(value: GetContainerServiceMetricDataInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetContainerServicePowersInput {

    static func write(value: GetContainerServicePowersInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetContainerServicesInput {

    static func write(value: GetContainerServicesInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetCostEstimateInput {

    static func write(value: GetCostEstimateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["resourceName"].write(value.resourceName)
        try writer["startTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension GetDiskInput {

    static func write(value: GetDiskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["diskName"].write(value.diskName)
    }
}

extension GetDisksInput {

    static func write(value: GetDisksInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetDiskSnapshotInput {

    static func write(value: GetDiskSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["diskSnapshotName"].write(value.diskSnapshotName)
    }
}

extension GetDiskSnapshotsInput {

    static func write(value: GetDiskSnapshotsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetDistributionBundlesInput {

    static func write(value: GetDistributionBundlesInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetDistributionLatestCacheResetInput {

    static func write(value: GetDistributionLatestCacheResetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["distributionName"].write(value.distributionName)
    }
}

extension GetDistributionMetricDataInput {

    static func write(value: GetDistributionMetricDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["distributionName"].write(value.distributionName)
        try writer["endTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["metricName"].write(value.metricName)
        try writer["period"].write(value.period)
        try writer["startTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["statistics"].writeList(value.statistics, memberWritingClosure: SmithyReadWrite.WritingClosureBox<LightsailClientTypes.MetricStatistic>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["unit"].write(value.unit)
    }
}

extension GetDistributionsInput {

    static func write(value: GetDistributionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["distributionName"].write(value.distributionName)
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetDomainInput {

    static func write(value: GetDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["domainName"].write(value.domainName)
    }
}

extension GetDomainsInput {

    static func write(value: GetDomainsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetExportSnapshotRecordsInput {

    static func write(value: GetExportSnapshotRecordsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetInstanceInput {

    static func write(value: GetInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
    }
}

extension GetInstanceAccessDetailsInput {

    static func write(value: GetInstanceAccessDetailsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
        try writer["protocol"].write(value.`protocol`)
    }
}

extension GetInstanceMetricDataInput {

    static func write(value: GetInstanceMetricDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["instanceName"].write(value.instanceName)
        try writer["metricName"].write(value.metricName)
        try writer["period"].write(value.period)
        try writer["startTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["statistics"].writeList(value.statistics, memberWritingClosure: SmithyReadWrite.WritingClosureBox<LightsailClientTypes.MetricStatistic>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["unit"].write(value.unit)
    }
}

extension GetInstancePortStatesInput {

    static func write(value: GetInstancePortStatesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
    }
}

extension GetInstancesInput {

    static func write(value: GetInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetInstanceSnapshotInput {

    static func write(value: GetInstanceSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceSnapshotName"].write(value.instanceSnapshotName)
    }
}

extension GetInstanceSnapshotsInput {

    static func write(value: GetInstanceSnapshotsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetInstanceStateInput {

    static func write(value: GetInstanceStateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
    }
}

extension GetKeyPairInput {

    static func write(value: GetKeyPairInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["keyPairName"].write(value.keyPairName)
    }
}

extension GetKeyPairsInput {

    static func write(value: GetKeyPairsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["includeDefaultKeyPair"].write(value.includeDefaultKeyPair)
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetLoadBalancerInput {

    static func write(value: GetLoadBalancerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["loadBalancerName"].write(value.loadBalancerName)
    }
}

extension GetLoadBalancerMetricDataInput {

    static func write(value: GetLoadBalancerMetricDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["loadBalancerName"].write(value.loadBalancerName)
        try writer["metricName"].write(value.metricName)
        try writer["period"].write(value.period)
        try writer["startTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["statistics"].writeList(value.statistics, memberWritingClosure: SmithyReadWrite.WritingClosureBox<LightsailClientTypes.MetricStatistic>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["unit"].write(value.unit)
    }
}

extension GetLoadBalancersInput {

    static func write(value: GetLoadBalancersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetLoadBalancerTlsCertificatesInput {

    static func write(value: GetLoadBalancerTlsCertificatesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["loadBalancerName"].write(value.loadBalancerName)
    }
}

extension GetLoadBalancerTlsPoliciesInput {

    static func write(value: GetLoadBalancerTlsPoliciesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetOperationInput {

    static func write(value: GetOperationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["operationId"].write(value.operationId)
    }
}

extension GetOperationsInput {

    static func write(value: GetOperationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetOperationsForResourceInput {

    static func write(value: GetOperationsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
        try writer["resourceName"].write(value.resourceName)
    }
}

extension GetRegionsInput {

    static func write(value: GetRegionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["includeAvailabilityZones"].write(value.includeAvailabilityZones)
        try writer["includeRelationalDatabaseAvailabilityZones"].write(value.includeRelationalDatabaseAvailabilityZones)
    }
}

extension GetRelationalDatabaseInput {

    static func write(value: GetRelationalDatabaseInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
    }
}

extension GetRelationalDatabaseBlueprintsInput {

    static func write(value: GetRelationalDatabaseBlueprintsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetRelationalDatabaseBundlesInput {

    static func write(value: GetRelationalDatabaseBundlesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["includeInactive"].write(value.includeInactive)
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetRelationalDatabaseEventsInput {

    static func write(value: GetRelationalDatabaseEventsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["durationInMinutes"].write(value.durationInMinutes)
        try writer["pageToken"].write(value.pageToken)
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
    }
}

extension GetRelationalDatabaseLogEventsInput {

    static func write(value: GetRelationalDatabaseLogEventsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["logStreamName"].write(value.logStreamName)
        try writer["pageToken"].write(value.pageToken)
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
        try writer["startFromHead"].write(value.startFromHead)
        try writer["startTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension GetRelationalDatabaseLogStreamsInput {

    static func write(value: GetRelationalDatabaseLogStreamsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
    }
}

extension GetRelationalDatabaseMasterUserPasswordInput {

    static func write(value: GetRelationalDatabaseMasterUserPasswordInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["passwordVersion"].write(value.passwordVersion)
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
    }
}

extension GetRelationalDatabaseMetricDataInput {

    static func write(value: GetRelationalDatabaseMetricDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["metricName"].write(value.metricName)
        try writer["period"].write(value.period)
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
        try writer["startTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["statistics"].writeList(value.statistics, memberWritingClosure: SmithyReadWrite.WritingClosureBox<LightsailClientTypes.MetricStatistic>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["unit"].write(value.unit)
    }
}

extension GetRelationalDatabaseParametersInput {

    static func write(value: GetRelationalDatabaseParametersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
    }
}

extension GetRelationalDatabasesInput {

    static func write(value: GetRelationalDatabasesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetRelationalDatabaseSnapshotInput {

    static func write(value: GetRelationalDatabaseSnapshotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["relationalDatabaseSnapshotName"].write(value.relationalDatabaseSnapshotName)
    }
}

extension GetRelationalDatabaseSnapshotsInput {

    static func write(value: GetRelationalDatabaseSnapshotsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension GetSetupHistoryInput {

    static func write(value: GetSetupHistoryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
        try writer["resourceName"].write(value.resourceName)
    }
}

extension GetStaticIpInput {

    static func write(value: GetStaticIpInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["staticIpName"].write(value.staticIpName)
    }
}

extension GetStaticIpsInput {

    static func write(value: GetStaticIpsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pageToken"].write(value.pageToken)
    }
}

extension ImportKeyPairInput {

    static func write(value: ImportKeyPairInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["keyPairName"].write(value.keyPairName)
        try writer["publicKeyBase64"].write(value.publicKeyBase64)
    }
}

extension IsVpcPeeredInput {

    static func write(value: IsVpcPeeredInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension OpenInstancePublicPortsInput {

    static func write(value: OpenInstancePublicPortsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
        try writer["portInfo"].write(value.portInfo, with: LightsailClientTypes.PortInfo.write(value:to:))
    }
}

extension PeerVpcInput {

    static func write(value: PeerVpcInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension PutAlarmInput {

    static func write(value: PutAlarmInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alarmName"].write(value.alarmName)
        try writer["comparisonOperator"].write(value.comparisonOperator)
        try writer["contactProtocols"].writeList(value.contactProtocols, memberWritingClosure: SmithyReadWrite.WritingClosureBox<LightsailClientTypes.ContactProtocol>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["datapointsToAlarm"].write(value.datapointsToAlarm)
        try writer["evaluationPeriods"].write(value.evaluationPeriods)
        try writer["metricName"].write(value.metricName)
        try writer["monitoredResourceName"].write(value.monitoredResourceName)
        try writer["notificationEnabled"].write(value.notificationEnabled)
        try writer["notificationTriggers"].writeList(value.notificationTriggers, memberWritingClosure: SmithyReadWrite.WritingClosureBox<LightsailClientTypes.AlarmState>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["threshold"].write(value.threshold)
        try writer["treatMissingData"].write(value.treatMissingData)
    }
}

extension PutInstancePublicPortsInput {

    static func write(value: PutInstancePublicPortsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
        try writer["portInfos"].writeList(value.portInfos, memberWritingClosure: LightsailClientTypes.PortInfo.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RebootInstanceInput {

    static func write(value: RebootInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
    }
}

extension RebootRelationalDatabaseInput {

    static func write(value: RebootRelationalDatabaseInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
    }
}

extension RegisterContainerImageInput {

    static func write(value: RegisterContainerImageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["digest"].write(value.digest)
        try writer["label"].write(value.label)
    }
}

extension ReleaseStaticIpInput {

    static func write(value: ReleaseStaticIpInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["staticIpName"].write(value.staticIpName)
    }
}

extension ResetDistributionCacheInput {

    static func write(value: ResetDistributionCacheInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["distributionName"].write(value.distributionName)
    }
}

extension SendContactMethodVerificationInput {

    static func write(value: SendContactMethodVerificationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["protocol"].write(value.`protocol`)
    }
}

extension SetIpAddressTypeInput {

    static func write(value: SetIpAddressTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["acceptBundleUpdate"].write(value.acceptBundleUpdate)
        try writer["ipAddressType"].write(value.ipAddressType)
        try writer["resourceName"].write(value.resourceName)
        try writer["resourceType"].write(value.resourceType)
    }
}

extension SetResourceAccessForBucketInput {

    static func write(value: SetResourceAccessForBucketInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["access"].write(value.access)
        try writer["bucketName"].write(value.bucketName)
        try writer["resourceName"].write(value.resourceName)
    }
}

extension SetupInstanceHttpsInput {

    static func write(value: SetupInstanceHttpsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["certificateProvider"].write(value.certificateProvider)
        try writer["domainNames"].writeList(value.domainNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["emailAddress"].write(value.emailAddress)
        try writer["instanceName"].write(value.instanceName)
    }
}

extension StartGUISessionInput {

    static func write(value: StartGUISessionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceName"].write(value.resourceName)
    }
}

extension StartInstanceInput {

    static func write(value: StartInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
    }
}

extension StartRelationalDatabaseInput {

    static func write(value: StartRelationalDatabaseInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
    }
}

extension StopGUISessionInput {

    static func write(value: StopGUISessionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceName"].write(value.resourceName)
    }
}

extension StopInstanceInput {

    static func write(value: StopInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["force"].write(value.force)
        try writer["instanceName"].write(value.instanceName)
    }
}

extension StopRelationalDatabaseInput {

    static func write(value: StopRelationalDatabaseInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
        try writer["relationalDatabaseSnapshotName"].write(value.relationalDatabaseSnapshotName)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["resourceName"].write(value.resourceName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LightsailClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TestAlarmInput {

    static func write(value: TestAlarmInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alarmName"].write(value.alarmName)
        try writer["state"].write(value.state)
    }
}

extension UnpeerVpcInput {

    static func write(value: UnpeerVpcInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["resourceName"].write(value.resourceName)
        try writer["tagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateBucketInput {

    static func write(value: UpdateBucketInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessLogConfig"].write(value.accessLogConfig, with: LightsailClientTypes.BucketAccessLogConfig.write(value:to:))
        try writer["accessRules"].write(value.accessRules, with: LightsailClientTypes.AccessRules.write(value:to:))
        try writer["bucketName"].write(value.bucketName)
        try writer["readonlyAccessAccounts"].writeList(value.readonlyAccessAccounts, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["versioning"].write(value.versioning)
    }
}

extension UpdateBucketBundleInput {

    static func write(value: UpdateBucketBundleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
        try writer["bundleId"].write(value.bundleId)
    }
}

extension UpdateContainerServiceInput {

    static func write(value: UpdateContainerServiceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["isDisabled"].write(value.isDisabled)
        try writer["power"].write(value.power)
        try writer["privateRegistryAccess"].write(value.privateRegistryAccess, with: LightsailClientTypes.PrivateRegistryAccessRequest.write(value:to:))
        try writer["publicDomainNames"].writeMap(value.publicDomainNames, valueWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["scale"].write(value.scale)
    }
}

extension UpdateDistributionInput {

    static func write(value: UpdateDistributionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cacheBehaviorSettings"].write(value.cacheBehaviorSettings, with: LightsailClientTypes.CacheSettings.write(value:to:))
        try writer["cacheBehaviors"].writeList(value.cacheBehaviors, memberWritingClosure: LightsailClientTypes.CacheBehaviorPerPath.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["certificateName"].write(value.certificateName)
        try writer["defaultCacheBehavior"].write(value.defaultCacheBehavior, with: LightsailClientTypes.CacheBehavior.write(value:to:))
        try writer["distributionName"].write(value.distributionName)
        try writer["isEnabled"].write(value.isEnabled)
        try writer["origin"].write(value.origin, with: LightsailClientTypes.InputOrigin.write(value:to:))
        try writer["useDefaultCertificate"].write(value.useDefaultCertificate)
        try writer["viewerMinimumTlsProtocolVersion"].write(value.viewerMinimumTlsProtocolVersion)
    }
}

extension UpdateDistributionBundleInput {

    static func write(value: UpdateDistributionBundleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bundleId"].write(value.bundleId)
        try writer["distributionName"].write(value.distributionName)
    }
}

extension UpdateDomainEntryInput {

    static func write(value: UpdateDomainEntryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["domainEntry"].write(value.domainEntry, with: LightsailClientTypes.DomainEntry.write(value:to:))
        try writer["domainName"].write(value.domainName)
    }
}

extension UpdateInstanceMetadataOptionsInput {

    static func write(value: UpdateInstanceMetadataOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["httpEndpoint"].write(value.httpEndpoint)
        try writer["httpProtocolIpv6"].write(value.httpProtocolIpv6)
        try writer["httpPutResponseHopLimit"].write(value.httpPutResponseHopLimit)
        try writer["httpTokens"].write(value.httpTokens)
        try writer["instanceName"].write(value.instanceName)
    }
}

extension UpdateLoadBalancerAttributeInput {

    static func write(value: UpdateLoadBalancerAttributeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributeName"].write(value.attributeName)
        try writer["attributeValue"].write(value.attributeValue)
        try writer["loadBalancerName"].write(value.loadBalancerName)
    }
}

extension UpdateRelationalDatabaseInput {

    static func write(value: UpdateRelationalDatabaseInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applyImmediately"].write(value.applyImmediately)
        try writer["caCertificateIdentifier"].write(value.caCertificateIdentifier)
        try writer["disableBackupRetention"].write(value.disableBackupRetention)
        try writer["enableBackupRetention"].write(value.enableBackupRetention)
        try writer["masterUserPassword"].write(value.masterUserPassword)
        try writer["preferredBackupWindow"].write(value.preferredBackupWindow)
        try writer["preferredMaintenanceWindow"].write(value.preferredMaintenanceWindow)
        try writer["publiclyAccessible"].write(value.publiclyAccessible)
        try writer["relationalDatabaseBlueprintId"].write(value.relationalDatabaseBlueprintId)
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
        try writer["rotateMasterUserPassword"].write(value.rotateMasterUserPassword)
    }
}

extension UpdateRelationalDatabaseParametersInput {

    static func write(value: UpdateRelationalDatabaseParametersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["parameters"].writeList(value.parameters, memberWritingClosure: LightsailClientTypes.RelationalDatabaseParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["relationalDatabaseName"].write(value.relationalDatabaseName)
    }
}

extension AllocateStaticIpOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AllocateStaticIpOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AllocateStaticIpOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AttachCertificateToDistributionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AttachCertificateToDistributionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AttachCertificateToDistributionOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension AttachDiskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AttachDiskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AttachDiskOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AttachInstancesToLoadBalancerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AttachInstancesToLoadBalancerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AttachInstancesToLoadBalancerOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AttachLoadBalancerTlsCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AttachLoadBalancerTlsCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AttachLoadBalancerTlsCertificateOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AttachStaticIpOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AttachStaticIpOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AttachStaticIpOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CloseInstancePublicPortsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CloseInstancePublicPortsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CloseInstancePublicPortsOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension CopySnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CopySnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CopySnapshotOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateBucketOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBucketOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBucketOutput()
        value.bucket = try reader["bucket"].readIfPresent(with: LightsailClientTypes.Bucket.read(from:))
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateBucketAccessKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBucketAccessKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBucketAccessKeyOutput()
        value.accessKey = try reader["accessKey"].readIfPresent(with: LightsailClientTypes.AccessKey.read(from:))
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCertificateOutput()
        value.certificate = try reader["certificate"].readIfPresent(with: LightsailClientTypes.CertificateSummary.read(from:))
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateCloudFormationStackOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCloudFormationStackOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCloudFormationStackOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateContactMethodOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateContactMethodOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateContactMethodOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateContainerServiceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateContainerServiceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateContainerServiceOutput()
        value.containerService = try reader["containerService"].readIfPresent(with: LightsailClientTypes.ContainerService.read(from:))
        return value
    }
}

extension CreateContainerServiceDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateContainerServiceDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateContainerServiceDeploymentOutput()
        value.containerService = try reader["containerService"].readIfPresent(with: LightsailClientTypes.ContainerService.read(from:))
        return value
    }
}

extension CreateContainerServiceRegistryLoginOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateContainerServiceRegistryLoginOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateContainerServiceRegistryLoginOutput()
        value.registryLogin = try reader["registryLogin"].readIfPresent(with: LightsailClientTypes.ContainerServiceRegistryLogin.read(from:))
        return value
    }
}

extension CreateDiskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDiskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDiskOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateDiskFromSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDiskFromSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDiskFromSnapshotOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateDiskSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDiskSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDiskSnapshotOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateDistributionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDistributionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDistributionOutput()
        value.distribution = try reader["distribution"].readIfPresent(with: LightsailClientTypes.LightsailDistribution.read(from:))
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension CreateDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDomainOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension CreateDomainEntryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDomainEntryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDomainEntryOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension CreateGUISessionAccessDetailsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGUISessionAccessDetailsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateGUISessionAccessDetailsOutput()
        value.failureReason = try reader["failureReason"].readIfPresent()
        value.percentageComplete = try reader["percentageComplete"].readIfPresent()
        value.resourceName = try reader["resourceName"].readIfPresent()
        value.sessions = try reader["sessions"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Session.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension CreateInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateInstancesOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateInstancesFromSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateInstancesFromSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateInstancesFromSnapshotOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateInstanceSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateInstanceSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateInstanceSnapshotOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateKeyPairOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateKeyPairOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateKeyPairOutput()
        value.keyPair = try reader["keyPair"].readIfPresent(with: LightsailClientTypes.KeyPair.read(from:))
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        value.privateKeyBase64 = try reader["privateKeyBase64"].readIfPresent()
        value.publicKeyBase64 = try reader["publicKeyBase64"].readIfPresent()
        return value
    }
}

extension CreateLoadBalancerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateLoadBalancerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateLoadBalancerOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateLoadBalancerTlsCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateLoadBalancerTlsCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateLoadBalancerTlsCertificateOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateRelationalDatabaseOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRelationalDatabaseOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRelationalDatabaseOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateRelationalDatabaseFromSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRelationalDatabaseFromSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRelationalDatabaseFromSnapshotOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateRelationalDatabaseSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRelationalDatabaseSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRelationalDatabaseSnapshotOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteAlarmOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAlarmOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteAlarmOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteAutoSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAutoSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteAutoSnapshotOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteBucketOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBucketOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteBucketAccessKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketAccessKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBucketAccessKeyOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteCertificateOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteContactMethodOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteContactMethodOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteContactMethodOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteContainerImageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteContainerImageOutput {
        return DeleteContainerImageOutput()
    }
}

extension DeleteContainerServiceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteContainerServiceOutput {
        return DeleteContainerServiceOutput()
    }
}

extension DeleteDiskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDiskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteDiskOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteDiskSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDiskSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteDiskSnapshotOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteDistributionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDistributionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteDistributionOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension DeleteDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteDomainOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension DeleteDomainEntryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDomainEntryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteDomainEntryOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension DeleteInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteInstanceOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteInstanceSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteInstanceSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteInstanceSnapshotOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteKeyPairOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteKeyPairOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteKeyPairOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension DeleteKnownHostKeysOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteKnownHostKeysOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteKnownHostKeysOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteLoadBalancerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLoadBalancerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteLoadBalancerOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteLoadBalancerTlsCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLoadBalancerTlsCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteLoadBalancerTlsCertificateOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteRelationalDatabaseOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRelationalDatabaseOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteRelationalDatabaseOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteRelationalDatabaseSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRelationalDatabaseSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteRelationalDatabaseSnapshotOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DetachCertificateFromDistributionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetachCertificateFromDistributionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetachCertificateFromDistributionOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension DetachDiskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetachDiskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetachDiskOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DetachInstancesFromLoadBalancerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetachInstancesFromLoadBalancerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetachInstancesFromLoadBalancerOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DetachStaticIpOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetachStaticIpOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetachStaticIpOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DisableAddOnOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableAddOnOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisableAddOnOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DownloadDefaultKeyPairOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DownloadDefaultKeyPairOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DownloadDefaultKeyPairOutput()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.privateKeyBase64 = try reader["privateKeyBase64"].readIfPresent()
        value.publicKeyBase64 = try reader["publicKeyBase64"].readIfPresent()
        return value
    }
}

extension EnableAddOnOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableAddOnOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = EnableAddOnOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ExportSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportSnapshotOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetActiveNamesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetActiveNamesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetActiveNamesOutput()
        value.activeNames = try reader["activeNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetAlarmsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAlarmsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAlarmsOutput()
        value.alarms = try reader["alarms"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Alarm.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetAutoSnapshotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAutoSnapshotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAutoSnapshotsOutput()
        value.autoSnapshots = try reader["autoSnapshots"].readListIfPresent(memberReadingClosure: LightsailClientTypes.AutoSnapshotDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.resourceName = try reader["resourceName"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        return value
    }
}

extension GetBlueprintsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBlueprintsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBlueprintsOutput()
        value.blueprints = try reader["blueprints"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Blueprint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetBucketAccessKeysOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketAccessKeysOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketAccessKeysOutput()
        value.accessKeys = try reader["accessKeys"].readListIfPresent(memberReadingClosure: LightsailClientTypes.AccessKey.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetBucketBundlesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketBundlesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketBundlesOutput()
        value.bundles = try reader["bundles"].readListIfPresent(memberReadingClosure: LightsailClientTypes.BucketBundle.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetBucketMetricDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketMetricDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketMetricDataOutput()
        value.metricData = try reader["metricData"].readListIfPresent(memberReadingClosure: LightsailClientTypes.MetricDatapoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricName = try reader["metricName"].readIfPresent()
        return value
    }
}

extension GetBucketsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketsOutput()
        value.accountLevelBpaSync = try reader["accountLevelBpaSync"].readIfPresent(with: LightsailClientTypes.AccountLevelBpaSync.read(from:))
        value.buckets = try reader["buckets"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Bucket.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetBundlesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBundlesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBundlesOutput()
        value.bundles = try reader["bundles"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Bundle.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetCertificatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCertificatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCertificatesOutput()
        value.certificates = try reader["certificates"].readListIfPresent(memberReadingClosure: LightsailClientTypes.CertificateSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetCloudFormationStackRecordsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCloudFormationStackRecordsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCloudFormationStackRecordsOutput()
        value.cloudFormationStackRecords = try reader["cloudFormationStackRecords"].readListIfPresent(memberReadingClosure: LightsailClientTypes.CloudFormationStackRecord.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetContactMethodsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetContactMethodsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetContactMethodsOutput()
        value.contactMethods = try reader["contactMethods"].readListIfPresent(memberReadingClosure: LightsailClientTypes.ContactMethod.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetContainerAPIMetadataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetContainerAPIMetadataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetContainerAPIMetadataOutput()
        value.metadata = try reader["metadata"].readListIfPresent(memberReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetContainerImagesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetContainerImagesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetContainerImagesOutput()
        value.containerImages = try reader["containerImages"].readListIfPresent(memberReadingClosure: LightsailClientTypes.ContainerImage.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetContainerLogOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetContainerLogOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetContainerLogOutput()
        value.logEvents = try reader["logEvents"].readListIfPresent(memberReadingClosure: LightsailClientTypes.ContainerServiceLogEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetContainerServiceDeploymentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetContainerServiceDeploymentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetContainerServiceDeploymentsOutput()
        value.deployments = try reader["deployments"].readListIfPresent(memberReadingClosure: LightsailClientTypes.ContainerServiceDeployment.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetContainerServiceMetricDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetContainerServiceMetricDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetContainerServiceMetricDataOutput()
        value.metricData = try reader["metricData"].readListIfPresent(memberReadingClosure: LightsailClientTypes.MetricDatapoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricName = try reader["metricName"].readIfPresent()
        return value
    }
}

extension GetContainerServicePowersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetContainerServicePowersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetContainerServicePowersOutput()
        value.powers = try reader["powers"].readListIfPresent(memberReadingClosure: LightsailClientTypes.ContainerServicePower.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetContainerServicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetContainerServicesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetContainerServicesOutput()
        value.containerServices = try reader["containerServices"].readListIfPresent(memberReadingClosure: LightsailClientTypes.ContainerService.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetCostEstimateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCostEstimateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCostEstimateOutput()
        value.resourcesBudgetEstimate = try reader["resourcesBudgetEstimate"].readListIfPresent(memberReadingClosure: LightsailClientTypes.ResourceBudgetEstimate.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetDiskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDiskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDiskOutput()
        value.disk = try reader["disk"].readIfPresent(with: LightsailClientTypes.Disk.read(from:))
        return value
    }
}

extension GetDisksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDisksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDisksOutput()
        value.disks = try reader["disks"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Disk.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetDiskSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDiskSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDiskSnapshotOutput()
        value.diskSnapshot = try reader["diskSnapshot"].readIfPresent(with: LightsailClientTypes.DiskSnapshot.read(from:))
        return value
    }
}

extension GetDiskSnapshotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDiskSnapshotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDiskSnapshotsOutput()
        value.diskSnapshots = try reader["diskSnapshots"].readListIfPresent(memberReadingClosure: LightsailClientTypes.DiskSnapshot.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetDistributionBundlesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDistributionBundlesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDistributionBundlesOutput()
        value.bundles = try reader["bundles"].readListIfPresent(memberReadingClosure: LightsailClientTypes.DistributionBundle.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetDistributionLatestCacheResetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDistributionLatestCacheResetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDistributionLatestCacheResetOutput()
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension GetDistributionMetricDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDistributionMetricDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDistributionMetricDataOutput()
        value.metricData = try reader["metricData"].readListIfPresent(memberReadingClosure: LightsailClientTypes.MetricDatapoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricName = try reader["metricName"].readIfPresent()
        return value
    }
}

extension GetDistributionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDistributionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDistributionsOutput()
        value.distributions = try reader["distributions"].readListIfPresent(memberReadingClosure: LightsailClientTypes.LightsailDistribution.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDomainOutput()
        value.domain = try reader["domain"].readIfPresent(with: LightsailClientTypes.Domain.read(from:))
        return value
    }
}

extension GetDomainsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDomainsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDomainsOutput()
        value.domains = try reader["domains"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Domain.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetExportSnapshotRecordsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetExportSnapshotRecordsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetExportSnapshotRecordsOutput()
        value.exportSnapshotRecords = try reader["exportSnapshotRecords"].readListIfPresent(memberReadingClosure: LightsailClientTypes.ExportSnapshotRecord.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetInstanceOutput()
        value.instance = try reader["instance"].readIfPresent(with: LightsailClientTypes.Instance.read(from:))
        return value
    }
}

extension GetInstanceAccessDetailsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetInstanceAccessDetailsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetInstanceAccessDetailsOutput()
        value.accessDetails = try reader["accessDetails"].readIfPresent(with: LightsailClientTypes.InstanceAccessDetails.read(from:))
        return value
    }
}

extension GetInstanceMetricDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetInstanceMetricDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetInstanceMetricDataOutput()
        value.metricData = try reader["metricData"].readListIfPresent(memberReadingClosure: LightsailClientTypes.MetricDatapoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricName = try reader["metricName"].readIfPresent()
        return value
    }
}

extension GetInstancePortStatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetInstancePortStatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetInstancePortStatesOutput()
        value.portStates = try reader["portStates"].readListIfPresent(memberReadingClosure: LightsailClientTypes.InstancePortState.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetInstancesOutput()
        value.instances = try reader["instances"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Instance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetInstanceSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetInstanceSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetInstanceSnapshotOutput()
        value.instanceSnapshot = try reader["instanceSnapshot"].readIfPresent(with: LightsailClientTypes.InstanceSnapshot.read(from:))
        return value
    }
}

extension GetInstanceSnapshotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetInstanceSnapshotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetInstanceSnapshotsOutput()
        value.instanceSnapshots = try reader["instanceSnapshots"].readListIfPresent(memberReadingClosure: LightsailClientTypes.InstanceSnapshot.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetInstanceStateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetInstanceStateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetInstanceStateOutput()
        value.state = try reader["state"].readIfPresent(with: LightsailClientTypes.InstanceState.read(from:))
        return value
    }
}

extension GetKeyPairOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetKeyPairOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetKeyPairOutput()
        value.keyPair = try reader["keyPair"].readIfPresent(with: LightsailClientTypes.KeyPair.read(from:))
        return value
    }
}

extension GetKeyPairsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetKeyPairsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetKeyPairsOutput()
        value.keyPairs = try reader["keyPairs"].readListIfPresent(memberReadingClosure: LightsailClientTypes.KeyPair.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetLoadBalancerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLoadBalancerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLoadBalancerOutput()
        value.loadBalancer = try reader["loadBalancer"].readIfPresent(with: LightsailClientTypes.LoadBalancer.read(from:))
        return value
    }
}

extension GetLoadBalancerMetricDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLoadBalancerMetricDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLoadBalancerMetricDataOutput()
        value.metricData = try reader["metricData"].readListIfPresent(memberReadingClosure: LightsailClientTypes.MetricDatapoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricName = try reader["metricName"].readIfPresent()
        return value
    }
}

extension GetLoadBalancersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLoadBalancersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLoadBalancersOutput()
        value.loadBalancers = try reader["loadBalancers"].readListIfPresent(memberReadingClosure: LightsailClientTypes.LoadBalancer.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetLoadBalancerTlsCertificatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLoadBalancerTlsCertificatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLoadBalancerTlsCertificatesOutput()
        value.tlsCertificates = try reader["tlsCertificates"].readListIfPresent(memberReadingClosure: LightsailClientTypes.LoadBalancerTlsCertificate.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetLoadBalancerTlsPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLoadBalancerTlsPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLoadBalancerTlsPoliciesOutput()
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        value.tlsPolicies = try reader["tlsPolicies"].readListIfPresent(memberReadingClosure: LightsailClientTypes.LoadBalancerTlsPolicy.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetOperationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetOperationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetOperationOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension GetOperationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetOperationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetOperationsOutput()
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetOperationsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetOperationsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetOperationsForResourceOutput()
        value.nextPageCount = try reader["nextPageCount"].readIfPresent()
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetRegionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRegionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRegionsOutput()
        value.regions = try reader["regions"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Region.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetRelationalDatabaseOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRelationalDatabaseOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRelationalDatabaseOutput()
        value.relationalDatabase = try reader["relationalDatabase"].readIfPresent(with: LightsailClientTypes.RelationalDatabase.read(from:))
        return value
    }
}

extension GetRelationalDatabaseBlueprintsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRelationalDatabaseBlueprintsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRelationalDatabaseBlueprintsOutput()
        value.blueprints = try reader["blueprints"].readListIfPresent(memberReadingClosure: LightsailClientTypes.RelationalDatabaseBlueprint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetRelationalDatabaseBundlesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRelationalDatabaseBundlesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRelationalDatabaseBundlesOutput()
        value.bundles = try reader["bundles"].readListIfPresent(memberReadingClosure: LightsailClientTypes.RelationalDatabaseBundle.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        return value
    }
}

extension GetRelationalDatabaseEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRelationalDatabaseEventsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRelationalDatabaseEventsOutput()
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        value.relationalDatabaseEvents = try reader["relationalDatabaseEvents"].readListIfPresent(memberReadingClosure: LightsailClientTypes.RelationalDatabaseEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetRelationalDatabaseLogEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRelationalDatabaseLogEventsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRelationalDatabaseLogEventsOutput()
        value.nextBackwardToken = try reader["nextBackwardToken"].readIfPresent()
        value.nextForwardToken = try reader["nextForwardToken"].readIfPresent()
        value.resourceLogEvents = try reader["resourceLogEvents"].readListIfPresent(memberReadingClosure: LightsailClientTypes.LogEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetRelationalDatabaseLogStreamsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRelationalDatabaseLogStreamsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRelationalDatabaseLogStreamsOutput()
        value.logStreams = try reader["logStreams"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetRelationalDatabaseMasterUserPasswordOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRelationalDatabaseMasterUserPasswordOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRelationalDatabaseMasterUserPasswordOutput()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.masterUserPassword = try reader["masterUserPassword"].readIfPresent()
        return value
    }
}

extension GetRelationalDatabaseMetricDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRelationalDatabaseMetricDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRelationalDatabaseMetricDataOutput()
        value.metricData = try reader["metricData"].readListIfPresent(memberReadingClosure: LightsailClientTypes.MetricDatapoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricName = try reader["metricName"].readIfPresent()
        return value
    }
}

extension GetRelationalDatabaseParametersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRelationalDatabaseParametersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRelationalDatabaseParametersOutput()
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        value.parameters = try reader["parameters"].readListIfPresent(memberReadingClosure: LightsailClientTypes.RelationalDatabaseParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetRelationalDatabasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRelationalDatabasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRelationalDatabasesOutput()
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        value.relationalDatabases = try reader["relationalDatabases"].readListIfPresent(memberReadingClosure: LightsailClientTypes.RelationalDatabase.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetRelationalDatabaseSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRelationalDatabaseSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRelationalDatabaseSnapshotOutput()
        value.relationalDatabaseSnapshot = try reader["relationalDatabaseSnapshot"].readIfPresent(with: LightsailClientTypes.RelationalDatabaseSnapshot.read(from:))
        return value
    }
}

extension GetRelationalDatabaseSnapshotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRelationalDatabaseSnapshotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRelationalDatabaseSnapshotsOutput()
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        value.relationalDatabaseSnapshots = try reader["relationalDatabaseSnapshots"].readListIfPresent(memberReadingClosure: LightsailClientTypes.RelationalDatabaseSnapshot.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetSetupHistoryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSetupHistoryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSetupHistoryOutput()
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        value.setupHistory = try reader["setupHistory"].readListIfPresent(memberReadingClosure: LightsailClientTypes.SetupHistory.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetStaticIpOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetStaticIpOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetStaticIpOutput()
        value.staticIp = try reader["staticIp"].readIfPresent(with: LightsailClientTypes.StaticIp.read(from:))
        return value
    }
}

extension GetStaticIpsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetStaticIpsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetStaticIpsOutput()
        value.nextPageToken = try reader["nextPageToken"].readIfPresent()
        value.staticIps = try reader["staticIps"].readListIfPresent(memberReadingClosure: LightsailClientTypes.StaticIp.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ImportKeyPairOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportKeyPairOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportKeyPairOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension IsVpcPeeredOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> IsVpcPeeredOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = IsVpcPeeredOutput()
        value.isPeered = try reader["isPeered"].readIfPresent()
        return value
    }
}

extension OpenInstancePublicPortsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> OpenInstancePublicPortsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = OpenInstancePublicPortsOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension PeerVpcOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PeerVpcOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PeerVpcOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension PutAlarmOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAlarmOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutAlarmOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutInstancePublicPortsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutInstancePublicPortsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutInstancePublicPortsOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension RebootInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RebootInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RebootInstanceOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RebootRelationalDatabaseOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RebootRelationalDatabaseOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RebootRelationalDatabaseOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RegisterContainerImageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterContainerImageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RegisterContainerImageOutput()
        value.containerImage = try reader["containerImage"].readIfPresent(with: LightsailClientTypes.ContainerImage.read(from:))
        return value
    }
}

extension ReleaseStaticIpOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ReleaseStaticIpOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ReleaseStaticIpOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ResetDistributionCacheOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResetDistributionCacheOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ResetDistributionCacheOutput()
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension SendContactMethodVerificationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendContactMethodVerificationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SendContactMethodVerificationOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SetIpAddressTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetIpAddressTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SetIpAddressTypeOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SetResourceAccessForBucketOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetResourceAccessForBucketOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SetResourceAccessForBucketOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SetupInstanceHttpsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetupInstanceHttpsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SetupInstanceHttpsOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StartGUISessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartGUISessionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartGUISessionOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StartInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartInstanceOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StartRelationalDatabaseOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartRelationalDatabaseOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartRelationalDatabaseOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StopGUISessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopGUISessionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopGUISessionOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StopInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopInstanceOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StopRelationalDatabaseOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopRelationalDatabaseOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopRelationalDatabaseOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TagResourceOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TestAlarmOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TestAlarmOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TestAlarmOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UnpeerVpcOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UnpeerVpcOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UnpeerVpcOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UntagResourceOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateBucketOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBucketOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBucketOutput()
        value.bucket = try reader["bucket"].readIfPresent(with: LightsailClientTypes.Bucket.read(from:))
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateBucketBundleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBucketBundleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBucketBundleOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateContainerServiceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateContainerServiceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateContainerServiceOutput()
        value.containerService = try reader["containerService"].readIfPresent(with: LightsailClientTypes.ContainerService.read(from:))
        return value
    }
}

extension UpdateDistributionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDistributionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateDistributionOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension UpdateDistributionBundleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDistributionBundleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateDistributionBundleOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension UpdateDomainEntryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDomainEntryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateDomainEntryOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateInstanceMetadataOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateInstanceMetadataOptionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateInstanceMetadataOptionsOutput()
        value.operation = try reader["operation"].readIfPresent(with: LightsailClientTypes.Operation.read(from:))
        return value
    }
}

extension UpdateLoadBalancerAttributeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateLoadBalancerAttributeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateLoadBalancerAttributeOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateRelationalDatabaseOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRelationalDatabaseOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRelationalDatabaseOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateRelationalDatabaseParametersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRelationalDatabaseParametersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRelationalDatabaseParametersOutput()
        value.operations = try reader["operations"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

enum AllocateStaticIpOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AttachCertificateToDistributionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AttachDiskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AttachInstancesToLoadBalancerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AttachLoadBalancerTlsCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AttachStaticIpOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CloseInstancePublicPortsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CopySnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBucketOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBucketAccessKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCloudFormationStackOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateContactMethodOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateContainerServiceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateContainerServiceDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateContainerServiceRegistryLoginOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDiskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDiskFromSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDiskSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDistributionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDomainEntryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGUISessionAccessDetailsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateInstancesFromSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateInstanceSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateKeyPairOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateLoadBalancerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateLoadBalancerTlsCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRelationalDatabaseOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRelationalDatabaseFromSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRelationalDatabaseSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAlarmOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAutoSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketAccessKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteContactMethodOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteContainerImageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteContainerServiceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDiskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDiskSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDistributionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDomainEntryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteInstanceSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteKeyPairOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteKnownHostKeysOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLoadBalancerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLoadBalancerTlsCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRelationalDatabaseOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRelationalDatabaseSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetachCertificateFromDistributionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetachDiskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetachInstancesFromLoadBalancerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetachStaticIpOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableAddOnOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DownloadDefaultKeyPairOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableAddOnOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetActiveNamesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAlarmsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAutoSnapshotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBlueprintsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketAccessKeysOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketBundlesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketMetricDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBundlesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCertificatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCloudFormationStackRecordsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetContactMethodsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetContainerAPIMetadataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetContainerImagesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetContainerLogOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetContainerServiceDeploymentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetContainerServiceMetricDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetContainerServicePowersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetContainerServicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCostEstimateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDiskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDisksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDiskSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDiskSnapshotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDistributionBundlesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDistributionLatestCacheResetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDistributionMetricDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDistributionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDomainsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetExportSnapshotRecordsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetInstanceAccessDetailsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetInstanceMetricDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetInstancePortStatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetInstanceSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetInstanceSnapshotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetInstanceStateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetKeyPairOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetKeyPairsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLoadBalancerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLoadBalancerMetricDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLoadBalancersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLoadBalancerTlsCertificatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLoadBalancerTlsPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetOperationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetOperationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetOperationsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRegionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRelationalDatabaseOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRelationalDatabaseBlueprintsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRelationalDatabaseBundlesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRelationalDatabaseEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRelationalDatabaseLogEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRelationalDatabaseLogStreamsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRelationalDatabaseMasterUserPasswordOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRelationalDatabaseMetricDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRelationalDatabaseParametersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRelationalDatabasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRelationalDatabaseSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRelationalDatabaseSnapshotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSetupHistoryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetStaticIpOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetStaticIpsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportKeyPairOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum IsVpcPeeredOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum OpenInstancePublicPortsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PeerVpcOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAlarmOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutInstancePublicPortsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RebootInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RebootRelationalDatabaseOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterContainerImageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ReleaseStaticIpOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResetDistributionCacheOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendContactMethodVerificationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetIpAddressTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetResourceAccessForBucketOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetupInstanceHttpsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartGUISessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartRelationalDatabaseOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopGUISessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopRelationalDatabaseOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TestAlarmOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UnpeerVpcOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBucketOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBucketBundleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateContainerServiceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDistributionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDistributionBundleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDomainEntryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateInstanceMetadataOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateLoadBalancerAttributeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRelationalDatabaseOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRelationalDatabaseParametersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountSetupInProgressException": return try AccountSetupInProgressException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OperationFailureException": return try OperationFailureException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "UnauthenticatedException": return try UnauthenticatedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension OperationFailureException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> OperationFailureException {
        let reader = baseError.errorBodyReader
        var value = OperationFailureException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.docs = try reader["docs"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.tip = try reader["tip"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceException {
        let reader = baseError.errorBodyReader
        var value = ServiceException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.docs = try reader["docs"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.tip = try reader["tip"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnauthenticatedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnauthenticatedException {
        let reader = baseError.errorBodyReader
        var value = UnauthenticatedException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.docs = try reader["docs"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.tip = try reader["tip"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidInputException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidInputException {
        let reader = baseError.errorBodyReader
        var value = InvalidInputException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.docs = try reader["docs"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.tip = try reader["tip"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccountSetupInProgressException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccountSetupInProgressException {
        let reader = baseError.errorBodyReader
        var value = AccountSetupInProgressException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.docs = try reader["docs"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.tip = try reader["tip"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.docs = try reader["docs"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.tip = try reader["tip"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.docs = try reader["docs"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.tip = try reader["tip"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LightsailClientTypes.Operation {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Operation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Operation()
        value.id = try reader["id"].readIfPresent()
        value.resourceName = try reader["resourceName"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.isTerminal = try reader["isTerminal"].readIfPresent()
        value.operationDetails = try reader["operationDetails"].readIfPresent()
        value.operationType = try reader["operationType"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusChangedAt = try reader["statusChangedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.errorCode = try reader["errorCode"].readIfPresent()
        value.errorDetails = try reader["errorDetails"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.ResourceLocation {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ResourceLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ResourceLocation()
        value.availabilityZone = try reader["availabilityZone"].readIfPresent()
        value.regionName = try reader["regionName"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.Bucket {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Bucket {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Bucket()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.accessRules = try reader["accessRules"].readIfPresent(with: LightsailClientTypes.AccessRules.read(from:))
        value.arn = try reader["arn"].readIfPresent()
        value.bundleId = try reader["bundleId"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.url = try reader["url"].readIfPresent()
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.objectVersioning = try reader["objectVersioning"].readIfPresent()
        value.ableToUpdateBundle = try reader["ableToUpdateBundle"].readIfPresent()
        value.readonlyAccessAccounts = try reader["readonlyAccessAccounts"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.resourcesReceivingAccess = try reader["resourcesReceivingAccess"].readListIfPresent(memberReadingClosure: LightsailClientTypes.ResourceReceivingAccess.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent(with: LightsailClientTypes.BucketState.read(from:))
        value.accessLogConfig = try reader["accessLogConfig"].readIfPresent(with: LightsailClientTypes.BucketAccessLogConfig.read(from:))
        return value
    }
}

extension LightsailClientTypes.BucketAccessLogConfig {

    static func write(value: LightsailClientTypes.BucketAccessLogConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destination"].write(value.destination)
        try writer["enabled"].write(value.enabled)
        try writer["prefix"].write(value.`prefix`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.BucketAccessLogConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.BucketAccessLogConfig()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        value.destination = try reader["destination"].readIfPresent()
        value.`prefix` = try reader["prefix"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.BucketState {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.BucketState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.BucketState()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.ResourceReceivingAccess {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ResourceReceivingAccess {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ResourceReceivingAccess()
        value.name = try reader["name"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.Tag {

    static func write(value: LightsailClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Tag()
        value.key = try reader["key"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.AccessRules {

    static func write(value: LightsailClientTypes.AccessRules?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowPublicOverrides"].write(value.allowPublicOverrides)
        try writer["getObject"].write(value.getObject)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.AccessRules {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.AccessRules()
        value.getObject = try reader["getObject"].readIfPresent()
        value.allowPublicOverrides = try reader["allowPublicOverrides"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.AccessKey {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.AccessKey {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.AccessKey()
        value.accessKeyId = try reader["accessKeyId"].readIfPresent()
        value.secretAccessKey = try reader["secretAccessKey"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUsed = try reader["lastUsed"].readIfPresent(with: LightsailClientTypes.AccessKeyLastUsed.read(from:))
        return value
    }
}

extension LightsailClientTypes.AccessKeyLastUsed {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.AccessKeyLastUsed {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.AccessKeyLastUsed()
        value.lastUsedDate = try reader["lastUsedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.region = try reader["region"].readIfPresent()
        value.serviceName = try reader["serviceName"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.CertificateSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.CertificateSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.CertificateSummary()
        value.certificateArn = try reader["certificateArn"].readIfPresent()
        value.certificateName = try reader["certificateName"].readIfPresent()
        value.domainName = try reader["domainName"].readIfPresent()
        value.certificateDetail = try reader["certificateDetail"].readIfPresent(with: LightsailClientTypes.Certificate.read(from:))
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.Certificate {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Certificate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Certificate()
        value.arn = try reader["arn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.domainName = try reader["domainName"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.serialNumber = try reader["serialNumber"].readIfPresent()
        value.subjectAlternativeNames = try reader["subjectAlternativeNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.domainValidationRecords = try reader["domainValidationRecords"].readListIfPresent(memberReadingClosure: LightsailClientTypes.DomainValidationRecord.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.requestFailureReason = try reader["requestFailureReason"].readIfPresent()
        value.inUseResourceCount = try reader["inUseResourceCount"].readIfPresent() ?? 0
        value.keyAlgorithm = try reader["keyAlgorithm"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.issuedAt = try reader["issuedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.issuerCA = try reader["issuerCA"].readIfPresent()
        value.notBefore = try reader["notBefore"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.notAfter = try reader["notAfter"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.eligibleToRenew = try reader["eligibleToRenew"].readIfPresent()
        value.renewalSummary = try reader["renewalSummary"].readIfPresent(with: LightsailClientTypes.RenewalSummary.read(from:))
        value.revokedAt = try reader["revokedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.revocationReason = try reader["revocationReason"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportCode = try reader["supportCode"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.RenewalSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.RenewalSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.RenewalSummary()
        value.domainValidationRecords = try reader["domainValidationRecords"].readListIfPresent(memberReadingClosure: LightsailClientTypes.DomainValidationRecord.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.renewalStatus = try reader["renewalStatus"].readIfPresent()
        value.renewalStatusReason = try reader["renewalStatusReason"].readIfPresent()
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LightsailClientTypes.DomainValidationRecord {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.DomainValidationRecord {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.DomainValidationRecord()
        value.domainName = try reader["domainName"].readIfPresent()
        value.resourceRecord = try reader["resourceRecord"].readIfPresent(with: LightsailClientTypes.ResourceRecord.read(from:))
        value.dnsRecordCreationState = try reader["dnsRecordCreationState"].readIfPresent(with: LightsailClientTypes.DnsRecordCreationState.read(from:))
        value.validationStatus = try reader["validationStatus"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.DnsRecordCreationState {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.DnsRecordCreationState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.DnsRecordCreationState()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.ResourceRecord {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ResourceRecord {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ResourceRecord()
        value.name = try reader["name"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.ContainerService {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ContainerService {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ContainerService()
        value.containerServiceName = try reader["containerServiceName"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.power = try reader["power"].readIfPresent()
        value.powerId = try reader["powerId"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.stateDetail = try reader["stateDetail"].readIfPresent(with: LightsailClientTypes.ContainerServiceStateDetail.read(from:))
        value.scale = try reader["scale"].readIfPresent()
        value.currentDeployment = try reader["currentDeployment"].readIfPresent(with: LightsailClientTypes.ContainerServiceDeployment.read(from:))
        value.nextDeployment = try reader["nextDeployment"].readIfPresent(with: LightsailClientTypes.ContainerServiceDeployment.read(from:))
        value.isDisabled = try reader["isDisabled"].readIfPresent()
        value.principalArn = try reader["principalArn"].readIfPresent()
        value.privateDomainName = try reader["privateDomainName"].readIfPresent()
        value.publicDomainNames = try reader["publicDomainNames"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.url = try reader["url"].readIfPresent()
        value.privateRegistryAccess = try reader["privateRegistryAccess"].readIfPresent(with: LightsailClientTypes.PrivateRegistryAccess.read(from:))
        return value
    }
}

extension LightsailClientTypes.PrivateRegistryAccess {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.PrivateRegistryAccess {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.PrivateRegistryAccess()
        value.ecrImagePullerRole = try reader["ecrImagePullerRole"].readIfPresent(with: LightsailClientTypes.ContainerServiceECRImagePullerRole.read(from:))
        return value
    }
}

extension LightsailClientTypes.ContainerServiceECRImagePullerRole {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ContainerServiceECRImagePullerRole {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ContainerServiceECRImagePullerRole()
        value.isActive = try reader["isActive"].readIfPresent()
        value.principalArn = try reader["principalArn"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.ContainerServiceDeployment {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ContainerServiceDeployment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ContainerServiceDeployment()
        value.version = try reader["version"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.containers = try reader["containers"].readMapIfPresent(valueReadingClosure: LightsailClientTypes.Container.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.publicEndpoint = try reader["publicEndpoint"].readIfPresent(with: LightsailClientTypes.ContainerServiceEndpoint.read(from:))
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LightsailClientTypes.ContainerServiceEndpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ContainerServiceEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ContainerServiceEndpoint()
        value.containerName = try reader["containerName"].readIfPresent()
        value.containerPort = try reader["containerPort"].readIfPresent()
        value.healthCheck = try reader["healthCheck"].readIfPresent(with: LightsailClientTypes.ContainerServiceHealthCheckConfig.read(from:))
        return value
    }
}

extension LightsailClientTypes.ContainerServiceHealthCheckConfig {

    static func write(value: LightsailClientTypes.ContainerServiceHealthCheckConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["healthyThreshold"].write(value.healthyThreshold)
        try writer["intervalSeconds"].write(value.intervalSeconds)
        try writer["path"].write(value.path)
        try writer["successCodes"].write(value.successCodes)
        try writer["timeoutSeconds"].write(value.timeoutSeconds)
        try writer["unhealthyThreshold"].write(value.unhealthyThreshold)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ContainerServiceHealthCheckConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ContainerServiceHealthCheckConfig()
        value.healthyThreshold = try reader["healthyThreshold"].readIfPresent()
        value.unhealthyThreshold = try reader["unhealthyThreshold"].readIfPresent()
        value.timeoutSeconds = try reader["timeoutSeconds"].readIfPresent()
        value.intervalSeconds = try reader["intervalSeconds"].readIfPresent()
        value.path = try reader["path"].readIfPresent()
        value.successCodes = try reader["successCodes"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.Container {

    static func write(value: LightsailClientTypes.Container?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["command"].writeList(value.command, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["image"].write(value.image)
        try writer["ports"].writeMap(value.ports, valueWritingClosure: SmithyReadWrite.WritingClosureBox<LightsailClientTypes.ContainerServiceProtocol>().write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Container {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Container()
        value.image = try reader["image"].readIfPresent()
        value.command = try reader["command"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.environment = try reader["environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.ports = try reader["ports"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosureBox<LightsailClientTypes.ContainerServiceProtocol>().read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.ContainerServiceStateDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ContainerServiceStateDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ContainerServiceStateDetail()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.ContainerServiceRegistryLogin {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ContainerServiceRegistryLogin {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ContainerServiceRegistryLogin()
        value.username = try reader["username"].readIfPresent()
        value.password = try reader["password"].readIfPresent()
        value.expiresAt = try reader["expiresAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.registry = try reader["registry"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.LightsailDistribution {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.LightsailDistribution {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.LightsailDistribution()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.alternativeDomainNames = try reader["alternativeDomainNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.isEnabled = try reader["isEnabled"].readIfPresent()
        value.domainName = try reader["domainName"].readIfPresent()
        value.bundleId = try reader["bundleId"].readIfPresent()
        value.certificateName = try reader["certificateName"].readIfPresent()
        value.origin = try reader["origin"].readIfPresent(with: LightsailClientTypes.Origin.read(from:))
        value.originPublicDNS = try reader["originPublicDNS"].readIfPresent()
        value.defaultCacheBehavior = try reader["defaultCacheBehavior"].readIfPresent(with: LightsailClientTypes.CacheBehavior.read(from:))
        value.cacheBehaviorSettings = try reader["cacheBehaviorSettings"].readIfPresent(with: LightsailClientTypes.CacheSettings.read(from:))
        value.cacheBehaviors = try reader["cacheBehaviors"].readListIfPresent(memberReadingClosure: LightsailClientTypes.CacheBehaviorPerPath.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ableToUpdateBundle = try reader["ableToUpdateBundle"].readIfPresent()
        value.ipAddressType = try reader["ipAddressType"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.viewerMinimumTlsProtocolVersion = try reader["viewerMinimumTlsProtocolVersion"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.CacheBehaviorPerPath {

    static func write(value: LightsailClientTypes.CacheBehaviorPerPath?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["behavior"].write(value.behavior)
        try writer["path"].write(value.path)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.CacheBehaviorPerPath {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.CacheBehaviorPerPath()
        value.path = try reader["path"].readIfPresent()
        value.behavior = try reader["behavior"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.CacheSettings {

    static func write(value: LightsailClientTypes.CacheSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowedHTTPMethods"].write(value.allowedHTTPMethods)
        try writer["cachedHTTPMethods"].write(value.cachedHTTPMethods)
        try writer["defaultTTL"].write(value.defaultTTL)
        try writer["forwardedCookies"].write(value.forwardedCookies, with: LightsailClientTypes.CookieObject.write(value:to:))
        try writer["forwardedHeaders"].write(value.forwardedHeaders, with: LightsailClientTypes.HeaderObject.write(value:to:))
        try writer["forwardedQueryStrings"].write(value.forwardedQueryStrings, with: LightsailClientTypes.QueryStringObject.write(value:to:))
        try writer["maximumTTL"].write(value.maximumTTL)
        try writer["minimumTTL"].write(value.minimumTTL)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.CacheSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.CacheSettings()
        value.defaultTTL = try reader["defaultTTL"].readIfPresent()
        value.minimumTTL = try reader["minimumTTL"].readIfPresent()
        value.maximumTTL = try reader["maximumTTL"].readIfPresent()
        value.allowedHTTPMethods = try reader["allowedHTTPMethods"].readIfPresent()
        value.cachedHTTPMethods = try reader["cachedHTTPMethods"].readIfPresent()
        value.forwardedCookies = try reader["forwardedCookies"].readIfPresent(with: LightsailClientTypes.CookieObject.read(from:))
        value.forwardedHeaders = try reader["forwardedHeaders"].readIfPresent(with: LightsailClientTypes.HeaderObject.read(from:))
        value.forwardedQueryStrings = try reader["forwardedQueryStrings"].readIfPresent(with: LightsailClientTypes.QueryStringObject.read(from:))
        return value
    }
}

extension LightsailClientTypes.QueryStringObject {

    static func write(value: LightsailClientTypes.QueryStringObject?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["option"].write(value.option)
        try writer["queryStringsAllowList"].writeList(value.queryStringsAllowList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.QueryStringObject {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.QueryStringObject()
        value.option = try reader["option"].readIfPresent()
        value.queryStringsAllowList = try reader["queryStringsAllowList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.HeaderObject {

    static func write(value: LightsailClientTypes.HeaderObject?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["headersAllowList"].writeList(value.headersAllowList, memberWritingClosure: SmithyReadWrite.WritingClosureBox<LightsailClientTypes.HeaderEnum>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["option"].write(value.option)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.HeaderObject {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.HeaderObject()
        value.option = try reader["option"].readIfPresent()
        value.headersAllowList = try reader["headersAllowList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<LightsailClientTypes.HeaderEnum>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.CookieObject {

    static func write(value: LightsailClientTypes.CookieObject?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cookiesAllowList"].writeList(value.cookiesAllowList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["option"].write(value.option)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.CookieObject {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.CookieObject()
        value.option = try reader["option"].readIfPresent()
        value.cookiesAllowList = try reader["cookiesAllowList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.CacheBehavior {

    static func write(value: LightsailClientTypes.CacheBehavior?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["behavior"].write(value.behavior)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.CacheBehavior {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.CacheBehavior()
        value.behavior = try reader["behavior"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.Origin {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Origin {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Origin()
        value.name = try reader["name"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.regionName = try reader["regionName"].readIfPresent()
        value.protocolPolicy = try reader["protocolPolicy"].readIfPresent()
        value.responseTimeout = try reader["responseTimeout"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.Session {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Session {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Session()
        value.name = try reader["name"].readIfPresent()
        value.url = try reader["url"].readIfPresent()
        value.isPrimary = try reader["isPrimary"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.KeyPair {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.KeyPair {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.KeyPair()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.fingerprint = try reader["fingerprint"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.Alarm {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Alarm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Alarm()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.monitoredResourceInfo = try reader["monitoredResourceInfo"].readIfPresent(with: LightsailClientTypes.MonitoredResourceInfo.read(from:))
        value.comparisonOperator = try reader["comparisonOperator"].readIfPresent()
        value.evaluationPeriods = try reader["evaluationPeriods"].readIfPresent()
        value.period = try reader["period"].readIfPresent()
        value.threshold = try reader["threshold"].readIfPresent()
        value.datapointsToAlarm = try reader["datapointsToAlarm"].readIfPresent()
        value.treatMissingData = try reader["treatMissingData"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.metricName = try reader["metricName"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.unit = try reader["unit"].readIfPresent()
        value.contactProtocols = try reader["contactProtocols"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<LightsailClientTypes.ContactProtocol>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.notificationTriggers = try reader["notificationTriggers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<LightsailClientTypes.AlarmState>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.notificationEnabled = try reader["notificationEnabled"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.MonitoredResourceInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.MonitoredResourceInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.MonitoredResourceInfo()
        value.arn = try reader["arn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.AutoSnapshotDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.AutoSnapshotDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.AutoSnapshotDetails()
        value.date = try reader["date"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["status"].readIfPresent()
        value.fromAttachedDisks = try reader["fromAttachedDisks"].readListIfPresent(memberReadingClosure: LightsailClientTypes.AttachedDisk.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.AttachedDisk {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.AttachedDisk {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.AttachedDisk()
        value.path = try reader["path"].readIfPresent()
        value.sizeInGb = try reader["sizeInGb"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.Blueprint {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Blueprint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Blueprint()
        value.blueprintId = try reader["blueprintId"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.group = try reader["group"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.isActive = try reader["isActive"].readIfPresent()
        value.minPower = try reader["minPower"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.versionCode = try reader["versionCode"].readIfPresent()
        value.productUrl = try reader["productUrl"].readIfPresent()
        value.licenseUrl = try reader["licenseUrl"].readIfPresent()
        value.platform = try reader["platform"].readIfPresent()
        value.appCategory = try reader["appCategory"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.BucketBundle {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.BucketBundle {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.BucketBundle()
        value.bundleId = try reader["bundleId"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.price = try reader["price"].readIfPresent()
        value.storagePerMonthInGb = try reader["storagePerMonthInGb"].readIfPresent()
        value.transferPerMonthInGb = try reader["transferPerMonthInGb"].readIfPresent()
        value.isActive = try reader["isActive"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.MetricDatapoint {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.MetricDatapoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.MetricDatapoint()
        value.average = try reader["average"].readIfPresent()
        value.maximum = try reader["maximum"].readIfPresent()
        value.minimum = try reader["minimum"].readIfPresent()
        value.sampleCount = try reader["sampleCount"].readIfPresent()
        value.sum = try reader["sum"].readIfPresent()
        value.timestamp = try reader["timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.unit = try reader["unit"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.AccountLevelBpaSync {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.AccountLevelBpaSync {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.AccountLevelBpaSync()
        value.status = try reader["status"].readIfPresent()
        value.lastSyncedAt = try reader["lastSyncedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.message = try reader["message"].readIfPresent()
        value.bpaImpactsLightsail = try reader["bpaImpactsLightsail"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.Bundle {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Bundle {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Bundle()
        value.price = try reader["price"].readIfPresent()
        value.cpuCount = try reader["cpuCount"].readIfPresent()
        value.diskSizeInGb = try reader["diskSizeInGb"].readIfPresent()
        value.bundleId = try reader["bundleId"].readIfPresent()
        value.instanceType = try reader["instanceType"].readIfPresent()
        value.isActive = try reader["isActive"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.power = try reader["power"].readIfPresent()
        value.ramSizeInGb = try reader["ramSizeInGb"].readIfPresent()
        value.transferPerMonthInGb = try reader["transferPerMonthInGb"].readIfPresent()
        value.supportedPlatforms = try reader["supportedPlatforms"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<LightsailClientTypes.InstancePlatform>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportedAppCategories = try reader["supportedAppCategories"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<LightsailClientTypes.AppCategory>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.publicIpv4AddressCount = try reader["publicIpv4AddressCount"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.CloudFormationStackRecord {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.CloudFormationStackRecord {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.CloudFormationStackRecord()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.sourceInfo = try reader["sourceInfo"].readListIfPresent(memberReadingClosure: LightsailClientTypes.CloudFormationStackRecordSourceInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.destinationInfo = try reader["destinationInfo"].readIfPresent(with: LightsailClientTypes.DestinationInfo.read(from:))
        return value
    }
}

extension LightsailClientTypes.DestinationInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.DestinationInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.DestinationInfo()
        value.id = try reader["id"].readIfPresent()
        value.service = try reader["service"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.CloudFormationStackRecordSourceInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.CloudFormationStackRecordSourceInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.CloudFormationStackRecordSourceInfo()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.ContactMethod {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ContactMethod {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ContactMethod()
        value.contactEndpoint = try reader["contactEndpoint"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.`protocol` = try reader["protocol"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.ContainerImage {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ContainerImage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ContainerImage()
        value.image = try reader["image"].readIfPresent()
        value.digest = try reader["digest"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LightsailClientTypes.ContainerServiceLogEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ContainerServiceLogEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ContainerServiceLogEvent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.ContainerServicePower {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ContainerServicePower {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ContainerServicePower()
        value.powerId = try reader["powerId"].readIfPresent()
        value.price = try reader["price"].readIfPresent()
        value.cpuCount = try reader["cpuCount"].readIfPresent()
        value.ramSizeInGb = try reader["ramSizeInGb"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.isActive = try reader["isActive"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.ResourceBudgetEstimate {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ResourceBudgetEstimate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ResourceBudgetEstimate()
        value.resourceName = try reader["resourceName"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.costEstimates = try reader["costEstimates"].readListIfPresent(memberReadingClosure: LightsailClientTypes.CostEstimate.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LightsailClientTypes.CostEstimate {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.CostEstimate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.CostEstimate()
        value.usageType = try reader["usageType"].readIfPresent()
        value.resultsByTime = try reader["resultsByTime"].readListIfPresent(memberReadingClosure: LightsailClientTypes.EstimateByTime.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.EstimateByTime {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.EstimateByTime {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.EstimateByTime()
        value.usageCost = try reader["usageCost"].readIfPresent()
        value.pricingUnit = try reader["pricingUnit"].readIfPresent()
        value.unit = try reader["unit"].readIfPresent()
        value.currency = try reader["currency"].readIfPresent()
        value.timePeriod = try reader["timePeriod"].readIfPresent(with: LightsailClientTypes.TimePeriod.read(from:))
        return value
    }
}

extension LightsailClientTypes.TimePeriod {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.TimePeriod {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.TimePeriod()
        value.start = try reader["start"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.end = try reader["end"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LightsailClientTypes.Disk {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Disk {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Disk()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.addOns = try reader["addOns"].readListIfPresent(memberReadingClosure: LightsailClientTypes.AddOn.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sizeInGb = try reader["sizeInGb"].readIfPresent()
        value.isSystemDisk = try reader["isSystemDisk"].readIfPresent()
        value.iops = try reader["iops"].readIfPresent()
        value.path = try reader["path"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.attachedTo = try reader["attachedTo"].readIfPresent()
        value.isAttached = try reader["isAttached"].readIfPresent()
        value.attachmentState = try reader["attachmentState"].readIfPresent()
        value.gbInUse = try reader["gbInUse"].readIfPresent()
        value.autoMountStatus = try reader["autoMountStatus"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.AddOn {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.AddOn {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.AddOn()
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.snapshotTimeOfDay = try reader["snapshotTimeOfDay"].readIfPresent()
        value.nextSnapshotTimeOfDay = try reader["nextSnapshotTimeOfDay"].readIfPresent()
        value.threshold = try reader["threshold"].readIfPresent()
        value.duration = try reader["duration"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.DiskSnapshot {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.DiskSnapshot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.DiskSnapshot()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sizeInGb = try reader["sizeInGb"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.progress = try reader["progress"].readIfPresent()
        value.fromDiskName = try reader["fromDiskName"].readIfPresent()
        value.fromDiskArn = try reader["fromDiskArn"].readIfPresent()
        value.fromInstanceName = try reader["fromInstanceName"].readIfPresent()
        value.fromInstanceArn = try reader["fromInstanceArn"].readIfPresent()
        value.isFromAutoSnapshot = try reader["isFromAutoSnapshot"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.DistributionBundle {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.DistributionBundle {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.DistributionBundle()
        value.bundleId = try reader["bundleId"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.price = try reader["price"].readIfPresent()
        value.transferPerMonthInGb = try reader["transferPerMonthInGb"].readIfPresent()
        value.isActive = try reader["isActive"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.Domain {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Domain {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Domain()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.domainEntries = try reader["domainEntries"].readListIfPresent(memberReadingClosure: LightsailClientTypes.DomainEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.registeredDomainDelegationInfo = try reader["registeredDomainDelegationInfo"].readIfPresent(with: LightsailClientTypes.RegisteredDomainDelegationInfo.read(from:))
        return value
    }
}

extension LightsailClientTypes.RegisteredDomainDelegationInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.RegisteredDomainDelegationInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.RegisteredDomainDelegationInfo()
        value.nameServersUpdateState = try reader["nameServersUpdateState"].readIfPresent(with: LightsailClientTypes.NameServersUpdateState.read(from:))
        value.r53HostedZoneDeletionState = try reader["r53HostedZoneDeletionState"].readIfPresent(with: LightsailClientTypes.R53HostedZoneDeletionState.read(from:))
        return value
    }
}

extension LightsailClientTypes.R53HostedZoneDeletionState {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.R53HostedZoneDeletionState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.R53HostedZoneDeletionState()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.NameServersUpdateState {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.NameServersUpdateState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.NameServersUpdateState()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.DomainEntry {

    static func write(value: LightsailClientTypes.DomainEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["isAlias"].write(value.isAlias)
        try writer["name"].write(value.name)
        try writer["options"].writeMap(value.options, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["target"].write(value.target)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.DomainEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.DomainEntry()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.target = try reader["target"].readIfPresent()
        value.isAlias = try reader["isAlias"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.options = try reader["options"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.ExportSnapshotRecord {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ExportSnapshotRecord {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ExportSnapshotRecord()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.sourceInfo = try reader["sourceInfo"].readIfPresent(with: LightsailClientTypes.ExportSnapshotRecordSourceInfo.read(from:))
        value.destinationInfo = try reader["destinationInfo"].readIfPresent(with: LightsailClientTypes.DestinationInfo.read(from:))
        return value
    }
}

extension LightsailClientTypes.ExportSnapshotRecordSourceInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.ExportSnapshotRecordSourceInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.ExportSnapshotRecordSourceInfo()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.fromResourceName = try reader["fromResourceName"].readIfPresent()
        value.fromResourceArn = try reader["fromResourceArn"].readIfPresent()
        value.instanceSnapshotInfo = try reader["instanceSnapshotInfo"].readIfPresent(with: LightsailClientTypes.InstanceSnapshotInfo.read(from:))
        value.diskSnapshotInfo = try reader["diskSnapshotInfo"].readIfPresent(with: LightsailClientTypes.DiskSnapshotInfo.read(from:))
        return value
    }
}

extension LightsailClientTypes.DiskSnapshotInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.DiskSnapshotInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.DiskSnapshotInfo()
        value.sizeInGb = try reader["sizeInGb"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.InstanceSnapshotInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.InstanceSnapshotInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.InstanceSnapshotInfo()
        value.fromBundleId = try reader["fromBundleId"].readIfPresent()
        value.fromBlueprintId = try reader["fromBlueprintId"].readIfPresent()
        value.fromDiskInfo = try reader["fromDiskInfo"].readListIfPresent(memberReadingClosure: LightsailClientTypes.DiskInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.DiskInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.DiskInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.DiskInfo()
        value.name = try reader["name"].readIfPresent()
        value.path = try reader["path"].readIfPresent()
        value.sizeInGb = try reader["sizeInGb"].readIfPresent()
        value.isSystemDisk = try reader["isSystemDisk"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.Instance {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Instance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Instance()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.blueprintId = try reader["blueprintId"].readIfPresent()
        value.blueprintName = try reader["blueprintName"].readIfPresent()
        value.bundleId = try reader["bundleId"].readIfPresent()
        value.addOns = try reader["addOns"].readListIfPresent(memberReadingClosure: LightsailClientTypes.AddOn.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.isStaticIp = try reader["isStaticIp"].readIfPresent()
        value.privateIpAddress = try reader["privateIpAddress"].readIfPresent()
        value.publicIpAddress = try reader["publicIpAddress"].readIfPresent()
        value.ipv6Addresses = try reader["ipv6Addresses"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.ipAddressType = try reader["ipAddressType"].readIfPresent()
        value.hardware = try reader["hardware"].readIfPresent(with: LightsailClientTypes.InstanceHardware.read(from:))
        value.networking = try reader["networking"].readIfPresent(with: LightsailClientTypes.InstanceNetworking.read(from:))
        value.state = try reader["state"].readIfPresent(with: LightsailClientTypes.InstanceState.read(from:))
        value.username = try reader["username"].readIfPresent()
        value.sshKeyName = try reader["sshKeyName"].readIfPresent()
        value.metadataOptions = try reader["metadataOptions"].readIfPresent(with: LightsailClientTypes.InstanceMetadataOptions.read(from:))
        return value
    }
}

extension LightsailClientTypes.InstanceMetadataOptions {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.InstanceMetadataOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.InstanceMetadataOptions()
        value.state = try reader["state"].readIfPresent()
        value.httpTokens = try reader["httpTokens"].readIfPresent()
        value.httpEndpoint = try reader["httpEndpoint"].readIfPresent()
        value.httpPutResponseHopLimit = try reader["httpPutResponseHopLimit"].readIfPresent()
        value.httpProtocolIpv6 = try reader["httpProtocolIpv6"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.InstanceState {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.InstanceState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.InstanceState()
        value.code = try reader["code"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.InstanceNetworking {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.InstanceNetworking {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.InstanceNetworking()
        value.monthlyTransfer = try reader["monthlyTransfer"].readIfPresent(with: LightsailClientTypes.MonthlyTransfer.read(from:))
        value.ports = try reader["ports"].readListIfPresent(memberReadingClosure: LightsailClientTypes.InstancePortInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.InstancePortInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.InstancePortInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.InstancePortInfo()
        value.fromPort = try reader["fromPort"].readIfPresent() ?? 0
        value.toPort = try reader["toPort"].readIfPresent() ?? 0
        value.`protocol` = try reader["protocol"].readIfPresent()
        value.accessFrom = try reader["accessFrom"].readIfPresent()
        value.accessType = try reader["accessType"].readIfPresent()
        value.commonName = try reader["commonName"].readIfPresent()
        value.accessDirection = try reader["accessDirection"].readIfPresent()
        value.cidrs = try reader["cidrs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.ipv6Cidrs = try reader["ipv6Cidrs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.cidrListAliases = try reader["cidrListAliases"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.MonthlyTransfer {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.MonthlyTransfer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.MonthlyTransfer()
        value.gbPerMonthAllocated = try reader["gbPerMonthAllocated"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.InstanceHardware {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.InstanceHardware {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.InstanceHardware()
        value.cpuCount = try reader["cpuCount"].readIfPresent()
        value.disks = try reader["disks"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Disk.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ramSizeInGb = try reader["ramSizeInGb"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.InstanceAccessDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.InstanceAccessDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.InstanceAccessDetails()
        value.certKey = try reader["certKey"].readIfPresent()
        value.expiresAt = try reader["expiresAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.ipAddress = try reader["ipAddress"].readIfPresent()
        value.ipv6Addresses = try reader["ipv6Addresses"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.password = try reader["password"].readIfPresent()
        value.passwordData = try reader["passwordData"].readIfPresent(with: LightsailClientTypes.PasswordData.read(from:))
        value.privateKey = try reader["privateKey"].readIfPresent()
        value.`protocol` = try reader["protocol"].readIfPresent()
        value.instanceName = try reader["instanceName"].readIfPresent()
        value.username = try reader["username"].readIfPresent()
        value.hostKeys = try reader["hostKeys"].readListIfPresent(memberReadingClosure: LightsailClientTypes.HostKeyAttributes.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.HostKeyAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.HostKeyAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.HostKeyAttributes()
        value.algorithm = try reader["algorithm"].readIfPresent()
        value.publicKey = try reader["publicKey"].readIfPresent()
        value.witnessedAt = try reader["witnessedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.fingerprintSHA1 = try reader["fingerprintSHA1"].readIfPresent()
        value.fingerprintSHA256 = try reader["fingerprintSHA256"].readIfPresent()
        value.notValidBefore = try reader["notValidBefore"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.notValidAfter = try reader["notValidAfter"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LightsailClientTypes.PasswordData {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.PasswordData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.PasswordData()
        value.ciphertext = try reader["ciphertext"].readIfPresent()
        value.keyPairName = try reader["keyPairName"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.InstancePortState {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.InstancePortState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.InstancePortState()
        value.fromPort = try reader["fromPort"].readIfPresent() ?? 0
        value.toPort = try reader["toPort"].readIfPresent() ?? 0
        value.`protocol` = try reader["protocol"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.cidrs = try reader["cidrs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.ipv6Cidrs = try reader["ipv6Cidrs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.cidrListAliases = try reader["cidrListAliases"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.InstanceSnapshot {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.InstanceSnapshot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.InstanceSnapshot()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["state"].readIfPresent()
        value.progress = try reader["progress"].readIfPresent()
        value.fromAttachedDisks = try reader["fromAttachedDisks"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Disk.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.fromInstanceName = try reader["fromInstanceName"].readIfPresent()
        value.fromInstanceArn = try reader["fromInstanceArn"].readIfPresent()
        value.fromBlueprintId = try reader["fromBlueprintId"].readIfPresent()
        value.fromBundleId = try reader["fromBundleId"].readIfPresent()
        value.isFromAutoSnapshot = try reader["isFromAutoSnapshot"].readIfPresent()
        value.sizeInGb = try reader["sizeInGb"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.LoadBalancer {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.LoadBalancer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.LoadBalancer()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.dnsName = try reader["dnsName"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.`protocol` = try reader["protocol"].readIfPresent()
        value.publicPorts = try reader["publicPorts"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.healthCheckPath = try reader["healthCheckPath"].readIfPresent()
        value.instancePort = try reader["instancePort"].readIfPresent()
        value.instanceHealthSummary = try reader["instanceHealthSummary"].readListIfPresent(memberReadingClosure: LightsailClientTypes.InstanceHealthSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tlsCertificateSummaries = try reader["tlsCertificateSummaries"].readListIfPresent(memberReadingClosure: LightsailClientTypes.LoadBalancerTlsCertificateSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.configurationOptions = try reader["configurationOptions"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.ipAddressType = try reader["ipAddressType"].readIfPresent()
        value.httpsRedirectionEnabled = try reader["httpsRedirectionEnabled"].readIfPresent()
        value.tlsPolicyName = try reader["tlsPolicyName"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.LoadBalancerTlsCertificateSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.LoadBalancerTlsCertificateSummary()
        value.name = try reader["name"].readIfPresent()
        value.isAttached = try reader["isAttached"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.InstanceHealthSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.InstanceHealthSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.InstanceHealthSummary()
        value.instanceName = try reader["instanceName"].readIfPresent()
        value.instanceHealth = try reader["instanceHealth"].readIfPresent()
        value.instanceHealthReason = try reader["instanceHealthReason"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificate {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.LoadBalancerTlsCertificate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.LoadBalancerTlsCertificate()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.loadBalancerName = try reader["loadBalancerName"].readIfPresent()
        value.isAttached = try reader["isAttached"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.domainName = try reader["domainName"].readIfPresent()
        value.domainValidationRecords = try reader["domainValidationRecords"].readListIfPresent(memberReadingClosure: LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.failureReason = try reader["failureReason"].readIfPresent()
        value.issuedAt = try reader["issuedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.issuer = try reader["issuer"].readIfPresent()
        value.keyAlgorithm = try reader["keyAlgorithm"].readIfPresent()
        value.notAfter = try reader["notAfter"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.notBefore = try reader["notBefore"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.renewalSummary = try reader["renewalSummary"].readIfPresent(with: LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary.read(from:))
        value.revocationReason = try reader["revocationReason"].readIfPresent()
        value.revokedAt = try reader["revokedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.serial = try reader["serial"].readIfPresent()
        value.signatureAlgorithm = try reader["signatureAlgorithm"].readIfPresent()
        value.subject = try reader["subject"].readIfPresent()
        value.subjectAlternativeNames = try reader["subjectAlternativeNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary()
        value.renewalStatus = try reader["renewalStatus"].readIfPresent()
        value.domainValidationOptions = try reader["domainValidationOptions"].readListIfPresent(memberReadingClosure: LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption()
        value.domainName = try reader["domainName"].readIfPresent()
        value.validationStatus = try reader["validationStatus"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord()
        value.name = try reader["name"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        value.validationStatus = try reader["validationStatus"].readIfPresent()
        value.domainName = try reader["domainName"].readIfPresent()
        value.dnsRecordCreationState = try reader["dnsRecordCreationState"].readIfPresent(with: LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationState.read(from:))
        return value
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationState {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationState()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.LoadBalancerTlsPolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.LoadBalancerTlsPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.LoadBalancerTlsPolicy()
        value.name = try reader["name"].readIfPresent()
        value.isDefault = try reader["isDefault"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.protocols = try reader["protocols"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.ciphers = try reader["ciphers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.Region {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.Region {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.Region()
        value.continentCode = try reader["continentCode"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.displayName = try reader["displayName"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.availabilityZones = try reader["availabilityZones"].readListIfPresent(memberReadingClosure: LightsailClientTypes.AvailabilityZone.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.relationalDatabaseAvailabilityZones = try reader["relationalDatabaseAvailabilityZones"].readListIfPresent(memberReadingClosure: LightsailClientTypes.AvailabilityZone.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.AvailabilityZone {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.AvailabilityZone {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.AvailabilityZone()
        value.zoneName = try reader["zoneName"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.RelationalDatabase {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.RelationalDatabase {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.RelationalDatabase()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.relationalDatabaseBlueprintId = try reader["relationalDatabaseBlueprintId"].readIfPresent()
        value.relationalDatabaseBundleId = try reader["relationalDatabaseBundleId"].readIfPresent()
        value.masterDatabaseName = try reader["masterDatabaseName"].readIfPresent()
        value.hardware = try reader["hardware"].readIfPresent(with: LightsailClientTypes.RelationalDatabaseHardware.read(from:))
        value.state = try reader["state"].readIfPresent()
        value.secondaryAvailabilityZone = try reader["secondaryAvailabilityZone"].readIfPresent()
        value.backupRetentionEnabled = try reader["backupRetentionEnabled"].readIfPresent()
        value.pendingModifiedValues = try reader["pendingModifiedValues"].readIfPresent(with: LightsailClientTypes.PendingModifiedRelationalDatabaseValues.read(from:))
        value.engine = try reader["engine"].readIfPresent()
        value.engineVersion = try reader["engineVersion"].readIfPresent()
        value.latestRestorableTime = try reader["latestRestorableTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.masterUsername = try reader["masterUsername"].readIfPresent()
        value.parameterApplyStatus = try reader["parameterApplyStatus"].readIfPresent()
        value.preferredBackupWindow = try reader["preferredBackupWindow"].readIfPresent()
        value.preferredMaintenanceWindow = try reader["preferredMaintenanceWindow"].readIfPresent()
        value.publiclyAccessible = try reader["publiclyAccessible"].readIfPresent()
        value.masterEndpoint = try reader["masterEndpoint"].readIfPresent(with: LightsailClientTypes.RelationalDatabaseEndpoint.read(from:))
        value.pendingMaintenanceActions = try reader["pendingMaintenanceActions"].readListIfPresent(memberReadingClosure: LightsailClientTypes.PendingMaintenanceAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.caCertificateIdentifier = try reader["caCertificateIdentifier"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.PendingMaintenanceAction {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.PendingMaintenanceAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.PendingMaintenanceAction()
        value.action = try reader["action"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.currentApplyDate = try reader["currentApplyDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LightsailClientTypes.RelationalDatabaseEndpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.RelationalDatabaseEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.RelationalDatabaseEndpoint()
        value.port = try reader["port"].readIfPresent()
        value.address = try reader["address"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.PendingModifiedRelationalDatabaseValues {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.PendingModifiedRelationalDatabaseValues {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.PendingModifiedRelationalDatabaseValues()
        value.masterUserPassword = try reader["masterUserPassword"].readIfPresent()
        value.engineVersion = try reader["engineVersion"].readIfPresent()
        value.backupRetentionEnabled = try reader["backupRetentionEnabled"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.RelationalDatabaseHardware {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.RelationalDatabaseHardware {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.RelationalDatabaseHardware()
        value.cpuCount = try reader["cpuCount"].readIfPresent()
        value.diskSizeInGb = try reader["diskSizeInGb"].readIfPresent()
        value.ramSizeInGb = try reader["ramSizeInGb"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.RelationalDatabaseBlueprint {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.RelationalDatabaseBlueprint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.RelationalDatabaseBlueprint()
        value.blueprintId = try reader["blueprintId"].readIfPresent()
        value.engine = try reader["engine"].readIfPresent()
        value.engineVersion = try reader["engineVersion"].readIfPresent()
        value.engineDescription = try reader["engineDescription"].readIfPresent()
        value.engineVersionDescription = try reader["engineVersionDescription"].readIfPresent()
        value.isEngineDefault = try reader["isEngineDefault"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.RelationalDatabaseBundle {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.RelationalDatabaseBundle {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.RelationalDatabaseBundle()
        value.bundleId = try reader["bundleId"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.price = try reader["price"].readIfPresent()
        value.ramSizeInGb = try reader["ramSizeInGb"].readIfPresent()
        value.diskSizeInGb = try reader["diskSizeInGb"].readIfPresent()
        value.transferPerMonthInGb = try reader["transferPerMonthInGb"].readIfPresent()
        value.cpuCount = try reader["cpuCount"].readIfPresent()
        value.isEncrypted = try reader["isEncrypted"].readIfPresent()
        value.isActive = try reader["isActive"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.RelationalDatabaseEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.RelationalDatabaseEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.RelationalDatabaseEvent()
        value.resource = try reader["resource"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.message = try reader["message"].readIfPresent()
        value.eventCategories = try reader["eventCategories"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LightsailClientTypes.LogEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.LogEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.LogEvent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.RelationalDatabaseParameter {

    static func write(value: LightsailClientTypes.RelationalDatabaseParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowedValues"].write(value.allowedValues)
        try writer["applyMethod"].write(value.applyMethod)
        try writer["applyType"].write(value.applyType)
        try writer["dataType"].write(value.dataType)
        try writer["description"].write(value.description)
        try writer["isModifiable"].write(value.isModifiable)
        try writer["parameterName"].write(value.parameterName)
        try writer["parameterValue"].write(value.parameterValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.RelationalDatabaseParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.RelationalDatabaseParameter()
        value.allowedValues = try reader["allowedValues"].readIfPresent()
        value.applyMethod = try reader["applyMethod"].readIfPresent()
        value.applyType = try reader["applyType"].readIfPresent()
        value.dataType = try reader["dataType"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.isModifiable = try reader["isModifiable"].readIfPresent()
        value.parameterName = try reader["parameterName"].readIfPresent()
        value.parameterValue = try reader["parameterValue"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.RelationalDatabaseSnapshot {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.RelationalDatabaseSnapshot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.RelationalDatabaseSnapshot()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LightsailClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.engine = try reader["engine"].readIfPresent()
        value.engineVersion = try reader["engineVersion"].readIfPresent()
        value.sizeInGb = try reader["sizeInGb"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.fromRelationalDatabaseName = try reader["fromRelationalDatabaseName"].readIfPresent()
        value.fromRelationalDatabaseArn = try reader["fromRelationalDatabaseArn"].readIfPresent()
        value.fromRelationalDatabaseBundleId = try reader["fromRelationalDatabaseBundleId"].readIfPresent()
        value.fromRelationalDatabaseBlueprintId = try reader["fromRelationalDatabaseBlueprintId"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.SetupHistory {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.SetupHistory {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.SetupHistory()
        value.operationId = try reader["operationId"].readIfPresent()
        value.request = try reader["request"].readIfPresent(with: LightsailClientTypes.SetupRequest.read(from:))
        value.resource = try reader["resource"].readIfPresent(with: LightsailClientTypes.SetupHistoryResource.read(from:))
        value.executionDetails = try reader["executionDetails"].readListIfPresent(memberReadingClosure: LightsailClientTypes.SetupExecutionDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.SetupExecutionDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.SetupExecutionDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.SetupExecutionDetails()
        value.command = try reader["command"].readIfPresent()
        value.dateTime = try reader["dateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.standardError = try reader["standardError"].readIfPresent()
        value.standardOutput = try reader["standardOutput"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.SetupHistoryResource {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.SetupHistoryResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.SetupHistoryResource()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.SetupRequest {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.SetupRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.SetupRequest()
        value.instanceName = try reader["instanceName"].readIfPresent()
        value.domainNames = try reader["domainNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.certificateProvider = try reader["certificateProvider"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.StaticIp {

    static func read(from reader: SmithyJSON.Reader) throws -> LightsailClientTypes.StaticIp {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LightsailClientTypes.StaticIp()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.supportCode = try reader["supportCode"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["location"].readIfPresent(with: LightsailClientTypes.ResourceLocation.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.ipAddress = try reader["ipAddress"].readIfPresent()
        value.attachedTo = try reader["attachedTo"].readIfPresent()
        value.isAttached = try reader["isAttached"].readIfPresent()
        return value
    }
}

extension LightsailClientTypes.PortInfo {

    static func write(value: LightsailClientTypes.PortInfo?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cidrListAliases"].writeList(value.cidrListAliases, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["cidrs"].writeList(value.cidrs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["fromPort"].write(value.fromPort)
        try writer["ipv6Cidrs"].writeList(value.ipv6Cidrs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["protocol"].write(value.`protocol`)
        try writer["toPort"].write(value.toPort)
    }
}

extension LightsailClientTypes.InstanceEntry {

    static func write(value: LightsailClientTypes.InstanceEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["availabilityZone"].write(value.availabilityZone)
        try writer["instanceType"].write(value.instanceType)
        try writer["portInfoSource"].write(value.portInfoSource)
        try writer["sourceName"].write(value.sourceName)
        try writer["userData"].write(value.userData)
    }
}

extension LightsailClientTypes.ContainerServiceDeploymentRequest {

    static func write(value: LightsailClientTypes.ContainerServiceDeploymentRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containers"].writeMap(value.containers, valueWritingClosure: LightsailClientTypes.Container.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["publicEndpoint"].write(value.publicEndpoint, with: LightsailClientTypes.EndpointRequest.write(value:to:))
    }
}

extension LightsailClientTypes.EndpointRequest {

    static func write(value: LightsailClientTypes.EndpointRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerName"].write(value.containerName)
        try writer["containerPort"].write(value.containerPort)
        try writer["healthCheck"].write(value.healthCheck, with: LightsailClientTypes.ContainerServiceHealthCheckConfig.write(value:to:))
    }
}

extension LightsailClientTypes.PrivateRegistryAccessRequest {

    static func write(value: LightsailClientTypes.PrivateRegistryAccessRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ecrImagePullerRole"].write(value.ecrImagePullerRole, with: LightsailClientTypes.ContainerServiceECRImagePullerRoleRequest.write(value:to:))
    }
}

extension LightsailClientTypes.ContainerServiceECRImagePullerRoleRequest {

    static func write(value: LightsailClientTypes.ContainerServiceECRImagePullerRoleRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["isActive"].write(value.isActive)
    }
}

extension LightsailClientTypes.AddOnRequest {

    static func write(value: LightsailClientTypes.AddOnRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addOnType"].write(value.addOnType)
        try writer["autoSnapshotAddOnRequest"].write(value.autoSnapshotAddOnRequest, with: LightsailClientTypes.AutoSnapshotAddOnRequest.write(value:to:))
        try writer["stopInstanceOnIdleRequest"].write(value.stopInstanceOnIdleRequest, with: LightsailClientTypes.StopInstanceOnIdleRequest.write(value:to:))
    }
}

extension LightsailClientTypes.StopInstanceOnIdleRequest {

    static func write(value: LightsailClientTypes.StopInstanceOnIdleRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["duration"].write(value.duration)
        try writer["threshold"].write(value.threshold)
    }
}

extension LightsailClientTypes.AutoSnapshotAddOnRequest {

    static func write(value: LightsailClientTypes.AutoSnapshotAddOnRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["snapshotTimeOfDay"].write(value.snapshotTimeOfDay)
    }
}

extension LightsailClientTypes.InputOrigin {

    static func write(value: LightsailClientTypes.InputOrigin?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["protocolPolicy"].write(value.protocolPolicy)
        try writer["regionName"].write(value.regionName)
        try writer["responseTimeout"].write(value.responseTimeout)
    }
}

extension LightsailClientTypes.DiskMap {

    static func write(value: LightsailClientTypes.DiskMap?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["newDiskName"].write(value.newDiskName)
        try writer["originalDiskPath"].write(value.originalDiskPath)
    }
}

public enum LightsailClientTypes {}
