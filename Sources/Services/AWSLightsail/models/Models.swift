// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Lightsail throws this exception when the user cannot be authenticated or uses invalid credentials to access a resource.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let code: Swift.String?
    let docs: Swift.String?
    let message: Swift.String?
    let tip: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

extension LightsailClientTypes {
    public enum AccessDirection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case inbound
        case outbound
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessDirection] {
            return [
                .inbound,
                .outbound,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .inbound: return "inbound"
            case .outbound: return "outbound"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccessDirection(rawValue: rawValue) ?? AccessDirection.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.AccessKey: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyId
        case createdAt
        case lastUsed
        case secretAccessKey
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKeyId = self.accessKeyId {
            try encodeContainer.encode(accessKeyId, forKey: .accessKeyId)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let lastUsed = self.lastUsed {
            try encodeContainer.encode(lastUsed, forKey: .lastUsed)
        }
        if let secretAccessKey = self.secretAccessKey {
            try encodeContainer.encode(secretAccessKey, forKey: .secretAccessKey)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKeyId)
        accessKeyId = accessKeyIdDecoded
        let secretAccessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretAccessKey)
        secretAccessKey = secretAccessKeyDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.StatusType.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUsedDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AccessKeyLastUsed.self, forKey: .lastUsed)
        lastUsed = lastUsedDecoded
    }
}

extension LightsailClientTypes.AccessKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessKey(createdAt: \(Swift.String(describing: createdAt)), lastUsed: \(Swift.String(describing: lastUsed)), secretAccessKey: \(Swift.String(describing: secretAccessKey)), status: \(Swift.String(describing: status)), accessKeyId: \"CONTENT_REDACTED\")"}
}

extension LightsailClientTypes {
    /// Describes an access key for an Amazon Lightsail bucket. Access keys grant full programmatic access to the specified bucket and its objects. You can have a maximum of two access keys per bucket. Use the [CreateBucketAccessKey](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html) action to create an access key for a specific bucket. For more information about access keys, see [Creating access keys for a bucket in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys) in the Amazon Lightsail Developer Guide. The secretAccessKey value is returned only in response to the CreateBucketAccessKey action. You can get a secret access key only when you first create an access key; you cannot get the secret access key later. If you lose the secret access key, you must create a new access key.
    public struct AccessKey: Swift.Equatable {
        /// The ID of the access key.
        public var accessKeyId: Swift.String?
        /// The timestamp when the access key was created.
        public var createdAt: ClientRuntime.Date?
        /// An object that describes the last time the access key was used. This object does not include data in the response of a [CreateBucketAccessKey](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html) action. If the access key has not been used, the region and serviceName values are N/A, and the lastUsedDate value is null.
        public var lastUsed: LightsailClientTypes.AccessKeyLastUsed?
        /// The secret access key used to sign requests. You should store the secret access key in a safe location. We recommend that you delete the access key if the secret access key is compromised.
        public var secretAccessKey: Swift.String?
        /// The status of the access key. A status of Active means that the key is valid, while Inactive means it is not.
        public var status: LightsailClientTypes.StatusType?

        public init (
            accessKeyId: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            lastUsed: LightsailClientTypes.AccessKeyLastUsed? = nil,
            secretAccessKey: Swift.String? = nil,
            status: LightsailClientTypes.StatusType? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.createdAt = createdAt
            self.lastUsed = lastUsed
            self.secretAccessKey = secretAccessKey
            self.status = status
        }
    }

}

extension LightsailClientTypes.AccessKeyLastUsed: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUsedDate
        case region
        case serviceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUsedDate = self.lastUsedDate {
            try encodeContainer.encodeTimestamp(lastUsedDate, format: .epochSeconds, forKey: .lastUsedDate)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let serviceName = self.serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastUsedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUsedDate)
        lastUsedDate = lastUsedDateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the last time an access key was used. This object does not include data in the response of a [CreateBucketAccessKey](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html) action.
    public struct AccessKeyLastUsed: Swift.Equatable {
        /// The date and time when the access key was most recently used. This value is null if the access key has not been used.
        public var lastUsedDate: ClientRuntime.Date?
        /// The Amazon Web Services Region where this access key was most recently used. This value is N/A if the access key has not been used.
        public var region: Swift.String?
        /// The name of the Amazon Web Services service with which this access key was most recently used. This value is N/A if the access key has not been used.
        public var serviceName: Swift.String?

        public init (
            lastUsedDate: ClientRuntime.Date? = nil,
            region: Swift.String? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.lastUsedDate = lastUsedDate
            self.region = region
            self.serviceName = serviceName
        }
    }

}

extension LightsailClientTypes.AccessRules: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowPublicOverrides
        case getObject
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowPublicOverrides = self.allowPublicOverrides {
            try encodeContainer.encode(allowPublicOverrides, forKey: .allowPublicOverrides)
        }
        if let getObject = self.getObject {
            try encodeContainer.encode(getObject.rawValue, forKey: .getObject)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let getObjectDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AccessType.self, forKey: .getObject)
        getObject = getObjectDecoded
        let allowPublicOverridesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowPublicOverrides)
        allowPublicOverrides = allowPublicOverridesDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the anonymous access permissions for an Amazon Lightsail bucket and its objects. For more information about bucket access permissions, see [Understanding bucket permissions in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-understanding-bucket-permissions) in the Amazon Lightsail Developer Guide.
    public struct AccessRules: Swift.Equatable {
        /// A Boolean value that indicates whether the access control list (ACL) permissions that are applied to individual objects override the getObject option that is currently specified. When this is true, you can use the [PutObjectAcl](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectAcl.html) Amazon S3 API action to set individual objects to public (read-only) using the public-read ACL, or to private using the private ACL.
        public var allowPublicOverrides: Swift.Bool?
        /// Specifies the anonymous access to all objects in a bucket. The following options can be specified:
        ///
        /// * public - Sets all objects in the bucket to public (read-only), making them readable by anyone in the world. If the getObject value is set to public, then all objects in the bucket default to public regardless of the allowPublicOverrides value.
        ///
        /// * private - Sets all objects in the bucket to private, making them readable only by you or anyone you give access to. If the getObject value is set to private, and the allowPublicOverrides value is set to true, then all objects in the bucket default to private unless they are configured with a public-read ACL. Individual objects with a public-read ACL are readable by anyone in the world.
        public var getObject: LightsailClientTypes.AccessType?

        public init (
            allowPublicOverrides: Swift.Bool? = nil,
            getObject: LightsailClientTypes.AccessType? = nil
        )
        {
            self.allowPublicOverrides = allowPublicOverrides
            self.getObject = getObject
        }
    }

}

extension LightsailClientTypes {
    public enum AccessType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `private`
        case `public`
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessType] {
            return [
                .private,
                .public,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .private: return "private"
            case .public: return "public"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccessType(rawValue: rawValue) ?? AccessType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.AccountLevelBpaSync: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bpaImpactsLightsail
        case lastSyncedAt
        case message
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bpaImpactsLightsail = self.bpaImpactsLightsail {
            try encodeContainer.encode(bpaImpactsLightsail, forKey: .bpaImpactsLightsail)
        }
        if let lastSyncedAt = self.lastSyncedAt {
            try encodeContainer.encodeTimestamp(lastSyncedAt, format: .epochSeconds, forKey: .lastSyncedAt)
        }
        if let message = self.message {
            try encodeContainer.encode(message.rawValue, forKey: .message)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AccountLevelBpaSyncStatus.self, forKey: .status)
        status = statusDecoded
        let lastSyncedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastSyncedAt)
        lastSyncedAt = lastSyncedAtDecoded
        let messageDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BPAStatusMessage.self, forKey: .message)
        message = messageDecoded
        let bpaImpactsLightsailDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .bpaImpactsLightsail)
        bpaImpactsLightsail = bpaImpactsLightsailDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the synchronization status of the Amazon Simple Storage Service (Amazon S3) account-level block public access (BPA) feature for your Lightsail buckets. The account-level BPA feature of Amazon S3 provides centralized controls to limit public access to all Amazon S3 buckets in an account. BPA can make all Amazon S3 buckets in an Amazon Web Services account private regardless of the individual bucket and object permissions that are configured. Lightsail buckets take into account the Amazon S3 account-level BPA configuration when allowing or denying public access. To do this, Lightsail periodically fetches the account-level BPA configuration from Amazon S3. When the account-level BPA status is InSync, the Amazon S3 account-level BPA configuration is synchronized and it applies to your Lightsail buckets. For more information about Amazon Simple Storage Service account-level BPA and how it affects Lightsail buckets, see [Block public access for buckets in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-block-public-access-for-buckets) in the Amazon Lightsail Developer Guide.
    public struct AccountLevelBpaSync: Swift.Equatable {
        /// A Boolean value that indicates whether account-level block public access is affecting your Lightsail buckets.
        public var bpaImpactsLightsail: Swift.Bool?
        /// The timestamp of when the account-level BPA configuration was last synchronized. This value is null when the account-level BPA configuration has not been synchronized.
        public var lastSyncedAt: ClientRuntime.Date?
        /// A message that provides a reason for a Failed or Defaulted synchronization status. The following messages are possible:
        ///
        /// * SYNC_ON_HOLD - The synchronization has not yet happened. This status message occurs immediately after you create your first Lightsail bucket. This status message should change after the first synchronization happens, approximately 1 hour after the first bucket is created.
        ///
        /// * DEFAULTED_FOR_SLR_MISSING - The synchronization failed because the required service-linked role is missing from your Amazon Web Services account. The account-level BPA configuration for your Lightsail buckets is defaulted to active until the synchronization can occur. This means that all your buckets are private and not publicly accessible. For more information about how to create the required service-linked role to allow synchronization, see [Using Service-Linked Roles for Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-using-service-linked-roles) in the Amazon Lightsail Developer Guide.
        ///
        /// * DEFAULTED_FOR_SLR_MISSING_ON_HOLD - The synchronization failed because the required service-linked role is missing from your Amazon Web Services account. Account-level BPA is not yet configured for your Lightsail buckets. Therefore, only the bucket access permissions and individual object access permissions apply to your Lightsail buckets. For more information about how to create the required service-linked role to allow synchronization, see [Using Service-Linked Roles for Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-using-service-linked-roles) in the Amazon Lightsail Developer Guide.
        ///
        /// * Unknown - The reason that synchronization failed is unknown. Contact Amazon Web Services Support for more information.
        public var message: LightsailClientTypes.BPAStatusMessage?
        /// The status of the account-level BPA synchronization. The following statuses are possible:
        ///
        /// * InSync - Account-level BPA is synchronized. The Amazon S3 account-level BPA configuration applies to your Lightsail buckets.
        ///
        /// * NeverSynced - Synchronization has not yet happened. The Amazon S3 account-level BPA configuration does not apply to your Lightsail buckets.
        ///
        /// * Failed - Synchronization failed. The Amazon S3 account-level BPA configuration does not apply to your Lightsail buckets.
        ///
        /// * Defaulted - Synchronization failed and account-level BPA for your Lightsail buckets is defaulted to active.
        ///
        ///
        /// You might need to complete further actions if the status is Failed or Defaulted. The message parameter provides more information for those statuses.
        public var status: LightsailClientTypes.AccountLevelBpaSyncStatus?

        public init (
            bpaImpactsLightsail: Swift.Bool? = nil,
            lastSyncedAt: ClientRuntime.Date? = nil,
            message: LightsailClientTypes.BPAStatusMessage? = nil,
            status: LightsailClientTypes.AccountLevelBpaSyncStatus? = nil
        )
        {
            self.bpaImpactsLightsail = bpaImpactsLightsail
            self.lastSyncedAt = lastSyncedAt
            self.message = message
            self.status = status
        }
    }

}

extension LightsailClientTypes {
    public enum AccountLevelBpaSyncStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case defaulted
        case failed
        case insync
        case neversynced
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountLevelBpaSyncStatus] {
            return [
                .defaulted,
                .failed,
                .insync,
                .neversynced,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .defaulted: return "Defaulted"
            case .failed: return "Failed"
            case .insync: return "InSync"
            case .neversynced: return "NeverSynced"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccountLevelBpaSyncStatus(rawValue: rawValue) ?? AccountLevelBpaSyncStatus.sdkUnknown(rawValue)
        }
    }
}

extension AccountSetupInProgressException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccountSetupInProgressExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Lightsail throws this exception when an account is still in the setup in progress state.
public struct AccountSetupInProgressException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct AccountSetupInProgressExceptionBody: Swift.Equatable {
    let code: Swift.String?
    let docs: Swift.String?
    let message: Swift.String?
    let tip: Swift.String?
}

extension AccountSetupInProgressExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

extension LightsailClientTypes.AddOn: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case nextSnapshotTimeOfDay
        case snapshotTimeOfDay
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nextSnapshotTimeOfDay = self.nextSnapshotTimeOfDay {
            try encodeContainer.encode(nextSnapshotTimeOfDay, forKey: .nextSnapshotTimeOfDay)
        }
        if let snapshotTimeOfDay = self.snapshotTimeOfDay {
            try encodeContainer.encode(snapshotTimeOfDay, forKey: .snapshotTimeOfDay)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let snapshotTimeOfDayDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotTimeOfDay)
        snapshotTimeOfDay = snapshotTimeOfDayDecoded
        let nextSnapshotTimeOfDayDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextSnapshotTimeOfDay)
        nextSnapshotTimeOfDay = nextSnapshotTimeOfDayDecoded
    }
}

extension LightsailClientTypes {
    /// Describes an add-on that is enabled for an Amazon Lightsail resource.
    public struct AddOn: Swift.Equatable {
        /// The name of the add-on.
        public var name: Swift.String?
        /// The next daily time an automatic snapshot will be created. The time shown is in HH:00 format, and in Coordinated Universal Time (UTC). The snapshot is automatically created between the time shown and up to 45 minutes after.
        public var nextSnapshotTimeOfDay: Swift.String?
        /// The daily time when an automatic snapshot is created. The time shown is in HH:00 format, and in Coordinated Universal Time (UTC). The snapshot is automatically created between the time shown and up to 45 minutes after.
        public var snapshotTimeOfDay: Swift.String?
        /// The status of the add-on.
        public var status: Swift.String?

        public init (
            name: Swift.String? = nil,
            nextSnapshotTimeOfDay: Swift.String? = nil,
            snapshotTimeOfDay: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.name = name
            self.nextSnapshotTimeOfDay = nextSnapshotTimeOfDay
            self.snapshotTimeOfDay = snapshotTimeOfDay
            self.status = status
        }
    }

}

extension LightsailClientTypes.AddOnRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOnType
        case autoSnapshotAddOnRequest
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOnType = self.addOnType {
            try encodeContainer.encode(addOnType.rawValue, forKey: .addOnType)
        }
        if let autoSnapshotAddOnRequest = self.autoSnapshotAddOnRequest {
            try encodeContainer.encode(autoSnapshotAddOnRequest, forKey: .autoSnapshotAddOnRequest)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addOnTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AddOnType.self, forKey: .addOnType)
        addOnType = addOnTypeDecoded
        let autoSnapshotAddOnRequestDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AutoSnapshotAddOnRequest.self, forKey: .autoSnapshotAddOnRequest)
        autoSnapshotAddOnRequest = autoSnapshotAddOnRequestDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a request to enable, modify, or disable an add-on for an Amazon Lightsail resource. An additional cost may be associated with enabling add-ons. For more information, see the [Lightsail pricing page](https://aws.amazon.com/lightsail/pricing/).
    public struct AddOnRequest: Swift.Equatable {
        /// The add-on type.
        /// This member is required.
        public var addOnType: LightsailClientTypes.AddOnType?
        /// An object that represents additional parameters when enabling or modifying the automatic snapshot add-on.
        public var autoSnapshotAddOnRequest: LightsailClientTypes.AutoSnapshotAddOnRequest?

        public init (
            addOnType: LightsailClientTypes.AddOnType? = nil,
            autoSnapshotAddOnRequest: LightsailClientTypes.AutoSnapshotAddOnRequest? = nil
        )
        {
            self.addOnType = addOnType
            self.autoSnapshotAddOnRequest = autoSnapshotAddOnRequest
        }
    }

}

extension LightsailClientTypes {
    public enum AddOnType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case autosnapshot
        case sdkUnknown(Swift.String)

        public static var allCases: [AddOnType] {
            return [
                .autosnapshot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .autosnapshot: return "AutoSnapshot"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AddOnType(rawValue: rawValue) ?? AddOnType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Alarm: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case comparisonOperator
        case contactProtocols
        case createdAt
        case datapointsToAlarm
        case evaluationPeriods
        case location
        case metricName
        case monitoredResourceInfo
        case name
        case notificationEnabled
        case notificationTriggers
        case period
        case resourceType
        case state
        case statistic
        case supportCode
        case threshold
        case treatMissingData
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let comparisonOperator = self.comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let contactProtocols = contactProtocols {
            var contactProtocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contactProtocols)
            for contactprotocol0 in contactProtocols {
                try contactProtocolsContainer.encode(contactprotocol0.rawValue)
            }
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let datapointsToAlarm = self.datapointsToAlarm {
            try encodeContainer.encode(datapointsToAlarm, forKey: .datapointsToAlarm)
        }
        if let evaluationPeriods = self.evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let monitoredResourceInfo = self.monitoredResourceInfo {
            try encodeContainer.encode(monitoredResourceInfo, forKey: .monitoredResourceInfo)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationEnabled = self.notificationEnabled {
            try encodeContainer.encode(notificationEnabled, forKey: .notificationEnabled)
        }
        if let notificationTriggers = notificationTriggers {
            var notificationTriggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notificationTriggers)
            for alarmstate0 in notificationTriggers {
                try notificationTriggersContainer.encode(alarmstate0.rawValue)
            }
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let statistic = self.statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let threshold = self.threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let treatMissingData = self.treatMissingData {
            try encodeContainer.encode(treatMissingData.rawValue, forKey: .treatMissingData)
        }
        if let unit = self.unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let monitoredResourceInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MonitoredResourceInfo.self, forKey: .monitoredResourceInfo)
        monitoredResourceInfo = monitoredResourceInfoDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period) ?? 0
        period = periodDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let datapointsToAlarmDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .datapointsToAlarm)
        datapointsToAlarm = datapointsToAlarmDecoded
        let treatMissingDataDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.TreatMissingData.self, forKey: .treatMissingData)
        treatMissingData = treatMissingDataDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AlarmState.self, forKey: .state)
        state = stateDecoded
        let unitDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricUnit.self, forKey: .unit)
        unit = unitDecoded
        let contactProtocolsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContactProtocol?].self, forKey: .contactProtocols)
        var contactProtocolsDecoded0:[LightsailClientTypes.ContactProtocol]? = nil
        if let contactProtocolsContainer = contactProtocolsContainer {
            contactProtocolsDecoded0 = [LightsailClientTypes.ContactProtocol]()
            for enum0 in contactProtocolsContainer {
                if let enum0 = enum0 {
                    contactProtocolsDecoded0?.append(enum0)
                }
            }
        }
        contactProtocols = contactProtocolsDecoded0
        let notificationTriggersContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AlarmState?].self, forKey: .notificationTriggers)
        var notificationTriggersDecoded0:[LightsailClientTypes.AlarmState]? = nil
        if let notificationTriggersContainer = notificationTriggersContainer {
            notificationTriggersDecoded0 = [LightsailClientTypes.AlarmState]()
            for enum0 in notificationTriggersContainer {
                if let enum0 = enum0 {
                    notificationTriggersDecoded0?.append(enum0)
                }
            }
        }
        notificationTriggers = notificationTriggersDecoded0
        let notificationEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .notificationEnabled)
        notificationEnabled = notificationEnabledDecoded
    }
}

extension LightsailClientTypes {
    /// Describes an alarm. An alarm is a way to monitor your Lightsail resource metrics. For more information, see [Alarms in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms).
    public struct Alarm: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the alarm.
        public var arn: Swift.String?
        /// The arithmetic operation used when comparing the specified statistic and threshold.
        public var comparisonOperator: LightsailClientTypes.ComparisonOperator?
        /// The contact protocols for the alarm, such as Email, SMS (text messaging), or both.
        public var contactProtocols: [LightsailClientTypes.ContactProtocol]?
        /// The timestamp when the alarm was created.
        public var createdAt: ClientRuntime.Date?
        /// The number of data points that must not within the specified threshold to trigger the alarm.
        public var datapointsToAlarm: Swift.Int?
        /// The number of periods over which data is compared to the specified threshold.
        public var evaluationPeriods: Swift.Int?
        /// An object that lists information about the location of the alarm.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the metric associated with the alarm.
        public var metricName: LightsailClientTypes.MetricName?
        /// An object that lists information about the resource monitored by the alarm.
        public var monitoredResourceInfo: LightsailClientTypes.MonitoredResourceInfo?
        /// The name of the alarm.
        public var name: Swift.String?
        /// Indicates whether the alarm is enabled.
        public var notificationEnabled: Swift.Bool?
        /// The alarm states that trigger a notification.
        public var notificationTriggers: [LightsailClientTypes.AlarmState]?
        /// The period, in seconds, over which the statistic is applied.
        public var period: Swift.Int
        /// The Lightsail resource type (e.g., Alarm).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The current state of the alarm. An alarm has the following possible states:
        ///
        /// * ALARM - The metric is outside of the defined threshold.
        ///
        /// * INSUFFICIENT_DATA - The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.
        ///
        /// * OK - The metric is within the defined threshold.
        public var state: LightsailClientTypes.AlarmState?
        /// The statistic for the metric associated with the alarm. The following statistics are available:
        ///
        /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
        ///
        /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
        ///
        /// * Sum - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
        ///
        /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
        ///
        /// * SampleCount - The count, or number, of data points used for the statistical calculation.
        public var statistic: LightsailClientTypes.MetricStatistic?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail alarm. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The value against which the specified statistic is compared.
        public var threshold: Swift.Double?
        /// Specifies how the alarm handles missing data points. An alarm can treat missing data in the following ways:
        ///
        /// * breaching - Assume the missing data is not within the threshold. Missing data counts towards the number of times the metric is not within the threshold.
        ///
        /// * notBreaching - Assume the missing data is within the threshold. Missing data does not count towards the number of times the metric is not within the threshold.
        ///
        /// * ignore - Ignore the missing data. Maintains the current alarm state.
        ///
        /// * missing - Missing data is treated as missing.
        public var treatMissingData: LightsailClientTypes.TreatMissingData?
        /// The unit of the metric associated with the alarm.
        public var unit: LightsailClientTypes.MetricUnit?

        public init (
            arn: Swift.String? = nil,
            comparisonOperator: LightsailClientTypes.ComparisonOperator? = nil,
            contactProtocols: [LightsailClientTypes.ContactProtocol]? = nil,
            createdAt: ClientRuntime.Date? = nil,
            datapointsToAlarm: Swift.Int? = nil,
            evaluationPeriods: Swift.Int? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            metricName: LightsailClientTypes.MetricName? = nil,
            monitoredResourceInfo: LightsailClientTypes.MonitoredResourceInfo? = nil,
            name: Swift.String? = nil,
            notificationEnabled: Swift.Bool? = nil,
            notificationTriggers: [LightsailClientTypes.AlarmState]? = nil,
            period: Swift.Int = 0,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            state: LightsailClientTypes.AlarmState? = nil,
            statistic: LightsailClientTypes.MetricStatistic? = nil,
            supportCode: Swift.String? = nil,
            threshold: Swift.Double? = nil,
            treatMissingData: LightsailClientTypes.TreatMissingData? = nil,
            unit: LightsailClientTypes.MetricUnit? = nil
        )
        {
            self.arn = arn
            self.comparisonOperator = comparisonOperator
            self.contactProtocols = contactProtocols
            self.createdAt = createdAt
            self.datapointsToAlarm = datapointsToAlarm
            self.evaluationPeriods = evaluationPeriods
            self.location = location
            self.metricName = metricName
            self.monitoredResourceInfo = monitoredResourceInfo
            self.name = name
            self.notificationEnabled = notificationEnabled
            self.notificationTriggers = notificationTriggers
            self.period = period
            self.resourceType = resourceType
            self.state = state
            self.statistic = statistic
            self.supportCode = supportCode
            self.threshold = threshold
            self.treatMissingData = treatMissingData
            self.unit = unit
        }
    }

}

extension LightsailClientTypes {
    public enum AlarmState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alarm
        case insufficientData
        case ok
        case sdkUnknown(Swift.String)

        public static var allCases: [AlarmState] {
            return [
                .alarm,
                .insufficientData,
                .ok,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "ALARM"
            case .insufficientData: return "INSUFFICIENT_DATA"
            case .ok: return "OK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AlarmState(rawValue: rawValue) ?? AlarmState.sdkUnknown(rawValue)
        }
    }
}

extension AllocateStaticIpInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let staticIpName = self.staticIpName {
            try encodeContainer.encode(staticIpName, forKey: .staticIpName)
        }
    }
}

extension AllocateStaticIpInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AllocateStaticIpInput: Swift.Equatable {
    /// The name of the static IP address.
    /// This member is required.
    public var staticIpName: Swift.String?

    public init (
        staticIpName: Swift.String? = nil
    )
    {
        self.staticIpName = staticIpName
    }
}

struct AllocateStaticIpInputBody: Swift.Equatable {
    let staticIpName: Swift.String?
}

extension AllocateStaticIpInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .staticIpName)
        staticIpName = staticIpNameDecoded
    }
}

extension AllocateStaticIpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AllocateStaticIpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AllocateStaticIpOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AllocateStaticIpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AllocateStaticIpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct AllocateStaticIpOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct AllocateStaticIpOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension AllocateStaticIpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension AttachCertificateToDistributionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case distributionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = self.certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let distributionName = self.distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
    }
}

extension AttachCertificateToDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AttachCertificateToDistributionInput: Swift.Equatable {
    /// The name of the certificate to attach to a distribution. Only certificates with a status of ISSUED can be attached to a distribution. Use the GetCertificates action to get a list of certificate names that you can specify. This is the name of the certificate resource type and is used only to reference the certificate in other API actions. It can be different than the domain name of the certificate. For example, your certificate name might be WordPress-Blog-Certificate and the domain name of the certificate might be example.com.
    /// This member is required.
    public var certificateName: Swift.String?
    /// The name of the distribution that the certificate will be attached to. Use the GetDistributions action to get a list of distribution names that you can specify.
    /// This member is required.
    public var distributionName: Swift.String?

    public init (
        certificateName: Swift.String? = nil,
        distributionName: Swift.String? = nil
    )
    {
        self.certificateName = certificateName
        self.distributionName = distributionName
    }
}

struct AttachCertificateToDistributionInputBody: Swift.Equatable {
    let distributionName: Swift.String?
    let certificateName: Swift.String?
}

extension AttachCertificateToDistributionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case distributionName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
    }
}

extension AttachCertificateToDistributionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachCertificateToDistributionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AttachCertificateToDistributionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachCertificateToDistributionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AttachCertificateToDistributionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct AttachCertificateToDistributionOutputResponse: Swift.Equatable {
    /// An object that describes the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct AttachCertificateToDistributionOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension AttachCertificateToDistributionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension AttachDiskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
        case diskPath
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskName = self.diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
        if let diskPath = self.diskPath {
            try encodeContainer.encode(diskPath, forKey: .diskPath)
        }
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

extension AttachDiskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AttachDiskInput: Swift.Equatable {
    /// The unique Lightsail disk name (e.g., my-disk).
    /// This member is required.
    public var diskName: Swift.String?
    /// The disk path to expose to the instance (e.g., /dev/xvdf).
    /// This member is required.
    public var diskPath: Swift.String?
    /// The name of the Lightsail instance where you want to utilize the storage disk.
    /// This member is required.
    public var instanceName: Swift.String?

    public init (
        diskName: Swift.String? = nil,
        diskPath: Swift.String? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.diskName = diskName
        self.diskPath = diskPath
        self.instanceName = instanceName
    }
}

struct AttachDiskInputBody: Swift.Equatable {
    let diskName: Swift.String?
    let instanceName: Swift.String?
    let diskPath: Swift.String?
}

extension AttachDiskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
        case diskPath
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let diskPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskPath)
        diskPath = diskPathDecoded
    }
}

extension AttachDiskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachDiskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AttachDiskOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachDiskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AttachDiskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct AttachDiskOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct AttachDiskOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension AttachDiskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension AttachInstancesToLoadBalancerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for resourcename0 in instanceNames {
                try instanceNamesContainer.encode(resourcename0)
            }
        }
        if let loadBalancerName = self.loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

extension AttachInstancesToLoadBalancerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AttachInstancesToLoadBalancerInput: Swift.Equatable {
    /// An array of strings representing the instance name(s) you want to attach to your load balancer. An instance must be running before you can attach it to your load balancer. There are no additional limits on the number of instances you can attach to your load balancer, aside from the limit of Lightsail instances you can create in your account (20).
    /// This member is required.
    public var instanceNames: [Swift.String]?
    /// The name of the load balancer.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init (
        instanceNames: [Swift.String]? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.instanceNames = instanceNames
        self.loadBalancerName = loadBalancerName
    }
}

struct AttachInstancesToLoadBalancerInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
    let instanceNames: [Swift.String]?
}

extension AttachInstancesToLoadBalancerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let instanceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[Swift.String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [Swift.String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
    }
}

extension AttachInstancesToLoadBalancerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachInstancesToLoadBalancerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AttachInstancesToLoadBalancerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachInstancesToLoadBalancerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AttachInstancesToLoadBalancerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct AttachInstancesToLoadBalancerOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct AttachInstancesToLoadBalancerOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension AttachInstancesToLoadBalancerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension AttachLoadBalancerTlsCertificateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = self.certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let loadBalancerName = self.loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

extension AttachLoadBalancerTlsCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AttachLoadBalancerTlsCertificateInput: Swift.Equatable {
    /// The name of your SSL/TLS certificate.
    /// This member is required.
    public var certificateName: Swift.String?
    /// The name of the load balancer to which you want to associate the SSL/TLS certificate.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init (
        certificateName: Swift.String? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.certificateName = certificateName
        self.loadBalancerName = loadBalancerName
    }
}

struct AttachLoadBalancerTlsCertificateInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
    let certificateName: Swift.String?
}

extension AttachLoadBalancerTlsCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
    }
}

extension AttachLoadBalancerTlsCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachLoadBalancerTlsCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AttachLoadBalancerTlsCertificateOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachLoadBalancerTlsCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AttachLoadBalancerTlsCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct AttachLoadBalancerTlsCertificateOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request. These SSL/TLS certificates are only usable by Lightsail load balancers. You can't get the certificate and use it for another purpose.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct AttachLoadBalancerTlsCertificateOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension AttachLoadBalancerTlsCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension AttachStaticIpInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case staticIpName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let staticIpName = self.staticIpName {
            try encodeContainer.encode(staticIpName, forKey: .staticIpName)
        }
    }
}

extension AttachStaticIpInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AttachStaticIpInput: Swift.Equatable {
    /// The instance name to which you want to attach the static IP address.
    /// This member is required.
    public var instanceName: Swift.String?
    /// The name of the static IP.
    /// This member is required.
    public var staticIpName: Swift.String?

    public init (
        instanceName: Swift.String? = nil,
        staticIpName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
        self.staticIpName = staticIpName
    }
}

struct AttachStaticIpInputBody: Swift.Equatable {
    let staticIpName: Swift.String?
    let instanceName: Swift.String?
}

extension AttachStaticIpInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case staticIpName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .staticIpName)
        staticIpName = staticIpNameDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension AttachStaticIpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachStaticIpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AttachStaticIpOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachStaticIpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AttachStaticIpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct AttachStaticIpOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct AttachStaticIpOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension AttachStaticIpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.AttachedDisk: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case path
        case sizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let sizeInGb = self.sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a block storage disk that is attached to an instance, and is included in an automatic snapshot.
    public struct AttachedDisk: Swift.Equatable {
        /// The path of the disk (e.g., /dev/xvdf).
        public var path: Swift.String?
        /// The size of the disk in GB.
        public var sizeInGb: Swift.Int?

        public init (
            path: Swift.String? = nil,
            sizeInGb: Swift.Int? = nil
        )
        {
            self.path = path
            self.sizeInGb = sizeInGb
        }
    }

}

extension LightsailClientTypes.AutoSnapshotAddOnRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotTimeOfDay
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let snapshotTimeOfDay = self.snapshotTimeOfDay {
            try encodeContainer.encode(snapshotTimeOfDay, forKey: .snapshotTimeOfDay)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotTimeOfDayDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotTimeOfDay)
        snapshotTimeOfDay = snapshotTimeOfDayDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a request to enable or modify the automatic snapshot add-on for an Amazon Lightsail instance or disk. When you modify the automatic snapshot time for a resource, it is typically effective immediately except under the following conditions:
    ///
    /// * If an automatic snapshot has been created for the current day, and you change the snapshot time to a later time of day, then the new snapshot time will be effective the following day. This ensures that two snapshots are not created for the current day.
    ///
    /// * If an automatic snapshot has not yet been created for the current day, and you change the snapshot time to an earlier time of day, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day.
    ///
    /// * If an automatic snapshot has not yet been created for the current day, and you change the snapshot time to a time that is within 30 minutes from your current time, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day, because 30 minutes is required between your current time and the new snapshot time that you specify.
    ///
    /// * If an automatic snapshot is scheduled to be created within 30 minutes from your current time and you change the snapshot time, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day, because 30 minutes is required between your current time and the new snapshot time that you specify.
    public struct AutoSnapshotAddOnRequest: Swift.Equatable {
        /// The daily time when an automatic snapshot will be created. Constraints:
        ///
        /// * Must be in HH:00 format, and in an hourly increment.
        ///
        /// * Specified in Coordinated Universal Time (UTC).
        ///
        /// * The snapshot will be automatically created between the time specified and up to 45 minutes after.
        public var snapshotTimeOfDay: Swift.String?

        public init (
            snapshotTimeOfDay: Swift.String? = nil
        )
        {
            self.snapshotTimeOfDay = snapshotTimeOfDay
        }
    }

}

extension LightsailClientTypes.AutoSnapshotDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case date
        case fromAttachedDisks
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let date = self.date {
            try encodeContainer.encode(date, forKey: .date)
        }
        if let fromAttachedDisks = fromAttachedDisks {
            var fromAttachedDisksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fromAttachedDisks)
            for attacheddisk0 in fromAttachedDisks {
                try fromAttachedDisksContainer.encode(attacheddisk0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .date)
        date = dateDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AutoSnapshotStatus.self, forKey: .status)
        status = statusDecoded
        let fromAttachedDisksContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AttachedDisk?].self, forKey: .fromAttachedDisks)
        var fromAttachedDisksDecoded0:[LightsailClientTypes.AttachedDisk]? = nil
        if let fromAttachedDisksContainer = fromAttachedDisksContainer {
            fromAttachedDisksDecoded0 = [LightsailClientTypes.AttachedDisk]()
            for structure0 in fromAttachedDisksContainer {
                if let structure0 = structure0 {
                    fromAttachedDisksDecoded0?.append(structure0)
                }
            }
        }
        fromAttachedDisks = fromAttachedDisksDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes an automatic snapshot.
    public struct AutoSnapshotDetails: Swift.Equatable {
        /// The timestamp when the automatic snapshot was created.
        public var createdAt: ClientRuntime.Date?
        /// The date of the automatic snapshot in YYYY-MM-DD format.
        public var date: Swift.String?
        /// An array of objects that describe the block storage disks attached to the instance when the automatic snapshot was created.
        public var fromAttachedDisks: [LightsailClientTypes.AttachedDisk]?
        /// The status of the automatic snapshot.
        public var status: LightsailClientTypes.AutoSnapshotStatus?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            date: Swift.String? = nil,
            fromAttachedDisks: [LightsailClientTypes.AttachedDisk]? = nil,
            status: LightsailClientTypes.AutoSnapshotStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.date = date
            self.fromAttachedDisks = fromAttachedDisks
            self.status = status
        }
    }

}

extension LightsailClientTypes {
    public enum AutoSnapshotStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case notFound
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoSnapshotStatus] {
            return [
                .failed,
                .inProgress,
                .notFound,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .notFound: return "NotFound"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoSnapshotStatus(rawValue: rawValue) ?? AutoSnapshotStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.AvailabilityZone: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case state
        case zoneName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let zoneName = self.zoneName {
            try encodeContainer.encode(zoneName, forKey: .zoneName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let zoneNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .zoneName)
        zoneName = zoneNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
    }
}

extension LightsailClientTypes {
    /// Describes an Availability Zone. This is returned only as part of a GetRegions request.
    public struct AvailabilityZone: Swift.Equatable {
        /// The state of the Availability Zone.
        public var state: Swift.String?
        /// The name of the Availability Zone. The format is us-east-2a (case-sensitive).
        public var zoneName: Swift.String?

        public init (
            state: Swift.String? = nil,
            zoneName: Swift.String? = nil
        )
        {
            self.state = state
            self.zoneName = zoneName
        }
    }

}

extension LightsailClientTypes {
    public enum BPAStatusMessage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case defaultedForSlrMissing
        case defaultedForSlrMissingOnHold
        case syncOnHold
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [BPAStatusMessage] {
            return [
                .defaultedForSlrMissing,
                .defaultedForSlrMissingOnHold,
                .syncOnHold,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .defaultedForSlrMissing: return "DEFAULTED_FOR_SLR_MISSING"
            case .defaultedForSlrMissingOnHold: return "DEFAULTED_FOR_SLR_MISSING_ON_HOLD"
            case .syncOnHold: return "SYNC_ON_HOLD"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BPAStatusMessage(rawValue: rawValue) ?? BPAStatusMessage.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum BehaviorEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cachesetting
        case dontcachesetting
        case sdkUnknown(Swift.String)

        public static var allCases: [BehaviorEnum] {
            return [
                .cachesetting,
                .dontcachesetting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cachesetting: return "cache"
            case .dontcachesetting: return "dont-cache"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BehaviorEnum(rawValue: rawValue) ?? BehaviorEnum.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Blueprint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintId
        case description
        case group
        case isActive
        case licenseUrl
        case minPower
        case name
        case platform
        case productUrl
        case type
        case version
        case versionCode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintId = self.blueprintId {
            try encodeContainer.encode(blueprintId, forKey: .blueprintId)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let isActive = self.isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let licenseUrl = self.licenseUrl {
            try encodeContainer.encode(licenseUrl, forKey: .licenseUrl)
        }
        if let minPower = self.minPower {
            try encodeContainer.encode(minPower, forKey: .minPower)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
        if let productUrl = self.productUrl {
            try encodeContainer.encode(productUrl, forKey: .productUrl)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let versionCode = self.versionCode {
            try encodeContainer.encode(versionCode, forKey: .versionCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintId)
        blueprintId = blueprintIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
        let typeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BlueprintType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
        let minPowerDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minPower)
        minPower = minPowerDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let versionCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionCode)
        versionCode = versionCodeDecoded
        let productUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productUrl)
        productUrl = productUrlDecoded
        let licenseUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseUrl)
        licenseUrl = licenseUrlDecoded
        let platformDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstancePlatform.self, forKey: .platform)
        platform = platformDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a blueprint (a virtual private server image).
    public struct Blueprint: Swift.Equatable {
        /// The ID for the virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0).
        public var blueprintId: Swift.String?
        /// The description of the blueprint.
        public var description: Swift.String?
        /// The group name of the blueprint (e.g., amazon-linux).
        public var group: Swift.String?
        /// A Boolean value indicating whether the blueprint is active. Inactive blueprints are listed to support customers with existing instances but are not necessarily available for launch of new instances. Blueprints are marked inactive when they become outdated due to operating system updates or new application releases.
        public var isActive: Swift.Bool?
        /// The end-user license agreement URL for the image or blueprint.
        public var licenseUrl: Swift.String?
        /// The minimum bundle power required to run this blueprint. For example, you need a bundle with a power value of 500 or more to create an instance that uses a blueprint with a minimum power value of 500. 0 indicates that the blueprint runs on all instance sizes.
        public var minPower: Swift.Int?
        /// The friendly name of the blueprint (e.g., Amazon Linux).
        public var name: Swift.String?
        /// The operating system platform (either Linux/Unix-based or Windows Server-based) of the blueprint.
        public var platform: LightsailClientTypes.InstancePlatform?
        /// The product URL to learn more about the image or blueprint.
        public var productUrl: Swift.String?
        /// The type of the blueprint (e.g., os or app).
        public var type: LightsailClientTypes.BlueprintType?
        /// The version number of the operating system, application, or stack (e.g., 2016.03.0).
        public var version: Swift.String?
        /// The version code.
        public var versionCode: Swift.String?

        public init (
            blueprintId: Swift.String? = nil,
            description: Swift.String? = nil,
            group: Swift.String? = nil,
            isActive: Swift.Bool? = nil,
            licenseUrl: Swift.String? = nil,
            minPower: Swift.Int? = nil,
            name: Swift.String? = nil,
            platform: LightsailClientTypes.InstancePlatform? = nil,
            productUrl: Swift.String? = nil,
            type: LightsailClientTypes.BlueprintType? = nil,
            version: Swift.String? = nil,
            versionCode: Swift.String? = nil
        )
        {
            self.blueprintId = blueprintId
            self.description = description
            self.group = group
            self.isActive = isActive
            self.licenseUrl = licenseUrl
            self.minPower = minPower
            self.name = name
            self.platform = platform
            self.productUrl = productUrl
            self.type = type
            self.version = version
            self.versionCode = versionCode
        }
    }

}

extension LightsailClientTypes {
    public enum BlueprintType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case app
        case os
        case sdkUnknown(Swift.String)

        public static var allCases: [BlueprintType] {
            return [
                .app,
                .os,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .app: return "app"
            case .os: return "os"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BlueprintType(rawValue: rawValue) ?? BlueprintType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Bucket: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ableToUpdateBundle
        case accessLogConfig
        case accessRules
        case arn
        case bundleId
        case createdAt
        case location
        case name
        case objectVersioning
        case readonlyAccessAccounts
        case resourceType
        case resourcesReceivingAccess
        case state
        case supportCode
        case tags
        case url
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ableToUpdateBundle = self.ableToUpdateBundle {
            try encodeContainer.encode(ableToUpdateBundle, forKey: .ableToUpdateBundle)
        }
        if let accessLogConfig = self.accessLogConfig {
            try encodeContainer.encode(accessLogConfig, forKey: .accessLogConfig)
        }
        if let accessRules = self.accessRules {
            try encodeContainer.encode(accessRules, forKey: .accessRules)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let objectVersioning = self.objectVersioning {
            try encodeContainer.encode(objectVersioning, forKey: .objectVersioning)
        }
        if let readonlyAccessAccounts = readonlyAccessAccounts {
            var readonlyAccessAccountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readonlyAccessAccounts)
            for nonemptystring0 in readonlyAccessAccounts {
                try readonlyAccessAccountsContainer.encode(nonemptystring0)
            }
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let resourcesReceivingAccess = resourcesReceivingAccess {
            var resourcesReceivingAccessContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourcesReceivingAccess)
            for resourcereceivingaccess0 in resourcesReceivingAccess {
                try resourcesReceivingAccessContainer.encode(resourcereceivingaccess0)
            }
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let accessRulesDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AccessRules.self, forKey: .accessRules)
        accessRules = accessRulesDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let objectVersioningDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectVersioning)
        objectVersioning = objectVersioningDecoded
        let ableToUpdateBundleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ableToUpdateBundle)
        ableToUpdateBundle = ableToUpdateBundleDecoded
        let readonlyAccessAccountsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readonlyAccessAccounts)
        var readonlyAccessAccountsDecoded0:[Swift.String]? = nil
        if let readonlyAccessAccountsContainer = readonlyAccessAccountsContainer {
            readonlyAccessAccountsDecoded0 = [Swift.String]()
            for string0 in readonlyAccessAccountsContainer {
                if let string0 = string0 {
                    readonlyAccessAccountsDecoded0?.append(string0)
                }
            }
        }
        readonlyAccessAccounts = readonlyAccessAccountsDecoded0
        let resourcesReceivingAccessContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ResourceReceivingAccess?].self, forKey: .resourcesReceivingAccess)
        var resourcesReceivingAccessDecoded0:[LightsailClientTypes.ResourceReceivingAccess]? = nil
        if let resourcesReceivingAccessContainer = resourcesReceivingAccessContainer {
            resourcesReceivingAccessDecoded0 = [LightsailClientTypes.ResourceReceivingAccess]()
            for structure0 in resourcesReceivingAccessContainer {
                if let structure0 = structure0 {
                    resourcesReceivingAccessDecoded0?.append(structure0)
                }
            }
        }
        resourcesReceivingAccess = resourcesReceivingAccessDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BucketState.self, forKey: .state)
        state = stateDecoded
        let accessLogConfigDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BucketAccessLogConfig.self, forKey: .accessLogConfig)
        accessLogConfig = accessLogConfigDecoded
    }
}

extension LightsailClientTypes {
    /// Describes an Amazon Lightsail bucket.
    public struct Bucket: Swift.Equatable {
        /// Indicates whether the bundle that is currently applied to a bucket can be changed to another bundle. You can update a bucket's bundle only one time within a monthly Amazon Web Services billing cycle. Use the [UpdateBucketBundle](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html) action to change a bucket's bundle.
        public var ableToUpdateBundle: Swift.Bool?
        /// An object that describes the access log configuration for the bucket.
        public var accessLogConfig: LightsailClientTypes.BucketAccessLogConfig?
        /// An object that describes the access rules of the bucket.
        public var accessRules: LightsailClientTypes.AccessRules?
        /// The Amazon Resource Name (ARN) of the bucket.
        public var arn: Swift.String?
        /// The ID of the bundle currently applied to the bucket. A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a bucket. Use the [UpdateBucketBundle](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html) action to change the bundle of a bucket.
        public var bundleId: Swift.String?
        /// The timestamp when the distribution was created.
        public var createdAt: ClientRuntime.Date?
        /// An object that describes the location of the bucket, such as the Amazon Web Services Region and Availability Zone.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the bucket.
        public var name: Swift.String?
        /// Indicates whether object versioning is enabled for the bucket. The following options can be configured:
        ///
        /// * Enabled - Object versioning is enabled.
        ///
        /// * Suspended - Object versioning was previously enabled but is currently suspended. Existing object versions are retained.
        ///
        /// * NeverEnabled - Object versioning has never been enabled.
        public var objectVersioning: Swift.String?
        /// An array of strings that specify the Amazon Web Services account IDs that have read-only access to the bucket.
        public var readonlyAccessAccounts: [Swift.String]?
        /// The Lightsail resource type of the bucket (for example, Bucket).
        public var resourceType: Swift.String?
        /// An array of objects that describe Lightsail instances that have access to the bucket. Use the [SetResourceAccessForBucket](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html) action to update the instances that have access to a bucket.
        public var resourcesReceivingAccess: [LightsailClientTypes.ResourceReceivingAccess]?
        /// An object that describes the state of the bucket.
        public var state: LightsailClientTypes.BucketState?
        /// The support code for a bucket. Include this code in your email to support when you have questions about a Lightsail bucket. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the bucket. For more information, see [Tags in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags) in the Amazon Lightsail Developer Guide.
        public var tags: [LightsailClientTypes.Tag]?
        /// The URL of the bucket.
        public var url: Swift.String?

        public init (
            ableToUpdateBundle: Swift.Bool? = nil,
            accessLogConfig: LightsailClientTypes.BucketAccessLogConfig? = nil,
            accessRules: LightsailClientTypes.AccessRules? = nil,
            arn: Swift.String? = nil,
            bundleId: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            objectVersioning: Swift.String? = nil,
            readonlyAccessAccounts: [Swift.String]? = nil,
            resourceType: Swift.String? = nil,
            resourcesReceivingAccess: [LightsailClientTypes.ResourceReceivingAccess]? = nil,
            state: LightsailClientTypes.BucketState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            url: Swift.String? = nil
        )
        {
            self.ableToUpdateBundle = ableToUpdateBundle
            self.accessLogConfig = accessLogConfig
            self.accessRules = accessRules
            self.arn = arn
            self.bundleId = bundleId
            self.createdAt = createdAt
            self.location = location
            self.name = name
            self.objectVersioning = objectVersioning
            self.readonlyAccessAccounts = readonlyAccessAccounts
            self.resourceType = resourceType
            self.resourcesReceivingAccess = resourcesReceivingAccess
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
            self.url = url
        }
    }

}

extension LightsailClientTypes.BucketAccessLogConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
        case enabled
        case `prefix` = "prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the access log configuration for a bucket in the Amazon Lightsail object storage service. For more information about bucket access logs, see [Logging bucket requests using access logging in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-bucket-access-logs) in the Amazon Lightsail Developer Guide.
    public struct BucketAccessLogConfig: Swift.Equatable {
        /// The name of the bucket where the access logs are saved. The destination can be a Lightsail bucket in the same account, and in the same Amazon Web Services Region as the source bucket. This parameter is required when enabling the access log for a bucket, and should be omitted when disabling the access log.
        public var destination: Swift.String?
        /// A Boolean value that indicates whether bucket access logging is enabled for the bucket.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// The optional object prefix for the bucket access log. The prefix is an optional addition to the object key that organizes your access log files in the destination bucket. For example, if you specify a logs/ prefix, then each log object will begin with the logs/ prefix in its key (for example, logs/2021-11-01-21-32-16-E568B2907131C0C0). This parameter can be optionally specified when enabling the access log for a bucket, and should be omitted when disabling the access log.
        public var `prefix`: Swift.String?

        public init (
            destination: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.destination = destination
            self.enabled = enabled
            self.`prefix` = `prefix`
        }
    }

}

extension LightsailClientTypes.BucketBundle: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case isActive
        case name
        case price
        case storagePerMonthInGb
        case transferPerMonthInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let isActive = self.isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let price = self.price {
            try encodeContainer.encode(price, forKey: .price)
        }
        if let storagePerMonthInGb = self.storagePerMonthInGb {
            try encodeContainer.encode(storagePerMonthInGb, forKey: .storagePerMonthInGb)
        }
        if let transferPerMonthInGb = self.transferPerMonthInGb {
            try encodeContainer.encode(transferPerMonthInGb, forKey: .transferPerMonthInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let priceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .price)
        price = priceDecoded
        let storagePerMonthInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storagePerMonthInGb)
        storagePerMonthInGb = storagePerMonthInGbDecoded
        let transferPerMonthInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transferPerMonthInGb)
        transferPerMonthInGb = transferPerMonthInGbDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the specifications of a bundle that can be applied to an Amazon Lightsail bucket. A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a bucket.
    public struct BucketBundle: Swift.Equatable {
        /// The ID of the bundle.
        public var bundleId: Swift.String?
        /// Indicates whether the bundle is active. Use for a new or existing bucket.
        public var isActive: Swift.Bool?
        /// The name of the bundle.
        public var name: Swift.String?
        /// The monthly price of the bundle, in US dollars.
        public var price: Swift.Float?
        /// The storage size of the bundle, in GB.
        public var storagePerMonthInGb: Swift.Int?
        /// The monthly network transfer quota of the bundle.
        public var transferPerMonthInGb: Swift.Int?

        public init (
            bundleId: Swift.String? = nil,
            isActive: Swift.Bool? = nil,
            name: Swift.String? = nil,
            price: Swift.Float? = nil,
            storagePerMonthInGb: Swift.Int? = nil,
            transferPerMonthInGb: Swift.Int? = nil
        )
        {
            self.bundleId = bundleId
            self.isActive = isActive
            self.name = name
            self.price = price
            self.storagePerMonthInGb = storagePerMonthInGb
            self.transferPerMonthInGb = transferPerMonthInGb
        }
    }

}

extension LightsailClientTypes {
    public enum BucketMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bucketsizebytes
        case numberofobjects
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketMetricName] {
            return [
                .bucketsizebytes,
                .numberofobjects,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bucketsizebytes: return "BucketSizeBytes"
            case .numberofobjects: return "NumberOfObjects"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BucketMetricName(rawValue: rawValue) ?? BucketMetricName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.BucketState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the state of an Amazon Lightsail bucket.
    public struct BucketState: Swift.Equatable {
        /// The state code of the bucket. The following codes are possible:
        ///
        /// * OK - The bucket is in a running state.
        ///
        /// * Unknown - Creation of the bucket might have timed-out. You might want to delete the bucket and create a new one.
        public var code: Swift.String?
        /// A message that describes the state of the bucket.
        public var message: Swift.String?

        public init (
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension LightsailClientTypes.Bundle: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case cpuCount
        case diskSizeInGb
        case instanceType
        case isActive
        case name
        case power
        case price
        case ramSizeInGb
        case supportedPlatforms
        case transferPerMonthInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let cpuCount = self.cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let diskSizeInGb = self.diskSizeInGb {
            try encodeContainer.encode(diskSizeInGb, forKey: .diskSizeInGb)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let isActive = self.isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let power = self.power {
            try encodeContainer.encode(power, forKey: .power)
        }
        if let price = self.price {
            try encodeContainer.encode(price, forKey: .price)
        }
        if let ramSizeInGb = self.ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
        if let supportedPlatforms = supportedPlatforms {
            var supportedPlatformsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedPlatforms)
            for instanceplatform0 in supportedPlatforms {
                try supportedPlatformsContainer.encode(instanceplatform0.rawValue)
            }
        }
        if let transferPerMonthInGb = self.transferPerMonthInGb {
            try encodeContainer.encode(transferPerMonthInGb, forKey: .transferPerMonthInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let priceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .price)
        price = priceDecoded
        let cpuCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let diskSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .diskSizeInGb)
        diskSizeInGb = diskSizeInGbDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let powerDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .power)
        power = powerDecoded
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
        let transferPerMonthInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transferPerMonthInGb)
        transferPerMonthInGb = transferPerMonthInGbDecoded
        let supportedPlatformsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.InstancePlatform?].self, forKey: .supportedPlatforms)
        var supportedPlatformsDecoded0:[LightsailClientTypes.InstancePlatform]? = nil
        if let supportedPlatformsContainer = supportedPlatformsContainer {
            supportedPlatformsDecoded0 = [LightsailClientTypes.InstancePlatform]()
            for enum0 in supportedPlatformsContainer {
                if let enum0 = enum0 {
                    supportedPlatformsDecoded0?.append(enum0)
                }
            }
        }
        supportedPlatforms = supportedPlatformsDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes a bundle, which is a set of specs describing your virtual private server (or instance).
    public struct Bundle: Swift.Equatable {
        /// The bundle ID (e.g., micro_1_0).
        public var bundleId: Swift.String?
        /// The number of vCPUs included in the bundle (e.g., 2).
        public var cpuCount: Swift.Int?
        /// The size of the SSD (e.g., 30).
        public var diskSizeInGb: Swift.Int?
        /// The Amazon EC2 instance type (e.g., t2.micro).
        public var instanceType: Swift.String?
        /// A Boolean value indicating whether the bundle is active.
        public var isActive: Swift.Bool?
        /// A friendly name for the bundle (e.g., Micro).
        public var name: Swift.String?
        /// A numeric value that represents the power of the bundle (e.g., 500). You can use the bundle's power value in conjunction with a blueprint's minimum power value to determine whether the blueprint will run on the bundle. For example, you need a bundle with a power value of 500 or more to create an instance that uses a blueprint with a minimum power value of 500.
        public var power: Swift.Int?
        /// The price in US dollars (e.g., 5.0) of the bundle.
        public var price: Swift.Float?
        /// The amount of RAM in GB (e.g., 2.0).
        public var ramSizeInGb: Swift.Float?
        /// The operating system platform (Linux/Unix-based or Windows Server-based) that the bundle supports. You can only launch a WINDOWS bundle on a blueprint that supports the WINDOWS platform. LINUX_UNIX blueprints require a LINUX_UNIX bundle.
        public var supportedPlatforms: [LightsailClientTypes.InstancePlatform]?
        /// The data transfer rate per month in GB (e.g., 2000).
        public var transferPerMonthInGb: Swift.Int?

        public init (
            bundleId: Swift.String? = nil,
            cpuCount: Swift.Int? = nil,
            diskSizeInGb: Swift.Int? = nil,
            instanceType: Swift.String? = nil,
            isActive: Swift.Bool? = nil,
            name: Swift.String? = nil,
            power: Swift.Int? = nil,
            price: Swift.Float? = nil,
            ramSizeInGb: Swift.Float? = nil,
            supportedPlatforms: [LightsailClientTypes.InstancePlatform]? = nil,
            transferPerMonthInGb: Swift.Int? = nil
        )
        {
            self.bundleId = bundleId
            self.cpuCount = cpuCount
            self.diskSizeInGb = diskSizeInGb
            self.instanceType = instanceType
            self.isActive = isActive
            self.name = name
            self.power = power
            self.price = price
            self.ramSizeInGb = ramSizeInGb
            self.supportedPlatforms = supportedPlatforms
            self.transferPerMonthInGb = transferPerMonthInGb
        }
    }

}

extension LightsailClientTypes.CacheBehavior: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behavior
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behavior = self.behavior {
            try encodeContainer.encode(behavior.rawValue, forKey: .behavior)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let behaviorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BehaviorEnum.self, forKey: .behavior)
        behavior = behaviorDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the default cache behavior of an Amazon Lightsail content delivery network (CDN) distribution.
    public struct CacheBehavior: Swift.Equatable {
        /// The cache behavior of the distribution. The following cache behaviors can be specified:
        ///
        /// * cache - This option is best for static sites. When specified, your distribution caches and serves your entire website as static content. This behavior is ideal for websites with static content that doesn't change depending on who views it, or for websites that don't use cookies, headers, or query strings to personalize content.
        ///
        /// * dont-cache - This option is best for sites that serve a mix of static and dynamic content. When specified, your distribution caches and serve only the content that is specified in the distribution's CacheBehaviorPerPath parameter. This behavior is ideal for websites or web applications that use cookies, headers, and query strings to personalize content for individual users.
        public var behavior: LightsailClientTypes.BehaviorEnum?

        public init (
            behavior: LightsailClientTypes.BehaviorEnum? = nil
        )
        {
            self.behavior = behavior
        }
    }

}

extension LightsailClientTypes.CacheBehaviorPerPath: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behavior
        case path
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behavior = self.behavior {
            try encodeContainer.encode(behavior.rawValue, forKey: .behavior)
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let behaviorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BehaviorEnum.self, forKey: .behavior)
        behavior = behaviorDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the per-path cache behavior of an Amazon Lightsail content delivery network (CDN) distribution. A per-path cache behavior is used to override, or add an exception to, the default cache behavior of a distribution. For example, if the cacheBehavior is set to cache, then a per-path cache behavior can be used to specify a directory, file, or file type that your distribution will cache. Alternately, if the distribution's cacheBehavior is dont-cache, then a per-path cache behavior can be used to specify a directory, file, or file type that your distribution will not cache.
    public struct CacheBehaviorPerPath: Swift.Equatable {
        /// The cache behavior for the specified path. You can specify one of the following per-path cache behaviors:
        ///
        /// * cache - This behavior caches the specified path.
        ///
        /// * dont-cache - This behavior doesn't cache the specified path.
        public var behavior: LightsailClientTypes.BehaviorEnum?
        /// The path to a directory or file to cached, or not cache. Use an asterisk symbol to specify wildcard directories (path/to/assets/*), and file types (*.html, *jpg, *js). Directories and file paths are case-sensitive. Examples:
        ///
        /// * Specify the following to cache all files in the document root of an Apache web server running on a Lightsail instance. var/www/html/
        ///
        /// * Specify the following file to cache only the index page in the document root of an Apache web server. var/www/html/index.html
        ///
        /// * Specify the following to cache only the .html files in the document root of an Apache web server. var/www/html/*.html
        ///
        /// * Specify the following to cache only the .jpg, .png, and .gif files in the images sub-directory of the document root of an Apache web server. var/www/html/images/*.jpgvar/www/html/images/*.pngvar/www/html/images/*.gif Specify the following to cache all files in the images sub-directory of the document root of an Apache web server. var/www/html/images/
        public var path: Swift.String?

        public init (
            behavior: LightsailClientTypes.BehaviorEnum? = nil,
            path: Swift.String? = nil
        )
        {
            self.behavior = behavior
            self.path = path
        }
    }

}

extension LightsailClientTypes.CacheSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedHTTPMethods
        case cachedHTTPMethods
        case defaultTTL
        case forwardedCookies
        case forwardedHeaders
        case forwardedQueryStrings
        case maximumTTL
        case minimumTTL
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedHTTPMethods = self.allowedHTTPMethods {
            try encodeContainer.encode(allowedHTTPMethods, forKey: .allowedHTTPMethods)
        }
        if let cachedHTTPMethods = self.cachedHTTPMethods {
            try encodeContainer.encode(cachedHTTPMethods, forKey: .cachedHTTPMethods)
        }
        if let defaultTTL = self.defaultTTL {
            try encodeContainer.encode(defaultTTL, forKey: .defaultTTL)
        }
        if let forwardedCookies = self.forwardedCookies {
            try encodeContainer.encode(forwardedCookies, forKey: .forwardedCookies)
        }
        if let forwardedHeaders = self.forwardedHeaders {
            try encodeContainer.encode(forwardedHeaders, forKey: .forwardedHeaders)
        }
        if let forwardedQueryStrings = self.forwardedQueryStrings {
            try encodeContainer.encode(forwardedQueryStrings, forKey: .forwardedQueryStrings)
        }
        if let maximumTTL = self.maximumTTL {
            try encodeContainer.encode(maximumTTL, forKey: .maximumTTL)
        }
        if let minimumTTL = self.minimumTTL {
            try encodeContainer.encode(minimumTTL, forKey: .minimumTTL)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultTTLDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultTTL)
        defaultTTL = defaultTTLDecoded
        let minimumTTLDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumTTL)
        minimumTTL = minimumTTLDecoded
        let maximumTTLDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumTTL)
        maximumTTL = maximumTTLDecoded
        let allowedHTTPMethodsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allowedHTTPMethods)
        allowedHTTPMethods = allowedHTTPMethodsDecoded
        let cachedHTTPMethodsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cachedHTTPMethods)
        cachedHTTPMethods = cachedHTTPMethodsDecoded
        let forwardedCookiesDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CookieObject.self, forKey: .forwardedCookies)
        forwardedCookies = forwardedCookiesDecoded
        let forwardedHeadersDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.HeaderObject.self, forKey: .forwardedHeaders)
        forwardedHeaders = forwardedHeadersDecoded
        let forwardedQueryStringsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.QueryStringObject.self, forKey: .forwardedQueryStrings)
        forwardedQueryStrings = forwardedQueryStringsDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the cache settings of an Amazon Lightsail content delivery network (CDN) distribution. These settings apply only to your distribution's cacheBehaviors (including the defaultCacheBehavior) that have a behavior of cache.
    public struct CacheSettings: Swift.Equatable {
        /// The HTTP methods that are processed and forwarded to the distribution's origin. You can specify the following options:
        ///
        /// * GET,HEAD - The distribution forwards the GET and HEAD methods.
        ///
        /// * GET,HEAD,OPTIONS - The distribution forwards the GET, HEAD, and OPTIONS methods.
        ///
        /// * GET,HEAD,OPTIONS,PUT,PATCH,POST,DELETE - The distribution forwards the GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE methods.
        ///
        ///
        /// If you specify the third option, you might need to restrict access to your distribution's origin so users can't perform operations that you don't want them to. For example, you might not want users to have permission to delete objects from your origin.
        public var allowedHTTPMethods: Swift.String?
        /// The HTTP method responses that are cached by your distribution. You can specify the following options:
        ///
        /// * GET,HEAD - The distribution caches responses to the GET and HEAD methods.
        ///
        /// * GET,HEAD,OPTIONS - The distribution caches responses to the GET, HEAD, and OPTIONS methods.
        public var cachedHTTPMethods: Swift.String?
        /// The default amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the content has been updated. The value specified applies only when the origin does not add HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects.
        public var defaultTTL: Swift.Int?
        /// An object that describes the cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded.
        public var forwardedCookies: LightsailClientTypes.CookieObject?
        /// An object that describes the headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded.
        public var forwardedHeaders: LightsailClientTypes.HeaderObject?
        /// An object that describes the query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded.
        public var forwardedQueryStrings: LightsailClientTypes.QueryStringObject?
        /// The maximum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated. The value specified applies only when the origin adds HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects.
        public var maximumTTL: Swift.Int?
        /// The minimum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated. A value of 0 must be specified for minimumTTL if the distribution is configured to forward all headers to the origin.
        public var minimumTTL: Swift.Int?

        public init (
            allowedHTTPMethods: Swift.String? = nil,
            cachedHTTPMethods: Swift.String? = nil,
            defaultTTL: Swift.Int? = nil,
            forwardedCookies: LightsailClientTypes.CookieObject? = nil,
            forwardedHeaders: LightsailClientTypes.HeaderObject? = nil,
            forwardedQueryStrings: LightsailClientTypes.QueryStringObject? = nil,
            maximumTTL: Swift.Int? = nil,
            minimumTTL: Swift.Int? = nil
        )
        {
            self.allowedHTTPMethods = allowedHTTPMethods
            self.cachedHTTPMethods = cachedHTTPMethods
            self.defaultTTL = defaultTTL
            self.forwardedCookies = forwardedCookies
            self.forwardedHeaders = forwardedHeaders
            self.forwardedQueryStrings = forwardedQueryStrings
            self.maximumTTL = maximumTTL
            self.minimumTTL = minimumTTL
        }
    }

}

extension LightsailClientTypes.Certificate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case domainName
        case domainValidationRecords
        case eligibleToRenew
        case inUseResourceCount
        case issuedAt
        case issuerCA
        case keyAlgorithm
        case name
        case notAfter
        case notBefore
        case renewalSummary
        case requestFailureReason
        case revocationReason
        case revokedAt
        case serialNumber
        case status
        case subjectAlternativeNames
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainValidationRecords = domainValidationRecords {
            var domainValidationRecordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationRecords)
            for domainvalidationrecord0 in domainValidationRecords {
                try domainValidationRecordsContainer.encode(domainvalidationrecord0)
            }
        }
        if let eligibleToRenew = self.eligibleToRenew {
            try encodeContainer.encode(eligibleToRenew, forKey: .eligibleToRenew)
        }
        if inUseResourceCount != 0 {
            try encodeContainer.encode(inUseResourceCount, forKey: .inUseResourceCount)
        }
        if let issuedAt = self.issuedAt {
            try encodeContainer.encodeTimestamp(issuedAt, format: .epochSeconds, forKey: .issuedAt)
        }
        if let issuerCA = self.issuerCA {
            try encodeContainer.encode(issuerCA, forKey: .issuerCA)
        }
        if let keyAlgorithm = self.keyAlgorithm {
            try encodeContainer.encode(keyAlgorithm, forKey: .keyAlgorithm)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notAfter = self.notAfter {
            try encodeContainer.encodeTimestamp(notAfter, format: .epochSeconds, forKey: .notAfter)
        }
        if let notBefore = self.notBefore {
            try encodeContainer.encodeTimestamp(notBefore, format: .epochSeconds, forKey: .notBefore)
        }
        if let renewalSummary = self.renewalSummary {
            try encodeContainer.encode(renewalSummary, forKey: .renewalSummary)
        }
        if let requestFailureReason = self.requestFailureReason {
            try encodeContainer.encode(requestFailureReason, forKey: .requestFailureReason)
        }
        if let revocationReason = self.revocationReason {
            try encodeContainer.encode(revocationReason, forKey: .revocationReason)
        }
        if let revokedAt = self.revokedAt {
            try encodeContainer.encodeTimestamp(revokedAt, format: .epochSeconds, forKey: .revokedAt)
        }
        if let serialNumber = self.serialNumber {
            try encodeContainer.encode(serialNumber, forKey: .serialNumber)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let subjectAlternativeNames = subjectAlternativeNames {
            var subjectAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subjectAlternativeNames)
            for domainname0 in subjectAlternativeNames {
                try subjectAlternativeNamesContainer.encode(domainname0)
            }
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CertificateStatus.self, forKey: .status)
        status = statusDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let subjectAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subjectAlternativeNames)
        var subjectAlternativeNamesDecoded0:[Swift.String]? = nil
        if let subjectAlternativeNamesContainer = subjectAlternativeNamesContainer {
            subjectAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in subjectAlternativeNamesContainer {
                if let string0 = string0 {
                    subjectAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        subjectAlternativeNames = subjectAlternativeNamesDecoded0
        let domainValidationRecordsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.DomainValidationRecord?].self, forKey: .domainValidationRecords)
        var domainValidationRecordsDecoded0:[LightsailClientTypes.DomainValidationRecord]? = nil
        if let domainValidationRecordsContainer = domainValidationRecordsContainer {
            domainValidationRecordsDecoded0 = [LightsailClientTypes.DomainValidationRecord]()
            for structure0 in domainValidationRecordsContainer {
                if let structure0 = structure0 {
                    domainValidationRecordsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationRecords = domainValidationRecordsDecoded0
        let requestFailureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestFailureReason)
        requestFailureReason = requestFailureReasonDecoded
        let inUseResourceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inUseResourceCount) ?? 0
        inUseResourceCount = inUseResourceCountDecoded
        let keyAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyAlgorithm)
        keyAlgorithm = keyAlgorithmDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let issuedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .issuedAt)
        issuedAt = issuedAtDecoded
        let issuerCADecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuerCA)
        issuerCA = issuerCADecoded
        let notBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .notBefore)
        notBefore = notBeforeDecoded
        let notAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .notAfter)
        notAfter = notAfterDecoded
        let eligibleToRenewDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eligibleToRenew)
        eligibleToRenew = eligibleToRenewDecoded
        let renewalSummaryDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RenewalSummary.self, forKey: .renewalSummary)
        renewalSummary = renewalSummaryDecoded
        let revokedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .revokedAt)
        revokedAt = revokedAtDecoded
        let revocationReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revocationReason)
        revocationReason = revocationReasonDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the full details of an Amazon Lightsail SSL/TLS certificate. To get a summary of a certificate, use the GetCertificates action and ommit includeCertificateDetails from your request. The response will include only the certificate Amazon Resource Name (ARN), certificate name, domain name, and tags.
    public struct Certificate: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the certificate.
        public var arn: Swift.String?
        /// The timestamp when the certificate was created.
        public var createdAt: ClientRuntime.Date?
        /// The domain name of the certificate.
        public var domainName: Swift.String?
        /// An array of objects that describe the domain validation records of the certificate.
        public var domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]?
        /// The renewal eligibility of the certificate.
        public var eligibleToRenew: Swift.String?
        /// The number of Lightsail resources that the certificate is attached to.
        public var inUseResourceCount: Swift.Int
        /// The timestamp when the certificate was issued.
        public var issuedAt: ClientRuntime.Date?
        /// The certificate authority that issued the certificate.
        public var issuerCA: Swift.String?
        /// The algorithm used to generate the key pair (the public and private key) of the certificate.
        public var keyAlgorithm: Swift.String?
        /// The name of the certificate (e.g., my-certificate).
        public var name: Swift.String?
        /// The timestamp when the certificate expires.
        public var notAfter: ClientRuntime.Date?
        /// The timestamp when the certificate is first valid.
        public var notBefore: ClientRuntime.Date?
        /// An object that describes the status of the certificate renewal managed by Lightsail.
        public var renewalSummary: LightsailClientTypes.RenewalSummary?
        /// The validation failure reason, if any, of the certificate. The following failure reasons are possible:
        ///
        /// * NO_AVAILABLE_CONTACTS - This failure applies to email validation, which is not available for Lightsail certificates.
        ///
        /// * ADDITIONAL_VERIFICATION_REQUIRED - Lightsail requires additional information to process this certificate request. This can happen as a fraud-protection measure, such as when the domain ranks within the Alexa top 1000 websites. To provide the required information, use the [Amazon Web Services Support Center](https://console.aws.amazon.com/support/home) to contact Amazon Web Services Support. You cannot request a certificate for Amazon-owned domain names such as those ending in amazonaws.com, cloudfront.net, or elasticbeanstalk.com.
        ///
        /// * DOMAIN_NOT_ALLOWED - One or more of the domain names in the certificate request was reported as an unsafe domain by [VirusTotal](https://www.virustotal.com/gui/home/url). To correct the problem, search for your domain name on the [VirusTotal](https://www.virustotal.com/gui/home/url) website. If your domain is reported as suspicious, see [Google Help for Hacked Websites](https://developers.google.com/web/fundamentals/security/hacked) to learn what you can do. If you believe that the result is a false positive, notify the organization that is reporting the domain. VirusTotal is an aggregate of several antivirus and URL scanners and cannot remove your domain from a block list itself. After you correct the problem and the VirusTotal registry has been updated, request a new certificate. If you see this error and your domain is not included in the VirusTotal list, visit the [Amazon Web Services Support Center](https://console.aws.amazon.com/support/home) and create a case.
        ///
        /// * INVALID_PUBLIC_DOMAIN - One or more of the domain names in the certificate request is not valid. Typically, this is because a domain name in the request is not a valid top-level domain. Try to request a certificate again, correcting any spelling errors or typos that were in the failed request, and ensure that all domain names in the request are for valid top-level domains. For example, you cannot request a certificate for example.invalidpublicdomain because invalidpublicdomain is not a valid top-level domain.
        ///
        /// * OTHER - Typically, this failure occurs when there is a typographical error in one or more of the domain names in the certificate request. Try to request a certificate again, correcting any spelling errors or typos that were in the failed request.
        public var requestFailureReason: Swift.String?
        /// The reason the certificate was revoked. This value is present only when the certificate status is REVOKED.
        public var revocationReason: Swift.String?
        /// The timestamp when the certificate was revoked. This value is present only when the certificate status is REVOKED.
        public var revokedAt: ClientRuntime.Date?
        /// The serial number of the certificate.
        public var serialNumber: Swift.String?
        /// The validation status of the certificate.
        public var status: LightsailClientTypes.CertificateStatus?
        /// An array of strings that specify the alternate domains (e.g., example2.com) and subdomains (e.g., blog.example.com) of the certificate.
        public var subjectAlternativeNames: [Swift.String]?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail certificate. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            domainName: Swift.String? = nil,
            domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]? = nil,
            eligibleToRenew: Swift.String? = nil,
            inUseResourceCount: Swift.Int = 0,
            issuedAt: ClientRuntime.Date? = nil,
            issuerCA: Swift.String? = nil,
            keyAlgorithm: Swift.String? = nil,
            name: Swift.String? = nil,
            notAfter: ClientRuntime.Date? = nil,
            notBefore: ClientRuntime.Date? = nil,
            renewalSummary: LightsailClientTypes.RenewalSummary? = nil,
            requestFailureReason: Swift.String? = nil,
            revocationReason: Swift.String? = nil,
            revokedAt: ClientRuntime.Date? = nil,
            serialNumber: Swift.String? = nil,
            status: LightsailClientTypes.CertificateStatus? = nil,
            subjectAlternativeNames: [Swift.String]? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.domainName = domainName
            self.domainValidationRecords = domainValidationRecords
            self.eligibleToRenew = eligibleToRenew
            self.inUseResourceCount = inUseResourceCount
            self.issuedAt = issuedAt
            self.issuerCA = issuerCA
            self.keyAlgorithm = keyAlgorithm
            self.name = name
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.renewalSummary = renewalSummary
            self.requestFailureReason = requestFailureReason
            self.revocationReason = revocationReason
            self.revokedAt = revokedAt
            self.serialNumber = serialNumber
            self.status = status
            self.subjectAlternativeNames = subjectAlternativeNames
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes {
    public enum CertificateDomainValidationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pendingvalidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateDomainValidationStatus] {
            return [
                .failed,
                .pendingvalidation,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CertificateDomainValidationStatus(rawValue: rawValue) ?? CertificateDomainValidationStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum CertificateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case expired
        case failed
        case inactive
        case issued
        case pendingvalidation
        case revoked
        case validationtimedout
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateStatus] {
            return [
                .expired,
                .failed,
                .inactive,
                .issued,
                .pendingvalidation,
                .revoked,
                .validationtimedout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .expired: return "EXPIRED"
            case .failed: return "FAILED"
            case .inactive: return "INACTIVE"
            case .issued: return "ISSUED"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .revoked: return "REVOKED"
            case .validationtimedout: return "VALIDATION_TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CertificateStatus(rawValue: rawValue) ?? CertificateStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.CertificateSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
        case certificateDetail
        case certificateName
        case domainName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = self.certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificateDetail = self.certificateDetail {
            try encodeContainer.encode(certificateDetail, forKey: .certificateDetail)
        }
        if let certificateName = self.certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let certificateDetailDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Certificate.self, forKey: .certificateDetail)
        certificateDetail = certificateDetailDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes an Amazon Lightsail SSL/TLS certificate.
    public struct CertificateSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the certificate.
        public var certificateArn: Swift.String?
        /// An object that describes a certificate in detail.
        public var certificateDetail: LightsailClientTypes.Certificate?
        /// The name of the certificate.
        public var certificateName: Swift.String?
        /// The domain name of the certificate.
        public var domainName: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init (
            certificateArn: Swift.String? = nil,
            certificateDetail: LightsailClientTypes.Certificate? = nil,
            certificateName: Swift.String? = nil,
            domainName: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificateDetail = certificateDetail
            self.certificateName = certificateName
            self.domainName = domainName
            self.tags = tags
        }
    }

}

extension CloseInstancePublicPortsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case portInfo
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let portInfo = self.portInfo {
            try encodeContainer.encode(portInfo, forKey: .portInfo)
        }
    }
}

extension CloseInstancePublicPortsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CloseInstancePublicPortsInput: Swift.Equatable {
    /// The name of the instance for which to close ports.
    /// This member is required.
    public var instanceName: Swift.String?
    /// An object to describe the ports to close for the specified instance.
    /// This member is required.
    public var portInfo: LightsailClientTypes.PortInfo?

    public init (
        instanceName: Swift.String? = nil,
        portInfo: LightsailClientTypes.PortInfo? = nil
    )
    {
        self.instanceName = instanceName
        self.portInfo = portInfo
    }
}

struct CloseInstancePublicPortsInputBody: Swift.Equatable {
    let portInfo: LightsailClientTypes.PortInfo?
    let instanceName: Swift.String?
}

extension CloseInstancePublicPortsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case portInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PortInfo.self, forKey: .portInfo)
        portInfo = portInfoDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension CloseInstancePublicPortsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CloseInstancePublicPortsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CloseInstancePublicPortsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CloseInstancePublicPortsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CloseInstancePublicPortsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct CloseInstancePublicPortsOutputResponse: Swift.Equatable {
    /// An object that describes the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct CloseInstancePublicPortsOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension CloseInstancePublicPortsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension LightsailClientTypes.CloudFormationStackRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case destinationInfo
        case location
        case name
        case resourceType
        case sourceInfo
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let destinationInfo = self.destinationInfo {
            try encodeContainer.encode(destinationInfo, forKey: .destinationInfo)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sourceInfo = sourceInfo {
            var sourceInfoContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceInfo)
            for cloudformationstackrecordsourceinfo0 in sourceInfo {
                try sourceInfoContainer.encode(cloudformationstackrecordsourceinfo0)
            }
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RecordState.self, forKey: .state)
        state = stateDecoded
        let sourceInfoContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CloudFormationStackRecordSourceInfo?].self, forKey: .sourceInfo)
        var sourceInfoDecoded0:[LightsailClientTypes.CloudFormationStackRecordSourceInfo]? = nil
        if let sourceInfoContainer = sourceInfoContainer {
            sourceInfoDecoded0 = [LightsailClientTypes.CloudFormationStackRecordSourceInfo]()
            for structure0 in sourceInfoContainer {
                if let structure0 = structure0 {
                    sourceInfoDecoded0?.append(structure0)
                }
            }
        }
        sourceInfo = sourceInfoDecoded0
        let destinationInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DestinationInfo.self, forKey: .destinationInfo)
        destinationInfo = destinationInfoDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a CloudFormation stack record created as a result of the create cloud formation stack action. A CloudFormation stack record provides information about the AWS CloudFormation stack used to create a new Amazon Elastic Compute Cloud instance from an exported Lightsail instance snapshot.
    public struct CloudFormationStackRecord: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the CloudFormation stack record.
        public var arn: Swift.String?
        /// The date when the CloudFormation stack record was created.
        public var createdAt: ClientRuntime.Date?
        /// A list of objects describing the destination service, which is AWS CloudFormation, and the Amazon Resource Name (ARN) of the AWS CloudFormation stack.
        public var destinationInfo: LightsailClientTypes.DestinationInfo?
        /// A list of objects describing the Availability Zone and Amazon Web Services Region of the CloudFormation stack record.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the CloudFormation stack record. It starts with CloudFormationStackRecord followed by a GUID.
        public var name: Swift.String?
        /// The Lightsail resource type (e.g., CloudFormationStackRecord).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// A list of objects describing the source of the CloudFormation stack record.
        public var sourceInfo: [LightsailClientTypes.CloudFormationStackRecordSourceInfo]?
        /// The current state of the CloudFormation stack record.
        public var state: LightsailClientTypes.RecordState?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            destinationInfo: LightsailClientTypes.DestinationInfo? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sourceInfo: [LightsailClientTypes.CloudFormationStackRecordSourceInfo]? = nil,
            state: LightsailClientTypes.RecordState? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.destinationInfo = destinationInfo
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.sourceInfo = sourceInfo
            self.state = state
        }
    }

}

extension LightsailClientTypes.CloudFormationStackRecordSourceInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case name
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CloudFormationStackRecordSourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the source of a CloudFormation stack record (i.e., the export snapshot record).
    public struct CloudFormationStackRecordSourceInfo: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the export snapshot record.
        public var arn: Swift.String?
        /// The name of the record.
        public var name: Swift.String?
        /// The Lightsail resource type (e.g., ExportSnapshotRecord).
        public var resourceType: LightsailClientTypes.CloudFormationStackRecordSourceType?

        public init (
            arn: Swift.String? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.CloudFormationStackRecordSourceType? = nil
        )
        {
            self.arn = arn
            self.name = name
            self.resourceType = resourceType
        }
    }

}

extension LightsailClientTypes {
    public enum CloudFormationStackRecordSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exportsnapshotrecord
        case sdkUnknown(Swift.String)

        public static var allCases: [CloudFormationStackRecordSourceType] {
            return [
                .exportsnapshotrecord,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exportsnapshotrecord: return "ExportSnapshotRecord"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CloudFormationStackRecordSourceType(rawValue: rawValue) ?? CloudFormationStackRecordSourceType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case greaterthanorequaltothreshold
        case greaterthanthreshold
        case lessthanorequaltothreshold
        case lessthanthreshold
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .greaterthanorequaltothreshold,
                .greaterthanthreshold,
                .lessthanorequaltothreshold,
                .lessthanthreshold,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .greaterthanorequaltothreshold: return "GreaterThanOrEqualToThreshold"
            case .greaterthanthreshold: return "GreaterThanThreshold"
            case .lessthanorequaltothreshold: return "LessThanOrEqualToThreshold"
            case .lessthanthreshold: return "LessThanThreshold"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.ContactMethod: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case contactEndpoint
        case createdAt
        case location
        case name
        case `protocol` = "protocol"
        case resourceType
        case status
        case supportCode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let contactEndpoint = self.contactEndpoint {
            try encodeContainer.encode(contactEndpoint, forKey: .contactEndpoint)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactEndpoint)
        contactEndpoint = contactEndpointDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContactMethodStatus.self, forKey: .status)
        status = statusDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContactProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a contact method. A contact method is a way to send you notifications. For more information, see [Notifications in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications).
    public struct ContactMethod: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the contact method.
        public var arn: Swift.String?
        /// The destination of the contact method, such as an email address or a mobile phone number.
        public var contactEndpoint: Swift.String?
        /// The timestamp when the contact method was created.
        public var createdAt: ClientRuntime.Date?
        /// An object that describes the location of the contact method, such as the Amazon Web Services Region and Availability Zone.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the contact method.
        public var name: Swift.String?
        /// The protocol of the contact method, such as email or SMS (text messaging).
        public var `protocol`: LightsailClientTypes.ContactProtocol?
        /// The Lightsail resource type (e.g., ContactMethod).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The current status of the contact method. A contact method has the following possible status:
        ///
        /// * PendingVerification - The contact method has not yet been verified, and the verification has not yet expired.
        ///
        /// * Valid - The contact method has been verified.
        ///
        /// * InValid - An attempt was made to verify the contact method, but the verification has expired.
        public var status: LightsailClientTypes.ContactMethodStatus?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail contact method. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?

        public init (
            arn: Swift.String? = nil,
            contactEndpoint: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            `protocol`: LightsailClientTypes.ContactProtocol? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            status: LightsailClientTypes.ContactMethodStatus? = nil,
            supportCode: Swift.String? = nil
        )
        {
            self.arn = arn
            self.contactEndpoint = contactEndpoint
            self.createdAt = createdAt
            self.location = location
            self.name = name
            self.`protocol` = `protocol`
            self.resourceType = resourceType
            self.status = status
            self.supportCode = supportCode
        }
    }

}

extension LightsailClientTypes {
    public enum ContactMethodStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case invalid
        case pendingverification
        case valid
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactMethodStatus] {
            return [
                .invalid,
                .pendingverification,
                .valid,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .invalid: return "Invalid"
            case .pendingverification: return "PendingVerification"
            case .valid: return "Valid"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContactMethodStatus(rawValue: rawValue) ?? ContactMethodStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum ContactMethodVerificationProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case email
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactMethodVerificationProtocol] {
            return [
                .email,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .email: return "Email"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContactMethodVerificationProtocol(rawValue: rawValue) ?? ContactMethodVerificationProtocol.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum ContactProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case email
        case sms
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactProtocol] {
            return [
                .email,
                .sms,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .email: return "Email"
            case .sms: return "SMS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContactProtocol(rawValue: rawValue) ?? ContactProtocol.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Container: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case environment
        case image
        case ports
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for string0 in command {
                try commandContainer.encode(string0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, environment0) in environment {
                try environmentContainer.encode(environment0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let ports = ports {
            var portsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .ports)
            for (dictKey0, portMap0) in ports {
                try portsContainer.encode(portMap0.rawValue, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in environmentContainer {
                if let string0 = string0 {
                    environmentDecoded0?[key0] = string0
                }
            }
        }
        environment = environmentDecoded0
        let portsContainer = try containerValues.decodeIfPresent([Swift.String: LightsailClientTypes.ContainerServiceProtocol?].self, forKey: .ports)
        var portsDecoded0: [Swift.String:LightsailClientTypes.ContainerServiceProtocol]? = nil
        if let portsContainer = portsContainer {
            portsDecoded0 = [Swift.String:LightsailClientTypes.ContainerServiceProtocol]()
            for (key0, containerserviceprotocol0) in portsContainer {
                if let containerserviceprotocol0 = containerserviceprotocol0 {
                    portsDecoded0?[key0] = containerserviceprotocol0
                }
            }
        }
        ports = portsDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes the settings of a container that will be launched, or that is launched, to an Amazon Lightsail container service.
    public struct Container: Swift.Equatable {
        /// The launch command for the container.
        public var command: [Swift.String]?
        /// The environment variables of the container.
        public var environment: [Swift.String:Swift.String]?
        /// The name of the image used for the container. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (:). For example, if your container service name is container-service-1, the container image label is mystaticsite, and you want to use the third (3) version of the registered container image, then you should specify :container-service-1.mystaticsite.3. To use the latest version of a container image, specify latest instead of a version number (for example, :container-service-1.mystaticsite.latest). Lightsail will automatically use the highest numbered version of the registered container image. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, nginx:latest or nginx.
        public var image: Swift.String?
        /// The open firewall ports of the container.
        public var ports: [Swift.String:LightsailClientTypes.ContainerServiceProtocol]?

        public init (
            command: [Swift.String]? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            image: Swift.String? = nil,
            ports: [Swift.String:LightsailClientTypes.ContainerServiceProtocol]? = nil
        )
        {
            self.command = command
            self.environment = environment
            self.image = image
            self.ports = ports
        }
    }

}

extension LightsailClientTypes.ContainerImage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case digest
        case image
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let digest = self.digest {
            try encodeContainer.encode(digest, forKey: .digest)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let digestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .digest)
        digest = digestDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a container image that is registered to an Amazon Lightsail container service.
    public struct ContainerImage: Swift.Equatable {
        /// The timestamp when the container image was created.
        public var createdAt: ClientRuntime.Date?
        /// The digest of the container image.
        public var digest: Swift.String?
        /// The name of the container image.
        public var image: Swift.String?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            digest: Swift.String? = nil,
            image: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.digest = digest
            self.image = image
        }
    }

}

extension LightsailClientTypes.ContainerService: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case containerServiceName
        case createdAt
        case currentDeployment
        case isDisabled
        case location
        case nextDeployment
        case power
        case powerId
        case principalArn
        case privateDomainName
        case privateRegistryAccess
        case publicDomainNames
        case resourceType
        case scale
        case state
        case stateDetail
        case tags
        case url
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let containerServiceName = self.containerServiceName {
            try encodeContainer.encode(containerServiceName, forKey: .containerServiceName)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let currentDeployment = self.currentDeployment {
            try encodeContainer.encode(currentDeployment, forKey: .currentDeployment)
        }
        if let isDisabled = self.isDisabled {
            try encodeContainer.encode(isDisabled, forKey: .isDisabled)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextDeployment = self.nextDeployment {
            try encodeContainer.encode(nextDeployment, forKey: .nextDeployment)
        }
        if let power = self.power {
            try encodeContainer.encode(power.rawValue, forKey: .power)
        }
        if let powerId = self.powerId {
            try encodeContainer.encode(powerId, forKey: .powerId)
        }
        if let principalArn = self.principalArn {
            try encodeContainer.encode(principalArn, forKey: .principalArn)
        }
        if let privateDomainName = self.privateDomainName {
            try encodeContainer.encode(privateDomainName, forKey: .privateDomainName)
        }
        if let privateRegistryAccess = self.privateRegistryAccess {
            try encodeContainer.encode(privateRegistryAccess, forKey: .privateRegistryAccess)
        }
        if let publicDomainNames = publicDomainNames {
            var publicDomainNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .publicDomainNames)
            for (dictKey0, containerServicePublicDomains0) in publicDomainNames {
                var containerServicePublicDomains0Container = publicDomainNamesContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for string1 in containerServicePublicDomains0 {
                    try containerServicePublicDomains0Container.encode(string1)
                }
            }
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let scale = self.scale {
            try encodeContainer.encode(scale, forKey: .scale)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateDetail = self.stateDetail {
            try encodeContainer.encode(stateDetail, forKey: .stateDetail)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerServiceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerServiceName)
        containerServiceName = containerServiceNameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let powerDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServicePowerName.self, forKey: .power)
        power = powerDecoded
        let powerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .powerId)
        powerId = powerIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceState.self, forKey: .state)
        state = stateDecoded
        let stateDetailDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceStateDetail.self, forKey: .stateDetail)
        stateDetail = stateDetailDecoded
        let scaleDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scale)
        scale = scaleDecoded
        let currentDeploymentDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceDeployment.self, forKey: .currentDeployment)
        currentDeployment = currentDeploymentDecoded
        let nextDeploymentDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceDeployment.self, forKey: .nextDeployment)
        nextDeployment = nextDeploymentDecoded
        let isDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDisabled)
        isDisabled = isDisabledDecoded
        let principalArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principalArn)
        principalArn = principalArnDecoded
        let privateDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateDomainName)
        privateDomainName = privateDomainNameDecoded
        let publicDomainNamesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .publicDomainNames)
        var publicDomainNamesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let publicDomainNamesContainer = publicDomainNamesContainer {
            publicDomainNamesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, containerservicepublicdomainslist0) in publicDomainNamesContainer {
                var containerservicepublicdomainslist0Decoded0: [Swift.String]? = nil
                if let containerservicepublicdomainslist0 = containerservicepublicdomainslist0 {
                    containerservicepublicdomainslist0Decoded0 = [Swift.String]()
                    for string1 in containerservicepublicdomainslist0 {
                        if let string1 = string1 {
                            containerservicepublicdomainslist0Decoded0?.append(string1)
                        }
                    }
                }
                publicDomainNamesDecoded0?[key0] = containerservicepublicdomainslist0Decoded0
            }
        }
        publicDomainNames = publicDomainNamesDecoded0
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let privateRegistryAccessDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PrivateRegistryAccess.self, forKey: .privateRegistryAccess)
        privateRegistryAccess = privateRegistryAccessDecoded
    }
}

extension LightsailClientTypes {
    /// Describes an Amazon Lightsail container service.
    public struct ContainerService: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the container service.
        public var arn: Swift.String?
        /// The name of the container service.
        public var containerServiceName: Swift.String?
        /// The timestamp when the container service was created.
        public var createdAt: ClientRuntime.Date?
        /// An object that describes the current container deployment of the container service.
        public var currentDeployment: LightsailClientTypes.ContainerServiceDeployment?
        /// A Boolean value indicating whether the container service is disabled.
        public var isDisabled: Swift.Bool?
        /// An object that describes the location of the container service, such as the Amazon Web Services Region and Availability Zone.
        public var location: LightsailClientTypes.ResourceLocation?
        /// An object that describes the next deployment of the container service. This value is null when there is no deployment in a pending state.
        public var nextDeployment: LightsailClientTypes.ContainerServiceDeployment?
        /// The power specification of the container service. The power specifies the amount of RAM, the number of vCPUs, and the base price of the container service.
        public var power: LightsailClientTypes.ContainerServicePowerName?
        /// The ID of the power of the container service.
        public var powerId: Swift.String?
        /// The principal ARN of the container service. The principal ARN can be used to create a trust relationship between your standard Amazon Web Services account and your Lightsail container service. This allows you to give your service permission to access resources in your standard Amazon Web Services account.
        public var principalArn: Swift.String?
        /// The private domain name of the container service. The private domain name is accessible only by other resources within the default virtual private cloud (VPC) of your Lightsail account.
        public var privateDomainName: Swift.String?
        /// An object that describes the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
        public var privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccess?
        /// The public domain name of the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the CreateCertificate action to create a certificate for the public domain names you want to use with your container service. See CreateContainerService or UpdateContainerService for information about how to specify public domain names for your Lightsail container service.
        public var publicDomainNames: [Swift.String:[Swift.String]]?
        /// The Lightsail resource type of the container service (i.e., ContainerService).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The scale specification of the container service. The scale specifies the allocated compute nodes of the container service.
        public var scale: Swift.Int?
        /// The current state of the container service. The following container service states are possible:
        ///
        /// * PENDING - The container service is being created.
        ///
        /// * READY - The container service is running but it does not have an active container deployment.
        ///
        /// * DEPLOYING - The container service is launching a container deployment.
        ///
        /// * RUNNING - The container service is running and it has an active container deployment.
        ///
        /// * UPDATING - The container service capacity or its custom domains are being updated.
        ///
        /// * DELETING - The container service is being deleted.
        ///
        /// * DISABLED - The container service is disabled, and its active deployment and containers, if any, are shut down.
        public var state: LightsailClientTypes.ContainerServiceState?
        /// An object that describes the current state of the container service. The state detail is populated only when a container service is in a PENDING, DEPLOYING, or UPDATING state.
        public var stateDetail: LightsailClientTypes.ContainerServiceStateDetail?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?
        /// The publicly accessible URL of the container service. If no public endpoint is specified in the currentDeployment, this URL returns a 404 response.
        public var url: Swift.String?

        public init (
            arn: Swift.String? = nil,
            containerServiceName: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            currentDeployment: LightsailClientTypes.ContainerServiceDeployment? = nil,
            isDisabled: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            nextDeployment: LightsailClientTypes.ContainerServiceDeployment? = nil,
            power: LightsailClientTypes.ContainerServicePowerName? = nil,
            powerId: Swift.String? = nil,
            principalArn: Swift.String? = nil,
            privateDomainName: Swift.String? = nil,
            privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccess? = nil,
            publicDomainNames: [Swift.String:[Swift.String]]? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            scale: Swift.Int? = nil,
            state: LightsailClientTypes.ContainerServiceState? = nil,
            stateDetail: LightsailClientTypes.ContainerServiceStateDetail? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            url: Swift.String? = nil
        )
        {
            self.arn = arn
            self.containerServiceName = containerServiceName
            self.createdAt = createdAt
            self.currentDeployment = currentDeployment
            self.isDisabled = isDisabled
            self.location = location
            self.nextDeployment = nextDeployment
            self.power = power
            self.powerId = powerId
            self.principalArn = principalArn
            self.privateDomainName = privateDomainName
            self.privateRegistryAccess = privateRegistryAccess
            self.publicDomainNames = publicDomainNames
            self.resourceType = resourceType
            self.scale = scale
            self.state = state
            self.stateDetail = stateDetail
            self.tags = tags
            self.url = url
        }
    }

}

extension LightsailClientTypes.ContainerServiceDeployment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers
        case createdAt
        case publicEndpoint
        case state
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .containers)
            for (dictKey0, containerMap0) in containers {
                try containersContainer.encode(containerMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let publicEndpoint = self.publicEndpoint {
            try encodeContainer.encode(publicEndpoint, forKey: .publicEndpoint)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceDeploymentState.self, forKey: .state)
        state = stateDecoded
        let containersContainer = try containerValues.decodeIfPresent([Swift.String: LightsailClientTypes.Container?].self, forKey: .containers)
        var containersDecoded0: [Swift.String:LightsailClientTypes.Container]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [Swift.String:LightsailClientTypes.Container]()
            for (key0, container0) in containersContainer {
                if let container0 = container0 {
                    containersDecoded0?[key0] = container0
                }
            }
        }
        containers = containersDecoded0
        let publicEndpointDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceEndpoint.self, forKey: .publicEndpoint)
        publicEndpoint = publicEndpointDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a container deployment configuration of an Amazon Lightsail container service. A deployment specifies the settings, such as the ports and launch command, of containers that are deployed to your container service.
    public struct ContainerServiceDeployment: Swift.Equatable {
        /// An object that describes the configuration for the containers of the deployment.
        public var containers: [Swift.String:LightsailClientTypes.Container]?
        /// The timestamp when the deployment was created.
        public var createdAt: ClientRuntime.Date?
        /// An object that describes the endpoint of the deployment.
        public var publicEndpoint: LightsailClientTypes.ContainerServiceEndpoint?
        /// The state of the deployment. A deployment can be in one of the following states:
        ///
        /// * Activating - The deployment is being created.
        ///
        /// * Active - The deployment was successfully created, and it's currently running on the container service. The container service can have only one deployment in an active state at a time.
        ///
        /// * Inactive - The deployment was previously successfully created, but it is not currently running on the container service.
        ///
        /// * Failed - The deployment failed. Use the GetContainerLog action to view the log events for the containers in the deployment to try to determine the reason for the failure.
        public var state: LightsailClientTypes.ContainerServiceDeploymentState?
        /// The version number of the deployment.
        public var version: Swift.Int?

        public init (
            containers: [Swift.String:LightsailClientTypes.Container]? = nil,
            createdAt: ClientRuntime.Date? = nil,
            publicEndpoint: LightsailClientTypes.ContainerServiceEndpoint? = nil,
            state: LightsailClientTypes.ContainerServiceDeploymentState? = nil,
            version: Swift.Int? = nil
        )
        {
            self.containers = containers
            self.createdAt = createdAt
            self.publicEndpoint = publicEndpoint
            self.state = state
            self.version = version
        }
    }

}

extension LightsailClientTypes.ContainerServiceDeploymentRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers
        case publicEndpoint
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .containers)
            for (dictKey0, containerMap0) in containers {
                try containersContainer.encode(containerMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let publicEndpoint = self.publicEndpoint {
            try encodeContainer.encode(publicEndpoint, forKey: .publicEndpoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containersContainer = try containerValues.decodeIfPresent([Swift.String: LightsailClientTypes.Container?].self, forKey: .containers)
        var containersDecoded0: [Swift.String:LightsailClientTypes.Container]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [Swift.String:LightsailClientTypes.Container]()
            for (key0, container0) in containersContainer {
                if let container0 = container0 {
                    containersDecoded0?[key0] = container0
                }
            }
        }
        containers = containersDecoded0
        let publicEndpointDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.EndpointRequest.self, forKey: .publicEndpoint)
        publicEndpoint = publicEndpointDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a container deployment configuration of an Amazon Lightsail container service. A deployment specifies the settings, such as the ports and launch command, of containers that are deployed to your container service.
    public struct ContainerServiceDeploymentRequest: Swift.Equatable {
        /// An object that describes the configuration for the containers of the deployment.
        public var containers: [Swift.String:LightsailClientTypes.Container]?
        /// An object that describes the endpoint of the deployment.
        public var publicEndpoint: LightsailClientTypes.EndpointRequest?

        public init (
            containers: [Swift.String:LightsailClientTypes.Container]? = nil,
            publicEndpoint: LightsailClientTypes.EndpointRequest? = nil
        )
        {
            self.containers = containers
            self.publicEndpoint = publicEndpoint
        }
    }

}

extension LightsailClientTypes {
    public enum ContainerServiceDeploymentState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activating
        case active
        case failed
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceDeploymentState] {
            return [
                .activating,
                .active,
                .failed,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activating: return "ACTIVATING"
            case .active: return "ACTIVE"
            case .failed: return "FAILED"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerServiceDeploymentState(rawValue: rawValue) ?? ContainerServiceDeploymentState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.ContainerServiceECRImagePullerRole: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isActive
        case principalArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let isActive = self.isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let principalArn = self.principalArn {
            try encodeContainer.encode(principalArn, forKey: .principalArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
        let principalArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principalArn)
        principalArn = principalArnDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the activation status of the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories. When activated, Lightsail creates an Identity and Access Management (IAM) role for the specified Lightsail container service. You can use the ARN of the role to create a trust relationship between your Lightsail container service and an Amazon ECR private repository in your Amazon Web Services account. This allows your container service to pull images from Amazon ECR private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
    public struct ContainerServiceECRImagePullerRole: Swift.Equatable {
        /// A Boolean value that indicates whether the role is activated.
        public var isActive: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the role, if it is activated.
        public var principalArn: Swift.String?

        public init (
            isActive: Swift.Bool? = nil,
            principalArn: Swift.String? = nil
        )
        {
            self.isActive = isActive
            self.principalArn = principalArn
        }
    }

}

extension LightsailClientTypes.ContainerServiceECRImagePullerRoleRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isActive
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let isActive = self.isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a request to activate or deactivate the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories. When activated, Lightsail creates an Identity and Access Management (IAM) role for the specified Lightsail container service. You can use the ARN of the role to create a trust relationship between your Lightsail container service and an Amazon ECR private repository in your Amazon Web Services account. This allows your container service to pull images from Amazon ECR private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
    public struct ContainerServiceECRImagePullerRoleRequest: Swift.Equatable {
        /// A Boolean value that indicates whether to activate the role.
        public var isActive: Swift.Bool?

        public init (
            isActive: Swift.Bool? = nil
        )
        {
            self.isActive = isActive
        }
    }

}

extension LightsailClientTypes.ContainerServiceEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName
        case containerPort
        case healthCheck
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = self.containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let containerPort = self.containerPort {
            try encodeContainer.encode(containerPort, forKey: .containerPort)
        }
        if let healthCheck = self.healthCheck {
            try encodeContainer.encode(healthCheck, forKey: .healthCheck)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let containerPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .containerPort)
        containerPort = containerPortDecoded
        let healthCheckDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceHealthCheckConfig.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the public endpoint configuration of a deployment of an Amazon Lightsail container service.
    public struct ContainerServiceEndpoint: Swift.Equatable {
        /// The name of the container entry of the deployment that the endpoint configuration applies to.
        public var containerName: Swift.String?
        /// The port of the specified container to which traffic is forwarded to.
        public var containerPort: Swift.Int?
        /// An object that describes the health check configuration of the container.
        public var healthCheck: LightsailClientTypes.ContainerServiceHealthCheckConfig?

        public init (
            containerName: Swift.String? = nil,
            containerPort: Swift.Int? = nil,
            healthCheck: LightsailClientTypes.ContainerServiceHealthCheckConfig? = nil
        )
        {
            self.containerName = containerName
            self.containerPort = containerPort
            self.healthCheck = healthCheck
        }
    }

}

extension LightsailClientTypes.ContainerServiceHealthCheckConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthyThreshold
        case intervalSeconds
        case path
        case successCodes
        case timeoutSeconds
        case unhealthyThreshold
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let healthyThreshold = self.healthyThreshold {
            try encodeContainer.encode(healthyThreshold, forKey: .healthyThreshold)
        }
        if let intervalSeconds = self.intervalSeconds {
            try encodeContainer.encode(intervalSeconds, forKey: .intervalSeconds)
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let successCodes = self.successCodes {
            try encodeContainer.encode(successCodes, forKey: .successCodes)
        }
        if let timeoutSeconds = self.timeoutSeconds {
            try encodeContainer.encode(timeoutSeconds, forKey: .timeoutSeconds)
        }
        if let unhealthyThreshold = self.unhealthyThreshold {
            try encodeContainer.encode(unhealthyThreshold, forKey: .unhealthyThreshold)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let healthyThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthyThreshold)
        healthyThreshold = healthyThresholdDecoded
        let unhealthyThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unhealthyThreshold)
        unhealthyThreshold = unhealthyThresholdDecoded
        let timeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutSeconds)
        timeoutSeconds = timeoutSecondsDecoded
        let intervalSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .intervalSeconds)
        intervalSeconds = intervalSecondsDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let successCodesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successCodes)
        successCodes = successCodesDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the health check configuration of an Amazon Lightsail container service.
    public struct ContainerServiceHealthCheckConfig: Swift.Equatable {
        /// The number of consecutive health checks successes required before moving the container to the Healthy state. The default value is 2.
        public var healthyThreshold: Swift.Int?
        /// The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. The default value is 5.
        public var intervalSeconds: Swift.Int?
        /// The path on the container on which to perform the health check. The default value is /.
        public var path: Swift.String?
        /// The HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. You can specify multiple values (for example, 200,202) or a range of values (for example, 200-299).
        public var successCodes: Swift.String?
        /// The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. The default value is 2.
        public var timeoutSeconds: Swift.Int?
        /// The number of consecutive health check failures required before moving the container to the Unhealthy state. The default value is 2.
        public var unhealthyThreshold: Swift.Int?

        public init (
            healthyThreshold: Swift.Int? = nil,
            intervalSeconds: Swift.Int? = nil,
            path: Swift.String? = nil,
            successCodes: Swift.String? = nil,
            timeoutSeconds: Swift.Int? = nil,
            unhealthyThreshold: Swift.Int? = nil
        )
        {
            self.healthyThreshold = healthyThreshold
            self.intervalSeconds = intervalSeconds
            self.path = path
            self.successCodes = successCodes
            self.timeoutSeconds = timeoutSeconds
            self.unhealthyThreshold = unhealthyThreshold
        }
    }

}

extension LightsailClientTypes.ContainerServiceLogEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the log events of a container of an Amazon Lightsail container service.
    public struct ContainerServiceLogEvent: Swift.Equatable {
        /// The timestamp when the container service log event was created.
        public var createdAt: ClientRuntime.Date?
        /// The message of the container service log event.
        public var message: Swift.String?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            message: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.message = message
        }
    }

}

extension LightsailClientTypes {
    public enum ContainerServiceMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cpuutilization
        case memoryutilization
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceMetricName] {
            return [
                .cpuutilization,
                .memoryutilization,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cpuutilization: return "CPUUtilization"
            case .memoryutilization: return "MemoryUtilization"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerServiceMetricName(rawValue: rawValue) ?? ContainerServiceMetricName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.ContainerServicePower: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cpuCount
        case isActive
        case name
        case powerId
        case price
        case ramSizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cpuCount = self.cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let isActive = self.isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let powerId = self.powerId {
            try encodeContainer.encode(powerId, forKey: .powerId)
        }
        if let price = self.price {
            try encodeContainer.encode(price, forKey: .price)
        }
        if let ramSizeInGb = self.ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let powerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .powerId)
        powerId = powerIdDecoded
        let priceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .price)
        price = priceDecoded
        let cpuCountDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the powers that can be specified for an Amazon Lightsail container service. The power specifies the amount of RAM, the number of vCPUs, and the base price of the container service.
    public struct ContainerServicePower: Swift.Equatable {
        /// The number of vCPUs included in the power.
        public var cpuCount: Swift.Float?
        /// A Boolean value indicating whether the power is active and can be specified for container services.
        public var isActive: Swift.Bool?
        /// The friendly name of the power (e.g., nano).
        public var name: Swift.String?
        /// The ID of the power (e.g., nano-1).
        public var powerId: Swift.String?
        /// The monthly price of the power in USD.
        public var price: Swift.Float?
        /// The amount of RAM (in GB) of the power.
        public var ramSizeInGb: Swift.Float?

        public init (
            cpuCount: Swift.Float? = nil,
            isActive: Swift.Bool? = nil,
            name: Swift.String? = nil,
            powerId: Swift.String? = nil,
            price: Swift.Float? = nil,
            ramSizeInGb: Swift.Float? = nil
        )
        {
            self.cpuCount = cpuCount
            self.isActive = isActive
            self.name = name
            self.powerId = powerId
            self.price = price
            self.ramSizeInGb = ramSizeInGb
        }
    }

}

extension LightsailClientTypes {
    public enum ContainerServicePowerName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case large
        case medium
        case micro
        case nano
        case small
        case xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServicePowerName] {
            return [
                .large,
                .medium,
                .micro,
                .nano,
                .small,
                .xlarge,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .large: return "large"
            case .medium: return "medium"
            case .micro: return "micro"
            case .nano: return "nano"
            case .small: return "small"
            case .xlarge: return "xlarge"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerServicePowerName(rawValue: rawValue) ?? ContainerServicePowerName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum ContainerServiceProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case http
        case https
        case tcp
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceProtocol] {
            return [
                .http,
                .https,
                .tcp,
                .udp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .http: return "HTTP"
            case .https: return "HTTPS"
            case .tcp: return "TCP"
            case .udp: return "UDP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerServiceProtocol(rawValue: rawValue) ?? ContainerServiceProtocol.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.ContainerServiceRegistryLogin: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expiresAt
        case password
        case registry
        case username
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expiresAt = self.expiresAt {
            try encodeContainer.encodeTimestamp(expiresAt, format: .epochSeconds, forKey: .expiresAt)
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let registry = self.registry {
            try encodeContainer.encode(registry, forKey: .registry)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let expiresAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .expiresAt)
        expiresAt = expiresAtDecoded
        let registryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registry)
        registry = registryDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the sign-in credentials for the container image registry of an Amazon Lightsail account.
    public struct ContainerServiceRegistryLogin: Swift.Equatable {
        /// The timestamp of when the container image registry sign-in credentials expire. The log in credentials expire 12 hours after they are created, at which point you will need to create a new set of log in credentials using the CreateContainerServiceRegistryLogin action.
        public var expiresAt: ClientRuntime.Date?
        /// The container service registry password to use to push container images to the container image registry of a Lightsail account
        public var password: Swift.String?
        /// The address to use to push container images to the container image registry of a Lightsail account.
        public var registry: Swift.String?
        /// The container service registry username to use to push container images to the container image registry of a Lightsail account.
        public var username: Swift.String?

        public init (
            expiresAt: ClientRuntime.Date? = nil,
            password: Swift.String? = nil,
            registry: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.expiresAt = expiresAt
            self.password = password
            self.registry = registry
            self.username = username
        }
    }

}

extension LightsailClientTypes {
    public enum ContainerServiceState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleting
        case deploying
        case disabled
        case pending
        case ready
        case running
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceState] {
            return [
                .deleting,
                .deploying,
                .disabled,
                .pending,
                .ready,
                .running,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "DELETING"
            case .deploying: return "DEPLOYING"
            case .disabled: return "DISABLED"
            case .pending: return "PENDING"
            case .ready: return "READY"
            case .running: return "RUNNING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerServiceState(rawValue: rawValue) ?? ContainerServiceState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.ContainerServiceStateDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceStateDetailCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the current state of a container service.
    public struct ContainerServiceStateDetail: Swift.Equatable {
        /// The state code of the container service. The following state codes are possible:
        ///
        /// * The following state codes are possible if your container service is in a DEPLOYING or UPDATING state:
        ///
        /// * CREATING_SYSTEM_RESOURCES - The system resources for your container service are being created.
        ///
        /// * CREATING_NETWORK_INFRASTRUCTURE - The network infrastructure for your container service are being created.
        ///
        /// * PROVISIONING_CERTIFICATE - The SSL/TLS certificate for your container service is being created.
        ///
        /// * PROVISIONING_SERVICE - Your container service is being provisioned.
        ///
        /// * CREATING_DEPLOYMENT - Your deployment is being created on your container service.
        ///
        /// * EVALUATING_HEALTH_CHECK - The health of your deployment is being evaluated.
        ///
        /// * ACTIVATING_DEPLOYMENT - Your deployment is being activated.
        ///
        ///
        ///
        ///
        /// * The following state codes are possible if your container service is in a PENDING state:
        ///
        /// * CERTIFICATE_LIMIT_EXCEEDED - The SSL/TLS certificate required for your container service exceeds the maximum number of certificates allowed for your account.
        ///
        /// * UNKNOWN_ERROR - An error was experienced when your container service was being created.
        public var code: LightsailClientTypes.ContainerServiceStateDetailCode?
        /// A message that provides more information for the state code. The state detail is populated only when a container service is in a PENDING, DEPLOYING, or UPDATING state.
        public var message: Swift.String?

        public init (
            code: LightsailClientTypes.ContainerServiceStateDetailCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension LightsailClientTypes {
    public enum ContainerServiceStateDetailCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activatingDeployment
        case certificateLimitExceeded
        case creatingDeployment
        case creatingNetworkInfrastructure
        case creatingSystemResources
        case evaluatingHealthCheck
        case provisioningCertificate
        case provisioningService
        case unknownError
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceStateDetailCode] {
            return [
                .activatingDeployment,
                .certificateLimitExceeded,
                .creatingDeployment,
                .creatingNetworkInfrastructure,
                .creatingSystemResources,
                .evaluatingHealthCheck,
                .provisioningCertificate,
                .provisioningService,
                .unknownError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activatingDeployment: return "ACTIVATING_DEPLOYMENT"
            case .certificateLimitExceeded: return "CERTIFICATE_LIMIT_EXCEEDED"
            case .creatingDeployment: return "CREATING_DEPLOYMENT"
            case .creatingNetworkInfrastructure: return "CREATING_NETWORK_INFRASTRUCTURE"
            case .creatingSystemResources: return "CREATING_SYSTEM_RESOURCES"
            case .evaluatingHealthCheck: return "EVALUATING_HEALTH_CHECK"
            case .provisioningCertificate: return "PROVISIONING_CERTIFICATE"
            case .provisioningService: return "PROVISIONING_SERVICE"
            case .unknownError: return "UNKNOWN_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerServiceStateDetailCode(rawValue: rawValue) ?? ContainerServiceStateDetailCode.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.CookieObject: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cookiesAllowList
        case option
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cookiesAllowList = cookiesAllowList {
            var cookiesAllowListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cookiesAllowList)
            for string0 in cookiesAllowList {
                try cookiesAllowListContainer.encode(string0)
            }
        }
        if let option = self.option {
            try encodeContainer.encode(option.rawValue, forKey: .option)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ForwardValues.self, forKey: .option)
        option = optionDecoded
        let cookiesAllowListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cookiesAllowList)
        var cookiesAllowListDecoded0:[Swift.String]? = nil
        if let cookiesAllowListContainer = cookiesAllowListContainer {
            cookiesAllowListDecoded0 = [Swift.String]()
            for string0 in cookiesAllowListContainer {
                if let string0 = string0 {
                    cookiesAllowListDecoded0?.append(string0)
                }
            }
        }
        cookiesAllowList = cookiesAllowListDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes whether an Amazon Lightsail content delivery network (CDN) distribution forwards cookies to the origin and, if so, which ones. For the cookies that you specify, your distribution caches separate versions of the specified content based on the cookie values in viewer requests.
    public struct CookieObject: Swift.Equatable {
        /// The specific cookies to forward to your distribution's origin.
        public var cookiesAllowList: [Swift.String]?
        /// Specifies which cookies to forward to the distribution's origin for a cache behavior: all, none, or allow-list to forward only the cookies specified in the cookiesAllowList parameter.
        public var option: LightsailClientTypes.ForwardValues?

        public init (
            cookiesAllowList: [Swift.String]? = nil,
            option: LightsailClientTypes.ForwardValues? = nil
        )
        {
            self.cookiesAllowList = cookiesAllowList
            self.option = option
        }
    }

}

extension CopySnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case restoreDate
        case sourceRegion
        case sourceResourceName
        case sourceSnapshotName
        case targetSnapshotName
        case useLatestRestorableAutoSnapshot
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let restoreDate = self.restoreDate {
            try encodeContainer.encode(restoreDate, forKey: .restoreDate)
        }
        if let sourceRegion = self.sourceRegion {
            try encodeContainer.encode(sourceRegion.rawValue, forKey: .sourceRegion)
        }
        if let sourceResourceName = self.sourceResourceName {
            try encodeContainer.encode(sourceResourceName, forKey: .sourceResourceName)
        }
        if let sourceSnapshotName = self.sourceSnapshotName {
            try encodeContainer.encode(sourceSnapshotName, forKey: .sourceSnapshotName)
        }
        if let targetSnapshotName = self.targetSnapshotName {
            try encodeContainer.encode(targetSnapshotName, forKey: .targetSnapshotName)
        }
        if let useLatestRestorableAutoSnapshot = self.useLatestRestorableAutoSnapshot {
            try encodeContainer.encode(useLatestRestorableAutoSnapshot, forKey: .useLatestRestorableAutoSnapshot)
        }
    }
}

extension CopySnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CopySnapshotInput: Swift.Equatable {
    /// The date of the source automatic snapshot to copy. Use the get auto snapshots operation to identify the dates of the available automatic snapshots. Constraints:
    ///
    /// * Must be specified in YYYY-MM-DD format.
    ///
    /// * This parameter cannot be defined together with the use latest restorable auto snapshot parameter. The restore date and use latest restorable auto snapshot parameters are mutually exclusive.
    ///
    /// * Define this parameter only when copying an automatic snapshot as a manual snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots).
    public var restoreDate: Swift.String?
    /// The Amazon Web Services Region where the source manual or automatic snapshot is located.
    /// This member is required.
    public var sourceRegion: LightsailClientTypes.RegionName?
    /// The name of the source instance or disk from which the source automatic snapshot was created. Constraint:
    ///
    /// * Define this parameter only when copying an automatic snapshot as a manual snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots).
    public var sourceResourceName: Swift.String?
    /// The name of the source manual snapshot to copy. Constraint:
    ///
    /// * Define this parameter only when copying a manual snapshot as another manual snapshot.
    public var sourceSnapshotName: Swift.String?
    /// The name of the new manual snapshot to be created as a copy.
    /// This member is required.
    public var targetSnapshotName: Swift.String?
    /// A Boolean value to indicate whether to use the latest available automatic snapshot of the specified source instance or disk. Constraints:
    ///
    /// * This parameter cannot be defined together with the restore date parameter. The use latest restorable auto snapshot and restore date parameters are mutually exclusive.
    ///
    /// * Define this parameter only when copying an automatic snapshot as a manual snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots).
    public var useLatestRestorableAutoSnapshot: Swift.Bool?

    public init (
        restoreDate: Swift.String? = nil,
        sourceRegion: LightsailClientTypes.RegionName? = nil,
        sourceResourceName: Swift.String? = nil,
        sourceSnapshotName: Swift.String? = nil,
        targetSnapshotName: Swift.String? = nil,
        useLatestRestorableAutoSnapshot: Swift.Bool? = nil
    )
    {
        self.restoreDate = restoreDate
        self.sourceRegion = sourceRegion
        self.sourceResourceName = sourceResourceName
        self.sourceSnapshotName = sourceSnapshotName
        self.targetSnapshotName = targetSnapshotName
        self.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot
    }
}

struct CopySnapshotInputBody: Swift.Equatable {
    let sourceSnapshotName: Swift.String?
    let sourceResourceName: Swift.String?
    let restoreDate: Swift.String?
    let useLatestRestorableAutoSnapshot: Swift.Bool?
    let targetSnapshotName: Swift.String?
    let sourceRegion: LightsailClientTypes.RegionName?
}

extension CopySnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case restoreDate
        case sourceRegion
        case sourceResourceName
        case sourceSnapshotName
        case targetSnapshotName
        case useLatestRestorableAutoSnapshot
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceSnapshotName)
        sourceSnapshotName = sourceSnapshotNameDecoded
        let sourceResourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceResourceName)
        sourceResourceName = sourceResourceNameDecoded
        let restoreDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restoreDate)
        restoreDate = restoreDateDecoded
        let useLatestRestorableAutoSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useLatestRestorableAutoSnapshot)
        useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshotDecoded
        let targetSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetSnapshotName)
        targetSnapshotName = targetSnapshotNameDecoded
        let sourceRegionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RegionName.self, forKey: .sourceRegion)
        sourceRegion = sourceRegionDecoded
    }
}

extension CopySnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CopySnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CopySnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CopySnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CopySnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CopySnapshotOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CopySnapshotOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CopySnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateBucketAccessKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
    }
}

extension CreateBucketAccessKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateBucketAccessKeyInput: Swift.Equatable {
    /// The name of the bucket that the new access key will belong to, and grant access to.
    /// This member is required.
    public var bucketName: Swift.String?

    public init (
        bucketName: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
    }
}

struct CreateBucketAccessKeyInputBody: Swift.Equatable {
    let bucketName: Swift.String?
}

extension CreateBucketAccessKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
    }
}

extension CreateBucketAccessKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateBucketAccessKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateBucketAccessKeyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBucketAccessKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateBucketAccessKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessKey = output.accessKey
            self.operations = output.operations
        } else {
            self.accessKey = nil
            self.operations = nil
        }
    }
}

public struct CreateBucketAccessKeyOutputResponse: Swift.Equatable {
    /// An object that describes the access key that is created.
    public var accessKey: LightsailClientTypes.AccessKey?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        accessKey: LightsailClientTypes.AccessKey? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.accessKey = accessKey
        self.operations = operations
    }
}

struct CreateBucketAccessKeyOutputResponseBody: Swift.Equatable {
    let accessKey: LightsailClientTypes.AccessKey?
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateBucketAccessKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessKeyDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AccessKey.self, forKey: .accessKey)
        accessKey = accessKeyDecoded
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateBucketInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
        case bundleId
        case enableObjectVersioning
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let enableObjectVersioning = self.enableObjectVersioning {
            try encodeContainer.encode(enableObjectVersioning, forKey: .enableObjectVersioning)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateBucketInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateBucketInput: Swift.Equatable {
    /// The name for the bucket. For more information about bucket names, see [Bucket naming rules in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/bucket-naming-rules-in-amazon-lightsail) in the Amazon Lightsail Developer Guide.
    /// This member is required.
    public var bucketName: Swift.String?
    /// The ID of the bundle to use for the bucket. A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a bucket. Use the [GetBucketBundles](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketBundles.html) action to get a list of bundle IDs that you can specify. Use the [UpdateBucketBundle](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html) action to change the bundle after the bucket is created.
    /// This member is required.
    public var bundleId: Swift.String?
    /// A Boolean value that indicates whether to enable versioning of objects in the bucket. For more information about versioning, see [Enabling and suspending object versioning in a bucket in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-managing-bucket-object-versioning) in the Amazon Lightsail Developer Guide.
    public var enableObjectVersioning: Swift.Bool?
    /// The tag keys and optional values to add to the bucket during creation. Use the [TagResource](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_TagResource.html) action to tag the bucket after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init (
        bucketName: Swift.String? = nil,
        bundleId: Swift.String? = nil,
        enableObjectVersioning: Swift.Bool? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.bucketName = bucketName
        self.bundleId = bundleId
        self.enableObjectVersioning = enableObjectVersioning
        self.tags = tags
    }
}

struct CreateBucketInputBody: Swift.Equatable {
    let bucketName: Swift.String?
    let bundleId: Swift.String?
    let tags: [LightsailClientTypes.Tag]?
    let enableObjectVersioning: Swift.Bool?
}

extension CreateBucketInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
        case bundleId
        case enableObjectVersioning
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let enableObjectVersioningDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableObjectVersioning)
        enableObjectVersioning = enableObjectVersioningDecoded
    }
}

extension CreateBucketOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateBucketOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateBucketOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBucketOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateBucketOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bucket = output.bucket
            self.operations = output.operations
        } else {
            self.bucket = nil
            self.operations = nil
        }
    }
}

public struct CreateBucketOutputResponse: Swift.Equatable {
    /// An object that describes the bucket that is created.
    public var bucket: LightsailClientTypes.Bucket?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        bucket: LightsailClientTypes.Bucket? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.bucket = bucket
        self.operations = operations
    }
}

struct CreateBucketOutputResponseBody: Swift.Equatable {
    let bucket: LightsailClientTypes.Bucket?
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateBucketOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Bucket.self, forKey: .bucket)
        bucket = bucketDecoded
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateCertificateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case domainName
        case subjectAlternativeNames
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = self.certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let subjectAlternativeNames = subjectAlternativeNames {
            var subjectAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subjectAlternativeNames)
            for domainname0 in subjectAlternativeNames {
                try subjectAlternativeNamesContainer.encode(domainname0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateCertificateInput: Swift.Equatable {
    /// The name for the certificate.
    /// This member is required.
    public var certificateName: Swift.String?
    /// The domain name (e.g., example.com) for the certificate.
    /// This member is required.
    public var domainName: Swift.String?
    /// An array of strings that specify the alternate domains (e.g., example2.com) and subdomains (e.g., blog.example.com) for the certificate. You can specify a maximum of nine alternate domains (in addition to the primary domain name). Wildcard domain entries (e.g., *.example.com) are not supported.
    public var subjectAlternativeNames: [Swift.String]?
    /// The tag keys and optional values to add to the certificate during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init (
        certificateName: Swift.String? = nil,
        domainName: Swift.String? = nil,
        subjectAlternativeNames: [Swift.String]? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.certificateName = certificateName
        self.domainName = domainName
        self.subjectAlternativeNames = subjectAlternativeNames
        self.tags = tags
    }
}

struct CreateCertificateInputBody: Swift.Equatable {
    let certificateName: Swift.String?
    let domainName: Swift.String?
    let subjectAlternativeNames: [Swift.String]?
    let tags: [LightsailClientTypes.Tag]?
}

extension CreateCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case domainName
        case subjectAlternativeNames
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let subjectAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subjectAlternativeNames)
        var subjectAlternativeNamesDecoded0:[Swift.String]? = nil
        if let subjectAlternativeNamesContainer = subjectAlternativeNamesContainer {
            subjectAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in subjectAlternativeNamesContainer {
                if let string0 = string0 {
                    subjectAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        subjectAlternativeNames = subjectAlternativeNamesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateCertificateOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificate = output.certificate
            self.operations = output.operations
        } else {
            self.certificate = nil
            self.operations = nil
        }
    }
}

public struct CreateCertificateOutputResponse: Swift.Equatable {
    /// An object that describes the certificate created.
    public var certificate: LightsailClientTypes.CertificateSummary?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        certificate: LightsailClientTypes.CertificateSummary? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.certificate = certificate
        self.operations = operations
    }
}

struct CreateCertificateOutputResponseBody: Swift.Equatable {
    let certificate: LightsailClientTypes.CertificateSummary?
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CertificateSummary.self, forKey: .certificate)
        certificate = certificateDecoded
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateCloudFormationStackInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instances
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instances = instances {
            var instancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instances)
            for instanceentry0 in instances {
                try instancesContainer.encode(instanceentry0)
            }
        }
    }
}

extension CreateCloudFormationStackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateCloudFormationStackInput: Swift.Equatable {
    /// An array of parameters that will be used to create the new Amazon EC2 instance. You can only pass one instance entry at a time in this array. You will get an invalid parameter error if you pass more than one instance entry in this array.
    /// This member is required.
    public var instances: [LightsailClientTypes.InstanceEntry]?

    public init (
        instances: [LightsailClientTypes.InstanceEntry]? = nil
    )
    {
        self.instances = instances
    }
}

struct CreateCloudFormationStackInputBody: Swift.Equatable {
    let instances: [LightsailClientTypes.InstanceEntry]?
}

extension CreateCloudFormationStackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instances
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.InstanceEntry?].self, forKey: .instances)
        var instancesDecoded0:[LightsailClientTypes.InstanceEntry]? = nil
        if let instancesContainer = instancesContainer {
            instancesDecoded0 = [LightsailClientTypes.InstanceEntry]()
            for structure0 in instancesContainer {
                if let structure0 = structure0 {
                    instancesDecoded0?.append(structure0)
                }
            }
        }
        instances = instancesDecoded0
    }
}

extension CreateCloudFormationStackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCloudFormationStackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateCloudFormationStackOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCloudFormationStackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateCloudFormationStackOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateCloudFormationStackOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateCloudFormationStackOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateCloudFormationStackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateContactMethodInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactEndpoint
        case `protocol` = "protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactEndpoint = self.contactEndpoint {
            try encodeContainer.encode(contactEndpoint, forKey: .contactEndpoint)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
    }
}

extension CreateContactMethodInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateContactMethodInput: Swift.Equatable {
    /// The destination of the contact method, such as an email address or a mobile phone number. Use the E.164 format when specifying a mobile phone number. E.164 is a standard for the phone number structure used for international telecommunication. Phone numbers that follow this format can have a maximum of 15 digits, and they are prefixed with the plus character (+) and the country code. For example, a U.S. phone number in E.164 format would be specified as +1XXX5550100. For more information, see [E.164](https://en.wikipedia.org/wiki/E.164) on Wikipedia.
    /// This member is required.
    public var contactEndpoint: Swift.String?
    /// The protocol of the contact method, such as Email or SMS (text messaging). The SMS protocol is supported only in the following Amazon Web Services Regions.
    ///
    /// * US East (N. Virginia) (us-east-1)
    ///
    /// * US West (Oregon) (us-west-2)
    ///
    /// * Europe (Ireland) (eu-west-1)
    ///
    /// * Asia Pacific (Tokyo) (ap-northeast-1)
    ///
    /// * Asia Pacific (Singapore) (ap-southeast-1)
    ///
    /// * Asia Pacific (Sydney) (ap-southeast-2)
    ///
    ///
    /// For a list of countries/regions where SMS text messages can be sent, and the latest Amazon Web Services Regions where SMS text messaging is supported, see [Supported Regions and Countries](https://docs.aws.amazon.com/sns/latest/dg/sns-supported-regions-countries.html) in the Amazon SNS Developer Guide. For more information about notifications in Amazon Lightsail, see [Notifications in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications).
    /// This member is required.
    public var `protocol`: LightsailClientTypes.ContactProtocol?

    public init (
        contactEndpoint: Swift.String? = nil,
        `protocol`: LightsailClientTypes.ContactProtocol? = nil
    )
    {
        self.contactEndpoint = contactEndpoint
        self.`protocol` = `protocol`
    }
}

struct CreateContactMethodInputBody: Swift.Equatable {
    let `protocol`: LightsailClientTypes.ContactProtocol?
    let contactEndpoint: Swift.String?
}

extension CreateContactMethodInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactEndpoint
        case `protocol` = "protocol"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContactProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let contactEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactEndpoint)
        contactEndpoint = contactEndpointDecoded
    }
}

extension CreateContactMethodOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContactMethodOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateContactMethodOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContactMethodOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateContactMethodOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateContactMethodOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateContactMethodOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateContactMethodOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateContainerServiceDeploymentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers
        case publicEndpoint
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .containers)
            for (dictKey0, containerMap0) in containers {
                try containersContainer.encode(containerMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let publicEndpoint = self.publicEndpoint {
            try encodeContainer.encode(publicEndpoint, forKey: .publicEndpoint)
        }
    }
}

extension CreateContainerServiceDeploymentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateContainerServiceDeploymentInput: Swift.Equatable {
    /// An object that describes the settings of the containers that will be launched on the container service.
    public var containers: [Swift.String:LightsailClientTypes.Container]?
    /// An object that describes the settings of the public endpoint for the container service.
    public var publicEndpoint: LightsailClientTypes.EndpointRequest?
    /// The name of the container service for which to create the deployment.
    /// This member is required.
    public var serviceName: Swift.String?

    public init (
        containers: [Swift.String:LightsailClientTypes.Container]? = nil,
        publicEndpoint: LightsailClientTypes.EndpointRequest? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.containers = containers
        self.publicEndpoint = publicEndpoint
        self.serviceName = serviceName
    }
}

struct CreateContainerServiceDeploymentInputBody: Swift.Equatable {
    let containers: [Swift.String:LightsailClientTypes.Container]?
    let publicEndpoint: LightsailClientTypes.EndpointRequest?
}

extension CreateContainerServiceDeploymentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers
        case publicEndpoint
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containersContainer = try containerValues.decodeIfPresent([Swift.String: LightsailClientTypes.Container?].self, forKey: .containers)
        var containersDecoded0: [Swift.String:LightsailClientTypes.Container]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [Swift.String:LightsailClientTypes.Container]()
            for (key0, container0) in containersContainer {
                if let container0 = container0 {
                    containersDecoded0?[key0] = container0
                }
            }
        }
        containers = containersDecoded0
        let publicEndpointDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.EndpointRequest.self, forKey: .publicEndpoint)
        publicEndpoint = publicEndpointDecoded
    }
}

extension CreateContainerServiceDeploymentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContainerServiceDeploymentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateContainerServiceDeploymentOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContainerServiceDeploymentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateContainerServiceDeploymentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containerService = output.containerService
        } else {
            self.containerService = nil
        }
    }
}

public struct CreateContainerServiceDeploymentOutputResponse: Swift.Equatable {
    /// An object that describes a container service.
    public var containerService: LightsailClientTypes.ContainerService?

    public init (
        containerService: LightsailClientTypes.ContainerService? = nil
    )
    {
        self.containerService = containerService
    }
}

struct CreateContainerServiceDeploymentOutputResponseBody: Swift.Equatable {
    let containerService: LightsailClientTypes.ContainerService?
}

extension CreateContainerServiceDeploymentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerService
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerServiceDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerService.self, forKey: .containerService)
        containerService = containerServiceDecoded
    }
}

extension CreateContainerServiceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deployment
        case power
        case privateRegistryAccess
        case publicDomainNames
        case scale
        case serviceName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deployment = self.deployment {
            try encodeContainer.encode(deployment, forKey: .deployment)
        }
        if let power = self.power {
            try encodeContainer.encode(power.rawValue, forKey: .power)
        }
        if let privateRegistryAccess = self.privateRegistryAccess {
            try encodeContainer.encode(privateRegistryAccess, forKey: .privateRegistryAccess)
        }
        if let publicDomainNames = publicDomainNames {
            var publicDomainNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .publicDomainNames)
            for (dictKey0, containerServicePublicDomains0) in publicDomainNames {
                var containerServicePublicDomains0Container = publicDomainNamesContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for string1 in containerServicePublicDomains0 {
                    try containerServicePublicDomains0Container.encode(string1)
                }
            }
        }
        if let scale = self.scale {
            try encodeContainer.encode(scale, forKey: .scale)
        }
        if let serviceName = self.serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateContainerServiceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateContainerServiceInput: Swift.Equatable {
    /// An object that describes a deployment for the container service. A deployment specifies the containers that will be launched on the container service and their settings, such as the ports to open, the environment variables to apply, and the launch command to run. It also specifies the container that will serve as the public endpoint of the deployment and its settings, such as the HTTP or HTTPS port to use, and the health check configuration.
    public var deployment: LightsailClientTypes.ContainerServiceDeploymentRequest?
    /// The power specification for the container service. The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the container service. The power and scale of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the power with the scale (the number of nodes) of the service. Use the GetContainerServicePowers action to get a list of power options that you can specify using this parameter, and their base monthly cost.
    /// This member is required.
    public var power: LightsailClientTypes.ContainerServicePowerName?
    /// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
    public var privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccessRequest?
    /// The public domain names to use with the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the CreateCertificate action to create a certificate for the public domain names you want to use with your container service. You can specify public domain names using a string to array map as shown in the example later on this page.
    public var publicDomainNames: [Swift.String:[Swift.String]]?
    /// The scale specification for the container service. The scale specifies the allocated compute nodes of the container service. The power and scale of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the power with the scale (the number of nodes) of the service.
    /// This member is required.
    public var scale: Swift.Int?
    /// The name for the container service. The name that you specify for your container service will make up part of its default domain. The default domain of a container service is typically https://...cs.amazonlightsail.com. If the name of your container service is container-service-1, and it's located in the US East (Ohio) Amazon Web Services Region (us-east-2), then the domain for your container service will be like the following example: https://container-service-1.ur4EXAMPLE2uq.us-east-2.cs.amazonlightsail.com The following are the requirements for container service names:
    ///
    /// * Must be unique within each Amazon Web Services Region in your Lightsail account.
    ///
    /// * Must contain 1 to 63 characters.
    ///
    /// * Must contain only alphanumeric characters and hyphens.
    ///
    /// * A hyphen (-) can separate words but cannot be at the start or end of the name.
    /// This member is required.
    public var serviceName: Swift.String?
    /// The tag keys and optional values to add to the container service during create. Use the TagResource action to tag a resource after it's created. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
    public var tags: [LightsailClientTypes.Tag]?

    public init (
        deployment: LightsailClientTypes.ContainerServiceDeploymentRequest? = nil,
        power: LightsailClientTypes.ContainerServicePowerName? = nil,
        privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccessRequest? = nil,
        publicDomainNames: [Swift.String:[Swift.String]]? = nil,
        scale: Swift.Int? = nil,
        serviceName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.deployment = deployment
        self.power = power
        self.privateRegistryAccess = privateRegistryAccess
        self.publicDomainNames = publicDomainNames
        self.scale = scale
        self.serviceName = serviceName
        self.tags = tags
    }
}

struct CreateContainerServiceInputBody: Swift.Equatable {
    let serviceName: Swift.String?
    let power: LightsailClientTypes.ContainerServicePowerName?
    let scale: Swift.Int?
    let tags: [LightsailClientTypes.Tag]?
    let publicDomainNames: [Swift.String:[Swift.String]]?
    let deployment: LightsailClientTypes.ContainerServiceDeploymentRequest?
    let privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccessRequest?
}

extension CreateContainerServiceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deployment
        case power
        case privateRegistryAccess
        case publicDomainNames
        case scale
        case serviceName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let powerDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServicePowerName.self, forKey: .power)
        power = powerDecoded
        let scaleDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scale)
        scale = scaleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let publicDomainNamesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .publicDomainNames)
        var publicDomainNamesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let publicDomainNamesContainer = publicDomainNamesContainer {
            publicDomainNamesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, containerservicepublicdomainslist0) in publicDomainNamesContainer {
                var containerservicepublicdomainslist0Decoded0: [Swift.String]? = nil
                if let containerservicepublicdomainslist0 = containerservicepublicdomainslist0 {
                    containerservicepublicdomainslist0Decoded0 = [Swift.String]()
                    for string1 in containerservicepublicdomainslist0 {
                        if let string1 = string1 {
                            containerservicepublicdomainslist0Decoded0?.append(string1)
                        }
                    }
                }
                publicDomainNamesDecoded0?[key0] = containerservicepublicdomainslist0Decoded0
            }
        }
        publicDomainNames = publicDomainNamesDecoded0
        let deploymentDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceDeploymentRequest.self, forKey: .deployment)
        deployment = deploymentDecoded
        let privateRegistryAccessDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PrivateRegistryAccessRequest.self, forKey: .privateRegistryAccess)
        privateRegistryAccess = privateRegistryAccessDecoded
    }
}

extension CreateContainerServiceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContainerServiceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateContainerServiceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContainerServiceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateContainerServiceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containerService = output.containerService
        } else {
            self.containerService = nil
        }
    }
}

public struct CreateContainerServiceOutputResponse: Swift.Equatable {
    /// An object that describes a container service.
    public var containerService: LightsailClientTypes.ContainerService?

    public init (
        containerService: LightsailClientTypes.ContainerService? = nil
    )
    {
        self.containerService = containerService
    }
}

struct CreateContainerServiceOutputResponseBody: Swift.Equatable {
    let containerService: LightsailClientTypes.ContainerService?
}

extension CreateContainerServiceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerService
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerServiceDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerService.self, forKey: .containerService)
        containerService = containerServiceDecoded
    }
}

extension CreateContainerServiceRegistryLoginInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension CreateContainerServiceRegistryLoginInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateContainerServiceRegistryLoginInput: Swift.Equatable {

    public init () { }
}

struct CreateContainerServiceRegistryLoginInputBody: Swift.Equatable {
}

extension CreateContainerServiceRegistryLoginInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CreateContainerServiceRegistryLoginOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContainerServiceRegistryLoginOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateContainerServiceRegistryLoginOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContainerServiceRegistryLoginOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateContainerServiceRegistryLoginOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.registryLogin = output.registryLogin
        } else {
            self.registryLogin = nil
        }
    }
}

public struct CreateContainerServiceRegistryLoginOutputResponse: Swift.Equatable {
    /// An object that describes the log in information for the container service registry of your Lightsail account.
    public var registryLogin: LightsailClientTypes.ContainerServiceRegistryLogin?

    public init (
        registryLogin: LightsailClientTypes.ContainerServiceRegistryLogin? = nil
    )
    {
        self.registryLogin = registryLogin
    }
}

struct CreateContainerServiceRegistryLoginOutputResponseBody: Swift.Equatable {
    let registryLogin: LightsailClientTypes.ContainerServiceRegistryLogin?
}

extension CreateContainerServiceRegistryLoginOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registryLogin
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryLoginDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceRegistryLogin.self, forKey: .registryLogin)
        registryLogin = registryLoginDecoded
    }
}

extension CreateDiskFromSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case availabilityZone
        case diskName
        case diskSnapshotName
        case restoreDate
        case sizeInGb
        case sourceDiskName
        case tags
        case useLatestRestorableAutoSnapshot
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addonrequest0 in addOns {
                try addOnsContainer.encode(addonrequest0)
            }
        }
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let diskName = self.diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
        if let diskSnapshotName = self.diskSnapshotName {
            try encodeContainer.encode(diskSnapshotName, forKey: .diskSnapshotName)
        }
        if let restoreDate = self.restoreDate {
            try encodeContainer.encode(restoreDate, forKey: .restoreDate)
        }
        if let sizeInGb = self.sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let sourceDiskName = self.sourceDiskName {
            try encodeContainer.encode(sourceDiskName, forKey: .sourceDiskName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let useLatestRestorableAutoSnapshot = self.useLatestRestorableAutoSnapshot {
            try encodeContainer.encode(useLatestRestorableAutoSnapshot, forKey: .useLatestRestorableAutoSnapshot)
        }
    }
}

extension CreateDiskFromSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDiskFromSnapshotInput: Swift.Equatable {
    /// An array of objects that represent the add-ons to enable for the new disk.
    public var addOns: [LightsailClientTypes.AddOnRequest]?
    /// The Availability Zone where you want to create the disk (e.g., us-east-2a). Choose the same Availability Zone as the Lightsail instance where you want to create the disk. Use the GetRegions operation to list the Availability Zones where Lightsail is currently available.
    /// This member is required.
    public var availabilityZone: Swift.String?
    /// The unique Lightsail disk name (e.g., my-disk).
    /// This member is required.
    public var diskName: Swift.String?
    /// The name of the disk snapshot (e.g., my-snapshot) from which to create the new storage disk. Constraint:
    ///
    /// * This parameter cannot be defined together with the source disk name parameter. The disk snapshot name and source disk name parameters are mutually exclusive.
    public var diskSnapshotName: Swift.String?
    /// The date of the automatic snapshot to use for the new disk. Use the get auto snapshots operation to identify the dates of the available automatic snapshots. Constraints:
    ///
    /// * Must be specified in YYYY-MM-DD format.
    ///
    /// * This parameter cannot be defined together with the use latest restorable auto snapshot parameter. The restore date and use latest restorable auto snapshot parameters are mutually exclusive.
    ///
    /// * Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots).
    public var restoreDate: Swift.String?
    /// The size of the disk in GB (e.g., 32).
    /// This member is required.
    public var sizeInGb: Swift.Int?
    /// The name of the source disk from which the source automatic snapshot was created. Constraints:
    ///
    /// * This parameter cannot be defined together with the disk snapshot name parameter. The source disk name and disk snapshot name parameters are mutually exclusive.
    ///
    /// * Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots).
    public var sourceDiskName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?
    /// A Boolean value to indicate whether to use the latest available automatic snapshot. Constraints:
    ///
    /// * This parameter cannot be defined together with the restore date parameter. The use latest restorable auto snapshot and restore date parameters are mutually exclusive.
    ///
    /// * Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots).
    public var useLatestRestorableAutoSnapshot: Swift.Bool?

    public init (
        addOns: [LightsailClientTypes.AddOnRequest]? = nil,
        availabilityZone: Swift.String? = nil,
        diskName: Swift.String? = nil,
        diskSnapshotName: Swift.String? = nil,
        restoreDate: Swift.String? = nil,
        sizeInGb: Swift.Int? = nil,
        sourceDiskName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        useLatestRestorableAutoSnapshot: Swift.Bool? = nil
    )
    {
        self.addOns = addOns
        self.availabilityZone = availabilityZone
        self.diskName = diskName
        self.diskSnapshotName = diskSnapshotName
        self.restoreDate = restoreDate
        self.sizeInGb = sizeInGb
        self.sourceDiskName = sourceDiskName
        self.tags = tags
        self.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot
    }
}

struct CreateDiskFromSnapshotInputBody: Swift.Equatable {
    let diskName: Swift.String?
    let diskSnapshotName: Swift.String?
    let availabilityZone: Swift.String?
    let sizeInGb: Swift.Int?
    let tags: [LightsailClientTypes.Tag]?
    let addOns: [LightsailClientTypes.AddOnRequest]?
    let sourceDiskName: Swift.String?
    let restoreDate: Swift.String?
    let useLatestRestorableAutoSnapshot: Swift.Bool?
}

extension CreateDiskFromSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case availabilityZone
        case diskName
        case diskSnapshotName
        case restoreDate
        case sizeInGb
        case sourceDiskName
        case tags
        case useLatestRestorableAutoSnapshot
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
        let diskSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskSnapshotName)
        diskSnapshotName = diskSnapshotNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOnRequest?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOnRequest]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOnRequest]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
        let sourceDiskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDiskName)
        sourceDiskName = sourceDiskNameDecoded
        let restoreDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restoreDate)
        restoreDate = restoreDateDecoded
        let useLatestRestorableAutoSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useLatestRestorableAutoSnapshot)
        useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshotDecoded
    }
}

extension CreateDiskFromSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDiskFromSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDiskFromSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDiskFromSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDiskFromSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateDiskFromSnapshotOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateDiskFromSnapshotOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateDiskFromSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateDiskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case availabilityZone
        case diskName
        case sizeInGb
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addonrequest0 in addOns {
                try addOnsContainer.encode(addonrequest0)
            }
        }
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let diskName = self.diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
        if let sizeInGb = self.sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateDiskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDiskInput: Swift.Equatable {
    /// An array of objects that represent the add-ons to enable for the new disk.
    public var addOns: [LightsailClientTypes.AddOnRequest]?
    /// The Availability Zone where you want to create the disk (e.g., us-east-2a). Use the same Availability Zone as the Lightsail instance to which you want to attach the disk. Use the get regions operation to list the Availability Zones where Lightsail is currently available.
    /// This member is required.
    public var availabilityZone: Swift.String?
    /// The unique Lightsail disk name (e.g., my-disk).
    /// This member is required.
    public var diskName: Swift.String?
    /// The size of the disk in GB (e.g., 32).
    /// This member is required.
    public var sizeInGb: Swift.Int?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init (
        addOns: [LightsailClientTypes.AddOnRequest]? = nil,
        availabilityZone: Swift.String? = nil,
        diskName: Swift.String? = nil,
        sizeInGb: Swift.Int? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.addOns = addOns
        self.availabilityZone = availabilityZone
        self.diskName = diskName
        self.sizeInGb = sizeInGb
        self.tags = tags
    }
}

struct CreateDiskInputBody: Swift.Equatable {
    let diskName: Swift.String?
    let availabilityZone: Swift.String?
    let sizeInGb: Swift.Int?
    let tags: [LightsailClientTypes.Tag]?
    let addOns: [LightsailClientTypes.AddOnRequest]?
}

extension CreateDiskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case availabilityZone
        case diskName
        case sizeInGb
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOnRequest?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOnRequest]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOnRequest]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
    }
}

extension CreateDiskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDiskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDiskOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDiskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDiskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateDiskOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateDiskOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateDiskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateDiskSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
        case diskSnapshotName
        case instanceName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskName = self.diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
        if let diskSnapshotName = self.diskSnapshotName {
            try encodeContainer.encode(diskSnapshotName, forKey: .diskSnapshotName)
        }
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateDiskSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDiskSnapshotInput: Swift.Equatable {
    /// The unique name of the source disk (e.g., Disk-Virginia-1). This parameter cannot be defined together with the instance name parameter. The disk name and instance name parameters are mutually exclusive.
    public var diskName: Swift.String?
    /// The name of the destination disk snapshot (e.g., my-disk-snapshot) based on the source disk.
    /// This member is required.
    public var diskSnapshotName: Swift.String?
    /// The unique name of the source instance (e.g., Amazon_Linux-512MB-Virginia-1). When this is defined, a snapshot of the instance's system volume is created. This parameter cannot be defined together with the disk name parameter. The instance name and disk name parameters are mutually exclusive.
    public var instanceName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init (
        diskName: Swift.String? = nil,
        diskSnapshotName: Swift.String? = nil,
        instanceName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.diskName = diskName
        self.diskSnapshotName = diskSnapshotName
        self.instanceName = instanceName
        self.tags = tags
    }
}

struct CreateDiskSnapshotInputBody: Swift.Equatable {
    let diskName: Swift.String?
    let diskSnapshotName: Swift.String?
    let instanceName: Swift.String?
    let tags: [LightsailClientTypes.Tag]?
}

extension CreateDiskSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
        case diskSnapshotName
        case instanceName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
        let diskSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskSnapshotName)
        diskSnapshotName = diskSnapshotNameDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDiskSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDiskSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDiskSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDiskSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDiskSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateDiskSnapshotOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateDiskSnapshotOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateDiskSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateDistributionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case cacheBehaviorSettings
        case cacheBehaviors
        case defaultCacheBehavior
        case distributionName
        case ipAddressType
        case origin
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let cacheBehaviorSettings = self.cacheBehaviorSettings {
            try encodeContainer.encode(cacheBehaviorSettings, forKey: .cacheBehaviorSettings)
        }
        if let cacheBehaviors = cacheBehaviors {
            var cacheBehaviorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cacheBehaviors)
            for cachebehaviorperpath0 in cacheBehaviors {
                try cacheBehaviorsContainer.encode(cachebehaviorperpath0)
            }
        }
        if let defaultCacheBehavior = self.defaultCacheBehavior {
            try encodeContainer.encode(defaultCacheBehavior, forKey: .defaultCacheBehavior)
        }
        if let distributionName = self.distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
        if let ipAddressType = self.ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let origin = self.origin {
            try encodeContainer.encode(origin, forKey: .origin)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDistributionInput: Swift.Equatable {
    /// The bundle ID to use for the distribution. A distribution bundle describes the specifications of your distribution, such as the monthly cost and monthly network transfer quota. Use the GetDistributionBundles action to get a list of distribution bundle IDs that you can specify.
    /// This member is required.
    public var bundleId: Swift.String?
    /// An object that describes the cache behavior settings for the distribution.
    public var cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
    /// An array of objects that describe the per-path cache behavior for the distribution.
    public var cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
    /// An object that describes the default cache behavior for the distribution.
    /// This member is required.
    public var defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
    /// The name for the distribution.
    /// This member is required.
    public var distributionName: Swift.String?
    /// The IP address type for the distribution. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
    public var ipAddressType: LightsailClientTypes.IpAddressType?
    /// An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer. The distribution pulls, caches, and serves content from the origin.
    /// This member is required.
    public var origin: LightsailClientTypes.InputOrigin?
    /// The tag keys and optional values to add to the distribution during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init (
        bundleId: Swift.String? = nil,
        cacheBehaviorSettings: LightsailClientTypes.CacheSettings? = nil,
        cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]? = nil,
        defaultCacheBehavior: LightsailClientTypes.CacheBehavior? = nil,
        distributionName: Swift.String? = nil,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        origin: LightsailClientTypes.InputOrigin? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.bundleId = bundleId
        self.cacheBehaviorSettings = cacheBehaviorSettings
        self.cacheBehaviors = cacheBehaviors
        self.defaultCacheBehavior = defaultCacheBehavior
        self.distributionName = distributionName
        self.ipAddressType = ipAddressType
        self.origin = origin
        self.tags = tags
    }
}

struct CreateDistributionInputBody: Swift.Equatable {
    let distributionName: Swift.String?
    let origin: LightsailClientTypes.InputOrigin?
    let defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
    let cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
    let cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
    let bundleId: Swift.String?
    let ipAddressType: LightsailClientTypes.IpAddressType?
    let tags: [LightsailClientTypes.Tag]?
}

extension CreateDistributionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case cacheBehaviorSettings
        case cacheBehaviors
        case defaultCacheBehavior
        case distributionName
        case ipAddressType
        case origin
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let originDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InputOrigin.self, forKey: .origin)
        origin = originDecoded
        let defaultCacheBehaviorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheBehavior.self, forKey: .defaultCacheBehavior)
        defaultCacheBehavior = defaultCacheBehaviorDecoded
        let cacheBehaviorSettingsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheSettings.self, forKey: .cacheBehaviorSettings)
        cacheBehaviorSettings = cacheBehaviorSettingsDecoded
        let cacheBehaviorsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CacheBehaviorPerPath?].self, forKey: .cacheBehaviors)
        var cacheBehaviorsDecoded0:[LightsailClientTypes.CacheBehaviorPerPath]? = nil
        if let cacheBehaviorsContainer = cacheBehaviorsContainer {
            cacheBehaviorsDecoded0 = [LightsailClientTypes.CacheBehaviorPerPath]()
            for structure0 in cacheBehaviorsContainer {
                if let structure0 = structure0 {
                    cacheBehaviorsDecoded0?.append(structure0)
                }
            }
        }
        cacheBehaviors = cacheBehaviorsDecoded0
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDistributionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDistributionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDistributionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDistributionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDistributionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.distribution = output.distribution
            self.operation = output.operation
        } else {
            self.distribution = nil
            self.operation = nil
        }
    }
}

public struct CreateDistributionOutputResponse: Swift.Equatable {
    /// An object that describes the distribution created.
    public var distribution: LightsailClientTypes.LightsailDistribution?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        distribution: LightsailClientTypes.LightsailDistribution? = nil,
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.distribution = distribution
        self.operation = operation
    }
}

struct CreateDistributionOutputResponseBody: Swift.Equatable {
    let distribution: LightsailClientTypes.LightsailDistribution?
    let operation: LightsailClientTypes.Operation?
}

extension CreateDistributionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distribution
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LightsailDistribution.self, forKey: .distribution)
        distribution = distributionDecoded
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension CreateDomainEntryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainEntry
        case domainName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainEntry = self.domainEntry {
            try encodeContainer.encode(domainEntry, forKey: .domainEntry)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

extension CreateDomainEntryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDomainEntryInput: Swift.Equatable {
    /// An array of key-value pairs containing information about the domain entry request.
    /// This member is required.
    public var domainEntry: LightsailClientTypes.DomainEntry?
    /// The domain name (e.g., example.com) for which you want to create the domain entry.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainEntry: LightsailClientTypes.DomainEntry? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.domainEntry = domainEntry
        self.domainName = domainName
    }
}

struct CreateDomainEntryInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let domainEntry: LightsailClientTypes.DomainEntry?
}

extension CreateDomainEntryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainEntry
        case domainName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let domainEntryDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DomainEntry.self, forKey: .domainEntry)
        domainEntry = domainEntryDecoded
    }
}

extension CreateDomainEntryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDomainEntryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDomainEntryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDomainEntryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDomainEntryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct CreateDomainEntryOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct CreateDomainEntryOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension CreateDomainEntryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension CreateDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDomainInput: Swift.Equatable {
    /// The domain name to manage (e.g., example.com).
    /// This member is required.
    public var domainName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init (
        domainName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.domainName = domainName
        self.tags = tags
    }
}

struct CreateDomainInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let tags: [LightsailClientTypes.Tag]?
}

extension CreateDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDomainOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct CreateDomainOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct CreateDomainOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension CreateDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension CreateInstanceSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case instanceSnapshotName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let instanceSnapshotName = self.instanceSnapshotName {
            try encodeContainer.encode(instanceSnapshotName, forKey: .instanceSnapshotName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateInstanceSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateInstanceSnapshotInput: Swift.Equatable {
    /// The Lightsail instance on which to base your snapshot.
    /// This member is required.
    public var instanceName: Swift.String?
    /// The name for your new snapshot.
    /// This member is required.
    public var instanceSnapshotName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init (
        instanceName: Swift.String? = nil,
        instanceSnapshotName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.instanceName = instanceName
        self.instanceSnapshotName = instanceSnapshotName
        self.tags = tags
    }
}

struct CreateInstanceSnapshotInputBody: Swift.Equatable {
    let instanceSnapshotName: Swift.String?
    let instanceName: Swift.String?
    let tags: [LightsailClientTypes.Tag]?
}

extension CreateInstanceSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case instanceSnapshotName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceSnapshotName)
        instanceSnapshotName = instanceSnapshotNameDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateInstanceSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInstanceSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateInstanceSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInstanceSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateInstanceSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateInstanceSnapshotOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateInstanceSnapshotOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateInstanceSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateInstancesFromSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case attachedDiskMapping
        case availabilityZone
        case bundleId
        case instanceNames
        case instanceSnapshotName
        case ipAddressType
        case keyPairName
        case restoreDate
        case sourceInstanceName
        case tags
        case useLatestRestorableAutoSnapshot
        case userData
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addonrequest0 in addOns {
                try addOnsContainer.encode(addonrequest0)
            }
        }
        if let attachedDiskMapping = attachedDiskMapping {
            var attachedDiskMappingContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attachedDiskMapping)
            for (dictKey0, attachedDiskMap0) in attachedDiskMapping {
                var attachedDiskMap0Container = attachedDiskMappingContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for diskmap1 in attachedDiskMap0 {
                    try attachedDiskMap0Container.encode(diskmap1)
                }
            }
        }
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for string0 in instanceNames {
                try instanceNamesContainer.encode(string0)
            }
        }
        if let instanceSnapshotName = self.instanceSnapshotName {
            try encodeContainer.encode(instanceSnapshotName, forKey: .instanceSnapshotName)
        }
        if let ipAddressType = self.ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let keyPairName = self.keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
        if let restoreDate = self.restoreDate {
            try encodeContainer.encode(restoreDate, forKey: .restoreDate)
        }
        if let sourceInstanceName = self.sourceInstanceName {
            try encodeContainer.encode(sourceInstanceName, forKey: .sourceInstanceName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let useLatestRestorableAutoSnapshot = self.useLatestRestorableAutoSnapshot {
            try encodeContainer.encode(useLatestRestorableAutoSnapshot, forKey: .useLatestRestorableAutoSnapshot)
        }
        if let userData = self.userData {
            try encodeContainer.encode(userData, forKey: .userData)
        }
    }
}

extension CreateInstancesFromSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateInstancesFromSnapshotInput: Swift.Equatable {
    /// An array of objects representing the add-ons to enable for the new instance.
    public var addOns: [LightsailClientTypes.AddOnRequest]?
    /// An object containing information about one or more disk mappings.
    public var attachedDiskMapping: [Swift.String:[LightsailClientTypes.DiskMap]]?
    /// The Availability Zone where you want to create your instances. Use the following formatting: us-east-2a (case sensitive). You can get a list of Availability Zones by using the [get regions](http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html) operation. Be sure to add the include Availability Zones parameter to your request.
    /// This member is required.
    public var availabilityZone: Swift.String?
    /// The bundle of specification information for your virtual private server (or instance), including the pricing plan (e.g., micro_1_0).
    /// This member is required.
    public var bundleId: Swift.String?
    /// The names for your new instances.
    /// This member is required.
    public var instanceNames: [Swift.String]?
    /// The name of the instance snapshot on which you are basing your new instances. Use the get instance snapshots operation to return information about your existing snapshots. Constraint:
    ///
    /// * This parameter cannot be defined together with the source instance name parameter. The instance snapshot name and source instance name parameters are mutually exclusive.
    public var instanceSnapshotName: Swift.String?
    /// The IP address type for the instance. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
    public var ipAddressType: LightsailClientTypes.IpAddressType?
    /// The name for your key pair.
    public var keyPairName: Swift.String?
    /// The date of the automatic snapshot to use for the new instance. Use the get auto snapshots operation to identify the dates of the available automatic snapshots. Constraints:
    ///
    /// * Must be specified in YYYY-MM-DD format.
    ///
    /// * This parameter cannot be defined together with the use latest restorable auto snapshot parameter. The restore date and use latest restorable auto snapshot parameters are mutually exclusive.
    ///
    /// * Define this parameter only when creating a new instance from an automatic snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots).
    public var restoreDate: Swift.String?
    /// The name of the source instance from which the source automatic snapshot was created. Constraints:
    ///
    /// * This parameter cannot be defined together with the instance snapshot name parameter. The source instance name and instance snapshot name parameters are mutually exclusive.
    ///
    /// * Define this parameter only when creating a new instance from an automatic snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots).
    public var sourceInstanceName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?
    /// A Boolean value to indicate whether to use the latest available automatic snapshot. Constraints:
    ///
    /// * This parameter cannot be defined together with the restore date parameter. The use latest restorable auto snapshot and restore date parameters are mutually exclusive.
    ///
    /// * Define this parameter only when creating a new instance from an automatic snapshot. For more information, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots).
    public var useLatestRestorableAutoSnapshot: Swift.Bool?
    /// You can create a launch script that configures a server with additional user data. For example, apt-get -y update. Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg. For a complete list, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/compare-options-choose-lightsail-instance-image).
    public var userData: Swift.String?

    public init (
        addOns: [LightsailClientTypes.AddOnRequest]? = nil,
        attachedDiskMapping: [Swift.String:[LightsailClientTypes.DiskMap]]? = nil,
        availabilityZone: Swift.String? = nil,
        bundleId: Swift.String? = nil,
        instanceNames: [Swift.String]? = nil,
        instanceSnapshotName: Swift.String? = nil,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        keyPairName: Swift.String? = nil,
        restoreDate: Swift.String? = nil,
        sourceInstanceName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        useLatestRestorableAutoSnapshot: Swift.Bool? = nil,
        userData: Swift.String? = nil
    )
    {
        self.addOns = addOns
        self.attachedDiskMapping = attachedDiskMapping
        self.availabilityZone = availabilityZone
        self.bundleId = bundleId
        self.instanceNames = instanceNames
        self.instanceSnapshotName = instanceSnapshotName
        self.ipAddressType = ipAddressType
        self.keyPairName = keyPairName
        self.restoreDate = restoreDate
        self.sourceInstanceName = sourceInstanceName
        self.tags = tags
        self.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot
        self.userData = userData
    }
}

struct CreateInstancesFromSnapshotInputBody: Swift.Equatable {
    let instanceNames: [Swift.String]?
    let attachedDiskMapping: [Swift.String:[LightsailClientTypes.DiskMap]]?
    let availabilityZone: Swift.String?
    let instanceSnapshotName: Swift.String?
    let bundleId: Swift.String?
    let userData: Swift.String?
    let keyPairName: Swift.String?
    let tags: [LightsailClientTypes.Tag]?
    let addOns: [LightsailClientTypes.AddOnRequest]?
    let ipAddressType: LightsailClientTypes.IpAddressType?
    let sourceInstanceName: Swift.String?
    let restoreDate: Swift.String?
    let useLatestRestorableAutoSnapshot: Swift.Bool?
}

extension CreateInstancesFromSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case attachedDiskMapping
        case availabilityZone
        case bundleId
        case instanceNames
        case instanceSnapshotName
        case ipAddressType
        case keyPairName
        case restoreDate
        case sourceInstanceName
        case tags
        case useLatestRestorableAutoSnapshot
        case userData
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[Swift.String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [Swift.String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
        let attachedDiskMappingContainer = try containerValues.decodeIfPresent([Swift.String: [LightsailClientTypes.DiskMap?]?].self, forKey: .attachedDiskMapping)
        var attachedDiskMappingDecoded0: [Swift.String:[LightsailClientTypes.DiskMap]]? = nil
        if let attachedDiskMappingContainer = attachedDiskMappingContainer {
            attachedDiskMappingDecoded0 = [Swift.String:[LightsailClientTypes.DiskMap]]()
            for (key0, diskmaplist0) in attachedDiskMappingContainer {
                var diskmaplist0Decoded0: [LightsailClientTypes.DiskMap]? = nil
                if let diskmaplist0 = diskmaplist0 {
                    diskmaplist0Decoded0 = [LightsailClientTypes.DiskMap]()
                    for structure1 in diskmaplist0 {
                        if let structure1 = structure1 {
                            diskmaplist0Decoded0?.append(structure1)
                        }
                    }
                }
                attachedDiskMappingDecoded0?[key0] = diskmaplist0Decoded0
            }
        }
        attachedDiskMapping = attachedDiskMappingDecoded0
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let instanceSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceSnapshotName)
        instanceSnapshotName = instanceSnapshotNameDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let userDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userData)
        userData = userDataDecoded
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOnRequest?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOnRequest]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOnRequest]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let sourceInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceInstanceName)
        sourceInstanceName = sourceInstanceNameDecoded
        let restoreDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restoreDate)
        restoreDate = restoreDateDecoded
        let useLatestRestorableAutoSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useLatestRestorableAutoSnapshot)
        useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshotDecoded
    }
}

extension CreateInstancesFromSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInstancesFromSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateInstancesFromSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInstancesFromSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateInstancesFromSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateInstancesFromSnapshotOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateInstancesFromSnapshotOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateInstancesFromSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case availabilityZone
        case blueprintId
        case bundleId
        case customImageName
        case instanceNames
        case ipAddressType
        case keyPairName
        case tags
        case userData
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addonrequest0 in addOns {
                try addOnsContainer.encode(addonrequest0)
            }
        }
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let blueprintId = self.blueprintId {
            try encodeContainer.encode(blueprintId, forKey: .blueprintId)
        }
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let customImageName = self.customImageName {
            try encodeContainer.encode(customImageName, forKey: .customImageName)
        }
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for string0 in instanceNames {
                try instanceNamesContainer.encode(string0)
            }
        }
        if let ipAddressType = self.ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let keyPairName = self.keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let userData = self.userData {
            try encodeContainer.encode(userData, forKey: .userData)
        }
    }
}

extension CreateInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateInstancesInput: Swift.Equatable {
    /// An array of objects representing the add-ons to enable for the new instance.
    public var addOns: [LightsailClientTypes.AddOnRequest]?
    /// The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). You can get a list of Availability Zones by using the [get regions](http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html) operation. Be sure to add the include Availability Zones parameter to your request.
    /// This member is required.
    public var availabilityZone: Swift.String?
    /// The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0). Use the get blueprints operation to return a list of available images (or blueprints). Use active blueprints when creating new instances. Inactive blueprints are listed to support customers with existing instances and are not necessarily available to create new instances. Blueprints are marked inactive when they become outdated due to operating system updates or new application releases.
    /// This member is required.
    public var blueprintId: Swift.String?
    /// The bundle of specification information for your virtual private server (or instance), including the pricing plan (e.g., micro_1_0).
    /// This member is required.
    public var bundleId: Swift.String?
    /// (Deprecated) The name for your custom image. In releases prior to June 12, 2017, this parameter was ignored by the API. It is now deprecated.
    @available(*, deprecated)
    public var customImageName: Swift.String?
    /// The names to use for your new Lightsail instances. Separate multiple values using quotation marks and commas, for example: ["MyFirstInstance","MySecondInstance"]
    /// This member is required.
    public var instanceNames: [Swift.String]?
    /// The IP address type for the instance. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
    public var ipAddressType: LightsailClientTypes.IpAddressType?
    /// The name of your key pair.
    public var keyPairName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?
    /// A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update. Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg. For a complete list, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/compare-options-choose-lightsail-instance-image).
    public var userData: Swift.String?

    public init (
        addOns: [LightsailClientTypes.AddOnRequest]? = nil,
        availabilityZone: Swift.String? = nil,
        blueprintId: Swift.String? = nil,
        bundleId: Swift.String? = nil,
        customImageName: Swift.String? = nil,
        instanceNames: [Swift.String]? = nil,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        keyPairName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        userData: Swift.String? = nil
    )
    {
        self.addOns = addOns
        self.availabilityZone = availabilityZone
        self.blueprintId = blueprintId
        self.bundleId = bundleId
        self.customImageName = customImageName
        self.instanceNames = instanceNames
        self.ipAddressType = ipAddressType
        self.keyPairName = keyPairName
        self.tags = tags
        self.userData = userData
    }
}

struct CreateInstancesInputBody: Swift.Equatable {
    let instanceNames: [Swift.String]?
    let availabilityZone: Swift.String?
    let customImageName: Swift.String?
    let blueprintId: Swift.String?
    let bundleId: Swift.String?
    let userData: Swift.String?
    let keyPairName: Swift.String?
    let tags: [LightsailClientTypes.Tag]?
    let addOns: [LightsailClientTypes.AddOnRequest]?
    let ipAddressType: LightsailClientTypes.IpAddressType?
}

extension CreateInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case availabilityZone
        case blueprintId
        case bundleId
        case customImageName
        case instanceNames
        case ipAddressType
        case keyPairName
        case tags
        case userData
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[Swift.String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [Swift.String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let customImageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customImageName)
        customImageName = customImageNameDecoded
        let blueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintId)
        blueprintId = blueprintIdDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let userDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userData)
        userData = userDataDecoded
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOnRequest?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOnRequest]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOnRequest]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
    }
}

extension CreateInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateInstancesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateInstancesOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateInstancesOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateKeyPairInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyPairName = self.keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateKeyPairInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateKeyPairInput: Swift.Equatable {
    /// The name for your new key pair.
    /// This member is required.
    public var keyPairName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init (
        keyPairName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.keyPairName = keyPairName
        self.tags = tags
    }
}

struct CreateKeyPairInputBody: Swift.Equatable {
    let keyPairName: Swift.String?
    let tags: [LightsailClientTypes.Tag]?
}

extension CreateKeyPairInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateKeyPairOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateKeyPairOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateKeyPairOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateKeyPairOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateKeyPairOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyPair = output.keyPair
            self.operation = output.operation
            self.privateKeyBase64 = output.privateKeyBase64
            self.publicKeyBase64 = output.publicKeyBase64
        } else {
            self.keyPair = nil
            self.operation = nil
            self.privateKeyBase64 = nil
            self.publicKeyBase64 = nil
        }
    }
}

public struct CreateKeyPairOutputResponse: Swift.Equatable {
    /// An array of key-value pairs containing information about the new key pair you just created.
    public var keyPair: LightsailClientTypes.KeyPair?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?
    /// A base64-encoded RSA private key.
    public var privateKeyBase64: Swift.String?
    /// A base64-encoded public key of the ssh-rsa type.
    public var publicKeyBase64: Swift.String?

    public init (
        keyPair: LightsailClientTypes.KeyPair? = nil,
        operation: LightsailClientTypes.Operation? = nil,
        privateKeyBase64: Swift.String? = nil,
        publicKeyBase64: Swift.String? = nil
    )
    {
        self.keyPair = keyPair
        self.operation = operation
        self.privateKeyBase64 = privateKeyBase64
        self.publicKeyBase64 = publicKeyBase64
    }
}

struct CreateKeyPairOutputResponseBody: Swift.Equatable {
    let keyPair: LightsailClientTypes.KeyPair?
    let publicKeyBase64: Swift.String?
    let privateKeyBase64: Swift.String?
    let operation: LightsailClientTypes.Operation?
}

extension CreateKeyPairOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPair
        case operation
        case privateKeyBase64
        case publicKeyBase64
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.KeyPair.self, forKey: .keyPair)
        keyPair = keyPairDecoded
        let publicKeyBase64Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKeyBase64)
        publicKeyBase64 = publicKeyBase64Decoded
        let privateKeyBase64Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKeyBase64)
        privateKeyBase64 = privateKeyBase64Decoded
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension CreateLoadBalancerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAlternativeNames
        case certificateDomainName
        case certificateName
        case healthCheckPath
        case instancePort
        case ipAddressType
        case loadBalancerName
        case tags
        case tlsPolicyName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAlternativeNames = certificateAlternativeNames {
            var certificateAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateAlternativeNames)
            for domainname0 in certificateAlternativeNames {
                try certificateAlternativeNamesContainer.encode(domainname0)
            }
        }
        if let certificateDomainName = self.certificateDomainName {
            try encodeContainer.encode(certificateDomainName, forKey: .certificateDomainName)
        }
        if let certificateName = self.certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let healthCheckPath = self.healthCheckPath {
            try encodeContainer.encode(healthCheckPath, forKey: .healthCheckPath)
        }
        if let instancePort = self.instancePort {
            try encodeContainer.encode(instancePort, forKey: .instancePort)
        }
        if let ipAddressType = self.ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let loadBalancerName = self.loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let tlsPolicyName = self.tlsPolicyName {
            try encodeContainer.encode(tlsPolicyName, forKey: .tlsPolicyName)
        }
    }
}

extension CreateLoadBalancerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLoadBalancerInput: Swift.Equatable {
    /// The optional alternative domains and subdomains to use with your SSL/TLS certificate (e.g., www.example.com, example.com, m.example.com, blog.example.com).
    public var certificateAlternativeNames: [Swift.String]?
    /// The domain name with which your certificate is associated (e.g., example.com). If you specify certificateDomainName, then certificateName is required (and vice-versa).
    public var certificateDomainName: Swift.String?
    /// The name of the SSL/TLS certificate. If you specify certificateName, then certificateDomainName is required (and vice-versa).
    public var certificateName: Swift.String?
    /// The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail uses the root path of your website (e.g., "/"). You may want to specify a custom health check path other than the root of your application if your home page loads slowly or has a lot of media or scripting on it.
    public var healthCheckPath: Swift.String?
    /// The instance port where you're creating your load balancer.
    /// This member is required.
    public var instancePort: Swift.Int?
    /// The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
    public var ipAddressType: LightsailClientTypes.IpAddressType?
    /// The name of your load balancer.
    /// This member is required.
    public var loadBalancerName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?
    /// The name of the TLS policy to apply to the load balancer. Use the [GetLoadBalancerTlsPolicies](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html) action to get a list of TLS policy names that you can specify. For more information about load balancer TLS policies, see [Configuring TLS security policies on your Amazon Lightsail load balancers](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy) in the Amazon Lightsail Developer Guide.
    public var tlsPolicyName: Swift.String?

    public init (
        certificateAlternativeNames: [Swift.String]? = nil,
        certificateDomainName: Swift.String? = nil,
        certificateName: Swift.String? = nil,
        healthCheckPath: Swift.String? = nil,
        instancePort: Swift.Int? = nil,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        loadBalancerName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        tlsPolicyName: Swift.String? = nil
    )
    {
        self.certificateAlternativeNames = certificateAlternativeNames
        self.certificateDomainName = certificateDomainName
        self.certificateName = certificateName
        self.healthCheckPath = healthCheckPath
        self.instancePort = instancePort
        self.ipAddressType = ipAddressType
        self.loadBalancerName = loadBalancerName
        self.tags = tags
        self.tlsPolicyName = tlsPolicyName
    }
}

struct CreateLoadBalancerInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
    let instancePort: Swift.Int?
    let healthCheckPath: Swift.String?
    let certificateName: Swift.String?
    let certificateDomainName: Swift.String?
    let certificateAlternativeNames: [Swift.String]?
    let tags: [LightsailClientTypes.Tag]?
    let ipAddressType: LightsailClientTypes.IpAddressType?
    let tlsPolicyName: Swift.String?
}

extension CreateLoadBalancerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAlternativeNames
        case certificateDomainName
        case certificateName
        case healthCheckPath
        case instancePort
        case ipAddressType
        case loadBalancerName
        case tags
        case tlsPolicyName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let instancePortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancePort)
        instancePort = instancePortDecoded
        let healthCheckPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckPath)
        healthCheckPath = healthCheckPathDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let certificateDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateDomainName)
        certificateDomainName = certificateDomainNameDecoded
        let certificateAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .certificateAlternativeNames)
        var certificateAlternativeNamesDecoded0:[Swift.String]? = nil
        if let certificateAlternativeNamesContainer = certificateAlternativeNamesContainer {
            certificateAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in certificateAlternativeNamesContainer {
                if let string0 = string0 {
                    certificateAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        certificateAlternativeNames = certificateAlternativeNamesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let tlsPolicyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tlsPolicyName)
        tlsPolicyName = tlsPolicyNameDecoded
    }
}

extension CreateLoadBalancerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLoadBalancerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateLoadBalancerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLoadBalancerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateLoadBalancerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateLoadBalancerOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateLoadBalancerOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateLoadBalancerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateLoadBalancerTlsCertificateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAlternativeNames
        case certificateDomainName
        case certificateName
        case loadBalancerName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAlternativeNames = certificateAlternativeNames {
            var certificateAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateAlternativeNames)
            for domainname0 in certificateAlternativeNames {
                try certificateAlternativeNamesContainer.encode(domainname0)
            }
        }
        if let certificateDomainName = self.certificateDomainName {
            try encodeContainer.encode(certificateDomainName, forKey: .certificateDomainName)
        }
        if let certificateName = self.certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let loadBalancerName = self.loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateLoadBalancerTlsCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLoadBalancerTlsCertificateInput: Swift.Equatable {
    /// An array of strings listing alternative domains and subdomains for your SSL/TLS certificate. Lightsail will de-dupe the names for you. You can have a maximum of 9 alternative names (in addition to the 1 primary domain). We do not support wildcards (e.g., *.example.com).
    public var certificateAlternativeNames: [Swift.String]?
    /// The domain name (e.g., example.com) for your SSL/TLS certificate.
    /// This member is required.
    public var certificateDomainName: Swift.String?
    /// The SSL/TLS certificate name. You can have up to 10 certificates in your account at one time. Each Lightsail load balancer can have up to 2 certificates associated with it at one time. There is also an overall limit to the number of certificates that can be issue in a 365-day period. For more information, see [Limits](http://docs.aws.amazon.com/acm/latest/userguide/acm-limits.html).
    /// This member is required.
    public var certificateName: Swift.String?
    /// The load balancer name where you want to create the SSL/TLS certificate.
    /// This member is required.
    public var loadBalancerName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init (
        certificateAlternativeNames: [Swift.String]? = nil,
        certificateDomainName: Swift.String? = nil,
        certificateName: Swift.String? = nil,
        loadBalancerName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.certificateAlternativeNames = certificateAlternativeNames
        self.certificateDomainName = certificateDomainName
        self.certificateName = certificateName
        self.loadBalancerName = loadBalancerName
        self.tags = tags
    }
}

struct CreateLoadBalancerTlsCertificateInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
    let certificateName: Swift.String?
    let certificateDomainName: Swift.String?
    let certificateAlternativeNames: [Swift.String]?
    let tags: [LightsailClientTypes.Tag]?
}

extension CreateLoadBalancerTlsCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAlternativeNames
        case certificateDomainName
        case certificateName
        case loadBalancerName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let certificateDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateDomainName)
        certificateDomainName = certificateDomainNameDecoded
        let certificateAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .certificateAlternativeNames)
        var certificateAlternativeNamesDecoded0:[Swift.String]? = nil
        if let certificateAlternativeNamesContainer = certificateAlternativeNamesContainer {
            certificateAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in certificateAlternativeNamesContainer {
                if let string0 = string0 {
                    certificateAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        certificateAlternativeNames = certificateAlternativeNamesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLoadBalancerTlsCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLoadBalancerTlsCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateLoadBalancerTlsCertificateOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLoadBalancerTlsCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateLoadBalancerTlsCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateLoadBalancerTlsCertificateOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateLoadBalancerTlsCertificateOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateLoadBalancerTlsCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateRelationalDatabaseFromSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case publiclyAccessible
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
        case restoreTime
        case sourceRelationalDatabaseName
        case tags
        case useLatestRestorableTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let publiclyAccessible = self.publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseBundleId = self.relationalDatabaseBundleId {
            try encodeContainer.encode(relationalDatabaseBundleId, forKey: .relationalDatabaseBundleId)
        }
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let relationalDatabaseSnapshotName = self.relationalDatabaseSnapshotName {
            try encodeContainer.encode(relationalDatabaseSnapshotName, forKey: .relationalDatabaseSnapshotName)
        }
        if let restoreTime = self.restoreTime {
            try encodeContainer.encodeTimestamp(restoreTime, format: .epochSeconds, forKey: .restoreTime)
        }
        if let sourceRelationalDatabaseName = self.sourceRelationalDatabaseName {
            try encodeContainer.encode(sourceRelationalDatabaseName, forKey: .sourceRelationalDatabaseName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let useLatestRestorableTime = self.useLatestRestorableTime {
            try encodeContainer.encode(useLatestRestorableTime, forKey: .useLatestRestorableTime)
        }
    }
}

extension CreateRelationalDatabaseFromSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRelationalDatabaseFromSnapshotInput: Swift.Equatable {
    /// The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format. You can get a list of Availability Zones by using the get regions operation. Be sure to add the include relational database Availability Zones parameter to your request.
    public var availabilityZone: Swift.String?
    /// Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
    public var publiclyAccessible: Swift.Bool?
    /// The bundle ID for your new database. A bundle describes the performance specifications for your database. You can get a list of database bundle IDs by using the get relational database bundles operation. When creating a new database from a snapshot, you cannot choose a bundle that is smaller than the bundle of the source database.
    public var relationalDatabaseBundleId: Swift.String?
    /// The name to use for your new Lightsail database resource. Constraints:
    ///
    /// * Must contain from 2 to 255 alphanumeric characters, or hyphens.
    ///
    /// * The first and last character must be a letter or number.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// The name of the database snapshot from which to create your new database.
    public var relationalDatabaseSnapshotName: Swift.String?
    /// The date and time to restore your database from. Constraints:
    ///
    /// * Must be before the latest restorable time for the database.
    ///
    /// * Cannot be specified if the use latest restorable time parameter is true.
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use a restore time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the restore time.
    public var restoreTime: ClientRuntime.Date?
    /// The name of the source database.
    public var sourceRelationalDatabaseName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?
    /// Specifies whether your database is restored from the latest backup time. A value of true restores from the latest backup time. Default: false Constraints: Cannot be specified if the restore time parameter is provided.
    public var useLatestRestorableTime: Swift.Bool?

    public init (
        availabilityZone: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        relationalDatabaseBundleId: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil,
        relationalDatabaseSnapshotName: Swift.String? = nil,
        restoreTime: ClientRuntime.Date? = nil,
        sourceRelationalDatabaseName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        useLatestRestorableTime: Swift.Bool? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.publiclyAccessible = publiclyAccessible
        self.relationalDatabaseBundleId = relationalDatabaseBundleId
        self.relationalDatabaseName = relationalDatabaseName
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
        self.restoreTime = restoreTime
        self.sourceRelationalDatabaseName = sourceRelationalDatabaseName
        self.tags = tags
        self.useLatestRestorableTime = useLatestRestorableTime
    }
}

struct CreateRelationalDatabaseFromSnapshotInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let availabilityZone: Swift.String?
    let publiclyAccessible: Swift.Bool?
    let relationalDatabaseSnapshotName: Swift.String?
    let relationalDatabaseBundleId: Swift.String?
    let sourceRelationalDatabaseName: Swift.String?
    let restoreTime: ClientRuntime.Date?
    let useLatestRestorableTime: Swift.Bool?
    let tags: [LightsailClientTypes.Tag]?
}

extension CreateRelationalDatabaseFromSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case publiclyAccessible
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
        case restoreTime
        case sourceRelationalDatabaseName
        case tags
        case useLatestRestorableTime
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let relationalDatabaseSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseSnapshotName)
        relationalDatabaseSnapshotName = relationalDatabaseSnapshotNameDecoded
        let relationalDatabaseBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseBundleId)
        relationalDatabaseBundleId = relationalDatabaseBundleIdDecoded
        let sourceRelationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceRelationalDatabaseName)
        sourceRelationalDatabaseName = sourceRelationalDatabaseNameDecoded
        let restoreTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .restoreTime)
        restoreTime = restoreTimeDecoded
        let useLatestRestorableTimeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useLatestRestorableTime)
        useLatestRestorableTime = useLatestRestorableTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRelationalDatabaseFromSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRelationalDatabaseFromSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRelationalDatabaseFromSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRelationalDatabaseFromSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateRelationalDatabaseFromSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateRelationalDatabaseFromSnapshotOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateRelationalDatabaseFromSnapshotOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateRelationalDatabaseFromSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateRelationalDatabaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRelationalDatabaseInput(availabilityZone: \(Swift.String(describing: availabilityZone)), masterDatabaseName: \(Swift.String(describing: masterDatabaseName)), masterUsername: \(Swift.String(describing: masterUsername)), preferredBackupWindow: \(Swift.String(describing: preferredBackupWindow)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), relationalDatabaseBlueprintId: \(Swift.String(describing: relationalDatabaseBlueprintId)), relationalDatabaseBundleId: \(Swift.String(describing: relationalDatabaseBundleId)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)), tags: \(Swift.String(describing: tags)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension CreateRelationalDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case masterDatabaseName
        case masterUserPassword
        case masterUsername
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseBlueprintId
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let masterDatabaseName = self.masterDatabaseName {
            try encodeContainer.encode(masterDatabaseName, forKey: .masterDatabaseName)
        }
        if let masterUserPassword = self.masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
        if let masterUsername = self.masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if let preferredBackupWindow = self.preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = self.preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let publiclyAccessible = self.publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseBlueprintId = self.relationalDatabaseBlueprintId {
            try encodeContainer.encode(relationalDatabaseBlueprintId, forKey: .relationalDatabaseBlueprintId)
        }
        if let relationalDatabaseBundleId = self.relationalDatabaseBundleId {
            try encodeContainer.encode(relationalDatabaseBundleId, forKey: .relationalDatabaseBundleId)
        }
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateRelationalDatabaseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRelationalDatabaseInput: Swift.Equatable {
    /// The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format. You can get a list of Availability Zones by using the get regions operation. Be sure to add the include relational database Availability Zones parameter to your request.
    public var availabilityZone: Swift.String?
    /// The meaning of this parameter differs according to the database engine you use. MySQL The name of the database to create when the Lightsail database resource is created. If this parameter isn't specified, no database is created in the database resource. Constraints:
    ///
    /// * Must contain 1 to 64 letters or numbers.
    ///
    /// * Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0- 9).
    ///
    /// * Can't be a word reserved by the specified database engine. For more information about reserved words in MySQL, see the Keywords and Reserved Words articles for [MySQL 5.6](https://dev.mysql.com/doc/refman/5.6/en/keywords.html), [MySQL 5.7](https://dev.mysql.com/doc/refman/5.7/en/keywords.html), and [MySQL 8.0](https://dev.mysql.com/doc/refman/8.0/en/keywords.html).
    ///
    ///
    /// PostgreSQL The name of the database to create when the Lightsail database resource is created. If this parameter isn't specified, a database named postgres is created in the database resource. Constraints:
    ///
    /// * Must contain 1 to 63 letters or numbers.
    ///
    /// * Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0- 9).
    ///
    /// * Can't be a word reserved by the specified database engine. For more information about reserved words in PostgreSQL, see the SQL Key Words articles for [PostgreSQL 9.6](https://www.postgresql.org/docs/9.6/sql-keywords-appendix.html), [PostgreSQL 10](https://www.postgresql.org/docs/10/sql-keywords-appendix.html), [PostgreSQL 11](https://www.postgresql.org/docs/11/sql-keywords-appendix.html), and [PostgreSQL 12](https://www.postgresql.org/docs/12/sql-keywords-appendix.html).
    /// This member is required.
    public var masterDatabaseName: Swift.String?
    /// The password for the master user. The password can include any printable ASCII character except "/", """, or "@". It cannot contain spaces. MySQL Constraints: Must contain from 8 to 41 characters. PostgreSQL Constraints: Must contain from 8 to 128 characters.
    public var masterUserPassword: Swift.String?
    /// The name for the master user. MySQL Constraints:
    ///
    /// * Required for MySQL.
    ///
    /// * Must be 1 to 16 letters or numbers. Can contain underscores.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't be a reserved word for the chosen database engine. For more information about reserved words in MySQL 5.6 or 5.7, see the Keywords and Reserved Words articles for [MySQL 5.6](https://dev.mysql.com/doc/refman/5.6/en/keywords.html), [MySQL 5.7](https://dev.mysql.com/doc/refman/5.7/en/keywords.html), or [MySQL 8.0](https://dev.mysql.com/doc/refman/8.0/en/keywords.html).
    ///
    ///
    /// PostgreSQL Constraints:
    ///
    /// * Required for PostgreSQL.
    ///
    /// * Must be 1 to 63 letters or numbers. Can contain underscores.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't be a reserved word for the chosen database engine. For more information about reserved words in MySQL 5.6 or 5.7, see the Keywords and Reserved Words articles for [PostgreSQL 9.6](https://www.postgresql.org/docs/9.6/sql-keywords-appendix.html), [PostgreSQL 10](https://www.postgresql.org/docs/10/sql-keywords-appendix.html), [PostgreSQL 11](https://www.postgresql.org/docs/11/sql-keywords-appendix.html), and [PostgreSQL 12](https://www.postgresql.org/docs/12/sql-keywords-appendix.html).
    /// This member is required.
    public var masterUsername: Swift.String?
    /// The daily time range during which automated backups are created for your new database if automated backups are enabled. The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. For more information about the preferred backup window time blocks for each region, see the [Working With Backups](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow) guide in the Amazon Relational Database Service documentation. Constraints:
    ///
    /// * Must be in the hh24:mi-hh24:mi format. Example: 16:00-16:30
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?
    /// The weekly time range during which system maintenance can occur on your new database. The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. Constraints:
    ///
    /// * Must be in the ddd:hh24:mi-ddd:hh24:mi format.
    ///
    /// * Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
    ///
    /// * Must be at least 30 minutes.
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Example: Tue:17:00-Tue:17:30
    public var preferredMaintenanceWindow: Swift.String?
    /// Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
    public var publiclyAccessible: Swift.Bool?
    /// The blueprint ID for your new database. A blueprint describes the major engine version of a database. You can get a list of database blueprints IDs by using the get relational database blueprints operation.
    /// This member is required.
    public var relationalDatabaseBlueprintId: Swift.String?
    /// The bundle ID for your new database. A bundle describes the performance specifications for your database. You can get a list of database bundle IDs by using the get relational database bundles operation.
    /// This member is required.
    public var relationalDatabaseBundleId: Swift.String?
    /// The name to use for your new Lightsail database resource. Constraints:
    ///
    /// * Must contain from 2 to 255 alphanumeric characters, or hyphens.
    ///
    /// * The first and last character must be a letter or number.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init (
        availabilityZone: Swift.String? = nil,
        masterDatabaseName: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        relationalDatabaseBlueprintId: Swift.String? = nil,
        relationalDatabaseBundleId: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.masterDatabaseName = masterDatabaseName
        self.masterUserPassword = masterUserPassword
        self.masterUsername = masterUsername
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId
        self.relationalDatabaseBundleId = relationalDatabaseBundleId
        self.relationalDatabaseName = relationalDatabaseName
        self.tags = tags
    }
}

struct CreateRelationalDatabaseInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let availabilityZone: Swift.String?
    let relationalDatabaseBlueprintId: Swift.String?
    let relationalDatabaseBundleId: Swift.String?
    let masterDatabaseName: Swift.String?
    let masterUsername: Swift.String?
    let masterUserPassword: Swift.String?
    let preferredBackupWindow: Swift.String?
    let preferredMaintenanceWindow: Swift.String?
    let publiclyAccessible: Swift.Bool?
    let tags: [LightsailClientTypes.Tag]?
}

extension CreateRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case masterDatabaseName
        case masterUserPassword
        case masterUsername
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseBlueprintId
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let relationalDatabaseBlueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseBlueprintId)
        relationalDatabaseBlueprintId = relationalDatabaseBlueprintIdDecoded
        let relationalDatabaseBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseBundleId)
        relationalDatabaseBundleId = relationalDatabaseBundleIdDecoded
        let masterDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterDatabaseName)
        masterDatabaseName = masterDatabaseNameDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateRelationalDatabaseOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateRelationalDatabaseOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension CreateRelationalDatabaseSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let relationalDatabaseSnapshotName = self.relationalDatabaseSnapshotName {
            try encodeContainer.encode(relationalDatabaseSnapshotName, forKey: .relationalDatabaseSnapshotName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateRelationalDatabaseSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRelationalDatabaseSnapshotInput: Swift.Equatable {
    /// The name of the database on which to base your new snapshot.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// The name for your new database snapshot. Constraints:
    ///
    /// * Must contain from 2 to 255 alphanumeric characters, or hyphens.
    ///
    /// * The first and last character must be a letter or number.
    /// This member is required.
    public var relationalDatabaseSnapshotName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?

    public init (
        relationalDatabaseName: Swift.String? = nil,
        relationalDatabaseSnapshotName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
        self.tags = tags
    }
}

struct CreateRelationalDatabaseSnapshotInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let relationalDatabaseSnapshotName: Swift.String?
    let tags: [LightsailClientTypes.Tag]?
}

extension CreateRelationalDatabaseSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let relationalDatabaseSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseSnapshotName)
        relationalDatabaseSnapshotName = relationalDatabaseSnapshotNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRelationalDatabaseSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRelationalDatabaseSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRelationalDatabaseSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRelationalDatabaseSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateRelationalDatabaseSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateRelationalDatabaseSnapshotOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateRelationalDatabaseSnapshotOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension CreateRelationalDatabaseSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteAlarmInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmName = self.alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
    }
}

extension DeleteAlarmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAlarmInput: Swift.Equatable {
    /// The name of the alarm to delete.
    /// This member is required.
    public var alarmName: Swift.String?

    public init (
        alarmName: Swift.String? = nil
    )
    {
        self.alarmName = alarmName
    }
}

struct DeleteAlarmInputBody: Swift.Equatable {
    let alarmName: Swift.String?
}

extension DeleteAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
    }
}

extension DeleteAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteAlarmOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteAlarmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteAlarmOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteAlarmOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteAlarmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteAutoSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case date
        case resourceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let date = self.date {
            try encodeContainer.encode(date, forKey: .date)
        }
        if let resourceName = self.resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
    }
}

extension DeleteAutoSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAutoSnapshotInput: Swift.Equatable {
    /// The date of the automatic snapshot to delete in YYYY-MM-DD format. Use the get auto snapshots operation to get the available automatic snapshots for a resource.
    /// This member is required.
    public var date: Swift.String?
    /// The name of the source instance or disk from which to delete the automatic snapshot.
    /// This member is required.
    public var resourceName: Swift.String?

    public init (
        date: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.date = date
        self.resourceName = resourceName
    }
}

struct DeleteAutoSnapshotInputBody: Swift.Equatable {
    let resourceName: Swift.String?
    let date: Swift.String?
}

extension DeleteAutoSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case date
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let dateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .date)
        date = dateDecoded
    }
}

extension DeleteAutoSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAutoSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteAutoSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAutoSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteAutoSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteAutoSnapshotOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteAutoSnapshotOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteAutoSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteBucketAccessKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyId
        case bucketName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKeyId = self.accessKeyId {
            try encodeContainer.encode(accessKeyId, forKey: .accessKeyId)
        }
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
    }
}

extension DeleteBucketAccessKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketAccessKeyInput: Swift.Equatable {
    /// The ID of the access key to delete. Use the [GetBucketAccessKeys](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketAccessKeys.html) action to get a list of access key IDs that you can specify.
    /// This member is required.
    public var accessKeyId: Swift.String?
    /// The name of the bucket that the access key belongs to.
    /// This member is required.
    public var bucketName: Swift.String?

    public init (
        accessKeyId: Swift.String? = nil,
        bucketName: Swift.String? = nil
    )
    {
        self.accessKeyId = accessKeyId
        self.bucketName = bucketName
    }
}

struct DeleteBucketAccessKeyInputBody: Swift.Equatable {
    let bucketName: Swift.String?
    let accessKeyId: Swift.String?
}

extension DeleteBucketAccessKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyId
        case bucketName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let accessKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKeyId)
        accessKeyId = accessKeyIdDecoded
    }
}

extension DeleteBucketAccessKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBucketAccessKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteBucketAccessKeyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketAccessKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteBucketAccessKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteBucketAccessKeyOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteBucketAccessKeyOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteBucketAccessKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteBucketInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
        case forceDelete
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let forceDelete = self.forceDelete {
            try encodeContainer.encode(forceDelete, forKey: .forceDelete)
        }
    }
}

extension DeleteBucketInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBucketInput: Swift.Equatable {
    /// The name of the bucket to delete. Use the [GetBuckets](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBuckets.html) action to get a list of bucket names that you can specify.
    /// This member is required.
    public var bucketName: Swift.String?
    /// A Boolean value that indicates whether to force delete the bucket. You must force delete the bucket if it has one of the following conditions:
    ///
    /// * The bucket is the origin of a distribution.
    ///
    /// * The bucket has instances that were granted access to it using the [SetResourceAccessForBucket](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html) action.
    ///
    /// * The bucket has objects.
    ///
    /// * The bucket has access keys.
    ///
    ///
    /// Force deleting a bucket might impact other resources that rely on the bucket, such as instances, distributions, or software that use the issued access keys.
    public var forceDelete: Swift.Bool?

    public init (
        bucketName: Swift.String? = nil,
        forceDelete: Swift.Bool? = nil
    )
    {
        self.bucketName = bucketName
        self.forceDelete = forceDelete
    }
}

struct DeleteBucketInputBody: Swift.Equatable {
    let bucketName: Swift.String?
    let forceDelete: Swift.Bool?
}

extension DeleteBucketInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
        case forceDelete
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let forceDeleteDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceDelete)
        forceDelete = forceDeleteDecoded
    }
}

extension DeleteBucketOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBucketOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteBucketOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteBucketOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteBucketOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteBucketOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteBucketOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteCertificateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = self.certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
    }
}

extension DeleteCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteCertificateInput: Swift.Equatable {
    /// The name of the certificate to delete. Use the GetCertificates action to get a list of certificate names that you can specify.
    /// This member is required.
    public var certificateName: Swift.String?

    public init (
        certificateName: Swift.String? = nil
    )
    {
        self.certificateName = certificateName
    }
}

struct DeleteCertificateInputBody: Swift.Equatable {
    let certificateName: Swift.String?
}

extension DeleteCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
    }
}

extension DeleteCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteCertificateOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteCertificateOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteCertificateOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteContactMethodInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `protocol` = "protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
    }
}

extension DeleteContactMethodInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteContactMethodInput: Swift.Equatable {
    /// The protocol that will be deleted, such as Email or SMS (text messaging). To delete an Email and an SMS contact method if you added both, you must run separate DeleteContactMethod actions to delete each protocol.
    /// This member is required.
    public var `protocol`: LightsailClientTypes.ContactProtocol?

    public init (
        `protocol`: LightsailClientTypes.ContactProtocol? = nil
    )
    {
        self.`protocol` = `protocol`
    }
}

struct DeleteContactMethodInputBody: Swift.Equatable {
    let `protocol`: LightsailClientTypes.ContactProtocol?
}

extension DeleteContactMethodInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `protocol` = "protocol"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContactProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension DeleteContactMethodOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteContactMethodOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteContactMethodOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteContactMethodOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteContactMethodOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteContactMethodOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteContactMethodOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteContactMethodOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteContainerImageInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension DeleteContainerImageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteContainerImageInput: Swift.Equatable {
    /// The name of the container image to delete from the container service. Use the GetContainerImages action to get the name of the container images that are registered to a container service. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (:). For example, :container-service-1.mystaticwebsite.1. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, nginx:latest or nginx.
    /// This member is required.
    public var image: Swift.String?
    /// The name of the container service for which to delete a registered container image.
    /// This member is required.
    public var serviceName: Swift.String?

    public init (
        image: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.image = image
        self.serviceName = serviceName
    }
}

struct DeleteContainerImageInputBody: Swift.Equatable {
}

extension DeleteContainerImageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteContainerImageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteContainerImageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteContainerImageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteContainerImageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteContainerImageOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteContainerServiceInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension DeleteContainerServiceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteContainerServiceInput: Swift.Equatable {
    /// The name of the container service to delete.
    /// This member is required.
    public var serviceName: Swift.String?

    public init (
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

struct DeleteContainerServiceInputBody: Swift.Equatable {
}

extension DeleteContainerServiceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteContainerServiceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteContainerServiceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteContainerServiceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteContainerServiceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteContainerServiceOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteDiskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
        case forceDeleteAddOns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskName = self.diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
        if let forceDeleteAddOns = self.forceDeleteAddOns {
            try encodeContainer.encode(forceDeleteAddOns, forKey: .forceDeleteAddOns)
        }
    }
}

extension DeleteDiskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDiskInput: Swift.Equatable {
    /// The unique name of the disk you want to delete (e.g., my-disk).
    /// This member is required.
    public var diskName: Swift.String?
    /// A Boolean value to indicate whether to delete all add-ons for the disk.
    public var forceDeleteAddOns: Swift.Bool?

    public init (
        diskName: Swift.String? = nil,
        forceDeleteAddOns: Swift.Bool? = nil
    )
    {
        self.diskName = diskName
        self.forceDeleteAddOns = forceDeleteAddOns
    }
}

struct DeleteDiskInputBody: Swift.Equatable {
    let diskName: Swift.String?
    let forceDeleteAddOns: Swift.Bool?
}

extension DeleteDiskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
        case forceDeleteAddOns
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
        let forceDeleteAddOnsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceDeleteAddOns)
        forceDeleteAddOns = forceDeleteAddOnsDecoded
    }
}

extension DeleteDiskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDiskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDiskOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDiskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteDiskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteDiskOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteDiskOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteDiskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteDiskSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskSnapshotName = self.diskSnapshotName {
            try encodeContainer.encode(diskSnapshotName, forKey: .diskSnapshotName)
        }
    }
}

extension DeleteDiskSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDiskSnapshotInput: Swift.Equatable {
    /// The name of the disk snapshot you want to delete (e.g., my-disk-snapshot).
    /// This member is required.
    public var diskSnapshotName: Swift.String?

    public init (
        diskSnapshotName: Swift.String? = nil
    )
    {
        self.diskSnapshotName = diskSnapshotName
    }
}

struct DeleteDiskSnapshotInputBody: Swift.Equatable {
    let diskSnapshotName: Swift.String?
}

extension DeleteDiskSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskSnapshotName)
        diskSnapshotName = diskSnapshotNameDecoded
    }
}

extension DeleteDiskSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDiskSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDiskSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDiskSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteDiskSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteDiskSnapshotOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteDiskSnapshotOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteDiskSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteDistributionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributionName = self.distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
    }
}

extension DeleteDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDistributionInput: Swift.Equatable {
    /// The name of the distribution to delete. Use the GetDistributions action to get a list of distribution names that you can specify.
    public var distributionName: Swift.String?

    public init (
        distributionName: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
    }
}

struct DeleteDistributionInputBody: Swift.Equatable {
    let distributionName: Swift.String?
}

extension DeleteDistributionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
    }
}

extension DeleteDistributionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDistributionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDistributionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDistributionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteDistributionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct DeleteDistributionOutputResponse: Swift.Equatable {
    /// An object that describes the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct DeleteDistributionOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension DeleteDistributionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension DeleteDomainEntryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainEntry
        case domainName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainEntry = self.domainEntry {
            try encodeContainer.encode(domainEntry, forKey: .domainEntry)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

extension DeleteDomainEntryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDomainEntryInput: Swift.Equatable {
    /// An array of key-value pairs containing information about your domain entries.
    /// This member is required.
    public var domainEntry: LightsailClientTypes.DomainEntry?
    /// The name of the domain entry to delete.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainEntry: LightsailClientTypes.DomainEntry? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.domainEntry = domainEntry
        self.domainName = domainName
    }
}

struct DeleteDomainEntryInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let domainEntry: LightsailClientTypes.DomainEntry?
}

extension DeleteDomainEntryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainEntry
        case domainName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let domainEntryDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DomainEntry.self, forKey: .domainEntry)
        domainEntry = domainEntryDecoded
    }
}

extension DeleteDomainEntryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDomainEntryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDomainEntryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDomainEntryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteDomainEntryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct DeleteDomainEntryOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct DeleteDomainEntryOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension DeleteDomainEntryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension DeleteDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

extension DeleteDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDomainInput: Swift.Equatable {
    /// The specific domain name to delete.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct DeleteDomainInputBody: Swift.Equatable {
    let domainName: Swift.String?
}

extension DeleteDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
    }
}

extension DeleteDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDomainOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct DeleteDomainOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct DeleteDomainOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension DeleteDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension DeleteInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case forceDeleteAddOns
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let forceDeleteAddOns = self.forceDeleteAddOns {
            try encodeContainer.encode(forceDeleteAddOns, forKey: .forceDeleteAddOns)
        }
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

extension DeleteInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteInstanceInput: Swift.Equatable {
    /// A Boolean value to indicate whether to delete all add-ons for the instance.
    public var forceDeleteAddOns: Swift.Bool?
    /// The name of the instance to delete.
    /// This member is required.
    public var instanceName: Swift.String?

    public init (
        forceDeleteAddOns: Swift.Bool? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.forceDeleteAddOns = forceDeleteAddOns
        self.instanceName = instanceName
    }
}

struct DeleteInstanceInputBody: Swift.Equatable {
    let instanceName: Swift.String?
    let forceDeleteAddOns: Swift.Bool?
}

extension DeleteInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case forceDeleteAddOns
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let forceDeleteAddOnsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceDeleteAddOns)
        forceDeleteAddOns = forceDeleteAddOnsDecoded
    }
}

extension DeleteInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteInstanceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteInstanceOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteInstanceOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteInstanceSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceSnapshotName = self.instanceSnapshotName {
            try encodeContainer.encode(instanceSnapshotName, forKey: .instanceSnapshotName)
        }
    }
}

extension DeleteInstanceSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteInstanceSnapshotInput: Swift.Equatable {
    /// The name of the snapshot to delete.
    /// This member is required.
    public var instanceSnapshotName: Swift.String?

    public init (
        instanceSnapshotName: Swift.String? = nil
    )
    {
        self.instanceSnapshotName = instanceSnapshotName
    }
}

struct DeleteInstanceSnapshotInputBody: Swift.Equatable {
    let instanceSnapshotName: Swift.String?
}

extension DeleteInstanceSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceSnapshotName)
        instanceSnapshotName = instanceSnapshotNameDecoded
    }
}

extension DeleteInstanceSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInstanceSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteInstanceSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInstanceSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteInstanceSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteInstanceSnapshotOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteInstanceSnapshotOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteInstanceSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteKeyPairInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expectedFingerprint
        case keyPairName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expectedFingerprint = self.expectedFingerprint {
            try encodeContainer.encode(expectedFingerprint, forKey: .expectedFingerprint)
        }
        if let keyPairName = self.keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
    }
}

extension DeleteKeyPairInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteKeyPairInput: Swift.Equatable {
    /// The RSA fingerprint of the Lightsail default key pair to delete. The expectedFingerprint parameter is required only when specifying to delete a Lightsail default key pair.
    public var expectedFingerprint: Swift.String?
    /// The name of the key pair to delete.
    /// This member is required.
    public var keyPairName: Swift.String?

    public init (
        expectedFingerprint: Swift.String? = nil,
        keyPairName: Swift.String? = nil
    )
    {
        self.expectedFingerprint = expectedFingerprint
        self.keyPairName = keyPairName
    }
}

struct DeleteKeyPairInputBody: Swift.Equatable {
    let keyPairName: Swift.String?
    let expectedFingerprint: Swift.String?
}

extension DeleteKeyPairInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expectedFingerprint
        case keyPairName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
        let expectedFingerprintDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedFingerprint)
        expectedFingerprint = expectedFingerprintDecoded
    }
}

extension DeleteKeyPairOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteKeyPairOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteKeyPairOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteKeyPairOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteKeyPairOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct DeleteKeyPairOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct DeleteKeyPairOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension DeleteKeyPairOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension DeleteKnownHostKeysInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

extension DeleteKnownHostKeysInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteKnownHostKeysInput: Swift.Equatable {
    /// The name of the instance for which you want to reset the host key or certificate.
    /// This member is required.
    public var instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct DeleteKnownHostKeysInputBody: Swift.Equatable {
    let instanceName: Swift.String?
}

extension DeleteKnownHostKeysInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension DeleteKnownHostKeysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteKnownHostKeysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteKnownHostKeysOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteKnownHostKeysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteKnownHostKeysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteKnownHostKeysOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteKnownHostKeysOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteKnownHostKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteLoadBalancerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loadBalancerName = self.loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

extension DeleteLoadBalancerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLoadBalancerInput: Swift.Equatable {
    /// The name of the load balancer you want to delete.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init (
        loadBalancerName: Swift.String? = nil
    )
    {
        self.loadBalancerName = loadBalancerName
    }
}

struct DeleteLoadBalancerInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
}

extension DeleteLoadBalancerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
    }
}

extension DeleteLoadBalancerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLoadBalancerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteLoadBalancerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLoadBalancerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteLoadBalancerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteLoadBalancerOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteLoadBalancerOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteLoadBalancerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteLoadBalancerTlsCertificateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case force
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = self.certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let force = self.force {
            try encodeContainer.encode(force, forKey: .force)
        }
        if let loadBalancerName = self.loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

extension DeleteLoadBalancerTlsCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLoadBalancerTlsCertificateInput: Swift.Equatable {
    /// The SSL/TLS certificate name.
    /// This member is required.
    public var certificateName: Swift.String?
    /// When true, forces the deletion of an SSL/TLS certificate. There can be two certificates associated with a Lightsail load balancer: the primary and the backup. The force parameter is required when the primary SSL/TLS certificate is in use by an instance attached to the load balancer.
    public var force: Swift.Bool?
    /// The load balancer name.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init (
        certificateName: Swift.String? = nil,
        force: Swift.Bool? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.certificateName = certificateName
        self.force = force
        self.loadBalancerName = loadBalancerName
    }
}

struct DeleteLoadBalancerTlsCertificateInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
    let certificateName: Swift.String?
    let force: Swift.Bool?
}

extension DeleteLoadBalancerTlsCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case force
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let forceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .force)
        force = forceDecoded
    }
}

extension DeleteLoadBalancerTlsCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLoadBalancerTlsCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteLoadBalancerTlsCertificateOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLoadBalancerTlsCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteLoadBalancerTlsCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteLoadBalancerTlsCertificateOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteLoadBalancerTlsCertificateOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteLoadBalancerTlsCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteRelationalDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finalRelationalDatabaseSnapshotName
        case relationalDatabaseName
        case skipFinalSnapshot
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let finalRelationalDatabaseSnapshotName = self.finalRelationalDatabaseSnapshotName {
            try encodeContainer.encode(finalRelationalDatabaseSnapshotName, forKey: .finalRelationalDatabaseSnapshotName)
        }
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let skipFinalSnapshot = self.skipFinalSnapshot {
            try encodeContainer.encode(skipFinalSnapshot, forKey: .skipFinalSnapshot)
        }
    }
}

extension DeleteRelationalDatabaseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRelationalDatabaseInput: Swift.Equatable {
    /// The name of the database snapshot created if skip final snapshot is false, which is the default value for that parameter. Specifying this parameter and also specifying the skip final snapshot parameter to true results in an error. Constraints:
    ///
    /// * Must contain from 2 to 255 alphanumeric characters, or hyphens.
    ///
    /// * The first and last character must be a letter or number.
    public var finalRelationalDatabaseSnapshotName: Swift.String?
    /// The name of the database that you are deleting.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// Determines whether a final database snapshot is created before your database is deleted. If true is specified, no database snapshot is created. If false is specified, a database snapshot is created before your database is deleted. You must specify the final relational database snapshot name parameter if the skip final snapshot parameter is false. Default: false
    public var skipFinalSnapshot: Swift.Bool?

    public init (
        finalRelationalDatabaseSnapshotName: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil,
        skipFinalSnapshot: Swift.Bool? = nil
    )
    {
        self.finalRelationalDatabaseSnapshotName = finalRelationalDatabaseSnapshotName
        self.relationalDatabaseName = relationalDatabaseName
        self.skipFinalSnapshot = skipFinalSnapshot
    }
}

struct DeleteRelationalDatabaseInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let skipFinalSnapshot: Swift.Bool?
    let finalRelationalDatabaseSnapshotName: Swift.String?
}

extension DeleteRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finalRelationalDatabaseSnapshotName
        case relationalDatabaseName
        case skipFinalSnapshot
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let skipFinalSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .skipFinalSnapshot)
        skipFinalSnapshot = skipFinalSnapshotDecoded
        let finalRelationalDatabaseSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .finalRelationalDatabaseSnapshotName)
        finalRelationalDatabaseSnapshotName = finalRelationalDatabaseSnapshotNameDecoded
    }
}

extension DeleteRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteRelationalDatabaseOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteRelationalDatabaseOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteRelationalDatabaseSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseSnapshotName = self.relationalDatabaseSnapshotName {
            try encodeContainer.encode(relationalDatabaseSnapshotName, forKey: .relationalDatabaseSnapshotName)
        }
    }
}

extension DeleteRelationalDatabaseSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRelationalDatabaseSnapshotInput: Swift.Equatable {
    /// The name of the database snapshot that you are deleting.
    /// This member is required.
    public var relationalDatabaseSnapshotName: Swift.String?

    public init (
        relationalDatabaseSnapshotName: Swift.String? = nil
    )
    {
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
    }
}

struct DeleteRelationalDatabaseSnapshotInputBody: Swift.Equatable {
    let relationalDatabaseSnapshotName: Swift.String?
}

extension DeleteRelationalDatabaseSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseSnapshotName)
        relationalDatabaseSnapshotName = relationalDatabaseSnapshotNameDecoded
    }
}

extension DeleteRelationalDatabaseSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRelationalDatabaseSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRelationalDatabaseSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRelationalDatabaseSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteRelationalDatabaseSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteRelationalDatabaseSnapshotOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteRelationalDatabaseSnapshotOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DeleteRelationalDatabaseSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.DestinationInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case service
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let service = self.service {
            try encodeContainer.encode(service, forKey: .service)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let serviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .service)
        service = serviceDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the destination of a record.
    public struct DestinationInfo: Swift.Equatable {
        /// The ID of the resource created at the destination.
        public var id: Swift.String?
        /// The destination service of the record.
        public var service: Swift.String?

        public init (
            id: Swift.String? = nil,
            service: Swift.String? = nil
        )
        {
            self.id = id
            self.service = service
        }
    }

}

extension DetachCertificateFromDistributionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributionName = self.distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
    }
}

extension DetachCertificateFromDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetachCertificateFromDistributionInput: Swift.Equatable {
    /// The name of the distribution from which to detach the certificate. Use the GetDistributions action to get a list of distribution names that you can specify.
    /// This member is required.
    public var distributionName: Swift.String?

    public init (
        distributionName: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
    }
}

struct DetachCertificateFromDistributionInputBody: Swift.Equatable {
    let distributionName: Swift.String?
}

extension DetachCertificateFromDistributionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
    }
}

extension DetachCertificateFromDistributionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachCertificateFromDistributionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetachCertificateFromDistributionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachCertificateFromDistributionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetachCertificateFromDistributionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct DetachCertificateFromDistributionOutputResponse: Swift.Equatable {
    /// An object that describes the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct DetachCertificateFromDistributionOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension DetachCertificateFromDistributionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension DetachDiskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskName = self.diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
    }
}

extension DetachDiskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetachDiskInput: Swift.Equatable {
    /// The unique name of the disk you want to detach from your instance (e.g., my-disk).
    /// This member is required.
    public var diskName: Swift.String?

    public init (
        diskName: Swift.String? = nil
    )
    {
        self.diskName = diskName
    }
}

struct DetachDiskInputBody: Swift.Equatable {
    let diskName: Swift.String?
}

extension DetachDiskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
    }
}

extension DetachDiskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachDiskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetachDiskOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachDiskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetachDiskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DetachDiskOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DetachDiskOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DetachDiskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DetachInstancesFromLoadBalancerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for resourcename0 in instanceNames {
                try instanceNamesContainer.encode(resourcename0)
            }
        }
        if let loadBalancerName = self.loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

extension DetachInstancesFromLoadBalancerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetachInstancesFromLoadBalancerInput: Swift.Equatable {
    /// An array of strings containing the names of the instances you want to detach from the load balancer.
    /// This member is required.
    public var instanceNames: [Swift.String]?
    /// The name of the Lightsail load balancer.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init (
        instanceNames: [Swift.String]? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.instanceNames = instanceNames
        self.loadBalancerName = loadBalancerName
    }
}

struct DetachInstancesFromLoadBalancerInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
    let instanceNames: [Swift.String]?
}

extension DetachInstancesFromLoadBalancerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let instanceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[Swift.String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [Swift.String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
    }
}

extension DetachInstancesFromLoadBalancerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachInstancesFromLoadBalancerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetachInstancesFromLoadBalancerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachInstancesFromLoadBalancerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetachInstancesFromLoadBalancerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DetachInstancesFromLoadBalancerOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DetachInstancesFromLoadBalancerOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DetachInstancesFromLoadBalancerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DetachStaticIpInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let staticIpName = self.staticIpName {
            try encodeContainer.encode(staticIpName, forKey: .staticIpName)
        }
    }
}

extension DetachStaticIpInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetachStaticIpInput: Swift.Equatable {
    /// The name of the static IP to detach from the instance.
    /// This member is required.
    public var staticIpName: Swift.String?

    public init (
        staticIpName: Swift.String? = nil
    )
    {
        self.staticIpName = staticIpName
    }
}

struct DetachStaticIpInputBody: Swift.Equatable {
    let staticIpName: Swift.String?
}

extension DetachStaticIpInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .staticIpName)
        staticIpName = staticIpNameDecoded
    }
}

extension DetachStaticIpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachStaticIpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetachStaticIpOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachStaticIpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetachStaticIpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DetachStaticIpOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DetachStaticIpOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DetachStaticIpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DisableAddOnInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOnType
        case resourceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOnType = self.addOnType {
            try encodeContainer.encode(addOnType.rawValue, forKey: .addOnType)
        }
        if let resourceName = self.resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
    }
}

extension DisableAddOnInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisableAddOnInput: Swift.Equatable {
    /// The add-on type to disable.
    /// This member is required.
    public var addOnType: LightsailClientTypes.AddOnType?
    /// The name of the source resource for which to disable the add-on.
    /// This member is required.
    public var resourceName: Swift.String?

    public init (
        addOnType: LightsailClientTypes.AddOnType? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.addOnType = addOnType
        self.resourceName = resourceName
    }
}

struct DisableAddOnInputBody: Swift.Equatable {
    let addOnType: LightsailClientTypes.AddOnType?
    let resourceName: Swift.String?
}

extension DisableAddOnInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOnType
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addOnTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AddOnType.self, forKey: .addOnType)
        addOnType = addOnTypeDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
    }
}

extension DisableAddOnOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableAddOnOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisableAddOnOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableAddOnOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DisableAddOnOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DisableAddOnOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DisableAddOnOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension DisableAddOnOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.Disk: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case arn
        case attachedTo
        case attachmentState
        case createdAt
        case gbInUse
        case iops
        case isAttached
        case isSystemDisk
        case location
        case name
        case path
        case resourceType
        case sizeInGb
        case state
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addon0 in addOns {
                try addOnsContainer.encode(addon0)
            }
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let attachedTo = self.attachedTo {
            try encodeContainer.encode(attachedTo, forKey: .attachedTo)
        }
        if let attachmentState = self.attachmentState {
            try encodeContainer.encode(attachmentState, forKey: .attachmentState)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let gbInUse = self.gbInUse {
            try encodeContainer.encode(gbInUse, forKey: .gbInUse)
        }
        if let iops = self.iops {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let isAttached = self.isAttached {
            try encodeContainer.encode(isAttached, forKey: .isAttached)
        }
        if let isSystemDisk = self.isSystemDisk {
            try encodeContainer.encode(isSystemDisk, forKey: .isSystemDisk)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sizeInGb = self.sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOn?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOn]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOn]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let isSystemDiskDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isSystemDisk)
        isSystemDisk = isSystemDiskDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DiskState.self, forKey: .state)
        state = stateDecoded
        let attachedToDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachedTo)
        attachedTo = attachedToDecoded
        let isAttachedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAttached)
        isAttached = isAttachedDecoded
        let attachmentStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachmentState)
        attachmentState = attachmentStateDecoded
        let gbInUseDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gbInUse)
        gbInUse = gbInUseDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a block storage disk.
    public struct Disk: Swift.Equatable {
        /// An array of objects representing the add-ons enabled on the disk.
        public var addOns: [LightsailClientTypes.AddOn]?
        /// The Amazon Resource Name (ARN) of the disk.
        public var arn: Swift.String?
        /// The resources to which the disk is attached.
        public var attachedTo: Swift.String?
        /// (Deprecated) The attachment state of the disk. In releases prior to November 14, 2017, this parameter returned attached for system disks in the API response. It is now deprecated, but still included in the response. Use isAttached instead.
        @available(*, deprecated)
        public var attachmentState: Swift.String?
        /// The date when the disk was created.
        public var createdAt: ClientRuntime.Date?
        /// (Deprecated) The number of GB in use by the disk. In releases prior to November 14, 2017, this parameter was not included in the API response. It is now deprecated.
        @available(*, deprecated)
        public var gbInUse: Swift.Int?
        /// The input/output operations per second (IOPS) of the disk.
        public var iops: Swift.Int?
        /// A Boolean value indicating whether the disk is attached.
        public var isAttached: Swift.Bool?
        /// A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).
        public var isSystemDisk: Swift.Bool?
        /// The AWS Region and Availability Zone where the disk is located.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The unique name of the disk.
        public var name: Swift.String?
        /// The disk path.
        public var path: Swift.String?
        /// The Lightsail resource type (e.g., Disk).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The size of the disk in GB.
        public var sizeInGb: Swift.Int?
        /// Describes the status of the disk.
        public var state: LightsailClientTypes.DiskState?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init (
            addOns: [LightsailClientTypes.AddOn]? = nil,
            arn: Swift.String? = nil,
            attachedTo: Swift.String? = nil,
            attachmentState: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            gbInUse: Swift.Int? = nil,
            iops: Swift.Int? = nil,
            isAttached: Swift.Bool? = nil,
            isSystemDisk: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            path: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sizeInGb: Swift.Int? = nil,
            state: LightsailClientTypes.DiskState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.addOns = addOns
            self.arn = arn
            self.attachedTo = attachedTo
            self.attachmentState = attachmentState
            self.createdAt = createdAt
            self.gbInUse = gbInUse
            self.iops = iops
            self.isAttached = isAttached
            self.isSystemDisk = isSystemDisk
            self.location = location
            self.name = name
            self.path = path
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.DiskInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isSystemDisk
        case name
        case path
        case sizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let isSystemDisk = self.isSystemDisk {
            try encodeContainer.encode(isSystemDisk, forKey: .isSystemDisk)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let sizeInGb = self.sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let isSystemDiskDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isSystemDisk)
        isSystemDisk = isSystemDiskDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a disk.
    public struct DiskInfo: Swift.Equatable {
        /// A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).
        public var isSystemDisk: Swift.Bool?
        /// The disk name.
        public var name: Swift.String?
        /// The disk path.
        public var path: Swift.String?
        /// The size of the disk in GB (e.g., 32).
        public var sizeInGb: Swift.Int?

        public init (
            isSystemDisk: Swift.Bool? = nil,
            name: Swift.String? = nil,
            path: Swift.String? = nil,
            sizeInGb: Swift.Int? = nil
        )
        {
            self.isSystemDisk = isSystemDisk
            self.name = name
            self.path = path
            self.sizeInGb = sizeInGb
        }
    }

}

extension LightsailClientTypes.DiskMap: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case newDiskName
        case originalDiskPath
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let newDiskName = self.newDiskName {
            try encodeContainer.encode(newDiskName, forKey: .newDiskName)
        }
        if let originalDiskPath = self.originalDiskPath {
            try encodeContainer.encode(originalDiskPath, forKey: .originalDiskPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let originalDiskPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalDiskPath)
        originalDiskPath = originalDiskPathDecoded
        let newDiskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newDiskName)
        newDiskName = newDiskNameDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a block storage disk mapping.
    public struct DiskMap: Swift.Equatable {
        /// The new disk name (e.g., my-new-disk).
        public var newDiskName: Swift.String?
        /// The original disk path exposed to the instance (for example, /dev/sdh).
        public var originalDiskPath: Swift.String?

        public init (
            newDiskName: Swift.String? = nil,
            originalDiskPath: Swift.String? = nil
        )
        {
            self.newDiskName = newDiskName
            self.originalDiskPath = originalDiskPath
        }
    }

}

extension LightsailClientTypes.DiskSnapshot: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case fromDiskArn
        case fromDiskName
        case fromInstanceArn
        case fromInstanceName
        case isFromAutoSnapshot
        case location
        case name
        case progress
        case resourceType
        case sizeInGb
        case state
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let fromDiskArn = self.fromDiskArn {
            try encodeContainer.encode(fromDiskArn, forKey: .fromDiskArn)
        }
        if let fromDiskName = self.fromDiskName {
            try encodeContainer.encode(fromDiskName, forKey: .fromDiskName)
        }
        if let fromInstanceArn = self.fromInstanceArn {
            try encodeContainer.encode(fromInstanceArn, forKey: .fromInstanceArn)
        }
        if let fromInstanceName = self.fromInstanceName {
            try encodeContainer.encode(fromInstanceName, forKey: .fromInstanceName)
        }
        if let isFromAutoSnapshot = self.isFromAutoSnapshot {
            try encodeContainer.encode(isFromAutoSnapshot, forKey: .isFromAutoSnapshot)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let progress = self.progress {
            try encodeContainer.encode(progress, forKey: .progress)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sizeInGb = self.sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DiskSnapshotState.self, forKey: .state)
        state = stateDecoded
        let progressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .progress)
        progress = progressDecoded
        let fromDiskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromDiskName)
        fromDiskName = fromDiskNameDecoded
        let fromDiskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromDiskArn)
        fromDiskArn = fromDiskArnDecoded
        let fromInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromInstanceName)
        fromInstanceName = fromInstanceNameDecoded
        let fromInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromInstanceArn)
        fromInstanceArn = fromInstanceArnDecoded
        let isFromAutoSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isFromAutoSnapshot)
        isFromAutoSnapshot = isFromAutoSnapshotDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a block storage disk snapshot.
    public struct DiskSnapshot: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the disk snapshot.
        public var arn: Swift.String?
        /// The date when the disk snapshot was created.
        public var createdAt: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the source disk from which the disk snapshot was created.
        public var fromDiskArn: Swift.String?
        /// The unique name of the source disk from which the disk snapshot was created.
        public var fromDiskName: Swift.String?
        /// The Amazon Resource Name (ARN) of the source instance from which the disk (system volume) snapshot was created.
        public var fromInstanceArn: Swift.String?
        /// The unique name of the source instance from which the disk (system volume) snapshot was created.
        public var fromInstanceName: Swift.String?
        /// A Boolean value indicating whether the snapshot was created from an automatic snapshot.
        public var isFromAutoSnapshot: Swift.Bool?
        /// The AWS Region and Availability Zone where the disk snapshot was created.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the disk snapshot (e.g., my-disk-snapshot).
        public var name: Swift.String?
        /// The progress of the snapshot.
        public var progress: Swift.String?
        /// The Lightsail resource type (e.g., DiskSnapshot).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The size of the disk in GB.
        public var sizeInGb: Swift.Int?
        /// The status of the disk snapshot operation.
        public var state: LightsailClientTypes.DiskSnapshotState?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            fromDiskArn: Swift.String? = nil,
            fromDiskName: Swift.String? = nil,
            fromInstanceArn: Swift.String? = nil,
            fromInstanceName: Swift.String? = nil,
            isFromAutoSnapshot: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            progress: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sizeInGb: Swift.Int? = nil,
            state: LightsailClientTypes.DiskSnapshotState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.fromDiskArn = fromDiskArn
            self.fromDiskName = fromDiskName
            self.fromInstanceArn = fromInstanceArn
            self.fromInstanceName = fromInstanceName
            self.isFromAutoSnapshot = isFromAutoSnapshot
            self.location = location
            self.name = name
            self.progress = progress
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.DiskSnapshotInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sizeInGb = self.sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a disk snapshot.
    public struct DiskSnapshotInfo: Swift.Equatable {
        /// The size of the disk in GB (e.g., 32).
        public var sizeInGb: Swift.Int?

        public init (
            sizeInGb: Swift.Int? = nil
        )
        {
            self.sizeInGb = sizeInGb
        }
    }

}

extension LightsailClientTypes {
    public enum DiskSnapshotState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case error
        case pending
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [DiskSnapshotState] {
            return [
                .completed,
                .error,
                .pending,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "completed"
            case .error: return "error"
            case .pending: return "pending"
            case .unknown: return "unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DiskSnapshotState(rawValue: rawValue) ?? DiskSnapshotState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum DiskState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case error
        case inuse
        case pending
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [DiskState] {
            return [
                .available,
                .error,
                .inuse,
                .pending,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .error: return "error"
            case .inuse: return "in-use"
            case .pending: return "pending"
            case .unknown: return "unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DiskState(rawValue: rawValue) ?? DiskState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.DistributionBundle: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case isActive
        case name
        case price
        case transferPerMonthInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let isActive = self.isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let price = self.price {
            try encodeContainer.encode(price, forKey: .price)
        }
        if let transferPerMonthInGb = self.transferPerMonthInGb {
            try encodeContainer.encode(transferPerMonthInGb, forKey: .transferPerMonthInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let priceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .price)
        price = priceDecoded
        let transferPerMonthInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transferPerMonthInGb)
        transferPerMonthInGb = transferPerMonthInGbDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the specifications of a distribution bundle.
    public struct DistributionBundle: Swift.Equatable {
        /// The ID of the bundle.
        public var bundleId: Swift.String?
        /// Indicates whether the bundle is active, and can be specified for a new or existing distribution.
        public var isActive: Swift.Bool?
        /// The name of the distribution bundle.
        public var name: Swift.String?
        /// The monthly price, in US dollars, of the bundle.
        public var price: Swift.Float?
        /// The monthly network transfer quota of the bundle.
        public var transferPerMonthInGb: Swift.Int?

        public init (
            bundleId: Swift.String? = nil,
            isActive: Swift.Bool? = nil,
            name: Swift.String? = nil,
            price: Swift.Float? = nil,
            transferPerMonthInGb: Swift.Int? = nil
        )
        {
            self.bundleId = bundleId
            self.isActive = isActive
            self.name = name
            self.price = price
            self.transferPerMonthInGb = transferPerMonthInGb
        }
    }

}

extension LightsailClientTypes {
    public enum DistributionMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bytesdownloaded
        case bytesuploaded
        case http4xxerrorrate
        case http5xxerrorrate
        case requests
        case totalerrorrate
        case sdkUnknown(Swift.String)

        public static var allCases: [DistributionMetricName] {
            return [
                .bytesdownloaded,
                .bytesuploaded,
                .http4xxerrorrate,
                .http5xxerrorrate,
                .requests,
                .totalerrorrate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bytesdownloaded: return "BytesDownloaded"
            case .bytesuploaded: return "BytesUploaded"
            case .http4xxerrorrate: return "Http4xxErrorRate"
            case .http5xxerrorrate: return "Http5xxErrorRate"
            case .requests: return "Requests"
            case .totalerrorrate: return "TotalErrorRate"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DistributionMetricName(rawValue: rawValue) ?? DistributionMetricName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.DnsRecordCreationState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DnsRecordCreationStateCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the creation state of the canonical name (CNAME) records that are automatically added by Amazon Lightsail to the DNS of a domain to validate domain ownership for an SSL/TLS certificate. When you create an SSL/TLS certificate for a Lightsail resource, you must add a set of CNAME records to the DNS of the domains for the certificate to validate that you own the domains. Lightsail can automatically add the CNAME records to the DNS of the domain if the DNS zone for the domain exists within your Lightsail account. If automatic record addition fails, or if you manage the DNS of your domain using a third-party service, then you must manually add the CNAME records to the DNS of your domain. For more information, see [Verify an SSL/TLS certificate in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/verify-tls-ssl-certificate-using-dns-cname-https) in the Amazon Lightsail Developer Guide.
    public struct DnsRecordCreationState: Swift.Equatable {
        /// The status code for the automated DNS record creation. Following are the possible values:
        ///
        /// * SUCCEEDED - The validation records were successfully added to the domain.
        ///
        /// * STARTED - The automatic DNS record creation has started.
        ///
        /// * FAILED - The validation records failed to be added to the domain.
        public var code: LightsailClientTypes.DnsRecordCreationStateCode?
        /// The message that describes the reason for the status code.
        public var message: Swift.String?

        public init (
            code: LightsailClientTypes.DnsRecordCreationStateCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension LightsailClientTypes {
    public enum DnsRecordCreationStateCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [DnsRecordCreationStateCode] {
            return [
                .failed,
                .started,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .started: return "STARTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DnsRecordCreationStateCode(rawValue: rawValue) ?? DnsRecordCreationStateCode.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Domain: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case domainEntries
        case location
        case name
        case registeredDomainDelegationInfo
        case resourceType
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let domainEntries = domainEntries {
            var domainEntriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainEntries)
            for domainentry0 in domainEntries {
                try domainEntriesContainer.encode(domainentry0)
            }
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let registeredDomainDelegationInfo = self.registeredDomainDelegationInfo {
            try encodeContainer.encode(registeredDomainDelegationInfo, forKey: .registeredDomainDelegationInfo)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let domainEntriesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.DomainEntry?].self, forKey: .domainEntries)
        var domainEntriesDecoded0:[LightsailClientTypes.DomainEntry]? = nil
        if let domainEntriesContainer = domainEntriesContainer {
            domainEntriesDecoded0 = [LightsailClientTypes.DomainEntry]()
            for structure0 in domainEntriesContainer {
                if let structure0 = structure0 {
                    domainEntriesDecoded0?.append(structure0)
                }
            }
        }
        domainEntries = domainEntriesDecoded0
        let registeredDomainDelegationInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RegisteredDomainDelegationInfo.self, forKey: .registeredDomainDelegationInfo)
        registeredDomainDelegationInfo = registeredDomainDelegationInfoDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a domain where you are storing recordsets.
    public struct Domain: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the domain recordset (e.g., arn:aws:lightsail:global:123456789101:Domain/824cede0-abc7-4f84-8dbc-12345EXAMPLE).
        public var arn: Swift.String?
        /// The date when the domain recordset was created.
        public var createdAt: ClientRuntime.Date?
        /// An array of key-value pairs containing information about the domain entries.
        public var domainEntries: [LightsailClientTypes.DomainEntry]?
        /// The AWS Region and Availability Zones where the domain recordset was created.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the domain.
        public var name: Swift.String?
        /// An object that describes the state of the Route 53 domain delegation to a Lightsail DNS zone.
        public var registeredDomainDelegationInfo: LightsailClientTypes.RegisteredDomainDelegationInfo?
        /// The resource type.
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            domainEntries: [LightsailClientTypes.DomainEntry]? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            registeredDomainDelegationInfo: LightsailClientTypes.RegisteredDomainDelegationInfo? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.domainEntries = domainEntries
            self.location = location
            self.name = name
            self.registeredDomainDelegationInfo = registeredDomainDelegationInfo
            self.resourceType = resourceType
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.DomainEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case isAlias
        case name
        case options
        case target
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isAlias = self.isAlias {
            try encodeContainer.encode(isAlias, forKey: .isAlias)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .options)
            for (dictKey0, domainEntryOptions0) in options {
                try optionsContainer.encode(domainEntryOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let target = self.target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let targetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .target)
        target = targetDecoded
        let isAliasDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAlias)
        isAlias = isAliasDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let optionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .options)
        var optionsDecoded0: [Swift.String:Swift.String]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in optionsContainer {
                if let string0 = string0 {
                    optionsDecoded0?[key0] = string0
                }
            }
        }
        options = optionsDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes a domain recordset entry.
    public struct DomainEntry: Swift.Equatable {
        /// The ID of the domain recordset entry.
        public var id: Swift.String?
        /// When true, specifies whether the domain entry is an alias used by the Lightsail load balancer, Lightsail container service, Lightsail content delivery network (CDN) distribution, or another Amazon Web Services resource. You can include an alias (A type) record in your request, which points to the DNS name of a load balancer, container service, CDN distribution, or other Amazon Web Services resource and routes traffic to that resource.
        public var isAlias: Swift.Bool?
        /// The name of the domain.
        public var name: Swift.String?
        /// (Deprecated) The options for the domain entry. In releases prior to November 29, 2017, this parameter was not included in the API response. It is now deprecated.
        @available(*, deprecated)
        public var options: [Swift.String:Swift.String]?
        /// The target IP address (e.g., 192.0.2.0), or AWS name server (e.g., ns-111.awsdns-22.com.). For Lightsail load balancers, the value looks like ab1234c56789c6b86aba6fb203d443bc-123456789.us-east-2.elb.amazonaws.com. For Lightsail distributions, the value looks like exampled1182ne.cloudfront.net. For Lightsail container services, the value looks like container-service-1.example23scljs.us-west-2.cs.amazonlightsail.com. Be sure to also set isAlias to true when setting up an A record for a Lightsail load balancer, distribution, or container service.
        public var target: Swift.String?
        /// The type of domain entry, such as address for IPv4 (A), address for IPv6 (AAAA), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority (SOA), service locator (SRV), or text (TXT). The following domain entry types can be used:
        ///
        /// * A
        ///
        /// * AAAA
        ///
        /// * CNAME
        ///
        /// * MX
        ///
        /// * NS
        ///
        /// * SOA
        ///
        /// * SRV
        ///
        /// * TXT
        public var type: Swift.String?

        public init (
            id: Swift.String? = nil,
            isAlias: Swift.Bool? = nil,
            name: Swift.String? = nil,
            options: [Swift.String:Swift.String]? = nil,
            target: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.id = id
            self.isAlias = isAlias
            self.name = name
            self.options = options
            self.target = target
            self.type = type
        }
    }

}

extension LightsailClientTypes.DomainValidationRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dnsRecordCreationState
        case domainName
        case resourceRecord
        case validationStatus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsRecordCreationState = self.dnsRecordCreationState {
            try encodeContainer.encode(dnsRecordCreationState, forKey: .dnsRecordCreationState)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let resourceRecord = self.resourceRecord {
            try encodeContainer.encode(resourceRecord, forKey: .resourceRecord)
        }
        if let validationStatus = self.validationStatus {
            try encodeContainer.encode(validationStatus.rawValue, forKey: .validationStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let resourceRecordDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceRecord.self, forKey: .resourceRecord)
        resourceRecord = resourceRecordDecoded
        let dnsRecordCreationStateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DnsRecordCreationState.self, forKey: .dnsRecordCreationState)
        dnsRecordCreationState = dnsRecordCreationStateDecoded
        let validationStatusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CertificateDomainValidationStatus.self, forKey: .validationStatus)
        validationStatus = validationStatusDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the domain name system (DNS) records that you must add to the DNS of your registered domain to validate ownership for an Amazon Lightsail SSL/TLS certificate.
    public struct DomainValidationRecord: Swift.Equatable {
        /// An object that describes the state of the canonical name (CNAME) records that are automatically added by Lightsail to the DNS of the domain to validate domain ownership.
        public var dnsRecordCreationState: LightsailClientTypes.DnsRecordCreationState?
        /// The domain name of the certificate validation record. For example, example.com or www.example.com.
        public var domainName: Swift.String?
        /// An object that describes the DNS records to add to your domain's DNS to validate it for the certificate.
        public var resourceRecord: LightsailClientTypes.ResourceRecord?
        /// The validation status of the record.
        public var validationStatus: LightsailClientTypes.CertificateDomainValidationStatus?

        public init (
            dnsRecordCreationState: LightsailClientTypes.DnsRecordCreationState? = nil,
            domainName: Swift.String? = nil,
            resourceRecord: LightsailClientTypes.ResourceRecord? = nil,
            validationStatus: LightsailClientTypes.CertificateDomainValidationStatus? = nil
        )
        {
            self.dnsRecordCreationState = dnsRecordCreationState
            self.domainName = domainName
            self.resourceRecord = resourceRecord
            self.validationStatus = validationStatus
        }
    }

}

extension DownloadDefaultKeyPairInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension DownloadDefaultKeyPairInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DownloadDefaultKeyPairInput: Swift.Equatable {

    public init () { }
}

struct DownloadDefaultKeyPairInputBody: Swift.Equatable {
}

extension DownloadDefaultKeyPairInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DownloadDefaultKeyPairOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DownloadDefaultKeyPairOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DownloadDefaultKeyPairOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DownloadDefaultKeyPairOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DownloadDefaultKeyPairOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.privateKeyBase64 = output.privateKeyBase64
            self.publicKeyBase64 = output.publicKeyBase64
        } else {
            self.createdAt = nil
            self.privateKeyBase64 = nil
            self.publicKeyBase64 = nil
        }
    }
}

public struct DownloadDefaultKeyPairOutputResponse: Swift.Equatable {
    /// The timestamp when the default key pair was created.
    public var createdAt: ClientRuntime.Date?
    /// A base64-encoded RSA private key.
    public var privateKeyBase64: Swift.String?
    /// A base64-encoded public key of the ssh-rsa type.
    public var publicKeyBase64: Swift.String?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        privateKeyBase64: Swift.String? = nil,
        publicKeyBase64: Swift.String? = nil
    )
    {
        self.createdAt = createdAt
        self.privateKeyBase64 = privateKeyBase64
        self.publicKeyBase64 = publicKeyBase64
    }
}

struct DownloadDefaultKeyPairOutputResponseBody: Swift.Equatable {
    let publicKeyBase64: Swift.String?
    let privateKeyBase64: Swift.String?
    let createdAt: ClientRuntime.Date?
}

extension DownloadDefaultKeyPairOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case privateKeyBase64
        case publicKeyBase64
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publicKeyBase64Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKeyBase64)
        publicKeyBase64 = publicKeyBase64Decoded
        let privateKeyBase64Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKeyBase64)
        privateKeyBase64 = privateKeyBase64Decoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension EnableAddOnInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOnRequest
        case resourceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOnRequest = self.addOnRequest {
            try encodeContainer.encode(addOnRequest, forKey: .addOnRequest)
        }
        if let resourceName = self.resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
    }
}

extension EnableAddOnInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EnableAddOnInput: Swift.Equatable {
    /// An array of strings representing the add-on to enable or modify.
    /// This member is required.
    public var addOnRequest: LightsailClientTypes.AddOnRequest?
    /// The name of the source resource for which to enable or modify the add-on.
    /// This member is required.
    public var resourceName: Swift.String?

    public init (
        addOnRequest: LightsailClientTypes.AddOnRequest? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.addOnRequest = addOnRequest
        self.resourceName = resourceName
    }
}

struct EnableAddOnInputBody: Swift.Equatable {
    let resourceName: Swift.String?
    let addOnRequest: LightsailClientTypes.AddOnRequest?
}

extension EnableAddOnInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOnRequest
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let addOnRequestDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AddOnRequest.self, forKey: .addOnRequest)
        addOnRequest = addOnRequestDecoded
    }
}

extension EnableAddOnOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableAddOnOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EnableAddOnOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableAddOnOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: EnableAddOnOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct EnableAddOnOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct EnableAddOnOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension EnableAddOnOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.EndpointRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName
        case containerPort
        case healthCheck
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = self.containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let containerPort = self.containerPort {
            try encodeContainer.encode(containerPort, forKey: .containerPort)
        }
        if let healthCheck = self.healthCheck {
            try encodeContainer.encode(healthCheck, forKey: .healthCheck)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let containerPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .containerPort)
        containerPort = containerPortDecoded
        let healthCheckDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceHealthCheckConfig.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the settings of a public endpoint for an Amazon Lightsail container service.
    public struct EndpointRequest: Swift.Equatable {
        /// The name of the container for the endpoint.
        /// This member is required.
        public var containerName: Swift.String?
        /// The port of the container to which traffic is forwarded to.
        /// This member is required.
        public var containerPort: Swift.Int?
        /// An object that describes the health check configuration of the container.
        public var healthCheck: LightsailClientTypes.ContainerServiceHealthCheckConfig?

        public init (
            containerName: Swift.String? = nil,
            containerPort: Swift.Int? = nil,
            healthCheck: LightsailClientTypes.ContainerServiceHealthCheckConfig? = nil
        )
        {
            self.containerName = containerName
            self.containerPort = containerPort
            self.healthCheck = healthCheck
        }
    }

}

extension ExportSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceSnapshotName = self.sourceSnapshotName {
            try encodeContainer.encode(sourceSnapshotName, forKey: .sourceSnapshotName)
        }
    }
}

extension ExportSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ExportSnapshotInput: Swift.Equatable {
    /// The name of the instance or disk snapshot to be exported to Amazon EC2.
    /// This member is required.
    public var sourceSnapshotName: Swift.String?

    public init (
        sourceSnapshotName: Swift.String? = nil
    )
    {
        self.sourceSnapshotName = sourceSnapshotName
    }
}

struct ExportSnapshotInputBody: Swift.Equatable {
    let sourceSnapshotName: Swift.String?
}

extension ExportSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceSnapshotName)
        sourceSnapshotName = sourceSnapshotNameDecoded
    }
}

extension ExportSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ExportSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExportSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct ExportSnapshotOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct ExportSnapshotOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension ExportSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.ExportSnapshotRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case destinationInfo
        case location
        case name
        case resourceType
        case sourceInfo
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let destinationInfo = self.destinationInfo {
            try encodeContainer.encode(destinationInfo, forKey: .destinationInfo)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sourceInfo = self.sourceInfo {
            try encodeContainer.encode(sourceInfo, forKey: .sourceInfo)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RecordState.self, forKey: .state)
        state = stateDecoded
        let sourceInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ExportSnapshotRecordSourceInfo.self, forKey: .sourceInfo)
        sourceInfo = sourceInfoDecoded
        let destinationInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DestinationInfo.self, forKey: .destinationInfo)
        destinationInfo = destinationInfoDecoded
    }
}

extension LightsailClientTypes {
    /// Describes an export snapshot record.
    public struct ExportSnapshotRecord: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the export snapshot record.
        public var arn: Swift.String?
        /// The date when the export snapshot record was created.
        public var createdAt: ClientRuntime.Date?
        /// A list of objects describing the destination of the export snapshot record.
        public var destinationInfo: LightsailClientTypes.DestinationInfo?
        /// The AWS Region and Availability Zone where the export snapshot record is located.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The export snapshot record name.
        public var name: Swift.String?
        /// The Lightsail resource type (e.g., ExportSnapshotRecord).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// A list of objects describing the source of the export snapshot record.
        public var sourceInfo: LightsailClientTypes.ExportSnapshotRecordSourceInfo?
        /// The state of the export snapshot record.
        public var state: LightsailClientTypes.RecordState?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            destinationInfo: LightsailClientTypes.DestinationInfo? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sourceInfo: LightsailClientTypes.ExportSnapshotRecordSourceInfo? = nil,
            state: LightsailClientTypes.RecordState? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.destinationInfo = destinationInfo
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.sourceInfo = sourceInfo
            self.state = state
        }
    }

}

extension LightsailClientTypes.ExportSnapshotRecordSourceInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case diskSnapshotInfo
        case fromResourceArn
        case fromResourceName
        case instanceSnapshotInfo
        case name
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let diskSnapshotInfo = self.diskSnapshotInfo {
            try encodeContainer.encode(diskSnapshotInfo, forKey: .diskSnapshotInfo)
        }
        if let fromResourceArn = self.fromResourceArn {
            try encodeContainer.encode(fromResourceArn, forKey: .fromResourceArn)
        }
        if let fromResourceName = self.fromResourceName {
            try encodeContainer.encode(fromResourceName, forKey: .fromResourceName)
        }
        if let instanceSnapshotInfo = self.instanceSnapshotInfo {
            try encodeContainer.encode(instanceSnapshotInfo, forKey: .instanceSnapshotInfo)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ExportSnapshotRecordSourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let fromResourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromResourceName)
        fromResourceName = fromResourceNameDecoded
        let fromResourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromResourceArn)
        fromResourceArn = fromResourceArnDecoded
        let instanceSnapshotInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceSnapshotInfo.self, forKey: .instanceSnapshotInfo)
        instanceSnapshotInfo = instanceSnapshotInfoDecoded
        let diskSnapshotInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DiskSnapshotInfo.self, forKey: .diskSnapshotInfo)
        diskSnapshotInfo = diskSnapshotInfoDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the source of an export snapshot record.
    public struct ExportSnapshotRecordSourceInfo: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the source instance or disk snapshot.
        public var arn: Swift.String?
        /// The date when the source instance or disk snapshot was created.
        public var createdAt: ClientRuntime.Date?
        /// A list of objects describing a disk snapshot.
        public var diskSnapshotInfo: LightsailClientTypes.DiskSnapshotInfo?
        /// The Amazon Resource Name (ARN) of the snapshot's source instance or disk.
        public var fromResourceArn: Swift.String?
        /// The name of the snapshot's source instance or disk.
        public var fromResourceName: Swift.String?
        /// A list of objects describing an instance snapshot.
        public var instanceSnapshotInfo: LightsailClientTypes.InstanceSnapshotInfo?
        /// The name of the source instance or disk snapshot.
        public var name: Swift.String?
        /// The Lightsail resource type (e.g., InstanceSnapshot or DiskSnapshot).
        public var resourceType: LightsailClientTypes.ExportSnapshotRecordSourceType?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            diskSnapshotInfo: LightsailClientTypes.DiskSnapshotInfo? = nil,
            fromResourceArn: Swift.String? = nil,
            fromResourceName: Swift.String? = nil,
            instanceSnapshotInfo: LightsailClientTypes.InstanceSnapshotInfo? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ExportSnapshotRecordSourceType? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.diskSnapshotInfo = diskSnapshotInfo
            self.fromResourceArn = fromResourceArn
            self.fromResourceName = fromResourceName
            self.instanceSnapshotInfo = instanceSnapshotInfo
            self.name = name
            self.resourceType = resourceType
        }
    }

}

extension LightsailClientTypes {
    public enum ExportSnapshotRecordSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disksnapshot
        case instancesnapshot
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportSnapshotRecordSourceType] {
            return [
                .disksnapshot,
                .instancesnapshot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disksnapshot: return "DiskSnapshot"
            case .instancesnapshot: return "InstanceSnapshot"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportSnapshotRecordSourceType(rawValue: rawValue) ?? ExportSnapshotRecordSourceType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum ForwardValues: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case allowlist
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ForwardValues] {
            return [
                .all,
                .allowlist,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "all"
            case .allowlist: return "allow-list"
            case .none: return "none"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ForwardValues(rawValue: rawValue) ?? ForwardValues.sdkUnknown(rawValue)
        }
    }
}

extension GetActiveNamesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetActiveNamesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetActiveNamesInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetActiveNames request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetActiveNamesInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetActiveNamesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetActiveNamesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetActiveNamesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetActiveNamesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetActiveNamesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetActiveNamesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activeNames = output.activeNames
            self.nextPageToken = output.nextPageToken
        } else {
            self.activeNames = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetActiveNamesOutputResponse: Swift.Equatable {
    /// The list of active names returned by the get active names request.
    public var activeNames: [Swift.String]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetActiveNames request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        activeNames: [Swift.String]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.activeNames = activeNames
        self.nextPageToken = nextPageToken
    }
}

struct GetActiveNamesOutputResponseBody: Swift.Equatable {
    let activeNames: [Swift.String]?
    let nextPageToken: Swift.String?
}

extension GetActiveNamesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeNames
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .activeNames)
        var activeNamesDecoded0:[Swift.String]? = nil
        if let activeNamesContainer = activeNamesContainer {
            activeNamesDecoded0 = [Swift.String]()
            for string0 in activeNamesContainer {
                if let string0 = string0 {
                    activeNamesDecoded0?.append(string0)
                }
            }
        }
        activeNames = activeNamesDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetAlarmsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case monitoredResourceName
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmName = self.alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
        if let monitoredResourceName = self.monitoredResourceName {
            try encodeContainer.encode(monitoredResourceName, forKey: .monitoredResourceName)
        }
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetAlarmsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetAlarmsInput: Swift.Equatable {
    /// The name of the alarm. Specify an alarm name to return information about a specific alarm.
    public var alarmName: Swift.String?
    /// The name of the Lightsail resource being monitored by the alarm. Specify a monitored resource name to return information about all alarms for a specific resource.
    public var monitoredResourceName: Swift.String?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetAlarms request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        alarmName: Swift.String? = nil,
        monitoredResourceName: Swift.String? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.alarmName = alarmName
        self.monitoredResourceName = monitoredResourceName
        self.pageToken = pageToken
    }
}

struct GetAlarmsInputBody: Swift.Equatable {
    let alarmName: Swift.String?
    let pageToken: Swift.String?
    let monitoredResourceName: Swift.String?
}

extension GetAlarmsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case monitoredResourceName
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
        let monitoredResourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoredResourceName)
        monitoredResourceName = monitoredResourceNameDecoded
    }
}

extension GetAlarmsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAlarmsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAlarmsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAlarmsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetAlarmsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alarms = output.alarms
            self.nextPageToken = output.nextPageToken
        } else {
            self.alarms = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetAlarmsOutputResponse: Swift.Equatable {
    /// An array of objects that describe the alarms.
    public var alarms: [LightsailClientTypes.Alarm]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetAlarms request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        alarms: [LightsailClientTypes.Alarm]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.alarms = alarms
        self.nextPageToken = nextPageToken
    }
}

struct GetAlarmsOutputResponseBody: Swift.Equatable {
    let alarms: [LightsailClientTypes.Alarm]?
    let nextPageToken: Swift.String?
}

extension GetAlarmsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarms
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Alarm?].self, forKey: .alarms)
        var alarmsDecoded0:[LightsailClientTypes.Alarm]? = nil
        if let alarmsContainer = alarmsContainer {
            alarmsDecoded0 = [LightsailClientTypes.Alarm]()
            for structure0 in alarmsContainer {
                if let structure0 = structure0 {
                    alarmsDecoded0?.append(structure0)
                }
            }
        }
        alarms = alarmsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetAutoSnapshotsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceName = self.resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
    }
}

extension GetAutoSnapshotsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetAutoSnapshotsInput: Swift.Equatable {
    /// The name of the source instance or disk from which to get automatic snapshot information.
    /// This member is required.
    public var resourceName: Swift.String?

    public init (
        resourceName: Swift.String? = nil
    )
    {
        self.resourceName = resourceName
    }
}

struct GetAutoSnapshotsInputBody: Swift.Equatable {
    let resourceName: Swift.String?
}

extension GetAutoSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
    }
}

extension GetAutoSnapshotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAutoSnapshotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAutoSnapshotsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAutoSnapshotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetAutoSnapshotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoSnapshots = output.autoSnapshots
            self.resourceName = output.resourceName
            self.resourceType = output.resourceType
        } else {
            self.autoSnapshots = nil
            self.resourceName = nil
            self.resourceType = nil
        }
    }
}

public struct GetAutoSnapshotsOutputResponse: Swift.Equatable {
    /// An array of objects that describe the automatic snapshots that are available for the specified source instance or disk.
    public var autoSnapshots: [LightsailClientTypes.AutoSnapshotDetails]?
    /// The name of the source instance or disk for the automatic snapshots.
    public var resourceName: Swift.String?
    /// The resource type (e.g., Instance or Disk).
    public var resourceType: LightsailClientTypes.ResourceType?

    public init (
        autoSnapshots: [LightsailClientTypes.AutoSnapshotDetails]? = nil,
        resourceName: Swift.String? = nil,
        resourceType: LightsailClientTypes.ResourceType? = nil
    )
    {
        self.autoSnapshots = autoSnapshots
        self.resourceName = resourceName
        self.resourceType = resourceType
    }
}

struct GetAutoSnapshotsOutputResponseBody: Swift.Equatable {
    let resourceName: Swift.String?
    let resourceType: LightsailClientTypes.ResourceType?
    let autoSnapshots: [LightsailClientTypes.AutoSnapshotDetails]?
}

extension GetAutoSnapshotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoSnapshots
        case resourceName
        case resourceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let autoSnapshotsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AutoSnapshotDetails?].self, forKey: .autoSnapshots)
        var autoSnapshotsDecoded0:[LightsailClientTypes.AutoSnapshotDetails]? = nil
        if let autoSnapshotsContainer = autoSnapshotsContainer {
            autoSnapshotsDecoded0 = [LightsailClientTypes.AutoSnapshotDetails]()
            for structure0 in autoSnapshotsContainer {
                if let structure0 = structure0 {
                    autoSnapshotsDecoded0?.append(structure0)
                }
            }
        }
        autoSnapshots = autoSnapshotsDecoded0
    }
}

extension GetBlueprintsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeInactive
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeInactive = self.includeInactive {
            try encodeContainer.encode(includeInactive, forKey: .includeInactive)
        }
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetBlueprintsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBlueprintsInput: Swift.Equatable {
    /// A Boolean value that indicates whether to include inactive (unavailable) blueprints in the response of your request.
    public var includeInactive: Swift.Bool?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetBlueprints request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        includeInactive: Swift.Bool? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.includeInactive = includeInactive
        self.pageToken = pageToken
    }
}

struct GetBlueprintsInputBody: Swift.Equatable {
    let includeInactive: Swift.Bool?
    let pageToken: Swift.String?
}

extension GetBlueprintsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeInactive
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includeInactiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeInactive)
        includeInactive = includeInactiveDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetBlueprintsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBlueprintsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetBlueprintsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBlueprintsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetBlueprintsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blueprints = output.blueprints
            self.nextPageToken = output.nextPageToken
        } else {
            self.blueprints = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetBlueprintsOutputResponse: Swift.Equatable {
    /// An array of key-value pairs that contains information about the available blueprints.
    public var blueprints: [LightsailClientTypes.Blueprint]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetBlueprints request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        blueprints: [LightsailClientTypes.Blueprint]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.blueprints = blueprints
        self.nextPageToken = nextPageToken
    }
}

struct GetBlueprintsOutputResponseBody: Swift.Equatable {
    let blueprints: [LightsailClientTypes.Blueprint]?
    let nextPageToken: Swift.String?
}

extension GetBlueprintsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprints
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Blueprint?].self, forKey: .blueprints)
        var blueprintsDecoded0:[LightsailClientTypes.Blueprint]? = nil
        if let blueprintsContainer = blueprintsContainer {
            blueprintsDecoded0 = [LightsailClientTypes.Blueprint]()
            for structure0 in blueprintsContainer {
                if let structure0 = structure0 {
                    blueprintsDecoded0?.append(structure0)
                }
            }
        }
        blueprints = blueprintsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetBucketAccessKeysInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
    }
}

extension GetBucketAccessKeysInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketAccessKeysInput: Swift.Equatable {
    /// The name of the bucket for which to return access keys.
    /// This member is required.
    public var bucketName: Swift.String?

    public init (
        bucketName: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
    }
}

struct GetBucketAccessKeysInputBody: Swift.Equatable {
    let bucketName: Swift.String?
}

extension GetBucketAccessKeysInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
    }
}

extension GetBucketAccessKeysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBucketAccessKeysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetBucketAccessKeysOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketAccessKeysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetBucketAccessKeysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessKeys = output.accessKeys
        } else {
            self.accessKeys = nil
        }
    }
}

public struct GetBucketAccessKeysOutputResponse: Swift.Equatable {
    /// An object that describes the access keys for the specified bucket.
    public var accessKeys: [LightsailClientTypes.AccessKey]?

    public init (
        accessKeys: [LightsailClientTypes.AccessKey]? = nil
    )
    {
        self.accessKeys = accessKeys
    }
}

struct GetBucketAccessKeysOutputResponseBody: Swift.Equatable {
    let accessKeys: [LightsailClientTypes.AccessKey]?
}

extension GetBucketAccessKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessKeysContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AccessKey?].self, forKey: .accessKeys)
        var accessKeysDecoded0:[LightsailClientTypes.AccessKey]? = nil
        if let accessKeysContainer = accessKeysContainer {
            accessKeysDecoded0 = [LightsailClientTypes.AccessKey]()
            for structure0 in accessKeysContainer {
                if let structure0 = structure0 {
                    accessKeysDecoded0?.append(structure0)
                }
            }
        }
        accessKeys = accessKeysDecoded0
    }
}

extension GetBucketBundlesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeInactive
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeInactive = self.includeInactive {
            try encodeContainer.encode(includeInactive, forKey: .includeInactive)
        }
    }
}

extension GetBucketBundlesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketBundlesInput: Swift.Equatable {
    /// A Boolean value that indicates whether to include inactive (unavailable) bundles in the response of your request.
    public var includeInactive: Swift.Bool?

    public init (
        includeInactive: Swift.Bool? = nil
    )
    {
        self.includeInactive = includeInactive
    }
}

struct GetBucketBundlesInputBody: Swift.Equatable {
    let includeInactive: Swift.Bool?
}

extension GetBucketBundlesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeInactive
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includeInactiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeInactive)
        includeInactive = includeInactiveDecoded
    }
}

extension GetBucketBundlesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBucketBundlesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetBucketBundlesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketBundlesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetBucketBundlesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bundles = output.bundles
        } else {
            self.bundles = nil
        }
    }
}

public struct GetBucketBundlesOutputResponse: Swift.Equatable {
    /// An object that describes bucket bundles.
    public var bundles: [LightsailClientTypes.BucketBundle]?

    public init (
        bundles: [LightsailClientTypes.BucketBundle]? = nil
    )
    {
        self.bundles = bundles
    }
}

struct GetBucketBundlesOutputResponseBody: Swift.Equatable {
    let bundles: [LightsailClientTypes.BucketBundle]?
}

extension GetBucketBundlesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundles
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundlesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.BucketBundle?].self, forKey: .bundles)
        var bundlesDecoded0:[LightsailClientTypes.BucketBundle]? = nil
        if let bundlesContainer = bundlesContainer {
            bundlesDecoded0 = [LightsailClientTypes.BucketBundle]()
            for structure0 in bundlesContainer {
                if let structure0 = structure0 {
                    bundlesDecoded0?.append(structure0)
                }
            }
        }
        bundles = bundlesDecoded0
    }
}

extension GetBucketMetricDataInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
        case endTime
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let period = self.period {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let statistics = statistics {
            var statisticsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statistics)
            for metricstatistic0 in statistics {
                try statisticsContainer.encode(metricstatistic0.rawValue)
            }
        }
        if let unit = self.unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }
}

extension GetBucketMetricDataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketMetricDataInput: Swift.Equatable {
    /// The name of the bucket for which to get metric data.
    /// This member is required.
    public var bucketName: Swift.String?
    /// The timestamp indicating the latest data to be returned.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// The metric for which you want to return information. Valid bucket metric names are listed below, along with the most useful statistics to include in your request, and the published unit value. These bucket metrics are reported once per day.
    ///
    /// * BucketSizeBytes - The amount of data in bytes stored in a bucket. This value is calculated by summing the size of all objects in the bucket (including object versions), including the size of all parts for all incomplete multipart uploads to the bucket. Statistics: The most useful statistic is Maximum. Unit: The published unit is Bytes.
    ///
    /// * NumberOfObjects - The total number of objects stored in a bucket. This value is calculated by counting all objects in the bucket (including object versions) and the total number of parts for all incomplete multipart uploads to the bucket. Statistics: The most useful statistic is Average. Unit: The published unit is Count.
    /// This member is required.
    public var metricName: LightsailClientTypes.BucketMetricName?
    /// The granularity, in seconds, of the returned data points. Bucket storage metrics are reported once per day. Therefore, you should specify a period of 86400 seconds, which is the number of seconds in a day.
    /// This member is required.
    public var period: Swift.Int?
    /// The timestamp indicating the earliest data to be returned.
    /// This member is required.
    public var startTime: ClientRuntime.Date?
    /// The statistic for the metric. The following statistics are available:
    ///
    /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
    ///
    /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
    ///
    /// * Sum - The sum of all values submitted for the matching metric. You can use this statistic to determine the total volume of a metric.
    ///
    /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
    ///
    /// * SampleCount - The count, or number, of data points used for the statistical calculation.
    /// This member is required.
    public var statistics: [LightsailClientTypes.MetricStatistic]?
    /// The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units with each available metric, see the metricName parameter.
    /// This member is required.
    public var unit: LightsailClientTypes.MetricUnit?

    public init (
        bucketName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        metricName: LightsailClientTypes.BucketMetricName? = nil,
        period: Swift.Int? = nil,
        startTime: ClientRuntime.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.bucketName = bucketName
        self.endTime = endTime
        self.metricName = metricName
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

struct GetBucketMetricDataInputBody: Swift.Equatable {
    let bucketName: Swift.String?
    let metricName: LightsailClientTypes.BucketMetricName?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let period: Swift.Int?
    let statistics: [LightsailClientTypes.MetricStatistic]?
    let unit: LightsailClientTypes.MetricUnit?
}

extension GetBucketMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
        case endTime
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BucketMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let statisticsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricStatistic?].self, forKey: .statistics)
        var statisticsDecoded0:[LightsailClientTypes.MetricStatistic]? = nil
        if let statisticsContainer = statisticsContainer {
            statisticsDecoded0 = [LightsailClientTypes.MetricStatistic]()
            for enum0 in statisticsContainer {
                if let enum0 = enum0 {
                    statisticsDecoded0?.append(enum0)
                }
            }
        }
        statistics = statisticsDecoded0
        let unitDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension GetBucketMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBucketMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetBucketMetricDataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetBucketMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricData = output.metricData
            self.metricName = output.metricName
        } else {
            self.metricData = nil
            self.metricName = nil
        }
    }
}

public struct GetBucketMetricDataOutputResponse: Swift.Equatable {
    /// An array of objects that describe the metric data returned.
    public var metricData: [LightsailClientTypes.MetricDatapoint]?
    /// The name of the metric returned.
    public var metricName: LightsailClientTypes.BucketMetricName?

    public init (
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.BucketMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

struct GetBucketMetricDataOutputResponseBody: Swift.Equatable {
    let metricName: LightsailClientTypes.BucketMetricName?
    let metricData: [LightsailClientTypes.MetricDatapoint]?
}

extension GetBucketMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricData
        case metricName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BucketMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricDataContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricDatapoint?].self, forKey: .metricData)
        var metricDataDecoded0:[LightsailClientTypes.MetricDatapoint]? = nil
        if let metricDataContainer = metricDataContainer {
            metricDataDecoded0 = [LightsailClientTypes.MetricDatapoint]()
            for structure0 in metricDataContainer {
                if let structure0 = structure0 {
                    metricDataDecoded0?.append(structure0)
                }
            }
        }
        metricData = metricDataDecoded0
    }
}

extension GetBucketsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
        case includeConnectedResources
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let includeConnectedResources = self.includeConnectedResources {
            try encodeContainer.encode(includeConnectedResources, forKey: .includeConnectedResources)
        }
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetBucketsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBucketsInput: Swift.Equatable {
    /// The name of the bucket for which to return information. When omitted, the response includes all of your buckets in the Amazon Web Services Region where the request is made.
    public var bucketName: Swift.String?
    /// A Boolean value that indicates whether to include Lightsail instances that were given access to the bucket using the [SetResourceAccessForBucket](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html) action.
    public var includeConnectedResources: Swift.Bool?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetBuckets request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        bucketName: Swift.String? = nil,
        includeConnectedResources: Swift.Bool? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.includeConnectedResources = includeConnectedResources
        self.pageToken = pageToken
    }
}

struct GetBucketsInputBody: Swift.Equatable {
    let bucketName: Swift.String?
    let pageToken: Swift.String?
    let includeConnectedResources: Swift.Bool?
}

extension GetBucketsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
        case includeConnectedResources
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
        let includeConnectedResourcesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeConnectedResources)
        includeConnectedResources = includeConnectedResourcesDecoded
    }
}

extension GetBucketsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBucketsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetBucketsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetBucketsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accountLevelBpaSync = output.accountLevelBpaSync
            self.buckets = output.buckets
            self.nextPageToken = output.nextPageToken
        } else {
            self.accountLevelBpaSync = nil
            self.buckets = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetBucketsOutputResponse: Swift.Equatable {
    /// An object that describes the synchronization status of the Amazon S3 account-level block public access feature for your Lightsail buckets. For more information about this feature and how it affects Lightsail buckets, see [Block public access for buckets in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-block-public-access-for-buckets).
    public var accountLevelBpaSync: LightsailClientTypes.AccountLevelBpaSync?
    /// An array of objects that describe buckets.
    public var buckets: [LightsailClientTypes.Bucket]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetBuckets request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        accountLevelBpaSync: LightsailClientTypes.AccountLevelBpaSync? = nil,
        buckets: [LightsailClientTypes.Bucket]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.accountLevelBpaSync = accountLevelBpaSync
        self.buckets = buckets
        self.nextPageToken = nextPageToken
    }
}

struct GetBucketsOutputResponseBody: Swift.Equatable {
    let buckets: [LightsailClientTypes.Bucket]?
    let nextPageToken: Swift.String?
    let accountLevelBpaSync: LightsailClientTypes.AccountLevelBpaSync?
}

extension GetBucketsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountLevelBpaSync
        case buckets
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Bucket?].self, forKey: .buckets)
        var bucketsDecoded0:[LightsailClientTypes.Bucket]? = nil
        if let bucketsContainer = bucketsContainer {
            bucketsDecoded0 = [LightsailClientTypes.Bucket]()
            for structure0 in bucketsContainer {
                if let structure0 = structure0 {
                    bucketsDecoded0?.append(structure0)
                }
            }
        }
        buckets = bucketsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let accountLevelBpaSyncDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AccountLevelBpaSync.self, forKey: .accountLevelBpaSync)
        accountLevelBpaSync = accountLevelBpaSyncDecoded
    }
}

extension GetBundlesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeInactive
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeInactive = self.includeInactive {
            try encodeContainer.encode(includeInactive, forKey: .includeInactive)
        }
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetBundlesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBundlesInput: Swift.Equatable {
    /// A Boolean value that indicates whether to include inactive (unavailable) bundles in the response of your request.
    public var includeInactive: Swift.Bool?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetBundles request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        includeInactive: Swift.Bool? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.includeInactive = includeInactive
        self.pageToken = pageToken
    }
}

struct GetBundlesInputBody: Swift.Equatable {
    let includeInactive: Swift.Bool?
    let pageToken: Swift.String?
}

extension GetBundlesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeInactive
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includeInactiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeInactive)
        includeInactive = includeInactiveDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetBundlesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBundlesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetBundlesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBundlesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetBundlesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bundles = output.bundles
            self.nextPageToken = output.nextPageToken
        } else {
            self.bundles = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetBundlesOutputResponse: Swift.Equatable {
    /// An array of key-value pairs that contains information about the available bundles.
    public var bundles: [LightsailClientTypes.Bundle]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetBundles request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        bundles: [LightsailClientTypes.Bundle]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.bundles = bundles
        self.nextPageToken = nextPageToken
    }
}

struct GetBundlesOutputResponseBody: Swift.Equatable {
    let bundles: [LightsailClientTypes.Bundle]?
    let nextPageToken: Swift.String?
}

extension GetBundlesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundles
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundlesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Bundle?].self, forKey: .bundles)
        var bundlesDecoded0:[LightsailClientTypes.Bundle]? = nil
        if let bundlesContainer = bundlesContainer {
            bundlesDecoded0 = [LightsailClientTypes.Bundle]()
            for structure0 in bundlesContainer {
                if let structure0 = structure0 {
                    bundlesDecoded0?.append(structure0)
                }
            }
        }
        bundles = bundlesDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetCertificatesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case certificateStatuses
        case includeCertificateDetails
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = self.certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let certificateStatuses = certificateStatuses {
            var certificateStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateStatuses)
            for certificatestatus0 in certificateStatuses {
                try certificateStatusesContainer.encode(certificatestatus0.rawValue)
            }
        }
        if let includeCertificateDetails = self.includeCertificateDetails {
            try encodeContainer.encode(includeCertificateDetails, forKey: .includeCertificateDetails)
        }
    }
}

extension GetCertificatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetCertificatesInput: Swift.Equatable {
    /// The name for the certificate for which to return information. When omitted, the response includes all of your certificates in the Amazon Web Services Region where the request is made.
    public var certificateName: Swift.String?
    /// The status of the certificates for which to return information. For example, specify ISSUED to return only certificates with an ISSUED status. When omitted, the response includes all of your certificates in the Amazon Web Services Region where the request is made, regardless of their current status.
    public var certificateStatuses: [LightsailClientTypes.CertificateStatus]?
    /// Indicates whether to include detailed information about the certificates in the response. When omitted, the response includes only the certificate names, Amazon Resource Names (ARNs), domain names, and tags.
    public var includeCertificateDetails: Swift.Bool?

    public init (
        certificateName: Swift.String? = nil,
        certificateStatuses: [LightsailClientTypes.CertificateStatus]? = nil,
        includeCertificateDetails: Swift.Bool? = nil
    )
    {
        self.certificateName = certificateName
        self.certificateStatuses = certificateStatuses
        self.includeCertificateDetails = includeCertificateDetails
    }
}

struct GetCertificatesInputBody: Swift.Equatable {
    let certificateStatuses: [LightsailClientTypes.CertificateStatus]?
    let includeCertificateDetails: Swift.Bool?
    let certificateName: Swift.String?
}

extension GetCertificatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case certificateStatuses
        case includeCertificateDetails
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateStatusesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CertificateStatus?].self, forKey: .certificateStatuses)
        var certificateStatusesDecoded0:[LightsailClientTypes.CertificateStatus]? = nil
        if let certificateStatusesContainer = certificateStatusesContainer {
            certificateStatusesDecoded0 = [LightsailClientTypes.CertificateStatus]()
            for enum0 in certificateStatusesContainer {
                if let enum0 = enum0 {
                    certificateStatusesDecoded0?.append(enum0)
                }
            }
        }
        certificateStatuses = certificateStatusesDecoded0
        let includeCertificateDetailsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeCertificateDetails)
        includeCertificateDetails = includeCertificateDetailsDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
    }
}

extension GetCertificatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCertificatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCertificatesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCertificatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetCertificatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificates = output.certificates
        } else {
            self.certificates = nil
        }
    }
}

public struct GetCertificatesOutputResponse: Swift.Equatable {
    /// An object that describes certificates.
    public var certificates: [LightsailClientTypes.CertificateSummary]?

    public init (
        certificates: [LightsailClientTypes.CertificateSummary]? = nil
    )
    {
        self.certificates = certificates
    }
}

struct GetCertificatesOutputResponseBody: Swift.Equatable {
    let certificates: [LightsailClientTypes.CertificateSummary]?
}

extension GetCertificatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificates
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificatesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CertificateSummary?].self, forKey: .certificates)
        var certificatesDecoded0:[LightsailClientTypes.CertificateSummary]? = nil
        if let certificatesContainer = certificatesContainer {
            certificatesDecoded0 = [LightsailClientTypes.CertificateSummary]()
            for structure0 in certificatesContainer {
                if let structure0 = structure0 {
                    certificatesDecoded0?.append(structure0)
                }
            }
        }
        certificates = certificatesDecoded0
    }
}

extension GetCloudFormationStackRecordsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetCloudFormationStackRecordsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetCloudFormationStackRecordsInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetClouFormationStackRecords request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetCloudFormationStackRecordsInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetCloudFormationStackRecordsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetCloudFormationStackRecordsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCloudFormationStackRecordsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCloudFormationStackRecordsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCloudFormationStackRecordsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetCloudFormationStackRecordsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cloudFormationStackRecords = output.cloudFormationStackRecords
            self.nextPageToken = output.nextPageToken
        } else {
            self.cloudFormationStackRecords = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetCloudFormationStackRecordsOutputResponse: Swift.Equatable {
    /// A list of objects describing the CloudFormation stack records.
    public var cloudFormationStackRecords: [LightsailClientTypes.CloudFormationStackRecord]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetCloudFormationStackRecords request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        cloudFormationStackRecords: [LightsailClientTypes.CloudFormationStackRecord]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.cloudFormationStackRecords = cloudFormationStackRecords
        self.nextPageToken = nextPageToken
    }
}

struct GetCloudFormationStackRecordsOutputResponseBody: Swift.Equatable {
    let cloudFormationStackRecords: [LightsailClientTypes.CloudFormationStackRecord]?
    let nextPageToken: Swift.String?
}

extension GetCloudFormationStackRecordsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudFormationStackRecords
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudFormationStackRecordsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CloudFormationStackRecord?].self, forKey: .cloudFormationStackRecords)
        var cloudFormationStackRecordsDecoded0:[LightsailClientTypes.CloudFormationStackRecord]? = nil
        if let cloudFormationStackRecordsContainer = cloudFormationStackRecordsContainer {
            cloudFormationStackRecordsDecoded0 = [LightsailClientTypes.CloudFormationStackRecord]()
            for structure0 in cloudFormationStackRecordsContainer {
                if let structure0 = structure0 {
                    cloudFormationStackRecordsDecoded0?.append(structure0)
                }
            }
        }
        cloudFormationStackRecords = cloudFormationStackRecordsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetContactMethodsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case protocols
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let protocols = protocols {
            var protocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protocols)
            for contactprotocol0 in protocols {
                try protocolsContainer.encode(contactprotocol0.rawValue)
            }
        }
    }
}

extension GetContactMethodsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetContactMethodsInput: Swift.Equatable {
    /// The protocols used to send notifications, such as Email, or SMS (text messaging). Specify a protocol in your request to return information about a specific contact method protocol.
    public var protocols: [LightsailClientTypes.ContactProtocol]?

    public init (
        protocols: [LightsailClientTypes.ContactProtocol]? = nil
    )
    {
        self.protocols = protocols
    }
}

struct GetContactMethodsInputBody: Swift.Equatable {
    let protocols: [LightsailClientTypes.ContactProtocol]?
}

extension GetContactMethodsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case protocols
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContactProtocol?].self, forKey: .protocols)
        var protocolsDecoded0:[LightsailClientTypes.ContactProtocol]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [LightsailClientTypes.ContactProtocol]()
            for enum0 in protocolsContainer {
                if let enum0 = enum0 {
                    protocolsDecoded0?.append(enum0)
                }
            }
        }
        protocols = protocolsDecoded0
    }
}

extension GetContactMethodsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContactMethodsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetContactMethodsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContactMethodsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetContactMethodsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contactMethods = output.contactMethods
        } else {
            self.contactMethods = nil
        }
    }
}

public struct GetContactMethodsOutputResponse: Swift.Equatable {
    /// An array of objects that describe the contact methods.
    public var contactMethods: [LightsailClientTypes.ContactMethod]?

    public init (
        contactMethods: [LightsailClientTypes.ContactMethod]? = nil
    )
    {
        self.contactMethods = contactMethods
    }
}

struct GetContactMethodsOutputResponseBody: Swift.Equatable {
    let contactMethods: [LightsailClientTypes.ContactMethod]?
}

extension GetContactMethodsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactMethods
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactMethodsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContactMethod?].self, forKey: .contactMethods)
        var contactMethodsDecoded0:[LightsailClientTypes.ContactMethod]? = nil
        if let contactMethodsContainer = contactMethodsContainer {
            contactMethodsDecoded0 = [LightsailClientTypes.ContactMethod]()
            for structure0 in contactMethodsContainer {
                if let structure0 = structure0 {
                    contactMethodsDecoded0?.append(structure0)
                }
            }
        }
        contactMethods = contactMethodsDecoded0
    }
}

extension GetContainerAPIMetadataInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension GetContainerAPIMetadataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetContainerAPIMetadataInput: Swift.Equatable {

    public init () { }
}

struct GetContainerAPIMetadataInputBody: Swift.Equatable {
}

extension GetContainerAPIMetadataInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerAPIMetadataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerAPIMetadataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetContainerAPIMetadataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerAPIMetadataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetContainerAPIMetadataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metadata = output.metadata
        } else {
            self.metadata = nil
        }
    }
}

public struct GetContainerAPIMetadataOutputResponse: Swift.Equatable {
    /// Metadata about Lightsail containers, such as the current version of the Lightsail Control (lightsailctl) plugin.
    public var metadata: [[Swift.String:Swift.String]]?

    public init (
        metadata: [[Swift.String:Swift.String]]? = nil
    )
    {
        self.metadata = metadata
    }
}

struct GetContainerAPIMetadataOutputResponseBody: Swift.Equatable {
    let metadata: [[Swift.String:Swift.String]]?
}

extension GetContainerAPIMetadataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadata
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metadataContainer = try containerValues.decodeIfPresent([[Swift.String: Swift.String?]?].self, forKey: .metadata)
        var metadataDecoded0:[[Swift.String:Swift.String]]? = nil
        if let metadataContainer = metadataContainer {
            metadataDecoded0 = [[Swift.String:Swift.String]]()
            for map0 in metadataContainer {
                var metadataContainerDecoded0: [Swift.String: Swift.String]? = nil
                if let map0 = map0 {
                    metadataContainerDecoded0 = [Swift.String: Swift.String]()
                    for (key1, string1) in map0 {
                        if let string1 = string1 {
                            metadataContainerDecoded0?[key1] = string1
                        }
                    }
                }
                if let metadataContainerDecoded0 = metadataContainerDecoded0 {
                    metadataDecoded0?.append(metadataContainerDecoded0)
                }
            }
        }
        metadata = metadataDecoded0
    }
}

extension GetContainerImagesInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension GetContainerImagesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetContainerImagesInput: Swift.Equatable {
    /// The name of the container service for which to return registered container images.
    /// This member is required.
    public var serviceName: Swift.String?

    public init (
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

struct GetContainerImagesInputBody: Swift.Equatable {
}

extension GetContainerImagesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerImagesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerImagesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetContainerImagesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerImagesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetContainerImagesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containerImages = output.containerImages
        } else {
            self.containerImages = nil
        }
    }
}

public struct GetContainerImagesOutputResponse: Swift.Equatable {
    /// An array of objects that describe container images that are registered to the container service.
    public var containerImages: [LightsailClientTypes.ContainerImage]?

    public init (
        containerImages: [LightsailClientTypes.ContainerImage]? = nil
    )
    {
        self.containerImages = containerImages
    }
}

struct GetContainerImagesOutputResponseBody: Swift.Equatable {
    let containerImages: [LightsailClientTypes.ContainerImage]?
}

extension GetContainerImagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerImages
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerImagesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContainerImage?].self, forKey: .containerImages)
        var containerImagesDecoded0:[LightsailClientTypes.ContainerImage]? = nil
        if let containerImagesContainer = containerImagesContainer {
            containerImagesDecoded0 = [LightsailClientTypes.ContainerImage]()
            for structure0 in containerImagesContainer {
                if let structure0 = structure0 {
                    containerImagesDecoded0?.append(structure0)
                }
            }
        }
        containerImages = containerImagesDecoded0
    }
}

extension GetContainerLogInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension GetContainerLogInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            return items
        }
    }
}

extension GetContainerLogInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetContainerLogInput: Swift.Equatable {
    /// The name of the container that is either running or previously ran on the container service for which to return a log.
    /// This member is required.
    public var containerName: Swift.String?
    /// The end of the time interval for which to get log data. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify 1538427600 as the end time.
    ///
    ///
    /// You can convert a human-friendly time to Unix time format using a converter like [Epoch converter](https://www.epochconverter.com/).
    public var endTime: ClientRuntime.Date?
    /// The pattern to use to filter the returned log events to a specific term. The following are a few examples of filter patterns that you can specify:
    ///
    /// * To return all log events, specify a filter pattern of "".
    ///
    /// * To exclude log events that contain the ERROR term, and return all other log events, specify a filter pattern of "-ERROR".
    ///
    /// * To return log events that contain the ERROR term, specify a filter pattern of "ERROR".
    ///
    /// * To return log events that contain both the ERROR and Exception terms, specify a filter pattern of "ERROR Exception".
    ///
    /// * To return log events that contain the ERROR or the Exception term, specify a filter pattern of "?ERROR ?Exception".
    public var filterPattern: Swift.String?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetContainerLog request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?
    /// The name of the container service for which to get a container log.
    /// This member is required.
    public var serviceName: Swift.String?
    /// The start of the time interval for which to get log data. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify 1538424000 as the start time.
    ///
    ///
    /// You can convert a human-friendly time to Unix time format using a converter like [Epoch converter](https://www.epochconverter.com/).
    public var startTime: ClientRuntime.Date?

    public init (
        containerName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        filterPattern: Swift.String? = nil,
        pageToken: Swift.String? = nil,
        serviceName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.containerName = containerName
        self.endTime = endTime
        self.filterPattern = filterPattern
        self.pageToken = pageToken
        self.serviceName = serviceName
        self.startTime = startTime
    }
}

struct GetContainerLogInputBody: Swift.Equatable {
}

extension GetContainerLogInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerLogOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerLogOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetContainerLogOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerLogOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetContainerLogOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.logEvents = output.logEvents
            self.nextPageToken = output.nextPageToken
        } else {
            self.logEvents = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetContainerLogOutputResponse: Swift.Equatable {
    /// An array of objects that describe the log events of a container.
    public var logEvents: [LightsailClientTypes.ContainerServiceLogEvent]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetContainerLog request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        logEvents: [LightsailClientTypes.ContainerServiceLogEvent]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.logEvents = logEvents
        self.nextPageToken = nextPageToken
    }
}

struct GetContainerLogOutputResponseBody: Swift.Equatable {
    let logEvents: [LightsailClientTypes.ContainerServiceLogEvent]?
    let nextPageToken: Swift.String?
}

extension GetContainerLogOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logEvents
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logEventsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContainerServiceLogEvent?].self, forKey: .logEvents)
        var logEventsDecoded0:[LightsailClientTypes.ContainerServiceLogEvent]? = nil
        if let logEventsContainer = logEventsContainer {
            logEventsDecoded0 = [LightsailClientTypes.ContainerServiceLogEvent]()
            for structure0 in logEventsContainer {
                if let structure0 = structure0 {
                    logEventsDecoded0?.append(structure0)
                }
            }
        }
        logEvents = logEventsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetContainerServiceDeploymentsInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension GetContainerServiceDeploymentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetContainerServiceDeploymentsInput: Swift.Equatable {
    /// The name of the container service for which to return deployments.
    /// This member is required.
    public var serviceName: Swift.String?

    public init (
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

struct GetContainerServiceDeploymentsInputBody: Swift.Equatable {
}

extension GetContainerServiceDeploymentsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerServiceDeploymentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerServiceDeploymentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetContainerServiceDeploymentsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerServiceDeploymentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetContainerServiceDeploymentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deployments = output.deployments
        } else {
            self.deployments = nil
        }
    }
}

public struct GetContainerServiceDeploymentsOutputResponse: Swift.Equatable {
    /// An array of objects that describe deployments for a container service.
    public var deployments: [LightsailClientTypes.ContainerServiceDeployment]?

    public init (
        deployments: [LightsailClientTypes.ContainerServiceDeployment]? = nil
    )
    {
        self.deployments = deployments
    }
}

struct GetContainerServiceDeploymentsOutputResponseBody: Swift.Equatable {
    let deployments: [LightsailClientTypes.ContainerServiceDeployment]?
}

extension GetContainerServiceDeploymentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deployments
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContainerServiceDeployment?].self, forKey: .deployments)
        var deploymentsDecoded0:[LightsailClientTypes.ContainerServiceDeployment]? = nil
        if let deploymentsContainer = deploymentsContainer {
            deploymentsDecoded0 = [LightsailClientTypes.ContainerServiceDeployment]()
            for structure0 in deploymentsContainer {
                if let structure0 = structure0 {
                    deploymentsDecoded0?.append(structure0)
                }
            }
        }
        deployments = deploymentsDecoded0
    }
}

extension GetContainerServiceMetricDataInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension GetContainerServiceMetricDataInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            return items
        }
    }
}

extension GetContainerServiceMetricDataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetContainerServiceMetricDataInput: Swift.Equatable {
    /// The end time of the time period.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// The metric for which you want to return information. Valid container service metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.
    ///
    /// * CPUUtilization - The average percentage of compute units that are currently in use across all nodes of the container service. This metric identifies the processing power required to run containers on each node of the container service. Statistics: The most useful statistics are Maximum and Average. Unit: The published unit is Percent.
    ///
    /// * MemoryUtilization - The average percentage of available memory that is currently in use across all nodes of the container service. This metric identifies the memory required to run containers on each node of the container service. Statistics: The most useful statistics are Maximum and Average. Unit: The published unit is Percent.
    /// This member is required.
    public var metricName: LightsailClientTypes.ContainerServiceMetricName?
    /// The granularity, in seconds, of the returned data points. All container service metric data is available in 5-minute (300 seconds) granularity.
    /// This member is required.
    public var period: Swift.Int?
    /// The name of the container service for which to get metric data.
    /// This member is required.
    public var serviceName: Swift.String?
    /// The start time of the time period.
    /// This member is required.
    public var startTime: ClientRuntime.Date?
    /// The statistic for the metric. The following statistics are available:
    ///
    /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
    ///
    /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
    ///
    /// * Sum - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
    ///
    /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
    ///
    /// * SampleCount - The count, or number, of data points used for the statistical calculation.
    /// This member is required.
    public var statistics: [LightsailClientTypes.MetricStatistic]?

    public init (
        endTime: ClientRuntime.Date? = nil,
        metricName: LightsailClientTypes.ContainerServiceMetricName? = nil,
        period: Swift.Int? = nil,
        serviceName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil
    )
    {
        self.endTime = endTime
        self.metricName = metricName
        self.period = period
        self.serviceName = serviceName
        self.startTime = startTime
        self.statistics = statistics
    }
}

struct GetContainerServiceMetricDataInputBody: Swift.Equatable {
}

extension GetContainerServiceMetricDataInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerServiceMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerServiceMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetContainerServiceMetricDataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerServiceMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetContainerServiceMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricData = output.metricData
            self.metricName = output.metricName
        } else {
            self.metricData = nil
            self.metricName = nil
        }
    }
}

public struct GetContainerServiceMetricDataOutputResponse: Swift.Equatable {
    /// An array of objects that describe the metric data returned.
    public var metricData: [LightsailClientTypes.MetricDatapoint]?
    /// The name of the metric returned.
    public var metricName: LightsailClientTypes.ContainerServiceMetricName?

    public init (
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.ContainerServiceMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

struct GetContainerServiceMetricDataOutputResponseBody: Swift.Equatable {
    let metricName: LightsailClientTypes.ContainerServiceMetricName?
    let metricData: [LightsailClientTypes.MetricDatapoint]?
}

extension GetContainerServiceMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricData
        case metricName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricDataContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricDatapoint?].self, forKey: .metricData)
        var metricDataDecoded0:[LightsailClientTypes.MetricDatapoint]? = nil
        if let metricDataContainer = metricDataContainer {
            metricDataDecoded0 = [LightsailClientTypes.MetricDatapoint]()
            for structure0 in metricDataContainer {
                if let structure0 = structure0 {
                    metricDataDecoded0?.append(structure0)
                }
            }
        }
        metricData = metricDataDecoded0
    }
}

extension GetContainerServicePowersInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension GetContainerServicePowersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetContainerServicePowersInput: Swift.Equatable {

    public init () { }
}

struct GetContainerServicePowersInputBody: Swift.Equatable {
}

extension GetContainerServicePowersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerServicePowersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerServicePowersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetContainerServicePowersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerServicePowersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetContainerServicePowersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.powers = output.powers
        } else {
            self.powers = nil
        }
    }
}

public struct GetContainerServicePowersOutputResponse: Swift.Equatable {
    /// An array of objects that describe the powers that can be specified for a container service.
    public var powers: [LightsailClientTypes.ContainerServicePower]?

    public init (
        powers: [LightsailClientTypes.ContainerServicePower]? = nil
    )
    {
        self.powers = powers
    }
}

struct GetContainerServicePowersOutputResponseBody: Swift.Equatable {
    let powers: [LightsailClientTypes.ContainerServicePower]?
}

extension GetContainerServicePowersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case powers
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let powersContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContainerServicePower?].self, forKey: .powers)
        var powersDecoded0:[LightsailClientTypes.ContainerServicePower]? = nil
        if let powersContainer = powersContainer {
            powersDecoded0 = [LightsailClientTypes.ContainerServicePower]()
            for structure0 in powersContainer {
                if let structure0 = structure0 {
                    powersDecoded0?.append(structure0)
                }
            }
        }
        powers = powersDecoded0
    }
}

extension GetContainerServicesInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension GetContainerServicesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            return items
        }
    }
}

extension GetContainerServicesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetContainerServicesInput: Swift.Equatable {
    /// The name of the container service for which to return information. When omitted, the response includes all of your container services in the Amazon Web Services Region where the request is made.
    public var serviceName: Swift.String?

    public init (
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

struct GetContainerServicesInputBody: Swift.Equatable {
}

extension GetContainerServicesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerServicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerServicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetContainerServicesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerServicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetContainerServicesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containerServices = output.containerServices
        } else {
            self.containerServices = nil
        }
    }
}

public struct GetContainerServicesOutputResponse: Swift.Equatable {
    /// An array of objects that describe one or more container services.
    public var containerServices: [LightsailClientTypes.ContainerService]?

    public init (
        containerServices: [LightsailClientTypes.ContainerService]? = nil
    )
    {
        self.containerServices = containerServices
    }
}

struct GetContainerServicesOutputResponseBody: Swift.Equatable {
    let containerServices: [LightsailClientTypes.ContainerService]?
}

extension GetContainerServicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerServices
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerServicesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContainerService?].self, forKey: .containerServices)
        var containerServicesDecoded0:[LightsailClientTypes.ContainerService]? = nil
        if let containerServicesContainer = containerServicesContainer {
            containerServicesDecoded0 = [LightsailClientTypes.ContainerService]()
            for structure0 in containerServicesContainer {
                if let structure0 = structure0 {
                    containerServicesDecoded0?.append(structure0)
                }
            }
        }
        containerServices = containerServicesDecoded0
    }
}

extension GetDiskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskName = self.diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
    }
}

extension GetDiskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDiskInput: Swift.Equatable {
    /// The name of the disk (e.g., my-disk).
    /// This member is required.
    public var diskName: Swift.String?

    public init (
        diskName: Swift.String? = nil
    )
    {
        self.diskName = diskName
    }
}

struct GetDiskInputBody: Swift.Equatable {
    let diskName: Swift.String?
}

extension GetDiskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
    }
}

extension GetDiskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDiskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDiskOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDiskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDiskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.disk = output.disk
        } else {
            self.disk = nil
        }
    }
}

public struct GetDiskOutputResponse: Swift.Equatable {
    /// An object containing information about the disk.
    public var disk: LightsailClientTypes.Disk?

    public init (
        disk: LightsailClientTypes.Disk? = nil
    )
    {
        self.disk = disk
    }
}

struct GetDiskOutputResponseBody: Swift.Equatable {
    let disk: LightsailClientTypes.Disk?
}

extension GetDiskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disk
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Disk.self, forKey: .disk)
        disk = diskDecoded
    }
}

extension GetDiskSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskSnapshotName = self.diskSnapshotName {
            try encodeContainer.encode(diskSnapshotName, forKey: .diskSnapshotName)
        }
    }
}

extension GetDiskSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDiskSnapshotInput: Swift.Equatable {
    /// The name of the disk snapshot (e.g., my-disk-snapshot).
    /// This member is required.
    public var diskSnapshotName: Swift.String?

    public init (
        diskSnapshotName: Swift.String? = nil
    )
    {
        self.diskSnapshotName = diskSnapshotName
    }
}

struct GetDiskSnapshotInputBody: Swift.Equatable {
    let diskSnapshotName: Swift.String?
}

extension GetDiskSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskSnapshotName)
        diskSnapshotName = diskSnapshotNameDecoded
    }
}

extension GetDiskSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDiskSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDiskSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDiskSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDiskSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.diskSnapshot = output.diskSnapshot
        } else {
            self.diskSnapshot = nil
        }
    }
}

public struct GetDiskSnapshotOutputResponse: Swift.Equatable {
    /// An object containing information about the disk snapshot.
    public var diskSnapshot: LightsailClientTypes.DiskSnapshot?

    public init (
        diskSnapshot: LightsailClientTypes.DiskSnapshot? = nil
    )
    {
        self.diskSnapshot = diskSnapshot
    }
}

struct GetDiskSnapshotOutputResponseBody: Swift.Equatable {
    let diskSnapshot: LightsailClientTypes.DiskSnapshot?
}

extension GetDiskSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskSnapshot
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskSnapshotDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DiskSnapshot.self, forKey: .diskSnapshot)
        diskSnapshot = diskSnapshotDecoded
    }
}

extension GetDiskSnapshotsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetDiskSnapshotsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDiskSnapshotsInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetDiskSnapshots request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetDiskSnapshotsInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetDiskSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetDiskSnapshotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDiskSnapshotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDiskSnapshotsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDiskSnapshotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDiskSnapshotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.diskSnapshots = output.diskSnapshots
            self.nextPageToken = output.nextPageToken
        } else {
            self.diskSnapshots = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetDiskSnapshotsOutputResponse: Swift.Equatable {
    /// An array of objects containing information about all block storage disk snapshots.
    public var diskSnapshots: [LightsailClientTypes.DiskSnapshot]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetDiskSnapshots request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        diskSnapshots: [LightsailClientTypes.DiskSnapshot]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.diskSnapshots = diskSnapshots
        self.nextPageToken = nextPageToken
    }
}

struct GetDiskSnapshotsOutputResponseBody: Swift.Equatable {
    let diskSnapshots: [LightsailClientTypes.DiskSnapshot]?
    let nextPageToken: Swift.String?
}

extension GetDiskSnapshotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskSnapshots
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskSnapshotsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.DiskSnapshot?].self, forKey: .diskSnapshots)
        var diskSnapshotsDecoded0:[LightsailClientTypes.DiskSnapshot]? = nil
        if let diskSnapshotsContainer = diskSnapshotsContainer {
            diskSnapshotsDecoded0 = [LightsailClientTypes.DiskSnapshot]()
            for structure0 in diskSnapshotsContainer {
                if let structure0 = structure0 {
                    diskSnapshotsDecoded0?.append(structure0)
                }
            }
        }
        diskSnapshots = diskSnapshotsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetDisksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetDisksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDisksInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetDisks request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetDisksInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetDisksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetDisksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDisksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDisksOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDisksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDisksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.disks = output.disks
            self.nextPageToken = output.nextPageToken
        } else {
            self.disks = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetDisksOutputResponse: Swift.Equatable {
    /// An array of objects containing information about all block storage disks.
    public var disks: [LightsailClientTypes.Disk]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetDisks request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        disks: [LightsailClientTypes.Disk]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.disks = disks
        self.nextPageToken = nextPageToken
    }
}

struct GetDisksOutputResponseBody: Swift.Equatable {
    let disks: [LightsailClientTypes.Disk]?
    let nextPageToken: Swift.String?
}

extension GetDisksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disks
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let disksContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Disk?].self, forKey: .disks)
        var disksDecoded0:[LightsailClientTypes.Disk]? = nil
        if let disksContainer = disksContainer {
            disksDecoded0 = [LightsailClientTypes.Disk]()
            for structure0 in disksContainer {
                if let structure0 = structure0 {
                    disksDecoded0?.append(structure0)
                }
            }
        }
        disks = disksDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetDistributionBundlesInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension GetDistributionBundlesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDistributionBundlesInput: Swift.Equatable {

    public init () { }
}

struct GetDistributionBundlesInputBody: Swift.Equatable {
}

extension GetDistributionBundlesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDistributionBundlesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDistributionBundlesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDistributionBundlesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDistributionBundlesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDistributionBundlesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bundles = output.bundles
        } else {
            self.bundles = nil
        }
    }
}

public struct GetDistributionBundlesOutputResponse: Swift.Equatable {
    /// An object that describes a distribution bundle.
    public var bundles: [LightsailClientTypes.DistributionBundle]?

    public init (
        bundles: [LightsailClientTypes.DistributionBundle]? = nil
    )
    {
        self.bundles = bundles
    }
}

struct GetDistributionBundlesOutputResponseBody: Swift.Equatable {
    let bundles: [LightsailClientTypes.DistributionBundle]?
}

extension GetDistributionBundlesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundles
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundlesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.DistributionBundle?].self, forKey: .bundles)
        var bundlesDecoded0:[LightsailClientTypes.DistributionBundle]? = nil
        if let bundlesContainer = bundlesContainer {
            bundlesDecoded0 = [LightsailClientTypes.DistributionBundle]()
            for structure0 in bundlesContainer {
                if let structure0 = structure0 {
                    bundlesDecoded0?.append(structure0)
                }
            }
        }
        bundles = bundlesDecoded0
    }
}

extension GetDistributionLatestCacheResetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributionName = self.distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
    }
}

extension GetDistributionLatestCacheResetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDistributionLatestCacheResetInput: Swift.Equatable {
    /// The name of the distribution for which to return the timestamp of the last cache reset. Use the GetDistributions action to get a list of distribution names that you can specify. When omitted, the response includes the latest cache reset timestamp of all your distributions.
    public var distributionName: Swift.String?

    public init (
        distributionName: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
    }
}

struct GetDistributionLatestCacheResetInputBody: Swift.Equatable {
    let distributionName: Swift.String?
}

extension GetDistributionLatestCacheResetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
    }
}

extension GetDistributionLatestCacheResetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDistributionLatestCacheResetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDistributionLatestCacheResetOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDistributionLatestCacheResetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDistributionLatestCacheResetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createTime = output.createTime
            self.status = output.status
        } else {
            self.createTime = nil
            self.status = nil
        }
    }
}

public struct GetDistributionLatestCacheResetOutputResponse: Swift.Equatable {
    /// The timestamp of the last cache reset (e.g., 1479734909.17) in Unix time format.
    public var createTime: ClientRuntime.Date?
    /// The status of the last cache reset.
    public var status: Swift.String?

    public init (
        createTime: ClientRuntime.Date? = nil,
        status: Swift.String? = nil
    )
    {
        self.createTime = createTime
        self.status = status
    }
}

struct GetDistributionLatestCacheResetOutputResponseBody: Swift.Equatable {
    let status: Swift.String?
    let createTime: ClientRuntime.Date?
}

extension GetDistributionLatestCacheResetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
    }
}

extension GetDistributionMetricDataInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
        case endTime
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributionName = self.distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let period = self.period {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let statistics = statistics {
            var statisticsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statistics)
            for metricstatistic0 in statistics {
                try statisticsContainer.encode(metricstatistic0.rawValue)
            }
        }
        if let unit = self.unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }
}

extension GetDistributionMetricDataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDistributionMetricDataInput: Swift.Equatable {
    /// The name of the distribution for which to get metric data. Use the GetDistributions action to get a list of distribution names that you can specify.
    /// This member is required.
    public var distributionName: Swift.String?
    /// The end of the time interval for which to get metric data. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify 1538427600 as the end time.
    ///
    ///
    /// You can convert a human-friendly time to Unix time format using a converter like [Epoch converter](https://www.epochconverter.com/).
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// The metric for which you want to return information. Valid distribution metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.
    ///
    /// * Requests - The total number of viewer requests received by your Lightsail distribution, for all HTTP methods, and for both HTTP and HTTPS requests. Statistics: The most useful statistic is Sum. Unit: The published unit is None.
    ///
    /// * BytesDownloaded - The number of bytes downloaded by viewers for GET, HEAD, and OPTIONS requests. Statistics: The most useful statistic is Sum. Unit: The published unit is None.
    ///
    /// * BytesUploaded  - The number of bytes uploaded to your origin by your Lightsail distribution, using POST and PUT requests. Statistics: The most useful statistic is Sum. Unit: The published unit is None.
    ///
    /// * TotalErrorRate - The percentage of all viewer requests for which the response's HTTP status code was 4xx or 5xx. Statistics: The most useful statistic is Average. Unit: The published unit is Percent.
    ///
    /// * 4xxErrorRate - The percentage of all viewer requests for which the response's HTTP status cod was 4xx. In these cases, the client or client viewer may have made an error. For example, a status code of 404 (Not Found) means that the client requested an object that could not be found. Statistics: The most useful statistic is Average. Unit: The published unit is Percent.
    ///
    /// * 5xxErrorRate - The percentage of all viewer requests for which the response's HTTP status code was 5xx. In these cases, the origin server did not satisfy the requests. For example, a status code of 503 (Service Unavailable) means that the origin server is currently unavailable. Statistics: The most useful statistic is Average. Unit: The published unit is Percent.
    /// This member is required.
    public var metricName: LightsailClientTypes.DistributionMetricName?
    /// The granularity, in seconds, for the metric data points that will be returned.
    /// This member is required.
    public var period: Swift.Int?
    /// The start of the time interval for which to get metric data. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify 1538424000 as the start time.
    ///
    ///
    /// You can convert a human-friendly time to Unix time format using a converter like [Epoch converter](https://www.epochconverter.com/).
    /// This member is required.
    public var startTime: ClientRuntime.Date?
    /// The statistic for the metric. The following statistics are available:
    ///
    /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
    ///
    /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
    ///
    /// * Sum - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
    ///
    /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
    ///
    /// * SampleCount - The count, or number, of data points used for the statistical calculation.
    /// This member is required.
    public var statistics: [LightsailClientTypes.MetricStatistic]?
    /// The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units with each available metric, see the metricName parameter.
    /// This member is required.
    public var unit: LightsailClientTypes.MetricUnit?

    public init (
        distributionName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        metricName: LightsailClientTypes.DistributionMetricName? = nil,
        period: Swift.Int? = nil,
        startTime: ClientRuntime.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.distributionName = distributionName
        self.endTime = endTime
        self.metricName = metricName
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

struct GetDistributionMetricDataInputBody: Swift.Equatable {
    let distributionName: Swift.String?
    let metricName: LightsailClientTypes.DistributionMetricName?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let period: Swift.Int?
    let unit: LightsailClientTypes.MetricUnit?
    let statistics: [LightsailClientTypes.MetricStatistic]?
}

extension GetDistributionMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
        case endTime
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DistributionMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let unitDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricUnit.self, forKey: .unit)
        unit = unitDecoded
        let statisticsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricStatistic?].self, forKey: .statistics)
        var statisticsDecoded0:[LightsailClientTypes.MetricStatistic]? = nil
        if let statisticsContainer = statisticsContainer {
            statisticsDecoded0 = [LightsailClientTypes.MetricStatistic]()
            for enum0 in statisticsContainer {
                if let enum0 = enum0 {
                    statisticsDecoded0?.append(enum0)
                }
            }
        }
        statistics = statisticsDecoded0
    }
}

extension GetDistributionMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDistributionMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDistributionMetricDataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDistributionMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDistributionMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricData = output.metricData
            self.metricName = output.metricName
        } else {
            self.metricData = nil
            self.metricName = nil
        }
    }
}

public struct GetDistributionMetricDataOutputResponse: Swift.Equatable {
    /// An array of objects that describe the metric data returned.
    public var metricData: [LightsailClientTypes.MetricDatapoint]?
    /// The name of the metric returned.
    public var metricName: LightsailClientTypes.DistributionMetricName?

    public init (
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.DistributionMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

struct GetDistributionMetricDataOutputResponseBody: Swift.Equatable {
    let metricName: LightsailClientTypes.DistributionMetricName?
    let metricData: [LightsailClientTypes.MetricDatapoint]?
}

extension GetDistributionMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricData
        case metricName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DistributionMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricDataContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricDatapoint?].self, forKey: .metricData)
        var metricDataDecoded0:[LightsailClientTypes.MetricDatapoint]? = nil
        if let metricDataContainer = metricDataContainer {
            metricDataDecoded0 = [LightsailClientTypes.MetricDatapoint]()
            for structure0 in metricDataContainer {
                if let structure0 = structure0 {
                    metricDataDecoded0?.append(structure0)
                }
            }
        }
        metricData = metricDataDecoded0
    }
}

extension GetDistributionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributionName = self.distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetDistributionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDistributionsInput: Swift.Equatable {
    /// The name of the distribution for which to return information. When omitted, the response includes all of your distributions in the Amazon Web Services Region where the request is made.
    public var distributionName: Swift.String?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetDistributions request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        distributionName: Swift.String? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
        self.pageToken = pageToken
    }
}

struct GetDistributionsInputBody: Swift.Equatable {
    let distributionName: Swift.String?
    let pageToken: Swift.String?
}

extension GetDistributionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetDistributionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDistributionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDistributionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDistributionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDistributionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.distributions = output.distributions
            self.nextPageToken = output.nextPageToken
        } else {
            self.distributions = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetDistributionsOutputResponse: Swift.Equatable {
    /// An array of objects that describe your distributions.
    public var distributions: [LightsailClientTypes.LightsailDistribution]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetDistributions request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        distributions: [LightsailClientTypes.LightsailDistribution]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.distributions = distributions
        self.nextPageToken = nextPageToken
    }
}

struct GetDistributionsOutputResponseBody: Swift.Equatable {
    let distributions: [LightsailClientTypes.LightsailDistribution]?
    let nextPageToken: Swift.String?
}

extension GetDistributionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributions
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LightsailDistribution?].self, forKey: .distributions)
        var distributionsDecoded0:[LightsailClientTypes.LightsailDistribution]? = nil
        if let distributionsContainer = distributionsContainer {
            distributionsDecoded0 = [LightsailClientTypes.LightsailDistribution]()
            for structure0 in distributionsContainer {
                if let structure0 = structure0 {
                    distributionsDecoded0?.append(structure0)
                }
            }
        }
        distributions = distributionsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

extension GetDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDomainInput: Swift.Equatable {
    /// The domain name for which your want to return information about.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct GetDomainInputBody: Swift.Equatable {
    let domainName: Swift.String?
}

extension GetDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
    }
}

extension GetDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDomainOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domain = output.domain
        } else {
            self.domain = nil
        }
    }
}

public struct GetDomainOutputResponse: Swift.Equatable {
    /// An array of key-value pairs containing information about your get domain request.
    public var domain: LightsailClientTypes.Domain?

    public init (
        domain: LightsailClientTypes.Domain? = nil
    )
    {
        self.domain = domain
    }
}

struct GetDomainOutputResponseBody: Swift.Equatable {
    let domain: LightsailClientTypes.Domain?
}

extension GetDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Domain.self, forKey: .domain)
        domain = domainDecoded
    }
}

extension GetDomainsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetDomainsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDomainsInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetDomains request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetDomainsInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetDomainsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetDomainsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDomainsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDomainsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDomainsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDomainsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domains = output.domains
            self.nextPageToken = output.nextPageToken
        } else {
            self.domains = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetDomainsOutputResponse: Swift.Equatable {
    /// An array of key-value pairs containing information about each of the domain entries in the user's account.
    public var domains: [LightsailClientTypes.Domain]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetDomains request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        domains: [LightsailClientTypes.Domain]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.domains = domains
        self.nextPageToken = nextPageToken
    }
}

struct GetDomainsOutputResponseBody: Swift.Equatable {
    let domains: [LightsailClientTypes.Domain]?
    let nextPageToken: Swift.String?
}

extension GetDomainsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domains
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Domain?].self, forKey: .domains)
        var domainsDecoded0:[LightsailClientTypes.Domain]? = nil
        if let domainsContainer = domainsContainer {
            domainsDecoded0 = [LightsailClientTypes.Domain]()
            for structure0 in domainsContainer {
                if let structure0 = structure0 {
                    domainsDecoded0?.append(structure0)
                }
            }
        }
        domains = domainsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetExportSnapshotRecordsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetExportSnapshotRecordsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetExportSnapshotRecordsInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetExportSnapshotRecords request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetExportSnapshotRecordsInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetExportSnapshotRecordsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetExportSnapshotRecordsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetExportSnapshotRecordsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetExportSnapshotRecordsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetExportSnapshotRecordsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetExportSnapshotRecordsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.exportSnapshotRecords = output.exportSnapshotRecords
            self.nextPageToken = output.nextPageToken
        } else {
            self.exportSnapshotRecords = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetExportSnapshotRecordsOutputResponse: Swift.Equatable {
    /// A list of objects describing the export snapshot records.
    public var exportSnapshotRecords: [LightsailClientTypes.ExportSnapshotRecord]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetExportSnapshotRecords request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        exportSnapshotRecords: [LightsailClientTypes.ExportSnapshotRecord]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.exportSnapshotRecords = exportSnapshotRecords
        self.nextPageToken = nextPageToken
    }
}

struct GetExportSnapshotRecordsOutputResponseBody: Swift.Equatable {
    let exportSnapshotRecords: [LightsailClientTypes.ExportSnapshotRecord]?
    let nextPageToken: Swift.String?
}

extension GetExportSnapshotRecordsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportSnapshotRecords
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportSnapshotRecordsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ExportSnapshotRecord?].self, forKey: .exportSnapshotRecords)
        var exportSnapshotRecordsDecoded0:[LightsailClientTypes.ExportSnapshotRecord]? = nil
        if let exportSnapshotRecordsContainer = exportSnapshotRecordsContainer {
            exportSnapshotRecordsDecoded0 = [LightsailClientTypes.ExportSnapshotRecord]()
            for structure0 in exportSnapshotRecordsContainer {
                if let structure0 = structure0 {
                    exportSnapshotRecordsDecoded0?.append(structure0)
                }
            }
        }
        exportSnapshotRecords = exportSnapshotRecordsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetInstanceAccessDetailsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case `protocol` = "protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
    }
}

extension GetInstanceAccessDetailsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetInstanceAccessDetailsInput: Swift.Equatable {
    /// The name of the instance to access.
    /// This member is required.
    public var instanceName: Swift.String?
    /// The protocol to use to connect to your instance. Defaults to ssh.
    public var `protocol`: LightsailClientTypes.InstanceAccessProtocol?

    public init (
        instanceName: Swift.String? = nil,
        `protocol`: LightsailClientTypes.InstanceAccessProtocol? = nil
    )
    {
        self.instanceName = instanceName
        self.`protocol` = `protocol`
    }
}

struct GetInstanceAccessDetailsInputBody: Swift.Equatable {
    let instanceName: Swift.String?
    let `protocol`: LightsailClientTypes.InstanceAccessProtocol?
}

extension GetInstanceAccessDetailsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case `protocol` = "protocol"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceAccessProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension GetInstanceAccessDetailsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceAccessDetailsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetInstanceAccessDetailsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceAccessDetailsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetInstanceAccessDetailsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessDetails = output.accessDetails
        } else {
            self.accessDetails = nil
        }
    }
}

public struct GetInstanceAccessDetailsOutputResponse: Swift.Equatable {
    /// An array of key-value pairs containing information about a get instance access request.
    public var accessDetails: LightsailClientTypes.InstanceAccessDetails?

    public init (
        accessDetails: LightsailClientTypes.InstanceAccessDetails? = nil
    )
    {
        self.accessDetails = accessDetails
    }
}

struct GetInstanceAccessDetailsOutputResponseBody: Swift.Equatable {
    let accessDetails: LightsailClientTypes.InstanceAccessDetails?
}

extension GetInstanceAccessDetailsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessDetails
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessDetailsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceAccessDetails.self, forKey: .accessDetails)
        accessDetails = accessDetailsDecoded
    }
}

extension GetInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

extension GetInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetInstanceInput: Swift.Equatable {
    /// The name of the instance.
    /// This member is required.
    public var instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct GetInstanceInputBody: Swift.Equatable {
    let instanceName: Swift.String?
}

extension GetInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension GetInstanceMetricDataInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case instanceName
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let period = self.period {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let statistics = statistics {
            var statisticsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statistics)
            for metricstatistic0 in statistics {
                try statisticsContainer.encode(metricstatistic0.rawValue)
            }
        }
        if let unit = self.unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }
}

extension GetInstanceMetricDataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetInstanceMetricDataInput: Swift.Equatable {
    /// The end time of the time period.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// The name of the instance for which you want to get metrics data.
    /// This member is required.
    public var instanceName: Swift.String?
    /// The metric for which you want to return information. Valid instance metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.
    ///
    /// * BurstCapacityPercentage - The percentage of CPU performance available for your instance to burst above its baseline. Your instance continuously accrues and consumes burst capacity. Burst capacity stops accruing when your instance's BurstCapacityPercentage reaches 100%. For more information, see [Viewing instance burst capacity in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-burst-capacity). Statistics: The most useful statistics are Maximum and Average. Unit: The published unit is Percent.
    ///
    /// * BurstCapacityTime - The available amount of time for your instance to burst at 100% CPU utilization. Your instance continuously accrues and consumes burst capacity. Burst capacity time stops accruing when your instance's BurstCapacityPercentage metric reaches 100%. Burst capacity time is consumed at the full rate only when your instance operates at 100% CPU utilization. For example, if your instance operates at 50% CPU utilization in the burstable zone for a 5-minute period, then it consumes CPU burst capacity minutes at a 50% rate in that period. Your instance consumed 2 minutes and 30 seconds of CPU burst capacity minutes in the 5-minute period. For more information, see [Viewing instance burst capacity in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-burst-capacity). Statistics: The most useful statistics are Maximum and Average. Unit: The published unit is Seconds.
    ///
    /// * CPUUtilization - The percentage of allocated compute units that are currently in use on the instance. This metric identifies the processing power to run the applications on the instance. Tools in your operating system can show a lower percentage than Lightsail when the instance is not allocated a full processor core. Statistics: The most useful statistics are Maximum and Average. Unit: The published unit is Percent.
    ///
    /// * NetworkIn - The number of bytes received on all network interfaces by the instance. This metric identifies the volume of incoming network traffic to the instance. The number reported is the number of bytes received during the period. Because this metric is reported in 5-minute intervals, divide the reported number by 300 to find Bytes/second. Statistics: The most useful statistic is Sum. Unit: The published unit is Bytes.
    ///
    /// * NetworkOut - The number of bytes sent out on all network interfaces by the instance. This metric identifies the volume of outgoing network traffic from the instance. The number reported is the number of bytes sent during the period. Because this metric is reported in 5-minute intervals, divide the reported number by 300 to find Bytes/second. Statistics: The most useful statistic is Sum. Unit: The published unit is Bytes.
    ///
    /// * StatusCheckFailed - Reports whether the instance passed or failed both the instance status check and the system status check. This metric can be either 0 (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds) granularity. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    ///
    /// * StatusCheckFailed_Instance - Reports whether the instance passed or failed the instance status check. This metric can be either 0 (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds) granularity. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    ///
    /// * StatusCheckFailed_System - Reports whether the instance passed or failed the system status check. This metric can be either 0 (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds) granularity. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    ///
    /// * MetadataNoToken - Reports the number of times that the instance metadata service was successfully accessed without a token. This metric determines if there are any processes accessing instance metadata by using Instance Metadata Service Version 1, which doesn't use a token. If all requests use token-backed sessions, such as Instance Metadata Service Version 2, then the value is 0. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    /// This member is required.
    public var metricName: LightsailClientTypes.InstanceMetricName?
    /// The granularity, in seconds, of the returned data points. The StatusCheckFailed, StatusCheckFailed_Instance, and StatusCheckFailed_System instance metric data is available in 1-minute (60 seconds) granularity. All other instance metric data is available in 5-minute (300 seconds) granularity.
    /// This member is required.
    public var period: Swift.Int?
    /// The start time of the time period.
    /// This member is required.
    public var startTime: ClientRuntime.Date?
    /// The statistic for the metric. The following statistics are available:
    ///
    /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
    ///
    /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
    ///
    /// * Sum - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
    ///
    /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
    ///
    /// * SampleCount - The count, or number, of data points used for the statistical calculation.
    /// This member is required.
    public var statistics: [LightsailClientTypes.MetricStatistic]?
    /// The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units to specify with each available metric, see the metricName parameter.
    /// This member is required.
    public var unit: LightsailClientTypes.MetricUnit?

    public init (
        endTime: ClientRuntime.Date? = nil,
        instanceName: Swift.String? = nil,
        metricName: LightsailClientTypes.InstanceMetricName? = nil,
        period: Swift.Int? = nil,
        startTime: ClientRuntime.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.endTime = endTime
        self.instanceName = instanceName
        self.metricName = metricName
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

struct GetInstanceMetricDataInputBody: Swift.Equatable {
    let instanceName: Swift.String?
    let metricName: LightsailClientTypes.InstanceMetricName?
    let period: Swift.Int?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let unit: LightsailClientTypes.MetricUnit?
    let statistics: [LightsailClientTypes.MetricStatistic]?
}

extension GetInstanceMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case instanceName
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let unitDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricUnit.self, forKey: .unit)
        unit = unitDecoded
        let statisticsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricStatistic?].self, forKey: .statistics)
        var statisticsDecoded0:[LightsailClientTypes.MetricStatistic]? = nil
        if let statisticsContainer = statisticsContainer {
            statisticsDecoded0 = [LightsailClientTypes.MetricStatistic]()
            for enum0 in statisticsContainer {
                if let enum0 = enum0 {
                    statisticsDecoded0?.append(enum0)
                }
            }
        }
        statistics = statisticsDecoded0
    }
}

extension GetInstanceMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetInstanceMetricDataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetInstanceMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricData = output.metricData
            self.metricName = output.metricName
        } else {
            self.metricData = nil
            self.metricName = nil
        }
    }
}

public struct GetInstanceMetricDataOutputResponse: Swift.Equatable {
    /// An array of objects that describe the metric data returned.
    public var metricData: [LightsailClientTypes.MetricDatapoint]?
    /// The name of the metric returned.
    public var metricName: LightsailClientTypes.InstanceMetricName?

    public init (
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.InstanceMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

struct GetInstanceMetricDataOutputResponseBody: Swift.Equatable {
    let metricName: LightsailClientTypes.InstanceMetricName?
    let metricData: [LightsailClientTypes.MetricDatapoint]?
}

extension GetInstanceMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricData
        case metricName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricDataContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricDatapoint?].self, forKey: .metricData)
        var metricDataDecoded0:[LightsailClientTypes.MetricDatapoint]? = nil
        if let metricDataContainer = metricDataContainer {
            metricDataDecoded0 = [LightsailClientTypes.MetricDatapoint]()
            for structure0 in metricDataContainer {
                if let structure0 = structure0 {
                    metricDataDecoded0?.append(structure0)
                }
            }
        }
        metricData = metricDataDecoded0
    }
}

extension GetInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetInstanceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instance = output.instance
        } else {
            self.instance = nil
        }
    }
}

public struct GetInstanceOutputResponse: Swift.Equatable {
    /// An array of key-value pairs containing information about the specified instance.
    public var instance: LightsailClientTypes.Instance?

    public init (
        instance: LightsailClientTypes.Instance? = nil
    )
    {
        self.instance = instance
    }
}

struct GetInstanceOutputResponseBody: Swift.Equatable {
    let instance: LightsailClientTypes.Instance?
}

extension GetInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instance
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Instance.self, forKey: .instance)
        instance = instanceDecoded
    }
}

extension GetInstancePortStatesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

extension GetInstancePortStatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetInstancePortStatesInput: Swift.Equatable {
    /// The name of the instance for which to return firewall port states.
    /// This member is required.
    public var instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct GetInstancePortStatesInputBody: Swift.Equatable {
    let instanceName: Swift.String?
}

extension GetInstancePortStatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension GetInstancePortStatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstancePortStatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetInstancePortStatesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstancePortStatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetInstancePortStatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.portStates = output.portStates
        } else {
            self.portStates = nil
        }
    }
}

public struct GetInstancePortStatesOutputResponse: Swift.Equatable {
    /// An array of objects that describe the firewall port states for the specified instance.
    public var portStates: [LightsailClientTypes.InstancePortState]?

    public init (
        portStates: [LightsailClientTypes.InstancePortState]? = nil
    )
    {
        self.portStates = portStates
    }
}

struct GetInstancePortStatesOutputResponseBody: Swift.Equatable {
    let portStates: [LightsailClientTypes.InstancePortState]?
}

extension GetInstancePortStatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case portStates
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portStatesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.InstancePortState?].self, forKey: .portStates)
        var portStatesDecoded0:[LightsailClientTypes.InstancePortState]? = nil
        if let portStatesContainer = portStatesContainer {
            portStatesDecoded0 = [LightsailClientTypes.InstancePortState]()
            for structure0 in portStatesContainer {
                if let structure0 = structure0 {
                    portStatesDecoded0?.append(structure0)
                }
            }
        }
        portStates = portStatesDecoded0
    }
}

extension GetInstanceSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceSnapshotName = self.instanceSnapshotName {
            try encodeContainer.encode(instanceSnapshotName, forKey: .instanceSnapshotName)
        }
    }
}

extension GetInstanceSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetInstanceSnapshotInput: Swift.Equatable {
    /// The name of the snapshot for which you are requesting information.
    /// This member is required.
    public var instanceSnapshotName: Swift.String?

    public init (
        instanceSnapshotName: Swift.String? = nil
    )
    {
        self.instanceSnapshotName = instanceSnapshotName
    }
}

struct GetInstanceSnapshotInputBody: Swift.Equatable {
    let instanceSnapshotName: Swift.String?
}

extension GetInstanceSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceSnapshotName)
        instanceSnapshotName = instanceSnapshotNameDecoded
    }
}

extension GetInstanceSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetInstanceSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetInstanceSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceSnapshot = output.instanceSnapshot
        } else {
            self.instanceSnapshot = nil
        }
    }
}

public struct GetInstanceSnapshotOutputResponse: Swift.Equatable {
    /// An array of key-value pairs containing information about the results of your get instance snapshot request.
    public var instanceSnapshot: LightsailClientTypes.InstanceSnapshot?

    public init (
        instanceSnapshot: LightsailClientTypes.InstanceSnapshot? = nil
    )
    {
        self.instanceSnapshot = instanceSnapshot
    }
}

struct GetInstanceSnapshotOutputResponseBody: Swift.Equatable {
    let instanceSnapshot: LightsailClientTypes.InstanceSnapshot?
}

extension GetInstanceSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSnapshot
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSnapshotDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceSnapshot.self, forKey: .instanceSnapshot)
        instanceSnapshot = instanceSnapshotDecoded
    }
}

extension GetInstanceSnapshotsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetInstanceSnapshotsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetInstanceSnapshotsInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetInstanceSnapshots request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetInstanceSnapshotsInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetInstanceSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetInstanceSnapshotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceSnapshotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetInstanceSnapshotsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceSnapshotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetInstanceSnapshotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceSnapshots = output.instanceSnapshots
            self.nextPageToken = output.nextPageToken
        } else {
            self.instanceSnapshots = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetInstanceSnapshotsOutputResponse: Swift.Equatable {
    /// An array of key-value pairs containing information about the results of your get instance snapshots request.
    public var instanceSnapshots: [LightsailClientTypes.InstanceSnapshot]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetInstanceSnapshots request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        instanceSnapshots: [LightsailClientTypes.InstanceSnapshot]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.instanceSnapshots = instanceSnapshots
        self.nextPageToken = nextPageToken
    }
}

struct GetInstanceSnapshotsOutputResponseBody: Swift.Equatable {
    let instanceSnapshots: [LightsailClientTypes.InstanceSnapshot]?
    let nextPageToken: Swift.String?
}

extension GetInstanceSnapshotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSnapshots
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSnapshotsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.InstanceSnapshot?].self, forKey: .instanceSnapshots)
        var instanceSnapshotsDecoded0:[LightsailClientTypes.InstanceSnapshot]? = nil
        if let instanceSnapshotsContainer = instanceSnapshotsContainer {
            instanceSnapshotsDecoded0 = [LightsailClientTypes.InstanceSnapshot]()
            for structure0 in instanceSnapshotsContainer {
                if let structure0 = structure0 {
                    instanceSnapshotsDecoded0?.append(structure0)
                }
            }
        }
        instanceSnapshots = instanceSnapshotsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetInstanceStateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

extension GetInstanceStateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetInstanceStateInput: Swift.Equatable {
    /// The name of the instance to get state information about.
    /// This member is required.
    public var instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct GetInstanceStateInputBody: Swift.Equatable {
    let instanceName: Swift.String?
}

extension GetInstanceStateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension GetInstanceStateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceStateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetInstanceStateOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceStateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetInstanceStateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.state = output.state
        } else {
            self.state = nil
        }
    }
}

public struct GetInstanceStateOutputResponse: Swift.Equatable {
    /// The state of the instance.
    public var state: LightsailClientTypes.InstanceState?

    public init (
        state: LightsailClientTypes.InstanceState? = nil
    )
    {
        self.state = state
    }
}

struct GetInstanceStateOutputResponseBody: Swift.Equatable {
    let state: LightsailClientTypes.InstanceState?
}

extension GetInstanceStateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case state
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceState.self, forKey: .state)
        state = stateDecoded
    }
}

extension GetInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetInstancesInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetInstances request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetInstancesInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetInstancesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instances = output.instances
            self.nextPageToken = output.nextPageToken
        } else {
            self.instances = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetInstancesOutputResponse: Swift.Equatable {
    /// An array of key-value pairs containing information about your instances.
    public var instances: [LightsailClientTypes.Instance]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetInstances request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        instances: [LightsailClientTypes.Instance]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.instances = instances
        self.nextPageToken = nextPageToken
    }
}

struct GetInstancesOutputResponseBody: Swift.Equatable {
    let instances: [LightsailClientTypes.Instance]?
    let nextPageToken: Swift.String?
}

extension GetInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instances
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Instance?].self, forKey: .instances)
        var instancesDecoded0:[LightsailClientTypes.Instance]? = nil
        if let instancesContainer = instancesContainer {
            instancesDecoded0 = [LightsailClientTypes.Instance]()
            for structure0 in instancesContainer {
                if let structure0 = structure0 {
                    instancesDecoded0?.append(structure0)
                }
            }
        }
        instances = instancesDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetKeyPairInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyPairName = self.keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
    }
}

extension GetKeyPairInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetKeyPairInput: Swift.Equatable {
    /// The name of the key pair for which you are requesting information.
    /// This member is required.
    public var keyPairName: Swift.String?

    public init (
        keyPairName: Swift.String? = nil
    )
    {
        self.keyPairName = keyPairName
    }
}

struct GetKeyPairInputBody: Swift.Equatable {
    let keyPairName: Swift.String?
}

extension GetKeyPairInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
    }
}

extension GetKeyPairOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetKeyPairOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetKeyPairOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetKeyPairOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetKeyPairOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyPair = output.keyPair
        } else {
            self.keyPair = nil
        }
    }
}

public struct GetKeyPairOutputResponse: Swift.Equatable {
    /// An array of key-value pairs containing information about the key pair.
    public var keyPair: LightsailClientTypes.KeyPair?

    public init (
        keyPair: LightsailClientTypes.KeyPair? = nil
    )
    {
        self.keyPair = keyPair
    }
}

struct GetKeyPairOutputResponseBody: Swift.Equatable {
    let keyPair: LightsailClientTypes.KeyPair?
}

extension GetKeyPairOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPair
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.KeyPair.self, forKey: .keyPair)
        keyPair = keyPairDecoded
    }
}

extension GetKeyPairsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeDefaultKeyPair
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeDefaultKeyPair = self.includeDefaultKeyPair {
            try encodeContainer.encode(includeDefaultKeyPair, forKey: .includeDefaultKeyPair)
        }
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetKeyPairsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetKeyPairsInput: Swift.Equatable {
    /// A Boolean value that indicates whether to include the default key pair in the response of your request.
    public var includeDefaultKeyPair: Swift.Bool?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetKeyPairs request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        includeDefaultKeyPair: Swift.Bool? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.includeDefaultKeyPair = includeDefaultKeyPair
        self.pageToken = pageToken
    }
}

struct GetKeyPairsInputBody: Swift.Equatable {
    let pageToken: Swift.String?
    let includeDefaultKeyPair: Swift.Bool?
}

extension GetKeyPairsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeDefaultKeyPair
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
        let includeDefaultKeyPairDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeDefaultKeyPair)
        includeDefaultKeyPair = includeDefaultKeyPairDecoded
    }
}

extension GetKeyPairsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetKeyPairsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetKeyPairsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetKeyPairsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetKeyPairsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyPairs = output.keyPairs
            self.nextPageToken = output.nextPageToken
        } else {
            self.keyPairs = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetKeyPairsOutputResponse: Swift.Equatable {
    /// An array of key-value pairs containing information about the key pairs.
    public var keyPairs: [LightsailClientTypes.KeyPair]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetKeyPairs request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        keyPairs: [LightsailClientTypes.KeyPair]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.keyPairs = keyPairs
        self.nextPageToken = nextPageToken
    }
}

struct GetKeyPairsOutputResponseBody: Swift.Equatable {
    let keyPairs: [LightsailClientTypes.KeyPair]?
    let nextPageToken: Swift.String?
}

extension GetKeyPairsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairs
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.KeyPair?].self, forKey: .keyPairs)
        var keyPairsDecoded0:[LightsailClientTypes.KeyPair]? = nil
        if let keyPairsContainer = keyPairsContainer {
            keyPairsDecoded0 = [LightsailClientTypes.KeyPair]()
            for structure0 in keyPairsContainer {
                if let structure0 = structure0 {
                    keyPairsDecoded0?.append(structure0)
                }
            }
        }
        keyPairs = keyPairsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetLoadBalancerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loadBalancerName = self.loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

extension GetLoadBalancerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLoadBalancerInput: Swift.Equatable {
    /// The name of the load balancer.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init (
        loadBalancerName: Swift.String? = nil
    )
    {
        self.loadBalancerName = loadBalancerName
    }
}

struct GetLoadBalancerInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
}

extension GetLoadBalancerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
    }
}

extension GetLoadBalancerMetricDataInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case loadBalancerName
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let loadBalancerName = self.loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let period = self.period {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let statistics = statistics {
            var statisticsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statistics)
            for metricstatistic0 in statistics {
                try statisticsContainer.encode(metricstatistic0.rawValue)
            }
        }
        if let unit = self.unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }
}

extension GetLoadBalancerMetricDataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLoadBalancerMetricDataInput: Swift.Equatable {
    /// The end time of the period.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// The name of the load balancer.
    /// This member is required.
    public var loadBalancerName: Swift.String?
    /// The metric for which you want to return information. Valid load balancer metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.
    ///
    /// * ClientTLSNegotiationErrorCount - The number of TLS connections initiated by the client that did not establish a session with the load balancer due to a TLS error generated by the load balancer. Possible causes include a mismatch of ciphers or protocols. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    ///
    /// * HealthyHostCount - The number of target instances that are considered healthy. Statistics: The most useful statistic are Average, Minimum, and Maximum. Unit: The published unit is Count.
    ///
    /// * HTTPCode_Instance_2XX_Count - The number of HTTP 2XX response codes generated by the target instances. This does not include any response codes generated by the load balancer. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * HTTPCode_Instance_3XX_Count - The number of HTTP 3XX response codes generated by the target instances. This does not include any response codes generated by the load balancer. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * HTTPCode_Instance_4XX_Count - The number of HTTP 4XX response codes generated by the target instances. This does not include any response codes generated by the load balancer. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * HTTPCode_Instance_5XX_Count - The number of HTTP 5XX response codes generated by the target instances. This does not include any response codes generated by the load balancer. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * HTTPCode_LB_4XX_Count - The number of HTTP 4XX client error codes that originated from the load balancer. Client errors are generated when requests are malformed or incomplete. These requests were not received by the target instance. This count does not include response codes generated by the target instances. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * HTTPCode_LB_5XX_Count - The number of HTTP 5XX server error codes that originated from the load balancer. This does not include any response codes generated by the target instance. This metric is reported if there are no healthy instances attached to the load balancer, or if the request rate exceeds the capacity of the instances (spillover) or the load balancer. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * InstanceResponseTime - The time elapsed, in seconds, after the request leaves the load balancer until a response from the target instance is received. Statistics: The most useful statistic is Average. Unit: The published unit is Seconds.
    ///
    /// * RejectedConnectionCount - The number of connections that were rejected because the load balancer had reached its maximum number of connections. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    ///
    /// * RequestCount - The number of requests processed over IPv4. This count includes only the requests with a response generated by a target instance of the load balancer. Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Unit: The published unit is Count.
    ///
    /// * UnhealthyHostCount - The number of target instances that are considered unhealthy. Statistics: The most useful statistic are Average, Minimum, and Maximum. Unit: The published unit is Count.
    /// This member is required.
    public var metricName: LightsailClientTypes.LoadBalancerMetricName?
    /// The granularity, in seconds, of the returned data points.
    /// This member is required.
    public var period: Swift.Int?
    /// The start time of the period.
    /// This member is required.
    public var startTime: ClientRuntime.Date?
    /// The statistic for the metric. The following statistics are available:
    ///
    /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
    ///
    /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
    ///
    /// * Sum - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
    ///
    /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
    ///
    /// * SampleCount - The count, or number, of data points used for the statistical calculation.
    /// This member is required.
    public var statistics: [LightsailClientTypes.MetricStatistic]?
    /// The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units with each available metric, see the metricName parameter.
    /// This member is required.
    public var unit: LightsailClientTypes.MetricUnit?

    public init (
        endTime: ClientRuntime.Date? = nil,
        loadBalancerName: Swift.String? = nil,
        metricName: LightsailClientTypes.LoadBalancerMetricName? = nil,
        period: Swift.Int? = nil,
        startTime: ClientRuntime.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.endTime = endTime
        self.loadBalancerName = loadBalancerName
        self.metricName = metricName
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

struct GetLoadBalancerMetricDataInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
    let metricName: LightsailClientTypes.LoadBalancerMetricName?
    let period: Swift.Int?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let unit: LightsailClientTypes.MetricUnit?
    let statistics: [LightsailClientTypes.MetricStatistic]?
}

extension GetLoadBalancerMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case loadBalancerName
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let unitDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricUnit.self, forKey: .unit)
        unit = unitDecoded
        let statisticsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricStatistic?].self, forKey: .statistics)
        var statisticsDecoded0:[LightsailClientTypes.MetricStatistic]? = nil
        if let statisticsContainer = statisticsContainer {
            statisticsDecoded0 = [LightsailClientTypes.MetricStatistic]()
            for enum0 in statisticsContainer {
                if let enum0 = enum0 {
                    statisticsDecoded0?.append(enum0)
                }
            }
        }
        statistics = statisticsDecoded0
    }
}

extension GetLoadBalancerMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLoadBalancerMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLoadBalancerMetricDataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoadBalancerMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLoadBalancerMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricData = output.metricData
            self.metricName = output.metricName
        } else {
            self.metricData = nil
            self.metricName = nil
        }
    }
}

public struct GetLoadBalancerMetricDataOutputResponse: Swift.Equatable {
    /// An array of objects that describe the metric data returned.
    public var metricData: [LightsailClientTypes.MetricDatapoint]?
    /// The name of the metric returned.
    public var metricName: LightsailClientTypes.LoadBalancerMetricName?

    public init (
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.LoadBalancerMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

struct GetLoadBalancerMetricDataOutputResponseBody: Swift.Equatable {
    let metricName: LightsailClientTypes.LoadBalancerMetricName?
    let metricData: [LightsailClientTypes.MetricDatapoint]?
}

extension GetLoadBalancerMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricData
        case metricName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricDataContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricDatapoint?].self, forKey: .metricData)
        var metricDataDecoded0:[LightsailClientTypes.MetricDatapoint]? = nil
        if let metricDataContainer = metricDataContainer {
            metricDataDecoded0 = [LightsailClientTypes.MetricDatapoint]()
            for structure0 in metricDataContainer {
                if let structure0 = structure0 {
                    metricDataDecoded0?.append(structure0)
                }
            }
        }
        metricData = metricDataDecoded0
    }
}

extension GetLoadBalancerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLoadBalancerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLoadBalancerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoadBalancerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLoadBalancerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loadBalancer = output.loadBalancer
        } else {
            self.loadBalancer = nil
        }
    }
}

public struct GetLoadBalancerOutputResponse: Swift.Equatable {
    /// An object containing information about your load balancer.
    public var loadBalancer: LightsailClientTypes.LoadBalancer?

    public init (
        loadBalancer: LightsailClientTypes.LoadBalancer? = nil
    )
    {
        self.loadBalancer = loadBalancer
    }
}

struct GetLoadBalancerOutputResponseBody: Swift.Equatable {
    let loadBalancer: LightsailClientTypes.LoadBalancer?
}

extension GetLoadBalancerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancer
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancer.self, forKey: .loadBalancer)
        loadBalancer = loadBalancerDecoded
    }
}

extension GetLoadBalancerTlsCertificatesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loadBalancerName = self.loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

extension GetLoadBalancerTlsCertificatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLoadBalancerTlsCertificatesInput: Swift.Equatable {
    /// The name of the load balancer you associated with your SSL/TLS certificate.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init (
        loadBalancerName: Swift.String? = nil
    )
    {
        self.loadBalancerName = loadBalancerName
    }
}

struct GetLoadBalancerTlsCertificatesInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
}

extension GetLoadBalancerTlsCertificatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
    }
}

extension GetLoadBalancerTlsCertificatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLoadBalancerTlsCertificatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLoadBalancerTlsCertificatesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoadBalancerTlsCertificatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLoadBalancerTlsCertificatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tlsCertificates = output.tlsCertificates
        } else {
            self.tlsCertificates = nil
        }
    }
}

public struct GetLoadBalancerTlsCertificatesOutputResponse: Swift.Equatable {
    /// An array of LoadBalancerTlsCertificate objects describing your SSL/TLS certificates.
    public var tlsCertificates: [LightsailClientTypes.LoadBalancerTlsCertificate]?

    public init (
        tlsCertificates: [LightsailClientTypes.LoadBalancerTlsCertificate]? = nil
    )
    {
        self.tlsCertificates = tlsCertificates
    }
}

struct GetLoadBalancerTlsCertificatesOutputResponseBody: Swift.Equatable {
    let tlsCertificates: [LightsailClientTypes.LoadBalancerTlsCertificate]?
}

extension GetLoadBalancerTlsCertificatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tlsCertificates
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tlsCertificatesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LoadBalancerTlsCertificate?].self, forKey: .tlsCertificates)
        var tlsCertificatesDecoded0:[LightsailClientTypes.LoadBalancerTlsCertificate]? = nil
        if let tlsCertificatesContainer = tlsCertificatesContainer {
            tlsCertificatesDecoded0 = [LightsailClientTypes.LoadBalancerTlsCertificate]()
            for structure0 in tlsCertificatesContainer {
                if let structure0 = structure0 {
                    tlsCertificatesDecoded0?.append(structure0)
                }
            }
        }
        tlsCertificates = tlsCertificatesDecoded0
    }
}

extension GetLoadBalancerTlsPoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetLoadBalancerTlsPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLoadBalancerTlsPoliciesInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetLoadBalancerTlsPolicies request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetLoadBalancerTlsPoliciesInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetLoadBalancerTlsPoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetLoadBalancerTlsPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLoadBalancerTlsPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLoadBalancerTlsPoliciesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoadBalancerTlsPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLoadBalancerTlsPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.tlsPolicies = output.tlsPolicies
        } else {
            self.nextPageToken = nil
            self.tlsPolicies = nil
        }
    }
}

public struct GetLoadBalancerTlsPoliciesOutputResponse: Swift.Equatable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetLoadBalancerTlsPolicies request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An array of objects that describe the TLS security policies that are available.
    public var tlsPolicies: [LightsailClientTypes.LoadBalancerTlsPolicy]?

    public init (
        nextPageToken: Swift.String? = nil,
        tlsPolicies: [LightsailClientTypes.LoadBalancerTlsPolicy]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.tlsPolicies = tlsPolicies
    }
}

struct GetLoadBalancerTlsPoliciesOutputResponseBody: Swift.Equatable {
    let tlsPolicies: [LightsailClientTypes.LoadBalancerTlsPolicy]?
    let nextPageToken: Swift.String?
}

extension GetLoadBalancerTlsPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case tlsPolicies
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tlsPoliciesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LoadBalancerTlsPolicy?].self, forKey: .tlsPolicies)
        var tlsPoliciesDecoded0:[LightsailClientTypes.LoadBalancerTlsPolicy]? = nil
        if let tlsPoliciesContainer = tlsPoliciesContainer {
            tlsPoliciesDecoded0 = [LightsailClientTypes.LoadBalancerTlsPolicy]()
            for structure0 in tlsPoliciesContainer {
                if let structure0 = structure0 {
                    tlsPoliciesDecoded0?.append(structure0)
                }
            }
        }
        tlsPolicies = tlsPoliciesDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetLoadBalancersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetLoadBalancersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLoadBalancersInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetLoadBalancers request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetLoadBalancersInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetLoadBalancersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetLoadBalancersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLoadBalancersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLoadBalancersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoadBalancersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLoadBalancersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loadBalancers = output.loadBalancers
            self.nextPageToken = output.nextPageToken
        } else {
            self.loadBalancers = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetLoadBalancersOutputResponse: Swift.Equatable {
    /// An array of LoadBalancer objects describing your load balancers.
    public var loadBalancers: [LightsailClientTypes.LoadBalancer]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetLoadBalancers request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        loadBalancers: [LightsailClientTypes.LoadBalancer]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.loadBalancers = loadBalancers
        self.nextPageToken = nextPageToken
    }
}

struct GetLoadBalancersOutputResponseBody: Swift.Equatable {
    let loadBalancers: [LightsailClientTypes.LoadBalancer]?
    let nextPageToken: Swift.String?
}

extension GetLoadBalancersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancers
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancersContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LoadBalancer?].self, forKey: .loadBalancers)
        var loadBalancersDecoded0:[LightsailClientTypes.LoadBalancer]? = nil
        if let loadBalancersContainer = loadBalancersContainer {
            loadBalancersDecoded0 = [LightsailClientTypes.LoadBalancer]()
            for structure0 in loadBalancersContainer {
                if let structure0 = structure0 {
                    loadBalancersDecoded0?.append(structure0)
                }
            }
        }
        loadBalancers = loadBalancersDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetOperationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let operationId = self.operationId {
            try encodeContainer.encode(operationId, forKey: .operationId)
        }
    }
}

extension GetOperationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetOperationInput: Swift.Equatable {
    /// A GUID used to identify the operation.
    /// This member is required.
    public var operationId: Swift.String?

    public init (
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

struct GetOperationInputBody: Swift.Equatable {
    let operationId: Swift.String?
}

extension GetOperationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
    }
}

extension GetOperationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetOperationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetOperationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetOperationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetOperationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct GetOperationOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct GetOperationOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension GetOperationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension GetOperationsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
        case resourceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
        if let resourceName = self.resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
    }
}

extension GetOperationsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetOperationsForResourceInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetOperationsForResource request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?
    /// The name of the resource for which you are requesting information.
    /// This member is required.
    public var resourceName: Swift.String?

    public init (
        pageToken: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
        self.resourceName = resourceName
    }
}

struct GetOperationsForResourceInputBody: Swift.Equatable {
    let resourceName: Swift.String?
    let pageToken: Swift.String?
}

extension GetOperationsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetOperationsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetOperationsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetOperationsForResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetOperationsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetOperationsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageCount = output.nextPageCount
            self.nextPageToken = output.nextPageToken
            self.operations = output.operations
        } else {
            self.nextPageCount = nil
            self.nextPageToken = nil
            self.operations = nil
        }
    }
}

public struct GetOperationsForResourceOutputResponse: Swift.Equatable {
    /// (Deprecated) Returns the number of pages of results that remain. In releases prior to June 12, 2017, this parameter returned null by the API. It is now deprecated, and the API returns the next page token parameter instead.
    @available(*, deprecated)
    public var nextPageCount: Swift.String?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetOperationsForResource request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        nextPageCount: Swift.String? = nil,
        nextPageToken: Swift.String? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.nextPageCount = nextPageCount
        self.nextPageToken = nextPageToken
        self.operations = operations
    }
}

struct GetOperationsForResourceOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
    let nextPageCount: Swift.String?
    let nextPageToken: Swift.String?
}

extension GetOperationsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageCount
        case nextPageToken
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
        let nextPageCountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageCount)
        nextPageCount = nextPageCountDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetOperationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetOperationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetOperationsInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetOperations request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetOperationsInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetOperationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetOperationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetOperationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetOperationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetOperationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetOperationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.operations = output.operations
        } else {
            self.nextPageToken = nil
            self.operations = nil
        }
    }
}

public struct GetOperationsOutputResponse: Swift.Equatable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetOperations request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        nextPageToken: Swift.String? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.operations = operations
    }
}

struct GetOperationsOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
    let nextPageToken: Swift.String?
}

extension GetOperationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetRegionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeAvailabilityZones
        case includeRelationalDatabaseAvailabilityZones
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeAvailabilityZones = self.includeAvailabilityZones {
            try encodeContainer.encode(includeAvailabilityZones, forKey: .includeAvailabilityZones)
        }
        if let includeRelationalDatabaseAvailabilityZones = self.includeRelationalDatabaseAvailabilityZones {
            try encodeContainer.encode(includeRelationalDatabaseAvailabilityZones, forKey: .includeRelationalDatabaseAvailabilityZones)
        }
    }
}

extension GetRegionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRegionsInput: Swift.Equatable {
    /// A Boolean value indicating whether to also include Availability Zones in your get regions request. Availability Zones are indicated with a letter: e.g., us-east-2a.
    public var includeAvailabilityZones: Swift.Bool?
    /// A Boolean value indicating whether to also include Availability Zones for databases in your get regions request. Availability Zones are indicated with a letter (e.g., us-east-2a).
    public var includeRelationalDatabaseAvailabilityZones: Swift.Bool?

    public init (
        includeAvailabilityZones: Swift.Bool? = nil,
        includeRelationalDatabaseAvailabilityZones: Swift.Bool? = nil
    )
    {
        self.includeAvailabilityZones = includeAvailabilityZones
        self.includeRelationalDatabaseAvailabilityZones = includeRelationalDatabaseAvailabilityZones
    }
}

struct GetRegionsInputBody: Swift.Equatable {
    let includeAvailabilityZones: Swift.Bool?
    let includeRelationalDatabaseAvailabilityZones: Swift.Bool?
}

extension GetRegionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeAvailabilityZones
        case includeRelationalDatabaseAvailabilityZones
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includeAvailabilityZonesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeAvailabilityZones)
        includeAvailabilityZones = includeAvailabilityZonesDecoded
        let includeRelationalDatabaseAvailabilityZonesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeRelationalDatabaseAvailabilityZones)
        includeRelationalDatabaseAvailabilityZones = includeRelationalDatabaseAvailabilityZonesDecoded
    }
}

extension GetRegionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRegionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRegionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRegionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRegionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.regions = output.regions
        } else {
            self.regions = nil
        }
    }
}

public struct GetRegionsOutputResponse: Swift.Equatable {
    /// An array of key-value pairs containing information about your get regions request.
    public var regions: [LightsailClientTypes.Region]?

    public init (
        regions: [LightsailClientTypes.Region]? = nil
    )
    {
        self.regions = regions
    }
}

struct GetRegionsOutputResponseBody: Swift.Equatable {
    let regions: [LightsailClientTypes.Region]?
}

extension GetRegionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regions
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Region?].self, forKey: .regions)
        var regionsDecoded0:[LightsailClientTypes.Region]? = nil
        if let regionsContainer = regionsContainer {
            regionsDecoded0 = [LightsailClientTypes.Region]()
            for structure0 in regionsContainer {
                if let structure0 = structure0 {
                    regionsDecoded0?.append(structure0)
                }
            }
        }
        regions = regionsDecoded0
    }
}

extension GetRelationalDatabaseBlueprintsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetRelationalDatabaseBlueprintsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRelationalDatabaseBlueprintsInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseBlueprints request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetRelationalDatabaseBlueprintsInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetRelationalDatabaseBlueprintsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetRelationalDatabaseBlueprintsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseBlueprintsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRelationalDatabaseBlueprintsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseBlueprintsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRelationalDatabaseBlueprintsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blueprints = output.blueprints
            self.nextPageToken = output.nextPageToken
        } else {
            self.blueprints = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetRelationalDatabaseBlueprintsOutputResponse: Swift.Equatable {
    /// An object describing the result of your get relational database blueprints request.
    public var blueprints: [LightsailClientTypes.RelationalDatabaseBlueprint]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseBlueprints request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        blueprints: [LightsailClientTypes.RelationalDatabaseBlueprint]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.blueprints = blueprints
        self.nextPageToken = nextPageToken
    }
}

struct GetRelationalDatabaseBlueprintsOutputResponseBody: Swift.Equatable {
    let blueprints: [LightsailClientTypes.RelationalDatabaseBlueprint]?
    let nextPageToken: Swift.String?
}

extension GetRelationalDatabaseBlueprintsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprints
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabaseBlueprint?].self, forKey: .blueprints)
        var blueprintsDecoded0:[LightsailClientTypes.RelationalDatabaseBlueprint]? = nil
        if let blueprintsContainer = blueprintsContainer {
            blueprintsDecoded0 = [LightsailClientTypes.RelationalDatabaseBlueprint]()
            for structure0 in blueprintsContainer {
                if let structure0 = structure0 {
                    blueprintsDecoded0?.append(structure0)
                }
            }
        }
        blueprints = blueprintsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetRelationalDatabaseBundlesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeInactive
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeInactive = self.includeInactive {
            try encodeContainer.encode(includeInactive, forKey: .includeInactive)
        }
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetRelationalDatabaseBundlesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRelationalDatabaseBundlesInput: Swift.Equatable {
    /// A Boolean value that indicates whether to include inactive (unavailable) bundles in the response of your request.
    public var includeInactive: Swift.Bool?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseBundles request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        includeInactive: Swift.Bool? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.includeInactive = includeInactive
        self.pageToken = pageToken
    }
}

struct GetRelationalDatabaseBundlesInputBody: Swift.Equatable {
    let pageToken: Swift.String?
    let includeInactive: Swift.Bool?
}

extension GetRelationalDatabaseBundlesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeInactive
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
        let includeInactiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeInactive)
        includeInactive = includeInactiveDecoded
    }
}

extension GetRelationalDatabaseBundlesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseBundlesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRelationalDatabaseBundlesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseBundlesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRelationalDatabaseBundlesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bundles = output.bundles
            self.nextPageToken = output.nextPageToken
        } else {
            self.bundles = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetRelationalDatabaseBundlesOutputResponse: Swift.Equatable {
    /// An object describing the result of your get relational database bundles request.
    public var bundles: [LightsailClientTypes.RelationalDatabaseBundle]?
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseBundles request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?

    public init (
        bundles: [LightsailClientTypes.RelationalDatabaseBundle]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.bundles = bundles
        self.nextPageToken = nextPageToken
    }
}

struct GetRelationalDatabaseBundlesOutputResponseBody: Swift.Equatable {
    let bundles: [LightsailClientTypes.RelationalDatabaseBundle]?
    let nextPageToken: Swift.String?
}

extension GetRelationalDatabaseBundlesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundles
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundlesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabaseBundle?].self, forKey: .bundles)
        var bundlesDecoded0:[LightsailClientTypes.RelationalDatabaseBundle]? = nil
        if let bundlesContainer = bundlesContainer {
            bundlesDecoded0 = [LightsailClientTypes.RelationalDatabaseBundle]()
            for structure0 in bundlesContainer {
                if let structure0 = structure0 {
                    bundlesDecoded0?.append(structure0)
                }
            }
        }
        bundles = bundlesDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetRelationalDatabaseEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInMinutes
        case pageToken
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationInMinutes = self.durationInMinutes {
            try encodeContainer.encode(durationInMinutes, forKey: .durationInMinutes)
        }
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

extension GetRelationalDatabaseEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRelationalDatabaseEventsInput: Swift.Equatable {
    /// The number of minutes in the past from which to retrieve events. For example, to get all events from the past 2 hours, enter 120. Default: 60 The minimum is 1 and the maximum is 14 days (20160 minutes).
    public var durationInMinutes: Swift.Int?
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseEvents request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?
    /// The name of the database from which to get events.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init (
        durationInMinutes: Swift.Int? = nil,
        pageToken: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.durationInMinutes = durationInMinutes
        self.pageToken = pageToken
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct GetRelationalDatabaseEventsInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let durationInMinutes: Swift.Int?
    let pageToken: Swift.String?
}

extension GetRelationalDatabaseEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInMinutes
        case pageToken
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let durationInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInMinutes)
        durationInMinutes = durationInMinutesDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetRelationalDatabaseEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRelationalDatabaseEventsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRelationalDatabaseEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.relationalDatabaseEvents = output.relationalDatabaseEvents
        } else {
            self.nextPageToken = nil
            self.relationalDatabaseEvents = nil
        }
    }
}

public struct GetRelationalDatabaseEventsOutputResponse: Swift.Equatable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseEvents request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An object describing the result of your get relational database events request.
    public var relationalDatabaseEvents: [LightsailClientTypes.RelationalDatabaseEvent]?

    public init (
        nextPageToken: Swift.String? = nil,
        relationalDatabaseEvents: [LightsailClientTypes.RelationalDatabaseEvent]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.relationalDatabaseEvents = relationalDatabaseEvents
    }
}

struct GetRelationalDatabaseEventsOutputResponseBody: Swift.Equatable {
    let relationalDatabaseEvents: [LightsailClientTypes.RelationalDatabaseEvent]?
    let nextPageToken: Swift.String?
}

extension GetRelationalDatabaseEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case relationalDatabaseEvents
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseEventsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabaseEvent?].self, forKey: .relationalDatabaseEvents)
        var relationalDatabaseEventsDecoded0:[LightsailClientTypes.RelationalDatabaseEvent]? = nil
        if let relationalDatabaseEventsContainer = relationalDatabaseEventsContainer {
            relationalDatabaseEventsDecoded0 = [LightsailClientTypes.RelationalDatabaseEvent]()
            for structure0 in relationalDatabaseEventsContainer {
                if let structure0 = structure0 {
                    relationalDatabaseEventsDecoded0?.append(structure0)
                }
            }
        }
        relationalDatabaseEvents = relationalDatabaseEventsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetRelationalDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

extension GetRelationalDatabaseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRelationalDatabaseInput: Swift.Equatable {
    /// The name of the database that you are looking up.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init (
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct GetRelationalDatabaseInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
}

extension GetRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
    }
}

extension GetRelationalDatabaseLogEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case logStreamName
        case pageToken
        case relationalDatabaseName
        case startFromHead
        case startTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let startFromHead = self.startFromHead {
            try encodeContainer.encode(startFromHead, forKey: .startFromHead)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
    }
}

extension GetRelationalDatabaseLogEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRelationalDatabaseLogEventsInput: Swift.Equatable {
    /// The end of the time interval from which to get log events. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the end time.
    public var endTime: ClientRuntime.Date?
    /// The name of the log stream. Use the get relational database log streams operation to get a list of available log streams.
    /// This member is required.
    public var logStreamName: Swift.String?
    /// The token to advance to the next or previous page of results from your request. To get a page token, perform an initial GetRelationalDatabaseLogEvents request. If your results are paginated, the response will return a next forward token and/or next backward token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?
    /// The name of your database for which to get log events.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// Parameter to specify if the log should start from head or tail. If true is specified, the log event starts from the head of the log. If false is specified, the log event starts from the tail of the log. For PostgreSQL, the default value of false is the only option available.
    public var startFromHead: Swift.Bool?
    /// The start of the time interval from which to get log events. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the start time.
    public var startTime: ClientRuntime.Date?

    public init (
        endTime: ClientRuntime.Date? = nil,
        logStreamName: Swift.String? = nil,
        pageToken: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil,
        startFromHead: Swift.Bool? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.endTime = endTime
        self.logStreamName = logStreamName
        self.pageToken = pageToken
        self.relationalDatabaseName = relationalDatabaseName
        self.startFromHead = startFromHead
        self.startTime = startTime
    }
}

struct GetRelationalDatabaseLogEventsInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let logStreamName: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let startFromHead: Swift.Bool?
    let pageToken: Swift.String?
}

extension GetRelationalDatabaseLogEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case logStreamName
        case pageToken
        case relationalDatabaseName
        case startFromHead
        case startTime
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let startFromHeadDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .startFromHead)
        startFromHead = startFromHeadDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetRelationalDatabaseLogEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseLogEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRelationalDatabaseLogEventsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseLogEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRelationalDatabaseLogEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextBackwardToken = output.nextBackwardToken
            self.nextForwardToken = output.nextForwardToken
            self.resourceLogEvents = output.resourceLogEvents
        } else {
            self.nextBackwardToken = nil
            self.nextForwardToken = nil
            self.resourceLogEvents = nil
        }
    }
}

public struct GetRelationalDatabaseLogEventsOutputResponse: Swift.Equatable {
    /// A token used for advancing to the previous page of results from your get relational database log events request.
    public var nextBackwardToken: Swift.String?
    /// A token used for advancing to the next page of results from your get relational database log events request.
    public var nextForwardToken: Swift.String?
    /// An object describing the result of your get relational database log events request.
    public var resourceLogEvents: [LightsailClientTypes.LogEvent]?

    public init (
        nextBackwardToken: Swift.String? = nil,
        nextForwardToken: Swift.String? = nil,
        resourceLogEvents: [LightsailClientTypes.LogEvent]? = nil
    )
    {
        self.nextBackwardToken = nextBackwardToken
        self.nextForwardToken = nextForwardToken
        self.resourceLogEvents = resourceLogEvents
    }
}

struct GetRelationalDatabaseLogEventsOutputResponseBody: Swift.Equatable {
    let resourceLogEvents: [LightsailClientTypes.LogEvent]?
    let nextBackwardToken: Swift.String?
    let nextForwardToken: Swift.String?
}

extension GetRelationalDatabaseLogEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextBackwardToken
        case nextForwardToken
        case resourceLogEvents
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceLogEventsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LogEvent?].self, forKey: .resourceLogEvents)
        var resourceLogEventsDecoded0:[LightsailClientTypes.LogEvent]? = nil
        if let resourceLogEventsContainer = resourceLogEventsContainer {
            resourceLogEventsDecoded0 = [LightsailClientTypes.LogEvent]()
            for structure0 in resourceLogEventsContainer {
                if let structure0 = structure0 {
                    resourceLogEventsDecoded0?.append(structure0)
                }
            }
        }
        resourceLogEvents = resourceLogEventsDecoded0
        let nextBackwardTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextBackwardToken)
        nextBackwardToken = nextBackwardTokenDecoded
        let nextForwardTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextForwardToken)
        nextForwardToken = nextForwardTokenDecoded
    }
}

extension GetRelationalDatabaseLogStreamsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

extension GetRelationalDatabaseLogStreamsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRelationalDatabaseLogStreamsInput: Swift.Equatable {
    /// The name of your database for which to get log streams.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init (
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct GetRelationalDatabaseLogStreamsInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
}

extension GetRelationalDatabaseLogStreamsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
    }
}

extension GetRelationalDatabaseLogStreamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseLogStreamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRelationalDatabaseLogStreamsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseLogStreamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRelationalDatabaseLogStreamsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.logStreams = output.logStreams
        } else {
            self.logStreams = nil
        }
    }
}

public struct GetRelationalDatabaseLogStreamsOutputResponse: Swift.Equatable {
    /// An object describing the result of your get relational database log streams request.
    public var logStreams: [Swift.String]?

    public init (
        logStreams: [Swift.String]? = nil
    )
    {
        self.logStreams = logStreams
    }
}

struct GetRelationalDatabaseLogStreamsOutputResponseBody: Swift.Equatable {
    let logStreams: [Swift.String]?
}

extension GetRelationalDatabaseLogStreamsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logStreams
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logStreams)
        var logStreamsDecoded0:[Swift.String]? = nil
        if let logStreamsContainer = logStreamsContainer {
            logStreamsDecoded0 = [Swift.String]()
            for string0 in logStreamsContainer {
                if let string0 = string0 {
                    logStreamsDecoded0?.append(string0)
                }
            }
        }
        logStreams = logStreamsDecoded0
    }
}

extension GetRelationalDatabaseMasterUserPasswordInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case passwordVersion
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let passwordVersion = self.passwordVersion {
            try encodeContainer.encode(passwordVersion.rawValue, forKey: .passwordVersion)
        }
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

extension GetRelationalDatabaseMasterUserPasswordInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRelationalDatabaseMasterUserPasswordInput: Swift.Equatable {
    /// The password version to return. Specifying CURRENT or PREVIOUS returns the current or previous passwords respectively. Specifying PENDING returns the newest version of the password that will rotate to CURRENT. After the PENDING password rotates to CURRENT, the PENDING password is no longer available. Default: CURRENT
    public var passwordVersion: LightsailClientTypes.RelationalDatabasePasswordVersion?
    /// The name of your database for which to get the master user password.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init (
        passwordVersion: LightsailClientTypes.RelationalDatabasePasswordVersion? = nil,
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.passwordVersion = passwordVersion
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct GetRelationalDatabaseMasterUserPasswordInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let passwordVersion: LightsailClientTypes.RelationalDatabasePasswordVersion?
}

extension GetRelationalDatabaseMasterUserPasswordInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case passwordVersion
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let passwordVersionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabasePasswordVersion.self, forKey: .passwordVersion)
        passwordVersion = passwordVersionDecoded
    }
}

extension GetRelationalDatabaseMasterUserPasswordOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseMasterUserPasswordOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRelationalDatabaseMasterUserPasswordOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseMasterUserPasswordOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseMasterUserPasswordOutputResponse(createdAt: \(Swift.String(describing: createdAt)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension GetRelationalDatabaseMasterUserPasswordOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRelationalDatabaseMasterUserPasswordOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.masterUserPassword = output.masterUserPassword
        } else {
            self.createdAt = nil
            self.masterUserPassword = nil
        }
    }
}

public struct GetRelationalDatabaseMasterUserPasswordOutputResponse: Swift.Equatable {
    /// The timestamp when the specified version of the master user password was created.
    public var createdAt: ClientRuntime.Date?
    /// The master user password for the password version specified.
    public var masterUserPassword: Swift.String?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        masterUserPassword: Swift.String? = nil
    )
    {
        self.createdAt = createdAt
        self.masterUserPassword = masterUserPassword
    }
}

struct GetRelationalDatabaseMasterUserPasswordOutputResponseBody: Swift.Equatable {
    let masterUserPassword: Swift.String?
    let createdAt: ClientRuntime.Date?
}

extension GetRelationalDatabaseMasterUserPasswordOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case masterUserPassword
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension GetRelationalDatabaseMetricDataInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case metricName
        case period
        case relationalDatabaseName
        case startTime
        case statistics
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let period = self.period {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let statistics = statistics {
            var statisticsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statistics)
            for metricstatistic0 in statistics {
                try statisticsContainer.encode(metricstatistic0.rawValue)
            }
        }
        if let unit = self.unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }
}

extension GetRelationalDatabaseMetricDataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRelationalDatabaseMetricDataInput: Swift.Equatable {
    /// The end of the time interval from which to get metric data. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the end time.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// The metric for which you want to return information. Valid relational database metric names are listed below, along with the most useful statistics to include in your request, and the published unit value. All relational database metric data is available in 1-minute (60 seconds) granularity.
    ///
    /// * CPUUtilization - The percentage of CPU utilization currently in use on the database. Statistics: The most useful statistics are Maximum and Average. Unit: The published unit is Percent.
    ///
    /// * DatabaseConnections - The number of database connections in use. Statistics: The most useful statistics are Maximum and Sum. Unit: The published unit is Count.
    ///
    /// * DiskQueueDepth - The number of outstanding IOs (read/write requests) that are waiting to access the disk. Statistics: The most useful statistic is Sum. Unit: The published unit is Count.
    ///
    /// * FreeStorageSpace - The amount of available storage space. Statistics: The most useful statistic is Sum. Unit: The published unit is Bytes.
    ///
    /// * NetworkReceiveThroughput - The incoming (Receive) network traffic on the database, including both customer database traffic and AWS traffic used for monitoring and replication. Statistics: The most useful statistic is Average. Unit: The published unit is Bytes/Second.
    ///
    /// * NetworkTransmitThroughput - The outgoing (Transmit) network traffic on the database, including both customer database traffic and AWS traffic used for monitoring and replication. Statistics: The most useful statistic is Average. Unit: The published unit is Bytes/Second.
    /// This member is required.
    public var metricName: LightsailClientTypes.RelationalDatabaseMetricName?
    /// The granularity, in seconds, of the returned data points. All relational database metric data is available in 1-minute (60 seconds) granularity.
    /// This member is required.
    public var period: Swift.Int?
    /// The name of your database from which to get metric data.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// The start of the time interval from which to get metric data. Constraints:
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Specified in the Unix time format. For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the start time.
    /// This member is required.
    public var startTime: ClientRuntime.Date?
    /// The statistic for the metric. The following statistics are available:
    ///
    /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
    ///
    /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
    ///
    /// * Sum - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
    ///
    /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
    ///
    /// * SampleCount - The count, or number, of data points used for the statistical calculation.
    /// This member is required.
    public var statistics: [LightsailClientTypes.MetricStatistic]?
    /// The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units with each available metric, see the metricName parameter.
    /// This member is required.
    public var unit: LightsailClientTypes.MetricUnit?

    public init (
        endTime: ClientRuntime.Date? = nil,
        metricName: LightsailClientTypes.RelationalDatabaseMetricName? = nil,
        period: Swift.Int? = nil,
        relationalDatabaseName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.endTime = endTime
        self.metricName = metricName
        self.period = period
        self.relationalDatabaseName = relationalDatabaseName
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

struct GetRelationalDatabaseMetricDataInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let metricName: LightsailClientTypes.RelationalDatabaseMetricName?
    let period: Swift.Int?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let unit: LightsailClientTypes.MetricUnit?
    let statistics: [LightsailClientTypes.MetricStatistic]?
}

extension GetRelationalDatabaseMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case metricName
        case period
        case relationalDatabaseName
        case startTime
        case statistics
        case unit
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabaseMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let unitDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricUnit.self, forKey: .unit)
        unit = unitDecoded
        let statisticsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricStatistic?].self, forKey: .statistics)
        var statisticsDecoded0:[LightsailClientTypes.MetricStatistic]? = nil
        if let statisticsContainer = statisticsContainer {
            statisticsDecoded0 = [LightsailClientTypes.MetricStatistic]()
            for enum0 in statisticsContainer {
                if let enum0 = enum0 {
                    statisticsDecoded0?.append(enum0)
                }
            }
        }
        statistics = statisticsDecoded0
    }
}

extension GetRelationalDatabaseMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRelationalDatabaseMetricDataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRelationalDatabaseMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricData = output.metricData
            self.metricName = output.metricName
        } else {
            self.metricData = nil
            self.metricName = nil
        }
    }
}

public struct GetRelationalDatabaseMetricDataOutputResponse: Swift.Equatable {
    /// An array of objects that describe the metric data returned.
    public var metricData: [LightsailClientTypes.MetricDatapoint]?
    /// The name of the metric returned.
    public var metricName: LightsailClientTypes.RelationalDatabaseMetricName?

    public init (
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.RelationalDatabaseMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

struct GetRelationalDatabaseMetricDataOutputResponseBody: Swift.Equatable {
    let metricName: LightsailClientTypes.RelationalDatabaseMetricName?
    let metricData: [LightsailClientTypes.MetricDatapoint]?
}

extension GetRelationalDatabaseMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricData
        case metricName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabaseMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricDataContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricDatapoint?].self, forKey: .metricData)
        var metricDataDecoded0:[LightsailClientTypes.MetricDatapoint]? = nil
        if let metricDataContainer = metricDataContainer {
            metricDataDecoded0 = [LightsailClientTypes.MetricDatapoint]()
            for structure0 in metricDataContainer {
                if let structure0 = structure0 {
                    metricDataDecoded0?.append(structure0)
                }
            }
        }
        metricData = metricDataDecoded0
    }
}

extension GetRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.relationalDatabase = output.relationalDatabase
        } else {
            self.relationalDatabase = nil
        }
    }
}

public struct GetRelationalDatabaseOutputResponse: Swift.Equatable {
    /// An object describing the specified database.
    public var relationalDatabase: LightsailClientTypes.RelationalDatabase?

    public init (
        relationalDatabase: LightsailClientTypes.RelationalDatabase? = nil
    )
    {
        self.relationalDatabase = relationalDatabase
    }
}

struct GetRelationalDatabaseOutputResponseBody: Swift.Equatable {
    let relationalDatabase: LightsailClientTypes.RelationalDatabase?
}

extension GetRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabase
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabase.self, forKey: .relationalDatabase)
        relationalDatabase = relationalDatabaseDecoded
    }
}

extension GetRelationalDatabaseParametersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

extension GetRelationalDatabaseParametersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRelationalDatabaseParametersInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseParameters request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?
    /// The name of your database for which to get parameters.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init (
        pageToken: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct GetRelationalDatabaseParametersInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let pageToken: Swift.String?
}

extension GetRelationalDatabaseParametersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetRelationalDatabaseParametersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseParametersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRelationalDatabaseParametersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseParametersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRelationalDatabaseParametersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.parameters = output.parameters
        } else {
            self.nextPageToken = nil
            self.parameters = nil
        }
    }
}

public struct GetRelationalDatabaseParametersOutputResponse: Swift.Equatable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseParameters request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An object describing the result of your get relational database parameters request.
    public var parameters: [LightsailClientTypes.RelationalDatabaseParameter]?

    public init (
        nextPageToken: Swift.String? = nil,
        parameters: [LightsailClientTypes.RelationalDatabaseParameter]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.parameters = parameters
    }
}

struct GetRelationalDatabaseParametersOutputResponseBody: Swift.Equatable {
    let parameters: [LightsailClientTypes.RelationalDatabaseParameter]?
    let nextPageToken: Swift.String?
}

extension GetRelationalDatabaseParametersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case parameters
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parametersContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabaseParameter?].self, forKey: .parameters)
        var parametersDecoded0:[LightsailClientTypes.RelationalDatabaseParameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [LightsailClientTypes.RelationalDatabaseParameter]()
            for structure0 in parametersContainer {
                if let structure0 = structure0 {
                    parametersDecoded0?.append(structure0)
                }
            }
        }
        parameters = parametersDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetRelationalDatabaseSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseSnapshotName = self.relationalDatabaseSnapshotName {
            try encodeContainer.encode(relationalDatabaseSnapshotName, forKey: .relationalDatabaseSnapshotName)
        }
    }
}

extension GetRelationalDatabaseSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRelationalDatabaseSnapshotInput: Swift.Equatable {
    /// The name of the database snapshot for which to get information.
    /// This member is required.
    public var relationalDatabaseSnapshotName: Swift.String?

    public init (
        relationalDatabaseSnapshotName: Swift.String? = nil
    )
    {
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
    }
}

struct GetRelationalDatabaseSnapshotInputBody: Swift.Equatable {
    let relationalDatabaseSnapshotName: Swift.String?
}

extension GetRelationalDatabaseSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseSnapshotName)
        relationalDatabaseSnapshotName = relationalDatabaseSnapshotNameDecoded
    }
}

extension GetRelationalDatabaseSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRelationalDatabaseSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRelationalDatabaseSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.relationalDatabaseSnapshot = output.relationalDatabaseSnapshot
        } else {
            self.relationalDatabaseSnapshot = nil
        }
    }
}

public struct GetRelationalDatabaseSnapshotOutputResponse: Swift.Equatable {
    /// An object describing the specified database snapshot.
    public var relationalDatabaseSnapshot: LightsailClientTypes.RelationalDatabaseSnapshot?

    public init (
        relationalDatabaseSnapshot: LightsailClientTypes.RelationalDatabaseSnapshot? = nil
    )
    {
        self.relationalDatabaseSnapshot = relationalDatabaseSnapshot
    }
}

struct GetRelationalDatabaseSnapshotOutputResponseBody: Swift.Equatable {
    let relationalDatabaseSnapshot: LightsailClientTypes.RelationalDatabaseSnapshot?
}

extension GetRelationalDatabaseSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseSnapshot
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseSnapshotDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabaseSnapshot.self, forKey: .relationalDatabaseSnapshot)
        relationalDatabaseSnapshot = relationalDatabaseSnapshotDecoded
    }
}

extension GetRelationalDatabaseSnapshotsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetRelationalDatabaseSnapshotsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRelationalDatabaseSnapshotsInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseSnapshots request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetRelationalDatabaseSnapshotsInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetRelationalDatabaseSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetRelationalDatabaseSnapshotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseSnapshotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRelationalDatabaseSnapshotsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseSnapshotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRelationalDatabaseSnapshotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.relationalDatabaseSnapshots = output.relationalDatabaseSnapshots
        } else {
            self.nextPageToken = nil
            self.relationalDatabaseSnapshots = nil
        }
    }
}

public struct GetRelationalDatabaseSnapshotsOutputResponse: Swift.Equatable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseSnapshots request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An object describing the result of your get relational database snapshots request.
    public var relationalDatabaseSnapshots: [LightsailClientTypes.RelationalDatabaseSnapshot]?

    public init (
        nextPageToken: Swift.String? = nil,
        relationalDatabaseSnapshots: [LightsailClientTypes.RelationalDatabaseSnapshot]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.relationalDatabaseSnapshots = relationalDatabaseSnapshots
    }
}

struct GetRelationalDatabaseSnapshotsOutputResponseBody: Swift.Equatable {
    let relationalDatabaseSnapshots: [LightsailClientTypes.RelationalDatabaseSnapshot]?
    let nextPageToken: Swift.String?
}

extension GetRelationalDatabaseSnapshotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case relationalDatabaseSnapshots
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseSnapshotsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabaseSnapshot?].self, forKey: .relationalDatabaseSnapshots)
        var relationalDatabaseSnapshotsDecoded0:[LightsailClientTypes.RelationalDatabaseSnapshot]? = nil
        if let relationalDatabaseSnapshotsContainer = relationalDatabaseSnapshotsContainer {
            relationalDatabaseSnapshotsDecoded0 = [LightsailClientTypes.RelationalDatabaseSnapshot]()
            for structure0 in relationalDatabaseSnapshotsContainer {
                if let structure0 = structure0 {
                    relationalDatabaseSnapshotsDecoded0?.append(structure0)
                }
            }
        }
        relationalDatabaseSnapshots = relationalDatabaseSnapshotsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetRelationalDatabasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetRelationalDatabasesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRelationalDatabasesInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabases request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetRelationalDatabasesInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetRelationalDatabasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetRelationalDatabasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRelationalDatabasesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRelationalDatabasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.relationalDatabases = output.relationalDatabases
        } else {
            self.nextPageToken = nil
            self.relationalDatabases = nil
        }
    }
}

public struct GetRelationalDatabasesOutputResponse: Swift.Equatable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabases request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An object describing the result of your get relational databases request.
    public var relationalDatabases: [LightsailClientTypes.RelationalDatabase]?

    public init (
        nextPageToken: Swift.String? = nil,
        relationalDatabases: [LightsailClientTypes.RelationalDatabase]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.relationalDatabases = relationalDatabases
    }
}

struct GetRelationalDatabasesOutputResponseBody: Swift.Equatable {
    let relationalDatabases: [LightsailClientTypes.RelationalDatabase]?
    let nextPageToken: Swift.String?
}

extension GetRelationalDatabasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case relationalDatabases
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabasesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabase?].self, forKey: .relationalDatabases)
        var relationalDatabasesDecoded0:[LightsailClientTypes.RelationalDatabase]? = nil
        if let relationalDatabasesContainer = relationalDatabasesContainer {
            relationalDatabasesDecoded0 = [LightsailClientTypes.RelationalDatabase]()
            for structure0 in relationalDatabasesContainer {
                if let structure0 = structure0 {
                    relationalDatabasesDecoded0?.append(structure0)
                }
            }
        }
        relationalDatabases = relationalDatabasesDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetStaticIpInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let staticIpName = self.staticIpName {
            try encodeContainer.encode(staticIpName, forKey: .staticIpName)
        }
    }
}

extension GetStaticIpInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetStaticIpInput: Swift.Equatable {
    /// The name of the static IP in Lightsail.
    /// This member is required.
    public var staticIpName: Swift.String?

    public init (
        staticIpName: Swift.String? = nil
    )
    {
        self.staticIpName = staticIpName
    }
}

struct GetStaticIpInputBody: Swift.Equatable {
    let staticIpName: Swift.String?
}

extension GetStaticIpInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .staticIpName)
        staticIpName = staticIpNameDecoded
    }
}

extension GetStaticIpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetStaticIpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetStaticIpOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetStaticIpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetStaticIpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.staticIp = output.staticIp
        } else {
            self.staticIp = nil
        }
    }
}

public struct GetStaticIpOutputResponse: Swift.Equatable {
    /// An array of key-value pairs containing information about the requested static IP.
    public var staticIp: LightsailClientTypes.StaticIp?

    public init (
        staticIp: LightsailClientTypes.StaticIp? = nil
    )
    {
        self.staticIp = staticIp
    }
}

struct GetStaticIpOutputResponseBody: Swift.Equatable {
    let staticIp: LightsailClientTypes.StaticIp?
}

extension GetStaticIpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIp
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.StaticIp.self, forKey: .staticIp)
        staticIp = staticIpDecoded
    }
}

extension GetStaticIpsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = self.pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

extension GetStaticIpsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetStaticIpsInput: Swift.Equatable {
    /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetStaticIps request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
    public var pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetStaticIpsInputBody: Swift.Equatable {
    let pageToken: Swift.String?
}

extension GetStaticIpsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetStaticIpsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetStaticIpsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetStaticIpsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetStaticIpsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetStaticIpsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.staticIps = output.staticIps
        } else {
            self.nextPageToken = nil
            self.staticIps = nil
        }
    }
}

public struct GetStaticIpsOutputResponse: Swift.Equatable {
    /// The token to advance to the next page of results from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetStaticIps request and specify the next page token using the pageToken parameter.
    public var nextPageToken: Swift.String?
    /// An array of key-value pairs containing information about your get static IPs request.
    public var staticIps: [LightsailClientTypes.StaticIp]?

    public init (
        nextPageToken: Swift.String? = nil,
        staticIps: [LightsailClientTypes.StaticIp]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.staticIps = staticIps
    }
}

struct GetStaticIpsOutputResponseBody: Swift.Equatable {
    let staticIps: [LightsailClientTypes.StaticIp]?
    let nextPageToken: Swift.String?
}

extension GetStaticIpsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case staticIps
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.StaticIp?].self, forKey: .staticIps)
        var staticIpsDecoded0:[LightsailClientTypes.StaticIp]? = nil
        if let staticIpsContainer = staticIpsContainer {
            staticIpsDecoded0 = [LightsailClientTypes.StaticIp]()
            for structure0 in staticIpsContainer {
                if let structure0 = structure0 {
                    staticIpsDecoded0?.append(structure0)
                }
            }
        }
        staticIps = staticIpsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension LightsailClientTypes {
    public enum HeaderEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accept
        case acceptcharset
        case acceptdatetime
        case acceptencoding
        case acceptlanguage
        case authorization
        case cloudfrontforwardedproto
        case cloudfrontisdesktopviewer
        case cloudfrontismobileviewer
        case cloudfrontissmarttvviewer
        case cloudfrontistabletviewer
        case cloudfrontviewercountry
        case host
        case origin
        case referer
        case sdkUnknown(Swift.String)

        public static var allCases: [HeaderEnum] {
            return [
                .accept,
                .acceptcharset,
                .acceptdatetime,
                .acceptencoding,
                .acceptlanguage,
                .authorization,
                .cloudfrontforwardedproto,
                .cloudfrontisdesktopviewer,
                .cloudfrontismobileviewer,
                .cloudfrontissmarttvviewer,
                .cloudfrontistabletviewer,
                .cloudfrontviewercountry,
                .host,
                .origin,
                .referer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accept: return "Accept"
            case .acceptcharset: return "Accept-Charset"
            case .acceptdatetime: return "Accept-Datetime"
            case .acceptencoding: return "Accept-Encoding"
            case .acceptlanguage: return "Accept-Language"
            case .authorization: return "Authorization"
            case .cloudfrontforwardedproto: return "CloudFront-Forwarded-Proto"
            case .cloudfrontisdesktopviewer: return "CloudFront-Is-Desktop-Viewer"
            case .cloudfrontismobileviewer: return "CloudFront-Is-Mobile-Viewer"
            case .cloudfrontissmarttvviewer: return "CloudFront-Is-SmartTV-Viewer"
            case .cloudfrontistabletviewer: return "CloudFront-Is-Tablet-Viewer"
            case .cloudfrontviewercountry: return "CloudFront-Viewer-Country"
            case .host: return "Host"
            case .origin: return "Origin"
            case .referer: return "Referer"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HeaderEnum(rawValue: rawValue) ?? HeaderEnum.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.HeaderObject: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case headersAllowList
        case option
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let headersAllowList = headersAllowList {
            var headersAllowListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .headersAllowList)
            for headerenum0 in headersAllowList {
                try headersAllowListContainer.encode(headerenum0.rawValue)
            }
        }
        if let option = self.option {
            try encodeContainer.encode(option.rawValue, forKey: .option)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ForwardValues.self, forKey: .option)
        option = optionDecoded
        let headersAllowListContainer = try containerValues.decodeIfPresent([LightsailClientTypes.HeaderEnum?].self, forKey: .headersAllowList)
        var headersAllowListDecoded0:[LightsailClientTypes.HeaderEnum]? = nil
        if let headersAllowListContainer = headersAllowListContainer {
            headersAllowListDecoded0 = [LightsailClientTypes.HeaderEnum]()
            for enum0 in headersAllowListContainer {
                if let enum0 = enum0 {
                    headersAllowListDecoded0?.append(enum0)
                }
            }
        }
        headersAllowList = headersAllowListDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes the request headers that a Lightsail distribution bases caching on. For the headers that you specify, your distribution caches separate versions of the specified content based on the header values in viewer requests. For example, suppose viewer requests for logo.jpg contain a custom product header that has a value of either acme or apex, and you configure your distribution to cache your content based on values in the product header. Your distribution forwards the product header to the origin and caches the response from the origin once for each header value.
    public struct HeaderObject: Swift.Equatable {
        /// The specific headers to forward to your distribution's origin.
        public var headersAllowList: [LightsailClientTypes.HeaderEnum]?
        /// The headers that you want your distribution to forward to your origin and base caching on. You can configure your distribution to do one of the following:
        ///
        /// * all - Forward all headers to your origin.
        ///
        /// * none - Forward only the default headers.
        ///
        /// * allow-list - Forward only the headers you specify using the headersAllowList parameter.
        public var option: LightsailClientTypes.ForwardValues?

        public init (
            headersAllowList: [LightsailClientTypes.HeaderEnum]? = nil,
            option: LightsailClientTypes.ForwardValues? = nil
        )
        {
            self.headersAllowList = headersAllowList
            self.option = option
        }
    }

}

extension LightsailClientTypes.HostKeyAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithm
        case fingerprintSHA1
        case fingerprintSHA256
        case notValidAfter
        case notValidBefore
        case publicKey
        case witnessedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = self.algorithm {
            try encodeContainer.encode(algorithm, forKey: .algorithm)
        }
        if let fingerprintSHA1 = self.fingerprintSHA1 {
            try encodeContainer.encode(fingerprintSHA1, forKey: .fingerprintSHA1)
        }
        if let fingerprintSHA256 = self.fingerprintSHA256 {
            try encodeContainer.encode(fingerprintSHA256, forKey: .fingerprintSHA256)
        }
        if let notValidAfter = self.notValidAfter {
            try encodeContainer.encodeTimestamp(notValidAfter, format: .epochSeconds, forKey: .notValidAfter)
        }
        if let notValidBefore = self.notValidBefore {
            try encodeContainer.encodeTimestamp(notValidBefore, format: .epochSeconds, forKey: .notValidBefore)
        }
        if let publicKey = self.publicKey {
            try encodeContainer.encode(publicKey, forKey: .publicKey)
        }
        if let witnessedAt = self.witnessedAt {
            try encodeContainer.encodeTimestamp(witnessedAt, format: .epochSeconds, forKey: .witnessedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithm)
        algorithm = algorithmDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let witnessedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .witnessedAt)
        witnessedAt = witnessedAtDecoded
        let fingerprintSHA1Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fingerprintSHA1)
        fingerprintSHA1 = fingerprintSHA1Decoded
        let fingerprintSHA256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fingerprintSHA256)
        fingerprintSHA256 = fingerprintSHA256Decoded
        let notValidBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .notValidBefore)
        notValidBefore = notValidBeforeDecoded
        let notValidAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .notValidAfter)
        notValidAfter = notValidAfterDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the public SSH host keys or the RDP certificate.
    public struct HostKeyAttributes: Swift.Equatable {
        /// The SSH host key algorithm or the RDP certificate format. For SSH host keys, the algorithm may be ssh-rsa, ecdsa-sha2-nistp256, ssh-ed25519, etc. For RDP certificates, the algorithm is always x509-cert.
        public var algorithm: Swift.String?
        /// The SHA-1 fingerprint of the returned SSH host key or RDP certificate.
        ///
        /// * Example of an SHA-1 SSH fingerprint: SHA1:1CHH6FaAaXjtFOsR/t83vf91SR0
        ///
        /// * Example of an SHA-1 RDP fingerprint: af:34:51:fe:09:f0:e0:da:b8:4e:56:ca:60:c2:10:ff:38:06:db:45
        public var fingerprintSHA1: Swift.String?
        /// The SHA-256 fingerprint of the returned SSH host key or RDP certificate.
        ///
        /// * Example of an SHA-256 SSH fingerprint: SHA256:KTsMnRBh1IhD17HpdfsbzeGA4jOijm5tyXsMjKVbB8o
        ///
        /// * Example of an SHA-256 RDP fingerprint: 03:9b:36:9f:4b:de:4e:61:70:fc:7c:c9:78:e7:d2:1a:1c:25:a8:0c:91:f6:7c:e4:d6:a0:85:c8:b4:53:99:68
        public var fingerprintSHA256: Swift.String?
        /// The returned RDP certificate is not valid after this point in time. This value is listed only for RDP certificates.
        public var notValidAfter: ClientRuntime.Date?
        /// The returned RDP certificate is valid after this point in time. This value is listed only for RDP certificates.
        public var notValidBefore: ClientRuntime.Date?
        /// The public SSH host key or the RDP certificate.
        public var publicKey: Swift.String?
        /// The time that the SSH host key or RDP certificate was recorded by Lightsail.
        public var witnessedAt: ClientRuntime.Date?

        public init (
            algorithm: Swift.String? = nil,
            fingerprintSHA1: Swift.String? = nil,
            fingerprintSHA256: Swift.String? = nil,
            notValidAfter: ClientRuntime.Date? = nil,
            notValidBefore: ClientRuntime.Date? = nil,
            publicKey: Swift.String? = nil,
            witnessedAt: ClientRuntime.Date? = nil
        )
        {
            self.algorithm = algorithm
            self.fingerprintSHA1 = fingerprintSHA1
            self.fingerprintSHA256 = fingerprintSHA256
            self.notValidAfter = notValidAfter
            self.notValidBefore = notValidBefore
            self.publicKey = publicKey
            self.witnessedAt = witnessedAt
        }
    }

}

extension LightsailClientTypes {
    public enum HttpEndpoint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [HttpEndpoint] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HttpEndpoint(rawValue: rawValue) ?? HttpEndpoint.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum HttpProtocolIpv6: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [HttpProtocolIpv6] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HttpProtocolIpv6(rawValue: rawValue) ?? HttpProtocolIpv6.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum HttpTokens: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `optional`
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [HttpTokens] {
            return [
                .optional,
                .required,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optional: return "optional"
            case .required: return "required"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HttpTokens(rawValue: rawValue) ?? HttpTokens.sdkUnknown(rawValue)
        }
    }
}

extension ImportKeyPairInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
        case publicKeyBase64
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyPairName = self.keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
        if let publicKeyBase64 = self.publicKeyBase64 {
            try encodeContainer.encode(publicKeyBase64, forKey: .publicKeyBase64)
        }
    }
}

extension ImportKeyPairInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ImportKeyPairInput: Swift.Equatable {
    /// The name of the key pair for which you want to import the public key.
    /// This member is required.
    public var keyPairName: Swift.String?
    /// A base64-encoded public key of the ssh-rsa type.
    /// This member is required.
    public var publicKeyBase64: Swift.String?

    public init (
        keyPairName: Swift.String? = nil,
        publicKeyBase64: Swift.String? = nil
    )
    {
        self.keyPairName = keyPairName
        self.publicKeyBase64 = publicKeyBase64
    }
}

struct ImportKeyPairInputBody: Swift.Equatable {
    let keyPairName: Swift.String?
    let publicKeyBase64: Swift.String?
}

extension ImportKeyPairInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
        case publicKeyBase64
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
        let publicKeyBase64Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKeyBase64)
        publicKeyBase64 = publicKeyBase64Decoded
    }
}

extension ImportKeyPairOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ImportKeyPairOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ImportKeyPairOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ImportKeyPairOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ImportKeyPairOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct ImportKeyPairOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct ImportKeyPairOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension ImportKeyPairOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension LightsailClientTypes.InputOrigin: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case protocolPolicy
        case regionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let protocolPolicy = self.protocolPolicy {
            try encodeContainer.encode(protocolPolicy.rawValue, forKey: .protocolPolicy)
        }
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName.rawValue, forKey: .regionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RegionName.self, forKey: .regionName)
        regionName = regionNameDecoded
        let protocolPolicyDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.OriginProtocolPolicyEnum.self, forKey: .protocolPolicy)
        protocolPolicy = protocolPolicyDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the origin resource of an Amazon Lightsail content delivery network (CDN) distribution. An origin can be a Lightsail instance, bucket, or load balancer. A distribution pulls content from an origin, caches it, and serves it to viewers via a worldwide network of edge servers.
    public struct InputOrigin: Swift.Equatable {
        /// The name of the origin resource.
        public var name: Swift.String?
        /// The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
        public var protocolPolicy: LightsailClientTypes.OriginProtocolPolicyEnum?
        /// The AWS Region name of the origin resource.
        public var regionName: LightsailClientTypes.RegionName?

        public init (
            name: Swift.String? = nil,
            protocolPolicy: LightsailClientTypes.OriginProtocolPolicyEnum? = nil,
            regionName: LightsailClientTypes.RegionName? = nil
        )
        {
            self.name = name
            self.protocolPolicy = protocolPolicy
            self.regionName = regionName
        }
    }

}

extension LightsailClientTypes.Instance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case arn
        case blueprintId
        case blueprintName
        case bundleId
        case createdAt
        case hardware
        case ipAddressType
        case ipv6Addresses
        case isStaticIp
        case location
        case metadataOptions
        case name
        case networking
        case privateIpAddress
        case publicIpAddress
        case resourceType
        case sshKeyName
        case state
        case supportCode
        case tags
        case username
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addon0 in addOns {
                try addOnsContainer.encode(addon0)
            }
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let blueprintId = self.blueprintId {
            try encodeContainer.encode(blueprintId, forKey: .blueprintId)
        }
        if let blueprintName = self.blueprintName {
            try encodeContainer.encode(blueprintName, forKey: .blueprintName)
        }
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let hardware = self.hardware {
            try encodeContainer.encode(hardware, forKey: .hardware)
        }
        if let ipAddressType = self.ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let ipv6Addresses = ipv6Addresses {
            var ipv6AddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6Addresses)
            for ipv6address0 in ipv6Addresses {
                try ipv6AddressesContainer.encode(ipv6address0)
            }
        }
        if let isStaticIp = self.isStaticIp {
            try encodeContainer.encode(isStaticIp, forKey: .isStaticIp)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metadataOptions = self.metadataOptions {
            try encodeContainer.encode(metadataOptions, forKey: .metadataOptions)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networking = self.networking {
            try encodeContainer.encode(networking, forKey: .networking)
        }
        if let privateIpAddress = self.privateIpAddress {
            try encodeContainer.encode(privateIpAddress, forKey: .privateIpAddress)
        }
        if let publicIpAddress = self.publicIpAddress {
            try encodeContainer.encode(publicIpAddress, forKey: .publicIpAddress)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sshKeyName = self.sshKeyName {
            try encodeContainer.encode(sshKeyName, forKey: .sshKeyName)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let blueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintId)
        blueprintId = blueprintIdDecoded
        let blueprintNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintName)
        blueprintName = blueprintNameDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOn?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOn]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOn]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
        let isStaticIpDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isStaticIp)
        isStaticIp = isStaticIpDecoded
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
        let publicIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicIpAddress)
        publicIpAddress = publicIpAddressDecoded
        let ipv6AddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipv6Addresses)
        var ipv6AddressesDecoded0:[Swift.String]? = nil
        if let ipv6AddressesContainer = ipv6AddressesContainer {
            ipv6AddressesDecoded0 = [Swift.String]()
            for string0 in ipv6AddressesContainer {
                if let string0 = string0 {
                    ipv6AddressesDecoded0?.append(string0)
                }
            }
        }
        ipv6Addresses = ipv6AddressesDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let hardwareDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceHardware.self, forKey: .hardware)
        hardware = hardwareDecoded
        let networkingDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceNetworking.self, forKey: .networking)
        networking = networkingDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceState.self, forKey: .state)
        state = stateDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let sshKeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sshKeyName)
        sshKeyName = sshKeyNameDecoded
        let metadataOptionsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceMetadataOptions.self, forKey: .metadataOptions)
        metadataOptions = metadataOptionsDecoded
    }
}

extension LightsailClientTypes {
    /// Describes an instance (a virtual private server).
    public struct Instance: Swift.Equatable {
        /// An array of objects representing the add-ons enabled on the instance.
        public var addOns: [LightsailClientTypes.AddOn]?
        /// The Amazon Resource Name (ARN) of the instance (e.g., arn:aws:lightsail:us-east-2:123456789101:Instance/244ad76f-8aad-4741-809f-12345EXAMPLE).
        public var arn: Swift.String?
        /// The blueprint ID (e.g., os_amlinux_2016_03).
        public var blueprintId: Swift.String?
        /// The friendly name of the blueprint (e.g., Amazon Linux).
        public var blueprintName: Swift.String?
        /// The bundle for the instance (e.g., micro_1_0).
        public var bundleId: Swift.String?
        /// The timestamp when the instance was created (e.g., 1479734909.17) in Unix time format.
        public var createdAt: ClientRuntime.Date?
        /// The size of the vCPU and the amount of RAM for the instance.
        public var hardware: LightsailClientTypes.InstanceHardware?
        /// The IP address type of the instance. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6.
        public var ipAddressType: LightsailClientTypes.IpAddressType?
        /// The IPv6 addresses of the instance.
        public var ipv6Addresses: [Swift.String]?
        /// A Boolean value indicating whether this instance has a static IP assigned to it.
        public var isStaticIp: Swift.Bool?
        /// The region name and Availability Zone where the instance is located.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The metadata options for the Amazon Lightsail instance.
        public var metadataOptions: LightsailClientTypes.InstanceMetadataOptions?
        /// The name the user gave the instance (e.g., Amazon_Linux-1GB-Ohio-1).
        public var name: Swift.String?
        /// Information about the public ports and monthly data transfer rates for the instance.
        public var networking: LightsailClientTypes.InstanceNetworking?
        /// The private IP address of the instance.
        public var privateIpAddress: Swift.String?
        /// The public IP address of the instance.
        public var publicIpAddress: Swift.String?
        /// The type of resource (usually Instance).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The name of the SSH key being used to connect to the instance (e.g., LightsailDefaultKeyPair).
        public var sshKeyName: Swift.String?
        /// The status code and the state (e.g., running) for the instance.
        public var state: LightsailClientTypes.InstanceState?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?
        /// The user name for connecting to the instance (e.g., ec2-user).
        public var username: Swift.String?

        public init (
            addOns: [LightsailClientTypes.AddOn]? = nil,
            arn: Swift.String? = nil,
            blueprintId: Swift.String? = nil,
            blueprintName: Swift.String? = nil,
            bundleId: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            hardware: LightsailClientTypes.InstanceHardware? = nil,
            ipAddressType: LightsailClientTypes.IpAddressType? = nil,
            ipv6Addresses: [Swift.String]? = nil,
            isStaticIp: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            metadataOptions: LightsailClientTypes.InstanceMetadataOptions? = nil,
            name: Swift.String? = nil,
            networking: LightsailClientTypes.InstanceNetworking? = nil,
            privateIpAddress: Swift.String? = nil,
            publicIpAddress: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sshKeyName: Swift.String? = nil,
            state: LightsailClientTypes.InstanceState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            username: Swift.String? = nil
        )
        {
            self.addOns = addOns
            self.arn = arn
            self.blueprintId = blueprintId
            self.blueprintName = blueprintName
            self.bundleId = bundleId
            self.createdAt = createdAt
            self.hardware = hardware
            self.ipAddressType = ipAddressType
            self.ipv6Addresses = ipv6Addresses
            self.isStaticIp = isStaticIp
            self.location = location
            self.metadataOptions = metadataOptions
            self.name = name
            self.networking = networking
            self.privateIpAddress = privateIpAddress
            self.publicIpAddress = publicIpAddress
            self.resourceType = resourceType
            self.sshKeyName = sshKeyName
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
            self.username = username
        }
    }

}

extension LightsailClientTypes.InstanceAccessDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certKey
        case expiresAt
        case hostKeys
        case instanceName
        case ipAddress
        case password
        case passwordData
        case privateKey
        case `protocol` = "protocol"
        case username
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certKey = self.certKey {
            try encodeContainer.encode(certKey, forKey: .certKey)
        }
        if let expiresAt = self.expiresAt {
            try encodeContainer.encodeTimestamp(expiresAt, format: .epochSeconds, forKey: .expiresAt)
        }
        if let hostKeys = hostKeys {
            var hostKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hostKeys)
            for hostkeyattributes0 in hostKeys {
                try hostKeysContainer.encode(hostkeyattributes0)
            }
        }
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let passwordData = self.passwordData {
            try encodeContainer.encode(passwordData, forKey: .passwordData)
        }
        if let privateKey = self.privateKey {
            try encodeContainer.encode(privateKey, forKey: .privateKey)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certKey)
        certKey = certKeyDecoded
        let expiresAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .expiresAt)
        expiresAt = expiresAtDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let passwordDataDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PasswordData.self, forKey: .passwordData)
        passwordData = passwordDataDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceAccessProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let hostKeysContainer = try containerValues.decodeIfPresent([LightsailClientTypes.HostKeyAttributes?].self, forKey: .hostKeys)
        var hostKeysDecoded0:[LightsailClientTypes.HostKeyAttributes]? = nil
        if let hostKeysContainer = hostKeysContainer {
            hostKeysDecoded0 = [LightsailClientTypes.HostKeyAttributes]()
            for structure0 in hostKeysContainer {
                if let structure0 = structure0 {
                    hostKeysDecoded0?.append(structure0)
                }
            }
        }
        hostKeys = hostKeysDecoded0
    }
}

extension LightsailClientTypes {
    /// The parameters for gaining temporary access to one of your Amazon Lightsail instances.
    public struct InstanceAccessDetails: Swift.Equatable {
        /// For SSH access, the public key to use when accessing your instance For OpenSSH clients (e.g., command line SSH), you should save this value to tempkey-cert.pub.
        public var certKey: Swift.String?
        /// For SSH access, the date on which the temporary keys expire.
        public var expiresAt: ClientRuntime.Date?
        /// Describes the public SSH host keys or the RDP certificate.
        public var hostKeys: [LightsailClientTypes.HostKeyAttributes]?
        /// The name of this Amazon Lightsail instance.
        public var instanceName: Swift.String?
        /// The public IP address of the Amazon Lightsail instance.
        public var ipAddress: Swift.String?
        /// For RDP access, the password for your Amazon Lightsail instance. Password will be an empty string if the password for your new instance is not ready yet. When you create an instance, it can take up to 15 minutes for the instance to be ready. If you create an instance using any key pair other than the default (LightsailDefaultKeyPair), password will always be an empty string. If you change the Administrator password on the instance, Lightsail will continue to return the original password value. When accessing the instance using RDP, you need to manually enter the Administrator password after changing it from the default.
        public var password: Swift.String?
        /// For a Windows Server-based instance, an object with the data you can use to retrieve your password. This is only needed if password is empty and the instance is not new (and therefore the password is not ready yet). When you create an instance, it can take up to 15 minutes for the instance to be ready.
        public var passwordData: LightsailClientTypes.PasswordData?
        /// For SSH access, the temporary private key. For OpenSSH clients (e.g., command line SSH), you should save this value to tempkey).
        public var privateKey: Swift.String?
        /// The protocol for these Amazon Lightsail instance access details.
        public var `protocol`: LightsailClientTypes.InstanceAccessProtocol?
        /// The user name to use when logging in to the Amazon Lightsail instance.
        public var username: Swift.String?

        public init (
            certKey: Swift.String? = nil,
            expiresAt: ClientRuntime.Date? = nil,
            hostKeys: [LightsailClientTypes.HostKeyAttributes]? = nil,
            instanceName: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            password: Swift.String? = nil,
            passwordData: LightsailClientTypes.PasswordData? = nil,
            privateKey: Swift.String? = nil,
            `protocol`: LightsailClientTypes.InstanceAccessProtocol? = nil,
            username: Swift.String? = nil
        )
        {
            self.certKey = certKey
            self.expiresAt = expiresAt
            self.hostKeys = hostKeys
            self.instanceName = instanceName
            self.ipAddress = ipAddress
            self.password = password
            self.passwordData = passwordData
            self.privateKey = privateKey
            self.`protocol` = `protocol`
            self.username = username
        }
    }

}

extension LightsailClientTypes {
    public enum InstanceAccessProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rdp
        case ssh
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceAccessProtocol] {
            return [
                .rdp,
                .ssh,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rdp: return "rdp"
            case .ssh: return "ssh"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceAccessProtocol(rawValue: rawValue) ?? InstanceAccessProtocol.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.InstanceEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case instanceType
        case portInfoSource
        case sourceName
        case userData
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let portInfoSource = self.portInfoSource {
            try encodeContainer.encode(portInfoSource.rawValue, forKey: .portInfoSource)
        }
        if let sourceName = self.sourceName {
            try encodeContainer.encode(sourceName, forKey: .sourceName)
        }
        if let userData = self.userData {
            try encodeContainer.encode(userData, forKey: .userData)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceName)
        sourceName = sourceNameDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let portInfoSourceDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PortInfoSourceType.self, forKey: .portInfoSource)
        portInfoSource = portInfoSourceDecoded
        let userDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userData)
        userData = userDataDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the Amazon Elastic Compute Cloud instance and related resources to be created using the create cloud formation stack operation.
    public struct InstanceEntry: Swift.Equatable {
        /// The Availability Zone for the new Amazon EC2 instance.
        /// This member is required.
        public var availabilityZone: Swift.String?
        /// The instance type (e.g., t2.micro) to use for the new Amazon EC2 instance.
        /// This member is required.
        public var instanceType: Swift.String?
        /// The port configuration to use for the new Amazon EC2 instance. The following configuration options are available:
        ///
        /// * DEFAULT - Use the default firewall settings from the Lightsail instance blueprint. If this is specified, then IPv4 and IPv6 will be configured for the new instance that is created in Amazon EC2.
        ///
        /// * INSTANCE - Use the configured firewall settings from the source Lightsail instance. If this is specified, the new instance that is created in Amazon EC2 will be configured to match the configuration of the source Lightsail instance. For example, if the source instance is configured for dual-stack (IPv4 and IPv6), then IPv4 and IPv6 will be configured for the new instance that is created in Amazon EC2. If the source instance is configured for IPv4 only, then only IPv4 will be configured for the new instance that is created in Amazon EC2.
        ///
        /// * NONE - Use the default Amazon EC2 security group. If this is specified, then only IPv4 will be configured for the new instance that is created in Amazon EC2.
        ///
        /// * CLOSED - All ports closed. If this is specified, then only IPv4 will be configured for the new instance that is created in Amazon EC2.
        ///
        ///
        /// If you configured lightsail-connect as a cidrListAliases on your instance, or if you chose to allow the Lightsail browser-based SSH or RDP clients to connect to your instance, that configuration is not carried over to your new Amazon EC2 instance.
        /// This member is required.
        public var portInfoSource: LightsailClientTypes.PortInfoSourceType?
        /// The name of the export snapshot record, which contains the exported Lightsail instance snapshot that will be used as the source of the new Amazon EC2 instance. Use the get export snapshot records operation to get a list of export snapshot records that you can use to create a CloudFormation stack.
        /// This member is required.
        public var sourceName: Swift.String?
        /// A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update. Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg.
        public var userData: Swift.String?

        public init (
            availabilityZone: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            portInfoSource: LightsailClientTypes.PortInfoSourceType? = nil,
            sourceName: Swift.String? = nil,
            userData: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.portInfoSource = portInfoSource
            self.sourceName = sourceName
            self.userData = userData
        }
    }

}

extension LightsailClientTypes.InstanceHardware: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cpuCount
        case disks
        case ramSizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cpuCount = self.cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let disks = disks {
            var disksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .disks)
            for disk0 in disks {
                try disksContainer.encode(disk0)
            }
        }
        if let ramSizeInGb = self.ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cpuCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let disksContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Disk?].self, forKey: .disks)
        var disksDecoded0:[LightsailClientTypes.Disk]? = nil
        if let disksContainer = disksContainer {
            disksDecoded0 = [LightsailClientTypes.Disk]()
            for structure0 in disksContainer {
                if let structure0 = structure0 {
                    disksDecoded0?.append(structure0)
                }
            }
        }
        disks = disksDecoded0
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the hardware for the instance.
    public struct InstanceHardware: Swift.Equatable {
        /// The number of vCPUs the instance has.
        public var cpuCount: Swift.Int?
        /// The disks attached to the instance.
        public var disks: [LightsailClientTypes.Disk]?
        /// The amount of RAM in GB on the instance (e.g., 1.0).
        public var ramSizeInGb: Swift.Float?

        public init (
            cpuCount: Swift.Int? = nil,
            disks: [LightsailClientTypes.Disk]? = nil,
            ramSizeInGb: Swift.Float? = nil
        )
        {
            self.cpuCount = cpuCount
            self.disks = disks
            self.ramSizeInGb = ramSizeInGb
        }
    }

}

extension LightsailClientTypes {
    public enum InstanceHealthReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case instancederegistrationinprogress
        case instancefailedhealthchecks
        case instanceinvalidstate
        case instanceipunusable
        case instancenotinuse
        case instancenotregistered
        case instanceresponsecodemismatch
        case instancetimeout
        case lbinitialhealthchecking
        case lbinternalerror
        case lbregistrationinprogress
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceHealthReason] {
            return [
                .instancederegistrationinprogress,
                .instancefailedhealthchecks,
                .instanceinvalidstate,
                .instanceipunusable,
                .instancenotinuse,
                .instancenotregistered,
                .instanceresponsecodemismatch,
                .instancetimeout,
                .lbinitialhealthchecking,
                .lbinternalerror,
                .lbregistrationinprogress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .instancederegistrationinprogress: return "Instance.DeregistrationInProgress"
            case .instancefailedhealthchecks: return "Instance.FailedHealthChecks"
            case .instanceinvalidstate: return "Instance.InvalidState"
            case .instanceipunusable: return "Instance.IpUnusable"
            case .instancenotinuse: return "Instance.NotInUse"
            case .instancenotregistered: return "Instance.NotRegistered"
            case .instanceresponsecodemismatch: return "Instance.ResponseCodeMismatch"
            case .instancetimeout: return "Instance.Timeout"
            case .lbinitialhealthchecking: return "Lb.InitialHealthChecking"
            case .lbinternalerror: return "Lb.InternalError"
            case .lbregistrationinprogress: return "Lb.RegistrationInProgress"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceHealthReason(rawValue: rawValue) ?? InstanceHealthReason.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum InstanceHealthState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case draining
        case healthy
        case initial
        case unavailable
        case unhealthy
        case unused
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceHealthState] {
            return [
                .draining,
                .healthy,
                .initial,
                .unavailable,
                .unhealthy,
                .unused,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .draining: return "draining"
            case .healthy: return "healthy"
            case .initial: return "initial"
            case .unavailable: return "unavailable"
            case .unhealthy: return "unhealthy"
            case .unused: return "unused"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceHealthState(rawValue: rawValue) ?? InstanceHealthState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.InstanceHealthSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceHealth
        case instanceHealthReason
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceHealth = self.instanceHealth {
            try encodeContainer.encode(instanceHealth.rawValue, forKey: .instanceHealth)
        }
        if let instanceHealthReason = self.instanceHealthReason {
            try encodeContainer.encode(instanceHealthReason.rawValue, forKey: .instanceHealthReason)
        }
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let instanceHealthDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceHealthState.self, forKey: .instanceHealth)
        instanceHealth = instanceHealthDecoded
        let instanceHealthReasonDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceHealthReason.self, forKey: .instanceHealthReason)
        instanceHealthReason = instanceHealthReasonDecoded
    }
}

extension LightsailClientTypes {
    /// Describes information about the health of the instance.
    public struct InstanceHealthSummary: Swift.Equatable {
        /// Describes the overall instance health. Valid values are below.
        public var instanceHealth: LightsailClientTypes.InstanceHealthState?
        /// More information about the instance health. If the instanceHealth is healthy, then an instanceHealthReason value is not provided. If instanceHealth is initial, the instanceHealthReason value can be one of the following:
        ///
        /// * Lb.RegistrationInProgress - The target instance is in the process of being registered with the load balancer.
        ///
        /// * Lb.InitialHealthChecking - The Lightsail load balancer is still sending the target instance the minimum number of health checks required to determine its health status.
        ///
        ///
        /// If instanceHealth is unhealthy, the instanceHealthReason value can be one of the following:
        ///
        /// * Instance.ResponseCodeMismatch - The health checks did not return an expected HTTP code.
        ///
        /// * Instance.Timeout - The health check requests timed out.
        ///
        /// * Instance.FailedHealthChecks - The health checks failed because the connection to the target instance timed out, the target instance response was malformed, or the target instance failed the health check for an unknown reason.
        ///
        /// * Lb.InternalError - The health checks failed due to an internal error.
        ///
        ///
        /// If instanceHealth is unused, the instanceHealthReason value can be one of the following:
        ///
        /// * Instance.NotRegistered - The target instance is not registered with the target group.
        ///
        /// * Instance.NotInUse - The target group is not used by any load balancer, or the target instance is in an Availability Zone that is not enabled for its load balancer.
        ///
        /// * Instance.IpUnusable - The target IP address is reserved for use by a Lightsail load balancer.
        ///
        /// * Instance.InvalidState - The target is in the stopped or terminated state.
        ///
        ///
        /// If instanceHealth is draining, the instanceHealthReason value can be one of the following:
        ///
        /// * Instance.DeregistrationInProgress - The target instance is in the process of being deregistered and the deregistration delay period has not expired.
        public var instanceHealthReason: LightsailClientTypes.InstanceHealthReason?
        /// The name of the Lightsail instance for which you are requesting health check data.
        public var instanceName: Swift.String?

        public init (
            instanceHealth: LightsailClientTypes.InstanceHealthState? = nil,
            instanceHealthReason: LightsailClientTypes.InstanceHealthReason? = nil,
            instanceName: Swift.String? = nil
        )
        {
            self.instanceHealth = instanceHealth
            self.instanceHealthReason = instanceHealthReason
            self.instanceName = instanceName
        }
    }

}

extension LightsailClientTypes.InstanceMetadataOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpEndpoint
        case httpProtocolIpv6
        case httpPutResponseHopLimit
        case httpTokens
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let httpEndpoint = self.httpEndpoint {
            try encodeContainer.encode(httpEndpoint.rawValue, forKey: .httpEndpoint)
        }
        if let httpProtocolIpv6 = self.httpProtocolIpv6 {
            try encodeContainer.encode(httpProtocolIpv6.rawValue, forKey: .httpProtocolIpv6)
        }
        if let httpPutResponseHopLimit = self.httpPutResponseHopLimit {
            try encodeContainer.encode(httpPutResponseHopLimit, forKey: .httpPutResponseHopLimit)
        }
        if let httpTokens = self.httpTokens {
            try encodeContainer.encode(httpTokens.rawValue, forKey: .httpTokens)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceMetadataState.self, forKey: .state)
        state = stateDecoded
        let httpTokensDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.HttpTokens.self, forKey: .httpTokens)
        httpTokens = httpTokensDecoded
        let httpEndpointDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.HttpEndpoint.self, forKey: .httpEndpoint)
        httpEndpoint = httpEndpointDecoded
        let httpPutResponseHopLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .httpPutResponseHopLimit)
        httpPutResponseHopLimit = httpPutResponseHopLimitDecoded
        let httpProtocolIpv6Decoded = try containerValues.decodeIfPresent(LightsailClientTypes.HttpProtocolIpv6.self, forKey: .httpProtocolIpv6)
        httpProtocolIpv6 = httpProtocolIpv6Decoded
    }
}

extension LightsailClientTypes {
    /// The metadata options for the instance.
    public struct InstanceMetadataOptions: Swift.Equatable {
        /// Indicates whether the HTTP metadata endpoint on your instances is enabled or disabled. If the value is disabled, you cannot access your instance metadata.
        public var httpEndpoint: LightsailClientTypes.HttpEndpoint?
        /// Indicates whether the IPv6 endpoint for the instance metadata service is enabled or disabled.
        public var httpProtocolIpv6: LightsailClientTypes.HttpProtocolIpv6?
        /// The desired HTTP PUT response hop limit for instance metadata requests. A larger number means that the instance metadata requests can travel farther.
        public var httpPutResponseHopLimit: Swift.Int?
        /// The state of token usage for your instance metadata requests. If the state is optional, you can choose whether to retrieve instance metadata with a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials by using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with all instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials. The version 1.0 credentials are not available. Not all instance blueprints in Lightsail support version 2.0 credentials. Use the MetadataNoToken instance metric to track the number of calls to the instance metadata service that are using version 1.0 credentials. For more information, see [Viewing instance metrics in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-health-metrics) in the Amazon Lightsail Developer Guide.
        public var httpTokens: LightsailClientTypes.HttpTokens?
        /// The state of the metadata option changes. The following states are possible:
        ///
        /// * pending - The metadata options are being updated. The instance is not yet ready to process metadata traffic with the new selection.
        ///
        /// * applied - The metadata options have been successfully applied to the instance.
        public var state: LightsailClientTypes.InstanceMetadataState?

        public init (
            httpEndpoint: LightsailClientTypes.HttpEndpoint? = nil,
            httpProtocolIpv6: LightsailClientTypes.HttpProtocolIpv6? = nil,
            httpPutResponseHopLimit: Swift.Int? = nil,
            httpTokens: LightsailClientTypes.HttpTokens? = nil,
            state: LightsailClientTypes.InstanceMetadataState? = nil
        )
        {
            self.httpEndpoint = httpEndpoint
            self.httpProtocolIpv6 = httpProtocolIpv6
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.state = state
        }
    }

}

extension LightsailClientTypes {
    public enum InstanceMetadataState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case applied
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceMetadataState] {
            return [
                .applied,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .applied: return "applied"
            case .pending: return "pending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceMetadataState(rawValue: rawValue) ?? InstanceMetadataState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum InstanceMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case burstcapacitypercentage
        case burstcapacitytime
        case cpuutilization
        case metadatanotoken
        case networkin
        case networkout
        case statuscheckfailed
        case statuscheckfailedInstance
        case statuscheckfailedSystem
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceMetricName] {
            return [
                .burstcapacitypercentage,
                .burstcapacitytime,
                .cpuutilization,
                .metadatanotoken,
                .networkin,
                .networkout,
                .statuscheckfailed,
                .statuscheckfailedInstance,
                .statuscheckfailedSystem,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .burstcapacitypercentage: return "BurstCapacityPercentage"
            case .burstcapacitytime: return "BurstCapacityTime"
            case .cpuutilization: return "CPUUtilization"
            case .metadatanotoken: return "MetadataNoToken"
            case .networkin: return "NetworkIn"
            case .networkout: return "NetworkOut"
            case .statuscheckfailed: return "StatusCheckFailed"
            case .statuscheckfailedInstance: return "StatusCheckFailed_Instance"
            case .statuscheckfailedSystem: return "StatusCheckFailed_System"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceMetricName(rawValue: rawValue) ?? InstanceMetricName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.InstanceNetworking: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monthlyTransfer
        case ports
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monthlyTransfer = self.monthlyTransfer {
            try encodeContainer.encode(monthlyTransfer, forKey: .monthlyTransfer)
        }
        if let ports = ports {
            var portsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ports)
            for instanceportinfo0 in ports {
                try portsContainer.encode(instanceportinfo0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monthlyTransferDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MonthlyTransfer.self, forKey: .monthlyTransfer)
        monthlyTransfer = monthlyTransferDecoded
        let portsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.InstancePortInfo?].self, forKey: .ports)
        var portsDecoded0:[LightsailClientTypes.InstancePortInfo]? = nil
        if let portsContainer = portsContainer {
            portsDecoded0 = [LightsailClientTypes.InstancePortInfo]()
            for structure0 in portsContainer {
                if let structure0 = structure0 {
                    portsDecoded0?.append(structure0)
                }
            }
        }
        ports = portsDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes monthly data transfer rates and port information for an instance.
    public struct InstanceNetworking: Swift.Equatable {
        /// The amount of data in GB allocated for monthly data transfers.
        public var monthlyTransfer: LightsailClientTypes.MonthlyTransfer?
        /// An array of key-value pairs containing information about the ports on the instance.
        public var ports: [LightsailClientTypes.InstancePortInfo]?

        public init (
            monthlyTransfer: LightsailClientTypes.MonthlyTransfer? = nil,
            ports: [LightsailClientTypes.InstancePortInfo]? = nil
        )
        {
            self.monthlyTransfer = monthlyTransfer
            self.ports = ports
        }
    }

}

extension LightsailClientTypes {
    public enum InstancePlatform: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case linuxunix
        case windows
        case sdkUnknown(Swift.String)

        public static var allCases: [InstancePlatform] {
            return [
                .linuxunix,
                .windows,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .linuxunix: return "LINUX_UNIX"
            case .windows: return "WINDOWS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstancePlatform(rawValue: rawValue) ?? InstancePlatform.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.InstancePortInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessDirection
        case accessFrom
        case accessType
        case cidrListAliases
        case cidrs
        case commonName
        case fromPort
        case ipv6Cidrs
        case `protocol` = "protocol"
        case toPort
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessDirection = self.accessDirection {
            try encodeContainer.encode(accessDirection.rawValue, forKey: .accessDirection)
        }
        if let accessFrom = self.accessFrom {
            try encodeContainer.encode(accessFrom, forKey: .accessFrom)
        }
        if let accessType = self.accessType {
            try encodeContainer.encode(accessType.rawValue, forKey: .accessType)
        }
        if let cidrListAliases = cidrListAliases {
            var cidrListAliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrListAliases)
            for string0 in cidrListAliases {
                try cidrListAliasesContainer.encode(string0)
            }
        }
        if let cidrs = cidrs {
            var cidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrs)
            for string0 in cidrs {
                try cidrsContainer.encode(string0)
            }
        }
        if let commonName = self.commonName {
            try encodeContainer.encode(commonName, forKey: .commonName)
        }
        if fromPort != 0 {
            try encodeContainer.encode(fromPort, forKey: .fromPort)
        }
        if let ipv6Cidrs = ipv6Cidrs {
            var ipv6CidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6Cidrs)
            for string0 in ipv6Cidrs {
                try ipv6CidrsContainer.encode(string0)
            }
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if toPort != 0 {
            try encodeContainer.encode(toPort, forKey: .toPort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fromPort) ?? 0
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .toPort) ?? 0
        toPort = toPortDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.NetworkProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let accessFromDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessFrom)
        accessFrom = accessFromDecoded
        let accessTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PortAccessType.self, forKey: .accessType)
        accessType = accessTypeDecoded
        let commonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commonName)
        commonName = commonNameDecoded
        let accessDirectionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AccessDirection.self, forKey: .accessDirection)
        accessDirection = accessDirectionDecoded
        let cidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrs)
        var cidrsDecoded0:[Swift.String]? = nil
        if let cidrsContainer = cidrsContainer {
            cidrsDecoded0 = [Swift.String]()
            for string0 in cidrsContainer {
                if let string0 = string0 {
                    cidrsDecoded0?.append(string0)
                }
            }
        }
        cidrs = cidrsDecoded0
        let ipv6CidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipv6Cidrs)
        var ipv6CidrsDecoded0:[Swift.String]? = nil
        if let ipv6CidrsContainer = ipv6CidrsContainer {
            ipv6CidrsDecoded0 = [Swift.String]()
            for string0 in ipv6CidrsContainer {
                if let string0 = string0 {
                    ipv6CidrsDecoded0?.append(string0)
                }
            }
        }
        ipv6Cidrs = ipv6CidrsDecoded0
        let cidrListAliasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrListAliases)
        var cidrListAliasesDecoded0:[Swift.String]? = nil
        if let cidrListAliasesContainer = cidrListAliasesContainer {
            cidrListAliasesDecoded0 = [Swift.String]()
            for string0 in cidrListAliasesContainer {
                if let string0 = string0 {
                    cidrListAliasesDecoded0?.append(string0)
                }
            }
        }
        cidrListAliases = cidrListAliasesDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes information about ports for an Amazon Lightsail instance.
    public struct InstancePortInfo: Swift.Equatable {
        /// The access direction (inbound or outbound). Lightsail currently supports only inbound access direction.
        public var accessDirection: LightsailClientTypes.AccessDirection?
        /// The location from which access is allowed. For example, Anywhere (0.0.0.0/0), or Custom if a specific IP address or range of IP addresses is allowed.
        public var accessFrom: Swift.String?
        /// The type of access (Public or Private).
        public var accessType: LightsailClientTypes.PortAccessType?
        /// An alias that defines access for a preconfigured range of IP addresses. The only alias currently supported is lightsail-connect, which allows IP addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your instance.
        public var cidrListAliases: [Swift.String]?
        /// The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. The ipv6Cidrs parameter lists the IPv6 addresses that are allowed to connect to an instance. For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on Wikipedia.
        public var cidrs: [Swift.String]?
        /// The common name of the port information.
        public var commonName: Swift.String?
        /// The first port in a range of open ports on an instance. Allowed ports:
        ///
        /// * TCP and UDP - 0 to 65535
        ///
        /// * ICMP - The ICMP type for IPv4 addresses. For example, specify 8 as the fromPort (ICMP type), and -1 as the toPort (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on Wikipedia.
        ///
        /// * ICMPv6 - The ICMP type for IPv6 addresses. For example, specify 128 as the fromPort (ICMPv6 type), and 0 as toPort (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).
        public var fromPort: Swift.Int
        /// The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. Only devices with an IPv6 address can connect to an instance through IPv6; otherwise, IPv4 should be used. The cidrs parameter lists the IPv4 addresses that are allowed to connect to an instance. For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on Wikipedia.
        public var ipv6Cidrs: [Swift.String]?
        /// The IP protocol name. The name can be one of the following:
        ///
        /// * tcp - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.
        ///
        /// * all - All transport layer protocol types. For more general information, see [Transport layer](https://en.wikipedia.org/wiki/Transport_layer) on Wikipedia.
        ///
        /// * udp - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.
        ///
        /// * icmp - Internet Control Message Protocol (ICMP) is used to send error messages and operational information indicating success or failure when communicating with an instance. For example, an error is indicated when an instance could not be reached. When you specify icmp as the protocol, you must specify the ICMP type using the fromPort parameter, and ICMP code using the toPort parameter.
        public var `protocol`: LightsailClientTypes.NetworkProtocol?
        /// The last port in a range of open ports on an instance. Allowed ports:
        ///
        /// * TCP and UDP - 0 to 65535
        ///
        /// * ICMP - The ICMP code for IPv4 addresses. For example, specify 8 as the fromPort (ICMP type), and -1 as the toPort (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on Wikipedia.
        ///
        /// * ICMPv6 - The ICMP code for IPv6 addresses. For example, specify 128 as the fromPort (ICMPv6 type), and 0 as toPort (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).
        public var toPort: Swift.Int

        public init (
            accessDirection: LightsailClientTypes.AccessDirection? = nil,
            accessFrom: Swift.String? = nil,
            accessType: LightsailClientTypes.PortAccessType? = nil,
            cidrListAliases: [Swift.String]? = nil,
            cidrs: [Swift.String]? = nil,
            commonName: Swift.String? = nil,
            fromPort: Swift.Int = 0,
            ipv6Cidrs: [Swift.String]? = nil,
            `protocol`: LightsailClientTypes.NetworkProtocol? = nil,
            toPort: Swift.Int = 0
        )
        {
            self.accessDirection = accessDirection
            self.accessFrom = accessFrom
            self.accessType = accessType
            self.cidrListAliases = cidrListAliases
            self.cidrs = cidrs
            self.commonName = commonName
            self.fromPort = fromPort
            self.ipv6Cidrs = ipv6Cidrs
            self.`protocol` = `protocol`
            self.toPort = toPort
        }
    }

}

extension LightsailClientTypes.InstancePortState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrListAliases
        case cidrs
        case fromPort
        case ipv6Cidrs
        case `protocol` = "protocol"
        case state
        case toPort
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrListAliases = cidrListAliases {
            var cidrListAliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrListAliases)
            for string0 in cidrListAliases {
                try cidrListAliasesContainer.encode(string0)
            }
        }
        if let cidrs = cidrs {
            var cidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrs)
            for string0 in cidrs {
                try cidrsContainer.encode(string0)
            }
        }
        if fromPort != 0 {
            try encodeContainer.encode(fromPort, forKey: .fromPort)
        }
        if let ipv6Cidrs = ipv6Cidrs {
            var ipv6CidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6Cidrs)
            for string0 in ipv6Cidrs {
                try ipv6CidrsContainer.encode(string0)
            }
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if toPort != 0 {
            try encodeContainer.encode(toPort, forKey: .toPort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fromPort) ?? 0
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .toPort) ?? 0
        toPort = toPortDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.NetworkProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PortState.self, forKey: .state)
        state = stateDecoded
        let cidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrs)
        var cidrsDecoded0:[Swift.String]? = nil
        if let cidrsContainer = cidrsContainer {
            cidrsDecoded0 = [Swift.String]()
            for string0 in cidrsContainer {
                if let string0 = string0 {
                    cidrsDecoded0?.append(string0)
                }
            }
        }
        cidrs = cidrsDecoded0
        let ipv6CidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipv6Cidrs)
        var ipv6CidrsDecoded0:[Swift.String]? = nil
        if let ipv6CidrsContainer = ipv6CidrsContainer {
            ipv6CidrsDecoded0 = [Swift.String]()
            for string0 in ipv6CidrsContainer {
                if let string0 = string0 {
                    ipv6CidrsDecoded0?.append(string0)
                }
            }
        }
        ipv6Cidrs = ipv6CidrsDecoded0
        let cidrListAliasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrListAliases)
        var cidrListAliasesDecoded0:[Swift.String]? = nil
        if let cidrListAliasesContainer = cidrListAliasesContainer {
            cidrListAliasesDecoded0 = [Swift.String]()
            for string0 in cidrListAliasesContainer {
                if let string0 = string0 {
                    cidrListAliasesDecoded0?.append(string0)
                }
            }
        }
        cidrListAliases = cidrListAliasesDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes open ports on an instance, the IP addresses allowed to connect to the instance through the ports, and the protocol.
    public struct InstancePortState: Swift.Equatable {
        /// An alias that defines access for a preconfigured range of IP addresses. The only alias currently supported is lightsail-connect, which allows IP addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your instance.
        public var cidrListAliases: [Swift.String]?
        /// The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. The ipv6Cidrs parameter lists the IPv6 addresses that are allowed to connect to an instance. For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on Wikipedia.
        public var cidrs: [Swift.String]?
        /// The first port in a range of open ports on an instance. Allowed ports:
        ///
        /// * TCP and UDP - 0 to 65535
        ///
        /// * ICMP - The ICMP type for IPv4 addresses. For example, specify 8 as the fromPort (ICMP type), and -1 as the toPort (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on Wikipedia.
        ///
        /// * ICMPv6 - The ICMP type for IPv6 addresses. For example, specify 128 as the fromPort (ICMPv6 type), and 0 as toPort (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).
        public var fromPort: Swift.Int
        /// The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. Only devices with an IPv6 address can connect to an instance through IPv6; otherwise, IPv4 should be used. The cidrs parameter lists the IPv4 addresses that are allowed to connect to an instance. For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on Wikipedia.
        public var ipv6Cidrs: [Swift.String]?
        /// The IP protocol name. The name can be one of the following:
        ///
        /// * tcp - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.
        ///
        /// * all - All transport layer protocol types. For more general information, see [Transport layer](https://en.wikipedia.org/wiki/Transport_layer) on Wikipedia.
        ///
        /// * udp - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.
        ///
        /// * icmp - Internet Control Message Protocol (ICMP) is used to send error messages and operational information indicating success or failure when communicating with an instance. For example, an error is indicated when an instance could not be reached. When you specify icmp as the protocol, you must specify the ICMP type using the fromPort parameter, and ICMP code using the toPort parameter.
        public var `protocol`: LightsailClientTypes.NetworkProtocol?
        /// Specifies whether the instance port is open or closed. The port state for Lightsail instances is always open.
        public var state: LightsailClientTypes.PortState?
        /// The last port in a range of open ports on an instance. Allowed ports:
        ///
        /// * TCP and UDP - 0 to 65535
        ///
        /// * ICMP - The ICMP code for IPv4 addresses. For example, specify 8 as the fromPort (ICMP type), and -1 as the toPort (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on Wikipedia.
        ///
        /// * ICMPv6 - The ICMP code for IPv6 addresses. For example, specify 128 as the fromPort (ICMPv6 type), and 0 as toPort (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).
        public var toPort: Swift.Int

        public init (
            cidrListAliases: [Swift.String]? = nil,
            cidrs: [Swift.String]? = nil,
            fromPort: Swift.Int = 0,
            ipv6Cidrs: [Swift.String]? = nil,
            `protocol`: LightsailClientTypes.NetworkProtocol? = nil,
            state: LightsailClientTypes.PortState? = nil,
            toPort: Swift.Int = 0
        )
        {
            self.cidrListAliases = cidrListAliases
            self.cidrs = cidrs
            self.fromPort = fromPort
            self.ipv6Cidrs = ipv6Cidrs
            self.`protocol` = `protocol`
            self.state = state
            self.toPort = toPort
        }
    }

}

extension LightsailClientTypes.InstanceSnapshot: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case fromAttachedDisks
        case fromBlueprintId
        case fromBundleId
        case fromInstanceArn
        case fromInstanceName
        case isFromAutoSnapshot
        case location
        case name
        case progress
        case resourceType
        case sizeInGb
        case state
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let fromAttachedDisks = fromAttachedDisks {
            var fromAttachedDisksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fromAttachedDisks)
            for disk0 in fromAttachedDisks {
                try fromAttachedDisksContainer.encode(disk0)
            }
        }
        if let fromBlueprintId = self.fromBlueprintId {
            try encodeContainer.encode(fromBlueprintId, forKey: .fromBlueprintId)
        }
        if let fromBundleId = self.fromBundleId {
            try encodeContainer.encode(fromBundleId, forKey: .fromBundleId)
        }
        if let fromInstanceArn = self.fromInstanceArn {
            try encodeContainer.encode(fromInstanceArn, forKey: .fromInstanceArn)
        }
        if let fromInstanceName = self.fromInstanceName {
            try encodeContainer.encode(fromInstanceName, forKey: .fromInstanceName)
        }
        if let isFromAutoSnapshot = self.isFromAutoSnapshot {
            try encodeContainer.encode(isFromAutoSnapshot, forKey: .isFromAutoSnapshot)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let progress = self.progress {
            try encodeContainer.encode(progress, forKey: .progress)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sizeInGb = self.sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceSnapshotState.self, forKey: .state)
        state = stateDecoded
        let progressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .progress)
        progress = progressDecoded
        let fromAttachedDisksContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Disk?].self, forKey: .fromAttachedDisks)
        var fromAttachedDisksDecoded0:[LightsailClientTypes.Disk]? = nil
        if let fromAttachedDisksContainer = fromAttachedDisksContainer {
            fromAttachedDisksDecoded0 = [LightsailClientTypes.Disk]()
            for structure0 in fromAttachedDisksContainer {
                if let structure0 = structure0 {
                    fromAttachedDisksDecoded0?.append(structure0)
                }
            }
        }
        fromAttachedDisks = fromAttachedDisksDecoded0
        let fromInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromInstanceName)
        fromInstanceName = fromInstanceNameDecoded
        let fromInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromInstanceArn)
        fromInstanceArn = fromInstanceArnDecoded
        let fromBlueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromBlueprintId)
        fromBlueprintId = fromBlueprintIdDecoded
        let fromBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromBundleId)
        fromBundleId = fromBundleIdDecoded
        let isFromAutoSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isFromAutoSnapshot)
        isFromAutoSnapshot = isFromAutoSnapshotDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
    }
}

extension LightsailClientTypes {
    /// Describes an instance snapshot.
    public struct InstanceSnapshot: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the snapshot (e.g., arn:aws:lightsail:us-east-2:123456789101:InstanceSnapshot/d23b5706-3322-4d83-81e5-12345EXAMPLE).
        public var arn: Swift.String?
        /// The timestamp when the snapshot was created (e.g., 1479907467.024).
        public var createdAt: ClientRuntime.Date?
        /// An array of disk objects containing information about all block storage disks.
        public var fromAttachedDisks: [LightsailClientTypes.Disk]?
        /// The blueprint ID from which you created the snapshot (e.g., os_debian_8_3). A blueprint is a virtual private server (or instance) image used to create instances quickly.
        public var fromBlueprintId: Swift.String?
        /// The bundle ID from which you created the snapshot (e.g., micro_1_0).
        public var fromBundleId: Swift.String?
        /// The Amazon Resource Name (ARN) of the instance from which the snapshot was created (e.g., arn:aws:lightsail:us-east-2:123456789101:Instance/64b8404c-ccb1-430b-8daf-12345EXAMPLE).
        public var fromInstanceArn: Swift.String?
        /// The instance from which the snapshot was created.
        public var fromInstanceName: Swift.String?
        /// A Boolean value indicating whether the snapshot was created from an automatic snapshot.
        public var isFromAutoSnapshot: Swift.Bool?
        /// The region name and Availability Zone where you created the snapshot.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the snapshot.
        public var name: Swift.String?
        /// The progress of the snapshot. This is populated only for disk snapshots, and is null for instance snapshots.
        public var progress: Swift.String?
        /// The type of resource (usually InstanceSnapshot).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The size in GB of the SSD.
        public var sizeInGb: Swift.Int?
        /// The state the snapshot is in.
        public var state: LightsailClientTypes.InstanceSnapshotState?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            fromAttachedDisks: [LightsailClientTypes.Disk]? = nil,
            fromBlueprintId: Swift.String? = nil,
            fromBundleId: Swift.String? = nil,
            fromInstanceArn: Swift.String? = nil,
            fromInstanceName: Swift.String? = nil,
            isFromAutoSnapshot: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            progress: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sizeInGb: Swift.Int? = nil,
            state: LightsailClientTypes.InstanceSnapshotState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.fromAttachedDisks = fromAttachedDisks
            self.fromBlueprintId = fromBlueprintId
            self.fromBundleId = fromBundleId
            self.fromInstanceArn = fromInstanceArn
            self.fromInstanceName = fromInstanceName
            self.isFromAutoSnapshot = isFromAutoSnapshot
            self.location = location
            self.name = name
            self.progress = progress
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.InstanceSnapshotInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromBlueprintId
        case fromBundleId
        case fromDiskInfo
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fromBlueprintId = self.fromBlueprintId {
            try encodeContainer.encode(fromBlueprintId, forKey: .fromBlueprintId)
        }
        if let fromBundleId = self.fromBundleId {
            try encodeContainer.encode(fromBundleId, forKey: .fromBundleId)
        }
        if let fromDiskInfo = fromDiskInfo {
            var fromDiskInfoContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fromDiskInfo)
            for diskinfo0 in fromDiskInfo {
                try fromDiskInfoContainer.encode(diskinfo0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromBundleId)
        fromBundleId = fromBundleIdDecoded
        let fromBlueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromBlueprintId)
        fromBlueprintId = fromBlueprintIdDecoded
        let fromDiskInfoContainer = try containerValues.decodeIfPresent([LightsailClientTypes.DiskInfo?].self, forKey: .fromDiskInfo)
        var fromDiskInfoDecoded0:[LightsailClientTypes.DiskInfo]? = nil
        if let fromDiskInfoContainer = fromDiskInfoContainer {
            fromDiskInfoDecoded0 = [LightsailClientTypes.DiskInfo]()
            for structure0 in fromDiskInfoContainer {
                if let structure0 = structure0 {
                    fromDiskInfoDecoded0?.append(structure0)
                }
            }
        }
        fromDiskInfo = fromDiskInfoDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes an instance snapshot.
    public struct InstanceSnapshotInfo: Swift.Equatable {
        /// The blueprint ID from which the source instance (e.g., os_debian_8_3).
        public var fromBlueprintId: Swift.String?
        /// The bundle ID from which the source instance was created (e.g., micro_1_0).
        public var fromBundleId: Swift.String?
        /// A list of objects describing the disks that were attached to the source instance.
        public var fromDiskInfo: [LightsailClientTypes.DiskInfo]?

        public init (
            fromBlueprintId: Swift.String? = nil,
            fromBundleId: Swift.String? = nil,
            fromDiskInfo: [LightsailClientTypes.DiskInfo]? = nil
        )
        {
            self.fromBlueprintId = fromBlueprintId
            self.fromBundleId = fromBundleId
            self.fromDiskInfo = fromDiskInfo
        }
    }

}

extension LightsailClientTypes {
    public enum InstanceSnapshotState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case error
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceSnapshotState] {
            return [
                .available,
                .error,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .error: return "error"
            case .pending: return "pending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceSnapshotState(rawValue: rawValue) ?? InstanceSnapshotState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.InstanceState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .code)
        code = codeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the virtual private server (or instance) status.
    public struct InstanceState: Swift.Equatable {
        /// The status code for the instance.
        public var code: Swift.Int?
        /// The state of the instance (e.g., running or pending).
        public var name: Swift.String?

        public init (
            code: Swift.Int? = nil,
            name: Swift.String? = nil
        )
        {
            self.code = code
            self.name = name
        }
    }

}

extension InvalidInputException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidInputExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Lightsail throws this exception when user input does not conform to the validation rules of an input field. Domain and distribution APIs are only available in the N. Virginia (us-east-1) Amazon Web Services Region. Please set your Amazon Web Services Region configuration to us-east-1 to create, view, or edit these resources.
public struct InvalidInputException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct InvalidInputExceptionBody: Swift.Equatable {
    let code: Swift.String?
    let docs: Swift.String?
    let message: Swift.String?
    let tip: Swift.String?
}

extension InvalidInputExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

extension LightsailClientTypes {
    public enum IpAddressType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dualstack
        case ipv4
        case sdkUnknown(Swift.String)

        public static var allCases: [IpAddressType] {
            return [
                .dualstack,
                .ipv4,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dualstack: return "dualstack"
            case .ipv4: return "ipv4"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IpAddressType(rawValue: rawValue) ?? IpAddressType.sdkUnknown(rawValue)
        }
    }
}

extension IsVpcPeeredInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension IsVpcPeeredInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct IsVpcPeeredInput: Swift.Equatable {

    public init () { }
}

struct IsVpcPeeredInputBody: Swift.Equatable {
}

extension IsVpcPeeredInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IsVpcPeeredOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension IsVpcPeeredOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum IsVpcPeeredOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension IsVpcPeeredOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IsVpcPeeredOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isPeered = output.isPeered
        } else {
            self.isPeered = nil
        }
    }
}

public struct IsVpcPeeredOutputResponse: Swift.Equatable {
    /// Returns true if the Lightsail VPC is peered; otherwise, false.
    public var isPeered: Swift.Bool?

    public init (
        isPeered: Swift.Bool? = nil
    )
    {
        self.isPeered = isPeered
    }
}

struct IsVpcPeeredOutputResponseBody: Swift.Equatable {
    let isPeered: Swift.Bool?
}

extension IsVpcPeeredOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isPeered
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isPeeredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isPeered)
        isPeered = isPeeredDecoded
    }
}

extension LightsailClientTypes.KeyPair: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case fingerprint
        case location
        case name
        case resourceType
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let fingerprint = self.fingerprint {
            try encodeContainer.encode(fingerprint, forKey: .fingerprint)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let fingerprintDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fingerprint)
        fingerprint = fingerprintDecoded
    }
}

extension LightsailClientTypes {
    /// Describes an SSH key pair.
    public struct KeyPair: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the key pair (e.g., arn:aws:lightsail:us-east-2:123456789101:KeyPair/05859e3d-331d-48ba-9034-12345EXAMPLE).
        public var arn: Swift.String?
        /// The timestamp when the key pair was created (e.g., 1479816991.349).
        public var createdAt: ClientRuntime.Date?
        /// The RSA fingerprint of the key pair.
        public var fingerprint: Swift.String?
        /// The region name and Availability Zone where the key pair was created.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The friendly name of the SSH key pair.
        public var name: Swift.String?
        /// The resource type (usually KeyPair).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            fingerprint: Swift.String? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.fingerprint = fingerprint
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.LightsailDistribution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ableToUpdateBundle
        case alternativeDomainNames
        case arn
        case bundleId
        case cacheBehaviorSettings
        case cacheBehaviors
        case certificateName
        case createdAt
        case defaultCacheBehavior
        case domainName
        case ipAddressType
        case isEnabled
        case location
        case name
        case origin
        case originPublicDNS
        case resourceType
        case status
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ableToUpdateBundle = self.ableToUpdateBundle {
            try encodeContainer.encode(ableToUpdateBundle, forKey: .ableToUpdateBundle)
        }
        if let alternativeDomainNames = alternativeDomainNames {
            var alternativeDomainNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alternativeDomainNames)
            for string0 in alternativeDomainNames {
                try alternativeDomainNamesContainer.encode(string0)
            }
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let cacheBehaviorSettings = self.cacheBehaviorSettings {
            try encodeContainer.encode(cacheBehaviorSettings, forKey: .cacheBehaviorSettings)
        }
        if let cacheBehaviors = cacheBehaviors {
            var cacheBehaviorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cacheBehaviors)
            for cachebehaviorperpath0 in cacheBehaviors {
                try cacheBehaviorsContainer.encode(cachebehaviorperpath0)
            }
        }
        if let certificateName = self.certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let defaultCacheBehavior = self.defaultCacheBehavior {
            try encodeContainer.encode(defaultCacheBehavior, forKey: .defaultCacheBehavior)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let ipAddressType = self.ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let isEnabled = self.isEnabled {
            try encodeContainer.encode(isEnabled, forKey: .isEnabled)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let origin = self.origin {
            try encodeContainer.encode(origin, forKey: .origin)
        }
        if let originPublicDNS = self.originPublicDNS {
            try encodeContainer.encode(originPublicDNS, forKey: .originPublicDNS)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let alternativeDomainNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .alternativeDomainNames)
        var alternativeDomainNamesDecoded0:[Swift.String]? = nil
        if let alternativeDomainNamesContainer = alternativeDomainNamesContainer {
            alternativeDomainNamesDecoded0 = [Swift.String]()
            for string0 in alternativeDomainNamesContainer {
                if let string0 = string0 {
                    alternativeDomainNamesDecoded0?.append(string0)
                }
            }
        }
        alternativeDomainNames = alternativeDomainNamesDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let isEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isEnabled)
        isEnabled = isEnabledDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let originDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Origin.self, forKey: .origin)
        origin = originDecoded
        let originPublicDNSDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originPublicDNS)
        originPublicDNS = originPublicDNSDecoded
        let defaultCacheBehaviorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheBehavior.self, forKey: .defaultCacheBehavior)
        defaultCacheBehavior = defaultCacheBehaviorDecoded
        let cacheBehaviorSettingsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheSettings.self, forKey: .cacheBehaviorSettings)
        cacheBehaviorSettings = cacheBehaviorSettingsDecoded
        let cacheBehaviorsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CacheBehaviorPerPath?].self, forKey: .cacheBehaviors)
        var cacheBehaviorsDecoded0:[LightsailClientTypes.CacheBehaviorPerPath]? = nil
        if let cacheBehaviorsContainer = cacheBehaviorsContainer {
            cacheBehaviorsDecoded0 = [LightsailClientTypes.CacheBehaviorPerPath]()
            for structure0 in cacheBehaviorsContainer {
                if let structure0 = structure0 {
                    cacheBehaviorsDecoded0?.append(structure0)
                }
            }
        }
        cacheBehaviors = cacheBehaviorsDecoded0
        let ableToUpdateBundleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ableToUpdateBundle)
        ableToUpdateBundle = ableToUpdateBundleDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes an Amazon Lightsail content delivery network (CDN) distribution.
    public struct LightsailDistribution: Swift.Equatable {
        /// Indicates whether the bundle that is currently applied to your distribution, specified using the distributionName parameter, can be changed to another bundle. Use the UpdateDistributionBundle action to change your distribution's bundle.
        public var ableToUpdateBundle: Swift.Bool?
        /// The alternate domain names of the distribution.
        public var alternativeDomainNames: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the distribution.
        public var arn: Swift.String?
        /// The ID of the bundle currently applied to the distribution.
        public var bundleId: Swift.String?
        /// An object that describes the cache behavior settings of the distribution.
        public var cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
        /// An array of objects that describe the per-path cache behavior of the distribution.
        public var cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
        /// The name of the SSL/TLS certificate attached to the distribution, if any.
        public var certificateName: Swift.String?
        /// The timestamp when the distribution was created.
        public var createdAt: ClientRuntime.Date?
        /// An object that describes the default cache behavior of the distribution.
        public var defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
        /// The domain name of the distribution.
        public var domainName: Swift.String?
        /// The IP address type of the distribution. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6.
        public var ipAddressType: LightsailClientTypes.IpAddressType?
        /// Indicates whether the distribution is enabled.
        public var isEnabled: Swift.Bool?
        /// An object that describes the location of the distribution, such as the Amazon Web Services Region and Availability Zone. Lightsail distributions are global resources that can reference an origin in any Amazon Web Services Region, and distribute its content globally. However, all distributions are located in the us-east-1 Region.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the distribution.
        public var name: Swift.String?
        /// An object that describes the origin resource of the distribution, such as a Lightsail instance, bucket, or load balancer. The distribution pulls, caches, and serves content from the origin.
        public var origin: LightsailClientTypes.Origin?
        /// The public DNS of the origin.
        public var originPublicDNS: Swift.String?
        /// The Lightsail resource type (e.g., Distribution).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The status of the distribution.
        public var status: Swift.String?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail distribution. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init (
            ableToUpdateBundle: Swift.Bool? = nil,
            alternativeDomainNames: [Swift.String]? = nil,
            arn: Swift.String? = nil,
            bundleId: Swift.String? = nil,
            cacheBehaviorSettings: LightsailClientTypes.CacheSettings? = nil,
            cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]? = nil,
            certificateName: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            defaultCacheBehavior: LightsailClientTypes.CacheBehavior? = nil,
            domainName: Swift.String? = nil,
            ipAddressType: LightsailClientTypes.IpAddressType? = nil,
            isEnabled: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            origin: LightsailClientTypes.Origin? = nil,
            originPublicDNS: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            status: Swift.String? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.ableToUpdateBundle = ableToUpdateBundle
            self.alternativeDomainNames = alternativeDomainNames
            self.arn = arn
            self.bundleId = bundleId
            self.cacheBehaviorSettings = cacheBehaviorSettings
            self.cacheBehaviors = cacheBehaviors
            self.certificateName = certificateName
            self.createdAt = createdAt
            self.defaultCacheBehavior = defaultCacheBehavior
            self.domainName = domainName
            self.ipAddressType = ipAddressType
            self.isEnabled = isEnabled
            self.location = location
            self.name = name
            self.origin = origin
            self.originPublicDNS = originPublicDNS
            self.resourceType = resourceType
            self.status = status
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.LoadBalancer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case configurationOptions
        case createdAt
        case dnsName
        case healthCheckPath
        case httpsRedirectionEnabled
        case instanceHealthSummary
        case instancePort
        case ipAddressType
        case location
        case name
        case `protocol` = "protocol"
        case publicPorts
        case resourceType
        case state
        case supportCode
        case tags
        case tlsCertificateSummaries
        case tlsPolicyName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let configurationOptions = configurationOptions {
            var configurationOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .configurationOptions)
            for (dictKey0, loadBalancerConfigurationOptions0) in configurationOptions {
                try configurationOptionsContainer.encode(loadBalancerConfigurationOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let healthCheckPath = self.healthCheckPath {
            try encodeContainer.encode(healthCheckPath, forKey: .healthCheckPath)
        }
        if let httpsRedirectionEnabled = self.httpsRedirectionEnabled {
            try encodeContainer.encode(httpsRedirectionEnabled, forKey: .httpsRedirectionEnabled)
        }
        if let instanceHealthSummary = instanceHealthSummary {
            var instanceHealthSummaryContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceHealthSummary)
            for instancehealthsummary0 in instanceHealthSummary {
                try instanceHealthSummaryContainer.encode(instancehealthsummary0)
            }
        }
        if let instancePort = self.instancePort {
            try encodeContainer.encode(instancePort, forKey: .instancePort)
        }
        if let ipAddressType = self.ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let publicPorts = publicPorts {
            var publicPortsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicPorts)
            for port0 in publicPorts {
                try publicPortsContainer.encode(port0)
            }
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let tlsCertificateSummaries = tlsCertificateSummaries {
            var tlsCertificateSummariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tlsCertificateSummaries)
            for loadbalancertlscertificatesummary0 in tlsCertificateSummaries {
                try tlsCertificateSummariesContainer.encode(loadbalancertlscertificatesummary0)
            }
        }
        if let tlsPolicyName = self.tlsPolicyName {
            try encodeContainer.encode(tlsPolicyName, forKey: .tlsPolicyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerState.self, forKey: .state)
        state = stateDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let publicPortsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .publicPorts)
        var publicPortsDecoded0:[Swift.Int]? = nil
        if let publicPortsContainer = publicPortsContainer {
            publicPortsDecoded0 = [Swift.Int]()
            for integer0 in publicPortsContainer {
                if let integer0 = integer0 {
                    publicPortsDecoded0?.append(integer0)
                }
            }
        }
        publicPorts = publicPortsDecoded0
        let healthCheckPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckPath)
        healthCheckPath = healthCheckPathDecoded
        let instancePortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancePort)
        instancePort = instancePortDecoded
        let instanceHealthSummaryContainer = try containerValues.decodeIfPresent([LightsailClientTypes.InstanceHealthSummary?].self, forKey: .instanceHealthSummary)
        var instanceHealthSummaryDecoded0:[LightsailClientTypes.InstanceHealthSummary]? = nil
        if let instanceHealthSummaryContainer = instanceHealthSummaryContainer {
            instanceHealthSummaryDecoded0 = [LightsailClientTypes.InstanceHealthSummary]()
            for structure0 in instanceHealthSummaryContainer {
                if let structure0 = structure0 {
                    instanceHealthSummaryDecoded0?.append(structure0)
                }
            }
        }
        instanceHealthSummary = instanceHealthSummaryDecoded0
        let tlsCertificateSummariesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LoadBalancerTlsCertificateSummary?].self, forKey: .tlsCertificateSummaries)
        var tlsCertificateSummariesDecoded0:[LightsailClientTypes.LoadBalancerTlsCertificateSummary]? = nil
        if let tlsCertificateSummariesContainer = tlsCertificateSummariesContainer {
            tlsCertificateSummariesDecoded0 = [LightsailClientTypes.LoadBalancerTlsCertificateSummary]()
            for structure0 in tlsCertificateSummariesContainer {
                if let structure0 = structure0 {
                    tlsCertificateSummariesDecoded0?.append(structure0)
                }
            }
        }
        tlsCertificateSummaries = tlsCertificateSummariesDecoded0
        let configurationOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .configurationOptions)
        var configurationOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let configurationOptionsContainer = configurationOptionsContainer {
            configurationOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in configurationOptionsContainer {
                if let string0 = string0 {
                    configurationOptionsDecoded0?[key0] = string0
                }
            }
        }
        configurationOptions = configurationOptionsDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let httpsRedirectionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .httpsRedirectionEnabled)
        httpsRedirectionEnabled = httpsRedirectionEnabledDecoded
        let tlsPolicyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tlsPolicyName)
        tlsPolicyName = tlsPolicyNameDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a load balancer.
    public struct LoadBalancer: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the load balancer.
        public var arn: Swift.String?
        /// A string to string map of the configuration options for your load balancer. Valid values are listed below.
        public var configurationOptions: [Swift.String:Swift.String]?
        /// The date when your load balancer was created.
        public var createdAt: ClientRuntime.Date?
        /// The DNS name of your Lightsail load balancer.
        public var dnsName: Swift.String?
        /// The path you specified to perform your health checks. If no path is specified, the load balancer tries to make a request to the default (root) page.
        public var healthCheckPath: Swift.String?
        /// A Boolean value that indicates whether HTTPS redirection is enabled for the load balancer.
        public var httpsRedirectionEnabled: Swift.Bool?
        /// An array of InstanceHealthSummary objects describing the health of the load balancer.
        public var instanceHealthSummary: [LightsailClientTypes.InstanceHealthSummary]?
        /// The port where the load balancer will direct traffic to your Lightsail instances. For HTTP traffic, it's port 80. For HTTPS traffic, it's port 443.
        public var instancePort: Swift.Int?
        /// The IP address type of the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6.
        public var ipAddressType: LightsailClientTypes.IpAddressType?
        /// The AWS Region where your load balancer was created (e.g., us-east-2a). Lightsail automatically creates your load balancer across Availability Zones.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the load balancer (e.g., my-load-balancer).
        public var name: Swift.String?
        /// The protocol you have enabled for your load balancer. Valid values are below. You can't just have HTTP_HTTPS, but you can have just HTTP.
        public var `protocol`: LightsailClientTypes.LoadBalancerProtocol?
        /// An array of public port settings for your load balancer. For HTTP, use port 80. For HTTPS, use port 443.
        public var publicPorts: [Swift.Int]?
        /// The resource type (e.g., LoadBalancer.
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The status of your load balancer. Valid values are below.
        public var state: LightsailClientTypes.LoadBalancerState?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail load balancer. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?
        /// An array of LoadBalancerTlsCertificateSummary objects that provide additional information about the SSL/TLS certificates. For example, if true, the certificate is attached to the load balancer.
        public var tlsCertificateSummaries: [LightsailClientTypes.LoadBalancerTlsCertificateSummary]?
        /// The name of the TLS security policy for the load balancer.
        public var tlsPolicyName: Swift.String?

        public init (
            arn: Swift.String? = nil,
            configurationOptions: [Swift.String:Swift.String]? = nil,
            createdAt: ClientRuntime.Date? = nil,
            dnsName: Swift.String? = nil,
            healthCheckPath: Swift.String? = nil,
            httpsRedirectionEnabled: Swift.Bool? = nil,
            instanceHealthSummary: [LightsailClientTypes.InstanceHealthSummary]? = nil,
            instancePort: Swift.Int? = nil,
            ipAddressType: LightsailClientTypes.IpAddressType? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            `protocol`: LightsailClientTypes.LoadBalancerProtocol? = nil,
            publicPorts: [Swift.Int]? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            state: LightsailClientTypes.LoadBalancerState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            tlsCertificateSummaries: [LightsailClientTypes.LoadBalancerTlsCertificateSummary]? = nil,
            tlsPolicyName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.configurationOptions = configurationOptions
            self.createdAt = createdAt
            self.dnsName = dnsName
            self.healthCheckPath = healthCheckPath
            self.httpsRedirectionEnabled = httpsRedirectionEnabled
            self.instanceHealthSummary = instanceHealthSummary
            self.instancePort = instancePort
            self.ipAddressType = ipAddressType
            self.location = location
            self.name = name
            self.`protocol` = `protocol`
            self.publicPorts = publicPorts
            self.resourceType = resourceType
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
            self.tlsCertificateSummaries = tlsCertificateSummaries
            self.tlsPolicyName = tlsPolicyName
        }
    }

}

extension LightsailClientTypes {
    public enum LoadBalancerAttributeName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case healthcheckpath
        case httpsredirectionenabled
        case sessionstickinessenabled
        case sessionstickinessLbCookiedurationseconds
        case tlspolicyname
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerAttributeName] {
            return [
                .healthcheckpath,
                .httpsredirectionenabled,
                .sessionstickinessenabled,
                .sessionstickinessLbCookiedurationseconds,
                .tlspolicyname,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .healthcheckpath: return "HealthCheckPath"
            case .httpsredirectionenabled: return "HttpsRedirectionEnabled"
            case .sessionstickinessenabled: return "SessionStickinessEnabled"
            case .sessionstickinessLbCookiedurationseconds: return "SessionStickiness_LB_CookieDurationSeconds"
            case .tlspolicyname: return "TlsPolicyName"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerAttributeName(rawValue: rawValue) ?? LoadBalancerAttributeName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum LoadBalancerMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case clienttlsnegotiationerrorcount
        case httpcodeInstance2xxCount
        case httpcodeInstance3xxCount
        case httpcodeInstance4xxCount
        case httpcodeInstance5xxCount
        case httpcodeLb4xxCount
        case httpcodeLb5xxCount
        case healthyhostcount
        case instanceresponsetime
        case rejectedconnectioncount
        case requestcount
        case unhealthyhostcount
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerMetricName] {
            return [
                .clienttlsnegotiationerrorcount,
                .httpcodeInstance2xxCount,
                .httpcodeInstance3xxCount,
                .httpcodeInstance4xxCount,
                .httpcodeInstance5xxCount,
                .httpcodeLb4xxCount,
                .httpcodeLb5xxCount,
                .healthyhostcount,
                .instanceresponsetime,
                .rejectedconnectioncount,
                .requestcount,
                .unhealthyhostcount,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .clienttlsnegotiationerrorcount: return "ClientTLSNegotiationErrorCount"
            case .httpcodeInstance2xxCount: return "HTTPCode_Instance_2XX_Count"
            case .httpcodeInstance3xxCount: return "HTTPCode_Instance_3XX_Count"
            case .httpcodeInstance4xxCount: return "HTTPCode_Instance_4XX_Count"
            case .httpcodeInstance5xxCount: return "HTTPCode_Instance_5XX_Count"
            case .httpcodeLb4xxCount: return "HTTPCode_LB_4XX_Count"
            case .httpcodeLb5xxCount: return "HTTPCode_LB_5XX_Count"
            case .healthyhostcount: return "HealthyHostCount"
            case .instanceresponsetime: return "InstanceResponseTime"
            case .rejectedconnectioncount: return "RejectedConnectionCount"
            case .requestcount: return "RequestCount"
            case .unhealthyhostcount: return "UnhealthyHostCount"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerMetricName(rawValue: rawValue) ?? LoadBalancerMetricName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum LoadBalancerProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case http
        case httpHttps
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerProtocol] {
            return [
                .http,
                .httpHttps,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .http: return "HTTP"
            case .httpHttps: return "HTTP_HTTPS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerProtocol(rawValue: rawValue) ?? LoadBalancerProtocol.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum LoadBalancerState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case activeimpaired
        case failed
        case provisioning
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerState] {
            return [
                .active,
                .activeimpaired,
                .failed,
                .provisioning,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .activeimpaired: return "active_impaired"
            case .failed: return "failed"
            case .provisioning: return "provisioning"
            case .unknown: return "unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerState(rawValue: rawValue) ?? LoadBalancerState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case domainName
        case domainValidationRecords
        case failureReason
        case isAttached
        case issuedAt
        case issuer
        case keyAlgorithm
        case loadBalancerName
        case location
        case name
        case notAfter
        case notBefore
        case renewalSummary
        case resourceType
        case revocationReason
        case revokedAt
        case serial
        case signatureAlgorithm
        case status
        case subject
        case subjectAlternativeNames
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainValidationRecords = domainValidationRecords {
            var domainValidationRecordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationRecords)
            for loadbalancertlscertificatedomainvalidationrecord0 in domainValidationRecords {
                try domainValidationRecordsContainer.encode(loadbalancertlscertificatedomainvalidationrecord0)
            }
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason.rawValue, forKey: .failureReason)
        }
        if let isAttached = self.isAttached {
            try encodeContainer.encode(isAttached, forKey: .isAttached)
        }
        if let issuedAt = self.issuedAt {
            try encodeContainer.encodeTimestamp(issuedAt, format: .epochSeconds, forKey: .issuedAt)
        }
        if let issuer = self.issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
        if let keyAlgorithm = self.keyAlgorithm {
            try encodeContainer.encode(keyAlgorithm, forKey: .keyAlgorithm)
        }
        if let loadBalancerName = self.loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notAfter = self.notAfter {
            try encodeContainer.encodeTimestamp(notAfter, format: .epochSeconds, forKey: .notAfter)
        }
        if let notBefore = self.notBefore {
            try encodeContainer.encodeTimestamp(notBefore, format: .epochSeconds, forKey: .notBefore)
        }
        if let renewalSummary = self.renewalSummary {
            try encodeContainer.encode(renewalSummary, forKey: .renewalSummary)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let revocationReason = self.revocationReason {
            try encodeContainer.encode(revocationReason.rawValue, forKey: .revocationReason)
        }
        if let revokedAt = self.revokedAt {
            try encodeContainer.encodeTimestamp(revokedAt, format: .epochSeconds, forKey: .revokedAt)
        }
        if let serial = self.serial {
            try encodeContainer.encode(serial, forKey: .serial)
        }
        if let signatureAlgorithm = self.signatureAlgorithm {
            try encodeContainer.encode(signatureAlgorithm, forKey: .signatureAlgorithm)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let subjectAlternativeNames = subjectAlternativeNames {
            var subjectAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subjectAlternativeNames)
            for string0 in subjectAlternativeNames {
                try subjectAlternativeNamesContainer.encode(string0)
            }
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let isAttachedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAttached)
        isAttached = isAttachedDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateStatus.self, forKey: .status)
        status = statusDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let domainValidationRecordsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord?].self, forKey: .domainValidationRecords)
        var domainValidationRecordsDecoded0:[LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord]? = nil
        if let domainValidationRecordsContainer = domainValidationRecordsContainer {
            domainValidationRecordsDecoded0 = [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord]()
            for structure0 in domainValidationRecordsContainer {
                if let structure0 = structure0 {
                    domainValidationRecordsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationRecords = domainValidationRecordsDecoded0
        let failureReasonDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateFailureReason.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let issuedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .issuedAt)
        issuedAt = issuedAtDecoded
        let issuerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuer)
        issuer = issuerDecoded
        let keyAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyAlgorithm)
        keyAlgorithm = keyAlgorithmDecoded
        let notAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .notAfter)
        notAfter = notAfterDecoded
        let notBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .notBefore)
        notBefore = notBeforeDecoded
        let renewalSummaryDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary.self, forKey: .renewalSummary)
        renewalSummary = renewalSummaryDecoded
        let revocationReasonDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateRevocationReason.self, forKey: .revocationReason)
        revocationReason = revocationReasonDecoded
        let revokedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .revokedAt)
        revokedAt = revokedAtDecoded
        let serialDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serial)
        serial = serialDecoded
        let signatureAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signatureAlgorithm)
        signatureAlgorithm = signatureAlgorithmDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let subjectAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subjectAlternativeNames)
        var subjectAlternativeNamesDecoded0:[Swift.String]? = nil
        if let subjectAlternativeNamesContainer = subjectAlternativeNamesContainer {
            subjectAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in subjectAlternativeNamesContainer {
                if let string0 = string0 {
                    subjectAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        subjectAlternativeNames = subjectAlternativeNamesDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes a load balancer SSL/TLS certificate. TLS is just an updated, more secure version of Secure Socket Layer (SSL).
    public struct LoadBalancerTlsCertificate: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the SSL/TLS certificate.
        public var arn: Swift.String?
        /// The time when you created your SSL/TLS certificate.
        public var createdAt: ClientRuntime.Date?
        /// The domain name for your SSL/TLS certificate.
        public var domainName: Swift.String?
        /// An array of LoadBalancerTlsCertificateDomainValidationRecord objects describing the records.
        public var domainValidationRecords: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord]?
        /// The validation failure reason, if any, of the certificate. The following failure reasons are possible:
        ///
        /// * NO_AVAILABLE_CONTACTS - This failure applies to email validation, which is not available for Lightsail certificates.
        ///
        /// * ADDITIONAL_VERIFICATION_REQUIRED - Lightsail requires additional information to process this certificate request. This can happen as a fraud-protection measure, such as when the domain ranks within the Alexa top 1000 websites. To provide the required information, use the [AWS Support Center](https://console.aws.amazon.com/support/home) to contact AWS Support. You cannot request a certificate for Amazon-owned domain names such as those ending in amazonaws.com, cloudfront.net, or elasticbeanstalk.com.
        ///
        /// * DOMAIN_NOT_ALLOWED - One or more of the domain names in the certificate request was reported as an unsafe domain by [VirusTotal](https://www.virustotal.com/gui/home/url). To correct the problem, search for your domain name on the [VirusTotal](https://www.virustotal.com/gui/home/url) website. If your domain is reported as suspicious, see [Google Help for Hacked Websites](https://developers.google.com/web/fundamentals/security/hacked) to learn what you can do. If you believe that the result is a false positive, notify the organization that is reporting the domain. VirusTotal is an aggregate of several antivirus and URL scanners and cannot remove your domain from a block list itself. After you correct the problem and the VirusTotal registry has been updated, request a new certificate. If you see this error and your domain is not included in the VirusTotal list, visit the [AWS Support Center](https://console.aws.amazon.com/support/home) and create a case.
        ///
        /// * INVALID_PUBLIC_DOMAIN - One or more of the domain names in the certificate request is not valid. Typically, this is because a domain name in the request is not a valid top-level domain. Try to request a certificate again, correcting any spelling errors or typos that were in the failed request, and ensure that all domain names in the request are for valid top-level domains. For example, you cannot request a certificate for example.invalidpublicdomain because invalidpublicdomain is not a valid top-level domain.
        ///
        /// * OTHER - Typically, this failure occurs when there is a typographical error in one or more of the domain names in the certificate request. Try to request a certificate again, correcting any spelling errors or typos that were in the failed request.
        public var failureReason: LightsailClientTypes.LoadBalancerTlsCertificateFailureReason?
        /// When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
        public var isAttached: Swift.Bool?
        /// The time when the SSL/TLS certificate was issued.
        public var issuedAt: ClientRuntime.Date?
        /// The issuer of the certificate.
        public var issuer: Swift.String?
        /// The algorithm used to generate the key pair (the public and private key).
        public var keyAlgorithm: Swift.String?
        /// The load balancer name where your SSL/TLS certificate is attached.
        public var loadBalancerName: Swift.String?
        /// The Amazon Web Services Region and Availability Zone where you created your certificate.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the SSL/TLS certificate (e.g., my-certificate).
        public var name: Swift.String?
        /// The timestamp when the SSL/TLS certificate expires.
        public var notAfter: ClientRuntime.Date?
        /// The timestamp when the SSL/TLS certificate is first valid.
        public var notBefore: ClientRuntime.Date?
        /// An object that describes the status of the certificate renewal managed by Lightsail.
        public var renewalSummary: LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary?
        /// The resource type (e.g., LoadBalancerTlsCertificate).
        ///
        /// * Instance - A Lightsail instance (a virtual private server)
        ///
        /// * StaticIp - A static IP address
        ///
        /// * KeyPair - The key pair used to connect to a Lightsail instance
        ///
        /// * InstanceSnapshot - A Lightsail instance snapshot
        ///
        /// * Domain - A DNS zone
        ///
        /// * PeeredVpc - A peered VPC
        ///
        /// * LoadBalancer - A Lightsail load balancer
        ///
        /// * LoadBalancerTlsCertificate - An SSL/TLS certificate associated with a Lightsail load balancer
        ///
        /// * Disk - A Lightsail block storage disk
        ///
        /// * DiskSnapshot - A block storage disk snapshot
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The reason the certificate was revoked. This value is present only when the certificate status is REVOKED.
        public var revocationReason: LightsailClientTypes.LoadBalancerTlsCertificateRevocationReason?
        /// The timestamp when the certificate was revoked. This value is present only when the certificate status is REVOKED.
        public var revokedAt: ClientRuntime.Date?
        /// The serial number of the certificate.
        public var serial: Swift.String?
        /// The algorithm that was used to sign the certificate.
        public var signatureAlgorithm: Swift.String?
        /// The validation status of the SSL/TLS certificate. Valid values are below.
        public var status: LightsailClientTypes.LoadBalancerTlsCertificateStatus?
        /// The name of the entity that is associated with the public key contained in the certificate.
        public var subject: Swift.String?
        /// An array of strings that specify the alternate domains (e.g., example2.com) and subdomains (e.g., blog.example.com) for the certificate.
        public var subjectAlternativeNames: [Swift.String]?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail load balancer or SSL/TLS certificate. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            domainName: Swift.String? = nil,
            domainValidationRecords: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord]? = nil,
            failureReason: LightsailClientTypes.LoadBalancerTlsCertificateFailureReason? = nil,
            isAttached: Swift.Bool? = nil,
            issuedAt: ClientRuntime.Date? = nil,
            issuer: Swift.String? = nil,
            keyAlgorithm: Swift.String? = nil,
            loadBalancerName: Swift.String? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            notAfter: ClientRuntime.Date? = nil,
            notBefore: ClientRuntime.Date? = nil,
            renewalSummary: LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            revocationReason: LightsailClientTypes.LoadBalancerTlsCertificateRevocationReason? = nil,
            revokedAt: ClientRuntime.Date? = nil,
            serial: Swift.String? = nil,
            signatureAlgorithm: Swift.String? = nil,
            status: LightsailClientTypes.LoadBalancerTlsCertificateStatus? = nil,
            subject: Swift.String? = nil,
            subjectAlternativeNames: [Swift.String]? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.domainName = domainName
            self.domainValidationRecords = domainValidationRecords
            self.failureReason = failureReason
            self.isAttached = isAttached
            self.issuedAt = issuedAt
            self.issuer = issuer
            self.keyAlgorithm = keyAlgorithm
            self.loadBalancerName = loadBalancerName
            self.location = location
            self.name = name
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.renewalSummary = renewalSummary
            self.resourceType = resourceType
            self.revocationReason = revocationReason
            self.revokedAt = revokedAt
            self.serial = serial
            self.signatureAlgorithm = signatureAlgorithm
            self.status = status
            self.subject = subject
            self.subjectAlternativeNames = subjectAlternativeNames
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationStateCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LightsailClientTypes {
    /// An object that describes the state of the canonical name (CNAME) records that are automatically added by Lightsail to the DNS of the domain to validate domain ownership.
    public struct LoadBalancerTlsCertificateDnsRecordCreationState: Swift.Equatable {
        /// The status code for the automated DNS record creation. Following are the possible values:
        ///
        /// * SUCCEEDED - The validation records were successfully added.
        ///
        /// * STARTED - The automatic DNS record creation has started.
        ///
        /// * FAILED - The validation record addition failed.
        public var code: LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationStateCode?
        /// The message that describes the reason for the status code.
        public var message: Swift.String?

        public init (
            code: LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationStateCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension LightsailClientTypes {
    public enum LoadBalancerTlsCertificateDnsRecordCreationStateCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateDnsRecordCreationStateCode] {
            return [
                .failed,
                .started,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .started: return "STARTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerTlsCertificateDnsRecordCreationStateCode(rawValue: rawValue) ?? LoadBalancerTlsCertificateDnsRecordCreationStateCode.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum LoadBalancerTlsCertificateDomainStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pendingvalidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateDomainStatus] {
            return [
                .failed,
                .pendingvalidation,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerTlsCertificateDomainStatus(rawValue: rawValue) ?? LoadBalancerTlsCertificateDomainStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
        case validationStatus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let validationStatus = self.validationStatus {
            try encodeContainer.encode(validationStatus.rawValue, forKey: .validationStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let validationStatusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus.self, forKey: .validationStatus)
        validationStatus = validationStatusDecoded
    }
}

extension LightsailClientTypes {
    /// Contains information about the domain names on an SSL/TLS certificate that you will use to validate domain ownership.
    public struct LoadBalancerTlsCertificateDomainValidationOption: Swift.Equatable {
        /// The fully qualified domain name in the certificate request.
        public var domainName: Swift.String?
        /// The status of the domain validation. Valid values are listed below.
        public var validationStatus: LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus?

        public init (
            domainName: Swift.String? = nil,
            validationStatus: LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus? = nil
        )
        {
            self.domainName = domainName
            self.validationStatus = validationStatus
        }
    }

}

extension LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dnsRecordCreationState
        case domainName
        case name
        case type
        case validationStatus
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsRecordCreationState = self.dnsRecordCreationState {
            try encodeContainer.encode(dnsRecordCreationState, forKey: .dnsRecordCreationState)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let validationStatus = self.validationStatus {
            try encodeContainer.encode(validationStatus.rawValue, forKey: .validationStatus)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let validationStatusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus.self, forKey: .validationStatus)
        validationStatus = validationStatusDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let dnsRecordCreationStateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationState.self, forKey: .dnsRecordCreationState)
        dnsRecordCreationState = dnsRecordCreationStateDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the validation record of each domain name in the SSL/TLS certificate.
    public struct LoadBalancerTlsCertificateDomainValidationRecord: Swift.Equatable {
        /// An object that describes the state of the canonical name (CNAME) records that are automatically added by Lightsail to the DNS of a domain to validate domain ownership.
        public var dnsRecordCreationState: LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationState?
        /// The domain name against which your SSL/TLS certificate was validated.
        public var domainName: Swift.String?
        /// A fully qualified domain name in the certificate. For example, example.com.
        public var name: Swift.String?
        /// The type of validation record. For example, CNAME for domain validation.
        public var type: Swift.String?
        /// The validation status. Valid values are listed below.
        public var validationStatus: LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus?
        /// The value for that type.
        public var value: Swift.String?

        public init (
            dnsRecordCreationState: LightsailClientTypes.LoadBalancerTlsCertificateDnsRecordCreationState? = nil,
            domainName: Swift.String? = nil,
            name: Swift.String? = nil,
            type: Swift.String? = nil,
            validationStatus: LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus? = nil,
            value: Swift.String? = nil
        )
        {
            self.dnsRecordCreationState = dnsRecordCreationState
            self.domainName = domainName
            self.name = name
            self.type = type
            self.validationStatus = validationStatus
            self.value = value
        }
    }

}

extension LightsailClientTypes {
    public enum LoadBalancerTlsCertificateFailureReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case additionalverificationrequired
        case domainnotallowed
        case invalidpublicdomain
        case noavailablecontacts
        case other
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateFailureReason] {
            return [
                .additionalverificationrequired,
                .domainnotallowed,
                .invalidpublicdomain,
                .noavailablecontacts,
                .other,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .additionalverificationrequired: return "ADDITIONAL_VERIFICATION_REQUIRED"
            case .domainnotallowed: return "DOMAIN_NOT_ALLOWED"
            case .invalidpublicdomain: return "INVALID_PUBLIC_DOMAIN"
            case .noavailablecontacts: return "NO_AVAILABLE_CONTACTS"
            case .other: return "OTHER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerTlsCertificateFailureReason(rawValue: rawValue) ?? LoadBalancerTlsCertificateFailureReason.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum LoadBalancerTlsCertificateRenewalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pendingautorenewal
        case pendingvalidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateRenewalStatus] {
            return [
                .failed,
                .pendingautorenewal,
                .pendingvalidation,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pendingautorenewal: return "PENDING_AUTO_RENEWAL"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerTlsCertificateRenewalStatus(rawValue: rawValue) ?? LoadBalancerTlsCertificateRenewalStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainValidationOptions
        case renewalStatus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainValidationOptions = domainValidationOptions {
            var domainValidationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationOptions)
            for loadbalancertlscertificatedomainvalidationoption0 in domainValidationOptions {
                try domainValidationOptionsContainer.encode(loadbalancertlscertificatedomainvalidationoption0)
            }
        }
        if let renewalStatus = self.renewalStatus {
            try encodeContainer.encode(renewalStatus.rawValue, forKey: .renewalStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let renewalStatusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateRenewalStatus.self, forKey: .renewalStatus)
        renewalStatus = renewalStatusDecoded
        let domainValidationOptionsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption?].self, forKey: .domainValidationOptions)
        var domainValidationOptionsDecoded0:[LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption]? = nil
        if let domainValidationOptionsContainer = domainValidationOptionsContainer {
            domainValidationOptionsDecoded0 = [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption]()
            for structure0 in domainValidationOptionsContainer {
                if let structure0 = structure0 {
                    domainValidationOptionsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationOptions = domainValidationOptionsDecoded0
    }
}

extension LightsailClientTypes {
    /// Contains information about the status of Lightsail's managed renewal for the certificate. The renewal status of the certificate. The following renewal status are possible:
    ///
    /// * PendingAutoRenewal - Lightsail is attempting to automatically validate the domain names in the certificate. No further action is required.
    ///
    /// * PendingValidation - Lightsail couldn't automatically validate one or more domain names in the certificate. You must take action to validate these domain names or the certificate won't be renewed. If you used DNS validation, check to make sure your certificate's domain validation records exist in your domain's DNS, and that your certificate remains in use.
    ///
    /// * Success - All domain names in the certificate are validated, and Lightsail renewed the certificate. No further action is required.
    ///
    /// * Failed - One or more domain names were not validated before the certificate expired, and Lightsail did not renew the certificate. You can request a new certificate using the CreateCertificate action.
    public struct LoadBalancerTlsCertificateRenewalSummary: Swift.Equatable {
        /// Contains information about the validation of each domain name in the certificate, as it pertains to Lightsail's managed renewal. This is different from the initial validation that occurs as a result of the RequestCertificate request.
        public var domainValidationOptions: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption]?
        /// The renewal status of the certificate. The following renewal status are possible:
        ///
        /// * PendingAutoRenewal - Lightsail is attempting to automatically validate the domain names of the certificate. No further action is required.
        ///
        /// * PendingValidation - Lightsail couldn't automatically validate one or more domain names of the certificate. You must take action to validate these domain names or the certificate won't be renewed. Check to make sure your certificate's domain validation records exist in your domain's DNS, and that your certificate remains in use.
        ///
        /// * Success - All domain names in the certificate are validated, and Lightsail renewed the certificate. No further action is required.
        ///
        /// * Failed - One or more domain names were not validated before the certificate expired, and Lightsail did not renew the certificate. You can request a new certificate using the CreateCertificate action.
        public var renewalStatus: LightsailClientTypes.LoadBalancerTlsCertificateRenewalStatus?

        public init (
            domainValidationOptions: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption]? = nil,
            renewalStatus: LightsailClientTypes.LoadBalancerTlsCertificateRenewalStatus? = nil
        )
        {
            self.domainValidationOptions = domainValidationOptions
            self.renewalStatus = renewalStatus
        }
    }

}

extension LightsailClientTypes {
    public enum LoadBalancerTlsCertificateRevocationReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aacompromise
        case affiliationchanged
        case cacompromise
        case certificatehold
        case cessationofoperation
        case keycompromise
        case privilegewithdrawn
        case removefromcrl
        case superceded
        case unspecified
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateRevocationReason] {
            return [
                .aacompromise,
                .affiliationchanged,
                .cacompromise,
                .certificatehold,
                .cessationofoperation,
                .keycompromise,
                .privilegewithdrawn,
                .removefromcrl,
                .superceded,
                .unspecified,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aacompromise: return "A_A_COMPROMISE"
            case .affiliationchanged: return "AFFILIATION_CHANGED"
            case .cacompromise: return "CA_COMPROMISE"
            case .certificatehold: return "CERTIFICATE_HOLD"
            case .cessationofoperation: return "CESSATION_OF_OPERATION"
            case .keycompromise: return "KEY_COMPROMISE"
            case .privilegewithdrawn: return "PRIVILEGE_WITHDRAWN"
            case .removefromcrl: return "REMOVE_FROM_CRL"
            case .superceded: return "SUPERCEDED"
            case .unspecified: return "UNSPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerTlsCertificateRevocationReason(rawValue: rawValue) ?? LoadBalancerTlsCertificateRevocationReason.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum LoadBalancerTlsCertificateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case expired
        case failed
        case inactive
        case issued
        case pendingvalidation
        case revoked
        case unknown
        case validationtimedout
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateStatus] {
            return [
                .expired,
                .failed,
                .inactive,
                .issued,
                .pendingvalidation,
                .revoked,
                .unknown,
                .validationtimedout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .expired: return "EXPIRED"
            case .failed: return "FAILED"
            case .inactive: return "INACTIVE"
            case .issued: return "ISSUED"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .revoked: return "REVOKED"
            case .unknown: return "UNKNOWN"
            case .validationtimedout: return "VALIDATION_TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerTlsCertificateStatus(rawValue: rawValue) ?? LoadBalancerTlsCertificateStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isAttached
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let isAttached = self.isAttached {
            try encodeContainer.encode(isAttached, forKey: .isAttached)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let isAttachedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAttached)
        isAttached = isAttachedDecoded
    }
}

extension LightsailClientTypes {
    /// Provides a summary of SSL/TLS certificate metadata.
    public struct LoadBalancerTlsCertificateSummary: Swift.Equatable {
        /// When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
        public var isAttached: Swift.Bool?
        /// The name of the SSL/TLS certificate.
        public var name: Swift.String?

        public init (
            isAttached: Swift.Bool? = nil,
            name: Swift.String? = nil
        )
        {
            self.isAttached = isAttached
            self.name = name
        }
    }

}

extension LightsailClientTypes.LoadBalancerTlsPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphers
        case description
        case isDefault
        case name
        case protocols
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ciphers = ciphers {
            var ciphersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ciphers)
            for string0 in ciphers {
                try ciphersContainer.encode(string0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let isDefault = self.isDefault {
            try encodeContainer.encode(isDefault, forKey: .isDefault)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let protocols = protocols {
            var protocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protocols)
            for string0 in protocols {
                try protocolsContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let isDefaultDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDefault)
        isDefault = isDefaultDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let protocolsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .protocols)
        var protocolsDecoded0:[Swift.String]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [Swift.String]()
            for string0 in protocolsContainer {
                if let string0 = string0 {
                    protocolsDecoded0?.append(string0)
                }
            }
        }
        protocols = protocolsDecoded0
        let ciphersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ciphers)
        var ciphersDecoded0:[Swift.String]? = nil
        if let ciphersContainer = ciphersContainer {
            ciphersDecoded0 = [Swift.String]()
            for string0 in ciphersContainer {
                if let string0 = string0 {
                    ciphersDecoded0?.append(string0)
                }
            }
        }
        ciphers = ciphersDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes the TLS security policies that are available for Lightsail load balancers. For more information about load balancer TLS security policies, see [Configuring TLS security policies on your Amazon Lightsail load balancers](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy) in the Amazon Lightsail Developer Guide.
    public struct LoadBalancerTlsPolicy: Swift.Equatable {
        /// The ciphers used by the TLS security policy. The ciphers are listed in order of preference.
        public var ciphers: [Swift.String]?
        /// The description of the TLS security policy.
        public var description: Swift.String?
        /// A Boolean value that indicates whether the TLS security policy is the default.
        public var isDefault: Swift.Bool?
        /// The name of the TLS security policy.
        public var name: Swift.String?
        /// The protocols used in a given TLS security policy.
        public var protocols: [Swift.String]?

        public init (
            ciphers: [Swift.String]? = nil,
            description: Swift.String? = nil,
            isDefault: Swift.Bool? = nil,
            name: Swift.String? = nil,
            protocols: [Swift.String]? = nil
        )
        {
            self.ciphers = ciphers
            self.description = description
            self.isDefault = isDefault
            self.name = name
            self.protocols = protocols
        }
    }

}

extension LightsailClientTypes.LogEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a database log event.
    public struct LogEvent: Swift.Equatable {
        /// The timestamp when the database log event was created.
        public var createdAt: ClientRuntime.Date?
        /// The message of the database log event.
        public var message: Swift.String?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            message: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.message = message
        }
    }

}

extension LightsailClientTypes.MetricDatapoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case average
        case maximum
        case minimum
        case sampleCount
        case sum
        case timestamp
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let average = self.average {
            try encodeContainer.encode(average, forKey: .average)
        }
        if let maximum = self.maximum {
            try encodeContainer.encode(maximum, forKey: .maximum)
        }
        if let minimum = self.minimum {
            try encodeContainer.encode(minimum, forKey: .minimum)
        }
        if let sampleCount = self.sampleCount {
            try encodeContainer.encode(sampleCount, forKey: .sampleCount)
        }
        if let sum = self.sum {
            try encodeContainer.encode(sum, forKey: .sum)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encodeTimestamp(timestamp, format: .epochSeconds, forKey: .timestamp)
        }
        if let unit = self.unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let averageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .average)
        average = averageDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maximum)
        maximum = maximumDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minimum)
        minimum = minimumDecoded
        let sampleCountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sampleCount)
        sampleCount = sampleCountDecoded
        let sumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sum)
        sum = sumDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timestamp)
        timestamp = timestampDecoded
        let unitDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the metric data point.
    public struct MetricDatapoint: Swift.Equatable {
        /// The average.
        public var average: Swift.Double?
        /// The maximum.
        public var maximum: Swift.Double?
        /// The minimum.
        public var minimum: Swift.Double?
        /// The sample count.
        public var sampleCount: Swift.Double?
        /// The sum.
        public var sum: Swift.Double?
        /// The timestamp (e.g., 1479816991.349).
        public var timestamp: ClientRuntime.Date?
        /// The unit.
        public var unit: LightsailClientTypes.MetricUnit?

        public init (
            average: Swift.Double? = nil,
            maximum: Swift.Double? = nil,
            minimum: Swift.Double? = nil,
            sampleCount: Swift.Double? = nil,
            sum: Swift.Double? = nil,
            timestamp: ClientRuntime.Date? = nil,
            unit: LightsailClientTypes.MetricUnit? = nil
        )
        {
            self.average = average
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
            self.timestamp = timestamp
            self.unit = unit
        }
    }

}

extension LightsailClientTypes {
    public enum MetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case burstcapacitypercentage
        case burstcapacitytime
        case cpuutilization
        case clienttlsnegotiationerrorcount
        case databaseconnections
        case diskqueuedepth
        case freestoragespace
        case httpcodeInstance2xxCount
        case httpcodeInstance3xxCount
        case httpcodeInstance4xxCount
        case httpcodeInstance5xxCount
        case httpcodeLb4xxCount
        case httpcodeLb5xxCount
        case healthyhostcount
        case instanceresponsetime
        case networkin
        case networkout
        case networkreceivethroughput
        case networktransmitthroughput
        case rejectedconnectioncount
        case requestcount
        case statuscheckfailed
        case statuscheckfailedInstance
        case statuscheckfailedSystem
        case unhealthyhostcount
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricName] {
            return [
                .burstcapacitypercentage,
                .burstcapacitytime,
                .cpuutilization,
                .clienttlsnegotiationerrorcount,
                .databaseconnections,
                .diskqueuedepth,
                .freestoragespace,
                .httpcodeInstance2xxCount,
                .httpcodeInstance3xxCount,
                .httpcodeInstance4xxCount,
                .httpcodeInstance5xxCount,
                .httpcodeLb4xxCount,
                .httpcodeLb5xxCount,
                .healthyhostcount,
                .instanceresponsetime,
                .networkin,
                .networkout,
                .networkreceivethroughput,
                .networktransmitthroughput,
                .rejectedconnectioncount,
                .requestcount,
                .statuscheckfailed,
                .statuscheckfailedInstance,
                .statuscheckfailedSystem,
                .unhealthyhostcount,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .burstcapacitypercentage: return "BurstCapacityPercentage"
            case .burstcapacitytime: return "BurstCapacityTime"
            case .cpuutilization: return "CPUUtilization"
            case .clienttlsnegotiationerrorcount: return "ClientTLSNegotiationErrorCount"
            case .databaseconnections: return "DatabaseConnections"
            case .diskqueuedepth: return "DiskQueueDepth"
            case .freestoragespace: return "FreeStorageSpace"
            case .httpcodeInstance2xxCount: return "HTTPCode_Instance_2XX_Count"
            case .httpcodeInstance3xxCount: return "HTTPCode_Instance_3XX_Count"
            case .httpcodeInstance4xxCount: return "HTTPCode_Instance_4XX_Count"
            case .httpcodeInstance5xxCount: return "HTTPCode_Instance_5XX_Count"
            case .httpcodeLb4xxCount: return "HTTPCode_LB_4XX_Count"
            case .httpcodeLb5xxCount: return "HTTPCode_LB_5XX_Count"
            case .healthyhostcount: return "HealthyHostCount"
            case .instanceresponsetime: return "InstanceResponseTime"
            case .networkin: return "NetworkIn"
            case .networkout: return "NetworkOut"
            case .networkreceivethroughput: return "NetworkReceiveThroughput"
            case .networktransmitthroughput: return "NetworkTransmitThroughput"
            case .rejectedconnectioncount: return "RejectedConnectionCount"
            case .requestcount: return "RequestCount"
            case .statuscheckfailed: return "StatusCheckFailed"
            case .statuscheckfailedInstance: return "StatusCheckFailed_Instance"
            case .statuscheckfailedSystem: return "StatusCheckFailed_System"
            case .unhealthyhostcount: return "UnhealthyHostCount"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricName(rawValue: rawValue) ?? MetricName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum MetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStatistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricStatistic(rawValue: rawValue) ?? MetricStatistic.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum MetricUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bits
        case bitssecond
        case bytes
        case bytessecond
        case count
        case countsecond
        case gigabits
        case gigabitssecond
        case gigabytes
        case gigabytessecond
        case kilobits
        case kilobitssecond
        case kilobytes
        case kilobytessecond
        case megabits
        case megabitssecond
        case megabytes
        case megabytessecond
        case microseconds
        case milliseconds
        case `none`
        case percent
        case seconds
        case terabits
        case terabitssecond
        case terabytes
        case terabytessecond
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricUnit] {
            return [
                .bits,
                .bitssecond,
                .bytes,
                .bytessecond,
                .count,
                .countsecond,
                .gigabits,
                .gigabitssecond,
                .gigabytes,
                .gigabytessecond,
                .kilobits,
                .kilobitssecond,
                .kilobytes,
                .kilobytessecond,
                .megabits,
                .megabitssecond,
                .megabytes,
                .megabytessecond,
                .microseconds,
                .milliseconds,
                .none,
                .percent,
                .seconds,
                .terabits,
                .terabitssecond,
                .terabytes,
                .terabytessecond,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bits: return "Bits"
            case .bitssecond: return "Bits/Second"
            case .bytes: return "Bytes"
            case .bytessecond: return "Bytes/Second"
            case .count: return "Count"
            case .countsecond: return "Count/Second"
            case .gigabits: return "Gigabits"
            case .gigabitssecond: return "Gigabits/Second"
            case .gigabytes: return "Gigabytes"
            case .gigabytessecond: return "Gigabytes/Second"
            case .kilobits: return "Kilobits"
            case .kilobitssecond: return "Kilobits/Second"
            case .kilobytes: return "Kilobytes"
            case .kilobytessecond: return "Kilobytes/Second"
            case .megabits: return "Megabits"
            case .megabitssecond: return "Megabits/Second"
            case .megabytes: return "Megabytes"
            case .megabytessecond: return "Megabytes/Second"
            case .microseconds: return "Microseconds"
            case .milliseconds: return "Milliseconds"
            case .none: return "None"
            case .percent: return "Percent"
            case .seconds: return "Seconds"
            case .terabits: return "Terabits"
            case .terabitssecond: return "Terabits/Second"
            case .terabytes: return "Terabytes"
            case .terabytessecond: return "Terabytes/Second"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricUnit(rawValue: rawValue) ?? MetricUnit.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.MonitoredResourceInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case name
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension LightsailClientTypes {
    /// Describes resource being monitored by an alarm. An alarm is a way to monitor your Amazon Lightsail resource metrics. For more information, see [Alarms in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms).
    public struct MonitoredResourceInfo: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the resource being monitored.
        public var arn: Swift.String?
        /// The name of the Lightsail resource being monitored.
        public var name: Swift.String?
        /// The Lightsail resource type of the resource being monitored. Instances, load balancers, and relational databases are the only Lightsail resources that can currently be monitored by alarms.
        public var resourceType: LightsailClientTypes.ResourceType?

        public init (
            arn: Swift.String? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil
        )
        {
            self.arn = arn
            self.name = name
            self.resourceType = resourceType
        }
    }

}

extension LightsailClientTypes.MonthlyTransfer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gbPerMonthAllocated
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gbPerMonthAllocated = self.gbPerMonthAllocated {
            try encodeContainer.encode(gbPerMonthAllocated, forKey: .gbPerMonthAllocated)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gbPerMonthAllocatedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gbPerMonthAllocated)
        gbPerMonthAllocated = gbPerMonthAllocatedDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the monthly data transfer in and out of your virtual private server (or instance).
    public struct MonthlyTransfer: Swift.Equatable {
        /// The amount allocated per month (in GB).
        public var gbPerMonthAllocated: Swift.Int?

        public init (
            gbPerMonthAllocated: Swift.Int? = nil
        )
        {
            self.gbPerMonthAllocated = gbPerMonthAllocated
        }
    }

}

extension LightsailClientTypes.NameServersUpdateState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.NameServersUpdateStateCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the state of the name server records update made by Amazon Lightsail to an Amazon Route 53 registered domain. For more information, see [DNS in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/understanding-dns-in-amazon-lightsail) in the Amazon Lightsail Developer Guide.
    public struct NameServersUpdateState: Swift.Equatable {
        /// The status code for the name servers update. Following are the possible values:
        ///
        /// * SUCCEEDED - The name server records were successfully updated.
        ///
        /// * PENDING - The name server record update is in progress.
        ///
        /// * FAILED - The name server record update failed.
        ///
        /// * STARTED - The automatic name server record update started.
        public var code: LightsailClientTypes.NameServersUpdateStateCode?
        /// The message that describes the reason for the status code.
        public var message: Swift.String?

        public init (
            code: LightsailClientTypes.NameServersUpdateStateCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension LightsailClientTypes {
    public enum NameServersUpdateStateCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [NameServersUpdateStateCode] {
            return [
                .failed,
                .pending,
                .started,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .started: return "STARTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NameServersUpdateStateCode(rawValue: rawValue) ?? NameServersUpdateStateCode.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum NetworkProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case icmp
        case tcp
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkProtocol] {
            return [
                .all,
                .icmp,
                .tcp,
                .udp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "all"
            case .icmp: return "icmp"
            case .tcp: return "tcp"
            case .udp: return "udp"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NetworkProtocol(rawValue: rawValue) ?? NetworkProtocol.sdkUnknown(rawValue)
        }
    }
}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Lightsail throws this exception when it cannot find a resource.
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    let code: Swift.String?
    let docs: Swift.String?
    let message: Swift.String?
    let tip: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

extension OpenInstancePublicPortsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case portInfo
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let portInfo = self.portInfo {
            try encodeContainer.encode(portInfo, forKey: .portInfo)
        }
    }
}

extension OpenInstancePublicPortsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct OpenInstancePublicPortsInput: Swift.Equatable {
    /// The name of the instance for which to open ports.
    /// This member is required.
    public var instanceName: Swift.String?
    /// An object to describe the ports to open for the specified instance.
    /// This member is required.
    public var portInfo: LightsailClientTypes.PortInfo?

    public init (
        instanceName: Swift.String? = nil,
        portInfo: LightsailClientTypes.PortInfo? = nil
    )
    {
        self.instanceName = instanceName
        self.portInfo = portInfo
    }
}

struct OpenInstancePublicPortsInputBody: Swift.Equatable {
    let portInfo: LightsailClientTypes.PortInfo?
    let instanceName: Swift.String?
}

extension OpenInstancePublicPortsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case portInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PortInfo.self, forKey: .portInfo)
        portInfo = portInfoDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension OpenInstancePublicPortsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension OpenInstancePublicPortsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum OpenInstancePublicPortsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension OpenInstancePublicPortsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: OpenInstancePublicPortsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct OpenInstancePublicPortsOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct OpenInstancePublicPortsOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension OpenInstancePublicPortsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension LightsailClientTypes.Operation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case errorCode
        case errorDetails
        case id
        case isTerminal
        case location
        case operationDetails
        case operationType
        case resourceName
        case resourceType
        case status
        case statusChangedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorDetails = self.errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isTerminal = self.isTerminal {
            try encodeContainer.encode(isTerminal, forKey: .isTerminal)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let operationDetails = self.operationDetails {
            try encodeContainer.encode(operationDetails, forKey: .operationDetails)
        }
        if let operationType = self.operationType {
            try encodeContainer.encode(operationType.rawValue, forKey: .operationType)
        }
        if let resourceName = self.resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusChangedAt = self.statusChangedAt {
            try encodeContainer.encodeTimestamp(statusChangedAt, format: .epochSeconds, forKey: .statusChangedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let isTerminalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTerminal)
        isTerminal = isTerminalDecoded
        let operationDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationDetails)
        operationDetails = operationDetailsDecoded
        let operationTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.OperationType.self, forKey: .operationType)
        operationType = operationTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.OperationStatus.self, forKey: .status)
        status = statusDecoded
        let statusChangedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .statusChangedAt)
        statusChangedAt = statusChangedAtDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the API operation.
    public struct Operation: Swift.Equatable {
        /// The timestamp when the operation was initialized (e.g., 1479816991.349).
        public var createdAt: ClientRuntime.Date?
        /// The error code.
        public var errorCode: Swift.String?
        /// The error details.
        public var errorDetails: Swift.String?
        /// The ID of the operation.
        public var id: Swift.String?
        /// A Boolean value indicating whether the operation is terminal.
        public var isTerminal: Swift.Bool?
        /// The Amazon Web Services Region and Availability Zone.
        public var location: LightsailClientTypes.ResourceLocation?
        /// Details about the operation (e.g., Debian-1GB-Ohio-1).
        public var operationDetails: Swift.String?
        /// The type of operation.
        public var operationType: LightsailClientTypes.OperationType?
        /// The resource name.
        public var resourceName: Swift.String?
        /// The resource type.
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The status of the operation.
        public var status: LightsailClientTypes.OperationStatus?
        /// The timestamp when the status was changed (e.g., 1479816991.349).
        public var statusChangedAt: ClientRuntime.Date?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            errorCode: Swift.String? = nil,
            errorDetails: Swift.String? = nil,
            id: Swift.String? = nil,
            isTerminal: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            operationDetails: Swift.String? = nil,
            operationType: LightsailClientTypes.OperationType? = nil,
            resourceName: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            status: LightsailClientTypes.OperationStatus? = nil,
            statusChangedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.errorCode = errorCode
            self.errorDetails = errorDetails
            self.id = id
            self.isTerminal = isTerminal
            self.location = location
            self.operationDetails = operationDetails
            self.operationType = operationType
            self.resourceName = resourceName
            self.resourceType = resourceType
            self.status = status
            self.statusChangedAt = statusChangedAt
        }
    }

}

extension OperationFailureException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: OperationFailureExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Lightsail throws this exception when an operation fails to execute.
public struct OperationFailureException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct OperationFailureExceptionBody: Swift.Equatable {
    let code: Swift.String?
    let docs: Swift.String?
    let message: Swift.String?
    let tip: Swift.String?
}

extension OperationFailureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

extension LightsailClientTypes {
    public enum OperationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case notstarted
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationStatus] {
            return [
                .completed,
                .failed,
                .notstarted,
                .started,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .notstarted: return "NotStarted"
            case .started: return "Started"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperationStatus(rawValue: rawValue) ?? OperationStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum OperationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allocatestaticip
        case attachcertificatetodistribution
        case attachdisk
        case attachinstancestoloadbalancer
        case attachloadbalancertlscertificate
        case attachstaticip
        case closeinstancepublicports
        case createbucket
        case createbucketaccesskey
        case createcertificate
        case createcontactmethod
        case createcontainerservice
        case createcontainerservicedeployment
        case createcontainerserviceregistrylogin
        case createdisk
        case creatediskfromsnapshot
        case createdisksnapshot
        case createdistribution
        case createdomain
        case createinstance
        case createinstancesnapshot
        case createinstancesfromsnapshot
        case createloadbalancer
        case createloadbalancertlscertificate
        case createrelationaldatabase
        case createrelationaldatabasefromsnapshot
        case createrelationaldatabasesnapshot
        case deletealarm
        case deletebucket
        case deletebucketaccesskey
        case deletecertificate
        case deletecontactmethod
        case deletecontainerimage
        case deletecontainerservice
        case deletedisk
        case deletedisksnapshot
        case deletedistribution
        case deletedomain
        case deletedomainentry
        case deleteinstance
        case deleteinstancesnapshot
        case deleteknownhostkeys
        case deleteloadbalancer
        case deleteloadbalancertlscertificate
        case deleterelationaldatabase
        case deleterelationaldatabasesnapshot
        case detachcertificatefromdistribution
        case detachdisk
        case detachinstancesfromloadbalancer
        case detachstaticip
        case disableaddon
        case enableaddon
        case getalarms
        case getcontactmethods
        case openinstancepublicports
        case putalarm
        case putinstancepublicports
        case rebootinstance
        case rebootrelationaldatabase
        case registercontainerimage
        case releasestaticip
        case resetdistributioncache
        case sendcontactmethodverification
        case setipaddresstype
        case setresourceaccessforbucket
        case startinstance
        case startrelationaldatabase
        case stopinstance
        case stoprelationaldatabase
        case testalarm
        case updatebucket
        case updatebucketbundle
        case updatecontainerservice
        case updatedistribution
        case updatedistributionbundle
        case updatedomainentry
        case updateinstancemetadataoptions
        case updateloadbalancerattribute
        case updaterelationaldatabase
        case updaterelationaldatabaseparameters
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationType] {
            return [
                .allocatestaticip,
                .attachcertificatetodistribution,
                .attachdisk,
                .attachinstancestoloadbalancer,
                .attachloadbalancertlscertificate,
                .attachstaticip,
                .closeinstancepublicports,
                .createbucket,
                .createbucketaccesskey,
                .createcertificate,
                .createcontactmethod,
                .createcontainerservice,
                .createcontainerservicedeployment,
                .createcontainerserviceregistrylogin,
                .createdisk,
                .creatediskfromsnapshot,
                .createdisksnapshot,
                .createdistribution,
                .createdomain,
                .createinstance,
                .createinstancesnapshot,
                .createinstancesfromsnapshot,
                .createloadbalancer,
                .createloadbalancertlscertificate,
                .createrelationaldatabase,
                .createrelationaldatabasefromsnapshot,
                .createrelationaldatabasesnapshot,
                .deletealarm,
                .deletebucket,
                .deletebucketaccesskey,
                .deletecertificate,
                .deletecontactmethod,
                .deletecontainerimage,
                .deletecontainerservice,
                .deletedisk,
                .deletedisksnapshot,
                .deletedistribution,
                .deletedomain,
                .deletedomainentry,
                .deleteinstance,
                .deleteinstancesnapshot,
                .deleteknownhostkeys,
                .deleteloadbalancer,
                .deleteloadbalancertlscertificate,
                .deleterelationaldatabase,
                .deleterelationaldatabasesnapshot,
                .detachcertificatefromdistribution,
                .detachdisk,
                .detachinstancesfromloadbalancer,
                .detachstaticip,
                .disableaddon,
                .enableaddon,
                .getalarms,
                .getcontactmethods,
                .openinstancepublicports,
                .putalarm,
                .putinstancepublicports,
                .rebootinstance,
                .rebootrelationaldatabase,
                .registercontainerimage,
                .releasestaticip,
                .resetdistributioncache,
                .sendcontactmethodverification,
                .setipaddresstype,
                .setresourceaccessforbucket,
                .startinstance,
                .startrelationaldatabase,
                .stopinstance,
                .stoprelationaldatabase,
                .testalarm,
                .updatebucket,
                .updatebucketbundle,
                .updatecontainerservice,
                .updatedistribution,
                .updatedistributionbundle,
                .updatedomainentry,
                .updateinstancemetadataoptions,
                .updateloadbalancerattribute,
                .updaterelationaldatabase,
                .updaterelationaldatabaseparameters,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allocatestaticip: return "AllocateStaticIp"
            case .attachcertificatetodistribution: return "AttachCertificateToDistribution"
            case .attachdisk: return "AttachDisk"
            case .attachinstancestoloadbalancer: return "AttachInstancesToLoadBalancer"
            case .attachloadbalancertlscertificate: return "AttachLoadBalancerTlsCertificate"
            case .attachstaticip: return "AttachStaticIp"
            case .closeinstancepublicports: return "CloseInstancePublicPorts"
            case .createbucket: return "CreateBucket"
            case .createbucketaccesskey: return "CreateBucketAccessKey"
            case .createcertificate: return "CreateCertificate"
            case .createcontactmethod: return "CreateContactMethod"
            case .createcontainerservice: return "CreateContainerService"
            case .createcontainerservicedeployment: return "CreateContainerServiceDeployment"
            case .createcontainerserviceregistrylogin: return "CreateContainerServiceRegistryLogin"
            case .createdisk: return "CreateDisk"
            case .creatediskfromsnapshot: return "CreateDiskFromSnapshot"
            case .createdisksnapshot: return "CreateDiskSnapshot"
            case .createdistribution: return "CreateDistribution"
            case .createdomain: return "CreateDomain"
            case .createinstance: return "CreateInstance"
            case .createinstancesnapshot: return "CreateInstanceSnapshot"
            case .createinstancesfromsnapshot: return "CreateInstancesFromSnapshot"
            case .createloadbalancer: return "CreateLoadBalancer"
            case .createloadbalancertlscertificate: return "CreateLoadBalancerTlsCertificate"
            case .createrelationaldatabase: return "CreateRelationalDatabase"
            case .createrelationaldatabasefromsnapshot: return "CreateRelationalDatabaseFromSnapshot"
            case .createrelationaldatabasesnapshot: return "CreateRelationalDatabaseSnapshot"
            case .deletealarm: return "DeleteAlarm"
            case .deletebucket: return "DeleteBucket"
            case .deletebucketaccesskey: return "DeleteBucketAccessKey"
            case .deletecertificate: return "DeleteCertificate"
            case .deletecontactmethod: return "DeleteContactMethod"
            case .deletecontainerimage: return "DeleteContainerImage"
            case .deletecontainerservice: return "DeleteContainerService"
            case .deletedisk: return "DeleteDisk"
            case .deletedisksnapshot: return "DeleteDiskSnapshot"
            case .deletedistribution: return "DeleteDistribution"
            case .deletedomain: return "DeleteDomain"
            case .deletedomainentry: return "DeleteDomainEntry"
            case .deleteinstance: return "DeleteInstance"
            case .deleteinstancesnapshot: return "DeleteInstanceSnapshot"
            case .deleteknownhostkeys: return "DeleteKnownHostKeys"
            case .deleteloadbalancer: return "DeleteLoadBalancer"
            case .deleteloadbalancertlscertificate: return "DeleteLoadBalancerTlsCertificate"
            case .deleterelationaldatabase: return "DeleteRelationalDatabase"
            case .deleterelationaldatabasesnapshot: return "DeleteRelationalDatabaseSnapshot"
            case .detachcertificatefromdistribution: return "DetachCertificateFromDistribution"
            case .detachdisk: return "DetachDisk"
            case .detachinstancesfromloadbalancer: return "DetachInstancesFromLoadBalancer"
            case .detachstaticip: return "DetachStaticIp"
            case .disableaddon: return "DisableAddOn"
            case .enableaddon: return "EnableAddOn"
            case .getalarms: return "GetAlarms"
            case .getcontactmethods: return "GetContactMethods"
            case .openinstancepublicports: return "OpenInstancePublicPorts"
            case .putalarm: return "PutAlarm"
            case .putinstancepublicports: return "PutInstancePublicPorts"
            case .rebootinstance: return "RebootInstance"
            case .rebootrelationaldatabase: return "RebootRelationalDatabase"
            case .registercontainerimage: return "RegisterContainerImage"
            case .releasestaticip: return "ReleaseStaticIp"
            case .resetdistributioncache: return "ResetDistributionCache"
            case .sendcontactmethodverification: return "SendContactMethodVerification"
            case .setipaddresstype: return "SetIpAddressType"
            case .setresourceaccessforbucket: return "SetResourceAccessForBucket"
            case .startinstance: return "StartInstance"
            case .startrelationaldatabase: return "StartRelationalDatabase"
            case .stopinstance: return "StopInstance"
            case .stoprelationaldatabase: return "StopRelationalDatabase"
            case .testalarm: return "TestAlarm"
            case .updatebucket: return "UpdateBucket"
            case .updatebucketbundle: return "UpdateBucketBundle"
            case .updatecontainerservice: return "UpdateContainerService"
            case .updatedistribution: return "UpdateDistribution"
            case .updatedistributionbundle: return "UpdateDistributionBundle"
            case .updatedomainentry: return "UpdateDomainEntry"
            case .updateinstancemetadataoptions: return "UpdateInstanceMetadataOptions"
            case .updateloadbalancerattribute: return "UpdateLoadBalancerAttribute"
            case .updaterelationaldatabase: return "UpdateRelationalDatabase"
            case .updaterelationaldatabaseparameters: return "UpdateRelationalDatabaseParameters"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperationType(rawValue: rawValue) ?? OperationType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Origin: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case protocolPolicy
        case regionName
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let protocolPolicy = self.protocolPolicy {
            try encodeContainer.encode(protocolPolicy.rawValue, forKey: .protocolPolicy)
        }
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName.rawValue, forKey: .regionName)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RegionName.self, forKey: .regionName)
        regionName = regionNameDecoded
        let protocolPolicyDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.OriginProtocolPolicyEnum.self, forKey: .protocolPolicy)
        protocolPolicy = protocolPolicyDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the origin resource of an Amazon Lightsail content delivery network (CDN) distribution. An origin can be a Lightsail instance, bucket, or load balancer. A distribution pulls content from an origin, caches it, and serves it to viewers via a worldwide network of edge servers.
    public struct Origin: Swift.Equatable {
        /// The name of the origin resource.
        public var name: Swift.String?
        /// The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
        public var protocolPolicy: LightsailClientTypes.OriginProtocolPolicyEnum?
        /// The AWS Region name of the origin resource.
        public var regionName: LightsailClientTypes.RegionName?
        /// The resource type of the origin resource (e.g., Instance).
        public var resourceType: LightsailClientTypes.ResourceType?

        public init (
            name: Swift.String? = nil,
            protocolPolicy: LightsailClientTypes.OriginProtocolPolicyEnum? = nil,
            regionName: LightsailClientTypes.RegionName? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil
        )
        {
            self.name = name
            self.protocolPolicy = protocolPolicy
            self.regionName = regionName
            self.resourceType = resourceType
        }
    }

}

extension LightsailClientTypes {
    public enum OriginProtocolPolicyEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case httponly
        case httpsonly
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginProtocolPolicyEnum] {
            return [
                .httponly,
                .httpsonly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .httponly: return "http-only"
            case .httpsonly: return "https-only"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OriginProtocolPolicyEnum(rawValue: rawValue) ?? OriginProtocolPolicyEnum.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.PasswordData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphertext
        case keyPairName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ciphertext = self.ciphertext {
            try encodeContainer.encode(ciphertext, forKey: .ciphertext)
        }
        if let keyPairName = self.keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ciphertextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ciphertext)
        ciphertext = ciphertextDecoded
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
    }
}

extension LightsailClientTypes {
    /// The password data for the Windows Server-based instance, including the ciphertext and the key pair name.
    public struct PasswordData: Swift.Equatable {
        /// The encrypted password. Ciphertext will be an empty string if access to your new instance is not ready yet. When you create an instance, it can take up to 15 minutes for the instance to be ready. If you use the default key pair (LightsailDefaultKeyPair), the decrypted password will be available in the password field. If you are using a custom key pair, you need to use your own means of decryption. If you change the Administrator password on the instance, Lightsail will continue to return the original ciphertext value. When accessing the instance using RDP, you need to manually enter the Administrator password after changing it from the default.
        public var ciphertext: Swift.String?
        /// The name of the key pair that you used when creating your instance. If no key pair name was specified when creating the instance, Lightsail uses the default key pair (LightsailDefaultKeyPair). If you are using a custom key pair, you need to use your own means of decrypting your password using the ciphertext. Lightsail creates the ciphertext by encrypting your password with the public key part of this key pair.
        public var keyPairName: Swift.String?

        public init (
            ciphertext: Swift.String? = nil,
            keyPairName: Swift.String? = nil
        )
        {
            self.ciphertext = ciphertext
            self.keyPairName = keyPairName
        }
    }

}

extension PeerVpcInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension PeerVpcInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PeerVpcInput: Swift.Equatable {

    public init () { }
}

struct PeerVpcInputBody: Swift.Equatable {
}

extension PeerVpcInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension PeerVpcOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PeerVpcOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PeerVpcOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PeerVpcOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PeerVpcOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct PeerVpcOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct PeerVpcOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension PeerVpcOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension LightsailClientTypes.PendingMaintenanceAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case currentApplyDate
        case description
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let currentApplyDate = self.currentApplyDate {
            try encodeContainer.encodeTimestamp(currentApplyDate, format: .epochSeconds, forKey: .currentApplyDate)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .action)
        action = actionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let currentApplyDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .currentApplyDate)
        currentApplyDate = currentApplyDateDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a pending database maintenance action.
    public struct PendingMaintenanceAction: Swift.Equatable {
        /// The type of pending database maintenance action.
        public var action: Swift.String?
        /// The effective date of the pending database maintenance action.
        public var currentApplyDate: ClientRuntime.Date?
        /// Additional detail about the pending database maintenance action.
        public var description: Swift.String?

        public init (
            action: Swift.String? = nil,
            currentApplyDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil
        )
        {
            self.action = action
            self.currentApplyDate = currentApplyDate
            self.description = description
        }
    }

}

extension LightsailClientTypes.PendingModifiedRelationalDatabaseValues: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupRetentionEnabled
        case engineVersion
        case masterUserPassword
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupRetentionEnabled = self.backupRetentionEnabled {
            try encodeContainer.encode(backupRetentionEnabled, forKey: .backupRetentionEnabled)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let masterUserPassword = self.masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let backupRetentionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .backupRetentionEnabled)
        backupRetentionEnabled = backupRetentionEnabledDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a pending database value modification.
    public struct PendingModifiedRelationalDatabaseValues: Swift.Equatable {
        /// A Boolean value indicating whether automated backup retention is enabled.
        public var backupRetentionEnabled: Swift.Bool?
        /// The database engine version.
        public var engineVersion: Swift.String?
        /// The password for the master user of the database.
        public var masterUserPassword: Swift.String?

        public init (
            backupRetentionEnabled: Swift.Bool? = nil,
            engineVersion: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil
        )
        {
            self.backupRetentionEnabled = backupRetentionEnabled
            self.engineVersion = engineVersion
            self.masterUserPassword = masterUserPassword
        }
    }

}

extension LightsailClientTypes {
    public enum PortAccessType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `private`
        case `public`
        case sdkUnknown(Swift.String)

        public static var allCases: [PortAccessType] {
            return [
                .private,
                .public,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .private: return "Private"
            case .public: return "Public"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PortAccessType(rawValue: rawValue) ?? PortAccessType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.PortInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrListAliases
        case cidrs
        case fromPort
        case ipv6Cidrs
        case `protocol` = "protocol"
        case toPort
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrListAliases = cidrListAliases {
            var cidrListAliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrListAliases)
            for string0 in cidrListAliases {
                try cidrListAliasesContainer.encode(string0)
            }
        }
        if let cidrs = cidrs {
            var cidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrs)
            for string0 in cidrs {
                try cidrsContainer.encode(string0)
            }
        }
        if fromPort != 0 {
            try encodeContainer.encode(fromPort, forKey: .fromPort)
        }
        if let ipv6Cidrs = ipv6Cidrs {
            var ipv6CidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6Cidrs)
            for string0 in ipv6Cidrs {
                try ipv6CidrsContainer.encode(string0)
            }
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if toPort != 0 {
            try encodeContainer.encode(toPort, forKey: .toPort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fromPort) ?? 0
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .toPort) ?? 0
        toPort = toPortDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.NetworkProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let cidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrs)
        var cidrsDecoded0:[Swift.String]? = nil
        if let cidrsContainer = cidrsContainer {
            cidrsDecoded0 = [Swift.String]()
            for string0 in cidrsContainer {
                if let string0 = string0 {
                    cidrsDecoded0?.append(string0)
                }
            }
        }
        cidrs = cidrsDecoded0
        let ipv6CidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipv6Cidrs)
        var ipv6CidrsDecoded0:[Swift.String]? = nil
        if let ipv6CidrsContainer = ipv6CidrsContainer {
            ipv6CidrsDecoded0 = [Swift.String]()
            for string0 in ipv6CidrsContainer {
                if let string0 = string0 {
                    ipv6CidrsDecoded0?.append(string0)
                }
            }
        }
        ipv6Cidrs = ipv6CidrsDecoded0
        let cidrListAliasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrListAliases)
        var cidrListAliasesDecoded0:[Swift.String]? = nil
        if let cidrListAliasesContainer = cidrListAliasesContainer {
            cidrListAliasesDecoded0 = [Swift.String]()
            for string0 in cidrListAliasesContainer {
                if let string0 = string0 {
                    cidrListAliasesDecoded0?.append(string0)
                }
            }
        }
        cidrListAliases = cidrListAliasesDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes ports to open on an instance, the IP addresses allowed to connect to the instance through the ports, and the protocol.
    public struct PortInfo: Swift.Equatable {
        /// An alias that defines access for a preconfigured range of IP addresses. The only alias currently supported is lightsail-connect, which allows IP addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your instance.
        public var cidrListAliases: [Swift.String]?
        /// The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. The ipv6Cidrs parameter lists the IPv6 addresses that are allowed to connect to an instance. Examples:
        ///
        /// * To allow the IP address 192.0.2.44, specify 192.0.2.44 or 192.0.2.44/32.
        ///
        /// * To allow the IP addresses 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
        ///
        ///
        /// For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on Wikipedia.
        public var cidrs: [Swift.String]?
        /// The first port in a range of open ports on an instance. Allowed ports:
        ///
        /// * TCP and UDP - 0 to 65535
        ///
        /// * ICMP - The ICMP type for IPv4 addresses. For example, specify 8 as the fromPort (ICMP type), and -1 as the toPort (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on Wikipedia.
        ///
        /// * ICMPv6 - The ICMP type for IPv6 addresses. For example, specify 128 as the fromPort (ICMPv6 type), and 0 as toPort (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).
        public var fromPort: Swift.Int
        /// The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. Only devices with an IPv6 address can connect to an instance through IPv6; otherwise, IPv4 should be used. The cidrs parameter lists the IPv4 addresses that are allowed to connect to an instance. For more information about CIDR block notation, see [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) on Wikipedia.
        public var ipv6Cidrs: [Swift.String]?
        /// The IP protocol name. The name can be one of the following:
        ///
        /// * tcp - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.
        ///
        /// * all - All transport layer protocol types. For more general information, see [Transport layer](https://en.wikipedia.org/wiki/Transport_layer) on Wikipedia.
        ///
        /// * udp - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.
        ///
        /// * icmp - Internet Control Message Protocol (ICMP) is used to send error messages and operational information indicating success or failure when communicating with an instance. For example, an error is indicated when an instance could not be reached. When you specify icmp as the protocol, you must specify the ICMP type using the fromPort parameter, and ICMP code using the toPort parameter.
        public var `protocol`: LightsailClientTypes.NetworkProtocol?
        /// The last port in a range of open ports on an instance. Allowed ports:
        ///
        /// * TCP and UDP - 0 to 65535
        ///
        /// * ICMP - The ICMP code for IPv4 addresses. For example, specify 8 as the fromPort (ICMP type), and -1 as the toPort (ICMP code), to enable ICMP Ping. For more information, see [Control Messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages) on Wikipedia.
        ///
        /// * ICMPv6 - The ICMP code for IPv6 addresses. For example, specify 128 as the fromPort (ICMPv6 type), and 0 as toPort (ICMPv6 code). For more information, see [Internet Control Message Protocol for IPv6](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6).
        public var toPort: Swift.Int

        public init (
            cidrListAliases: [Swift.String]? = nil,
            cidrs: [Swift.String]? = nil,
            fromPort: Swift.Int = 0,
            ipv6Cidrs: [Swift.String]? = nil,
            `protocol`: LightsailClientTypes.NetworkProtocol? = nil,
            toPort: Swift.Int = 0
        )
        {
            self.cidrListAliases = cidrListAliases
            self.cidrs = cidrs
            self.fromPort = fromPort
            self.ipv6Cidrs = ipv6Cidrs
            self.`protocol` = `protocol`
            self.toPort = toPort
        }
    }

}

extension LightsailClientTypes {
    public enum PortInfoSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case closed
        case `default`
        case instance
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [PortInfoSourceType] {
            return [
                .closed,
                .default,
                .instance,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .closed: return "CLOSED"
            case .default: return "DEFAULT"
            case .instance: return "INSTANCE"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PortInfoSourceType(rawValue: rawValue) ?? PortInfoSourceType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum PortState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case closed
        case `open`
        case sdkUnknown(Swift.String)

        public static var allCases: [PortState] {
            return [
                .closed,
                .open,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .closed: return "closed"
            case .open: return "open"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PortState(rawValue: rawValue) ?? PortState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.PrivateRegistryAccess: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ecrImagePullerRole
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ecrImagePullerRole = self.ecrImagePullerRole {
            try encodeContainer.encode(ecrImagePullerRole, forKey: .ecrImagePullerRole)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ecrImagePullerRoleDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceECRImagePullerRole.self, forKey: .ecrImagePullerRole)
        ecrImagePullerRole = ecrImagePullerRoleDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the configuration for an Amazon Lightsail container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
    public struct PrivateRegistryAccess: Swift.Equatable {
        /// An object that describes the activation status of the role that you can use to grant a Lightsail container service access to Amazon ECR private repositories. If the role is activated, the Amazon Resource Name (ARN) of the role is also listed.
        public var ecrImagePullerRole: LightsailClientTypes.ContainerServiceECRImagePullerRole?

        public init (
            ecrImagePullerRole: LightsailClientTypes.ContainerServiceECRImagePullerRole? = nil
        )
        {
            self.ecrImagePullerRole = ecrImagePullerRole
        }
    }

}

extension LightsailClientTypes.PrivateRegistryAccessRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ecrImagePullerRole
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ecrImagePullerRole = self.ecrImagePullerRole {
            try encodeContainer.encode(ecrImagePullerRole, forKey: .ecrImagePullerRole)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ecrImagePullerRoleDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceECRImagePullerRoleRequest.self, forKey: .ecrImagePullerRole)
        ecrImagePullerRole = ecrImagePullerRoleDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a request to configure an Amazon Lightsail container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
    public struct PrivateRegistryAccessRequest: Swift.Equatable {
        /// An object to describe a request to activate or deactivate the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories.
        public var ecrImagePullerRole: LightsailClientTypes.ContainerServiceECRImagePullerRoleRequest?

        public init (
            ecrImagePullerRole: LightsailClientTypes.ContainerServiceECRImagePullerRoleRequest? = nil
        )
        {
            self.ecrImagePullerRole = ecrImagePullerRole
        }
    }

}

extension PutAlarmInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case comparisonOperator
        case contactProtocols
        case datapointsToAlarm
        case evaluationPeriods
        case metricName
        case monitoredResourceName
        case notificationEnabled
        case notificationTriggers
        case threshold
        case treatMissingData
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmName = self.alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
        if let comparisonOperator = self.comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let contactProtocols = contactProtocols {
            var contactProtocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contactProtocols)
            for contactprotocol0 in contactProtocols {
                try contactProtocolsContainer.encode(contactprotocol0.rawValue)
            }
        }
        if let datapointsToAlarm = self.datapointsToAlarm {
            try encodeContainer.encode(datapointsToAlarm, forKey: .datapointsToAlarm)
        }
        if let evaluationPeriods = self.evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let monitoredResourceName = self.monitoredResourceName {
            try encodeContainer.encode(monitoredResourceName, forKey: .monitoredResourceName)
        }
        if let notificationEnabled = self.notificationEnabled {
            try encodeContainer.encode(notificationEnabled, forKey: .notificationEnabled)
        }
        if let notificationTriggers = notificationTriggers {
            var notificationTriggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notificationTriggers)
            for alarmstate0 in notificationTriggers {
                try notificationTriggersContainer.encode(alarmstate0.rawValue)
            }
        }
        if let threshold = self.threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let treatMissingData = self.treatMissingData {
            try encodeContainer.encode(treatMissingData.rawValue, forKey: .treatMissingData)
        }
    }
}

extension PutAlarmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutAlarmInput: Swift.Equatable {
    /// The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
    /// This member is required.
    public var alarmName: Swift.String?
    /// The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
    /// This member is required.
    public var comparisonOperator: LightsailClientTypes.ComparisonOperator?
    /// The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both. A notification is sent via the specified contact protocol if notifications are enabled for the alarm, and when the alarm is triggered. A notification is not sent if a contact protocol is not specified, if the specified contact protocol is not configured in the Amazon Web Services Region, or if notifications are not enabled for the alarm using the notificationEnabled paramater. Use the CreateContactMethod action to configure a contact protocol in an Amazon Web Services Region.
    public var contactProtocols: [LightsailClientTypes.ContactProtocol]?
    /// The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an "M out of N" alarm, this value (datapointsToAlarm) is the M.
    public var datapointsToAlarm: Swift.Int?
    /// The number of most recent periods over which data is compared to the specified threshold. If you are setting an "M out of N" alarm, this value (evaluationPeriods) is the N. If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies the rolling period of time in which data points are evaluated. Each evaluation period is five minutes long. For example, specify an evaluation period of 24 to evaluate a metric over a rolling period of two hours. You can specify a minimum valuation period of 1 (5 minutes), and a maximum evaluation period of 288 (24 hours).
    /// This member is required.
    public var evaluationPeriods: Swift.Int?
    /// The name of the metric to associate with the alarm. You can configure up to two alarms per metric. The following metrics are available for each resource type:
    ///
    /// * Instances: BurstCapacityPercentage, BurstCapacityTime, CPUUtilization, NetworkIn, NetworkOut, StatusCheckFailed, StatusCheckFailed_Instance, and StatusCheckFailed_System.
    ///
    /// * Load balancers: ClientTLSNegotiationErrorCount, HealthyHostCount, UnhealthyHostCount, HTTPCode_LB_4XX_Count, HTTPCode_LB_5XX_Count, HTTPCode_Instance_2XX_Count, HTTPCode_Instance_3XX_Count, HTTPCode_Instance_4XX_Count, HTTPCode_Instance_5XX_Count, InstanceResponseTime, RejectedConnectionCount, and RequestCount.
    ///
    /// * Relational databases: CPUUtilization, DatabaseConnections, DiskQueueDepth, FreeStorageSpace, NetworkReceiveThroughput, and NetworkTransmitThroughput.
    ///
    ///
    /// For more information about these metrics, see [Metrics available in Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-resource-health-metrics#available-metrics).
    /// This member is required.
    public var metricName: LightsailClientTypes.MetricName?
    /// The name of the Lightsail resource that will be monitored. Instances, load balancers, and relational databases are the only Lightsail resources that can currently be monitored by alarms.
    /// This member is required.
    public var monitoredResourceName: Swift.String?
    /// Indicates whether the alarm is enabled. Notifications are enabled by default if you don't specify this parameter.
    public var notificationEnabled: Swift.Bool?
    /// The alarm states that trigger a notification. An alarm has the following possible states:
    ///
    /// * ALARM - The metric is outside of the defined threshold.
    ///
    /// * INSUFFICIENT_DATA - The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.
    ///
    /// * OK - The metric is within the defined threshold.
    ///
    ///
    /// When you specify a notification trigger, the ALARM state must be specified. The INSUFFICIENT_DATA and OK states can be specified in addition to the ALARM state.
    ///
    /// * If you specify OK as an alarm trigger, a notification is sent when the alarm switches from an ALARM or INSUFFICIENT_DATA alarm state to an OK state. This can be thought of as an all clear alarm notification.
    ///
    /// * If you specify INSUFFICIENT_DATA as the alarm trigger, a notification is sent when the alarm switches from an OK or ALARM alarm state to an INSUFFICIENT_DATA state.
    ///
    ///
    /// The notification trigger defaults to ALARM if you don't specify this parameter.
    public var notificationTriggers: [LightsailClientTypes.AlarmState]?
    /// The value against which the specified statistic is compared.
    /// This member is required.
    public var threshold: Swift.Double?
    /// Sets how this alarm will handle missing data points. An alarm can treat missing data in the following ways:
    ///
    /// * breaching - Assume the missing data is not within the threshold. Missing data counts towards the number of times the metric is not within the threshold.
    ///
    /// * notBreaching - Assume the missing data is within the threshold. Missing data does not count towards the number of times the metric is not within the threshold.
    ///
    /// * ignore - Ignore the missing data. Maintains the current alarm state.
    ///
    /// * missing - Missing data is treated as missing.
    ///
    ///
    /// If treatMissingData is not specified, the default behavior of missing is used.
    public var treatMissingData: LightsailClientTypes.TreatMissingData?

    public init (
        alarmName: Swift.String? = nil,
        comparisonOperator: LightsailClientTypes.ComparisonOperator? = nil,
        contactProtocols: [LightsailClientTypes.ContactProtocol]? = nil,
        datapointsToAlarm: Swift.Int? = nil,
        evaluationPeriods: Swift.Int? = nil,
        metricName: LightsailClientTypes.MetricName? = nil,
        monitoredResourceName: Swift.String? = nil,
        notificationEnabled: Swift.Bool? = nil,
        notificationTriggers: [LightsailClientTypes.AlarmState]? = nil,
        threshold: Swift.Double? = nil,
        treatMissingData: LightsailClientTypes.TreatMissingData? = nil
    )
    {
        self.alarmName = alarmName
        self.comparisonOperator = comparisonOperator
        self.contactProtocols = contactProtocols
        self.datapointsToAlarm = datapointsToAlarm
        self.evaluationPeriods = evaluationPeriods
        self.metricName = metricName
        self.monitoredResourceName = monitoredResourceName
        self.notificationEnabled = notificationEnabled
        self.notificationTriggers = notificationTriggers
        self.threshold = threshold
        self.treatMissingData = treatMissingData
    }
}

struct PutAlarmInputBody: Swift.Equatable {
    let alarmName: Swift.String?
    let metricName: LightsailClientTypes.MetricName?
    let monitoredResourceName: Swift.String?
    let comparisonOperator: LightsailClientTypes.ComparisonOperator?
    let threshold: Swift.Double?
    let evaluationPeriods: Swift.Int?
    let datapointsToAlarm: Swift.Int?
    let treatMissingData: LightsailClientTypes.TreatMissingData?
    let contactProtocols: [LightsailClientTypes.ContactProtocol]?
    let notificationTriggers: [LightsailClientTypes.AlarmState]?
    let notificationEnabled: Swift.Bool?
}

extension PutAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case comparisonOperator
        case contactProtocols
        case datapointsToAlarm
        case evaluationPeriods
        case metricName
        case monitoredResourceName
        case notificationEnabled
        case notificationTriggers
        case threshold
        case treatMissingData
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let monitoredResourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoredResourceName)
        monitoredResourceName = monitoredResourceNameDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let datapointsToAlarmDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .datapointsToAlarm)
        datapointsToAlarm = datapointsToAlarmDecoded
        let treatMissingDataDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.TreatMissingData.self, forKey: .treatMissingData)
        treatMissingData = treatMissingDataDecoded
        let contactProtocolsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContactProtocol?].self, forKey: .contactProtocols)
        var contactProtocolsDecoded0:[LightsailClientTypes.ContactProtocol]? = nil
        if let contactProtocolsContainer = contactProtocolsContainer {
            contactProtocolsDecoded0 = [LightsailClientTypes.ContactProtocol]()
            for enum0 in contactProtocolsContainer {
                if let enum0 = enum0 {
                    contactProtocolsDecoded0?.append(enum0)
                }
            }
        }
        contactProtocols = contactProtocolsDecoded0
        let notificationTriggersContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AlarmState?].self, forKey: .notificationTriggers)
        var notificationTriggersDecoded0:[LightsailClientTypes.AlarmState]? = nil
        if let notificationTriggersContainer = notificationTriggersContainer {
            notificationTriggersDecoded0 = [LightsailClientTypes.AlarmState]()
            for enum0 in notificationTriggersContainer {
                if let enum0 = enum0 {
                    notificationTriggersDecoded0?.append(enum0)
                }
            }
        }
        notificationTriggers = notificationTriggersDecoded0
        let notificationEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .notificationEnabled)
        notificationEnabled = notificationEnabledDecoded
    }
}

extension PutAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutAlarmOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutAlarmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct PutAlarmOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct PutAlarmOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension PutAlarmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension PutInstancePublicPortsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case portInfos
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let portInfos = portInfos {
            var portInfosContainer = encodeContainer.nestedUnkeyedContainer(forKey: .portInfos)
            for portinfo0 in portInfos {
                try portInfosContainer.encode(portinfo0)
            }
        }
    }
}

extension PutInstancePublicPortsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutInstancePublicPortsInput: Swift.Equatable {
    /// The name of the instance for which to open ports.
    /// This member is required.
    public var instanceName: Swift.String?
    /// An array of objects to describe the ports to open for the specified instance.
    /// This member is required.
    public var portInfos: [LightsailClientTypes.PortInfo]?

    public init (
        instanceName: Swift.String? = nil,
        portInfos: [LightsailClientTypes.PortInfo]? = nil
    )
    {
        self.instanceName = instanceName
        self.portInfos = portInfos
    }
}

struct PutInstancePublicPortsInputBody: Swift.Equatable {
    let portInfos: [LightsailClientTypes.PortInfo]?
    let instanceName: Swift.String?
}

extension PutInstancePublicPortsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case portInfos
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portInfosContainer = try containerValues.decodeIfPresent([LightsailClientTypes.PortInfo?].self, forKey: .portInfos)
        var portInfosDecoded0:[LightsailClientTypes.PortInfo]? = nil
        if let portInfosContainer = portInfosContainer {
            portInfosDecoded0 = [LightsailClientTypes.PortInfo]()
            for structure0 in portInfosContainer {
                if let structure0 = structure0 {
                    portInfosDecoded0?.append(structure0)
                }
            }
        }
        portInfos = portInfosDecoded0
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension PutInstancePublicPortsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutInstancePublicPortsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutInstancePublicPortsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutInstancePublicPortsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutInstancePublicPortsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct PutInstancePublicPortsOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct PutInstancePublicPortsOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension PutInstancePublicPortsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension LightsailClientTypes.QueryStringObject: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case option
        case queryStringsAllowList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let option = self.option {
            try encodeContainer.encode(option, forKey: .option)
        }
        if let queryStringsAllowList = queryStringsAllowList {
            var queryStringsAllowListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queryStringsAllowList)
            for string0 in queryStringsAllowList {
                try queryStringsAllowListContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .option)
        option = optionDecoded
        let queryStringsAllowListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .queryStringsAllowList)
        var queryStringsAllowListDecoded0:[Swift.String]? = nil
        if let queryStringsAllowListContainer = queryStringsAllowListContainer {
            queryStringsAllowListDecoded0 = [Swift.String]()
            for string0 in queryStringsAllowListContainer {
                if let string0 = string0 {
                    queryStringsAllowListDecoded0?.append(string0)
                }
            }
        }
        queryStringsAllowList = queryStringsAllowListDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes the query string parameters that an Amazon Lightsail content delivery network (CDN) distribution to bases caching on. For the query strings that you specify, your distribution caches separate versions of the specified content based on the query string values in viewer requests.
    public struct QueryStringObject: Swift.Equatable {
        /// Indicates whether the distribution forwards and caches based on query strings.
        public var option: Swift.Bool?
        /// The specific query strings that the distribution forwards to the origin. Your distribution will cache content based on the specified query strings. If the option parameter is true, then your distribution forwards all query strings, regardless of what you specify using the queryStringsAllowList parameter.
        public var queryStringsAllowList: [Swift.String]?

        public init (
            option: Swift.Bool? = nil,
            queryStringsAllowList: [Swift.String]? = nil
        )
        {
            self.option = option
            self.queryStringsAllowList = queryStringsAllowList
        }
    }

}

extension LightsailClientTypes.R53HostedZoneDeletionState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.R53HostedZoneDeletionStateCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the deletion state of an Amazon Route 53 hosted zone for a domain that is being automatically delegated to an Amazon Lightsail DNS zone.
    public struct R53HostedZoneDeletionState: Swift.Equatable {
        /// The status code for the deletion state. Following are the possible values:
        ///
        /// * SUCCEEDED - The hosted zone was successfully deleted.
        ///
        /// * PENDING - The hosted zone deletion is in progress.
        ///
        /// * FAILED - The hosted zone deletion failed.
        ///
        /// * STARTED - The hosted zone deletion started.
        public var code: LightsailClientTypes.R53HostedZoneDeletionStateCode?
        /// The message that describes the reason for the status code.
        public var message: Swift.String?

        public init (
            code: LightsailClientTypes.R53HostedZoneDeletionStateCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension LightsailClientTypes {
    public enum R53HostedZoneDeletionStateCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [R53HostedZoneDeletionStateCode] {
            return [
                .failed,
                .pending,
                .started,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .started: return "STARTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = R53HostedZoneDeletionStateCode(rawValue: rawValue) ?? R53HostedZoneDeletionStateCode.sdkUnknown(rawValue)
        }
    }
}

extension RebootInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

extension RebootInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RebootInstanceInput: Swift.Equatable {
    /// The name of the instance to reboot.
    /// This member is required.
    public var instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct RebootInstanceInputBody: Swift.Equatable {
    let instanceName: Swift.String?
}

extension RebootInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension RebootInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RebootInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RebootInstanceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RebootInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RebootInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct RebootInstanceOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct RebootInstanceOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension RebootInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension RebootRelationalDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

extension RebootRelationalDatabaseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RebootRelationalDatabaseInput: Swift.Equatable {
    /// The name of your database to reboot.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init (
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct RebootRelationalDatabaseInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
}

extension RebootRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
    }
}

extension RebootRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RebootRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RebootRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RebootRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RebootRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct RebootRelationalDatabaseOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct RebootRelationalDatabaseOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension RebootRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes {
    public enum RecordState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [RecordState] {
            return [
                .failed,
                .started,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .started: return "Started"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecordState(rawValue: rawValue) ?? RecordState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Region: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones
        case continentCode
        case description
        case displayName
        case name
        case relationalDatabaseAvailabilityZones
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for availabilityzone0 in availabilityZones {
                try availabilityZonesContainer.encode(availabilityzone0)
            }
        }
        if let continentCode = self.continentCode {
            try encodeContainer.encode(continentCode, forKey: .continentCode)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let relationalDatabaseAvailabilityZones = relationalDatabaseAvailabilityZones {
            var relationalDatabaseAvailabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relationalDatabaseAvailabilityZones)
            for availabilityzone0 in relationalDatabaseAvailabilityZones {
                try relationalDatabaseAvailabilityZonesContainer.encode(availabilityzone0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let continentCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continentCode)
        continentCode = continentCodeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RegionName.self, forKey: .name)
        name = nameDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AvailabilityZone?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[LightsailClientTypes.AvailabilityZone]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [LightsailClientTypes.AvailabilityZone]()
            for structure0 in availabilityZonesContainer {
                if let structure0 = structure0 {
                    availabilityZonesDecoded0?.append(structure0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let relationalDatabaseAvailabilityZonesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AvailabilityZone?].self, forKey: .relationalDatabaseAvailabilityZones)
        var relationalDatabaseAvailabilityZonesDecoded0:[LightsailClientTypes.AvailabilityZone]? = nil
        if let relationalDatabaseAvailabilityZonesContainer = relationalDatabaseAvailabilityZonesContainer {
            relationalDatabaseAvailabilityZonesDecoded0 = [LightsailClientTypes.AvailabilityZone]()
            for structure0 in relationalDatabaseAvailabilityZonesContainer {
                if let structure0 = structure0 {
                    relationalDatabaseAvailabilityZonesDecoded0?.append(structure0)
                }
            }
        }
        relationalDatabaseAvailabilityZones = relationalDatabaseAvailabilityZonesDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes the Amazon Web Services Region.
    public struct Region: Swift.Equatable {
        /// The Availability Zones. Follows the format us-east-2a (case-sensitive).
        public var availabilityZones: [LightsailClientTypes.AvailabilityZone]?
        /// The continent code (e.g., NA, meaning North America).
        public var continentCode: Swift.String?
        /// The description of the Amazon Web Services Region (e.g., This region is recommended to serve users in the eastern United States and eastern Canada).
        public var description: Swift.String?
        /// The display name (e.g., Ohio).
        public var displayName: Swift.String?
        /// The region name (e.g., us-east-2).
        public var name: LightsailClientTypes.RegionName?
        /// The Availability Zones for databases. Follows the format us-east-2a (case-sensitive).
        public var relationalDatabaseAvailabilityZones: [LightsailClientTypes.AvailabilityZone]?

        public init (
            availabilityZones: [LightsailClientTypes.AvailabilityZone]? = nil,
            continentCode: Swift.String? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            name: LightsailClientTypes.RegionName? = nil,
            relationalDatabaseAvailabilityZones: [LightsailClientTypes.AvailabilityZone]? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.continentCode = continentCode
            self.description = description
            self.displayName = displayName
            self.name = name
            self.relationalDatabaseAvailabilityZones = relationalDatabaseAvailabilityZones
        }
    }

}

extension LightsailClientTypes {
    public enum RegionName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case apNortheast1
        case apNortheast2
        case apSoutheast1
        case apSoutheast2
        case apSouth1
        case caCentral1
        case euCentral1
        case euNorth1
        case euWest1
        case euWest2
        case euWest3
        case usEast1
        case usEast2
        case usWest1
        case usWest2
        case sdkUnknown(Swift.String)

        public static var allCases: [RegionName] {
            return [
                .apNortheast1,
                .apNortheast2,
                .apSoutheast1,
                .apSoutheast2,
                .apSouth1,
                .caCentral1,
                .euCentral1,
                .euNorth1,
                .euWest1,
                .euWest2,
                .euWest3,
                .usEast1,
                .usEast2,
                .usWest1,
                .usWest2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .apNortheast1: return "ap-northeast-1"
            case .apNortheast2: return "ap-northeast-2"
            case .apSoutheast1: return "ap-southeast-1"
            case .apSoutheast2: return "ap-southeast-2"
            case .apSouth1: return "ap-south-1"
            case .caCentral1: return "ca-central-1"
            case .euCentral1: return "eu-central-1"
            case .euNorth1: return "eu-north-1"
            case .euWest1: return "eu-west-1"
            case .euWest2: return "eu-west-2"
            case .euWest3: return "eu-west-3"
            case .usEast1: return "us-east-1"
            case .usEast2: return "us-east-2"
            case .usWest1: return "us-west-1"
            case .usWest2: return "us-west-2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegionName(rawValue: rawValue) ?? RegionName.sdkUnknown(rawValue)
        }
    }
}

extension RegisterContainerImageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case digest
        case label
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let digest = self.digest {
            try encodeContainer.encode(digest, forKey: .digest)
        }
        if let label = self.label {
            try encodeContainer.encode(label, forKey: .label)
        }
    }
}

extension RegisterContainerImageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RegisterContainerImageInput: Swift.Equatable {
    /// The digest of the container image to be registered.
    /// This member is required.
    public var digest: Swift.String?
    /// The label for the container image when it's registered to the container service. Use a descriptive label that you can use to track the different versions of your registered container images. Use the GetContainerImages action to return the container images registered to a Lightsail container service. The label is the  portion of the following image name example:
    ///
    /// * :container-service-1..1
    ///
    ///
    /// If the name of your container service is mycontainerservice, and the label that you specify is mystaticwebsite, then the name of the registered container image will be :mycontainerservice.mystaticwebsite.1. The number at the end of these image name examples represents the version of the registered container image. If you push and register another container image to the same Lightsail container service, with the same label, then the version number for the new registered container image will be 2. If you push and register another container image, the version number will be 3, and so on.
    /// This member is required.
    public var label: Swift.String?
    /// The name of the container service for which to register a container image.
    /// This member is required.
    public var serviceName: Swift.String?

    public init (
        digest: Swift.String? = nil,
        label: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.digest = digest
        self.label = label
        self.serviceName = serviceName
    }
}

struct RegisterContainerImageInputBody: Swift.Equatable {
    let label: Swift.String?
    let digest: Swift.String?
}

extension RegisterContainerImageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case digest
        case label
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        let digestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .digest)
        digest = digestDecoded
    }
}

extension RegisterContainerImageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterContainerImageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterContainerImageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterContainerImageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RegisterContainerImageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containerImage = output.containerImage
        } else {
            self.containerImage = nil
        }
    }
}

public struct RegisterContainerImageOutputResponse: Swift.Equatable {
    /// An object that describes a container image that is registered to a Lightsail container service
    public var containerImage: LightsailClientTypes.ContainerImage?

    public init (
        containerImage: LightsailClientTypes.ContainerImage? = nil
    )
    {
        self.containerImage = containerImage
    }
}

struct RegisterContainerImageOutputResponseBody: Swift.Equatable {
    let containerImage: LightsailClientTypes.ContainerImage?
}

extension RegisterContainerImageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerImage
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerImageDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerImage.self, forKey: .containerImage)
        containerImage = containerImageDecoded
    }
}

extension LightsailClientTypes.RegisteredDomainDelegationInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nameServersUpdateState
        case r53HostedZoneDeletionState
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nameServersUpdateState = self.nameServersUpdateState {
            try encodeContainer.encode(nameServersUpdateState, forKey: .nameServersUpdateState)
        }
        if let r53HostedZoneDeletionState = self.r53HostedZoneDeletionState {
            try encodeContainer.encode(r53HostedZoneDeletionState, forKey: .r53HostedZoneDeletionState)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameServersUpdateStateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.NameServersUpdateState.self, forKey: .nameServersUpdateState)
        nameServersUpdateState = nameServersUpdateStateDecoded
        let r53HostedZoneDeletionStateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.R53HostedZoneDeletionState.self, forKey: .r53HostedZoneDeletionState)
        r53HostedZoneDeletionState = r53HostedZoneDeletionStateDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the delegation state of an Amazon Route 53 registered domain to Amazon Lightsail. When you delegate an Amazon Route 53 registered domain to Lightsail, you can manage the DNS of the domain using a Lightsail DNS zone. You no longer use the Route 53 hosted zone to manage the DNS of the domain. To delegate the domain, Lightsail automatically updates the domain's name servers in Route 53 to the name servers of the Lightsail DNS zone. Then, Lightsail automatically deletes the Route 53 hosted zone for the domain. All of the following conditions must be true for automatic domain delegation to be successful:
    ///
    /// * The registered domain must be in the same Amazon Web Services account as the Lightsail account making the request.
    ///
    /// * The user or entity making the request must have permission to manage domains in Route 53.
    ///
    /// * The Route 53 hosted zone for the domain must be empty. It cannot contain DNS records other than start of authority (SOA) and name server records.
    ///
    ///
    /// If automatic domain delegation fails, or if you manage the DNS of your domain using a service other than Route 53, then you must manually add the Lightsail DNS zone name servers to your domain in order to delegate management of its DNS to Lightsail. For more information, see [Creating a DNS zone to manage your domain’s records in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-create-dns-entry) in the Amazon Lightsail Developer Guide.
    public struct RegisteredDomainDelegationInfo: Swift.Equatable {
        /// An object that describes the state of the name server records that are automatically added to the Route 53 domain by Lightsail.
        public var nameServersUpdateState: LightsailClientTypes.NameServersUpdateState?
        /// Describes the deletion state of an Amazon Route 53 hosted zone for a domain that is being automatically delegated to an Amazon Lightsail DNS zone.
        public var r53HostedZoneDeletionState: LightsailClientTypes.R53HostedZoneDeletionState?

        public init (
            nameServersUpdateState: LightsailClientTypes.NameServersUpdateState? = nil,
            r53HostedZoneDeletionState: LightsailClientTypes.R53HostedZoneDeletionState? = nil
        )
        {
            self.nameServersUpdateState = nameServersUpdateState
            self.r53HostedZoneDeletionState = r53HostedZoneDeletionState
        }
    }

}

extension LightsailClientTypes.RelationalDatabase: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case backupRetentionEnabled
        case caCertificateIdentifier
        case createdAt
        case engine
        case engineVersion
        case hardware
        case latestRestorableTime
        case location
        case masterDatabaseName
        case masterEndpoint
        case masterUsername
        case name
        case parameterApplyStatus
        case pendingMaintenanceActions
        case pendingModifiedValues
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseBlueprintId
        case relationalDatabaseBundleId
        case resourceType
        case secondaryAvailabilityZone
        case state
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let backupRetentionEnabled = self.backupRetentionEnabled {
            try encodeContainer.encode(backupRetentionEnabled, forKey: .backupRetentionEnabled)
        }
        if let caCertificateIdentifier = self.caCertificateIdentifier {
            try encodeContainer.encode(caCertificateIdentifier, forKey: .caCertificateIdentifier)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let engine = self.engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let hardware = self.hardware {
            try encodeContainer.encode(hardware, forKey: .hardware)
        }
        if let latestRestorableTime = self.latestRestorableTime {
            try encodeContainer.encodeTimestamp(latestRestorableTime, format: .epochSeconds, forKey: .latestRestorableTime)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let masterDatabaseName = self.masterDatabaseName {
            try encodeContainer.encode(masterDatabaseName, forKey: .masterDatabaseName)
        }
        if let masterEndpoint = self.masterEndpoint {
            try encodeContainer.encode(masterEndpoint, forKey: .masterEndpoint)
        }
        if let masterUsername = self.masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parameterApplyStatus = self.parameterApplyStatus {
            try encodeContainer.encode(parameterApplyStatus, forKey: .parameterApplyStatus)
        }
        if let pendingMaintenanceActions = pendingMaintenanceActions {
            var pendingMaintenanceActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pendingMaintenanceActions)
            for pendingmaintenanceaction0 in pendingMaintenanceActions {
                try pendingMaintenanceActionsContainer.encode(pendingmaintenanceaction0)
            }
        }
        if let pendingModifiedValues = self.pendingModifiedValues {
            try encodeContainer.encode(pendingModifiedValues, forKey: .pendingModifiedValues)
        }
        if let preferredBackupWindow = self.preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = self.preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let publiclyAccessible = self.publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseBlueprintId = self.relationalDatabaseBlueprintId {
            try encodeContainer.encode(relationalDatabaseBlueprintId, forKey: .relationalDatabaseBlueprintId)
        }
        if let relationalDatabaseBundleId = self.relationalDatabaseBundleId {
            try encodeContainer.encode(relationalDatabaseBundleId, forKey: .relationalDatabaseBundleId)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let secondaryAvailabilityZone = self.secondaryAvailabilityZone {
            try encodeContainer.encode(secondaryAvailabilityZone, forKey: .secondaryAvailabilityZone)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let relationalDatabaseBlueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseBlueprintId)
        relationalDatabaseBlueprintId = relationalDatabaseBlueprintIdDecoded
        let relationalDatabaseBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseBundleId)
        relationalDatabaseBundleId = relationalDatabaseBundleIdDecoded
        let masterDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterDatabaseName)
        masterDatabaseName = masterDatabaseNameDecoded
        let hardwareDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabaseHardware.self, forKey: .hardware)
        hardware = hardwareDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let secondaryAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secondaryAvailabilityZone)
        secondaryAvailabilityZone = secondaryAvailabilityZoneDecoded
        let backupRetentionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .backupRetentionEnabled)
        backupRetentionEnabled = backupRetentionEnabledDecoded
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PendingModifiedRelationalDatabaseValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let latestRestorableTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .latestRestorableTime)
        latestRestorableTime = latestRestorableTimeDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let parameterApplyStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterApplyStatus)
        parameterApplyStatus = parameterApplyStatusDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let masterEndpointDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabaseEndpoint.self, forKey: .masterEndpoint)
        masterEndpoint = masterEndpointDecoded
        let pendingMaintenanceActionsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.PendingMaintenanceAction?].self, forKey: .pendingMaintenanceActions)
        var pendingMaintenanceActionsDecoded0:[LightsailClientTypes.PendingMaintenanceAction]? = nil
        if let pendingMaintenanceActionsContainer = pendingMaintenanceActionsContainer {
            pendingMaintenanceActionsDecoded0 = [LightsailClientTypes.PendingMaintenanceAction]()
            for structure0 in pendingMaintenanceActionsContainer {
                if let structure0 = structure0 {
                    pendingMaintenanceActionsDecoded0?.append(structure0)
                }
            }
        }
        pendingMaintenanceActions = pendingMaintenanceActionsDecoded0
        let caCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caCertificateIdentifier)
        caCertificateIdentifier = caCertificateIdentifierDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a database.
    public struct RelationalDatabase: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the database.
        public var arn: Swift.String?
        /// A Boolean value indicating whether automated backup retention is enabled for the database.
        public var backupRetentionEnabled: Swift.Bool?
        /// The certificate associated with the database.
        public var caCertificateIdentifier: Swift.String?
        /// The timestamp when the database was created. Formatted in Unix time.
        public var createdAt: ClientRuntime.Date?
        /// The database software (for example, MySQL).
        public var engine: Swift.String?
        /// The database engine version (for example, 5.7.23).
        public var engineVersion: Swift.String?
        /// Describes the hardware of the database.
        public var hardware: LightsailClientTypes.RelationalDatabaseHardware?
        /// The latest point in time to which the database can be restored. Formatted in Unix time.
        public var latestRestorableTime: ClientRuntime.Date?
        /// The Region name and Availability Zone where the database is located.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the master database created when the Lightsail database resource is created.
        public var masterDatabaseName: Swift.String?
        /// The master endpoint for the database.
        public var masterEndpoint: LightsailClientTypes.RelationalDatabaseEndpoint?
        /// The master user name of the database.
        public var masterUsername: Swift.String?
        /// The unique name of the database resource in Lightsail.
        public var name: Swift.String?
        /// The status of parameter updates for the database.
        public var parameterApplyStatus: Swift.String?
        /// Describes the pending maintenance actions for the database.
        public var pendingMaintenanceActions: [LightsailClientTypes.PendingMaintenanceAction]?
        /// Describes pending database value modifications.
        public var pendingModifiedValues: LightsailClientTypes.PendingModifiedRelationalDatabaseValues?
        /// The daily time range during which automated backups are created for the database (for example, 16:00-16:30).
        public var preferredBackupWindow: Swift.String?
        /// The weekly time range during which system maintenance can occur on the database. In the format ddd:hh24:mi-ddd:hh24:mi. For example, Tue:17:00-Tue:17:30.
        public var preferredMaintenanceWindow: Swift.String?
        /// A Boolean value indicating whether the database is publicly accessible.
        public var publiclyAccessible: Swift.Bool?
        /// The blueprint ID for the database. A blueprint describes the major engine version of a database.
        public var relationalDatabaseBlueprintId: Swift.String?
        /// The bundle ID for the database. A bundle describes the performance specifications for your database.
        public var relationalDatabaseBundleId: Swift.String?
        /// The Lightsail resource type for the database (for example, RelationalDatabase).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// Describes the secondary Availability Zone of a high availability database. The secondary database is used for failover support of a high availability database.
        public var secondaryAvailabilityZone: Swift.String?
        /// Describes the current state of the database.
        public var state: Swift.String?
        /// The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            backupRetentionEnabled: Swift.Bool? = nil,
            caCertificateIdentifier: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            hardware: LightsailClientTypes.RelationalDatabaseHardware? = nil,
            latestRestorableTime: ClientRuntime.Date? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            masterDatabaseName: Swift.String? = nil,
            masterEndpoint: LightsailClientTypes.RelationalDatabaseEndpoint? = nil,
            masterUsername: Swift.String? = nil,
            name: Swift.String? = nil,
            parameterApplyStatus: Swift.String? = nil,
            pendingMaintenanceActions: [LightsailClientTypes.PendingMaintenanceAction]? = nil,
            pendingModifiedValues: LightsailClientTypes.PendingModifiedRelationalDatabaseValues? = nil,
            preferredBackupWindow: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            publiclyAccessible: Swift.Bool? = nil,
            relationalDatabaseBlueprintId: Swift.String? = nil,
            relationalDatabaseBundleId: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            secondaryAvailabilityZone: Swift.String? = nil,
            state: Swift.String? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.backupRetentionEnabled = backupRetentionEnabled
            self.caCertificateIdentifier = caCertificateIdentifier
            self.createdAt = createdAt
            self.engine = engine
            self.engineVersion = engineVersion
            self.hardware = hardware
            self.latestRestorableTime = latestRestorableTime
            self.location = location
            self.masterDatabaseName = masterDatabaseName
            self.masterEndpoint = masterEndpoint
            self.masterUsername = masterUsername
            self.name = name
            self.parameterApplyStatus = parameterApplyStatus
            self.pendingMaintenanceActions = pendingMaintenanceActions
            self.pendingModifiedValues = pendingModifiedValues
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.publiclyAccessible = publiclyAccessible
            self.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId
            self.relationalDatabaseBundleId = relationalDatabaseBundleId
            self.resourceType = resourceType
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.RelationalDatabaseBlueprint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintId
        case engine
        case engineDescription
        case engineVersion
        case engineVersionDescription
        case isEngineDefault
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintId = self.blueprintId {
            try encodeContainer.encode(blueprintId, forKey: .blueprintId)
        }
        if let engine = self.engine {
            try encodeContainer.encode(engine.rawValue, forKey: .engine)
        }
        if let engineDescription = self.engineDescription {
            try encodeContainer.encode(engineDescription, forKey: .engineDescription)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let engineVersionDescription = self.engineVersionDescription {
            try encodeContainer.encode(engineVersionDescription, forKey: .engineVersionDescription)
        }
        if let isEngineDefault = self.isEngineDefault {
            try encodeContainer.encode(isEngineDefault, forKey: .isEngineDefault)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintId)
        blueprintId = blueprintIdDecoded
        let engineDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabaseEngine.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let engineDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineDescription)
        engineDescription = engineDescriptionDecoded
        let engineVersionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersionDescription)
        engineVersionDescription = engineVersionDescriptionDecoded
        let isEngineDefaultDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isEngineDefault)
        isEngineDefault = isEngineDefaultDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a database image, or blueprint. A blueprint describes the major engine version of a database.
    public struct RelationalDatabaseBlueprint: Swift.Equatable {
        /// The ID for the database blueprint.
        public var blueprintId: Swift.String?
        /// The database software of the database blueprint (for example, MySQL).
        public var engine: LightsailClientTypes.RelationalDatabaseEngine?
        /// The description of the database engine for the database blueprint.
        public var engineDescription: Swift.String?
        /// The database engine version for the database blueprint (for example, 5.7.23).
        public var engineVersion: Swift.String?
        /// The description of the database engine version for the database blueprint.
        public var engineVersionDescription: Swift.String?
        /// A Boolean value indicating whether the engine version is the default for the database blueprint.
        public var isEngineDefault: Swift.Bool?

        public init (
            blueprintId: Swift.String? = nil,
            engine: LightsailClientTypes.RelationalDatabaseEngine? = nil,
            engineDescription: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            engineVersionDescription: Swift.String? = nil,
            isEngineDefault: Swift.Bool? = nil
        )
        {
            self.blueprintId = blueprintId
            self.engine = engine
            self.engineDescription = engineDescription
            self.engineVersion = engineVersion
            self.engineVersionDescription = engineVersionDescription
            self.isEngineDefault = isEngineDefault
        }
    }

}

extension LightsailClientTypes.RelationalDatabaseBundle: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case cpuCount
        case diskSizeInGb
        case isActive
        case isEncrypted
        case name
        case price
        case ramSizeInGb
        case transferPerMonthInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let cpuCount = self.cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let diskSizeInGb = self.diskSizeInGb {
            try encodeContainer.encode(diskSizeInGb, forKey: .diskSizeInGb)
        }
        if let isActive = self.isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let isEncrypted = self.isEncrypted {
            try encodeContainer.encode(isEncrypted, forKey: .isEncrypted)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let price = self.price {
            try encodeContainer.encode(price, forKey: .price)
        }
        if let ramSizeInGb = self.ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
        if let transferPerMonthInGb = self.transferPerMonthInGb {
            try encodeContainer.encode(transferPerMonthInGb, forKey: .transferPerMonthInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let priceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .price)
        price = priceDecoded
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
        let diskSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .diskSizeInGb)
        diskSizeInGb = diskSizeInGbDecoded
        let transferPerMonthInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transferPerMonthInGb)
        transferPerMonthInGb = transferPerMonthInGbDecoded
        let cpuCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let isEncryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isEncrypted)
        isEncrypted = isEncryptedDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a database bundle. A bundle describes the performance specifications of the database.
    public struct RelationalDatabaseBundle: Swift.Equatable {
        /// The ID for the database bundle.
        public var bundleId: Swift.String?
        /// The number of virtual CPUs (vCPUs) for the database bundle.
        public var cpuCount: Swift.Int?
        /// The size of the disk for the database bundle.
        public var diskSizeInGb: Swift.Int?
        /// A Boolean value indicating whether the database bundle is active.
        public var isActive: Swift.Bool?
        /// A Boolean value indicating whether the database bundle is encrypted.
        public var isEncrypted: Swift.Bool?
        /// The name for the database bundle.
        public var name: Swift.String?
        /// The cost of the database bundle in US currency.
        public var price: Swift.Float?
        /// The amount of RAM in GB (for example, 2.0) for the database bundle.
        public var ramSizeInGb: Swift.Float?
        /// The data transfer rate per month in GB for the database bundle.
        public var transferPerMonthInGb: Swift.Int?

        public init (
            bundleId: Swift.String? = nil,
            cpuCount: Swift.Int? = nil,
            diskSizeInGb: Swift.Int? = nil,
            isActive: Swift.Bool? = nil,
            isEncrypted: Swift.Bool? = nil,
            name: Swift.String? = nil,
            price: Swift.Float? = nil,
            ramSizeInGb: Swift.Float? = nil,
            transferPerMonthInGb: Swift.Int? = nil
        )
        {
            self.bundleId = bundleId
            self.cpuCount = cpuCount
            self.diskSizeInGb = diskSizeInGb
            self.isActive = isActive
            self.isEncrypted = isEncrypted
            self.name = name
            self.price = price
            self.ramSizeInGb = ramSizeInGb
            self.transferPerMonthInGb = transferPerMonthInGb
        }
    }

}

extension LightsailClientTypes.RelationalDatabaseEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address
        case port
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = self.address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let port = self.port {
            try encodeContainer.encode(port, forKey: .port)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
    }
}

extension LightsailClientTypes {
    /// Describes an endpoint for a database.
    public struct RelationalDatabaseEndpoint: Swift.Equatable {
        /// Specifies the DNS address of the database.
        public var address: Swift.String?
        /// Specifies the port that the database is listening on.
        public var port: Swift.Int?

        public init (
            address: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.address = address
            self.port = port
        }
    }

}

extension LightsailClientTypes {
    public enum RelationalDatabaseEngine: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mysql
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationalDatabaseEngine] {
            return [
                .mysql,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mysql: return "mysql"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RelationalDatabaseEngine(rawValue: rawValue) ?? RelationalDatabaseEngine.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.RelationalDatabaseEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case eventCategories
        case message
        case resource
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let eventCategories = eventCategories {
            var eventCategoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventCategories)
            for string0 in eventCategories {
                try eventCategoriesContainer.encode(string0)
            }
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let resource = self.resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let eventCategoriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .eventCategories)
        var eventCategoriesDecoded0:[Swift.String]? = nil
        if let eventCategoriesContainer = eventCategoriesContainer {
            eventCategoriesDecoded0 = [Swift.String]()
            for string0 in eventCategoriesContainer {
                if let string0 = string0 {
                    eventCategoriesDecoded0?.append(string0)
                }
            }
        }
        eventCategories = eventCategoriesDecoded0
    }
}

extension LightsailClientTypes {
    /// Describes an event for a database.
    public struct RelationalDatabaseEvent: Swift.Equatable {
        /// The timestamp when the database event was created.
        public var createdAt: ClientRuntime.Date?
        /// The category that the database event belongs to.
        public var eventCategories: [Swift.String]?
        /// The message of the database event.
        public var message: Swift.String?
        /// The database that the database event relates to.
        public var resource: Swift.String?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            eventCategories: [Swift.String]? = nil,
            message: Swift.String? = nil,
            resource: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.eventCategories = eventCategories
            self.message = message
            self.resource = resource
        }
    }

}

extension LightsailClientTypes.RelationalDatabaseHardware: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cpuCount
        case diskSizeInGb
        case ramSizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cpuCount = self.cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let diskSizeInGb = self.diskSizeInGb {
            try encodeContainer.encode(diskSizeInGb, forKey: .diskSizeInGb)
        }
        if let ramSizeInGb = self.ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cpuCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let diskSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .diskSizeInGb)
        diskSizeInGb = diskSizeInGbDecoded
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the hardware of a database.
    public struct RelationalDatabaseHardware: Swift.Equatable {
        /// The number of vCPUs for the database.
        public var cpuCount: Swift.Int?
        /// The size of the disk for the database.
        public var diskSizeInGb: Swift.Int?
        /// The amount of RAM in GB for the database.
        public var ramSizeInGb: Swift.Float?

        public init (
            cpuCount: Swift.Int? = nil,
            diskSizeInGb: Swift.Int? = nil,
            ramSizeInGb: Swift.Float? = nil
        )
        {
            self.cpuCount = cpuCount
            self.diskSizeInGb = diskSizeInGb
            self.ramSizeInGb = ramSizeInGb
        }
    }

}

extension LightsailClientTypes {
    public enum RelationalDatabaseMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cpuutilization
        case databaseconnections
        case diskqueuedepth
        case freestoragespace
        case networkreceivethroughput
        case networktransmitthroughput
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationalDatabaseMetricName] {
            return [
                .cpuutilization,
                .databaseconnections,
                .diskqueuedepth,
                .freestoragespace,
                .networkreceivethroughput,
                .networktransmitthroughput,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cpuutilization: return "CPUUtilization"
            case .databaseconnections: return "DatabaseConnections"
            case .diskqueuedepth: return "DiskQueueDepth"
            case .freestoragespace: return "FreeStorageSpace"
            case .networkreceivethroughput: return "NetworkReceiveThroughput"
            case .networktransmitthroughput: return "NetworkTransmitThroughput"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RelationalDatabaseMetricName(rawValue: rawValue) ?? RelationalDatabaseMetricName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.RelationalDatabaseParameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues
        case applyMethod
        case applyType
        case dataType
        case description
        case isModifiable
        case parameterName
        case parameterValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedValues = self.allowedValues {
            try encodeContainer.encode(allowedValues, forKey: .allowedValues)
        }
        if let applyMethod = self.applyMethod {
            try encodeContainer.encode(applyMethod, forKey: .applyMethod)
        }
        if let applyType = self.applyType {
            try encodeContainer.encode(applyType, forKey: .applyType)
        }
        if let dataType = self.dataType {
            try encodeContainer.encode(dataType, forKey: .dataType)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let isModifiable = self.isModifiable {
            try encodeContainer.encode(isModifiable, forKey: .isModifiable)
        }
        if let parameterName = self.parameterName {
            try encodeContainer.encode(parameterName, forKey: .parameterName)
        }
        if let parameterValue = self.parameterValue {
            try encodeContainer.encode(parameterValue, forKey: .parameterValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedValuesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allowedValues)
        allowedValues = allowedValuesDecoded
        let applyMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applyMethod)
        applyMethod = applyMethodDecoded
        let applyTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applyType)
        applyType = applyTypeDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let isModifiableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isModifiable)
        isModifiable = isModifiableDecoded
        let parameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let parameterValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterValue)
        parameterValue = parameterValueDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the parameters of a database.
    public struct RelationalDatabaseParameter: Swift.Equatable {
        /// Specifies the valid range of values for the parameter.
        public var allowedValues: Swift.String?
        /// Indicates when parameter updates are applied. Can be immediate or pending-reboot.
        public var applyMethod: Swift.String?
        /// Specifies the engine-specific parameter type.
        public var applyType: Swift.String?
        /// Specifies the valid data type for the parameter.
        public var dataType: Swift.String?
        /// Provides a description of the parameter.
        public var description: Swift.String?
        /// A Boolean value indicating whether the parameter can be modified.
        public var isModifiable: Swift.Bool?
        /// Specifies the name of the parameter.
        public var parameterName: Swift.String?
        /// Specifies the value of the parameter.
        public var parameterValue: Swift.String?

        public init (
            allowedValues: Swift.String? = nil,
            applyMethod: Swift.String? = nil,
            applyType: Swift.String? = nil,
            dataType: Swift.String? = nil,
            description: Swift.String? = nil,
            isModifiable: Swift.Bool? = nil,
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.applyMethod = applyMethod
            self.applyType = applyType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }
    }

}

extension LightsailClientTypes {
    public enum RelationalDatabasePasswordVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case current
        case pending
        case previous
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationalDatabasePasswordVersion] {
            return [
                .current,
                .pending,
                .previous,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .current: return "CURRENT"
            case .pending: return "PENDING"
            case .previous: return "PREVIOUS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RelationalDatabasePasswordVersion(rawValue: rawValue) ?? RelationalDatabasePasswordVersion.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.RelationalDatabaseSnapshot: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case engine
        case engineVersion
        case fromRelationalDatabaseArn
        case fromRelationalDatabaseBlueprintId
        case fromRelationalDatabaseBundleId
        case fromRelationalDatabaseName
        case location
        case name
        case resourceType
        case sizeInGb
        case state
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let engine = self.engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let fromRelationalDatabaseArn = self.fromRelationalDatabaseArn {
            try encodeContainer.encode(fromRelationalDatabaseArn, forKey: .fromRelationalDatabaseArn)
        }
        if let fromRelationalDatabaseBlueprintId = self.fromRelationalDatabaseBlueprintId {
            try encodeContainer.encode(fromRelationalDatabaseBlueprintId, forKey: .fromRelationalDatabaseBlueprintId)
        }
        if let fromRelationalDatabaseBundleId = self.fromRelationalDatabaseBundleId {
            try encodeContainer.encode(fromRelationalDatabaseBundleId, forKey: .fromRelationalDatabaseBundleId)
        }
        if let fromRelationalDatabaseName = self.fromRelationalDatabaseName {
            try encodeContainer.encode(fromRelationalDatabaseName, forKey: .fromRelationalDatabaseName)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sizeInGb = self.sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let fromRelationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromRelationalDatabaseName)
        fromRelationalDatabaseName = fromRelationalDatabaseNameDecoded
        let fromRelationalDatabaseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromRelationalDatabaseArn)
        fromRelationalDatabaseArn = fromRelationalDatabaseArnDecoded
        let fromRelationalDatabaseBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromRelationalDatabaseBundleId)
        fromRelationalDatabaseBundleId = fromRelationalDatabaseBundleIdDecoded
        let fromRelationalDatabaseBlueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromRelationalDatabaseBlueprintId)
        fromRelationalDatabaseBlueprintId = fromRelationalDatabaseBlueprintIdDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a database snapshot.
    public struct RelationalDatabaseSnapshot: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the database snapshot.
        public var arn: Swift.String?
        /// The timestamp when the database snapshot was created.
        public var createdAt: ClientRuntime.Date?
        /// The software of the database snapshot (for example, MySQL)
        public var engine: Swift.String?
        /// The database engine version for the database snapshot (for example, 5.7.23).
        public var engineVersion: Swift.String?
        /// The Amazon Resource Name (ARN) of the database from which the database snapshot was created.
        public var fromRelationalDatabaseArn: Swift.String?
        /// The blueprint ID of the database from which the database snapshot was created. A blueprint describes the major engine version of a database.
        public var fromRelationalDatabaseBlueprintId: Swift.String?
        /// The bundle ID of the database from which the database snapshot was created.
        public var fromRelationalDatabaseBundleId: Swift.String?
        /// The name of the source database from which the database snapshot was created.
        public var fromRelationalDatabaseName: Swift.String?
        /// The Region name and Availability Zone where the database snapshot is located.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the database snapshot.
        public var name: Swift.String?
        /// The Lightsail resource type.
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The size of the disk in GB (for example, 32) for the database snapshot.
        public var sizeInGb: Swift.Int?
        /// The state of the database snapshot.
        public var state: Swift.String?
        /// The support code for the database snapshot. Include this code in your email to support when you have questions about a database snapshot in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            fromRelationalDatabaseArn: Swift.String? = nil,
            fromRelationalDatabaseBlueprintId: Swift.String? = nil,
            fromRelationalDatabaseBundleId: Swift.String? = nil,
            fromRelationalDatabaseName: Swift.String? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sizeInGb: Swift.Int? = nil,
            state: Swift.String? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.engine = engine
            self.engineVersion = engineVersion
            self.fromRelationalDatabaseArn = fromRelationalDatabaseArn
            self.fromRelationalDatabaseBlueprintId = fromRelationalDatabaseBlueprintId
            self.fromRelationalDatabaseBundleId = fromRelationalDatabaseBundleId
            self.fromRelationalDatabaseName = fromRelationalDatabaseName
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension ReleaseStaticIpInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let staticIpName = self.staticIpName {
            try encodeContainer.encode(staticIpName, forKey: .staticIpName)
        }
    }
}

extension ReleaseStaticIpInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ReleaseStaticIpInput: Swift.Equatable {
    /// The name of the static IP to delete.
    /// This member is required.
    public var staticIpName: Swift.String?

    public init (
        staticIpName: Swift.String? = nil
    )
    {
        self.staticIpName = staticIpName
    }
}

struct ReleaseStaticIpInputBody: Swift.Equatable {
    let staticIpName: Swift.String?
}

extension ReleaseStaticIpInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .staticIpName)
        staticIpName = staticIpNameDecoded
    }
}

extension ReleaseStaticIpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ReleaseStaticIpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ReleaseStaticIpOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ReleaseStaticIpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ReleaseStaticIpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct ReleaseStaticIpOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct ReleaseStaticIpOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension ReleaseStaticIpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes {
    public enum RenewalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pendingautorenewal
        case pendingvalidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [RenewalStatus] {
            return [
                .failed,
                .pendingautorenewal,
                .pendingvalidation,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .pendingautorenewal: return "PendingAutoRenewal"
            case .pendingvalidation: return "PendingValidation"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RenewalStatus(rawValue: rawValue) ?? RenewalStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.RenewalSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainValidationRecords
        case renewalStatus
        case renewalStatusReason
        case updatedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainValidationRecords = domainValidationRecords {
            var domainValidationRecordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationRecords)
            for domainvalidationrecord0 in domainValidationRecords {
                try domainValidationRecordsContainer.encode(domainvalidationrecord0)
            }
        }
        if let renewalStatus = self.renewalStatus {
            try encodeContainer.encode(renewalStatus.rawValue, forKey: .renewalStatus)
        }
        if let renewalStatusReason = self.renewalStatusReason {
            try encodeContainer.encode(renewalStatusReason, forKey: .renewalStatusReason)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encodeTimestamp(updatedAt, format: .epochSeconds, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainValidationRecordsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.DomainValidationRecord?].self, forKey: .domainValidationRecords)
        var domainValidationRecordsDecoded0:[LightsailClientTypes.DomainValidationRecord]? = nil
        if let domainValidationRecordsContainer = domainValidationRecordsContainer {
            domainValidationRecordsDecoded0 = [LightsailClientTypes.DomainValidationRecord]()
            for structure0 in domainValidationRecordsContainer {
                if let structure0 = structure0 {
                    domainValidationRecordsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationRecords = domainValidationRecordsDecoded0
        let renewalStatusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RenewalStatus.self, forKey: .renewalStatus)
        renewalStatus = renewalStatusDecoded
        let renewalStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .renewalStatusReason)
        renewalStatusReason = renewalStatusReasonDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the status of a SSL/TLS certificate renewal managed by Amazon Lightsail.
    public struct RenewalSummary: Swift.Equatable {
        /// An array of objects that describe the domain validation records of the certificate.
        public var domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]?
        /// The renewal status of the certificate. The following renewal status are possible:
        ///
        /// * PendingAutoRenewal - Lightsail is attempting to automatically validate the domain names of the certificate. No further action is required.
        ///
        /// * PendingValidation - Lightsail couldn't automatically validate one or more domain names of the certificate. You must take action to validate these domain names or the certificate won't be renewed. Check to make sure your certificate's domain validation records exist in your domain's DNS, and that your certificate remains in use.
        ///
        /// * Success - All domain names in the certificate are validated, and Lightsail renewed the certificate. No further action is required.
        ///
        /// * Failed - One or more domain names were not validated before the certificate expired, and Lightsail did not renew the certificate. You can request a new certificate using the CreateCertificate action.
        public var renewalStatus: LightsailClientTypes.RenewalStatus?
        /// The reason for the renewal status of the certificate.
        public var renewalStatusReason: Swift.String?
        /// The timestamp when the certificate was last updated.
        public var updatedAt: ClientRuntime.Date?

        public init (
            domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]? = nil,
            renewalStatus: LightsailClientTypes.RenewalStatus? = nil,
            renewalStatusReason: Swift.String? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.domainValidationRecords = domainValidationRecords
            self.renewalStatus = renewalStatus
            self.renewalStatusReason = renewalStatusReason
            self.updatedAt = updatedAt
        }
    }

}

extension ResetDistributionCacheInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributionName = self.distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
    }
}

extension ResetDistributionCacheInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ResetDistributionCacheInput: Swift.Equatable {
    /// The name of the distribution for which to reset cache. Use the GetDistributions action to get a list of distribution names that you can specify.
    public var distributionName: Swift.String?

    public init (
        distributionName: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
    }
}

struct ResetDistributionCacheInputBody: Swift.Equatable {
    let distributionName: Swift.String?
}

extension ResetDistributionCacheInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
    }
}

extension ResetDistributionCacheOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ResetDistributionCacheOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ResetDistributionCacheOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResetDistributionCacheOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResetDistributionCacheOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createTime = output.createTime
            self.operation = output.operation
            self.status = output.status
        } else {
            self.createTime = nil
            self.operation = nil
            self.status = nil
        }
    }
}

public struct ResetDistributionCacheOutputResponse: Swift.Equatable {
    /// The timestamp of the reset cache request (e.g., 1479734909.17) in Unix time format.
    public var createTime: ClientRuntime.Date?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?
    /// The status of the reset cache request.
    public var status: Swift.String?

    public init (
        createTime: ClientRuntime.Date? = nil,
        operation: LightsailClientTypes.Operation? = nil,
        status: Swift.String? = nil
    )
    {
        self.createTime = createTime
        self.operation = operation
        self.status = status
    }
}

struct ResetDistributionCacheOutputResponseBody: Swift.Equatable {
    let status: Swift.String?
    let createTime: ClientRuntime.Date?
    let operation: LightsailClientTypes.Operation?
}

extension ResetDistributionCacheOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime
        case operation
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension LightsailClientTypes {
    public enum ResourceBucketAccess: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allow
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceBucketAccess] {
            return [
                .allow,
                .deny,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allow: return "allow"
            case .deny: return "deny"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceBucketAccess(rawValue: rawValue) ?? ResourceBucketAccess.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.ResourceLocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case regionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName.rawValue, forKey: .regionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RegionName.self, forKey: .regionName)
        regionName = regionNameDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the resource location.
    public struct ResourceLocation: Swift.Equatable {
        /// The Availability Zone. Follows the format us-east-2a (case-sensitive).
        public var availabilityZone: Swift.String?
        /// The Amazon Web Services Region name.
        public var regionName: LightsailClientTypes.RegionName?

        public init (
            availabilityZone: Swift.String? = nil,
            regionName: LightsailClientTypes.RegionName? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.regionName = regionName
        }
    }

}

extension LightsailClientTypes.ResourceReceivingAccess: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension LightsailClientTypes {
    /// Describes an Amazon Lightsail instance that has access to a Lightsail bucket.
    public struct ResourceReceivingAccess: Swift.Equatable {
        /// The name of the Lightsail instance.
        public var name: Swift.String?
        /// The Lightsail resource type (for example, Instance).
        public var resourceType: Swift.String?

        public init (
            name: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.name = name
            self.resourceType = resourceType
        }
    }

}

extension LightsailClientTypes.ResourceRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case type
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension LightsailClientTypes {
    /// Describes the domain name system (DNS) records to add to your domain's DNS to validate it for an Amazon Lightsail certificate.
    public struct ResourceRecord: Swift.Equatable {
        /// The name of the record.
        public var name: Swift.String?
        /// The DNS record type.
        public var type: Swift.String?
        /// The value for the DNS record.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            type: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
            self.value = value
        }
    }

}

extension LightsailClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alarm
        case bucket
        case certificate
        case cloudformationstackrecord
        case contactmethod
        case containerservice
        case disk
        case disksnapshot
        case distribution
        case domain
        case exportsnapshotrecord
        case instance
        case instancesnapshot
        case keypair
        case loadbalancer
        case loadbalancertlscertificate
        case peeredvpc
        case relationaldatabase
        case relationaldatabasesnapshot
        case staticip
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .alarm,
                .bucket,
                .certificate,
                .cloudformationstackrecord,
                .contactmethod,
                .containerservice,
                .disk,
                .disksnapshot,
                .distribution,
                .domain,
                .exportsnapshotrecord,
                .instance,
                .instancesnapshot,
                .keypair,
                .loadbalancer,
                .loadbalancertlscertificate,
                .peeredvpc,
                .relationaldatabase,
                .relationaldatabasesnapshot,
                .staticip,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "Alarm"
            case .bucket: return "Bucket"
            case .certificate: return "Certificate"
            case .cloudformationstackrecord: return "CloudFormationStackRecord"
            case .contactmethod: return "ContactMethod"
            case .containerservice: return "ContainerService"
            case .disk: return "Disk"
            case .disksnapshot: return "DiskSnapshot"
            case .distribution: return "Distribution"
            case .domain: return "Domain"
            case .exportsnapshotrecord: return "ExportSnapshotRecord"
            case .instance: return "Instance"
            case .instancesnapshot: return "InstanceSnapshot"
            case .keypair: return "KeyPair"
            case .loadbalancer: return "LoadBalancer"
            case .loadbalancertlscertificate: return "LoadBalancerTlsCertificate"
            case .peeredvpc: return "PeeredVpc"
            case .relationaldatabase: return "RelationalDatabase"
            case .relationaldatabasesnapshot: return "RelationalDatabaseSnapshot"
            case .staticip: return "StaticIp"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension SendContactMethodVerificationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `protocol` = "protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
    }
}

extension SendContactMethodVerificationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SendContactMethodVerificationInput: Swift.Equatable {
    /// The protocol to verify, such as Email or SMS (text messaging).
    /// This member is required.
    public var `protocol`: LightsailClientTypes.ContactMethodVerificationProtocol?

    public init (
        `protocol`: LightsailClientTypes.ContactMethodVerificationProtocol? = nil
    )
    {
        self.`protocol` = `protocol`
    }
}

struct SendContactMethodVerificationInputBody: Swift.Equatable {
    let `protocol`: LightsailClientTypes.ContactMethodVerificationProtocol?
}

extension SendContactMethodVerificationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `protocol` = "protocol"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContactMethodVerificationProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension SendContactMethodVerificationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendContactMethodVerificationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendContactMethodVerificationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendContactMethodVerificationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SendContactMethodVerificationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct SendContactMethodVerificationOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct SendContactMethodVerificationOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension SendContactMethodVerificationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension ServiceException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A general service exception.
public struct ServiceException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct ServiceExceptionBody: Swift.Equatable {
    let code: Swift.String?
    let docs: Swift.String?
    let message: Swift.String?
    let tip: Swift.String?
}

extension ServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

extension SetIpAddressTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipAddressType
        case resourceName
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipAddressType = self.ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let resourceName = self.resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }
}

extension SetIpAddressTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetIpAddressTypeInput: Swift.Equatable {
    /// The IP address type to set for the specified resource. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6.
    /// This member is required.
    public var ipAddressType: LightsailClientTypes.IpAddressType?
    /// The name of the resource for which to set the IP address type.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The resource type. The possible values are Distribution, Instance, and LoadBalancer. Distribution-related APIs are available only in the N. Virginia (us-east-1) Amazon Web Services Region. Set your Amazon Web Services Region configuration to us-east-1 to create, view, or edit distributions.
    /// This member is required.
    public var resourceType: LightsailClientTypes.ResourceType?

    public init (
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        resourceName: Swift.String? = nil,
        resourceType: LightsailClientTypes.ResourceType? = nil
    )
    {
        self.ipAddressType = ipAddressType
        self.resourceName = resourceName
        self.resourceType = resourceType
    }
}

struct SetIpAddressTypeInputBody: Swift.Equatable {
    let resourceType: LightsailClientTypes.ResourceType?
    let resourceName: Swift.String?
    let ipAddressType: LightsailClientTypes.IpAddressType?
}

extension SetIpAddressTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipAddressType
        case resourceName
        case resourceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
    }
}

extension SetIpAddressTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetIpAddressTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetIpAddressTypeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetIpAddressTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SetIpAddressTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct SetIpAddressTypeOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct SetIpAddressTypeOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension SetIpAddressTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension SetResourceAccessForBucketInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case access
        case bucketName
        case resourceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let access = self.access {
            try encodeContainer.encode(access.rawValue, forKey: .access)
        }
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let resourceName = self.resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
    }
}

extension SetResourceAccessForBucketInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetResourceAccessForBucketInput: Swift.Equatable {
    /// The access setting. The following access settings are available:
    ///
    /// * allow - Allows access to the bucket and its objects.
    ///
    /// * deny - Denies access to the bucket and its objects. Use this setting to remove access for a resource previously set to allow.
    /// This member is required.
    public var access: LightsailClientTypes.ResourceBucketAccess?
    /// The name of the bucket for which to set access to another Lightsail resource.
    /// This member is required.
    public var bucketName: Swift.String?
    /// The name of the Lightsail instance for which to set bucket access. The instance must be in a running or stopped state.
    /// This member is required.
    public var resourceName: Swift.String?

    public init (
        access: LightsailClientTypes.ResourceBucketAccess? = nil,
        bucketName: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.access = access
        self.bucketName = bucketName
        self.resourceName = resourceName
    }
}

struct SetResourceAccessForBucketInputBody: Swift.Equatable {
    let resourceName: Swift.String?
    let bucketName: Swift.String?
    let access: LightsailClientTypes.ResourceBucketAccess?
}

extension SetResourceAccessForBucketInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case access
        case bucketName
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let accessDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceBucketAccess.self, forKey: .access)
        access = accessDecoded
    }
}

extension SetResourceAccessForBucketOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetResourceAccessForBucketOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetResourceAccessForBucketOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetResourceAccessForBucketOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SetResourceAccessForBucketOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct SetResourceAccessForBucketOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct SetResourceAccessForBucketOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension SetResourceAccessForBucketOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension StartInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

extension StartInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartInstanceInput: Swift.Equatable {
    /// The name of the instance (a virtual private server) to start.
    /// This member is required.
    public var instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct StartInstanceInputBody: Swift.Equatable {
    let instanceName: Swift.String?
}

extension StartInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension StartInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartInstanceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct StartInstanceOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct StartInstanceOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension StartInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension StartRelationalDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

extension StartRelationalDatabaseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartRelationalDatabaseInput: Swift.Equatable {
    /// The name of your database to start.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init (
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct StartRelationalDatabaseInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
}

extension StartRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
    }
}

extension StartRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct StartRelationalDatabaseOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct StartRelationalDatabaseOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension StartRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.StaticIp: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case attachedTo
        case createdAt
        case ipAddress
        case isAttached
        case location
        case name
        case resourceType
        case supportCode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let attachedTo = self.attachedTo {
            try encodeContainer.encode(attachedTo, forKey: .attachedTo)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let isAttached = self.isAttached {
            try encodeContainer.encode(isAttached, forKey: .isAttached)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let attachedToDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachedTo)
        attachedTo = attachedToDecoded
        let isAttachedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAttached)
        isAttached = isAttachedDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a static IP.
    public struct StaticIp: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the static IP (e.g., arn:aws:lightsail:us-east-2:123456789101:StaticIp/9cbb4a9e-f8e3-4dfe-b57e-12345EXAMPLE).
        public var arn: Swift.String?
        /// The instance where the static IP is attached (e.g., Amazon_Linux-1GB-Ohio-1).
        public var attachedTo: Swift.String?
        /// The timestamp when the static IP was created (e.g., 1479735304.222).
        public var createdAt: ClientRuntime.Date?
        /// The static IP address.
        public var ipAddress: Swift.String?
        /// A Boolean value indicating whether the static IP is attached.
        public var isAttached: Swift.Bool?
        /// The region and Availability Zone where the static IP was created.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the static IP (e.g., StaticIP-Ohio-EXAMPLE).
        public var name: Swift.String?
        /// The resource type (usually StaticIp).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?

        public init (
            arn: Swift.String? = nil,
            attachedTo: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            ipAddress: Swift.String? = nil,
            isAttached: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            supportCode: Swift.String? = nil
        )
        {
            self.arn = arn
            self.attachedTo = attachedTo
            self.createdAt = createdAt
            self.ipAddress = ipAddress
            self.isAttached = isAttached
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.supportCode = supportCode
        }
    }

}

extension LightsailClientTypes {
    public enum StatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusType] {
            return [
                .active,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .inactive: return "Inactive"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StatusType(rawValue: rawValue) ?? StatusType.sdkUnknown(rawValue)
        }
    }
}

extension StopInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case force
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let force = self.force {
            try encodeContainer.encode(force, forKey: .force)
        }
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

extension StopInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopInstanceInput: Swift.Equatable {
    /// When set to True, forces a Lightsail instance that is stuck in a stopping state to stop. Only use the force parameter if your instance is stuck in the stopping state. In any other state, your instance should stop normally without adding this parameter to your API request.
    public var force: Swift.Bool?
    /// The name of the instance (a virtual private server) to stop.
    /// This member is required.
    public var instanceName: Swift.String?

    public init (
        force: Swift.Bool? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.force = force
        self.instanceName = instanceName
    }
}

struct StopInstanceInputBody: Swift.Equatable {
    let instanceName: Swift.String?
    let force: Swift.Bool?
}

extension StopInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case force
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let forceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .force)
        force = forceDecoded
    }
}

extension StopInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopInstanceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct StopInstanceOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct StopInstanceOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension StopInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension StopRelationalDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let relationalDatabaseSnapshotName = self.relationalDatabaseSnapshotName {
            try encodeContainer.encode(relationalDatabaseSnapshotName, forKey: .relationalDatabaseSnapshotName)
        }
    }
}

extension StopRelationalDatabaseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopRelationalDatabaseInput: Swift.Equatable {
    /// The name of your database to stop.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// The name of your new database snapshot to be created before stopping your database.
    public var relationalDatabaseSnapshotName: Swift.String?

    public init (
        relationalDatabaseName: Swift.String? = nil,
        relationalDatabaseSnapshotName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
    }
}

struct StopRelationalDatabaseInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let relationalDatabaseSnapshotName: Swift.String?
}

extension StopRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let relationalDatabaseSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseSnapshotName)
        relationalDatabaseSnapshotName = relationalDatabaseSnapshotNameDecoded
    }
}

extension StopRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct StopRelationalDatabaseOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct StopRelationalDatabaseOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension StopRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension LightsailClientTypes {
    /// Describes a tag key and optional value assigned to an Amazon Lightsail resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
    public struct Tag: Swift.Equatable {
        /// The key of the tag. Constraints: Tag keys accept a maximum of 128 letters, numbers, spaces in UTF-8, or the following characters: + - = . _ : / @
        public var key: Swift.String?
        /// The value of the tag. Constraints: Tag values accept a maximum of 256 letters, numbers, spaces in UTF-8, or the following characters: + - = . _ : / @
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case resourceName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourceName = self.resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource to which you want to add a tag.
    public var resourceArn: Swift.String?
    /// The name of the resource to which you are adding tags.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The tag key and optional value.
    /// This member is required.
    public var tags: [LightsailClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.resourceName = resourceName
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceName: Swift.String?
    let resourceArn: Swift.String?
    let tags: [LightsailClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case resourceName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TagResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct TagResourceOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension TagResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension TestAlarmInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmName = self.alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }
}

extension TestAlarmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TestAlarmInput: Swift.Equatable {
    /// The name of the alarm to test.
    /// This member is required.
    public var alarmName: Swift.String?
    /// The alarm state to test. An alarm has the following possible states that can be tested:
    ///
    /// * ALARM - The metric is outside of the defined threshold.
    ///
    /// * INSUFFICIENT_DATA - The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.
    ///
    /// * OK - The metric is within the defined threshold.
    /// This member is required.
    public var state: LightsailClientTypes.AlarmState?

    public init (
        alarmName: Swift.String? = nil,
        state: LightsailClientTypes.AlarmState? = nil
    )
    {
        self.alarmName = alarmName
        self.state = state
    }
}

struct TestAlarmInputBody: Swift.Equatable {
    let alarmName: Swift.String?
    let state: LightsailClientTypes.AlarmState?
}

extension TestAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case state
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AlarmState.self, forKey: .state)
        state = stateDecoded
    }
}

extension TestAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TestAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TestAlarmOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TestAlarmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct TestAlarmOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct TestAlarmOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension TestAlarmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes {
    public enum TreatMissingData: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case breaching
        case ignore
        case missing
        case notbreaching
        case sdkUnknown(Swift.String)

        public static var allCases: [TreatMissingData] {
            return [
                .breaching,
                .ignore,
                .missing,
                .notbreaching,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .breaching: return "breaching"
            case .ignore: return "ignore"
            case .missing: return "missing"
            case .notbreaching: return "notBreaching"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TreatMissingData(rawValue: rawValue) ?? TreatMissingData.sdkUnknown(rawValue)
        }
    }
}

extension UnauthenticatedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnauthenticatedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Lightsail throws this exception when the user has not been authenticated.
public struct UnauthenticatedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct UnauthenticatedExceptionBody: Swift.Equatable {
    let code: Swift.String?
    let docs: Swift.String?
    let message: Swift.String?
    let tip: Swift.String?
}

extension UnauthenticatedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

extension UnpeerVpcInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension UnpeerVpcInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UnpeerVpcInput: Swift.Equatable {

    public init () { }
}

struct UnpeerVpcInputBody: Swift.Equatable {
}

extension UnpeerVpcInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UnpeerVpcOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UnpeerVpcOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UnpeerVpcOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UnpeerVpcOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnpeerVpcOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct UnpeerVpcOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct UnpeerVpcOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension UnpeerVpcOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case resourceName
        case tagKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourceName = self.resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource from which you want to remove a tag.
    public var resourceArn: Swift.String?
    /// The name of the resource from which you are removing a tag.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The tag keys to delete from the specified resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.resourceName = resourceName
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceName: Swift.String?
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case resourceName
        case tagKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UntagResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension UntagResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension UpdateBucketBundleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
        case bundleId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
    }
}

extension UpdateBucketBundleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateBucketBundleInput: Swift.Equatable {
    /// The name of the bucket for which to update the bundle.
    /// This member is required.
    public var bucketName: Swift.String?
    /// The ID of the new bundle to apply to the bucket. Use the [GetBucketBundles](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketBundles.html) action to get a list of bundle IDs that you can specify.
    /// This member is required.
    public var bundleId: Swift.String?

    public init (
        bucketName: Swift.String? = nil,
        bundleId: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.bundleId = bundleId
    }
}

struct UpdateBucketBundleInputBody: Swift.Equatable {
    let bucketName: Swift.String?
    let bundleId: Swift.String?
}

extension UpdateBucketBundleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
        case bundleId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
    }
}

extension UpdateBucketBundleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateBucketBundleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateBucketBundleOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateBucketBundleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateBucketBundleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct UpdateBucketBundleOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct UpdateBucketBundleOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension UpdateBucketBundleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension UpdateBucketInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessLogConfig
        case accessRules
        case bucketName
        case readonlyAccessAccounts
        case versioning
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessLogConfig = self.accessLogConfig {
            try encodeContainer.encode(accessLogConfig, forKey: .accessLogConfig)
        }
        if let accessRules = self.accessRules {
            try encodeContainer.encode(accessRules, forKey: .accessRules)
        }
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let readonlyAccessAccounts = readonlyAccessAccounts {
            var readonlyAccessAccountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readonlyAccessAccounts)
            for nonemptystring0 in readonlyAccessAccounts {
                try readonlyAccessAccountsContainer.encode(nonemptystring0)
            }
        }
        if let versioning = self.versioning {
            try encodeContainer.encode(versioning, forKey: .versioning)
        }
    }
}

extension UpdateBucketInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateBucketInput: Swift.Equatable {
    /// An object that describes the access log configuration for the bucket.
    public var accessLogConfig: LightsailClientTypes.BucketAccessLogConfig?
    /// An object that sets the public accessibility of objects in the specified bucket.
    public var accessRules: LightsailClientTypes.AccessRules?
    /// The name of the bucket to update.
    /// This member is required.
    public var bucketName: Swift.String?
    /// An array of strings to specify the Amazon Web Services account IDs that can access the bucket. You can give a maximum of 10 Amazon Web Services accounts access to a bucket.
    public var readonlyAccessAccounts: [Swift.String]?
    /// Specifies whether to enable or suspend versioning of objects in the bucket. The following options can be specified:
    ///
    /// * Enabled - Enables versioning of objects in the specified bucket.
    ///
    /// * Suspended - Suspends versioning of objects in the specified bucket. Existing object versions are retained.
    public var versioning: Swift.String?

    public init (
        accessLogConfig: LightsailClientTypes.BucketAccessLogConfig? = nil,
        accessRules: LightsailClientTypes.AccessRules? = nil,
        bucketName: Swift.String? = nil,
        readonlyAccessAccounts: [Swift.String]? = nil,
        versioning: Swift.String? = nil
    )
    {
        self.accessLogConfig = accessLogConfig
        self.accessRules = accessRules
        self.bucketName = bucketName
        self.readonlyAccessAccounts = readonlyAccessAccounts
        self.versioning = versioning
    }
}

struct UpdateBucketInputBody: Swift.Equatable {
    let bucketName: Swift.String?
    let accessRules: LightsailClientTypes.AccessRules?
    let versioning: Swift.String?
    let readonlyAccessAccounts: [Swift.String]?
    let accessLogConfig: LightsailClientTypes.BucketAccessLogConfig?
}

extension UpdateBucketInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessLogConfig
        case accessRules
        case bucketName
        case readonlyAccessAccounts
        case versioning
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let accessRulesDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AccessRules.self, forKey: .accessRules)
        accessRules = accessRulesDecoded
        let versioningDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versioning)
        versioning = versioningDecoded
        let readonlyAccessAccountsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readonlyAccessAccounts)
        var readonlyAccessAccountsDecoded0:[Swift.String]? = nil
        if let readonlyAccessAccountsContainer = readonlyAccessAccountsContainer {
            readonlyAccessAccountsDecoded0 = [Swift.String]()
            for string0 in readonlyAccessAccountsContainer {
                if let string0 = string0 {
                    readonlyAccessAccountsDecoded0?.append(string0)
                }
            }
        }
        readonlyAccessAccounts = readonlyAccessAccountsDecoded0
        let accessLogConfigDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BucketAccessLogConfig.self, forKey: .accessLogConfig)
        accessLogConfig = accessLogConfigDecoded
    }
}

extension UpdateBucketOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateBucketOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateBucketOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateBucketOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateBucketOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bucket = output.bucket
            self.operations = output.operations
        } else {
            self.bucket = nil
            self.operations = nil
        }
    }
}

public struct UpdateBucketOutputResponse: Swift.Equatable {
    /// An object that describes the bucket that is updated.
    public var bucket: LightsailClientTypes.Bucket?
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        bucket: LightsailClientTypes.Bucket? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.bucket = bucket
        self.operations = operations
    }
}

struct UpdateBucketOutputResponseBody: Swift.Equatable {
    let bucket: LightsailClientTypes.Bucket?
    let operations: [LightsailClientTypes.Operation]?
}

extension UpdateBucketOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Bucket.self, forKey: .bucket)
        bucket = bucketDecoded
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension UpdateContainerServiceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isDisabled
        case power
        case privateRegistryAccess
        case publicDomainNames
        case scale
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let isDisabled = self.isDisabled {
            try encodeContainer.encode(isDisabled, forKey: .isDisabled)
        }
        if let power = self.power {
            try encodeContainer.encode(power.rawValue, forKey: .power)
        }
        if let privateRegistryAccess = self.privateRegistryAccess {
            try encodeContainer.encode(privateRegistryAccess, forKey: .privateRegistryAccess)
        }
        if let publicDomainNames = publicDomainNames {
            var publicDomainNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .publicDomainNames)
            for (dictKey0, containerServicePublicDomains0) in publicDomainNames {
                var containerServicePublicDomains0Container = publicDomainNamesContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for string1 in containerServicePublicDomains0 {
                    try containerServicePublicDomains0Container.encode(string1)
                }
            }
        }
        if let scale = self.scale {
            try encodeContainer.encode(scale, forKey: .scale)
        }
    }
}

extension UpdateContainerServiceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateContainerServiceInput: Swift.Equatable {
    /// A Boolean value to indicate whether the container service is disabled.
    public var isDisabled: Swift.Bool?
    /// The power for the container service. The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the container service. The power and scale of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the power with the scale (the number of nodes) of the service. Use the GetContainerServicePowers action to view the specifications of each power option.
    public var power: LightsailClientTypes.ContainerServicePowerName?
    /// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
    public var privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccessRequest?
    /// The public domain names to use with the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the CreateCertificate action to create a certificate for the public domain names you want to use with your container service. You can specify public domain names using a string to array map as shown in the example later on this page.
    public var publicDomainNames: [Swift.String:[Swift.String]]?
    /// The scale for the container service. The scale specifies the allocated compute nodes of the container service. The power and scale of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the power with the scale (the number of nodes) of the service.
    public var scale: Swift.Int?
    /// The name of the container service to update.
    /// This member is required.
    public var serviceName: Swift.String?

    public init (
        isDisabled: Swift.Bool? = nil,
        power: LightsailClientTypes.ContainerServicePowerName? = nil,
        privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccessRequest? = nil,
        publicDomainNames: [Swift.String:[Swift.String]]? = nil,
        scale: Swift.Int? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.isDisabled = isDisabled
        self.power = power
        self.privateRegistryAccess = privateRegistryAccess
        self.publicDomainNames = publicDomainNames
        self.scale = scale
        self.serviceName = serviceName
    }
}

struct UpdateContainerServiceInputBody: Swift.Equatable {
    let power: LightsailClientTypes.ContainerServicePowerName?
    let scale: Swift.Int?
    let isDisabled: Swift.Bool?
    let publicDomainNames: [Swift.String:[Swift.String]]?
    let privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccessRequest?
}

extension UpdateContainerServiceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isDisabled
        case power
        case privateRegistryAccess
        case publicDomainNames
        case scale
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let powerDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServicePowerName.self, forKey: .power)
        power = powerDecoded
        let scaleDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scale)
        scale = scaleDecoded
        let isDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDisabled)
        isDisabled = isDisabledDecoded
        let publicDomainNamesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .publicDomainNames)
        var publicDomainNamesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let publicDomainNamesContainer = publicDomainNamesContainer {
            publicDomainNamesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, containerservicepublicdomainslist0) in publicDomainNamesContainer {
                var containerservicepublicdomainslist0Decoded0: [Swift.String]? = nil
                if let containerservicepublicdomainslist0 = containerservicepublicdomainslist0 {
                    containerservicepublicdomainslist0Decoded0 = [Swift.String]()
                    for string1 in containerservicepublicdomainslist0 {
                        if let string1 = string1 {
                            containerservicepublicdomainslist0Decoded0?.append(string1)
                        }
                    }
                }
                publicDomainNamesDecoded0?[key0] = containerservicepublicdomainslist0Decoded0
            }
        }
        publicDomainNames = publicDomainNamesDecoded0
        let privateRegistryAccessDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PrivateRegistryAccessRequest.self, forKey: .privateRegistryAccess)
        privateRegistryAccess = privateRegistryAccessDecoded
    }
}

extension UpdateContainerServiceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContainerServiceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateContainerServiceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContainerServiceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateContainerServiceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containerService = output.containerService
        } else {
            self.containerService = nil
        }
    }
}

public struct UpdateContainerServiceOutputResponse: Swift.Equatable {
    /// An object that describes a container service.
    public var containerService: LightsailClientTypes.ContainerService?

    public init (
        containerService: LightsailClientTypes.ContainerService? = nil
    )
    {
        self.containerService = containerService
    }
}

struct UpdateContainerServiceOutputResponseBody: Swift.Equatable {
    let containerService: LightsailClientTypes.ContainerService?
}

extension UpdateContainerServiceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerService
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerServiceDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerService.self, forKey: .containerService)
        containerService = containerServiceDecoded
    }
}

extension UpdateDistributionBundleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case distributionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let distributionName = self.distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
    }
}

extension UpdateDistributionBundleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDistributionBundleInput: Swift.Equatable {
    /// The bundle ID of the new bundle to apply to your distribution. Use the GetDistributionBundles action to get a list of distribution bundle IDs that you can specify.
    public var bundleId: Swift.String?
    /// The name of the distribution for which to update the bundle. Use the GetDistributions action to get a list of distribution names that you can specify.
    public var distributionName: Swift.String?

    public init (
        bundleId: Swift.String? = nil,
        distributionName: Swift.String? = nil
    )
    {
        self.bundleId = bundleId
        self.distributionName = distributionName
    }
}

struct UpdateDistributionBundleInputBody: Swift.Equatable {
    let distributionName: Swift.String?
    let bundleId: Swift.String?
}

extension UpdateDistributionBundleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case distributionName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
    }
}

extension UpdateDistributionBundleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDistributionBundleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateDistributionBundleOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDistributionBundleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateDistributionBundleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct UpdateDistributionBundleOutputResponse: Swift.Equatable {
    /// An object that describes the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct UpdateDistributionBundleOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension UpdateDistributionBundleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension UpdateDistributionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheBehaviorSettings
        case cacheBehaviors
        case defaultCacheBehavior
        case distributionName
        case isEnabled
        case origin
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cacheBehaviorSettings = self.cacheBehaviorSettings {
            try encodeContainer.encode(cacheBehaviorSettings, forKey: .cacheBehaviorSettings)
        }
        if let cacheBehaviors = cacheBehaviors {
            var cacheBehaviorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cacheBehaviors)
            for cachebehaviorperpath0 in cacheBehaviors {
                try cacheBehaviorsContainer.encode(cachebehaviorperpath0)
            }
        }
        if let defaultCacheBehavior = self.defaultCacheBehavior {
            try encodeContainer.encode(defaultCacheBehavior, forKey: .defaultCacheBehavior)
        }
        if let distributionName = self.distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
        if let isEnabled = self.isEnabled {
            try encodeContainer.encode(isEnabled, forKey: .isEnabled)
        }
        if let origin = self.origin {
            try encodeContainer.encode(origin, forKey: .origin)
        }
    }
}

extension UpdateDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDistributionInput: Swift.Equatable {
    /// An object that describes the cache behavior settings for the distribution. The cacheBehaviorSettings specified in your UpdateDistributionRequest will replace your distribution's existing settings.
    public var cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
    /// An array of objects that describe the per-path cache behavior for the distribution.
    public var cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
    /// An object that describes the default cache behavior for the distribution.
    public var defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
    /// The name of the distribution to update. Use the GetDistributions action to get a list of distribution names that you can specify.
    /// This member is required.
    public var distributionName: Swift.String?
    /// Indicates whether to enable the distribution.
    public var isEnabled: Swift.Bool?
    /// An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer. The distribution pulls, caches, and serves content from the origin.
    public var origin: LightsailClientTypes.InputOrigin?

    public init (
        cacheBehaviorSettings: LightsailClientTypes.CacheSettings? = nil,
        cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]? = nil,
        defaultCacheBehavior: LightsailClientTypes.CacheBehavior? = nil,
        distributionName: Swift.String? = nil,
        isEnabled: Swift.Bool? = nil,
        origin: LightsailClientTypes.InputOrigin? = nil
    )
    {
        self.cacheBehaviorSettings = cacheBehaviorSettings
        self.cacheBehaviors = cacheBehaviors
        self.defaultCacheBehavior = defaultCacheBehavior
        self.distributionName = distributionName
        self.isEnabled = isEnabled
        self.origin = origin
    }
}

struct UpdateDistributionInputBody: Swift.Equatable {
    let distributionName: Swift.String?
    let origin: LightsailClientTypes.InputOrigin?
    let defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
    let cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
    let cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
    let isEnabled: Swift.Bool?
}

extension UpdateDistributionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheBehaviorSettings
        case cacheBehaviors
        case defaultCacheBehavior
        case distributionName
        case isEnabled
        case origin
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let originDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InputOrigin.self, forKey: .origin)
        origin = originDecoded
        let defaultCacheBehaviorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheBehavior.self, forKey: .defaultCacheBehavior)
        defaultCacheBehavior = defaultCacheBehaviorDecoded
        let cacheBehaviorSettingsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheSettings.self, forKey: .cacheBehaviorSettings)
        cacheBehaviorSettings = cacheBehaviorSettingsDecoded
        let cacheBehaviorsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CacheBehaviorPerPath?].self, forKey: .cacheBehaviors)
        var cacheBehaviorsDecoded0:[LightsailClientTypes.CacheBehaviorPerPath]? = nil
        if let cacheBehaviorsContainer = cacheBehaviorsContainer {
            cacheBehaviorsDecoded0 = [LightsailClientTypes.CacheBehaviorPerPath]()
            for structure0 in cacheBehaviorsContainer {
                if let structure0 = structure0 {
                    cacheBehaviorsDecoded0?.append(structure0)
                }
            }
        }
        cacheBehaviors = cacheBehaviorsDecoded0
        let isEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isEnabled)
        isEnabled = isEnabledDecoded
    }
}

extension UpdateDistributionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDistributionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateDistributionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDistributionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateDistributionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct UpdateDistributionOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct UpdateDistributionOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension UpdateDistributionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension UpdateDomainEntryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainEntry
        case domainName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainEntry = self.domainEntry {
            try encodeContainer.encode(domainEntry, forKey: .domainEntry)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

extension UpdateDomainEntryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDomainEntryInput: Swift.Equatable {
    /// An array of key-value pairs containing information about the domain entry.
    /// This member is required.
    public var domainEntry: LightsailClientTypes.DomainEntry?
    /// The name of the domain recordset to update.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainEntry: LightsailClientTypes.DomainEntry? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.domainEntry = domainEntry
        self.domainName = domainName
    }
}

struct UpdateDomainEntryInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let domainEntry: LightsailClientTypes.DomainEntry?
}

extension UpdateDomainEntryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainEntry
        case domainName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let domainEntryDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DomainEntry.self, forKey: .domainEntry)
        domainEntry = domainEntryDecoded
    }
}

extension UpdateDomainEntryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDomainEntryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateDomainEntryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDomainEntryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateDomainEntryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct UpdateDomainEntryOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct UpdateDomainEntryOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension UpdateDomainEntryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension UpdateInstanceMetadataOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpEndpoint
        case httpProtocolIpv6
        case httpPutResponseHopLimit
        case httpTokens
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let httpEndpoint = self.httpEndpoint {
            try encodeContainer.encode(httpEndpoint.rawValue, forKey: .httpEndpoint)
        }
        if let httpProtocolIpv6 = self.httpProtocolIpv6 {
            try encodeContainer.encode(httpProtocolIpv6.rawValue, forKey: .httpProtocolIpv6)
        }
        if let httpPutResponseHopLimit = self.httpPutResponseHopLimit {
            try encodeContainer.encode(httpPutResponseHopLimit, forKey: .httpPutResponseHopLimit)
        }
        if let httpTokens = self.httpTokens {
            try encodeContainer.encode(httpTokens.rawValue, forKey: .httpTokens)
        }
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

extension UpdateInstanceMetadataOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateInstanceMetadataOptionsInput: Swift.Equatable {
    /// Enables or disables the HTTP metadata endpoint on your instances. If this parameter is not specified, the existing state is maintained. If you specify a value of disabled, you cannot access your instance metadata.
    public var httpEndpoint: LightsailClientTypes.HttpEndpoint?
    /// Enables or disables the IPv6 endpoint for the instance metadata service. This setting applies only when the HTTP metadata endpoint is enabled. This parameter is available only for instances in the Europe (Stockholm) Amazon Web Services Region (eu-north-1).
    public var httpProtocolIpv6: LightsailClientTypes.HttpProtocolIpv6?
    /// The desired HTTP PUT response hop limit for instance metadata requests. A larger number means that the instance metadata requests can travel farther. If no parameter is specified, the existing state is maintained.
    public var httpPutResponseHopLimit: Swift.Int?
    /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose whether to retrieve instance metadata with a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials by using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with all instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials. The version 1.0 credentials are not available.
    public var httpTokens: LightsailClientTypes.HttpTokens?
    /// The name of the instance for which to update metadata parameters.
    /// This member is required.
    public var instanceName: Swift.String?

    public init (
        httpEndpoint: LightsailClientTypes.HttpEndpoint? = nil,
        httpProtocolIpv6: LightsailClientTypes.HttpProtocolIpv6? = nil,
        httpPutResponseHopLimit: Swift.Int? = nil,
        httpTokens: LightsailClientTypes.HttpTokens? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.httpEndpoint = httpEndpoint
        self.httpProtocolIpv6 = httpProtocolIpv6
        self.httpPutResponseHopLimit = httpPutResponseHopLimit
        self.httpTokens = httpTokens
        self.instanceName = instanceName
    }
}

struct UpdateInstanceMetadataOptionsInputBody: Swift.Equatable {
    let instanceName: Swift.String?
    let httpTokens: LightsailClientTypes.HttpTokens?
    let httpEndpoint: LightsailClientTypes.HttpEndpoint?
    let httpPutResponseHopLimit: Swift.Int?
    let httpProtocolIpv6: LightsailClientTypes.HttpProtocolIpv6?
}

extension UpdateInstanceMetadataOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpEndpoint
        case httpProtocolIpv6
        case httpPutResponseHopLimit
        case httpTokens
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let httpTokensDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.HttpTokens.self, forKey: .httpTokens)
        httpTokens = httpTokensDecoded
        let httpEndpointDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.HttpEndpoint.self, forKey: .httpEndpoint)
        httpEndpoint = httpEndpointDecoded
        let httpPutResponseHopLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .httpPutResponseHopLimit)
        httpPutResponseHopLimit = httpPutResponseHopLimitDecoded
        let httpProtocolIpv6Decoded = try containerValues.decodeIfPresent(LightsailClientTypes.HttpProtocolIpv6.self, forKey: .httpProtocolIpv6)
        httpProtocolIpv6 = httpProtocolIpv6Decoded
    }
}

extension UpdateInstanceMetadataOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateInstanceMetadataOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateInstanceMetadataOptionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateInstanceMetadataOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateInstanceMetadataOptionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct UpdateInstanceMetadataOptionsOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct UpdateInstanceMetadataOptionsOutputResponseBody: Swift.Equatable {
    let operation: LightsailClientTypes.Operation?
}

extension UpdateInstanceMetadataOptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension UpdateLoadBalancerAttributeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName
        case attributeValue
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = self.attributeName {
            try encodeContainer.encode(attributeName.rawValue, forKey: .attributeName)
        }
        if let attributeValue = self.attributeValue {
            try encodeContainer.encode(attributeValue, forKey: .attributeValue)
        }
        if let loadBalancerName = self.loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

extension UpdateLoadBalancerAttributeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateLoadBalancerAttributeInput: Swift.Equatable {
    /// The name of the attribute you want to update.
    /// This member is required.
    public var attributeName: LightsailClientTypes.LoadBalancerAttributeName?
    /// The value that you want to specify for the attribute name. The following values are supported depending on what you specify for the attributeName request parameter:
    ///
    /// * If you specify HealthCheckPath for the attributeName request parameter, then the attributeValue request parameter must be the path to ping on the target (for example, /weather/us/wa/seattle).
    ///
    /// * If you specify SessionStickinessEnabled for the attributeName request parameter, then the attributeValue request parameter must be true to activate session stickiness or false to deactivate session stickiness.
    ///
    /// * If you specify SessionStickiness_LB_CookieDurationSeconds for the attributeName request parameter, then the attributeValue request parameter must be an interger that represents the cookie duration in seconds.
    ///
    /// * If you specify HttpsRedirectionEnabled for the attributeName request parameter, then the attributeValue request parameter must be true to activate HTTP to HTTPS redirection or false to deactivate HTTP to HTTPS redirection.
    ///
    /// * If you specify TlsPolicyName for the attributeName request parameter, then the attributeValue request parameter must be the name of the TLS policy. Use the [GetLoadBalancerTlsPolicies](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html) action to get a list of TLS policy names that you can specify.
    /// This member is required.
    public var attributeValue: Swift.String?
    /// The name of the load balancer that you want to modify (e.g., my-load-balancer.
    /// This member is required.
    public var loadBalancerName: Swift.String?

    public init (
        attributeName: LightsailClientTypes.LoadBalancerAttributeName? = nil,
        attributeValue: Swift.String? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.attributeName = attributeName
        self.attributeValue = attributeValue
        self.loadBalancerName = loadBalancerName
    }
}

struct UpdateLoadBalancerAttributeInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
    let attributeName: LightsailClientTypes.LoadBalancerAttributeName?
    let attributeValue: Swift.String?
}

extension UpdateLoadBalancerAttributeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName
        case attributeValue
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let attributeNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerAttributeName.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let attributeValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeValue)
        attributeValue = attributeValueDecoded
    }
}

extension UpdateLoadBalancerAttributeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateLoadBalancerAttributeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateLoadBalancerAttributeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateLoadBalancerAttributeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateLoadBalancerAttributeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct UpdateLoadBalancerAttributeOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct UpdateLoadBalancerAttributeOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension UpdateLoadBalancerAttributeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension UpdateRelationalDatabaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRelationalDatabaseInput(applyImmediately: \(Swift.String(describing: applyImmediately)), caCertificateIdentifier: \(Swift.String(describing: caCertificateIdentifier)), disableBackupRetention: \(Swift.String(describing: disableBackupRetention)), enableBackupRetention: \(Swift.String(describing: enableBackupRetention)), preferredBackupWindow: \(Swift.String(describing: preferredBackupWindow)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)), rotateMasterUserPassword: \(Swift.String(describing: rotateMasterUserPassword)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension UpdateRelationalDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyImmediately
        case caCertificateIdentifier
        case disableBackupRetention
        case enableBackupRetention
        case masterUserPassword
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseName
        case rotateMasterUserPassword
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applyImmediately = self.applyImmediately {
            try encodeContainer.encode(applyImmediately, forKey: .applyImmediately)
        }
        if let caCertificateIdentifier = self.caCertificateIdentifier {
            try encodeContainer.encode(caCertificateIdentifier, forKey: .caCertificateIdentifier)
        }
        if let disableBackupRetention = self.disableBackupRetention {
            try encodeContainer.encode(disableBackupRetention, forKey: .disableBackupRetention)
        }
        if let enableBackupRetention = self.enableBackupRetention {
            try encodeContainer.encode(enableBackupRetention, forKey: .enableBackupRetention)
        }
        if let masterUserPassword = self.masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
        if let preferredBackupWindow = self.preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = self.preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let publiclyAccessible = self.publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let rotateMasterUserPassword = self.rotateMasterUserPassword {
            try encodeContainer.encode(rotateMasterUserPassword, forKey: .rotateMasterUserPassword)
        }
    }
}

extension UpdateRelationalDatabaseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRelationalDatabaseInput: Swift.Equatable {
    /// When true, applies changes immediately. When false, applies changes during the preferred maintenance window. Some changes may cause an outage. Default: false
    public var applyImmediately: Swift.Bool?
    /// Indicates the certificate that needs to be associated with the database.
    public var caCertificateIdentifier: Swift.String?
    /// When true, disables automated backup retention for your database. Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database using the create relational database snapshot operation. Updates are applied during the next maintenance window because this can result in an outage.
    public var disableBackupRetention: Swift.Bool?
    /// When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
    public var enableBackupRetention: Swift.Bool?
    /// The password for the master user. The password can include any printable ASCII character except "/", """, or "@". MySQL Constraints: Must contain from 8 to 41 characters. PostgreSQL Constraints: Must contain from 8 to 128 characters.
    public var masterUserPassword: Swift.String?
    /// The daily time range during which automated backups are created for your database if automated backups are enabled. Constraints:
    ///
    /// * Must be in the hh24:mi-hh24:mi format. Example: 16:00-16:30
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?
    /// The weekly time range during which system maintenance can occur on your database. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. Constraints:
    ///
    /// * Must be in the ddd:hh24:mi-ddd:hh24:mi format.
    ///
    /// * Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
    ///
    /// * Must be at least 30 minutes.
    ///
    /// * Specified in Coordinated Universal Time (UTC).
    ///
    /// * Example: Tue:17:00-Tue:17:30
    public var preferredMaintenanceWindow: Swift.String?
    /// Specifies the accessibility options for your database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
    public var publiclyAccessible: Swift.Bool?
    /// The name of your Lightsail database resource to update.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?
    /// When true, the master user password is changed to a new strong password generated by Lightsail. Use the get relational database master user password operation to get the new password.
    public var rotateMasterUserPassword: Swift.Bool?

    public init (
        applyImmediately: Swift.Bool? = nil,
        caCertificateIdentifier: Swift.String? = nil,
        disableBackupRetention: Swift.Bool? = nil,
        enableBackupRetention: Swift.Bool? = nil,
        masterUserPassword: Swift.String? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        relationalDatabaseName: Swift.String? = nil,
        rotateMasterUserPassword: Swift.Bool? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.caCertificateIdentifier = caCertificateIdentifier
        self.disableBackupRetention = disableBackupRetention
        self.enableBackupRetention = enableBackupRetention
        self.masterUserPassword = masterUserPassword
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.relationalDatabaseName = relationalDatabaseName
        self.rotateMasterUserPassword = rotateMasterUserPassword
    }
}

struct UpdateRelationalDatabaseInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let masterUserPassword: Swift.String?
    let rotateMasterUserPassword: Swift.Bool?
    let preferredBackupWindow: Swift.String?
    let preferredMaintenanceWindow: Swift.String?
    let enableBackupRetention: Swift.Bool?
    let disableBackupRetention: Swift.Bool?
    let publiclyAccessible: Swift.Bool?
    let applyImmediately: Swift.Bool?
    let caCertificateIdentifier: Swift.String?
}

extension UpdateRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyImmediately
        case caCertificateIdentifier
        case disableBackupRetention
        case enableBackupRetention
        case masterUserPassword
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseName
        case rotateMasterUserPassword
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let rotateMasterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .rotateMasterUserPassword)
        rotateMasterUserPassword = rotateMasterUserPasswordDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let enableBackupRetentionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableBackupRetention)
        enableBackupRetention = enableBackupRetentionDecoded
        let disableBackupRetentionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableBackupRetention)
        disableBackupRetention = disableBackupRetentionDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let applyImmediatelyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .applyImmediately)
        applyImmediately = applyImmediatelyDecoded
        let caCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caCertificateIdentifier)
        caCertificateIdentifier = caCertificateIdentifierDecoded
    }
}

extension UpdateRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct UpdateRelationalDatabaseOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct UpdateRelationalDatabaseOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension UpdateRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension UpdateRelationalDatabaseParametersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameters
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for relationaldatabaseparameter0 in parameters {
                try parametersContainer.encode(relationaldatabaseparameter0)
            }
        }
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

extension UpdateRelationalDatabaseParametersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRelationalDatabaseParametersInput: Swift.Equatable {
    /// The database parameters to update.
    /// This member is required.
    public var parameters: [LightsailClientTypes.RelationalDatabaseParameter]?
    /// The name of your database for which to update parameters.
    /// This member is required.
    public var relationalDatabaseName: Swift.String?

    public init (
        parameters: [LightsailClientTypes.RelationalDatabaseParameter]? = nil,
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.parameters = parameters
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct UpdateRelationalDatabaseParametersInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let parameters: [LightsailClientTypes.RelationalDatabaseParameter]?
}

extension UpdateRelationalDatabaseParametersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameters
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let parametersContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabaseParameter?].self, forKey: .parameters)
        var parametersDecoded0:[LightsailClientTypes.RelationalDatabaseParameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [LightsailClientTypes.RelationalDatabaseParameter]()
            for structure0 in parametersContainer {
                if let structure0 = structure0 {
                    parametersDecoded0?.append(structure0)
                }
            }
        }
        parameters = parametersDecoded0
    }
}

extension UpdateRelationalDatabaseParametersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRelationalDatabaseParametersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRelationalDatabaseParametersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRelationalDatabaseParametersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateRelationalDatabaseParametersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct UpdateRelationalDatabaseParametersOutputResponse: Swift.Equatable {
    /// An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.
    public var operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct UpdateRelationalDatabaseParametersOutputResponseBody: Swift.Equatable {
    let operations: [LightsailClientTypes.Operation]?
}

extension UpdateRelationalDatabaseParametersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}
